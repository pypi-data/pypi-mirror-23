# coding: utf-8

"""
    BombBomb

    We make it easy to build relationships using simple videos.

    OpenAPI spec version: 2.0.24005
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class SocialsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def get_social_article_properties(self, jericho_id, email_id, originator_id, **kwargs):
        """
        Gets the social email properties
        Gets the social email properties

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_social_article_properties(jericho_id, email_id, originator_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str jericho_id: associated jericho Id (required)
        :param str email_id: This is the email Id for the email url (required)
        :param str originator_id: This is the originator Id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_social_article_properties_with_http_info(jericho_id, email_id, originator_id, **kwargs)
        else:
            (data) = self.get_social_article_properties_with_http_info(jericho_id, email_id, originator_id, **kwargs)
            return data

    def get_social_article_properties_with_http_info(self, jericho_id, email_id, originator_id, **kwargs):
        """
        Gets the social email properties
        Gets the social email properties

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_social_article_properties_with_http_info(jericho_id, email_id, originator_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str jericho_id: associated jericho Id (required)
        :param str email_id: This is the email Id for the email url (required)
        :param str originator_id: This is the originator Id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['jericho_id', 'email_id', 'originator_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_social_article_properties" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'jericho_id' is set
        if ('jericho_id' not in params) or (params['jericho_id'] is None):
            raise ValueError("Missing the required parameter `jericho_id` when calling `get_social_article_properties`")
        # verify the required parameter 'email_id' is set
        if ('email_id' not in params) or (params['email_id'] is None):
            raise ValueError("Missing the required parameter `email_id` when calling `get_social_article_properties`")
        # verify the required parameter 'originator_id' is set
        if ('originator_id' not in params) or (params['originator_id'] is None):
            raise ValueError("Missing the required parameter `originator_id` when calling `get_social_article_properties`")

        resource_path = '/socials/properties'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'jericho_id' in params:
            query_params['jerichoId'] = params['jericho_id']
        if 'email_id' in params:
            query_params['emailId'] = params['email_id']
        if 'originator_id' in params:
            query_params['originatorId'] = params['originator_id']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['BBOAuth2']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_social_auto_shares(self, client_group_id, **kwargs):
        """
        Gets the auto shares from the client group assoc id
        Gets the auto shares from the client group assoc id

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_social_auto_shares(client_group_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str client_group_id: ID of the client group association (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_social_auto_shares_with_http_info(client_group_id, **kwargs)
        else:
            (data) = self.get_social_auto_shares_with_http_info(client_group_id, **kwargs)
            return data

    def get_social_auto_shares_with_http_info(self, client_group_id, **kwargs):
        """
        Gets the auto shares from the client group assoc id
        Gets the auto shares from the client group assoc id

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_social_auto_shares_with_http_info(client_group_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str client_group_id: ID of the client group association (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['client_group_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_social_auto_shares" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'client_group_id' is set
        if ('client_group_id' not in params) or (params['client_group_id'] is None):
            raise ValueError("Missing the required parameter `client_group_id` when calling `get_social_auto_shares`")

        resource_path = '/socials/shares'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'client_group_id' in params:
            query_params['clientGroupId'] = params['client_group_id']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['BBOAuth2']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_social_permissions(self, social_type, **kwargs):
        """
        Get permissions for social integration
        Get permissions for social integration and has redirect for user to login

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_social_permissions(social_type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str social_type: Type of social integration (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_social_permissions_with_http_info(social_type, **kwargs)
        else:
            (data) = self.get_social_permissions_with_http_info(social_type, **kwargs)
            return data

    def get_social_permissions_with_http_info(self, social_type, **kwargs):
        """
        Get permissions for social integration
        Get permissions for social integration and has redirect for user to login

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_social_permissions_with_http_info(social_type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str social_type: Type of social integration (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['social_type']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_social_permissions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'social_type' is set
        if ('social_type' not in params) or (params['social_type'] is None):
            raise ValueError("Missing the required parameter `social_type` when calling `get_social_permissions`")

        resource_path = '/socials/permissions'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'social_type' in params:
            query_params['socialType'] = params['social_type']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['BBOAuth2']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_social_status(self, originator_id, **kwargs):
        """
        Gets the social state
        Gets the social state

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_social_status(originator_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str originator_id: associated originatorId (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_social_status_with_http_info(originator_id, **kwargs)
        else:
            (data) = self.get_social_status_with_http_info(originator_id, **kwargs)
            return data

    def get_social_status_with_http_info(self, originator_id, **kwargs):
        """
        Gets the social state
        Gets the social state

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_social_status_with_http_info(originator_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str originator_id: associated originatorId (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['originator_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_social_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'originator_id' is set
        if ('originator_id' not in params) or (params['originator_id'] is None):
            raise ValueError("Missing the required parameter `originator_id` when calling `get_social_status`")

        resource_path = '/socials/states'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'originator_id' in params:
            query_params['originatorId'] = params['originator_id']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['BBOAuth2']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def update_social_auto_shares(self, auto_share, client_group_id, **kwargs):
        """
        Gets the auto shares from the client group assoc id
        Gets the auto shares from the client group assoc id

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_social_auto_shares(auto_share, client_group_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str auto_share: The social share that will auto share to (required)
        :param str client_group_id: ID of the client group association (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_social_auto_shares_with_http_info(auto_share, client_group_id, **kwargs)
        else:
            (data) = self.update_social_auto_shares_with_http_info(auto_share, client_group_id, **kwargs)
            return data

    def update_social_auto_shares_with_http_info(self, auto_share, client_group_id, **kwargs):
        """
        Gets the auto shares from the client group assoc id
        Gets the auto shares from the client group assoc id

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_social_auto_shares_with_http_info(auto_share, client_group_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str auto_share: The social share that will auto share to (required)
        :param str client_group_id: ID of the client group association (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['auto_share', 'client_group_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_social_auto_shares" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'auto_share' is set
        if ('auto_share' not in params) or (params['auto_share'] is None):
            raise ValueError("Missing the required parameter `auto_share` when calling `update_social_auto_shares`")
        # verify the required parameter 'client_group_id' is set
        if ('client_group_id' not in params) or (params['client_group_id'] is None):
            raise ValueError("Missing the required parameter `client_group_id` when calling `update_social_auto_shares`")

        resource_path = '/socials/shares'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'auto_share' in params:
            form_params.append(('autoShare', params['auto_share']))
        if 'client_group_id' in params:
            form_params.append(('clientGroupId', params['client_group_id']))

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['BBOAuth2']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def update_social_message(self, message, originator_id, **kwargs):
        """
        Sets the users social message to what they typed in
        Sets the users social message to what they typed in

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_social_message(message, originator_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str message: The social message the user typed in (required)
        :param str originator_id: The parent id tied to the social share (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_social_message_with_http_info(message, originator_id, **kwargs)
        else:
            (data) = self.update_social_message_with_http_info(message, originator_id, **kwargs)
            return data

    def update_social_message_with_http_info(self, message, originator_id, **kwargs):
        """
        Sets the users social message to what they typed in
        Sets the users social message to what they typed in

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_social_message_with_http_info(message, originator_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str message: The social message the user typed in (required)
        :param str originator_id: The parent id tied to the social share (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['message', 'originator_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_social_message" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'message' is set
        if ('message' not in params) or (params['message'] is None):
            raise ValueError("Missing the required parameter `message` when calling `update_social_message`")
        # verify the required parameter 'originator_id' is set
        if ('originator_id' not in params) or (params['originator_id'] is None):
            raise ValueError("Missing the required parameter `originator_id` when calling `update_social_message`")

        resource_path = '/socials/message'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'message' in params:
            form_params.append(('message', params['message']))
        if 'originator_id' in params:
            form_params.append(('originatorId', params['originator_id']))

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['BBOAuth2']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def update_social_status(self, state, originator_id, **kwargs):
        """
        Updates the social state for the object
        Updates the social state for the object

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_social_status(state, originator_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str state: The state to set to (required)
        :param str originator_id: The parent id tied to the social share (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_social_status_with_http_info(state, originator_id, **kwargs)
        else:
            (data) = self.update_social_status_with_http_info(state, originator_id, **kwargs)
            return data

    def update_social_status_with_http_info(self, state, originator_id, **kwargs):
        """
        Updates the social state for the object
        Updates the social state for the object

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_social_status_with_http_info(state, originator_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str state: The state to set to (required)
        :param str originator_id: The parent id tied to the social share (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['state', 'originator_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_social_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'state' is set
        if ('state' not in params) or (params['state'] is None):
            raise ValueError("Missing the required parameter `state` when calling `update_social_status`")
        # verify the required parameter 'originator_id' is set
        if ('originator_id' not in params) or (params['originator_id'] is None):
            raise ValueError("Missing the required parameter `originator_id` when calling `update_social_status`")

        resource_path = '/socials/state'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'state' in params:
            form_params.append(('state', params['state']))
        if 'originator_id' in params:
            form_params.append(('originatorId', params['originator_id']))

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['BBOAuth2']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
