'\" t
.\"     Title: rdopkg
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.79.1 <http://docbook.sf.net/>
.\"      Date: 07/26/2017
.\"    Manual: \ \&
.\"    Source: \ \&
.\"  Language: English
.\"
.TH "RDOPKG" "1" "07/26/2017" "\ \&" "\ \&"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
rdopkg \- RDO packaging tool
.SH "SYNOPSIS"
.sp
rdopkg <action> <arg>\&...
.sp
rdopkg \-c
.sp
rdopkg \-h
.SH "DESCRIPTION"
.sp
\fBrdopkg\fR is a tool for automating RDO/RHOSP packaging tasks, such as introducing patches, updating packages to new versions and submitting packages to RDO\&.
.sp
Run rdopkg \-h to get available actions\&.
.SS "persistence"
.sp
rdopkg provides multi\-step actions where each step is (should be) idempotent so if something fails along the way or human interaction is required, rdopkg drops to shell, let\(cqs you rectify and then continue by running rdopkg \-\-continue (rdopkg \-c)\&.
.sp
The state is stored in \&.rdopkg\&.json file in current directory\&. Stored action can be inspected (rdopkg status), continued (rdopkg \-\-continue) or aborted (rdopkg \-\-abort)\&. rdopkg will refuse to start new multi\-step action if state file is present\&.
.SH "ACTIONS"
.SS "Important actions diagram"
.sp
\ \&
.sp
.if n \{\
.RS 4
.\}
.nf
         +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
        /  WHAT DO YOU NEED?  /
       +\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-+\-\-\-\-+
                  |
                  |
                  |
           build new package
                  |
                  v
           +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
          /  what change?  /
         +\-\-+\-\-\-\-\-+\-\-\-\-\-+\-+
            |     |     |
     +\-\-\-\-\-\-+     |     +\-\-\-\-\-\-\-\-+
     |            |              |
just update   introduce    update to new
  \&.spec       patch(es)   upstream version
     |            |              |
     |            |              |
     v            v              v
  +\-\-\-\-\-+     +\-\-\-\-\-\-\-+    +\-\-\-\-\-\-\-\-\-\-\-\-\-+
  | fix |     | patch |    | new\-version |
  +\-\-\-\-\-+     +\-\-\-\-\-\-\-+    +\-\-\-\-\-\-\-\-\-\-\-\-\-+
.fi
.if n \{\
.RE
.\}
.SS "ACTION: fix"
.sp
Make \&.spec file only changes\&.
.sp
\fBFlow:\fR
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Bump Release, prepare a new %changelog entry header\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Drop to shell, let user edit \&.spec file\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
After running
rdopkg, ensure description was added to %changelog and commit changes to new commit\&.
.RE
.sp
\fBExample:\fR
.sp
.if n \{\
.RS 4
.\}
.nf
cd python\-novaclient
rdopkg fix
vim python\-novaclient\&.spec
rdopkg \-c
.fi
.if n \{\
.RE
.\}
.SS "ACTION: patch"
.sp
Introduce new patches to the package\&.
.sp
This action works with patches branch (see AUTOMAGIC → patches branch)\&.
.sp
By default, rdopkg resets local patches branch to remote patches branch\&. You can skip this this with \-l/\-\-local\-patches to directly use local patches branch as is\&.
.sp
Don\(cqt forget to git fetch before running the action\&.
.sp
After running rdopkg patch, new commit will contain the changes if there are any\&.
.sp
You can use \-C/\-\-changelog option to select how rdopkg detects new/old patches and changelog message:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
detect: detect new/old patches using commit hash/subject (default)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
count: count old and new patches (doesn\(cqt work for simultaneous removal & addition of patches and rewriting \-patches history)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
plain: just use generic "\- Update patches" message
.RE
.sp
Or you can use \-B/\-\-no\-bump to skip Release bump and changelog generation and only update patch files and their references in the \&.spec file\&. This is useful when you only need to align distgit with patches branch\&.
.sp
\fBFlow:\fR
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Unless
\-l/\-\-local\-patches
was used, reset local patches branch to remote patches branch\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Update patch files from local patches branch\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Update \&.spec file with correct patch files references\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Unless \(oq\-B/\-\-no\-bump` was used, update \&.spec file: bump Release, create new %changelog entry with new patches\(cq titles depending on
\-C/\-\-changelog
option\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Create new commit with the changes using %changelog to generate commit message if available\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Display the diff\&.
.RE
.SS "ACTION: new\-version"
.sp
Update package to new upstream version\&.
.sp
This action works with patches branch (see AUTOMAGIC → patches branch)\&. After successful rebase, rdopkg will offer to push the rebased patches branch\&.
.sp
Required new\-version argument is a new version to rebase on, presumably a git version tag\&.
.sp
Don\(cqt forget to git fetch \-\-all before running the action\&.
.sp
You can use the \-N/\-\-new\-sources or \-n/\-\-no\-new\-sources options to control whether new\-version will run fedpkg new\-sources (rhpkg new\-sources on Red Hat downstream products)\&. By default, rdopkg will automatically enable or disable this step based on the dist\-git branch name\&. RH dist\-git branches (rhos\-*, rh\-*, ceph\-*, rhscon\-*) default to \-N\&. All other branches default to \-n\&.
.sp
After running rdopkg new\-version, new commit will contain the changes\&.
.sp
To only update \&.spec without touching patches branch, \-b/\-\-bump\-only can be used\&. Along with \-n/\-\-no\-new\-sources this enables local\-only operation, much like rpmdev\-bumpspec:
.sp
.if n \{\
.RS 4
.\}
.nf
rdopkg \-bn
.fi
.if n \{\
.RE
.\}
.sp
To note particular bugs in the changelog, use the \-B/\-\-bug option\&. rdopkg will append the supplied string to changelog in brackets\&. For example:
.sp
.if n \{\
.RS 4
.\}
.nf
rdopkg new\-version \-\-bug rhbz#1234,rhbz#5678
.fi
.if n \{\
.RE
.\}
.sp
will result in following %changelog line:
.sp
.if n \{\
.RS 4
.\}
.nf
Update to 1\&.1\&.1 (rhbz#1234,rhbz#5678)
.fi
.if n \{\
.RE
.\}
.sp
and corresponding Resolves: lines in commit message\&.
.sp
\fBFlow:\fR
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Show diff from previous version, especially changes to
requirements\&.txt\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Reset local patches branch to remote patches branch
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Rebase local patches branch on
$NEW_VERSION
tag\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Update
\&.spec
file: set
Version,
Release
and
patches_base
to appropriate values and create new %changelog entry\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Download source tarball\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Run
fedpkg new\-sources
(rhpkg new\-sources)\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Update patches from local patches branch (update\-patches
action)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Display the diff\&.
.RE
.sp
\fBExample:\fR
.sp
.if n \{\
.RS 4
.\}
.nf
cd python\-novaclient
git fetch \-\-all
rdopkg new\-version 2\&.15\&.0
# rebase failed, manually fix using git
rdopkg \-c
.fi
.if n \{\
.RE
.\}
.SS "ACTION: clone"
.sp
Clone an RDO package distgit and setup remotes\&.
.sp
clone uses rdoinfo metadata to clone the specified RDO package distgit and also setup relevant remotes to get you packaging quickly\&.
.sp
If your github username differs from your $USER, use \-u/\-\-review\-user\&.
.sp
\fBExample:\fR
.sp
.if n \{\
.RS 4
.\}
.nf
rdopkg clone \-u github\-user python\-novaclient
cd python\-novaclient
git remote \-v
.fi
.if n \{\
.RE
.\}
.SS "ACTION: update\-patches"
.sp
Update \&.spec file with patches from patches branch\&.
.sp
This is a core low level action used by other actions such as patch and new\-version to update dist\-git patches from patches branch\&. See AUTOMAGIC → patches branch for explanation\&.
.sp
update\-patches is a rework of now obsolete update\-patches\&.sh script with less restrictions and more features such as optional #patches_base, support for git am %{patches} method of applying patches and smart patches branch detection\&.
.sp
\fBMagic #patches_ignore comment:\fR
.sp
update\-patches also supports filtering out patches based on matching a regex provided by a magic #patches_ignore comment in the spec file\&. This is useful, for example, in case the patches branch contains changes that are related to the CI/code review infra, that are useful to keep around but don\(cqt need to end up in the RPM\&.
.sp
For example, if you add the following comments in your package\(cqs \&.spec file:
.sp
.if n \{\
.RS 4
.\}
.nf
# patches_base=10\&.2\&.5
# patches_ignore=DROP\-IN\-RPM
.fi
.if n \{\
.RE
.\}
.sp
then rdopkg will not create \&.patch files for any commits that have "DROP\-IN\-RPM" in the Git commit log\(cqs subject line\&.
.sp
Note: these lines should be directly above any Patch000X lines in your \&.spec file\&.
.sp
\fBFlow:\fR
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Export patches from patches branch using
git format\-patch
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Add these patches to dist\-git and edit
\&.spec
file to apply them
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Create new commit with the change (or amend previous with
\-a/\-\-amend)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If a "%global commit asdf1234" macro declaration is present, rewrite it with the current sha1 of the patches branch\&. (This makes the sha1 value available during your package\(cqs build process\&. You can use this to build your program so that "mycoolprogram \-\-version" could display the sha1 to users\&.)
.RE
.sp
\fBExample:\fR
.sp
.if n \{\
.RS 4
.\}
.nf
rdopkg update\-patches
.fi
.if n \{\
.RE
.\}
.SS "ACTION: query"
.sp
Query RDO/distro repos for available package versions\&.
.sp
See rdopkg\-adv\-requirements(7) for complete example of query and other requirements management actions\&.
.sp
This action uses repoquery to discover latest package versions available from RDO and other repos available on a supported distibution\&.
.sp
See output of rdopkg info for supported releases and distros\&.
.sp
\fBQuery specific RELEASE/DIST:\fR
.sp
.if n \{\
.RS 4
.\}
.nf
rdopkg query kilo/el7 openstack\-nova
.fi
.if n \{\
.RE
.\}
.sp
\fBQuery all dists of a release and show what\(cqs happening:\fR
.sp
.if n \{\
.RS 4
.\}
.nf
rdopkg query \-v kilo openstack\-nova
.fi
.if n \{\
.RE
.\}
.SS "ACTION: reqquery"
.sp
Query RDO/distro repos for versions defined in requirements\&.txt\&.
.sp
See rdopkg\-adv\-requirements(7) for complete example of reqquery and other requirements management actions\&.
.sp
This action essentially runs rdopkg query on every module/package defined in requirements\&.txt and prints colorful report to quickly find unmet dependencies\&. It accepts the same RELEAESE/DIST filter as rdopkg query\&.
.sp
Python module names listed in requirements\&.txt are mapped to package names using rdopkg\&.actionmods\&.pymod2pkg module\&.
.sp
\fBQuery \fR\fBrequirements\&.txt\fR\fB from \fR\fB2015\&.1\fR\fB tag:\fR
.sp
.if n \{\
.RS 4
.\}
.nf
rdopkg reqquery \-R 2015\&.1 kilo/el7
.fi
.if n \{\
.RE
.\}
.sp
\fBQuery \fR\fBrequirements\&.txt\fR\fB file:\fR
.sp
.if n \{\
.RS 4
.\}
.nf
rdopkg reqquery \-r path/to/requirements\&.txt kilo/f21
.fi
.if n \{\
.RE
.\}
.sp
\fBQuery \fR\fB\&.spec\fR\fB Requires (experimental):\fR
.sp
.if n \{\
.RS 4
.\}
.nf
rdopkg reqquery \-s
.fi
.if n \{\
.RE
.\}
.sp
\fBVerbosely dump query results to a file and view them:\fR
.sp
.if n \{\
.RS 4
.\}
.nf
rdopkg reqquery \-v \-d
rdopkg reqquery \-l
.fi
.if n \{\
.RE
.\}
.SS "ACTION: reqcheck"
.sp
Inspect requirements\&.txt vs \&.spec Requires\&.
.sp
See rdopkg\-adv\-requirements(7) for complete example of reqcheck and other requirements management actions\&.
.sp
This action parses current requirements\&.txt from git and checks whether they\(cqre met in the \&.spec file\&. Simple report is printed\&.
.sp
Python module names listed in requirements\&.txt are mapped to package names using rdopkg\&.actionmods\&.pymod2pkg module\&.
.sp
Use \-\-spec/\-s option to output Requires: suitable for pasting into \&.spec files\&. Version comparisons are hidden, whitespace is detected from \&.spec\&.
.sp
\fBExample:\fR
.sp
.if n \{\
.RS 4
.\}
.nf
rdopkg reqcheck
rdopkg reqcheck \-s
.fi
.if n \{\
.RE
.\}
.SS "ACTION: reqdiff"
.sp
Show pretty diff of requirements\&.txt\&.
.sp
See rdopkg\-adv\-requirements(7) for complete example of reqdiff and other requirements management actions\&.
.sp
Use this to see how requirements changed between versions\&.
.sp
\fBSee diff between current and latest upstream version (automagic):\fR
.sp
.if n \{\
.RS 4
.\}
.nf
rdopkg reqdiff
.fi
.if n \{\
.RE
.\}
.sp
\fBSee diff between current and specified version:\fR
.sp
.if n \{\
.RS 4
.\}
.nf
rdopkg reqdiff 2015\&.1
.fi
.if n \{\
.RE
.\}
.sp
\fBSee diff between two supplied versions:\fR
.sp
.if n \{\
.RS 4
.\}
.nf
rdopkg reqdiff 2015\&.1 2015\&.2
.fi
.if n \{\
.RE
.\}
.SS "ACTION: kojibuild"
.sp
Build the package in koji\&.
.sp
See rdopkg\-adv\-building(7) for complete example of building and submitting packages for RDO\&.
.sp
This is esentaially a wrapper over fedpkg build with added value of generating update entries for rdopkg update\&.
.sp
\fBFlow:\fR
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Run equivalent of
fedpkg build
using disgusting
fedpkg
python module\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Watch the build\&.
.RE
.sp
\fBExample:\fR
.sp
.if n \{\
.RS 4
.\}
.nf
rdopkg kojibuild
.fi
.if n \{\
.RE
.\}
.SS "ACTION: coprbuild"
.sp
Build the package in copr\-jruzicka\&.
.sp
See rdopkg\-adv\-building(7) for complete example including instructions how to setup copr, obtain permissions, build, submit update, and more\&.
.sp
\fBPlease\fR, try to do coprbuild after successful kojibuild to ensure same SRPM for both builds\&. This will be automated further in the future\&.
.sp
\-r/\-\-release and \-d/\-\-dist are autodetected from current branch if possible\&. These are used to select right copr to build in\&.
.sp
\fBFlow:\fR
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Create the source RPM from current dist\-git\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Upload the source RPM to your
fedorapeople\&.org:~/public_html/copr\&. (specify Fedora user with
\-u/\-\-fuser)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Submit the source RPM to build in
jruzicka / rdo\-$RELEASE\-$DIST
copr\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Watch the build\&.
.RE
.sp
\fBExample:\fR
.sp
.if n \{\
.RS 4
.\}
.nf
rdopkg coprbuild
.fi
.if n \{\
.RE
.\}
.SS "ACTION: amend"
.sp
Amend last git commit with current dist\-git changes and (re)generate the commit message from %changelog\&.
.sp
This simple action is equivalent to running
.sp
.if n \{\
.RS 4
.\}
.nf
git commit \-a \-\-amend \-m "$AUTOMAGIC_COMMIT_MESSAGE"
.fi
.if n \{\
.RE
.\}
.sp
See AUTOMAGIC → commit message for more information about the generated commit message\&.
.SS "ACTION: squash"
.sp
Squash last git commit into previous one\&. Commit message of previous commit is used\&.
.sp
This simple action is a shortcut for
.sp
.if n \{\
.RS 4
.\}
.nf
git reset \-\-soft HEAD~
git commit \-\-amend \-\-no\-edit
.fi
.if n \{\
.RE
.\}
.sp
This is useful for squashing commits created by lower level actions such as update\-patches\&.
.SS "ACTION: get\-sources"
.sp
Download package source archive\&.
.sp
Currently, Source0 from \&.spec file is downloaded\&.
.SS "ACTION: info"
.sp
Show information about RDO packaging\&.
.sp
Use this command to find out about:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
currently supported RDO OpenStack releses
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
which distros are supported for each release
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
what branch to build from
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
what build system to build in
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
supported packages
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
various repositories tied to a package
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
package maintainers
.RE
.sp
This command is a human interface to rdoinfo\&.
.sp
\fBReleases/dists/branches overview:\fR
.sp
.if n \{\
.RS 4
.\}
.nf
rdopkg info
.fi
.if n \{\
.RE
.\}
.sp
\fBDetailed information about a package:\fR
.sp
.if n \{\
.RS 4
.\}
.nf
rdopkg info novaclient
.fi
.if n \{\
.RE
.\}
.sp
\fBFilter packages by maintainers:\fR
.sp
.if n \{\
.RS 4
.\}
.nf
rdopkg info maintainers:jruzicka
.fi
.if n \{\
.RE
.\}
.SS "ACTION: info\-tags\-diff"
.sp
Show rdoinfo tag changes\&.
.sp
.if n \{\
.RS 4
.\}
.nf
rdopkg info\-tags\-diff RDOINFODIR
.fi
.if n \{\
.RE
.\}
.sp
will show per\-package new/changed tags in rdoinfo between HEAD~\&.\&.HEAD\&.
.sp
For an existing or new package, a list of changed tags is returned
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
$ rdopkg info\-tags\-diff ~/\&.rdopkg/rdoinfo
openstack\-changed [\*(Aqnewton\-uc\*(Aq, \*(Aqnewton\*(Aq]
openstack\-new\-pkg [\*(Aqunder\-review\*(Aq]
.fi
.if n \{\
.RE
.\}
.sp
This is an interface to rdopkg\&.actionmods\&.rdoinfo:tags_diff()\&.
.SS "ACTION: findpkg"
.sp
Find and show single best matching package in rdoinfo\&.
.sp
This command produces same output as rdopkg info but
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
smart search is performed on package name, project name and upstream URL
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
only a single matching package is shown
.RE
.sp
Use \-s/\-\-strict to disable magic substring search and only match whole fields\&.
.sp
This command is a human interface to rdopkg\&.actionmods\&.rdoinfo\&.find_package() helper function\&.
.sp
\fBExamples of usage:\fR
.sp
.if n \{\
.RS 4
.\}
.nf
rdopkg findpkg nova
rdopkg findpkg \-s openstack\-nova
rdopkg findpkg git://git\&.openstack\&.org/openstack/nova
rdopkg findpkg openstack/nova
rdopkg findpkg novacli
.fi
.if n \{\
.RE
.\}
.SS "ACTION: conf"
.sp
Display rdopkg\(cqs local configuration\&.
.sp
This command prints the default configuration that ships with rdopkg out of the box\&. You can override the individual settings here by using \&.py files in the configuration directories\&.
.sp
Store your per\-user configuration in ~/\&.rdopkg/conf\&.d/*\&.py, or store system\-wide configuration in /etc/rdopkg\&.d/*\&.py\&.
.SS "ACTION: tag\-patches"
.sp
Tag the local \-patches branch with the package\(cqs Name\-Version\-Release\&.
.sp
Since the \-patches branch can change over time, including rebases, rewrites, etc, we need a mechanism to keep historical records of what the \-patches branch looked like over time\&. Tagging the \-patches branch for each new NVR will maintain Git references to each snapshot of the particular patches that went into each build\&.
.sp
To look at the \-patches branch for an old build, you can simply "git checkout name\-version\-release" for that build and get an exact representation of the Git tree for that build\&.
.sp
If a previous tag exists with this name, rdopkg will exit with an error unless you use the \-\-force option to overwrite the existing tag with this name\&.
.sp
You can automatically push the new tag with the \-\-push option\&. It\(cqs a good idea to create and push the tag after every successful build\&.
.SH "AUTOMAGIC"
.sp
Instead of requiring project config files or endless lists of command line arguments, rdopkg tries to guess all the neccessary variables\&.
.SS "patches branch"
.sp
update\-patches is a core lower level action for updating dist\-git \&.spec file with patches from associated patches branch\&. rdopkg tries hard to detect the patches branch automagically, it\(cqs usually $BRANCH\-patches for $BRANCH dist\-git but one patches branch per multiple dist\-gits is also supported\&.
.sp
Best illustrated by example, following are all valid patches branches for rhos\-5\&.0\-rhel\-7 dist\-git and they\(cqre searched in that order:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
rhos\-5\&.0\-rhel\-7\-patches
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
rhos\-5\&.0\-rhel\-patches
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBrhos\-5\&.0\-patches ←\-\- preferred for RHOSP\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
rhos\-patches
.RE
.sp
Use rdopkg pkgenv to check detected patches branch\&.
.sp
You can specify remote patches branch by \-p/\-\-patches\-branch action parameter for actions that use it, such as patch and new\-version\&.
.sp
You may explicitly set the name of your patches remote and patches branch in your git configuration using the rdopkg\&.<branch>\&.patches\-remote and rdopkg\&.<branch>\&.patches\-branch options\&. For example, if you are working on a dist\-git branch named rhel\-7\&.4 and you want to use rhel\-7\-patches for your patches branch, you would run:
.sp
.if n \{\
.RS 4
.\}
.nf
git config rdopkg\&.rhel\-7\&.4\&.patches\-branch rhel\-7\-patches
.fi
.if n \{\
.RE
.\}
.SS "patches base"
.sp
rdopkg calculates the git tag on which you are applying patches from the Version tag in your \&.spec file\&. If your \&.spec file contains a macro named milestone, the value of this macro will be appended to the version\&. That is, if your spec file has:
.sp
.if n \{\
.RS 4
.\}
.nf
Version: 2014\&.2\&.3
.fi
.if n \{\
.RE
.\}
.sp
Then rdopkg will use 2014\&.2\&.3 as the base\&. If instead your \&.spec file has:
.sp
.if n \{\
.RS 4
.\}
.nf
%global milestone rc2
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Version: 2014\&.2\&.3
.fi
.if n \{\
.RE
.\}
.sp
Then rdopkg will use 2014\&.2\&.3rc2 as the base\&.
.sp
In older versions of rodpkg, it was was necessary to explicitly set the patch base using a special patches_base comment in your spec file\&. This is now \fBoptional\fR behavior (the patches base is calculated automatically), but you can use this if you need to override the automatic behavior\&.
.sp
The most common use of patches_base is to specify number of patches on top of patches base (which defaults to spec Version) to skip:
.sp
.if n \{\
.RS 4
.\}
.nf
# patches_base=+2
.fi
.if n \{\
.RE
.\}
.sp
You can set an arbitrary git revision as a patches base:
.sp
.if n \{\
.RS 4
.\}
.nf
# patches_base=1\&.2\&.3+2
.fi
.if n \{\
.RE
.\}
.sp
You shouldn\(cqt need to modify this by hand (other than perhaps the number of skipped patches) as rdopkg manages patches_base as needed\&.
.SS "commit message"
.sp
Actions modifying dist\-git generate commit message from %changelog\&.
.sp
First line of commit message is first line from latest %changelog entry\&.
.sp
If there are multiple lines in latest %changelog entry, entire entry is listed in the commit message\&.
.sp
For each "(rhbz#XYZ)" mentioned in latest %changelog entry, "Resolves: rhbz#XYZ" is appended to commit message as required by RHOSP workflow\&.
.sp
If you need to (re)generate commit message after modifying %changelog, use \fBACTION: amend\fR\&.
.sp
For example following %changelog entry:
.sp
.if n \{\
.RS 4
.\}
.nf
%changelog
* Tue Feb 11 2014 Jakub Ruzicka <jruzicka@redhat\&.com> 0\&.5\&.1\-2
\- Update to upstream 0\&.5\&.1
\- Fix evil Bug of Doom (rhbz#123456)
.fi
.if n \{\
.RE
.\}
.sp
will generate following commit message:
.sp
.if n \{\
.RS 4
.\}
.nf
Update to upstream 0\&.5\&.1
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Resolves: rhbz#123456
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Changelog:
\- Update to upstream 0\&.5\&.1
\- Fix evil Bug of Doom (rhbz#123456)
.fi
.if n \{\
.RE
.\}
.SS "rdoinfo"
.sp
rdoinfo is a special utility repository with RDO metadata:
.sp
https://github\&.com/redhat\-openstack/rdoinfo
.sp
rdopkg uses rdoinfo to
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
detect release/dist from branch name
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
check valid RDO updates
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
query packages from RDO/distribution repos
.RE
.sp
and more\&.
.sp
You can view the rdoinfo metada using rdopkg info\&.
.sp
rdopkg\&.actionmods\&.rdoinfo module provides convenient interface to rdoinfo should you want to integrate it into your codez\&.
.SH "SEE ALSO"
.sp
rdopkg\-adv\-new\-version(7), rdopkg\-adv\-building(7), rdopkg\-adv\-requirements(7)
.SH "CONTACT"
.sp
rdopkg is maintained by Jakub Ruzicka <jruzicka@redhat\&.com>\&.
.sp
Bugs are tracked in Red Hat Bugzilla:
.sp
https://bugzilla\&.redhat\&.com/buglist\&.cgi?component=rdopkg
.sp
To report a new bug:
.sp
https://bugzilla\&.redhat\&.com/enter_bug\&.cgi?product=RDO&component=rdopkg
