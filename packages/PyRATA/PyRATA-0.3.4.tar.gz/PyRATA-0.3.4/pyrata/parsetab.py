
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'expressionleftLBRACKETRBRACKETleftORleftANDleftLPARENRPARENrightNOTleftEQNAME VALUE EQ MATCH IN AND OR LBRACKET RBRACKET LPAREN RPAREN NOT OPTION ATLEASTONE ANY BEFORE_FIRST_TOKEN AFTER_LAST_TOKEN CHUNKexpression : \n       expression : quantified_step_group_list\n       expression : BEFORE_FIRST_TOKEN quantified_step_group_list\n       expression : quantified_step_group_list AFTER_LAST_TOKEN\n       expression : BEFORE_FIRST_TOKEN quantified_step_group_list AFTER_LAST_TOKEN quantified_step_group_list : quantified_step_group \n                                   | quantified_step_group_list quantified_step_group   quantified_step_group : step_group\n            | step_group OPTION\n            | step_group ATLEASTONE \n            | step_group ANY \n            step_group : step\n                  | LPAREN step_group_class RPARENstep_group_class : quantified_step_group_list\n                        | step_group_class OR quantified_step_group_liststep : single_constraint\n            | LBRACKET constraint_class RBRACKET constraint_class : constraint_class AND constraint_class_part\n            | constraint_class OR constraint_class_part \n            | constraint_class_part constraint_class_part : single_constraint\n                    | LPAREN constraint_class RPAREN  \n                    | NOT constraint_class single_constraint : NAME EQ VALUE \n                          | NAME MATCH VALUE\n                          | NAME IN VALUE'
    
_lr_action_items = {'VALUE':([12,13,14,],[28,29,30,]),'MATCH':([3,],[14,]),'ANY':([1,8,10,28,29,30,34,36,],[-12,25,-16,-26,-24,-25,-17,-13,]),'LPAREN':([0,1,2,4,5,6,7,8,10,11,15,16,20,23,24,25,26,28,29,30,33,34,35,36,37,41,],[6,-12,6,15,6,6,-6,-8,-16,6,15,15,-7,6,-9,-11,-10,-26,-24,-25,15,-17,15,-13,6,6,]),'AFTER_LAST_TOKEN':([1,5,7,8,10,11,20,24,25,26,28,29,30,34,36,],[-12,21,-6,-8,-16,27,-7,-9,-11,-10,-26,-24,-25,-17,-13,]),'NOT':([4,15,16,33,35,],[16,16,16,16,16,]),'EQ':([3,],[13,]),'AND':([17,18,19,28,29,30,31,32,38,39,40,],[-20,33,-21,-26,-24,-25,33,-23,-22,-18,-19,]),'BEFORE_FIRST_TOKEN':([0,],[2,]),'NAME':([0,1,2,4,5,6,7,8,10,11,15,16,20,23,24,25,26,28,29,30,33,34,35,36,37,41,],[3,-12,3,3,3,3,-6,-8,-16,3,3,3,-7,3,-9,-11,-10,-26,-24,-25,3,-17,3,-13,3,3,]),'IN':([3,],[12,]),'ATLEASTONE':([1,8,10,28,29,30,34,36,],[-12,26,-16,-26,-24,-25,-17,-13,]),'$end':([0,1,5,7,8,9,10,11,20,21,24,25,26,27,28,29,30,34,36,],[-1,-12,-2,-6,-8,0,-16,-3,-7,-4,-9,-11,-10,-5,-26,-24,-25,-17,-13,]),'LBRACKET':([0,1,2,5,6,7,8,10,11,20,23,24,25,26,28,29,30,34,36,37,41,],[4,-12,4,4,4,-6,-8,-16,4,-7,4,-9,-11,-10,-26,-24,-25,-17,-13,4,4,]),'OPTION':([1,8,10,28,29,30,34,36,],[-12,24,-16,-26,-24,-25,-17,-13,]),'RPAREN':([1,7,8,10,17,19,20,22,23,24,25,26,28,29,30,31,32,34,36,38,39,40,41,],[-12,-6,-8,-16,-20,-21,-7,36,-14,-9,-11,-10,-26,-24,-25,38,-23,-17,-13,-22,-18,-19,-15,]),'OR':([1,7,8,10,17,18,19,20,22,23,24,25,26,28,29,30,31,32,34,36,38,39,40,41,],[-12,-6,-8,-16,-20,35,-21,-7,37,-14,-9,-11,-10,-26,-24,-25,35,-23,-17,-13,-22,-18,-19,-15,]),'RBRACKET':([17,18,19,28,29,30,32,38,39,40,],[-20,34,-21,-26,-24,-25,-23,-22,-18,-19,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'step':([0,2,5,6,11,23,37,41,],[1,1,1,1,1,1,1,1,]),'constraint_class_part':([4,15,16,33,35,],[17,17,17,39,40,]),'step_group_class':([6,],[22,]),'step_group':([0,2,5,6,11,23,37,41,],[8,8,8,8,8,8,8,8,]),'constraint_class':([4,15,16,],[18,31,32,]),'expression':([0,],[9,]),'single_constraint':([0,2,4,5,6,11,15,16,23,33,35,37,41,],[10,10,19,10,10,10,19,19,10,19,19,10,10,]),'quantified_step_group_list':([0,2,6,37,],[5,11,23,41,]),'quantified_step_group':([0,2,5,6,11,23,37,41,],[7,7,20,7,20,20,7,20,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> <empty>','expression',0,'p_expression','syntactic_pattern_parser.py',99),
  ('expression -> quantified_step_group_list','expression',1,'p_expression','syntactic_pattern_parser.py',100),
  ('expression -> BEFORE_FIRST_TOKEN quantified_step_group_list','expression',2,'p_expression','syntactic_pattern_parser.py',101),
  ('expression -> quantified_step_group_list AFTER_LAST_TOKEN','expression',2,'p_expression','syntactic_pattern_parser.py',102),
  ('expression -> BEFORE_FIRST_TOKEN quantified_step_group_list AFTER_LAST_TOKEN','expression',3,'p_expression','syntactic_pattern_parser.py',103),
  ('quantified_step_group_list -> quantified_step_group','quantified_step_group_list',1,'p_quantified_step_group_list','syntactic_pattern_parser.py',135),
  ('quantified_step_group_list -> quantified_step_group_list quantified_step_group','quantified_step_group_list',2,'p_quantified_step_group_list','syntactic_pattern_parser.py',136),
  ('quantified_step_group -> step_group','quantified_step_group',1,'p_quantified_step_group','syntactic_pattern_parser.py',157),
  ('quantified_step_group -> step_group OPTION','quantified_step_group',2,'p_quantified_step_group','syntactic_pattern_parser.py',158),
  ('quantified_step_group -> step_group ATLEASTONE','quantified_step_group',2,'p_quantified_step_group','syntactic_pattern_parser.py',159),
  ('quantified_step_group -> step_group ANY','quantified_step_group',2,'p_quantified_step_group','syntactic_pattern_parser.py',160),
  ('step_group -> step','step_group',1,'p_step_group','syntactic_pattern_parser.py',204),
  ('step_group -> LPAREN step_group_class RPAREN','step_group',3,'p_step_group','syntactic_pattern_parser.py',205),
  ('step_group_class -> quantified_step_group_list','step_group_class',1,'p_step_group_class','syntactic_pattern_parser.py',238),
  ('step_group_class -> step_group_class OR quantified_step_group_list','step_group_class',3,'p_step_group_class','syntactic_pattern_parser.py',239),
  ('step -> single_constraint','step',1,'p_step','syntactic_pattern_parser.py',278),
  ('step -> LBRACKET constraint_class RBRACKET','step',3,'p_step','syntactic_pattern_parser.py',279),
  ('constraint_class -> constraint_class AND constraint_class_part','constraint_class',3,'p_constraint_class','syntactic_pattern_parser.py',299),
  ('constraint_class -> constraint_class OR constraint_class_part','constraint_class',3,'p_constraint_class','syntactic_pattern_parser.py',300),
  ('constraint_class -> constraint_class_part','constraint_class',1,'p_constraint_class','syntactic_pattern_parser.py',301),
  ('constraint_class_part -> single_constraint','constraint_class_part',1,'p_constraint_class_part','syntactic_pattern_parser.py',321),
  ('constraint_class_part -> LPAREN constraint_class RPAREN','constraint_class_part',3,'p_constraint_class_part','syntactic_pattern_parser.py',322),
  ('constraint_class_part -> NOT constraint_class','constraint_class_part',2,'p_constraint_class_part','syntactic_pattern_parser.py',323),
  ('single_constraint -> NAME EQ VALUE','single_constraint',3,'p_single_constraint','syntactic_pattern_parser.py',343),
  ('single_constraint -> NAME MATCH VALUE','single_constraint',3,'p_single_constraint','syntactic_pattern_parser.py',344),
  ('single_constraint -> NAME IN VALUE','single_constraint',3,'p_single_constraint','syntactic_pattern_parser.py',345),
]
