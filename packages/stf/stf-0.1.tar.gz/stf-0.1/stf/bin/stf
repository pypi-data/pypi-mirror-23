#!/usr/bin/env python
#put stf in /usr/lib/python2.7/dist-packages/STF
# or export PYTHONPATH


import os
import argparse
import sys
try:
    from stf.lib.stf_utils import *
except Exception:
    stf_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '../..'))
    if not stf_path in sys.path:
        sys.path.insert(1, stf_path)
    from stf.lib.stf_utils import *
    
from stf.managers.plugin_manager import *
from stf.managers.module_manager import *
from stf.managers.view_manager import *

if __name__ == '__main__':
    me = os.path.basename(sys.argv[0])
    parser = argparse.ArgumentParser()
    parser.add_argument("--ini", help="the ini file path", required=False)
    parser.add_argument('--case', nargs='+', help="file or directory path, multi paths split by whitespace", required=False)
    parser.add_argument("--log",help="the name of log flag, The log file will be stf_logFlag",required=False)
    parser.add_argument("--test_pipeline", help="The test section pipeline name", required=False)
    parser.add_argument("--test_section", help="The test section name (without Test:)", required=False)
    parser.add_argument("--tags", help="To filter the cases by tags", required=False)
    parser.add_argument("--deploy_index", help="To filter the cases by tags", required=False)
    parser.add_argument("--deploy_op", help="To filter the cases by tags", required=False)
    args = parser.parse_args()

    plugin_manager = PluginManager()
    module_manager = ModuleManager(plugin_manager)
    view_manager = ViewManager(module_manager)

    variables = plugin_manager.getInstance('variable')
    variables.init(args.ini, pipeline=args.test_pipeline, section=args.test_section)

    #begin to get the view name, default is t1s1
    view_name = 't1s1'

    if args.deploy_op:
        view_name = 'deploy'
    elif variables.parser:
        view_name = variables.get('view')
        if view_name is None:
            view_name = 't1s1'

    view = view_manager.getInstance(view_name)

    if view is None:
        errorAndExit('View %s not available' % view_name)

    #different pre conditions for different views
    view_initOp_functions = {'deploy': lambda : view.initOp(args.deploy_op, args.deploy_index),
                             't1s1': lambda: True}

    if view_name in view_initOp_functions:
        view_initOp_functions[view_name]()

    #regular view call sequence
    view.addCaseSource(args.case)
    view.addTags(args.tags)
    view.preCheck()
    sys.exit(view.run())
