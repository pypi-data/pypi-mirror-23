import os



##############################################################################################################
#
# NOTE !!!
#
# THIS FILE IS AUTOGENERATED. ONLY MODIFY THE ORIGINAL FILE IN THE /sharedData/ FOLDER!
#
# NOTE !
#
##############################################################################################################


class Identifier:
    """
    a token by which objects of different types can be compared.
    All objects that are read from the input have an identifier.
    All objects generated during the output have a preliminary identifier, because the output will be interpreted by the Execution Environment.
    (preliminary identifiers can be used like any other)
    """
    def __init__(self, identifier, type, preliminary=False):
        self.id = identifier
        self.type = type
        self.preliminary = preliminary
    def __str__(self):
        return "%s Identifier %s%s" % (self.type, self.id, " (preliminary)" if self.preliminry else "")
    def __eq__(self, other):
        """
        Override the default Equals behavior
        """
        return (self.type == other.type) and (self.id == other.id) and (self.preliminary == other.preliminary)
    def __ne__(self, other):
        """
        Define a non-equality test
        """
        return not self.__eq__(other)
    def to_json(self):
        """
        gives a JSON dictionary representation of this identifier.
        Counterpart to parse_identifier().
        """
        res = { 'type' : self.type, 'id' : self.id }
        if self.preliminary:
            res['preliminary'] = True
        return res


def parse_identifier(dictionary):
        """
        creates an Identifier from a JSON dictionary structure
        Counterpart to Identifier.to_json().
        """
        id = dictionary['id']
        type = dictionary['type']
        preliminary = dictionary.get('preliminar', False)
        return Identifier(id, type, preliminary)


_preliminary_dentifier_counter = 0
def create_preliminary_identifier(type):
    """
    creates a preliminary Identifier, for use by output objects.
    """
    global _preliminary_dentifier_counter
    res = Identifier(_preliminary_dentifier_counter, type, preliminary=True)
    _preliminary_dentifier_counter += 1
    return res


class InputObject:
    """
    represents a file that was given as an input argument, along with information about it.
    """
    def __init__(self, identifier, file_name, creation_step, creation_index, usage_index):
        self.identifier = identifier
        self.file_name = file_name
        self.file = os.path.join(PATH_PREFIX, file_name)
        self.creation_step = creation_step
        self.creation_index = creation_index
        self.usage_index = usage_index
    def __str__(self):
        return self.identifier


class OutputObject:
    """
    represents a file that was created as an output, along with information about it.
    """
    def __init__(self, file_name, creation_index):
        self.identifier = create_preliminary_identifier('file')
        self.file_name = file_name
        self.file = os.path.join(PATH_PREFIX, file_name)
        self.creation_step = get_current_step()
        self.creation_index = creation_index
    def __str__(self):
        return self.identifier
    def to_json(self):
        """
        gives a JSON dictionary representation of this OutputObject.
        NOT a counterpart to get_inputs(): the information output here is for treating a file as a newly created object, not an existing object.
        """
        res = {'identifier' : self.identifier.to_json(), "file" : self.file_name, "index" : self.creation_index }
        return res


class Tag:
    """
    a Tag consists of a Symbol, defined here as a string, and a number of identifiers.
    It also has an identifier of its own.
    """
    def __init__(self, own_identifier, symbol, *arguments):
        if not isinstance(own_identifier, Identifier):
            raise ValueError("a Tag must get an Identifier as its identifier")
        if not isinstance(symbol, str):
            raise ValueError("the Symbol of a Tag must be given as a string")
        arguments = [self._get_identifier_of_argument(a) for a in arguments]
        self.identifier = own_identifier
        self.symbol = symbol
        self.arguments = arguments
    def __str__(self):
        return "Tag %s: symbol=%s, arguments=(%s)" % (self.identifier, self.symbol, ', '.join(['%s' % a for a in identifiers]))
    def to_json(self):
        """
        gives a JSON dictionary representation of this Tag.
        Counterpart to parse_tag().
        """
        res = {'id' : self.identifier.to_json(), 'sym' : self.symbol, 'args' : [self._get_identifier_of_argument(a).to_json() for a in self.arguments]}
        return res
    def _get_identifier_of_argument(self, arg):
        if isinstance(arg, Identifier):
            return arg
        if hasattr(arg, 'identifier') and isinstance(arg.identifier, Identifier):
            return arg.identifier
        raise ValueError("each argument of a Tag must either be an Identifier or have an identifier field of that type")


def parse_tag(dictionary):
    """
    creates a Tag from a JSON dictionary structure
    Counterpart to Tag.to_json().
    """
    identifier = parse_identifier(dictionary['identifier'])
    symbol = dictionary['symbol']
    args = [parse_identifier(a) for a in dictionary['args']]
    return Tag(identifier, symbol, *args)




