#line 2 "lexc-lexer.cc"

#line 4 "lexc-lexer.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer hlexc_create_buffer
#define yy_delete_buffer hlexc_delete_buffer
#define yy_flex_debug hlexc_flex_debug
#define yy_init_buffer hlexc_init_buffer
#define yy_flush_buffer hlexc_flush_buffer
#define yy_load_buffer_state hlexc_load_buffer_state
#define yy_switch_to_buffer hlexc_switch_to_buffer
#define yyin hlexcin
#define yyleng hlexcleng
#define yylex hlexclex
#define yylineno hlexclineno
#define yyout hlexcout
#define yyrestart hlexcrestart
#define yytext hlexctext
#define yywrap hlexcwrap
#define yyalloc hlexcalloc
#define yyrealloc hlexcrealloc
#define yyfree hlexcfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 0
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE hlexcrestart(hlexcin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t hlexcleng;

extern FILE *hlexcin, *hlexcout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up hlexctext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up hlexctext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via hlexcrestart()), so that the user can continue scanning by
	 * just pointing hlexcin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when hlexctext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t hlexcleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow hlexcwrap()'s to do buffer switches
 * instead of setting up a fresh hlexcin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void hlexcrestart (FILE *input_file  );
void hlexc_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE hlexc_create_buffer (FILE *file,int size  );
void hlexc_delete_buffer (YY_BUFFER_STATE b  );
void hlexc_flush_buffer (YY_BUFFER_STATE b  );
void hlexcpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void hlexcpop_buffer_state (void );

static void hlexcensure_buffer_stack (void );
static void hlexc_load_buffer_state (void );
static void hlexc_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER hlexc_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE hlexc_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE hlexc_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE hlexc_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *hlexcalloc (yy_size_t  );
void *hlexcrealloc (void *,yy_size_t  );
void hlexcfree (void *  );

#define yy_new_buffer hlexc_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        hlexcensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            hlexc_create_buffer(hlexcin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        hlexcensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            hlexc_create_buffer(hlexcin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define hlexcwrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *hlexcin = (FILE *) 0, *hlexcout = (FILE *) 0;

typedef int yy_state_type;

extern int hlexclineno;

int hlexclineno = 1;

extern char *hlexctext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr hlexctext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
#if defined(__GNUC__) && __GNUC__ >= 3
__attribute__((__noreturn__))
#endif
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up hlexctext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	hlexcleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 35
#define YY_END_OF_BUFFER 36
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[453] =
    {   0,
       36,   34,   35,    8,   34,   35,    8,   35,    8,   34,
       35,    7,   34,   35,   34,   35,   33,   34,   35,    8,
       34,   35,   34,   35,   34,   35,   34,   35,   34,   35,
       11,   34,   35,   11,   35,   11,   34,   35,   10,   34,
       35,    9,   34,   35,   34,   35,    9,   34,   35,   33,
       34,   35,   33,   34,   35,   33,   34,   35,   33,   34,
       35,   33,   34,   35,   33,   34,   35,   33,   34,   35,
       33,   34,   35,   11,   34,   35,    9,   34,   35,    9,
       34,   35,    9,   34,   35,   19,   34,   35,   19,   35,
       19,   34,   35,   18,   34,   35,   34,   35,   34,   35,

       34,   35,   34,   35,   33,   34,   35,   33,   34,   35,
       33,   34,   35,   33,   34,   35,   33,   34,   35,   33,
       34,   35,   33,   34,   35,   33,   34,   35,   19,   34,
       35,   34,   35,   14,   34,   35,   14,   35,   14,   34,
       35,   13,   34,   35,   12,   34,   35,   34,   35,   15,
       34,   35,   12,   34,   35,   33,   34,   35,   33,   34,
       35,   33,   34,   35,   33,   34,   35,   33,   34,   35,
       33,   34,   35,   33,   34,   35,   33,   34,   35,   14,
       34,   35,   12,   34,   35,   12,   34,   35,   30,   34,
       35,   30,   35,   30,   34,   35,   29,   34,   35,   34,

       35,   22,   34,   35,16408,   34,   35,   28,   34,   35,
       27,   34,   35,   34,   35,   22,   34,   35,16408,   33,
       34,   35,   33,   34,   35,   33,   34,   35,   33,   34,
       35,   33,   34,   35,   33,   34,   35,   33,   34,   35,
       33,   34,   35,   30,   34,   35,   22,   34,   35,16408,
       22,   34,   35,16408,   31,   34,   35,   31,   32,   34,
       35,   32,   35,   31,   33,   34,   35,    7,   10,    9,
        9,    9,    9,    9,    9,    9,    9,    9,   18,   16,
       16,   13,   12,   12,   12,   12,   12,   12,   12,   29,
       25, 8216,   22,16408,   22,16408,   22,16408,   22,16408,

       22,16408,    9,    9,    9,    9,    9,    9,    9,    9,
        9,   16,   17,   16,   12,   12,   12,   12,   12,   12,
       12,   23,   23,   23,   22,16408,   22,16408,   22,16408,
        6,    9,    9,    9,    9,    9,    9,    9,    9,    6,
       12,   12,   12,   12,   12,   12,   23,   22,16408,   26,
       26,   22,16408,    9,    9,    9,    9,    9,    9,    9,
        9,   17,   12,   12,   12,   12,   12,   12,   22,16408,
       22,16408,    9,    9,    9,    9,    9,    9,    9,    9,
       12,   12,   12,   12,   12,   12,   22,16408,   22,16408,
        9,    9,    9,    9,    9,    9,    9,   12,   12,   12,

       12,   12,   12,   22,16408,   22,16408,    2,    9,    9,
        9,    9,   12,   12,   12,   12,    4,    5,    9,    9,
        9,    9,    4,   16,    5,   16,   12,   12,   12,   12,
       20,   21,    4,    5,    9,    9,    9,    9,   12,   12,
       12,   12,   20,   21,    9,    9,    9,   12,   12,   12,
        3,    1
    } ;

static yyconst flex_int16_t yy_accept[1000] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    2,    4,    7,    9,   12,   15,   17,
       20,   23,   25,   27,   29,   31,   34,   36,   39,   42,
       45,   47,   50,   53,   56,   59,   62,   65,   68,   71,
       74,   77,   80,   83,   86,   89,   91,   94,   97,   99,
      101,  103,  105,  108,  111,  114,  117,  120,  123,  126,
      129,  132,  134,  137,  139,  142,  145,  148,  150,  153,
      156,  159,  162,  165,  168,  171,  174,  177,  180,  183,
      186,  189,  192,  194,  197,  200,  202,  206,  208,  211,
      214,  216,  220,  223,  226,  229,  232,  235,  238,  241,

      244,  247,  251,  255,  258,  262,  264,  268,  268,  268,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  270,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  273,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  275,  276,  277,  278,  279,
      280,  280,  280,  280,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  282,  282,  282,  282,  282,  282,  282,

      282,  282,  282,  282,  282,  282,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  283,  284,  284,  284,  284,
      284,  284,  284,  284,  284,  284,  285,  285,  285,  285,
      285,  285,  285,  285,  285,  286,  287,  287,  287,  287,
      287,  287,  287,  287,  287,  288,  289,  290,  290,  290,
      291,  291,  292,  292,  293,  295,  295,  295,  295,  295,
      295,  295,  295,  295,  295,  297,  297,  297,  297,  297,
      297,  297,  297,  297,  297,  297,  297,  297,  297,  297,
      297,  297,  297,  297,  297,  297,  297,  297,  297,  297,
      297,  297,  297,  299,  299,  299,  299,  299,  299,  299,

      299,  299,  299,  299,  301,  303,  303,  303,  303,  303,
      303,  303,  303,  303,  303,  303,  303,  303,  303,  303,
      303,  303,  303,  303,  304,  305,  305,  305,  305,  306,
      307,  308,  309,  310,  311,  312,  313,  313,  313,  313,
      313,  313,  313,  313,  313,  313,  313,  313,  314,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,

      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  316,  317,  317,  317,  317,  318,
      319,  320,  321,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  322,  323,  323,  323,  323,  323,  323,  323,
      323,  323,  323,  323,  323,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  325,  325,  325,  325,  325,  325,  325,  325,  327,
      327,  327,  327,  327,  327,  329,  331,  331,  331,  331,
      331,  331,  331,  332,  332,  332,  332,  332,  332,  332,

      332,  333,  334,  335,  336,  337,  338,  339,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
      340,  341,  341,  341,  341,  342,  343,  344,  345,  346,
      347,  347,  347,  347,  347,  347,  347,  347,  347,  347,
      347,  347,  347,  347,  347,  347,  347,  347,  347,  347,

      347,  347,  347,  347,  347,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  350,  350,  350,  351,  352,  354,  354,
      354,  354,  354,  354,  354,  354,  354,  354,  354,  355,
      356,  357,  358,  359,  360,  361,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  364,  365,  366,  367,  368,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  371,  371,  373,  373,  373,  373,  373,

      373,  373,  373,  373,  373,  373,  374,  375,  376,  377,
      378,  379,  380,  381,  381,  381,  381,  381,  381,  381,
      381,  381,  382,  383,  384,  385,  386,  387,  387,  387,
      387,  387,  389,  389,  391,  391,  391,  391,  391,  391,
      391,  391,  391,  391,  392,  393,  394,  395,  396,  397,
      398,  398,  398,  399,  400,  401,  402,  403,  404,  404,
      406,  406,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  409,  410,  411,  412,  413,  413,  413,  414,  415,
      416,  417,  417,  417,  417,  417,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  419,  419,  419,  419,

      419,  419,  419,  419,  419,  419,  419,  419,  419,  419,
      419,  419,  420,  421,  422,  423,  425,  427,  428,  429,
      430,  431,  431,  432,  432,  432,  432,  432,  432,  432,
      432,  432,  432,  432,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  436,  437,  438,  439,  440,  441,  442,  443,
      444,  444,  444,  444,  444,  444,  444,  444,  444,  444,

      444,  444,  444,  444,  444,  444,  445,  445,  445,  445,
      445,  445,  445,  445,  445,  445,  445,  445,  445,  445,
      445,  445,  445,  445,  445,  445,  445,  445,  445,  445,
      445,  445,  445,  445,  445,  445,  445,  445,  445,  445,
      445,  445,  445,  445,  445,  445,  445,  446,  447,  448,
      449,  450,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  453,  453

    } ;

static yyconst YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       13,   11,   11,   12,   11,   14,   15,   11,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   16,   17,   18,
       19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   12,   12,   32,   33,   34,   35,   12,
       12,   36,   37,   38,   39,   12,   12,   40,   41,   12,
       11,   42,   11,   43,   44,   12,   45,   46,   47,   12,

       48,   49,   50,   51,   52,   12,   12,   53,   54,   55,
       56,   12,   12,   57,   58,   59,   60,   12,   12,   61,
       62,   12,   11,   13,   11,   11,    1,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   66,   66,   67,   67,   67,   67,   67,   67,   67,

       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   68,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   70,   71,   71,   72,
       73,   73,   73,   74,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66
    } ;

static yyconst YY_CHAR yy_meta[75] =
    {   0,
        1,    2,    3,    1,    4,    5,    6,    7,    7,    7,
        7,    7,    7,    7,    7,    8,    9,    8,    7,    5,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    1,    1,    1,    1,    7,    7,    7,    7,
        7,    7,    7,    7
    } ;

static yyconst flex_uint16_t yy_base[1037] =
    {   0,
        0,   73,  147,  221,  295,  369,  443,  517,  591,  665,
      738,  811, 2942, 4270,    5, 4270, 4270,    0,    0, 4270,
        7,    1, 2904,   20,    0,    6, 4270, 4270,    0,   14,
       22,  677,   38, 2871,   45,   34,   48,   50,   53, 2869,
       18,  750,  121,  194,   11, 4270, 4270,    0,  884,   52,
      957, 1030,   64, 2862,   69,   95,   97,  104,  107, 2852,
      171,  148,  175, 4270, 4270,    0,  249,  202, 4270,  839,
      120, 2845,  136,  123,  169,  141,  179, 2846,  277,  913,
      273,  176, 4270, 4270,    0, 2895, 1103,  261, 4270, 4270,
     1176, 1249,  193, 2834,  261,  172,  273,  181,  285, 2831,

      350,    2, 2842, 4270, 4270, 4270, 4270,  249,    3,    0,
     2848, 2801,  376,  108, 2827,  170,  348,   29,    6, 2832,
     2825, 2799, 2820, 2816,    0,  344,  352,  327, 2775,  330,
      214,  334,  292,  342, 2773,  417,  365, 2738,  391,  388,
      401,  393,  404, 2738,  485,  557,  407,  413,  416,  429,
      433,  436,  439,  534,  685,  565,  695,  760,  768,    0,
       12,  435,  573,  478,  465, 2734,  477,  410,  482,  467,
      499, 2735,  521,  507, 2730,  513,  487,  539,  509,  552,
     2731, 1322, 1395, 1469, 1542,    1,  712,    0,    0,  838,
        0, 2771,    0,  572,    1,  585, 2725,  588,  542,  613,

      557,  625, 2724,  646,  653,  635,  643,  652,  655,  659,
      708,  711,  865,  799,    0,  787,  847,  726, 2721,  729,
      639,  780,  647,  787, 2720,  858,  799, 2717,  808,  663,
      836,  735,  870, 2716,  937,  992,  873,  878,  881,  885,
      925,  928,  931, 1010, 1013, 1003, 1069, 1012, 2751,    0,
     2768, 4270, 1041, 4270, 2747, 1054,  955, 2706,  991,  841,
     1004,  933, 1025, 2698, 2733, 1028, 2677, 1051,  958, 1054,
      969, 1066, 2678, 1615,   56, 1689, 1130, 1085,  247,  608,
     1200, 2712, 2717, 1143, 1101, 2625, 1104, 1043, 1136, 1047,
     1146, 2626,   20, 1149, 1158, 1161, 1164, 1167, 1170, 1173,

     1237, 2646,  821, 1107,  734, 2641, 2608, 2627, 2597, 2574,
     2570, 1268, 2583, 2560, 2583, 2561, 1198, 1214, 1217, 1220,
     1223, 1226, 1229, 1303, 1351, 1232, 1235, 1238, 1375, 1571,
     1579, 1754, 1827, 1346, 1302, 4270, 1245, 1282, 1289, 1293,
     1304, 1316, 1319,    4, 1359,    0, 1619, 4270,    0, 2601,
      288, 1323, 2538, 1371, 1083, 1387, 1085, 1390, 2535, 1318,
        0,    0,    0,  670, 1901,    0, 1757, 1555, 1559, 2578,
      333, 1770, 1771, 1776, 1801, 1809, 1842, 1849, 1847, 1830,
        0,    0, 1393, 2511, 1396, 1116, 1507, 1131, 1513, 2505,
     2552, 2548, 2527, 1527, 1530, 1535, 1540, 1543, 1591, 1597,

     1519, 1155, 1600, 1603, 1610, 1913, 1703, 1706, 1710, 1724,
     1727, 1730, 1733, 1857, 1882, 1736, 1739, 1783, 1909, 1926,
     1934, 1974, 2047, 2502, 1797, 1805, 1812, 1815, 1857, 1874,
     1882,    0, 4270,  691, 1843,    0,    0,    0, 1244, 2121,
        0,    0, 1977, 2011, 1981, 2012, 2533,  904, 2017, 2018,
     2025, 2029, 2069, 2062, 2087, 2067, 2053,  891, 1309, 1895,
     2470, 1946, 1153, 1949, 1176, 1952, 2466, 2061, 2082, 1310,
     1357, 2035, 2038, 2072, 2075, 2078, 2081, 2084,   15, 2090,
     2093, 2096, 2499, 2460, 2169, 1388, 2495, 2454, 2448, 2417,
     2402, 2388, 2162, 2408, 2366, 2343, 2312, 2105, 2112, 2115,

     2195, 2199, 2203, 2207, 2211, 2219, 2225, 2230, 2118, 2154,
     2173, 2232,    0,    0, 2179, 2280, 2186, 1204, 2189, 1210,
     2194, 2280, 2327, 2318, 2197, 2200, 2203, 2206, 2213, 2216,
     2223, 2283, 2284, 2287,    0,    0,    0, 2311, 2317, 2289,
     2291, 2296, 2300, 2304, 2306, 2313, 2320, 2283, 2241,    0,
     2225, 2365, 2372, 2377, 2381, 2385, 2389, 2396, 2254, 2271,
     2286, 2337, 2345, 2348, 2352, 2357, 2361, 2369, 1757, 1915,
     2453, 2399, 2402, 2405, 2471, 2475, 2479, 2483, 2487, 2495,
     2208, 2430, 2440, 2443, 2502, 2503, 2503,    0,    0, 1396,
     2214, 2218, 2516, 2517, 2523, 2527, 2529, 2531, 2536, 2541,

     2148, 2110,    0, 2092,    0, 2542, 2547, 2560, 2567, 2606,
     2610, 2619, 2451, 2570, 2573, 2576, 2579, 2582, 2586, 2590,
     2593, 2599,  938, 2663, 2043, 2674, 2683,  213, 2056, 2029,
     2042, 2039, 2007, 2010, 2031, 1993, 2009, 1983, 2690, 2694,
     2698, 2702, 2706, 2710, 2714, 2718, 2663, 2666, 2672, 2675,
     2681, 2684, 2688, 2691, 2694, 2701, 2760, 2762, 2766, 2770,
     2774, 2778, 2782, 2786, 2790, 2849, 2853, 2742, 2746, 2750,
     2038, 1815, 2862, 2866, 2870, 2874, 2878, 2882, 1995, 2882,
     2886, 2891, 2897, 2901, 2916, 2930, 2934, 2960, 2964, 2754,
     2758, 2856,  139, 1939,  283, 1914, 1880, 1900, 1871, 1859,

     1834, 1856, 1830, 1829, 1786, 2980, 2984, 3007, 3013, 3017,
     3029, 3033, 3038, 2866, 2927, 2940, 3037, 3042, 3047, 2281,
     2310, 3056, 3061, 3069, 3115, 3078, 3073, 1785, 3084, 3114,
     3118, 1546, 1759, 1133, 1577, 1616, 1769, 1754, 1647, 1571,
     1596, 1551, 3131, 3135, 3139, 3159, 3163, 3167, 3171, 3182,
     2570, 3153, 3186, 3200, 3204, 3208, 3212, 3216, 1549, 2526,
     1519, 2898, 3190, 3220, 1537, 1519, 1496, 1385, 1378, 1342,
     3229, 3241, 3245, 3233, 3249, 3304, 3377, 3271, 3293, 3279,
     3308, 1675, 3450, 1676, 3523, 3330, 3248, 3004, 1298, 3022,
     1524, 3034, 1605, 3050, 1279, 3339, 3283, 3066, 1261, 3087,

     1869, 3164, 1925, 3202, 1192, 1171, 1170, 1137, 1129, 1118,
     1065, 3334, 3356, 3363, 3381, 3412, 3421, 3389, 3425, 3459,
     3471, 3596, 1774, 3429, 3214, 1031, 3236, 2044, 3261, 2208,
     3282, 1031, 3669, 1853, 3437, 3369,  986, 3374, 2219, 3377,
     2240, 3405,  984, 3547, 3449,  980, 3471, 2258, 3474, 2309,
     3478,  976, 3481, 3490, 3495, 3498, 3501, 3504, 3507, 3571,
     3514,  951, 3519, 2317, 3522, 2321, 3544,  940, 3547, 3559,
     3562, 3565, 3568, 3571, 3583,  940,  932,  884,  844,  851,
      828, 3647, 3651, 3655, 3687, 3680, 3691, 3695, 3699, 2307,
     3642,  722, 3648, 2326, 3652, 2329, 3655,  646, 3658, 3661,

     3666, 3669, 3683, 3688, 3691, 2559, 3695,  614, 3698, 2334,
     3701, 2340, 3704,  611, 3707, 3710, 3713, 3716, 3719, 3722,
     3725, 3728, 3731, 3734, 3737, 3740, 3743, 3746, 3749, 3752,
     3755, 3758, 3761, 3764, 3767, 3770, 3773, 3776, 3779, 3782,
     3785,  582, 3849,  542,  524,  476, 3853, 3857, 3861, 3865,
     3869, 3873, 3816, 3819, 3822, 3828, 3831, 3834, 3840, 3843,
     3846, 3849, 3852, 3857, 3860, 3863, 3869, 3872, 3875, 3878,
     3881, 3884, 3887, 3890, 3893, 3896, 3899, 3902, 3966,  449,
      377, 3909, 3912, 3915, 3918, 3921, 3924,  376,  338,  345,
      224,  170,  144,   93,   46, 3988, 3992, 4270, 3997, 4006,

     4015, 4024, 4033, 4042, 4051, 4060,   55, 4066, 4075, 4083,
     4087, 4095, 4103,   19, 4109, 4118, 4127, 4135, 4141, 4149,
     4156, 4162, 4168, 4174, 4183, 4191, 4200, 4208, 4216, 4222,
     4228, 4236, 4242, 4248, 4254, 4260
    } ;

static yyconst flex_int16_t yy_def[1037] =
    {   0,
      999,  999, 1000, 1000, 1001, 1001, 1002, 1002, 1003, 1003,
     1004, 1004,  998,  998,  998,  998,  998, 1005,  998,  998,
      998,  998,  998,  998,  998,  998,  998,  998, 1006, 1007,
     1008, 1007,  998,  998,  998,  998,  998,  998,  998,  998,
      998, 1007, 1007, 1007,  998,  998,  998, 1009, 1010, 1011,
     1012, 1010,  998,  998,  998,  998,  998,  998,  998,  998,
      998,   52,  998,  998,  998, 1013, 1014, 1015,  998, 1014,
      998,  998,  998,  998,  998,  998,  998,  998,  998, 1014,
     1014,  998,  998,  998, 1016, 1017, 1018, 1019,  998,  998,
     1020, 1018,  998,  998,  998,  998,  998,  998,  998,  998,

      998,   92,   92,  998,  998,  998,  998,  998,  998, 1005,
      998,  998,  998,  998,  998,  998,  998,  998,  998,  998,
      998,  998,  998,  998, 1006, 1007, 1008,  998,  998,  998,
      998,  998,  998,  998,  998, 1007,  998,  998,  998,  998,
      998,  998,  998,  998, 1007, 1007,  998,  998,  998,  998,
      998,  998,  998,  998, 1007, 1007, 1007, 1007, 1007, 1009,
      998,   52, 1011,   52,  998,  998,  998,  998,  998,  998,
      998,  998,   52,  998,  998,  998,  998,  998,  998,  998,
      998, 1021, 1021,  998, 1012,  185, 1022,  185,  185,  185,
      183,  998,  185,   52,  185,  998,  998,  998,  998,  998,

      998,  998,  998,   52,   52,  998,  998,  998,  998,  998,
      998,  998,  998,   52, 1013, 1014, 1015,  998,  998,  998,
      998,  998,  998,  998,  998, 1014,  998,  998,  998,  998,
      998,  998,  998,  998, 1014, 1014,  998,  998,  998,  998,
      998,  998,  998,  998, 1014, 1014, 1014,  998,  998, 1016,
     1017,  998,  998,  998,   92, 1019,  998,  998,  998,  998,
      998,  998,  998,  998,   92,  998,  998,  998,  998,  998,
      998,  998,  998, 1020,  274,  998,  274, 1023,  274,  274,
      274,  998,  998,  274,  998,  998,  998,  998,  998,  998,
      998,  998,   92,  998,  998,  998,  998,  998,  998,  998,

      998,  998,  998,   92,   92,  998,  998,  998,  998,  998,
      998,  998,  998,  998,  998,  998,  998,  998,  998,  998,
      998,  998,  998, 1007, 1007,  998,  998,  998, 1007, 1007,
     1007, 1007, 1007,  333,  333,  998,  998,  998,  998,  998,
      998,  998,  998,  183, 1024,  183,  183,  998,  183,  998,
      183,  998,  998,  998,  998,  998,  998,  998,  998, 1025,
      184,  184,  184,  184, 1026,  184,  184, 1025, 1025,  184,
      184, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025,  185,
      185,  185,  998,  998,  998,  998,  998,  998,  998,  998,
      185,  185,  183,  998,  998,  998,  998,  998,  998,  998,

       52,   52,  998,  998,  998,   52,  998,  998,  998,  998,
      998,  998,  998, 1014, 1014,  998,  998,  998, 1014, 1014,
     1014, 1014, 1014,  998,  998,  998,  998,  998,  998,  998,
      998,  274,  998,  274, 1027,  276,  276,  276,  276, 1028,
      276,  276,  276, 1027, 1027, 1027,  276,  276, 1027, 1027,
     1027, 1027, 1027, 1027, 1027, 1027,  274,  274,  274,  998,
      998,  998,  998,  998,  998,  998,  998,  274,  274,  274,
      274,  998,  998,  998,  998,  998,  998,  998,   92,  998,
      998,  998,  998,  998,   92,   92,  998,  998,  998,  998,
      998,  998,  998,  998,  998,  998,  998,  998,  998,  998,

      333,  333,  333,  333,  333,  333,  333,  333,  998,  998,
      998,  183,  183,  183,  998,  998,  998,  998,  998,  998,
      998,  998,  183,  183,  998,  998,  998,  998,  998,  998,
      998, 1025, 1025,  184,  184,  184,  183,  184,  184, 1025,
     1025, 1025, 1025, 1025, 1025, 1025, 1025,  184,  184,  184,
      184, 1025, 1025, 1025, 1025, 1025, 1025, 1025,  998,  998,
      998,  998,  998,  998,  998,  998,  998,  998,   52,   52,
      998,  998,  998,  998,  423,  423,  423,  423,  423,  423,
      998,  998,  998,  998, 1027, 1027,  276,  276,  276,  274,
      276,  276, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027,

      276,  276,  276,  276,  276, 1027, 1027, 1027, 1027, 1027,
     1027, 1027,  998,  998,  998,  998,  998,  998,  998,  998,
      998,  998,   92,  998,  998,  998,  998,   92,  998,  998,
      998,  998,  998,  998,  998,  998,  998,  998,  333,  333,
      333,  333,  333,  333,  333,  333,  998,  998,  998,  998,
      998,  998,  998,  998,  998,  998, 1025, 1025, 1025, 1025,
     1025, 1025, 1025, 1025, 1025, 1025, 1025,  998,  998,  998,
       52,   52,  423,  423,  423,  423,  423,  423,  998, 1027,
     1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027,  998,
      998,  998,   92,  998,   92,  998,  998,  998,  998,  998,

      998,  998,  998,  998,  998,  333,  333,  333,  333,  333,
      333,  333,  333,  998,  998,  998, 1025, 1025, 1025,   52,
       52,  423,  423,  423,  423,  423,  423,  998, 1027, 1027,
     1027,   92,  998,   92,  998,  998,  998,  998,  998,  998,
      998,  998,  998,  333,  333,  333,  333,  333,  333,  333,
       52,   52,  423,  423,  423,  423,  423,  423,  998,   92,
      998,   92, 1029, 1030,  998,  998,  998,  998,  998,  998,
      998,  333,  333,  333,  333, 1029, 1030,  423,  423,  423,
      423,  998, 1031,  998, 1032, 1029, 1033,  998,  998,  998,
      998,  998,  998,  998,  998, 1030, 1034,  998,  998,  998,

      998,  998,  998,  998,  998,  998,  998,  998,  998,  998,
      998,  333,  333,  333,  333, 1029, 1030,  423,  423,  423,
      423, 1031,  822, 1035,  998,  998,  998,  998,  998,  998,
      998,  998, 1032,  833, 1036,  998,  998,  998,  998,  998,
      998,  998,  998, 1029,  998,  998,  998,  998,  998,  998,
      998,  998,  998,  998,  998,  998,  998,  998,  998, 1030,
      998,  998,  998,  998,  998,  998,  998,  998,  998,  998,
      998,  998,  998,  998,  998,  998,  998,  998,  998,  998,
      998,  333,  333,  333,  333,  423,  423,  423,  423,  822,
      998,  998,  998,  998,  998,  998,  998,  998,  998,  998,

      998,  998,  998,  998,  998,  833,  998,  998,  998,  998,
      998,  998,  998,  998,  998,  998,  998,  998,  998,  998,
      998,  998,  998,  998,  998,  998,  998,  998,  998,  998,
      998,  998,  998,  998,  998,  998,  998,  998,  998,  998,
      998,  998,  998,  998,  998,  998,  333,  333,  333,  423,
      423,  423,  998,  998,  998,  998,  998,  998,  998,  998,
      998,  998,  998,  998,  998,  998,  998,  998,  998,  998,
      998,  998,  998,  998,  998,  998,  998,  998,  998,  998,
      998,  998,  998,  998,  998,  998,  998,  998,  998,  998,
      998,  998,  998,  998,  998,  998,  998,    0,  998,  998,

      998,  998,  998,  998,  998,  998,  998,  998,  998,  998,
      998,  998,  998,  998,  998,  998,  998,  998,  998,  998,
      998,  998,  998,  998,  998,  998,  998,  998,  998,  998,
      998,  998,  998,  998,  998,  998
    } ;

static yyconst flex_uint16_t yy_nxt[4345] =
    {   0,
      998,   15,   16,   17,   15,   18,  108,  108,  113,  108,
      108,  113,  108,  161,  380,  108,  161,  512,  393,  154,
      191,  381,  154,  127,  513,  216,  111,  118,  255,  111,
      336,   19,  114,  115,  123,  304,  109,  109,  109,  116,
      117,  255,  109,  114,  115,  623,  255,  112,  119,  109,
      112,  117,  310,  308,  311,  124,  309,  434,  121,  479,
      434,  126,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   21,   16,   17,   21,   18,  122,
      128,  129,  130,  131,  132,  133,  134,  135,  137,  138,
      139,  140,  141,  142,  143,  144,  149,  149,   22,   23,

      126,  126,  126,  996,   19,   24,   25,  148,  148,  148,
      150,  150,  150,  151,  151,  152,  152,  152,  174,  175,
      176,  177,  178,  179,  180,  181,  162,  162,  162,  996,
      127,  207,  207,  207,  118,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   14,   26,   27,
       28,   26,   29,   14,  157,  119,   31,  208,  208,  209,
      209,  209,   14,   14,   14,  255,   14,  210,  210,  211,
      211,  211,  213,  732,  162,  213,  108,  248,   32,  108,
      248,  214,  216,  216,  216,  239,  239,  128,  129,  130,
      131,  132,  133,  134,  135,  162,  995,  115,  238,  238,

      238,  994,  109,  127,  241,  241,  109,  249,  121,   20,
       20,   20,   20,   33,   34,   35,   36,   37,   38,   39,
       40,   14,   41,   27,   28,   41,   29,   14,  158,  122,
       31,  240,  240,  240,  296,  296,   14,   14,   14,  255,
       14,  242,  242,  242,  298,  298,   42,   43,  434,  159,
      108,  434,   32,  108,   44,  255,  255,  255,  217,  695,
      128,  129,  130,  131,  132,  133,  134,  135,  227,  228,
      229,  230,  231,  232,  233,  234,  149,  149,  244,  993,
      109,  244,  217,   20,   20,   20,   20,   33,   34,   35,
       36,   37,   38,   39,   40,   14,   45,   46,   47,   45,

       48,   14,  114,  115,   50,  393,  247,  191,  109,  255,
       14,   14,   14,   51,   14,  218,  219,  220,  221,  222,
      223,  224,  225,  295,  295,  295,   52,  266,  267,  268,
      269,  270,  271,  272,  273,  297,  297,  297,  734,  218,
      219,  220,  221,  222,  223,  224,  225,  299,  299,  299,
      551,  301,  361,  127,  301,  151,  151,   20,   20,   20,
       20,   53,   54,   55,   56,   57,   58,   59,   60,   14,
       61,   46,   47,   61,   48,   14,  302,  113,   50,  992,
      113,  303,  123,  991,   14,   14,   14,   51,   14,  126,
      126,  126,  148,  148,  148,   62,  150,  150,  150,  990,

       52,  114,  115,  124,  152,  152,  152,  109,  116,  117,
      128,  129,  130,  131,  132,  133,  134,  135,  137,  138,
      139,  140,  141,  142,  143,  144,  127,  136,  136,  136,
      989,   20,   20,   20,   20,   53,   54,   55,   56,   57,
       58,   59,   60,   14,   63,   64,   65,   63,   66,   14,
      319,  319,   68,  318,  318,  318,  321,  321,   14,   69,
       14,  162,   14,  320,  320,  320,  322,  322,  322,  126,
      126,  126,  208,  208,   70,  126,  126,  126,  126,  126,
      126,  988,  162,  128,  129,  130,  131,  132,  133,  134,
      135,  126,  126,  126,  127,  326,  326,  326,  327,  327,

      327,  328,  328,  328,  162,   20,   20,   20,   20,   71,
       72,   73,   74,   75,   76,   77,   78,   14,   79,   64,
       65,   79,   66,   14,  324,  162,   68,  162,  162,  162,
      210,  210,   14,   69,   14,  154,   14,  981,  154,  207,
      207,  207,   80,   81,  209,  209,  209,  162,   70,  339,
      339,  128,  129,  130,  131,  132,  133,  134,  135,  114,
      115,  211,  211,  211,  980,  109,  127,  117,  162,  173,
      173,  173,  341,  341,  127,  338,  338,  338,  191,   20,
       20,   20,   20,   71,   72,   73,   74,   75,   76,   77,
       78,   14,   82,   83,   84,   82,   85,   86,  162,  943,

       88,  340,  340,  340,  396,  396,   89,   90,   91,  434,
       14,  331,  434,  332,  342,  342,  342,  325,  943,  162,
      398,  398,   92,  128,  129,  130,  131,  132,  133,  134,
      135,  128,  129,  130,  131,  132,  133,  134,  135,  174,
      175,  176,  177,  178,  179,  180,  181,  185,  185,  185,
      395,  395,  395,   20,   20,   20,   20,   93,   94,   95,
       96,   97,   98,   99,  100,   14,  101,   83,   84,  101,
       85,   86,  162,  969,   88,  397,  397,  397,  963,  162,
       89,   90,   91,  534,   14,  401,  127,  399,  399,  399,
      535,  102,  434,  162,  127,  434,  103,  162,  162,  162,

      162,  239,  239,  145,  127,  162,  162,  162,  959,  329,
      241,  241,  330,  402,  162,  162,  162,  162,  162,  162,
      333,  403,  403,  403,  146,  409,  409,   20,   20,   20,
       20,   93,   94,   95,   96,   97,   98,   99,  100,  105,
      106,  105,  105,  128,  129,  130,  131,  132,  133,  134,
      135,  128,  129,  130,  131,  132,  133,  134,  135,  127,
      255,  128,  129,  130,  131,  132,  133,  134,  135,  127,
      404,  404,  404,  405,  405,  405,  155,  127,  383,  384,
      385,  386,  387,  388,  389,  390,  953,  334,  216,  216,
      216,  238,  238,  238,  486,  335,  217,  156,  411,  411,

      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  105,  106,  105,  105,  128,  129,  130,  131,
      132,  133,  134,  135,  406,  162,  128,  129,  130,  131,
      132,  133,  134,  135,  128,  129,  130,  131,  132,  133,
      134,  135,  240,  240,  240,  391,  162,  424,  217,  242,
      242,  242,  392,  218,  219,  220,  221,  222,  223,  224,
      225,  226,  226,  226,  946,  235,  213,  217,  484,  213,
      408,  408,  408,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  161,  236,  945,  161,  189,
      189,  115,  434,  163,  189,  434,  109,  189,  410,  410,

      410,  943,  164,  296,  296,  218,  219,  220,  221,  222,
      223,  224,  225,  227,  228,  229,  230,  231,  232,  233,
      234,  604,  217,  605,  218,  219,  220,  221,  222,  223,
      224,  225,  412,  412,  412,  216,  216,  216,  944,  245,
      216,  216,  216,  216,  216,  216,  217,  216,  216,  216,
      165,  166,  167,  168,  169,  170,  171,  172,  182,  183,
      246,  182,  693,  184,  255,  186,  187,  188,  943,  189,
      190,  188,  191,  942,  192,  193,  414,  188,  194,  218,
      219,  220,  221,  222,  223,  224,  225,  416,  416,  416,
      417,  417,  417,  418,  418,  418,  298,  298,  188,  195,

      188,  217,  938,  218,  219,  220,  221,  222,  223,  224,
      225,  244,  217,  248,  244,  932,  248,  255,  255,  255,
      427,  427,  217,  196,  197,  198,  199,  200,  201,  202,
      203,  161,  429,  429,  161,  114,  115,  419,  928,  163,
      420,  109,  253,  249,  922,  253,  921,  254,  164,  421,
      915,  422,  415,  295,  295,  295,  204,  254,  218,  219,
      220,  221,  222,  223,  224,  225,  297,  297,  297,  218,
      219,  220,  221,  222,  223,  224,  225,  205,  217,  218,
      219,  220,  221,  222,  223,  224,  225,  299,  299,  299,
      265,  265,  265,  905,  423,  899,  165,  166,  167,  168,

      169,  170,  171,  172,  253,  474,  474,  253,  881,  254,
      476,  476,  256,  426,  426,  426,  428,  428,  428,  254,
      266,  267,  268,  269,  270,  271,  272,  273,  430,  430,
      430,  434,  485,  255,  434,  218,  219,  220,  221,  222,
      223,  224,  225,  457,  434,  527,  527,  434,  529,  529,
      458,  460,  461,  462,  463,  464,  465,  466,  467,  255,
      470,  880,  471,  275,  275,  275,  473,  473,  473,  257,
      258,  259,  260,  261,  262,  263,  264,  274,  561,  561,
      274,  162,  276,  879,  277,  278,  279,  762,  280,  281,
      279,  279,  878,  282,  563,  563,  279,  283,  475,  475,

      475,  434,  162,  877,  434,  876,  570,  468,  477,  477,
      477,  255,  255,  255,  469,  615,  615,  279,  284,  279,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  480,
      480,  480,  481,  481,  481,  482,  482,  482,  301,  617,
      617,  301,  285,  286,  287,  288,  289,  290,  291,  292,
      253,  280,  280,  253,  875,  254,  280,  587,  256,  280,
      136,  136,  136,  302,  588,  254,  649,  649,  303,  493,
      493,  493,  493,  651,  651,  293,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  498,  498,  498,  499,  499,
      499,  500,  500,  500,  126,  126,  126,  126,  126,  126,

      126,  126,  126,  998,  998,  998,  998,  173,  173,  173,
      434,  434,  127,  434,  434,  257,  258,  259,  260,  261,
      262,  263,  264,  182,  191,  869,  182,  532,  184,  471,
      344,  345,  191,  501,  346,  347,  191,  191,  348,  192,
      349,  859,  191,  350,  173,  173,  173,  998,  998,  998,
      998,  173,  173,  173,  508,  173,  173,  173,  434,  533,
      127,  434,  853,  191,  351,  191,  509,  509,  509,  128,
      129,  130,  131,  132,  133,  134,  135,  507,  510,  510,
      510,  511,  511,  511,  127,  183,  183,  183,  352,  353,
      354,  355,  356,  357,  358,  359,  191,  434,  811,  191,

      434,  184,  502,  344,  345,  191,  503,  346,  347,  191,
      191,  348,  192,  810,  255,  191,  350,  128,  129,  130,
      131,  132,  133,  134,  135,  515,  516,  517,  518,  519,
      520,  521,  522,  526,  526,  526,  191,  351,  191,  628,
      809,  128,  129,  130,  131,  132,  133,  134,  135,  528,
      528,  528,  530,  530,  530,  382,  382,  382,  560,  560,
      560,  352,  353,  354,  355,  356,  357,  358,  359,  360,
      361,  183,  360,  361,  360,  362,  363,  364,  365,  361,
      363,  366,  367,  361,  361,  348,  368,  363,  360,  361,
      369,  363,  363,  363,  363,  363,  363,  363,  363,  363,

      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      370,  371,  361,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  360,  360,  360,  360,  372,  373,  374,  375,  376,
      377,  378,  379,  182,  183,  162,  182,  808,  184,  569,
      186,  187,  188,  807,  189,  190,  188,  191,  348,  192,
      193,  191,  188,  194,  532,  513,  162,  806,  532,  562,
      562,  562,  255,  784,  361,  564,  564,  564,  763,  760,
      127,  763,  782,  188,  195,  188,  855,  855,  127,  185,
      185,  185,  185,  185,  185,  770,  533,  185,  185,  185,

      533,  504,  185,  185,  185,  566,  566,  566,  196,  197,
      198,  199,  200,  201,  202,  203,  432,  764,  769,  432,
      764,  276,  768,  277,  278,  279,  523,  280,  281,  279,
      279,  505,  282,  524,  433,  279,  283,  128,  129,  130,
      131,  132,  133,  134,  135,  128,  129,  130,  131,  132,
      133,  134,  135,  567,  567,  567,  279,  284,  279,  568,
      568,  568,  162,  162,  162,  162,  162,  162,  857,  857,
      346,  346,  162,  162,  162,  346,  822,  833,  346,  822,
      833,  285,  286,  287,  288,  289,  290,  291,  292,  435,
      436,  275,  435,  436,  435,  437,  438,  439,  440,  441,

      438,  442,  443,  441,  441,  767,  444,  438,  445,  441,
      446,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      447,  448,  441,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  435,  435,  435,  435,  449,  450,  451,  452,  453,
      454,  455,  456,  127,  548,  226,  226,  226,  226,  226,
      226,  549,  226,  226,  226,  998,  191,  191,  998,  532,
      532,  671,  191,  162,  766,  532,  226,  226,  226,  572,
      572,  572,  573,  573,  573,  574,  574,  574,  216,  216,

      216,  216,  216,  216,  162,  506,  765,  191,  366,  366,
      532,  533,  533,  366,  761,  191,  366,  533,  532,  759,
      128,  129,  130,  131,  132,  133,  134,  135,  493,  493,
      493,  493,  363,  363,  363,  552,  127,  391,  553,  553,
      553,  162,  533,  743,  392,  216,  216,  216,  191,  279,
      533,  532,  585,  191,  998,  191,  532,  998,  532,  265,
      265,  265,  162,  554,  554,  743,  217,  265,  265,  265,
      721,  555,  555,  555,  265,  265,  265,  265,  265,  265,
      742,  189,  189,  533,  586,  741,  189,  575,  533,  189,
      533,  217,  740,  128,  129,  130,  131,  132,  133,  134,

      135,  360,  360,  739,  360,  556,  556,  537,  738,  558,
      538,  557,  557,  557,  571,  493,  493,  571,  217,  582,
      582,  582,  737,  218,  219,  220,  221,  222,  223,  224,
      225,  871,  871,  576,  736,  217,  583,  583,  583,  162,
      577,  162,  539,  217,  584,  584,  584,  735,  218,  219,
      220,  221,  222,  223,  224,  225,  578,  459,  459,  459,
      162,  672,  162,  360,  360,  360,  360,  540,  541,  542,
      543,  544,  545,  546,  547,  218,  219,  220,  221,  222,
      223,  224,  225,  217,  601,  733,  579,  279,  873,  873,
      585,  602,  218,  219,  220,  221,  222,  223,  224,  225,

      218,  219,  220,  221,  222,  223,  224,  225,  614,  614,
      614,  616,  616,  616,  618,  618,  618,  279,  458,  728,
      585,  585,  586,  279,  279,  580,  585,  585,  442,  442,
      441,  279,  705,  442,  585,  279,  442,  704,  585,  703,
      218,  219,  220,  221,  222,  223,  224,  225,  493,  493,
      493,  493,  586,  586,  434,  702,  217,  434,  586,  586,
      468,  701,  434,  700,  162,  434,  586,  469,  279,  699,
      586,  585,  720,  279,  457,  279,  585,  698,  585,  438,
      438,  438,  606,  434,  697,  162,  434,  607,  607,  607,
      696,  608,  608,  279,  694,  457,  585,  275,  275,  275,

      275,  275,  275,  586,  280,  280,  901,  901,  586,  280,
      586,  605,  280,  218,  219,  220,  221,  222,  223,  224,
      225,  435,  435,  587,  435,  610,  610,  590,  586,  612,
      591,  609,  609,  609,  275,  275,  275,  275,  275,  275,
      620,  620,  620,  621,  621,  621,  622,  622,  622,  611,
      611,  611,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  587,  592,  493,  493,  493,  493,  136,  136,  136,
      626,  627,  627,  626,  136,  136,  136,  136,  136,  136,
      173,  173,  173,  435,  435,  435,  435,  593,  594,  595,
      596,  597,  598,  599,  600,  255,  998,  998,  998,  998,

      998,  998,  998,  998,  998,  998,  998,  998,  998,  998,
      998,  998,  998,  998,  998,  998,  173,  173,  173,  639,
      998,  998,  998,  998,  603,  641,  998,  998,  998,  998,
      435,  998,  998,  998,  998,  173,  173,  173,  679,  523,
      642,  514,  514,  514,  361,  640,  524,  645,  648,  648,
      648,  650,  650,  650,  534,  643,  652,  652,  652,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  903,  903,  644,  646,  654,  654,  654,  655,  655,
      655,  917,  917,  346,  346,  656,  656,  656,  346,  191,
      361,  346,  532,  532,  548,  191,  534,  191,  532,  360,

      532,  549,  191,  919,  919,  532,  191,  162,  998,  532,
      191,  998,  191,  532,  751,  532,  382,  382,  382,  191,
      924,  924,  532,  550,  533,  533,  191,  657,  162,  532,
      533,  512,  533,  382,  382,  382,  162,  533,  366,  366,
      512,  533,  653,  366,  647,  533,  366,  533,  382,  382,
      382,  536,  536,  536,  533,  658,  638,  162,  659,  659,
      659,  533,  660,  660,  752,  637,  661,  661,  661,  662,
      662,  191,  926,  926,  532,  663,  663,  663,  191,  934,
      934,  532,  664,  191,  936,  936,  532,  191,  955,  955,
      532,  191,  957,  957,  532,  191,  965,  965,  532,  382,

      382,  382,  191,  967,  967,  532,  533,  668,  668,  668,
      669,  669,  669,  533,  670,  670,  670,  636,  533,  185,
      185,  185,  533,  185,  185,  185,  533,  363,  363,  363,
      533,  185,  185,  185,  363,  363,  363,  533,  635,  363,
      363,  363,  634,  363,  363,  363,  633,  665,  665,  665,
      632,  666,  666,  666,  571,  493,  493,  571,  667,  667,
      667,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      631,  336,  998,  998,  998,  998,  998,  998,  998,  998,
      998,  998,  998,  998,  998,  998,  998,  998,  998,  998,
      998,  998,  265,  265,  265,  673,  998,  998,  998,  998,

      630,  675,  265,  265,  265,  265,  265,  265,  279,  441,
      601,  585,  585,  459,  459,  459,  676,  602,  435,  629,
      625,  674,  279,  279,  624,  585,  585,  783,  619,  279,
      783,  677,  585,  279,  613,  279,  585,  279,  585,  603,
      585,  581,  279,  586,  586,  585,  191,  279,  279,  678,
      585,  585,  255,  279,  442,  442,  585,  586,  586,  442,
      998,  380,  442,  998,  586,  380,  279,  565,  586,  585,
      586,  776,  586,  279,  776,  559,  585,  586,  589,  589,
      589,  680,  586,  586,  550,  681,  681,  681,  586,  682,
      682,  683,  683,  683,  684,  684,  162,  531,  685,  685,

      685,  586,  525,  686,  438,  438,  438,  191,  586,  438,
      438,  438,  279,  497,  496,  585,  279,  162,  495,  585,
      494,  492,  438,  438,  438,  279,  491,  490,  585,  438,
      438,  438,  459,  459,  459,  459,  459,  459,  459,  459,
      459,  690,  690,  690,  691,  691,  691,  586,  692,  692,
      692,  586,  275,  275,  275,  275,  275,  275,  489,  488,
      586,  275,  275,  275,  627,  627,  627,  627,  687,  687,
      687,  487,  688,  688,  688,  626,  627,  627,  626,  483,
      254,  689,  689,  689,  627,  627,  627,  627,  478,  472,
      254,  998,  998,  998,  998,  998,  998,  998,  998,  998,

      998,  998,  998,  998,  998,  998,  998,  998,  998,  998,
      998,  998,  998,  998,  998,  998,  998,  998,  998,  998,
      998,  998,  998,  279,  706,  514,  514,  514,  514,  514,
      514,  279,  709,  708,  514,  514,  514,  514,  514,  514,
      431,  425,  712,  714,  714,  714,  715,  715,  715,  707,
      716,  716,  716,  183,  183,  183,  183,  183,  183,  255,
      300,  711,  710,  183,  183,  183,  191,  713,  191,  532,
      294,  532,  191,  255,  252,  532,  191,  424,  413,  532,
      191,  407,  243,  532,  191,  237,  400,  532,  191,  394,
      191,  532,  191,  343,  337,  532,  191,  212,  206,  532,

      323,  533,  317,  533,  382,  382,  382,  533,  382,  382,
      382,  533,  382,  382,  382,  533,  459,  459,  459,  533,
      459,  459,  459,  533,  536,  536,  536,  533,  536,  536,
      536,  533,  536,  536,  536,  153,  536,  536,  536,  147,
      717,  717,  717,  316,  718,  718,  718,  315,  719,  719,
      719,  314,  363,  363,  363,  191,  313,  312,  532,  191,
      120,  307,  532,  998,  998,  998,  998,  998,  998,  998,
      998,  998,  998,  998,  998,  998,  998,  998,  998,  998,
      998,  998,  998,  998,  998,  998,  998,  306,  279,  305,
      533,  585,  279,  300,  533,  585,  722,  279,  294,  785,

      585,  252,  785,  279,  725,  724,  585,  279,  243,  237,
      585,  363,  363,  363,  212,  363,  363,  363,  459,  459,
      459,  723,  279,  586,  255,  585,  206,  586,  514,  514,
      514,  153,  586,  727,  726,  147,  279,  120,  586,  585,
      279,  998,  586,  585,  589,  589,  589,  998,  589,  589,
      589,  998,  998,  589,  589,  589,  998,  586,  998,  589,
      589,  589,  998,  729,  729,  729,  279,  998,  998,  585,
      279,  586,  998,  585,  998,  586,  998,  998,  730,  730,
      730,  998,  998,  998,  998,  998,  998,  998,  998,  514,
      514,  514,  731,  731,  731,  998,  438,  438,  438,  998,

      998,  586,  514,  514,  514,  586,  998,  998,  998,  998,
      998,  998,  998,  744,  998,  998,  998,  998,  998,  998,
      998,  998,  438,  438,  438,  998,  438,  438,  438,  746,
      998,  998,  998,  998,  998,  998,  998,  998,  745,  998,
      998,  998,  998,  191,  998,  998,  532,  998,  191,  998,
      747,  532,  998,  191,  998,  998,  532,  998,  998,  998,
      998,  748,  998,  998,  998,  998,  786,  786,  786,  750,
      998,  998,  998,  998,  998,  998,  998,  998,  533,  998,
      998,  998,  998,  533,  854,  854,  854,  749,  533,  753,
      279,  755,  998,  585,  998,  750,  856,  856,  856,  536,

      536,  536,  998,  998,  536,  536,  536,  998,  998,  536,
      536,  536,  858,  858,  858,  754,  998,  998,  998,  998,
      279,  998,  757,  585,  279,  586,  998,  585,  796,  796,
      796,  758,  771,  771,  771,  771,  763,  998,  998,  763,
      764,  998,  998,  764,  998,  998,  589,  589,  589,  870,
      870,  870,  756,  998,  777,  586,  998,  777,  998,  586,
      998,  998,  998,  998,  998,  998,  998,  998,  998,  998,
      998,  998,  998,  998,  998,  998,  589,  589,  589,  162,
      589,  589,  589,  771,  771,  771,  771,  763,  998,  998,
      763,  763,  998,  773,  763,  998,  772,  998,  998,  787,

      162,  764,  998,  998,  764,  998,  998,  998,  998,  998,
      998,  998,  998,  998,  998,  998,  998,  998,  998,  998,
      998,  764,  775,  998,  764,  774,  872,  872,  872,  797,
      771,  771,  771,  771,  998,  998,  998,  998,  779,  998,
      998,  778,  998,  998,  998,  998,  998,  998,  998,  998,
      998,  998,  998,  998,  998,  998,  788,  789,  790,  791,
      792,  793,  794,  795,  874,  874,  874,  781,  998,  998,
      780,  812,  998,  998,  998,  998,  823,  823,  823,  813,
      998,  998,  998,  998,  814,  998,  798,  799,  800,  801,
      802,  803,  804,  805,  998,  998,  998,  998,  900,  900,

      900,  818,  998,  998,  815,  776,  998,  998,  776,  998,
      998,  998,  998,  787,  845,  846,  847,  848,  849,  850,
      851,  852,  816,  902,  902,  902,  998,  819,  998,  998,
      820,  998,  998,  998,  998,  998,  998,  998,  998,  787,
      998,  998,  998,  998,  904,  904,  904,  998,  797,  861,
      862,  863,  864,  865,  866,  867,  868,  998,  998,  998,
      998,  998,  998,  821,  998,  998,  998,  998,  882,  998,
      788,  789,  790,  791,  792,  793,  794,  795,  777,  998,
      998,  777,  998,  998,  998,  998,  797,  998,  998,  883,
      998,  998,  998,  998,  998,  817,  788,  789,  790,  791,

      792,  793,  794,  795,  998,  798,  799,  800,  801,  802,
      803,  804,  805,  998,  998,  998,  998,  998,  884,  998,
      998,  787,  998,  886,  998,  998,  998,  998,  998,  998,
      797,  834,  834,  834,  998,  885,  916,  916,  916,  918,
      918,  918,  998,  798,  799,  800,  801,  802,  803,  804,
      805,  783,  998,  998,  783,  998,  254,  998,  887,  824,
      998,  998,  998,  998,  998,  998,  254,  920,  920,  920,
      998,  998,  998,  998,  998,  998,  998,  998,  788,  789,
      790,  791,  792,  793,  794,  795,  998,  798,  799,  800,
      801,  802,  803,  804,  805,  891,  892,  893,  894,  895,

      896,  897,  898,  907,  908,  909,  910,  911,  912,  913,
      914,  844,  844,  844,  888,  998,  825,  826,  827,  828,
      829,  830,  831,  832,  785,  889,  998,  785,  998,  254,
      998,  998,  835,  923,  923,  923,  925,  925,  925,  254,
      927,  927,  927,  786,  786,  786,  998,  998,  998,  998,
      998,  998,  786,  786,  786,  998,  787,  786,  786,  786,
      786,  786,  786,  929,  929,  929,  930,  930,  930,  931,
      931,  931,  998,  998,  998,  998,  860,  860,  860,  998,
      797,  933,  933,  933,  935,  935,  935,  998,  998,  836,
      837,  838,  839,  840,  841,  842,  843,  822,  998,  998,

      822,  998,  998,  998,  998,  824,  937,  937,  937,  796,
      796,  796,  998,  788,  789,  790,  791,  792,  793,  794,
      795,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      939,  939,  939,  940,  940,  940,  998,  798,  799,  800,
      801,  802,  803,  804,  805,  941,  941,  941,  998,  998,
      998,  998,  998,  998,  998,  998,  998,  998,  998,  998,
      998,  998,  825,  826,  827,  828,  829,  830,  831,  832,
      833,  998,  998,  833,  998,  998,  998,  998,  835,  998,
      947,  998,  998,  998,  998,  998,  998,  948,  998,  998,
      998,  998,  998,  998,  998,  998,  998,  998,  998,  998,

      998,  998,  998,  998,  890,  890,  890,  998,  998,  949,
      954,  954,  954,  950,  956,  956,  956,  958,  958,  958,
      823,  823,  823,  823,  823,  823,  998,  951,  823,  823,
      823,  823,  823,  823,  998,  836,  837,  838,  839,  840,
      841,  842,  843,  998,  948,  960,  960,  960,  998,  952,
      961,  961,  961,  962,  962,  962,  951,  906,  906,  906,
      964,  964,  964,  966,  966,  966,  968,  968,  968,  834,
      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
      834,  970,  970,  970,  971,  971,  971,  972,  972,  972,
      844,  844,  844,  844,  844,  844,  844,  844,  844,  844,

      844,  844,  973,  973,  973,  974,  974,  974,  975,  975,
      975,  786,  786,  786,  786,  786,  786,  786,  786,  786,
      860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
      860,  860,  976,  976,  976,  977,  977,  977,  978,  978,
      978,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      979,  979,  979,  979,  998,  998,  998,  998,  979,  979,
      979,  979,  998,  998,  998,  998,  998,  998,  998,  998,
      979,  979,  979,  979,  998,  998,  998,  998,  890,  890,
      890,  890,  890,  890,  890,  890,  890,  998,  998,  948,
      890,  890,  890,  982,  982,  982,  983,  983,  983,  998,

      998,  951,  984,  984,  984,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  906,  906,  906,  998,  948,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  998,  998,
      951,  985,  985,  985,  986,  986,  986,  987,  987,  987,
      834,  834,  834,  834,  834,  834,  834,  834,  834,  844,
      844,  844,  844,  844,  844,  844,  844,  844,  860,  860,
      860,  860,  860,  860,  860,  860,  860,  979,  979,  979,
      979,  890,  890,  890,  890,  890,  890,  890,  890,  890,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  997,
      997,  997,  997,  997,  997,  997,  997,   14,   14,   14,

       14,   14,   14,   14,   14,   14,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   87,   87,   87,   87,   87,   87,   87,
       87,   87,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  110,  110,  998,  110,  110,  110,  110,  110,  110,
      125,  125,  998,  125,  125,  125,  125,  125,  125,  136,
      136,  136,  136,  136,  136,  160,  160,  998,  160,  160,
      160,  160,  160,  160,  162,  998,  162,  998,  998,  162,
      173,  173,  173,  173,  173,  173,  185,  185,  185,  998,

      185,  185,  185,  215,  215,  998,  215,  215,  215,  215,
      215,  215,  226,  226,  226,  226,  226,  226,  250,  250,
      998,  250,  250,  250,  250,  250,  250,  251,  998,  998,
      251,  251,  251,  251,  251,  251,  255,  998,  255,  998,
      255,  255,  998,  255,  265,  265,  265,  265,  265,  265,
      275,  275,  275,  998,  275,  275,  275,  183,  183,  183,
      998,  183,  183,  183,  183,  382,  382,  382,  382,  382,
      382,  459,  459,  459,  459,  459,  459,  514,  514,  514,
      514,  514,  514,  360,  360,  998,  360,  360,  360,  360,
      360,  536,  536,  998,  536,  536,  536,  536,  536,  536,

      435,  435,  998,  435,  435,  435,  435,  435,  589,  589,
      998,  589,  589,  589,  589,  589,  589,  786,  998,  786,
      998,  998,  786,  796,  998,  796,  998,  998,  796,  823,
      998,  823,  998,  823,  823,  998,  823,  834,  998,  834,
      998,  834,  834,  998,  834,  844,  844,  844,  844,  844,
      844,  860,  860,  860,  860,  860,  860,  890,  890,  890,
      890,  890,  890,  906,  906,  906,  906,  906,  906,   13,
      998,  998,  998,  998,  998,  998,  998,  998,  998,  998,
      998,  998,  998,  998,  998,  998,  998,  998,  998,  998,
      998,  998,  998,  998,  998,  998,  998,  998,  998,  998,

      998,  998,  998,  998,  998,  998,  998,  998,  998,  998,
      998,  998,  998,  998,  998,  998,  998,  998,  998,  998,
      998,  998,  998,  998,  998,  998,  998,  998,  998,  998,
      998,  998,  998,  998,  998,  998,  998,  998,  998,  998,
      998,  998,  998,  998
    } ;

static yyconst flex_int16_t yy_chk[4345] =
    {   0,
        0,    1,    1,    1,    1,    1,   15,   26,   21,   15,
       26,   21,   45,  161,  186,   45,  161,  344,  195,   41,
      195,  186,   41,   30,  344, 1014,   19,   22,  102,  109,
      161,    1,   21,   21,   25,  102,   15,   26,   21,   21,
       21,  479,   45,   41,   41,  479,  293,   19,   22,   41,
      109,   41,  119,  118,  119,   25,  118,  275,   24,  293,
      275, 1007,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    2,    2,    2,    2,    2,   24,
       30,   30,   30,   30,   30,   30,   30,   30,   31,   31,
       31,   31,   31,   31,   31,   31,   36,   36,    2,    2,

       33,   33,   33,  995,    2,    2,    2,   35,   35,   35,
       37,   37,   37,   38,   38,   39,   39,   39,   50,   50,
       50,   50,   50,   50,   50,   50,   53,   53,   53,  994,
       43,   55,   55,   55,  114,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    3,    3,    3,
        3,    3,    3,    3,   43,  114,    3,   56,   56,   57,
       57,   57,    3,    3,    3,  693,    3,   58,   58,   59,
       59,   59,   61,  693,   62,   61,   63,   82,    3,   63,
       82,   62,   71,   71,   71,   74,   74,   43,   43,   43,
       43,   43,   43,   43,   43,   62,  993,   61,   73,   73,

       73,  992,   61,   44,   76,   76,   63,   82,  116,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    4,    4,    4,    4,    4,    4,    4,   44,  116,
        4,   75,   75,   75,   96,   96,    4,    4,    4,  628,
        4,   77,   77,   77,   98,   98,    4,    4,  279,   44,
      108,  279,    4,  108,    4,   93,   93,   93,   67,  628,
       44,   44,   44,   44,   44,   44,   44,   44,   68,   68,
       68,   68,   68,   68,   68,   68,  131,  131,   79,  991,
      108,   79,   81,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    5,    5,    5,    5,    5,

        5,    5,   79,   79,    5,  351,   81,  351,   79,  695,
        5,    5,    5,    5,    5,   67,   67,   67,   67,   67,
       67,   67,   67,   95,   95,   95,    5,   88,   88,   88,
       88,   88,   88,   88,   88,   97,   97,   97,  695,   81,
       81,   81,   81,   81,   81,   81,   81,   99,   99,   99,
      371,  101,  371,  126,  101,  133,  133,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    6,
        6,    6,    6,    6,    6,    6,  101,  113,    6,  990,
      113,  101,  117,  989,    6,    6,    6,    6,    6,  128,
      128,  128,  130,  130,  130,    6,  132,  132,  132,  988,

        6,  113,  113,  117,  134,  134,  134,  113,  113,  113,
      126,  126,  126,  126,  126,  126,  126,  126,  127,  127,
      127,  127,  127,  127,  127,  127,  136,  137,  137,  137,
      981,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    7,    7,    7,    7,    7,    7,    7,
      140,  140,    7,  139,  139,  139,  142,  142,    7,    7,
        7,  162,    7,  141,  141,  141,  143,  143,  143,  147,
      147,  147,  168,  168,    7,  148,  148,  148,  149,  149,
      149,  980,  162,  136,  136,  136,  136,  136,  136,  136,
      136,  150,  150,  150,  145,  151,  151,  151,  152,  152,

      152,  153,  153,  153,  164,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    8,    8,    8,
        8,    8,    8,    8,  145,  164,    8,  165,  165,  165,
      170,  170,    8,    8,    8,  154,    8,  946,  154,  167,
      167,  167,    8,    8,  169,  169,  169,  173,    8,  177,
      177,  145,  145,  145,  145,  145,  145,  145,  145,  154,
      154,  171,  171,  171,  945,  154,  146,  154,  173,  174,
      174,  174,  179,  179,  156,  176,  176,  176,  194,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    9,    9,    9,    9,    9,    9,    9,  194,  944,

        9,  178,  178,  178,  199,  199,    9,    9,    9,  280,
        9,  156,  280,  156,  180,  180,  180,  146,  942,  194,
      201,  201,    9,  146,  146,  146,  146,  146,  146,  146,
      146,  156,  156,  156,  156,  156,  156,  156,  156,  163,
      163,  163,  163,  163,  163,  163,  163,  196,  196,  196,
      198,  198,  198,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,   10,   10,   10,   10,   10,
       10,   10,  204,  914,   10,  200,  200,  200,  908,  205,
       10,   10,   10,  364,   10,  204,   32,  202,  202,  202,
      364,   10,  434,  204,  155,  434,   10,  206,  206,  206,

      205,  221,  221,   32,  157,  207,  207,  207,  898,  155,
      223,  223,  155,  205,  208,  208,  208,  209,  209,  209,
      157,  210,  210,  210,   32,  230,  230,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   11,
       11,   11,   11,   32,   32,   32,   32,   32,   32,   32,
       32,  155,  155,  155,  155,  155,  155,  155,  155,   42,
      305,  157,  157,  157,  157,  157,  157,  157,  157,  158,
      211,  211,  211,  212,  212,  212,   42,  159,  187,  187,
      187,  187,  187,  187,  187,  187,  892,  158,  218,  218,
      218,  220,  220,  220,  305,  159,  216,   42,  232,  232,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   12,   12,   12,   12,   42,   42,   42,   42,
       42,   42,   42,   42,  214,  214,  158,  158,  158,  158,
      158,  158,  158,  158,  159,  159,  159,  159,  159,  159,
      159,  159,  222,  222,  222,  190,  214,  303,   70,  224,
      224,  224,  190,  216,  216,  216,  216,  216,  216,  216,
      216,  227,  227,  227,  881,   70,  213,  226,  303,  213,
      229,  229,  229,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   49,   70,  880,   49,  190,
      190,  213,  458,   49,  190,  458,  213,  190,  231,  231,

      231,  879,   49,  260,  260,   70,   70,   70,   70,   70,
       70,   70,   70,  217,  217,  217,  217,  217,  217,  217,
      217,  448,   80,  448,  226,  226,  226,  226,  226,  226,
      226,  226,  233,  233,  233,  237,  237,  237,  878,   80,
      238,  238,  238,  239,  239,  239,  235,  240,  240,  240,
       49,   49,   49,   49,   49,   49,   49,   49,   51,   51,
       80,   51,  623,   51,  623,   51,   51,   51,  877,   51,
       51,   51,   51,  876,   51,   51,  235,   51,   51,   80,
       80,   80,   80,   80,   80,   80,   80,  241,  241,  241,
      242,  242,  242,  243,  243,  243,  262,  262,   51,   51,

       51,  236,  868,  235,  235,  235,  235,  235,  235,  235,
      235,  244,  246,  248,  244,  862,  248,  257,  257,  257,
      269,  269,  245,   51,   51,   51,   51,   51,   51,   51,
       51,   52,  271,  271,   52,  244,  244,  245,  852,   52,
      245,  244,  253,  248,  846,  253,  843,  253,   52,  246,
      837,  246,  236,  259,  259,  259,   52,  253,  236,  236,
      236,  236,  236,  236,  236,  236,  261,  261,  261,  246,
      246,  246,  246,  246,  246,  246,  246,   52,  247,  245,
      245,  245,  245,  245,  245,  245,  245,  263,  263,  263,
      266,  266,  266,  832,  247,  826,   52,   52,   52,   52,

       52,   52,   52,   52,   87,  288,  288,   87,  811,   87,
      290,  290,   87,  268,  268,  268,  270,  270,  270,   87,
      256,  256,  256,  256,  256,  256,  256,  256,  272,  272,
      272,  277,  304,  304,  277,  247,  247,  247,  247,  247,
      247,  247,  247,  277,  284,  355,  355,  284,  357,  357,
      277,  278,  278,  278,  278,  278,  278,  278,  278,  734,
      284,  810,  284,  285,  285,  285,  287,  287,  287,   87,
       87,   87,   87,   87,   87,   87,   87,   91,  386,  386,
       91,  402,   91,  809,   91,   91,   91,  734,   91,   91,
       91,   91,  808,   91,  388,  388,   91,   91,  289,  289,

      289,  281,  402,  807,  281,  806,  402,  281,  291,  291,
      291,  294,  294,  294,  281,  463,  463,   91,   91,   91,
      295,  295,  295,  296,  296,  296,  297,  297,  297,  298,
      298,  298,  299,  299,  299,  300,  300,  300,  301,  465,
      465,  301,   91,   91,   91,   91,   91,   91,   91,   91,
       92,  281,  281,   92,  805,   92,  281,  439,   92,  281,
      317,  317,  317,  301,  439,   92,  518,  518,  301,  312,
      312,  312,  312,  520,  520,   92,  318,  318,  318,  319,
      319,  319,  320,  320,  320,  321,  321,  321,  322,  322,
      322,  323,  323,  323,  326,  326,  326,  327,  327,  327,

      328,  328,  328,  335,  335,  335,  335,  337,  337,  337,
      459,  470,  324,  459,  470,   92,   92,   92,   92,   92,
       92,   92,   92,  182,  360,  799,  182,  360,  182,  470,
      182,  182,  182,  324,  182,  182,  182,  182,  182,  182,
      182,  795,  182,  182,  338,  338,  338,  334,  334,  334,
      334,  339,  339,  339,  335,  340,  340,  340,  471,  360,
      325,  471,  789,  182,  182,  182,  341,  341,  341,  324,
      324,  324,  324,  324,  324,  324,  324,  334,  342,  342,
      342,  343,  343,  343,  329,  352,  352,  352,  182,  182,
      182,  182,  182,  182,  182,  182,  183,  590,  770,  183,

      590,  183,  325,  183,  183,  183,  329,  183,  183,  183,
      183,  183,  183,  769,  486,  183,  183,  325,  325,  325,
      325,  325,  325,  325,  325,  345,  345,  345,  345,  345,
      345,  345,  345,  354,  354,  354,  183,  183,  183,  486,
      768,  329,  329,  329,  329,  329,  329,  329,  329,  356,
      356,  356,  358,  358,  358,  383,  383,  383,  385,  385,
      385,  183,  183,  183,  183,  183,  183,  183,  183,  184,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,

      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  185,  185,  401,  185,  767,  185,  401,
      185,  185,  185,  766,  185,  185,  185,  185,  185,  185,
      185,  368,  185,  185,  368,  369,  401,  765,  369,  387,
      387,  387,  732,  761,  368,  389,  389,  389,  735,  732,
      330,  735,  759,  185,  185,  185,  791,  791,  331,  394,
      394,  394,  395,  395,  395,  742,  368,  396,  396,  396,

      369,  330,  397,  397,  397,  398,  398,  398,  185,  185,
      185,  185,  185,  185,  185,  185,  274,  736,  741,  274,
      736,  274,  740,  274,  274,  274,  347,  274,  274,  274,
      274,  331,  274,  347,  274,  274,  274,  330,  330,  330,
      330,  330,  330,  330,  330,  331,  331,  331,  331,  331,
      331,  331,  331,  399,  399,  399,  274,  274,  274,  400,
      400,  400,  403,  403,  403,  404,  404,  404,  793,  793,
      347,  347,  405,  405,  405,  347,  782,  784,  347,  782,
      784,  274,  274,  274,  274,  274,  274,  274,  274,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,

      276,  276,  276,  276,  276,  739,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,
      276,  276,  276,  332,  367,  407,  407,  407,  408,  408,
      408,  367,  409,  409,  409,  823,  372,  373,  823,  372,
      373,  569,  374,  569,  738,  374,  410,  410,  410,  411,
      411,  411,  412,  412,  412,  413,  413,  413,  416,  416,

      416,  417,  417,  417,  569,  332,  737,  375,  367,  367,
      375,  372,  373,  367,  733,  376,  367,  374,  376,  728,
      332,  332,  332,  332,  332,  332,  332,  332,  333,  333,
      333,  333,  372,  372,  372,  373,  333,  380,  374,  374,
      374,  672,  375,  705,  380,  418,  418,  418,  377,  435,
      376,  377,  435,  379,  834,  378,  379,  834,  378,  425,
      425,  425,  672,  375,  375,  704,  414,  426,  426,  426,
      672,  376,  376,  376,  427,  427,  427,  428,  428,  428,
      703,  380,  380,  377,  435,  702,  380,  414,  379,  380,
      378,  415,  701,  333,  333,  333,  333,  333,  333,  333,

      333,  365,  365,  700,  365,  377,  377,  365,  699,  379,
      365,  378,  378,  378,  406,  406,  406,  406,  419,  429,
      429,  429,  698,  414,  414,  414,  414,  414,  414,  414,
      414,  801,  801,  415,  697,  420,  430,  430,  430,  406,
      419,  570,  365,  421,  431,  431,  431,  696,  415,  415,
      415,  415,  415,  415,  415,  415,  420,  460,  460,  460,
      406,  570,  570,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  419,  419,  419,  419,  419,
      419,  419,  419,  422,  443,  694,  421,  445,  803,  803,
      445,  443,  420,  420,  420,  420,  420,  420,  420,  420,

      421,  421,  421,  421,  421,  421,  421,  421,  462,  462,
      462,  464,  464,  464,  466,  466,  466,  444,  446,  679,
      444,  446,  445,  449,  450,  422,  449,  450,  443,  443,
      444,  451,  638,  443,  451,  452,  443,  637,  452,  636,
      422,  422,  422,  422,  422,  422,  422,  422,  423,  423,
      423,  423,  444,  446,  457,  635,  423,  457,  449,  450,
      457,  634,  468,  633,  671,  468,  451,  457,  454,  632,
      452,  454,  671,  456,  468,  453,  456,  631,  453,  449,
      449,  449,  450,  469,  630,  671,  469,  451,  451,  451,
      629,  452,  452,  455,  625,  469,  455,  472,  472,  472,

      473,  473,  473,  454,  457,  457,  828,  828,  456,  457,
      453,  604,  457,  423,  423,  423,  423,  423,  423,  423,
      423,  440,  440,  602,  440,  454,  454,  440,  455,  456,
      440,  453,  453,  453,  474,  474,  474,  475,  475,  475,
      476,  476,  476,  477,  477,  477,  478,  478,  478,  455,
      455,  455,  480,  480,  480,  481,  481,  481,  482,  482,
      482,  601,  440,  493,  493,  493,  493,  498,  498,  498,
      485,  485,  485,  485,  499,  499,  499,  500,  500,  500,
      509,  509,  509,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  485,  501,  501,  501,  501,

      502,  502,  502,  502,  503,  503,  503,  503,  504,  504,
      504,  504,  505,  505,  505,  505,  510,  510,  510,  501,
      506,  506,  506,  506,  592,  503,  507,  507,  507,  507,
      591,  508,  508,  508,  508,  511,  511,  511,  581,  512,
      504,  515,  515,  515,  551,  502,  512,  507,  517,  517,
      517,  519,  519,  519,  549,  505,  521,  521,  521,  525,
      525,  525,  526,  526,  526,  527,  527,  527,  528,  528,
      528,  830,  830,  506,  508,  529,  529,  529,  530,  530,
      530,  839,  839,  512,  512,  531,  531,  531,  512,  532,
      533,  512,  532,  533,  534,  540,  548,  541,  540,  532,

      541,  534,  542,  841,  841,  542,  543,  720,  890,  543,
      544,  890,  545,  544,  720,  545,  559,  559,  559,  546,
      848,  848,  546,  539,  532,  533,  547,  538,  720,  547,
      540,  524,  541,  560,  560,  560,  721,  542,  534,  534,
      523,  543,  522,  534,  516,  544,  534,  545,  561,  561,
      561,  540,  540,  540,  546,  541,  497,  721,  542,  542,
      542,  547,  543,  543,  721,  496,  544,  544,  544,  545,
      545,  552,  850,  850,  552,  546,  546,  546,  553,  864,
      864,  553,  547,  554,  866,  866,  554,  555,  894,  894,
      555,  556,  896,  896,  556,  557,  910,  910,  557,  562,

      562,  562,  558,  912,  912,  558,  552,  563,  563,  563,
      564,  564,  564,  553,  565,  565,  565,  495,  554,  566,
      566,  566,  555,  567,  567,  567,  556,  552,  552,  552,
      557,  568,  568,  568,  553,  553,  553,  558,  494,  554,
      554,  554,  492,  555,  555,  555,  491,  556,  556,  556,
      490,  557,  557,  557,  571,  571,  571,  571,  558,  558,
      558,  572,  572,  572,  573,  573,  573,  574,  574,  574,
      489,  571,  575,  575,  575,  575,  576,  576,  576,  576,
      577,  577,  577,  577,  578,  578,  578,  578,  579,  579,
      579,  579,  582,  582,  582,  575,  580,  580,  580,  580,

      488,  577,  583,  583,  583,  584,  584,  584,  585,  586,
      587,  585,  586,  613,  613,  613,  578,  587,  585,  487,
      484,  576,  593,  594,  483,  593,  594,  760,  467,  595,
      760,  579,  595,  596,  461,  597,  596,  598,  597,  447,
      598,  424,  599,  585,  586,  599,  393,  600,  606,  580,
      600,  606,  760,  607,  587,  587,  607,  593,  594,  587,
      906,  392,  587,  906,  595,  391,  608,  390,  596,  608,
      597,  751,  598,  609,  751,  384,  609,  599,  593,  593,
      593,  594,  600,  606,  370,  595,  595,  595,  607,  596,
      596,  597,  597,  597,  598,  598,  751,  359,  599,  599,

      599,  608,  353,  600,  606,  606,  606,  350,  609,  607,
      607,  607,  610,  316,  315,  610,  611,  751,  314,  611,
      313,  311,  608,  608,  608,  612,  310,  309,  612,  609,
      609,  609,  614,  614,  614,  615,  615,  615,  616,  616,
      616,  617,  617,  617,  618,  618,  618,  610,  619,  619,
      619,  611,  620,  620,  620,  621,  621,  621,  308,  307,
      612,  622,  622,  622,  624,  624,  624,  624,  610,  610,
      610,  306,  611,  611,  611,  626,  626,  626,  626,  302,
      626,  612,  612,  612,  627,  627,  627,  627,  292,  286,
      626,  639,  639,  639,  639,  640,  640,  640,  640,  641,

      641,  641,  641,  642,  642,  642,  642,  643,  643,  643,
      643,  644,  644,  644,  644,  645,  645,  645,  645,  646,
      646,  646,  646,  283,  639,  647,  647,  647,  648,  648,
      648,  282,  642,  641,  649,  649,  649,  650,  650,  650,
      273,  267,  645,  651,  651,  651,  652,  652,  652,  640,
      653,  653,  653,  654,  654,  654,  655,  655,  655,  265,
      264,  644,  643,  656,  656,  656,  657,  646,  658,  657,
      258,  658,  659,  255,  251,  659,  660,  249,  234,  660,
      661,  228,  225,  661,  662,  219,  203,  662,  663,  197,
      192,  663,  664,  181,  175,  664,  665,  172,  166,  665,

      144,  657,  138,  658,  668,  668,  668,  659,  669,  669,
      669,  660,  670,  670,  670,  661,  690,  690,  690,  662,
      691,  691,  691,  663,  658,  658,  658,  664,  659,  659,
      659,  665,  660,  660,  660,  135,  661,  661,  661,  129,
      662,  662,  662,  124,  663,  663,  663,  123,  664,  664,
      664,  122,  665,  665,  665,  666,  121,  120,  666,  667,
      115,  112,  667,  673,  673,  673,  673,  674,  674,  674,
      674,  675,  675,  675,  675,  676,  676,  676,  676,  677,
      677,  677,  677,  678,  678,  678,  678,  111,  680,  103,
      666,  680,  681,  100,  667,  681,  673,  682,   94,  762,

      682,   86,  762,  683,  676,  675,  683,  684,   78,   72,
      684,  666,  666,  666,   60,  667,  667,  667,  692,  692,
      692,  674,  685,  680,  762,  685,   54,  681,  714,  714,
      714,   40,  682,  678,  677,   34,  686,   23,  683,  686,
      687,   13,  684,  687,  680,  680,  680,    0,  681,  681,
      681,    0,    0,  682,  682,  682,    0,  685,    0,  683,
      683,  683,    0,  684,  684,  684,  688,    0,    0,  688,
      689,  686,    0,  689,    0,  687,    0,    0,  685,  685,
      685,  706,  706,  706,  706,  707,  707,  707,  707,  715,
      715,  715,  686,  686,  686,    0,  687,  687,  687,    0,

        0,  688,  716,  716,  716,  689,    0,    0,  708,  708,
      708,  708,    0,  706,  709,  709,  709,  709,  710,  710,
      710,  710,  688,  688,  688,    0,  689,  689,  689,  708,
      711,  711,  711,  711,  712,  712,  712,  712,  707,  713,
      713,  713,  713,  717,    0,    0,  717,    0,  718,    0,
      709,  718,    0,  719,    0,    0,  719,  722,  722,  722,
      722,  710,  723,  723,  723,  723,  788,  788,  788,  712,
      724,  724,  724,  724,  727,  727,  727,  727,  717,  726,
      726,  726,  726,  718,  790,  790,  790,  711,  719,  722,
      729,  724,    0,  729,    0,  713,  792,  792,  792,  717,

      717,  717,    0,    0,  718,  718,  718,    0,    0,  719,
      719,  719,  794,  794,  794,  723,  725,  725,  725,  725,
      730,    0,  726,  730,  731,  729,    0,  731,  798,  798,
      798,  727,  743,  743,  743,  743,  744,  744,  744,  744,
      745,  745,  745,  745,    0,    0,  729,  729,  729,  800,
      800,  800,  725,    0,  752,  730,    0,  752,    0,  731,
      746,  746,  746,  746,  747,  747,  747,  747,  748,  748,
      748,  748,  749,  749,  749,  749,  730,  730,  730,  752,
      731,  731,  731,  750,  750,  750,  750,  753,  753,  753,
      753,  763,    0,  747,  763,    0,  746,    0,    0,  763,

      752,  754,  754,  754,  754,  755,  755,  755,  755,  756,
      756,  756,  756,  757,  757,  757,  757,  758,  758,  758,
      758,  764,  749,    0,  764,  748,  802,  802,  802,  764,
      771,  771,  771,  771,  774,  774,  774,  774,  756,    0,
        0,  755,  772,  772,  772,  772,  773,  773,  773,  773,
      775,  775,  775,  775,    0,    0,  763,  763,  763,  763,
      763,  763,  763,  763,  804,  804,  804,  758,    0,    0,
      757,  772,  778,  778,  778,  778,  825,  825,  825,  773,
      780,  780,  780,  780,  774,    0,  764,  764,  764,  764,
      764,  764,  764,  764,  779,  779,  779,  779,  827,  827,

      827,  778,    0,    0,  775,  776,    0,    0,  776,  781,
      781,  781,  781,  776,  787,  787,  787,  787,  787,  787,
      787,  787,  776,  829,  829,  829,    0,  779,    0,    0,
      780,  786,    0,    0,  786,  812,  812,  812,  812,  786,
      796,    0,    0,  796,  831,  831,  831,    0,  796,  797,
      797,  797,  797,  797,  797,  797,  797,  813,  813,  813,
      813,    0,    0,  781,  814,  814,  814,  814,  812,    0,
      776,  776,  776,  776,  776,  776,  776,  776,  777,    0,
        0,  777,  815,  815,  815,  815,  777,    0,    0,  813,
      818,  818,  818,  818,    0,  777,  786,  786,  786,  786,

      786,  786,  786,  786,    0,  796,  796,  796,  796,  796,
      796,  796,  796,  816,    0,    0,  816,    0,  814,    0,
        0,  816,  817,  818,    0,  817,  819,  819,  819,  819,
      817,  836,  836,  836,    0,  815,  838,  838,  838,  840,
      840,  840,    0,  777,  777,  777,  777,  777,  777,  777,
      777,  783,    0,    0,  783,    0,  783,    0,  819,  783,
      820,  820,  820,  820,    0,    0,  783,  842,  842,  842,
        0,    0,  821,  821,  821,  821,    0,    0,  816,  816,
      816,  816,  816,  816,  816,  816,    0,  817,  817,  817,
      817,  817,  817,  817,  817,  824,  824,  824,  824,  824,

      824,  824,  824,  835,  835,  835,  835,  835,  835,  835,
      835,  845,  845,  845,  820,    0,  783,  783,  783,  783,
      783,  783,  783,  783,  785,  821,    0,  785,    0,  785,
        0,    0,  785,  847,  847,  847,  849,  849,  849,  785,
      851,  851,  851,  853,  853,  853,    0,    0,  844,    0,
        0,  844,  854,  854,  854,    0,  844,  855,  855,  855,
      856,  856,  856,  857,  857,  857,  858,  858,  858,  859,
      859,  859,  860,    0,    0,  860,  861,  861,  861,    0,
      860,  863,  863,  863,  865,  865,  865,    0,    0,  785,
      785,  785,  785,  785,  785,  785,  785,  822,    0,    0,

      822,    0,  822,    0,    0,  822,  867,  867,  867,  869,
      869,  869,  822,  844,  844,  844,  844,  844,  844,  844,
      844,  870,  870,  870,  871,  871,  871,  872,  872,  872,
      873,  873,  873,  874,  874,  874,    0,  860,  860,  860,
      860,  860,  860,  860,  860,  875,  875,  875,  882,  882,
      882,  882,  883,  883,  883,  883,  884,  884,  884,  884,
        0,    0,  822,  822,  822,  822,  822,  822,  822,  822,
      833,    0,    0,  833,    0,  833,    0,    0,  833,    0,
      882,  886,  886,  886,  886,  833,    0,  883,  885,  885,
      885,  885,  887,  887,  887,  887,  888,  888,  888,  888,

      889,  889,  889,  889,  891,  891,  891,    0,    0,  884,
      893,  893,  893,  886,  895,  895,  895,  897,  897,  897,
      899,  899,  899,  900,  900,  900,    0,  887,  901,  901,
      901,  902,  902,  902,    0,  833,  833,  833,  833,  833,
      833,  833,  833,    0,  885,  903,  903,  903,    0,  888,
      904,  904,  904,  905,  905,  905,  889,  907,  907,  907,
      909,  909,  909,  911,  911,  911,  913,  913,  913,  915,
      915,  915,  916,  916,  916,  917,  917,  917,  918,  918,
      918,  919,  919,  919,  920,  920,  920,  921,  921,  921,
      922,  922,  922,  923,  923,  923,  924,  924,  924,  925,

      925,  925,  926,  926,  926,  927,  927,  927,  928,  928,
      928,  929,  929,  929,  930,  930,  930,  931,  931,  931,
      932,  932,  932,  933,  933,  933,  934,  934,  934,  935,
      935,  935,  936,  936,  936,  937,  937,  937,  938,  938,
      938,  939,  939,  939,  940,  940,  940,  941,  941,  941,
      943,  943,  943,  943,  947,  947,  947,  947,  948,  948,
      948,  948,  949,  949,  949,  949,  950,  950,  950,  950,
      951,  951,  951,  951,  952,  952,  952,  952,  953,  953,
      953,  954,  954,  954,  955,  955,  955,    0,    0,  947,
      956,  956,  956,  957,  957,  957,  958,  958,  958,    0,

        0,  950,  959,  959,  959,  960,  960,  960,  961,  961,
      961,  962,  962,  962,  963,  963,  963,    0,  949,  964,
      964,  964,  965,  965,  965,  966,  966,  966,    0,    0,
      952,  967,  967,  967,  968,  968,  968,  969,  969,  969,
      970,  970,  970,  971,  971,  971,  972,  972,  972,  973,
      973,  973,  974,  974,  974,  975,  975,  975,  976,  976,
      976,  977,  977,  977,  978,  978,  978,  979,  979,  979,
      979,  982,  982,  982,  983,  983,  983,  984,  984,  984,
      985,  985,  985,  986,  986,  986,  987,  987,  987,  996,
      996,  996,  996,  997,  997,  997,  997,  999,  999,  999,

      999,  999,  999,  999,  999,  999, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1002, 1002, 1002, 1002, 1002, 1002,
     1002, 1002, 1002, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1004, 1005, 1005,    0, 1005, 1005, 1005, 1005, 1005, 1005,
     1006, 1006,    0, 1006, 1006, 1006, 1006, 1006, 1006, 1008,
     1008, 1008, 1008, 1008, 1008, 1009, 1009,    0, 1009, 1009,
     1009, 1009, 1009, 1009, 1010,    0, 1010,    0,    0, 1010,
     1011, 1011, 1011, 1011, 1011, 1011, 1012, 1012, 1012,    0,

     1012, 1012, 1012, 1013, 1013,    0, 1013, 1013, 1013, 1013,
     1013, 1013, 1015, 1015, 1015, 1015, 1015, 1015, 1016, 1016,
        0, 1016, 1016, 1016, 1016, 1016, 1016, 1017,    0,    0,
     1017, 1017, 1017, 1017, 1017, 1017, 1018,    0, 1018,    0,
     1018, 1018,    0, 1018, 1019, 1019, 1019, 1019, 1019, 1019,
     1020, 1020, 1020,    0, 1020, 1020, 1020, 1021, 1021, 1021,
        0, 1021, 1021, 1021, 1021, 1022, 1022, 1022, 1022, 1022,
     1022, 1023, 1023, 1023, 1023, 1023, 1023, 1024, 1024, 1024,
     1024, 1024, 1024, 1025, 1025,    0, 1025, 1025, 1025, 1025,
     1025, 1026, 1026,    0, 1026, 1026, 1026, 1026, 1026, 1026,

     1027, 1027,    0, 1027, 1027, 1027, 1027, 1027, 1028, 1028,
        0, 1028, 1028, 1028, 1028, 1028, 1028, 1029,    0, 1029,
        0,    0, 1029, 1030,    0, 1030,    0,    0, 1030, 1031,
        0, 1031,    0, 1031, 1031,    0, 1031, 1032,    0, 1032,
        0, 1032, 1032,    0, 1032, 1033, 1033, 1033, 1033, 1033,
     1033, 1034, 1034, 1034, 1034, 1034, 1034, 1035, 1035, 1035,
     1035, 1035, 1035, 1036, 1036, 1036, 1036, 1036, 1036,  998,
      998,  998,  998,  998,  998,  998,  998,  998,  998,  998,
      998,  998,  998,  998,  998,  998,  998,  998,  998,  998,
      998,  998,  998,  998,  998,  998,  998,  998,  998,  998,

      998,  998,  998,  998,  998,  998,  998,  998,  998,  998,
      998,  998,  998,  998,  998,  998,  998,  998,  998,  998,
      998,  998,  998,  998,  998,  998,  998,  998,  998,  998,
      998,  998,  998,  998,  998,  998,  998,  998,  998,  998,
      998,  998,  998,  998
    } ;

extern int hlexc_flex_debug;
int hlexc_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up hlexctext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *hlexctext;
#line 1 "lexc-lexer.ll"
#line 4 "lexc-lexer.ll"
// Copyright (c) 2016 University of Helsinki
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3 of the License, or (at your option) any later version.
// See the file COPYING included with this distribution for more
// information.

//! @file lexc-lexer.cc
//!
//! @brief a lexer for lexc
//!
//! @author Tommi A. Pirinen

#if HAVE_CONFIG_H
#  include <config.h>
#endif

#include "lexc-parser.hh"
#include "lexc-utils.h"
#include "HfstDataTypes.h"

#include <assert.h>


extern void hlexcerror(const char *text);

#undef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) hlexcerror(msg);

/* c.f. Unicode Standard 5.1 D92 Table 3-7 */
/* non US-ASCII */
/* any UTF-8 */
/* Escaped */
/* any ASCII */
/* special meaning in lexc */
/* non-restricted ASCII */
/* special meaning in xre */
/* non-restricted ASCII in XRE */
/* RegExp. stuff */
/* String entry part:
 * - any unrestricted ASCII-7,
 * - any high unicode codepoint (past U+007F) UTF-8-encoded
 * - any %-escaped UTF-8
 */
/* Lexicon name part */
/* White space */

#line 1900 "lexc-lexer.cc"

#define INITIAL 0
#define MULTICHARS 1
#define DEFINITIONS 2
#define NOFLAGS 3
#define LEXICONS 4
#define ENDED 5

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int hlexclex_destroy (void );

int hlexcget_debug (void );

void hlexcset_debug (int debug_flag  );

YY_EXTRA_TYPE hlexcget_extra (void );

void hlexcset_extra (YY_EXTRA_TYPE user_defined  );

FILE *hlexcget_in (void );

void hlexcset_in  (FILE * _in_str  );

FILE *hlexcget_out (void );

void hlexcset_out  (FILE * _out_str  );

yy_size_t hlexcget_leng (void );

char *hlexcget_text (void );

int hlexcget_lineno (void );

void hlexcset_lineno (int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int hlexcwrap (void );
#else
extern int hlexcwrap (void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( hlexctext, hlexcleng, 1, hlexcout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( hlexcin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( hlexcin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, hlexcin))==0 && ferror(hlexcin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(hlexcin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int hlexclex (void);

#define YY_DECL int hlexclex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after hlexctext and hlexcleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( hlexcleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(hlexctext[hlexcleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)hlexcalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in hlexclex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! hlexcin )
			hlexcin = stdin;

		if ( ! hlexcout )
			hlexcout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			hlexcensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				hlexc_create_buffer(hlexcin,YY_BUF_SIZE );
		}

		hlexc_load_buffer_state( );
		}

	{
#line 91 "lexc-lexer.ll"



#line 2134 "lexc-lexer.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of hlexctext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 999 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 998 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 94 "lexc-lexer.ll"
{
    BEGIN MULTICHARS;
    hfst::lexc::token_update_positions(hlexctext);
    return MULTICHARS_START;
}
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 100 "lexc-lexer.ll"
{
    BEGIN NOFLAGS;
    hfst::lexc::token_update_positions(hlexctext);
    return NOFLAGS_START;
}
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 106 "lexc-lexer.ll"
{
    BEGIN DEFINITIONS;
    hfst::lexc::token_update_positions(hlexctext);
    return DEFINITIONS_START;
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 112 "lexc-lexer.ll"
{
    BEGIN LEXICONS;
    hfst::lexc::token_update_positions(hlexctext);
    char* lexicon_start;
    lexicon_start = hfst::lexc::strstrip(hlexctext);
    hlexclval.name = hfst::lexc::strdup_nonconst_part(lexicon_start, "LEXICON",
                                          NULL, true);
    free(lexicon_start);
    return LEXICON_START;
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 123 "lexc-lexer.ll"
{
    BEGIN LEXICONS;
    hfst::lexc::token_update_positions(hlexctext);
    char* lexicon_start;
    lexicon_start = hfst::lexc::strstrip(hlexctext);
    hlexclval.name = hfst::lexc::strdup_nonconst_part(lexicon_start, "Lexicon",
                                          NULL, true);
    free(lexicon_start);
    return LEXICON_START_WRONG_CASE;
}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 134 "lexc-lexer.ll"
{
    hfst::lexc::token_update_positions(hlexctext);
    return END_START;
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 139 "lexc-lexer.ll"
{
    hfst::lexc::token_update_positions(hlexctext);
}
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 143 "lexc-lexer.ll"
{
    hfst::lexc::token_update_positions(hlexctext);
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 147 "lexc-lexer.ll"
{
    hfst::lexc::token_update_positions(hlexctext);
    hlexclval.name = hfst::lexc::strip_percents(hlexctext, false);
    return MULTICHAR_SYMBOL;
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 153 "lexc-lexer.ll"
{ hfst::lexc::token_update_positions(hlexctext); }
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 155 "lexc-lexer.ll"
{ hfst::lexc::token_update_positions(hlexctext); }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 157 "lexc-lexer.ll"
{
    hfst::lexc::token_update_positions(hlexctext);
    hlexclval.name = strdup(hlexctext);
    return LEXICON_NAME;
}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 163 "lexc-lexer.ll"
{ hfst::lexc::token_update_positions(hlexctext); }
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 165 "lexc-lexer.ll"
{ hfst::lexc::token_update_positions(hlexctext); }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 167 "lexc-lexer.ll"
{ BEGIN INITIAL; }
	YY_BREAK
case 16:
*yy_cp = (yy_hold_char); /* undo effects of setting up hlexctext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up hlexctext again */
YY_RULE_SETUP
#line 169 "lexc-lexer.ll"
{
    hfst::lexc::token_update_positions(hlexctext);
    hlexclval.name = hfst::lexc::strstrip(hlexctext);
    return DEFINITION_NAME;
}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 175 "lexc-lexer.ll"
{
    hfst::lexc::token_update_positions(hlexctext);
    hlexclval.name = hfst::lexc::strdup_nonconst_part(hlexctext, "=", ";", false);
    return DEFINITION_EXPRESSION;
}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 181 "lexc-lexer.ll"
{ hfst::lexc::token_update_positions(hlexctext); }
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 183 "lexc-lexer.ll"
{ hfst::lexc::token_update_positions(hlexctext); }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 185 "lexc-lexer.ll"
{
    hfst::lexc::token_update_positions(hlexctext);
    char* lexicon_start;
    lexicon_start = hfst::lexc::strstrip(hlexctext);
    hlexclval.name = hfst::lexc::strdup_nonconst_part(lexicon_start, "LEXICON", 0, true);
    free(lexicon_start);
    return LEXICON_START;
}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 194 "lexc-lexer.ll"
{
    hfst::lexc::token_update_positions(hlexctext);
    char* lexicon_start;
    lexicon_start = hfst::lexc::strstrip(hlexctext);
    hlexclval.name = hfst::lexc::strdup_nonconst_part(lexicon_start, "Lexicon", 0, true);
    free(lexicon_start);
    return LEXICON_START_WRONG_CASE;
}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 203 "lexc-lexer.ll"
{
    hfst::lexc::token_update_positions(hlexctext);
    hlexclval.name = hfst::lexc::strip_percents(hlexctext, true);
    return ULSTRING;
}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 209 "lexc-lexer.ll"
{
    hfst::lexc::token_update_positions(hlexctext);
    hlexclval.name = hfst::lexc::strdup_nonconst_part(hlexctext, "<", ">", false);
    return XEROX_REGEXP;
}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 215 "lexc-lexer.ll"
{
    hfst::lexc::token_update_positions(hlexctext);
    hlexclval.name = strdup(hlexctext);
    return LEXICON_NAME;
}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 221 "lexc-lexer.ll"
{
    hfst::lexc::token_update_positions(hlexctext);
    hlexclval.name = strdup(hlexctext);
    return ENTRY_GLOSS;
}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 227 "lexc-lexer.ll"
{
    BEGIN ENDED;
    hfst::lexc::token_update_positions(hlexctext);
    return END_START;
}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 233 "lexc-lexer.ll"
{
    hfst::lexc::token_update_positions(hlexctext);
    return hlexctext[0];
}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 238 "lexc-lexer.ll"
{
    hfst::lexc::token_update_positions(hlexctext);
    return hlexctext[0];
}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 243 "lexc-lexer.ll"
{
    hfst::lexc::token_update_positions(hlexctext);

}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 247 "lexc-lexer.ll"
{
    hfst::lexc::token_update_positions(hlexctext);

}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 252 "lexc-lexer.ll"
{
    hfst::lexc::token_update_positions(hlexctext);

}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 256 "lexc-lexer.ll"
{
    hfst::lexc::token_update_positions(hlexctext);
}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 260 "lexc-lexer.ll"
{
    hfst::lexc::token_update_positions(hlexctext);
    hlexcerror("Illegal 8-bit sequence (cannot form valid UTF-8)");
    return ERROR;
}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 266 "lexc-lexer.ll"
{
    hfst::lexc::token_update_positions(hlexctext);
    hlexcerror("Syntax error in lexer (no valid token found at the point)");
    return ERROR;
}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 272 "lexc-lexer.ll"
ECHO;
	YY_BREAK
#line 2518 "lexc-lexer.cc"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(MULTICHARS):
			case YY_STATE_EOF(DEFINITIONS):
			case YY_STATE_EOF(NOFLAGS):
			case YY_STATE_EOF(LEXICONS):
			case YY_STATE_EOF(ENDED):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed hlexcin at a new source and called
			 * hlexclex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = hlexcin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( hlexcwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * hlexctext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of hlexclex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	yy_size_t number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (yy_size_t) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			hlexcrestart(hlexcin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((int) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) hlexcrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 999 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    
	YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 999 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 998);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					hlexcrestart(hlexcin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( hlexcwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve hlexctext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void hlexcrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        hlexcensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            hlexc_create_buffer(hlexcin,YY_BUF_SIZE );
	}

	hlexc_init_buffer(YY_CURRENT_BUFFER,input_file );
	hlexc_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void hlexc_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		hlexcpop_buffer_state();
	 *		hlexcpush_buffer_state(new_buffer);
     */
	hlexcensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	hlexc_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (hlexcwrap()) processing, but the only time this flag
	 * is looked at is after hlexcwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void hlexc_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	hlexcin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE hlexc_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) hlexcalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in hlexc_create_buffer()" );

	b->yy_buf_size = (yy_size_t)size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) hlexcalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in hlexc_create_buffer()" );

	b->yy_is_our_buffer = 1;

	hlexc_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with hlexc_create_buffer()
 * 
 */
    void hlexc_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		hlexcfree((void *) b->yy_ch_buf  );

	hlexcfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a hlexcrestart() or at EOF.
 */
    static void hlexc_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	hlexc_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then hlexc_init_buffer was _probably_
     * called from hlexcrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void hlexc_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		hlexc_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void hlexcpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	hlexcensure_buffer_stack();

	/* This block is copied from hlexc_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from hlexc_switch_to_buffer. */
	hlexc_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void hlexcpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	hlexc_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		hlexc_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void hlexcensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)hlexcalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in hlexcensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)hlexcrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in hlexcensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE hlexc_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) hlexcalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in hlexc_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	hlexc_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to hlexclex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       hlexc_scan_bytes() instead.
 */
YY_BUFFER_STATE hlexc_scan_string (yyconst char * yystr )
{
    
	return hlexc_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to hlexclex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE hlexc_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) hlexcalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in hlexc_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = hlexc_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in hlexc_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
			(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up hlexctext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		hlexctext[hlexcleng] = (yy_hold_char); \
		(yy_c_buf_p) = hlexctext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		hlexcleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int hlexcget_lineno  (void)
{
        
    return hlexclineno;
}

/** Get the input stream.
 * 
 */
FILE *hlexcget_in  (void)
{
        return hlexcin;
}

/** Get the output stream.
 * 
 */
FILE *hlexcget_out  (void)
{
        return hlexcout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t hlexcget_leng  (void)
{
        return hlexcleng;
}

/** Get the current token.
 * 
 */

char *hlexcget_text  (void)
{
        return hlexctext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void hlexcset_lineno (int  _line_number )
{
    
    hlexclineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see hlexc_switch_to_buffer
 */
void hlexcset_in (FILE *  _in_str )
{
        hlexcin = _in_str ;
}

void hlexcset_out (FILE *  _out_str )
{
        hlexcout = _out_str ;
}

int hlexcget_debug  (void)
{
        return hlexc_flex_debug;
}

void hlexcset_debug (int  _bdebug )
{
        hlexc_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from hlexclex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    hlexcin = stdin;
    hlexcout = stdout;
#else
    hlexcin = (FILE *) 0;
    hlexcout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * hlexclex_init()
     */
    return 0;
}

/* hlexclex_destroy is for both reentrant and non-reentrant scanners. */
int hlexclex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		hlexc_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		hlexcpop_buffer_state();
	}

	/* Destroy the stack itself. */
	hlexcfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    hlexcfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * hlexclex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *hlexcalloc (yy_size_t  size )
{
			return (void *) malloc( size );
}

void *hlexcrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void hlexcfree (void * ptr )
{
			free( (char *) ptr );	/* see hlexcrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 272 "lexc-lexer.ll"



