#line 2 "pmatch_lex.cc"

#line 4 "pmatch_lex.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer pmatch_create_buffer
#define yy_delete_buffer pmatch_delete_buffer
#define yy_flex_debug pmatch_flex_debug
#define yy_init_buffer pmatch_init_buffer
#define yy_flush_buffer pmatch_flush_buffer
#define yy_load_buffer_state pmatch_load_buffer_state
#define yy_switch_to_buffer pmatch_switch_to_buffer
#define yyin pmatchin
#define yyleng pmatchleng
#define yylex pmatchlex
#define yylineno pmatchlineno
#define yyout pmatchout
#define yyrestart pmatchrestart
#define yytext pmatchtext
#define yywrap pmatchwrap
#define yyalloc pmatchalloc
#define yyrealloc pmatchrealloc
#define yyfree pmatchfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 0
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE pmatchrestart(pmatchin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t pmatchleng;

extern FILE *pmatchin, *pmatchout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE pmatchlex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-pmatchlineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < pmatchleng; ++yyl )\
                    if ( pmatchtext[yyl] == '\n' )\
                        --pmatchlineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --pmatchlineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up pmatchtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up pmatchtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via pmatchrestart()), so that the user can continue scanning by
	 * just pointing pmatchin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when pmatchtext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t pmatchleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow pmatchwrap()'s to do buffer switches
 * instead of setting up a fresh pmatchin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void pmatchrestart (FILE *input_file  );
void pmatch_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE pmatch_create_buffer (FILE *file,int size  );
void pmatch_delete_buffer (YY_BUFFER_STATE b  );
void pmatch_flush_buffer (YY_BUFFER_STATE b  );
void pmatchpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void pmatchpop_buffer_state (void );

static void pmatchensure_buffer_stack (void );
static void pmatch_load_buffer_state (void );
static void pmatch_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER pmatch_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE pmatch_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE pmatch_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE pmatch_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *pmatchalloc (yy_size_t  );
void *pmatchrealloc (void *,yy_size_t  );
void pmatchfree (void *  );

#define yy_new_buffer pmatch_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        pmatchensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            pmatch_create_buffer(pmatchin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        pmatchensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            pmatch_create_buffer(pmatchin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define pmatchwrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *pmatchin = (FILE *) 0, *pmatchout = (FILE *) 0;

typedef int yy_state_type;

extern int pmatchlineno;

int pmatchlineno = 1;

extern char *pmatchtext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr pmatchtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
#if defined(__GNUC__) && __GNUC__ >= 3
__attribute__((__noreturn__))
#endif
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up pmatchtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	pmatchleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 141
#define YY_END_OF_BUFFER 142
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[992] =
    {   0,
      138,  138,  142,  140,  138,  138,  133,  133,   66,   56,
      140,   52,  133,  123,  124,   58,   57,  135,   53,  133,
       60,   64,  129,  137,   68,  133,   69,   65,  140,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  121,   51,  122,  140,   98,   79,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  140,   61,   50,
      140,  140,  140,  140,  140,  140,  140,  140,  129,  138,
      127,    0,  139,  133,    0,  118,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  133,   62,    0,  118,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  133,

        0,  118,    0,    0,    0,    0,    0,    0,    0,    0,
       54,   55,  133,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  134,   84,  133,    0,  133,    0,    0,
      133,  133,  120,  107,  109,  133,  133,  133,  106,  133,
      108,  133,   95,  128,    0,    0,  136,   86,   82,   67,
       83,   93,    0,    0,   91,    0,    0,    0,    0,    0,
        0,    0,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  119,   63,
        0,    0,   96,  105,  105,    0,    0,    0,   98,  133,

      133,  133,  133,  133,  133,  133,  133,  133,  133,    0,
        0,   94,    0,    0,    0,    0,    0,    0,    0,  126,
      125,  133,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  132,    0,    0,
      133,  132,    0,  118,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  133,  132,  133,  133,    0,    0,    0,
        0,    0,    0,    0,    0,  132,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   92,   66,    0,    0,   99,   59,
        0,   71,   75,    0,   70,   76,   25,   74,  130,    0,

       88,   81,    0,   90,    0,    0,    0,    0,    0,    0,
        0,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,   19,  133,  133,  133,  133,  133,
      133,   38,   23,  133,  133,   20,  133,  133,  133,  133,
      133,   97,   80,  100,    0,  105,  104,  104,  103,  103,
        0,    0,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,    4,  133,  131,  131,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      132,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,  133,  132,    0,
      118,    0,    0,    0,    0,    0,    0,    0,    0,  132,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   85,   87,    0,   78,   77,
      133,   73,   72,    0,  136,  110,    0,    0,    0,    0,
        0,    0,    0,   24,  133,  133,   10,  133,  133,  133,
      133,  133,  133,  133,   27,  133,  133,    7,  133,  133,
        6,  133,   26,   21,   22,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  101,  101,  104,  103,    0,    0,
      133,  133,  133,    5,  133,  133,    0,  133,  133,  133,

        0,    0,    0,  117,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  117,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  117,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  117,  133,  117,    0,  118,
        0,    0,    0,    0,    0,    0,    0,    0,  133,  117,
      133,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   89,  130,    0,    0,    0,    0,    0,    0,    0,
       35,  133,  133,  133,  133,  133,  133,  133,  133,  133,

      133,  133,   28,  133,  133,  133,  133,   39,  133,  133,
      133,  133,  133,  101,    0,    0,  133,  133,  133,  133,
        0,    0,    0,    0,    3,  133,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  133,    0,    0,    0,    0,    0,    0,    0,
      133,  133,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  113,  115,    0,    0,
        0,  133,  133,  133,    2,   34,    1,  133,  133,  133,
      133,  133,  133,  133,  133,  133,   31,  133,  133,  133,

      133,  102,    0,    0,  133,  133,  133,    0,    0,    0,
        0,  133,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  133,    0,  118,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  133,  133,
        0,    0,    0,    0,    0,    0,    0,  111,  116,  133,
      133,  133,   33,  133,    8,  133,  133,  133,  133,   11,
      133,  133,   29,   13,  133,  133,    0,    0,  133,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  133,  117,  133,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  133,

      133,    0,  114,  112,   16,    9,   32,  133,   17,   18,
      133,  133,  133,  133,  133,  133,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  133,  133,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  133,  133,    0,   12,  133,  133,  133,
      133,  133,  133,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  133,  133,    0,    0,
        0,  133,  133,    0,  133,  133,  133,   14,  133,   40,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  133,  133,  133,    0,  133,  133,  133,  133,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  133,  133,  133,   30,  133,   15,  133,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  133,  133,  133,  133,  133,    0,    0,    0,    0,
       45,    0,   48,    0,    0,    0,  133,  133,   37,   36,
       41,    0,    0,    0,    0,    0,    0,  133,   42,    0,
       44,    0,   46,    0,  133,   43,    0,    0,  133,    0,
        0,   47,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   49,
        0

    } ;

static yyconst YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   23,   24,   25,
       26,   27,   28,   29,   30,   12,   31,   32,   33,   34,
       12,   12,   35,   12,   12,   36,   12,   37,   38,   39,
       12,   40,   41,   42,   43,   12,   44,   12,   12,   12,
       45,   46,   47,   48,   49,   50,   51,   52,   53,   54,

       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,   12,   67,   68,   69,   70,   71,   72,   73,
       74,   12,   75,   76,   77,   78,    1,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,    1,    1,   82,   82,   82,   82,   82,   82,   82,

       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   83,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   85,   86,   86,   87,
       88,   88,   88,   89,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst YY_CHAR yy_meta[90] =
    {   0,
        1,    1,    1,    1,    2,    3,    4,    3,    2,    3,
        2,    3,    3,    2,    2,    2,    2,    2,    3,    2,
        3,    3,    2,    2,    2,    3,    2,    2,    2,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    2,    2,    2,    2,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    2,    2,    5,    2,    1,    1,
        1,    3,    3,    3,    3,    3,    3,    3,    3
    } ;

static yyconst flex_uint16_t yy_base[1013] =
    {   0,
        0, 2744, 2764, 4292,   88,   92,  115,  204,  284,   79,
       17, 4292,  292,  278, 4292, 4292, 4292, 2743, 2731,  374,
     2719,  318,  296,  302,  288,  398, 2698, 4292,  402,  413,
      271,  275,  279,  283,  295,  452,  324,  280,  352,  360,
      412,  453,  291,  309, 4292,  482,  456,  391,  469,  457,
      473,  486,  476,  492,  504,  505,  515, 2669, 2632, 4292,
       29, 2626,   33,  269,  351,  315,  386, 2625,  559,  569,
      581, 2699, 4292,    0,  586, 2694,  445,  310,  525,  355,
      529,  533,  536,  306,  445,  573,  675,  558,  764,  585,
      589,  548,  773,  776,  762,  779,  781,  784,  551,  538,

      554, 4292,  544, 2610,  565,  338,  568,  365,  571, 2587,
     4292, 4292,  596,  574, 2577,  582,  464,  693,  518,  696,
     2578, 2622, 2607, 4292, 2591,  759,  531,  762, 2597, 2546,
      770,  774, 4292,  733,  742,  775,  847,  848,  753,  855,
      832,  851, 4292, 4292,  590,  869,  779, 2581, 2567, 4292,
     4292, 4292,    0, 2524, 4292, 2489, 2487, 2477, 2481, 2466,
     2456, 2471,  840,  839,  844,  858,  861,  870,  877,  884,
      890,  891,  896,  922,  905,  899,  908,  931,  942,  938,
      968,  914,  945,  974,  951,  948,  959,  955, 4292, 4292,
     2505, 2492, 2470, 2498,  792,  635,  763,  807,  954,  983,

      987,  990,  994, 1002, 1003, 1013, 1023, 1009, 1026,  279,
      741, 4292,  799,  918,  954, 1002, 1012, 1015, 1018, 4292,
     4292,    0, 1023,  802, 1026, 1034, 1038, 1041, 1045,  348,
     1054, 1058, 1066, 1069, 1081, 1086, 1097, 4292,  785, 1178,
     2494, 1078, 1267,  787, 1109, 1105, 1113, 1122, 1124, 1129,
     1137,  943, 1145, 2487, 1090, 1356,  868, 1162, 1125, 1165,
     1193, 1205, 1167, 1208, 1177, 1149, 1229, 1269, 1231, 1248,
     1439, 1442, 1445, 1448, 1451, 1029, 1117, 1140, 1199, 1202,
     1216, 1219, 2489,  424, 4292, 1255, 2481, 2475, 1428, 4292,
     2467, 1268, 1269, 2464, 1272, 1277, 4292, 1281,  878,  908,

     4292, 4292, 2431, 4292, 2364, 2351, 2413, 2410, 2337, 2339,
     2352, 1437, 1411, 1420, 1440, 1417, 1452, 1431, 1434, 1443,
     1446, 1475, 1504, 1478, 4292, 1497, 1523, 1501, 1530, 1533,
     1534, 1511, 4292, 1545, 1516, 4292, 1527, 1542, 1549, 1562,
     1546, 4292, 4292, 4292, 1136, 1286, 4292, 1142, 4292, 1204,
     2387, 1442, 1556, 1566, 1577, 1582, 1565, 1586, 1594, 1598,
     1599, 1610, 1605, 1606, 4292,  870, 1381, 1470, 1597, 1602,
     1609, 1618, 1630, 1635, 1642, 1648, 1651, 1654, 1661, 1742,
     1672, 1831, 1645, 1666, 1693, 1673, 1729, 1731, 1760, 1741,
     1769, 1772, 1790, 1800, 1809, 1812, 1849, 1850, 1861, 1605,

     2319, 1613, 1173, 1622, 1221, 1625, 2308, 2372, 1946, 2035,
     1743, 2018, 1756, 2046, 1796, 2049, 1860, 2054, 2033, 2351,
     2058, 2061, 2064, 2067, 2086, 2104, 2124, 1744, 2142, 2129,
     2144, 2153, 1689, 1701, 1704, 4292, 4292, 2350, 4292, 4292,
     1835, 4292, 4292, 1316, 1445, 4292, 2351, 2290,    0,    0,
     2271, 2330, 2329, 4292, 1727, 1822, 4292, 1734, 1990, 2008,
     1823, 1841, 1863, 2011, 4292, 2018, 2023, 4292, 2039, 2149,
     4292, 2115, 4292, 4292, 4292, 2150, 2116, 2154, 2178, 2155,
     2165, 2184, 2191, 2199, 4292, 1523, 1533, 1536, 1674, 1778,
     2198, 2202, 2206, 2032, 2212, 2213,  820, 2241, 2228, 2232,

     1842, 2204, 2219, 2313, 2234, 2249, 2265, 2272, 2275, 2279,
     2282, 2286, 2308, 2306, 1774, 1782, 2239, 1785, 1628, 1970,
     1713, 2010, 2238, 2040, 2301, 2320, 2302, 2322, 2332, 2342,
     2346, 2350, 2360, 2363, 2370, 2373,  300, 2414, 2075, 2078,
     2092, 2254, 2305, 2310, 2314, 2396, 2397, 2400, 2389, 2298,
     2318, 2231, 2366, 1803, 2376, 1828, 2400, 2231,    0, 2445,
     2280, 2441, 2477, 2481, 2484, 2486, 2488, 2491, 2478, 2494,
     2497, 2501, 2504, 2507, 2510, 2547, 2552, 2572, 2588, 2589,
     2608, 4292, 2022,    0, 2300, 2299, 2297, 2295,    0,    0,
     2469, 2555, 2482, 2584, 2560, 2610, 2618, 2619, 2628, 2634,

     2639, 2613, 4292, 2647, 2650, 2657, 2658, 2662, 2673, 2668,
     2676, 2680, 2681, 2045, 2214, 2468, 2688, 2691, 2704, 2699,
     2222, 2208, 2196, 2162, 2710, 2711, 2744, 2749, 2752, 2755,
     2758, 2762, 2769, 2179, 2758, 2520, 2523, 2526, 2533, 2557,
     2702, 2705, 2056, 2800, 2780, 2798, 2811, 2168, 2842, 2712,
     2786, 2789, 2894, 2792, 2795, 2801, 2804, 2807, 2894, 2905,
      344, 2969, 2981, 2985, 2988, 2991, 2994, 2997, 3000, 3003,
     3006, 3009, 3084, 3095, 2169,    0, 4292, 4292,    0, 2167,
     2154, 2971, 2974, 2977, 2783, 2966, 3081, 2995, 3090, 3058,
     3059, 3064, 3105, 3095, 3096, 3124, 4292, 3118, 3131, 3125,

     3128, 4292, 2475, 2039, 3135, 3134, 3146, 2033, 1993, 1993,
     1986, 3163, 3156, 3159, 3163, 2005, 3163, 2938, 3018, 3030,
     3199, 3225, 3207, 3235,    0, 3219, 3227, 3098, 1861, 3132,
     2029, 3143, 2088, 3187, 1847, 3203, 3213, 3216,  560, 3299,
     3278, 3291, 3315, 3322, 2492, 1917, 1895, 4292, 4292, 3305,
     3319, 3323, 4292, 3327, 4292, 3326, 3349, 3263, 3342, 4292,
     3361, 3356, 4292, 4292, 3364, 3365, 1847, 1781, 3382, 1777,
     1745, 1736, 1731, 1700, 1694, 3386, 3400, 3426, 3438, 3413,
     3449, 3399, 3412, 3469, 3254, 1656, 3266, 2158, 3416, 2164,
     3428, 1641, 3434, 3437, 3440, 3443, 3446, 3449, 3455, 3519,

     3525, 3537, 4292, 4292, 4292, 4292, 4292, 3532, 4292, 4292,
     3501, 3545, 3548, 3549, 3560, 3561, 1648, 1662, 1621, 1620,
     1597, 1604, 1573, 1571, 1525, 3580, 3595, 3619, 2485, 3606,
     3596, 3631, 3655, 3469, 3474, 3481, 3487, 3539, 3558, 3564,
     3574, 3607, 3610, 3645, 3694, 3706, 4292, 3667, 3702, 3701,
     3689, 3737, 3717, 1512, 1505, 1521, 1493, 1480, 1440, 1438,
     1436, 1437, 3734, 1460, 3761, 3770, 3756, 3782, 3641, 3644,
     3654, 3776,    0, 3832, 3747, 3421, 3803, 4292, 3804, 3808,
     1417, 1401, 1275, 1273, 1273, 1266, 1267, 1265, 1245, 3838,
     3854, 3860, 3880, 3900, 3925, 2495, 3834, 3862, 3926, 3903,

     1226, 1194, 1171, 1182, 1171, 1204, 1149, 1138, 1137, 3949,
     3961, 3970, 3997, 4017, 3976, 4292, 3815, 4292, 3983, 1123,
     1106, 1098, 1076, 1073, 1068, 1064, 1058, 1060, 4034, 2727,
     4028, 4041, 3886, 4080, 3922, 3923, 1033, 1022, 1007,  978,
     4292,  973, 4292,  927,  913,  926, 4086,    0, 3996, 4003,
     4292,  872,  873,  825,  825,  814,  781, 4106, 4292,  767,
     4292,  763, 4292,  747, 4130, 4292,  734,  590, 4062,  576,
      608, 4292,  555,  551,  500,  493,  494,  477,  439,  420,
      407,  378,  397,  354,  347,  300,  258,  246,  228, 4292,
     4292, 4192, 4195, 4200, 4204, 4209, 4214, 4219, 4224, 4229,

     4233, 4238, 4242, 4247, 4252, 4257, 4262, 4267, 4272, 4277,
     4282, 4286
    } ;

static yyconst flex_int16_t yy_def[1013] =
    {   0,
      991,    1,  991,  991,  991,  991,  991,  991,  992,  991,
      993,  991,  992,  991,  991,  991,  991,  991,  991,  992,
      991,  992,  991,  991,  991,  992,  991,  991,  991,  992,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,  991,  991,  991,  991,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,  994,  991,  991,
      991,  991,  991,  991,  991,  991,  991,  991,  991,  991,
      991,  995,  991,    7,  996,  995,  995,  995,  995,  995,
      995,  995,  995,  995,  997,  997,  991,   30,  998,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,   30,

      993,  991,  991,  991,  991,  991,  991,  991,  991,  991,
      991,  991,   30,  991,  991,  991,  991,  991,  991,  991,
      991,  991,  991,  991,  991,   30,  991,   30,  991,  991,
       30,   30,  991,   30,   30,   30,   30,   30,   30,   30,
       30,   30,  991,  991,  991,  991,  991,  991,  991,  991,
      991,  991,  999,  991,  991,  991,  991,  991,  991,  991,
      991,  991,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,  991,  991,
      991,  991,  991,  991,  991,  991,  991,  991,   30,   30,

       30,   30,   30,   30,   30,   30,   30,   30,   30,  994,
      994,  991,  991,  991,  991,  991,  991,  991,  991,  991,
      991,    7,  995,  995,  995,  995,  995,  995,  995,  995,
      995,  995,  995,  995,  995,  995,  995,  991,  997, 1000,
       87,   30,  998,  997,  997,  997,  997,  997,  997,  997,
      997,  997, 1001,   87,   30,  991,   87,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  991,  991,  991,  991,  991,
      991,  991,  991,  991,  991,   30,  991,  991,   30,  991,
      991,   30,   30,  991,   30,   30,  991,   30,  991,  991,

      991,  991,  999,  991,  991,  991,  991,  991,  991,  991,
      991,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,  991,   30,   30,   30,   30,   30,
       30,   30,  991,   30,   30,  991,   30,   30,   30,   30,
       30,  991,  991,  991,  991,  991,  991,  991,  991,  991,
      991,  991,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,  991,  994,  991,  991,  991,  995,
      995,  995,  995,  995,  995,  995,  995,  995,  995, 1002,
     1003, 1002,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997, 1003, 1003,  991,

      991,  991,  991,  991,  991,  991,  991,    8,  991, 1004,
      382,  997,  997,  997,  997,  997,  997,  997,  997,   87,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  991,  991,  991,  991,  991,  991,  991,  991,
       30,  991,  991,  991,  991,  991,  991,  991, 1005, 1006,
      991,  991,  991,  991,   30,   30,  991,   30,   30,   30,
       30,   30,   30,   30,  991,   30,   30,  991,   30,   30,
      991,   30,  991,  991,  991,   30,   30,   30,   30,   30,
       30,   30,   30,   30,  991,  991,  991,  991,  991,  991,
       30,   30,   30,   30,   30,   30,  991,   30,   30,   30,

      995,  995,  995,  991,  997,  997,  997,  997,  997,  997,
      997,  997,  991,  991,  991,  991,  991,  991,  991,  991,
      991,  991,  991,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  991,  991,  991,  991,
      991,  991,  991,  991,  991,   30,   30,   30,  993,  991,
      991,  991,  991,  991,  991,  991,  991,  991,   87,   30,
       87,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  991,  991, 1007,  991, 1005, 1006,  991, 1008, 1009,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,

       30,   30,  991,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,  991,  991,  991,   30,   30,   30,   30,
      991,  991,  991,  991,   30,   30,  997,  997,  997,  997,
      997,  997,  997,  991,  991,  991,  991,  991,  991,  991,
      991,  991,  997,  997,  997,  997,  997,  991,  991,  991,
      991,  991,  991,  991,  991,  991,  991,  991,  991,  991,
       87,   87,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997, 1007, 1010,  991,  991, 1011, 1008,
     1009,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,  991,   30,   30,   30,

       30,  991,  991,  991,   30,   30,   30,  991,  991,  991,
      991,   30,  997,  997,  997,  991,  991,  991,  991,  991,
      997,  997,  991,  991,  409, 1012, 1003,  991,  991,  991,
      991,  991,  991,  991,  991,  991,  991,  991,   87,   87,
      997,  997,  997,  997,  997, 1010, 1011,  991,  991,   30,
       30,   30,  991,   30,  991,   30,   30,   30,   30,  991,
       30,   30,  991,  991,   30,   30,  991,  991,   30,  991,
      991,  991,  991,  991,  991,  991,  991,  997,  997,  991,
      991,   30,   30,   30,  991,  991,  991,  991,  991,  991,
      991,  991,  991,  991,  991,  991,  991,  991,  991,   87,

       87,  997,  991,  991,  991,  991,  991,   30,  991,  991,
       30,   30,   30,   30,   30,   30,  991,  991,  991,  991,
      991,  991,  991,  991,  991,  991,  991,  997,  382,  991,
     1003,   30,   30,  991,  991,  991,  991,  991,  991,  991,
      991,  991,  991,   87,   87,  997,  991,   30,   30,   30,
       30,   30,   30,  991,  991,  991,  991,  991,  991,  991,
      991,  991,  991,  991,  997,  991,   30,   30,  991,  991,
      991,   87,   87,  997,   30,   30,   30,  991,   30,   30,
      991,  991,  991,  991,  991,  991,  991,  991,  991,  991,
      997,  991,   30,   30,   87,  997,   30,   30,   30,   30,

      991,  991,  991,  991,  991,  991,  991,  991,  991,  991,
      997,  991,   30,   30,   87,  991,   30,  991,   30,  991,
      991,  991,  991,  991,  991,  991,  991,  991,  991,  382,
     1003,   30,   30,   87,   30,   30,  991,  991,  991,  991,
      991,  991,  991,  991,  991,  991,   30,   87,   30,   30,
      991,  991,  991,  991,  991,  991,  991,   30,  991,  991,
      991,  991,  991,  991,   30,  991,  991,  991,   30,  991,
      991,  991,  991,  991,  991,  991,  991,  991,  991,  991,
      991,  991,  991,  991,  991,  991,  991,  991,  991,  991,
        0,  991,  991,  991,  991,  991,  991,  991,  991,  991,

      991,  991,  991,  991,  991,  991,  991,  991,  991,  991,
      991,  991
    } ;

static yyconst flex_uint16_t yy_nxt[4382] =
    {   0,
        4,    5,    6,    5,    5,    7,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
       22,   13,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   13,   34,   35,   36,   37,   38,   39,
       40,   13,   41,   42,   43,   44,   45,   46,   47,   48,
       13,   13,   49,   50,   51,   13,   13,   13,   13,   13,
       13,   52,   53,   54,   13,   13,   55,   56,   13,   13,
       57,   13,   13,   13,   58,   59,    4,   60,    4,    4,
        4,   61,   62,   63,   64,   65,   66,   67,   68,   70,
       70,   70,   70,   70,   70,   70,   70,  111,  114,  115,

      116,  117,  118,  119,  120,  121,  112,  100,  100,  100,
       71,  214,  214,  214,   71,   72,   72,   73,   72,   72,
       74,   74,   74,   72,   75,   72,   74,   76,   72,   72,
       72,   72,   72,   74,   72,   74,   74,   72,   72,   72,
       74,   72,   72,   72,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   72,
       72,   72,   72,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   72,
       72,   72,   72,   72,   72,   72,   77,   78,   79,   80,

       81,   82,   83,   84,   85,   85,   85,   85,   86,   87,
       88,   87,   86,   89,   86,   87,   90,   86,   86,   86,
       86,   86,   87,   86,   87,   87,   86,   86,   86,   87,
       86,   86,   86,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   86,   91,
       86,   86,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   86,   86,
       86,   86,   85,   85,   85,   92,   93,   94,   95,   96,
       97,   98,   99,  101,  990,  122,  102,  144,  144,  144,

      144,  101,  123,  146,  102,  148,  146,  100,   73,  189,
      989,  100,   73,  149,  150,  100,  100,  253,  145,  100,
      648,  166,  147,  147,  211,  174,  988,  101,  191,  168,
      102,  100,  100,  192,  100,  167,  100,  190,  100,  169,
      100,  100,  170,  100,  100,  172,  173,  215,  215,  183,
       73,  171,  987,  175,  193,  365,  100,   73,  100,  176,
      100,   85,  177,  181,  739,  103,  104,  105,  106,  107,
      108,  109,  110,  103,  104,  105,  106,  107,  108,  109,
      110,  126,  184,  101,  237,  100,  102,  100,  100,  182,
      231,  127,  128,  129,  217,  217,  100,  986,  130,  103,

      104,  105,  106,  107,  108,  109,  110,  101,  153,  985,
      102,  131,  132,  100,  984,  100,  215,  215,  185,  154,
      133,  100,  101,  100,  151,  102,  376,  100,  155,  216,
      216,  216,  134,  233,  233,  135,  136,  437,  137,  138,
      139,  983,  140,  141,  217,  217,  142,   73,  100,  163,
      438,  238,  100,  156,  100,  103,  104,  105,  106,  107,
      108,  109,  110,  157,  218,  218,  218,  158,  159,  160,
      161,  982,  162,  100,  164,  186,  165,  187,  981,  103,
      104,  105,  106,  107,  108,  109,  110,  178,  100,  100,
      239,  179,  100,  100,  103,  104,  105,  106,  107,  108,

      109,  110,  194,  195,  199,  100,  196,  980,  197,  100,
      188,  201,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  180,  100,   74,   74,   74,  205,   73,  100,  979,
      100,   73,  100,  200,  100,   73,  100,  100,   73,  100,
      100,  100,  278,  278,  203,  202,  206,  100,  978,  100,
      204,  100,  977,  100,  238,  100,  198,  238,  207,  208,
      144,  220,  144,  144,  976,  100,  100,  100,  100,  209,
       70,   70,   70,   70,  100,  253,  100,   85,  100,  238,
      800,  145,  221,  221,  221,  221,   72,   72,   73,   72,
      240,  238,  287,  239,  100,  266,  239,  280,  280,  100,

      288,  100,  240,  232,  232,  232,  240,  234,  234,  234,
      299,  299,  235,  235,  236,  236,  236,  975,  239,  100,
      974,  100,  100,  100,  100,  973,   87,   87,   87,  275,
      239,  267,  100,  972,  239,  114,  115,  116,  117,  118,
      119,  120,  121,  214,  214,  214,  216,  216,  216,  218,
      218,  218,  113,  113,  113,  347,  348,  100,  268,  100,
      277,  277,  277,  971,   72,   72,   72,  223,  224,  225,
      226,  227,  228,  229,  230,   85,   85,   85,   85,   85,
      241,  242,  241,   85,  243,   85,  241,  244,   85,   85,
       85,   85,  240,  241,   85,  241,  241,   85,   85,   85,

      241,   85,   85,   85,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,   85,
      239,   85,   85,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,   85,
       85,   85,   85,   85,   85,   85,  245,  246,  247,  248,
      249,  250,  251,  252,   85,   85,   85,   85,  238,  100,
      255,  279,  279,  279,  281,  281,  281,  286,  100,  238,
      289,  256,  238,  349,  350,  238,  211,  238,  292,  100,
      238,  266,  293,  238,  100,  100,  100,  300,  100,  147,

      147,  294,  970,  100,   73,  100,  100,  239,  345,  257,
      100,  100,  346,  346,  100,  968,  100,  366,  239,  967,
      100,  239,  100,  100,  239,  100,  239,  351,  352,  239,
      239,  100,  239,  100,  966,  100,  100,  100,  100,  964,
      271,  271,   85,   85,   85,  258,  259,  260,  261,  262,
      263,  264,  265,  269,  270,  270,  270,  272,  272,  272,
      273,  273,  274,  274,  274,  295,  296,  297,  100,  298,
      146,  312,  622,  146,  420,  100,  100,  100,  100,  100,
      100,  963,  370,  100,  100,   85,  623,  100,  962,  147,
      147,  100,  961,  100,  100,  100,  444,  100,  299,  299,

      100,  100,  100,  100,  313,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  211,  100,  314,  100,  100,
      100,  100,  100,  315,  100,  317,  100,  100,  445,  445,
      316,  100,  100,  100,  325,  100,  960,  319,  100,  959,
      100,  100,  320,  253,  100,  100,  365,  100,  318,  238,
      100,  100,  100,  100,  100,  321,  322,  100,  100,  100,
      100,  330,  100,  323,  324,  326,  100,  100,  100,  100,
      328,  100,  331,  327,  100,  100,  329,  100,  100,  957,
      333,  100,  334,  100,  100,  100,  336,  100,  239,  339,
      100,  100,  100,  956,  100,  100,  100,  100,  100,  100,

      332,  100,  199,  100,  100,  100,  100,  337,  335,  338,
      100,  100,  100,  341,  100,  100,  100,  100,  100,  100,
      100,  397,  100,  100,  340,   73,  100,  955,   73,  100,
      100,  100,  100,  100,  100,  100,   73,  100,  100,  100,
       73,  954,  354,   73,  100,  100,  100,   73,  355,  100,
      100,  100,  353,  100,  358,  100,   73,  100,  356,  100,
       73,  357,  100,  100,  100,  100,  100,  361,   73,  359,
      100,   73,  100,  953,  100,  360,  100,  363,  364,  362,
      100,  100,  100,   73,  100,  952,  100,  100,   73,  100,
      367,  367,  367,  368,  368,  368,  369,  369,  369,   73,

      951,  222,  222,  222,  371,  371,  371,  113,  113,  113,
      945,  238,  372,  372,  100,  238,  373,  373,  373,  238,
      374,  374,  944,  375,  375,  375,  100,  943,  238,  942,
      238,  238,   74,   74,   74,  238,   74,   74,   74,  100,
      941,  100,  940,  238,   74,   74,   74,   74,   74,   74,
      239,  100,  939,  100,  239,  238,  485,  486,  239,  377,
      377,  377,  487,  487,  378,  378,  378,  239,  238,  239,
      239,  238,  938,  238,  239,  379,  379,  379,   85,   85,
       85,   85,  239,  238,  381,  391,  937,  241,  241,  241,
      399,  392,  392,  392,  239,  113,  113,  113,  928,  238,

      393,  393,  394,  394,  394,  421,  927,  239,  395,  395,
      239,  238,  239,  926,  238,  396,  396,  396,  113,  113,
      113,  925,  239,  382,  488,  488,  400,  401,  402,  403,
      404,  405,  406,  407,  924,  238,  923,  238,  239,  922,
      254,  254,  254,  422,  422,  422,  425,  425,  921,  428,
      239,  541,  541,  239,  238,  427,   85,   85,   85,  383,
      384,  385,  386,  387,  388,  389,  390,   85,   85,   85,
       85,  423,  423,  255,  239,  238,  239,  113,  113,  113,
      433,  433,  433,  424,  424,  424,  426,  426,  426,  429,
      429,  100,  920,  239,  434,  434,  434,  435,  435,  435,

      543,  543,  345,  909,  100,  100,  346,  346,  100,   87,
       87,   87,  257,  100,  239,  908,  100,  100,  100,  429,
      429,  429,  429,  429,  429,  907,   87,   87,   87,  100,
      100,  100,  100,  100,  906,  100,  583,  583,  100,  905,
      100,  904,  100,  903,  100,   85,   85,   85,  258,  259,
      260,  261,  262,  263,  264,  265,   85,   85,   85,   85,
      380,  408,  409,  408,  380,  410,  380,  408,  411,  380,
      380,  380,  380,  380,  408,  380,  408,  408,  380,  380,
      380,  408,  380,  380,  380,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,

      380,  382,  380,  380,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      380,  380,  380,  380,   85,   85,   85,  412,  413,  414,
      415,  416,  417,  418,  419,  238,  441,  100,  238,  454,
      456,  238,  457,  100,  238,  465,  100,  238,  489,  100,
      100,  100,  490,  490,  100,  445,  445,  100,  455,  902,
      100,  901,  100,  100,  100,  464,  100,  253,  100,  100,
      459,  100,  100,  100,  239,  460,  461,  239,  100,  100,
      239,  100,  100,  239,  463,  100,  239,  100,  100,  889,

      100,  100,  888,  100,  100,  887,  100,  466,  458,  100,
      462,  100,  886,  100,  100,  100,  468,   87,   87,   87,
       87,   87,   87,  430,  430,  430,  431,  431,  431,  432,
      432,  432,  469,  100,  885,  471,  467,  100,  100,  100,
      100,  100,  473,  614,  614,  474,  475,  100,  100,  100,
      100,  470,  100,  487,  487,  472,  488,  488,  100,  100,
      100,  884,  100,  100,  100,  100,  100,  100,  479,  100,
      100,  883,  100,  882,  100,  476,  477,  100,  100,  100,
      881,  100,  100,  862,  100,  100,  100,  478,  100,  480,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  482,

      481,  100,  100,  100,   73,  100,  100,  100,  100,  100,
      100,   73,  100,  100,  484,  497,  483,  100,  100,  491,
       73,  861,  100,  100,  462,  100,  100,  100,  100,  100,
      100,  492,   73,  494,  100,  100,  495,   73,  100,  860,
      100,  100,  100,  100,   73,  100,  100,  100,  493,  100,
       73,  238,  498,   73,  496,  100,   73,  100,  859,  100,
      100,  100,  100,   73,  499,  858,  100,  100,  100,  100,
      857,  100,  238,  100,  500,  100,  100,  100,  514,  238,
      222,  222,  222,  398,  398,  398,  856,  222,  222,  222,
      239,  540,  540,  540,  615,  616,  222,  222,  222,  238,

      542,  542,  542,  544,  544,  544,  638,  638,  222,  222,
      222,  239,  855,  501,  501,  501,  854,  515,  239,  840,
      502,  502,  502,  380,  380,  380,  503,  503,  503,   74,
       74,   74,   74,   74,   74,  238,  834,  238,  239,   74,
       74,   74,   85,   85,   85,   85,  527,  238,  504,  504,
      238,  529,  529,  516,  517,  518,  519,  520,  521,  522,
      523,  825,  238,  100,  580,  824,  238,  113,  113,  113,
      100,  528,  528,  528,  239,  238,  239,  591,  238,  113,
      113,  113,  113,  113,  113,   86,  239,   91,  100,  239,
      100,  253,  640,  640,  489,  100,  238,  100,  490,  490,

      823,  239,  238,  593,  822,  239,  238,  530,  530,  530,
      531,  531,   86,  821,  239,  238,  634,  239,  238,  533,
       85,   85,   85,  505,  506,  507,  508,  509,  510,  511,
      512,   85,   85,   85,   85,  239,  570,  524,  532,  532,
      532,  239,  820,  635,   73,  239,  818,  241,  241,  241,
      241,  241,  241,  128,  239,  238,  514,  239,  100,  100,
      513,  513,  513,  637,  637,  637,  238,  514,  241,  241,
      241,  100,  592,  525,  572,  572,   91,  100,  241,  241,
      241,  656,  656,  100,  100,  100,  596,  534,  534,  534,
      535,  535,  535,  598,  239,  515,  100,  817,  100,  100,

      526,  804,  100,  537,  597,  239,  515,  658,  658,   85,
       85,   85,  505,  506,  507,  508,  509,  510,  511,  512,
      222,  222,  222,  803,  100,  799,  100,  536,  536,  536,
      538,  516,  517,  518,  519,  520,  521,  522,  523,  574,
      574,  793,  516,  517,  518,  519,  520,  521,  522,  523,
      513,  547,  548,  547,  513,  549,  513,  547,  550,  513,
      513,  513,  513,  513,  547,  513,  547,  547,  513,  513,
      513,  547,  513,  513,  513,  547,  547,  547,  547,  547,
      547,  547,  547,  547,  547,  547,  547,  547,  547,  547,
      513,  515,  513,  513,  547,  547,  547,  547,  547,  547,

      547,  547,  547,  547,  547,  547,  547,  547,  547,  547,
      547,  547,  547,  547,  547,  547,  547,  547,  547,  547,
      513,  513,  513,  513,  238,  776,  100,  551,  552,  553,
      554,  555,  556,  557,  558,   85,   85,   85,   85,  238,
      774,  560,  583,  583,  100,  773,  238,  100,  639,  639,
      639,  100,  238,  100,  100,  238,  772,  240,  594,  100,
      238,  599,  238,  239,  238,  614,  614,  238,  100,  100,
      238,  100,  100,  238,  100,  100,  721,  595,  239,  100,
      561,  100,  600,  771,  100,  239,  100,  601,  641,  641,
      641,  239,  238,  100,  239,  100,  408,  408,  408,  239,

      100,  239,  100,  239,  767,  602,  239,  795,  795,  239,
      238,  576,  239,   85,   85,   85,  562,  563,  564,  565,
      566,  567,  568,  569,  571,  571,  571,  573,  573,  573,
      238,  239,  575,  575,  575,  238,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  238,  239,
      238,  100,  100,  398,  398,  398,  398,  398,  398,  238,
      749,  603,  581,  581,  577,  577,  577,  797,  797,  239,
      398,  398,  398,  748,  239,  446,  100,  100,  100,  100,
      606,  604,  578,  578,  578,  100,  100,  239,  723,  239,
      100,  100,  581,  581,  581,  581,  581,  581,  239,  716,

      605,  100,  579,  579,  579,  609,   73,   87,   87,   87,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  607,
      100,   73,   87,   87,   87,  610,  100,  100,  100,  711,
      621,   87,   87,   87,  100,  100,  836,  836,  100,  100,
      238,  100,  100,  838,  838,  100,  608,  100,  100,  100,
      710,  611,  100,  613,  100,  238,  619,  612,  624,  100,
      100,  100,  100,  100,  100,  100,  617,  100,  100,  100,
      618,  238,  709,  100,  100,  100,  100,  100,  238,  239,
      620,  238,  222,  222,  222,  238,  420,  708,  238,  100,
      702,  100,  238,  100,  239,  100,  626,  222,  222,  222,

      625,  679,  100,  678,  100,  677,  676,  238,  238,  660,
      239,  654,   86,   86,   86,  253,  642,  239,  240,  636,
      239,  643,  661,  253,  239,  253,  238,  239,  238,  627,
      253,  239,  398,  398,  398,  590,  589,  240,  238,  588,
      644,  644,  585,  628,  628,  628,  239,  239,  238,  662,
      629,  629,  238,  630,  630,  630,  238,  584,  631,  631,
      632,  632,  632,  582,  633,  239,  238,  239,   85,  238,
      644,  644,  644,  644,  644,  644,  238,  239,  546,  238,
      380,  380,  380,  650,  650,  650,  545,  239,  651,  651,
      651,  239,  652,  652,  652,  239,  547,  547,  547,  539,

      380,  380,  380,  489,  453,  239,  653,  452,  239,  451,
      380,  380,  380,  253,  253,  239,  450,  253,  239,  449,
      380,  380,  380,  448,  645,  645,  645,  447,  646,  646,
      646,  253,  100,  100,  649,  649,  100,  446,  647,  647,
      647,  241,  241,  241,  655,  655,  655,  238,  241,  241,
      241,  241,  241,  241,  657,  657,  657,  100,  100,  100,
      100,  100,  253,  100,  649,  649,  649,  649,  649,  649,
      114,  115,  116,  117,  118,  119,  120,  121,  659,  659,
      659,  100,  443,  238,  238,  442,  239,  238,  703,  703,
      238,  504,  238,  440,  238,  703,  703,  238,  238,  439,

      238,  238,  436,  238,   85,  100,  100,  238,  100,  240,
      238,   85,  240,  238,  345,  344,  238,  343,  100,  559,
      559,  559,  239,  239,  342,  311,  239,   86,  310,  239,
      100,  239,  100,  239,  309,  308,  239,  239,  307,  239,
      239,  306,  239,  100,  702,  100,  239,  305,  683,  239,
      304,  702,  239,  238,   86,  239,  669,  663,  238,  664,
      664,  664,  665,  665,  666,  666,  666,  667,  667,  668,
      668,  668,  408,  408,  408,  408,  408,  408,  238,  408,
      408,  408,  408,  408,  408,  670,  670,  670,  671,  671,
      671,  100,  239,  302,  238,  238,  100,  239,  513,  513,

      513,  513,  513,  513,  513,  513,  513,  301,  291,  673,
      673,  513,  513,  513,  238,  290,  100,  239,  100,  285,
      100,  100,  682,  685,  284,  672,  672,  672,  674,  674,
      254,  254,  254,  239,  239,  718,  718,  718,  684,  673,
      673,  673,  673,  673,  673,  100,  100,  100,  283,  100,
      254,  254,  254,  239,  100,  100,  282,  276,  674,  674,
      674,  674,  674,  674,  100,  219,  254,  254,  254,  688,
      100,  100,  687,  100,  100,  100,  100,  686,  692,  100,
      100,  100,  100,  100,  689,  697,  100,  690,  696,  100,
      213,  100,  691,  100,  100,  100,   73,  100,  100,  693,

      100,   73,  100,  219,  100,  704,  213,  212,  100,  100,
      100,  100,  100,  100,  211,  694,  100,  100,  100,  100,
      100,  100,  698,  100,  100,  100,  152,  100,  695,  100,
      699,  100,  700,  504,  100,  100,  100,  100,  143,  100,
      100,  100,  100,  100,  100,  705,  100,  100,  701,  100,
      238,  100,  100,  707,  100,  238,  706,  125,  238,  124,
      100,  238,  100,  991,  238,  100,   69,  100,  238,   86,
      991,  100,  100,  100,  100,  238,  991,  712,  717,  717,
      719,  719,  719,  720,  720,  720,  238,  991,  991,  239,
      398,  398,  398,  991,  239,  991,   86,  239,  991,  991,

      239,  991,  991,  239,  238,  991,  238,  239,  717,  717,
      717,  717,  717,  717,  239,  991,  991,  238,  991,  100,
      722,  722,   86,   86,   86,  239,  991,   86,   86,   86,
       86,   86,   86,   86,   86,   86,  713,  713,  713,  991,
      714,  714,  714,  239,  100,  239,  100,  715,  715,  715,
      722,  722,  722,  722,  722,  722,  239,  991,  380,  380,
      380,  991,  724,  724,  398,  398,  398,  398,  398,  398,
      547,  547,  547,  547,  547,  547,  380,  380,  380,  547,
      547,  547,  547,  547,  547,  736,  736,  736,  991,  380,
      380,  380,  724,  724,  724,  724,  724,  724,  398,  725,

      725,  725,  398,  726,  398,  725,  727,  398,  398,  398,
      398,  398,  725,  398,  725,  725,  398,  398,  398,  725,
      398,  398,  398,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  398,  399,
      398,  398,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  398,  398,
      398,  398,  737,  737,  737,  728,  729,  730,  731,  732,
      733,  734,  735,  738,  738,  738,   85,  238,  991,  740,
      740,  238,  991,  991,  238,  991,  991,  238,  991,  991,

      238,  991,  100,  238,  991,  991,  238,  100,  991,  238,
      100,  991,  238,  100,  991,  238,  513,  513,  513,  740,
      740,  740,  740,  740,  740,  750,  239,  100,  751,  100,
      239,  100,  100,  239,  100,  100,  239,  100,  100,  239,
      100,  991,  239,  752,  991,  239,  991,  991,  239,  991,
      991,  239,  991,  991,  239,  991,  100,  991,  100,  559,
      559,  559,  754,  559,  559,  559,  559,  559,  559,  559,
      559,  559,  741,  741,  741,  742,  742,  742,  743,  743,
      743,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      238,  991,  991,  753,  100,  100,  513,  513,  513,  991,

      100,  238,  755,  991,  744,  744,  991,  760,  513,  513,
      513,  991,  756,  757,  991,  745,  745,  100,  991,  100,
      100,  100,  100,  991,  991,  100,  100,  100,  758,  239,
      763,  100,  100,  991,  744,  744,  744,  744,  744,  744,
      239,  100,  100,  764,  100,  745,  745,  745,  745,  745,
      745,  100,  768,  100,  100,  759,  100,  100,  100,  761,
      100,  100,  238,  770,  100,  238,  100,  100,  100,  238,
      100,  100,  991,  991,  762,  765,  725,  725,  725,  100,
      775,  100,  100,  777,  777,  100,  100,  100,  100,  100,
      991,  100,  100,  766,  100,  100,  100,  100,  100,  100,

      991,  239,  769,  991,  239,  238,  991,  100,  239,  100,
      794,  794,  794,  777,  777,  777,  777,  777,  777,  778,
      778,  796,  796,  796,  100,  783,  100,  780,  780,  991,
      991,  238,  991,  514,   86,   86,   86,   86,   86,   86,
      991,   86,   86,   86,  239,  779,  779,  991,  991,  778,
      778,  778,  778,  778,  778,  781,  781,  780,  780,  780,
      780,  780,  780,  991,  784,  798,  798,  798,  991,  991,
      239,  991,  515,  991,  991,  779,  779,  779,  779,  779,
      779,  547,  547,  547,  238,  781,  781,  781,  781,  781,
      781,  547,  547,  547,  547,  547,  547,  238,  991,  100,

      785,  786,  787,  788,  789,  790,  791,  792,  516,  517,
      518,  519,  520,  521,  522,  523,   85,  805,  991,  801,
      801,  238,  991,  239,  811,  991,  100,  991,  238,  991,
      991,  806,  782,  782,  782,  807,  239,  991,  809,  991,
      991,  100,  802,  802,  835,  835,  835,  991,  991,  801,
      801,  801,  801,  801,  801,  100,  559,  559,  559,  100,
      239,  810,  100,  100,  991,  991,  100,  239,  100,  559,
      559,  559,  802,  802,  802,  802,  802,  802,  100,  991,
      100,  808,  100,  991,  100,  100,  100,  100,  100,  100,
      100,  813,  100,  559,  559,  559,  991,  100,  991,  819,

      100,  100,  991,  100,  991,  100,  826,  826,  991,  812,
      100,  991,  100,  991,  991,  816,  253,  100,  100,  100,
      827,  827,  100,  814,  100,  100,  100,  100,  100,  253,
      991,  815,  238,  830,  830,  100,  826,  826,  826,  826,
      826,  826,  991,  100,  238,  100,  828,  828,  100,  991,
      827,  827,  827,  827,  827,  827,  991,  100,  829,  829,
      100,  991,  100,  830,  830,  830,  830,  830,  830,  831,
      831,  239,  991,  100,  991,  100,  828,  828,  828,  828,
      828,  828,  898,  239,  100,  991,  253,  991,  829,  829,
      829,  829,  829,  829,  837,  837,  837,  991,  991,  831,

      831,  831,  831,  831,  831,  100,  839,  839,  839,  991,
      991,  832,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  841,  841,  841,  842,  842,  842,
      100,  991,  100,  843,  843,  843,   85,  100,  833,  844,
      844,  991,   85,  238,  847,  845,  845,  782,  782,  782,
      991,  848,  782,  782,  782,  991,  991,  846,  846,  782,
      782,  782,  100,  991,  100,  782,  782,  782,  100,  844,
      844,  844,  844,  844,  844,  845,  845,  845,  845,  845,
      845,  100,  239,  991,  100,  100,  991,  846,  846,  846,
      846,  846,  846,  100,  991,  100,  100,  100,  850,  849,

      863,  863,  514,  851,  991,  991,  100,  991,  100,  100,
      100,  100,  100,  853,  852,  864,  864,  869,  869,  869,
      991,  100,  100,  100,  100,  238,  866,  866,  991,  991,
      863,  863,  863,  863,  863,  863,  870,  870,  870,  865,
      865,  515,  871,  871,  871,  864,  864,  864,  864,  864,
      864,  867,  725,  725,  725,  991,  866,  866,  866,  866,
      866,  866,   85,  991,  239,  872,  872,  100,  991,  865,
      865,  865,  865,  865,  865,  868,  868,  516,  517,  518,
      519,  520,  521,  522,  523,  725,  725,  725,  725,  725,
      725,  100,  100,  991,  100,  872,  872,  872,  872,  872,

      872,  878,  991,  100,  991,  868,  868,  868,  868,  868,
      868,   85,  238,  991,  873,  873,  100,  991,  100,  782,
      782,  782,  782,  782,  782,  100,  874,  874,  100,  991,
      100,  876,  782,  782,  782,  875,  991,  100,  100,  991,
      991,  991,  991,  991,  873,  873,  873,  873,  873,  873,
      100,  239,  100,  100,  890,  890,  874,  874,  874,  874,
      874,  874,  100,  100,  100,  100,  879,  238,  877,  991,
      991,  880,  991,  100,  991,  991,  893,  991,  100,  991,
      100,  891,  891,  100,  890,  890,  890,  890,  890,  890,
      892,  892,  100,   85,  991,  991,  895,  895,  100,  991,

      100,  897,  894,  894,  991,  991,  239,  991,  100,  991,
      100,  891,  891,  891,  891,  891,  891,  100,  100,  100,
      892,  892,  892,  892,  892,  892,  895,  895,  895,  895,
      895,  895,  894,  894,  894,  894,  894,  894,  238,  100,
      100,  991,  991,  100,  100,  100,  916,  991,  991,  991,
      991,  100,  896,  896,  991,  991,  991,  899,  910,  910,
      238,  991,  991,  991,  100,  900,  100,  100,  991,  100,
      100,  100,  935,  991,  911,  911,  100,  239,  100,  991,
      912,  912,  896,  896,  896,  896,  896,  896,  910,  910,
      910,  910,  910,  910,  991,  100,  991,  100,  100,  239,

      913,  913,  991,  253,  911,  911,  911,  911,  911,  911,
      912,  912,  912,  912,  912,  912,  100,  991,  991,  991,
      914,  914,  100,  100,  991,  100,  991,  917,  991,  991,
      913,  913,  913,  913,  913,  913,  100,  991,  918,  100,
      991,  100,   85,  100,  991,  915,  915,  100,  991,  100,
      914,  914,  914,  914,  914,  914,  991,  991,  100,  100,
      991,  100,  100,  100,  100,  991,  100,  238,  919,  929,
      929,  991,  949,  950,  991,  915,  915,  915,  915,  915,
      915,  930,  930,  100,  100,  100,  100,  100,  991,  100,
      931,  931,  991,   85,  991,  991,  934,  934,  991,  929,

      929,  929,  929,  929,  929,  991,  239,  991,  991,  991,
      991,  930,  930,  930,  930,  930,  930,  932,  932,  100,
      931,  931,  931,  931,  931,  931,  934,  934,  934,  934,
      934,  934,  100,  100,  514,  991,  991,  933,  933,  100,
      936,  991,  991,  991,  100,  991,  100,  932,  932,  932,
      932,  932,  932,  100,  946,  946,  991,  100,  100,  100,
      100,  947,  947,  991,  100,  991,  100,  933,  933,  933,
      933,  933,  933,  515,  991,  991,  991,  100,  100,  253,
      100,  991,  991,  991,  946,  946,  946,  946,  946,  946,
      991,  947,  947,  947,  947,  947,  947,   85,  100,  991,

      948,  948,  100,  991,  100,  991,  958,  958,  991,  516,
      517,  518,  519,  520,  521,  522,  523,  991,  991,  991,
      991,  991,  100,  100,  991,  100,  965,  965,  991,  991,
      948,  948,  948,  948,  948,  948,  958,  958,  958,  958,
      958,  958,  100,  991,  991,  991,  991,  100,  991,  100,
      969,  969,  991,  991,  991,  991,  965,  965,  965,  965,
      965,  965,  991,  991,  991,  991,  100,  100,  991,  100,
      991,  991,  991,  991,  991,  991,  991,  991,  991,  991,
      969,  969,  969,  969,  969,  969,  991,  991,  991,  991,
      991,  100,  991,  100,  100,  100,  113,  113,  113,  113,

      210,  210,  210,  210,   72,   72,   72,   72,   72,  222,
      222,  222,  222,  222,   85,   85,   85,   85,   85,  254,
      254,  254,  254,  254,  303,  303,  303,  991,  303,  380,
      380,  380,  380,  380,  398,  398,  398,  398,   86,   86,
       86,   86,   86,  513,  513,  513,  513,  559,  559,  559,
      559,  559,  586,  586,  586,  991,  586,  587,  587,  587,
      991,  587,  675,  675,  675,  991,  675,  680,  680,  680,
      991,  680,  681,  681,  681,  991,  681,  746,  746,  746,
      991,  746,  747,  747,  747,  991,  747,  782,  782,  782,
      782,    3,  991,  991,  991,  991,  991,  991,  991,  991,

      991,  991,  991,  991,  991,  991,  991,  991,  991,  991,
      991,  991,  991,  991,  991,  991,  991,  991,  991,  991,
      991,  991,  991,  991,  991,  991,  991,  991,  991,  991,
      991,  991,  991,  991,  991,  991,  991,  991,  991,  991,
      991,  991,  991,  991,  991,  991,  991,  991,  991,  991,
      991,  991,  991,  991,  991,  991,  991,  991,  991,  991,
      991,  991,  991,  991,  991,  991,  991,  991,  991,  991,
      991,  991,  991,  991,  991,  991,  991,  991,  991,  991,
      991
    } ;

static yyconst flex_int16_t yy_chk[4382] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    5,
        5,    5,    5,    6,    6,    6,    6,   10,   11,   11,

       11,   11,   11,   11,   11,   11,   10,   61,   61,   61,
        5,   63,   63,   63,    6,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,

        7,    7,    7,    7,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    9,  989,   14,    9,   23,   23,   23,

       23,   13,   14,   24,   13,   25,   24,   31,   84,   43,
      988,   32,   78,   25,   25,   33,   38,  537,   23,   34,
      537,   31,   24,   24,  210,   35,  987,   22,   44,   32,
       22,   35,   31,   44,   31,   31,   32,   43,   32,   32,
       33,   38,   33,   38,   34,   34,   34,   64,   64,   38,
      230,   33,  986,   35,   44,  210,   35,   80,   35,   35,
       37,  661,   35,   37,  661,    9,    9,    9,    9,    9,
        9,    9,    9,   13,   13,   13,   13,   13,   13,   13,
       13,   20,   39,   20,   84,   37,   20,   37,   39,   37,
       78,   20,   20,   20,   66,   66,   40,  985,   20,   22,

       22,   22,   22,   22,   22,   22,   22,   26,   29,  984,
       26,   20,   20,   39,  983,   39,  106,  106,   40,   29,
       20,   40,   30,   40,   26,   30,  230,   48,   29,   65,
       65,   65,   20,   80,   80,   20,   20,  284,   20,   20,
       20,  982,   20,   20,  108,  108,   20,   77,   41,   30,
      284,   85,   48,   29,   48,   20,   20,   20,   20,   20,
       20,   20,   20,   29,   67,   67,   67,   29,   29,   29,
       29,  981,   29,   41,   30,   41,   30,   41,  980,   26,
       26,   26,   26,   26,   26,   26,   26,   36,   36,   42,
       85,   36,   47,   50,   30,   30,   30,   30,   30,   30,

       30,   30,   46,   46,   47,   49,   46,  979,   46,   51,
       42,   50,   53,   36,   42,   36,   42,   47,   50,   47,
       50,   36,   52,   77,   77,   77,   53,   79,   54,  978,
       49,   81,   49,   49,   51,   82,   51,   53,   83,   53,
       55,   56,  117,  117,   52,   51,   54,   52,  977,   52,
       52,   57,  976,   54,   92,   54,   46,   99,   55,   56,
       69,   69,   69,   69,  975,   55,   56,   55,   56,   57,
       70,   70,   70,   70,  100,   88,   57,  739,   57,   86,
      739,   69,   71,   71,   71,   71,   75,   75,   75,   75,
       86,   90,  127,   92,   88,   91,   99,  119,  119,  100,

      127,  100,   90,   79,   79,   79,   91,   81,   81,   81,
      145,  145,   82,   82,   83,   83,   83,  974,   86,   88,
      973,   88,  103,  103,  103,  971,   92,   92,   92,   99,
       90,   91,  113,  970,   91,  101,  101,  101,  101,  101,
      101,  101,  101,  105,  105,  105,  107,  107,  107,  109,
      109,  109,  114,  114,  114,  196,  196,  113,   91,  113,
      116,  116,  116,  968,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,

       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   89,   89,   89,   89,   95,  134,
       89,  118,  118,  118,  120,  120,  120,  126,  135,   93,
      128,   89,   94,  197,  197,   96,  211,   97,  131,  139,
       98,  239,  132,  244,  134,  126,  134,  147,  128,  147,

      147,  136,  967,  135,  224,  135,  131,   95,  195,   89,
      132,  136,  195,  195,  139,  964,  139,  211,   93,  962,
      126,   94,  126,  128,   96,  128,   97,  198,  198,   98,
      239,  131,  244,  131,  960,  132,  136,  132,  136,  957,
       95,   95,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   93,   94,   94,   94,   96,   96,   96,
       97,   97,   98,   98,   98,  137,  138,  140,  141,  142,
      146,  163,  497,  146,  257,  164,  163,  213,  213,  213,
      165,  956,  224,  137,  138,  257,  497,  142,  955,  146,
      146,  140,  954,  141,  166,  141,  299,  167,  299,  299,

      164,  163,  164,  163,  164,  165,  168,  165,  137,  138,
      137,  138,  142,  169,  142,  366,  140,  165,  140,  166,
      170,  166,  167,  166,  167,  168,  171,  172,  300,  300,
      167,  168,  173,  168,  174,  176,  953,  170,  169,  952,
      169,  175,  171,  946,  177,  170,  366,  170,  169,  252,
      182,  171,  172,  171,  172,  171,  172,  173,  174,  173,
      176,  178,  176,  173,  173,  175,  175,  178,  175,  177,
      176,  177,  179,  175,  180,  182,  177,  182,  179,  945,
      181,  183,  182,  174,  186,  174,  184,  185,  252,  187,
      199,  188,  178,  944,  178,  187,  214,  214,  214,  180,

      180,  180,  199,  179,  181,  179,  183,  185,  183,  186,
      184,  186,  185,  188,  185,  199,  188,  199,  188,  200,
      187,  252,  187,  201,  187,  223,  202,  942,  225,  181,
      203,  181,  215,  215,  215,  184,  226,  184,  204,  205,
      227,  940,  201,  228,  200,  208,  200,  229,  201,  206,
      201,  202,  200,  202,  204,  203,  231,  203,  202,  207,
      232,  203,  209,  204,  205,  204,  205,  206,  233,  205,
      208,  234,  208,  939,  206,  205,  206,  208,  209,  207,
      216,  216,  216,  235,  207,  938,  207,  209,  236,  209,
      217,  217,  217,  218,  218,  218,  219,  219,  219,  237,

      937,  223,  223,  223,  225,  225,  225,  276,  276,  276,
      928,  246,  226,  226,  242,  245,  227,  227,  227,  247,
      228,  228,  927,  229,  229,  229,  255,  926,  248,  925,
      249,  259,  231,  231,  231,  250,  232,  232,  232,  242,
      924,  242,  923,  251,  233,  233,  233,  234,  234,  234,
      246,  255,  922,  255,  245,  266,  345,  345,  247,  235,
      235,  235,  348,  348,  236,  236,  236,  248,  258,  249,
      259,  260,  921,  263,  250,  237,  237,  237,  240,  240,
      240,  240,  251,  265,  240,  246,  920,  245,  245,  245,
      253,  247,  247,  247,  266,  277,  277,  277,  909,  261,

      248,  248,  249,  249,  249,  259,  908,  258,  250,  250,
      260,  262,  263,  907,  264,  251,  251,  251,  278,  278,
      278,  906,  265,  240,  350,  350,  253,  253,  253,  253,
      253,  253,  253,  253,  905,  267,  904,  269,  261,  903,
      258,  258,  258,  260,  260,  260,  263,  263,  902,  267,
      262,  403,  403,  264,  270,  265,  240,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  240,  243,  243,  243,
      243,  261,  261,  243,  267,  268,  269,  279,  279,  279,
      280,  280,  280,  262,  262,  262,  264,  264,  264,  268,
      268,  286,  901,  270,  281,  281,  281,  282,  282,  282,

      405,  405,  346,  889,  292,  293,  346,  346,  295,  269,
      269,  269,  243,  296,  268,  888,  286,  298,  286,  268,
      268,  268,  268,  268,  268,  887,  270,  270,  270,  292,
      293,  292,  293,  295,  886,  295,  444,  444,  296,  885,
      296,  884,  298,  883,  298,  243,  243,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  256,  256,  256,  256,
      256,  256,  256,  256,  256,  256,  256,  256,  256,  256,
      256,  256,  256,  256,  256,  256,  256,  256,  256,  256,
      256,  256,  256,  256,  256,  256,  256,  256,  256,  256,
      256,  256,  256,  256,  256,  256,  256,  256,  256,  256,

      256,  256,  256,  256,  256,  256,  256,  256,  256,  256,
      256,  256,  256,  256,  256,  256,  256,  256,  256,  256,
      256,  256,  256,  256,  256,  256,  256,  256,  256,  256,
      256,  256,  256,  256,  256,  256,  256,  256,  256,  256,
      256,  256,  256,  256,  256,  271,  289,  313,  272,  312,
      314,  273,  315,  316,  274,  320,  314,  275,  352,  367,
      367,  367,  352,  352,  289,  445,  445,  318,  313,  882,
      319,  881,  313,  312,  313,  319,  315,  864,  316,  320,
      316,  314,  321,  314,  271,  317,  317,  272,  317,  289,
      273,  289,  318,  274,  318,  319,  275,  319,  312,  862,

      312,  315,  861,  315,  320,  860,  320,  321,  315,  321,
      317,  322,  859,  317,  324,  317,  323,  271,  271,  271,
      272,  272,  272,  273,  273,  273,  274,  274,  274,  275,
      275,  275,  324,  326,  858,  327,  322,  328,  322,  324,
      323,  324,  329,  486,  486,  330,  331,  332,  368,  368,
      368,  326,  335,  487,  487,  328,  488,  488,  326,  327,
      326,  857,  328,  337,  328,  323,  329,  323,  335,  330,
      331,  856,  332,  855,  332,  334,  334,  335,  338,  335,
      854,  334,  341,  825,  327,  339,  327,  334,  337,  337,
      337,  329,  353,  329,  330,  331,  330,  331,  340,  339,

      338,  357,  354,  338,  370,  338,  334,  341,  334,  341,
      339,  371,  339,  355,  341,  360,  340,  353,  356,  353,
      372,  824,  358,  340,  354,  340,  357,  354,  357,  354,
      359,  355,  373,  357,  360,  361,  358,  374,  355,  823,
      355,  363,  364,  356,  375,  356,  362,  358,  356,  358,
      376,  383,  361,  377,  359,  359,  378,  359,  822,  360,
      361,  360,  361,  379,  362,  821,  363,  364,  363,  364,
      820,  362,  384,  362,  364,  369,  369,  369,  381,  386,
      370,  370,  370,  400,  400,  400,  819,  371,  371,  371,
      383,  402,  402,  402,  489,  489,  372,  372,  372,  385,

      404,  404,  404,  406,  406,  406,  519,  519,  373,  373,
      373,  384,  818,  374,  374,  374,  817,  381,  386,  792,
      375,  375,  375,  383,  383,  383,  376,  376,  376,  377,
      377,  377,  378,  378,  378,  387,  786,  388,  385,  379,
      379,  379,  380,  380,  380,  380,  384,  390,  380,  411,
      428,  386,  386,  381,  381,  381,  381,  381,  381,  381,
      381,  775,  413,  455,  428,  774,  389,  433,  433,  433,
      458,  385,  385,  385,  387,  391,  388,  455,  392,  434,
      434,  434,  435,  435,  435,  411,  390,  380,  455,  428,
      455,  515,  521,  521,  490,  458,  393,  458,  490,  490,

      773,  413,  415,  458,  772,  389,  394,  387,  387,  387,
      388,  388,  411,  771,  391,  395,  515,  392,  396,  390,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  382,  382,  382,  382,  393,  413,  382,  389,  389,
      389,  415,  770,  515,  501,  394,  768,  391,  391,  391,
      392,  392,  392,  441,  395,  397,  398,  396,  456,  461,
      516,  516,  516,  518,  518,  518,  417,  399,  393,  393,
      393,  441,  456,  382,  415,  415,  382,  462,  394,  394,
      394,  554,  554,  456,  461,  456,  461,  395,  395,  395,
      396,  396,  396,  463,  397,  398,  441,  767,  441,  463,

      382,  747,  462,  399,  462,  417,  399,  556,  556,  382,
      382,  382,  382,  382,  382,  382,  382,  382,  382,  382,
      501,  501,  501,  746,  463,  735,  463,  397,  397,  397,
      399,  398,  398,  398,  398,  398,  398,  398,  398,  417,
      417,  729,  399,  399,  399,  399,  399,  399,  399,  399,
      409,  409,  409,  409,  409,  409,  409,  409,  409,  409,
      409,  409,  409,  409,  409,  409,  409,  409,  409,  409,
      409,  409,  409,  409,  409,  409,  409,  409,  409,  409,
      409,  409,  409,  409,  409,  409,  409,  409,  409,  409,
      409,  409,  409,  409,  409,  409,  409,  409,  409,  409,

      409,  409,  409,  409,  409,  409,  409,  409,  409,  409,
      409,  409,  409,  409,  409,  409,  409,  409,  409,  409,
      409,  409,  409,  409,  412,  716,  459,  409,  409,  409,
      409,  409,  409,  409,  409,  410,  410,  410,  410,  419,
      711,  410,  583,  583,  460,  710,  524,  464,  520,  520,
      520,  459,  414,  459,  466,  416,  709,  524,  459,  467,
      418,  464,  643,  412,  421,  614,  614,  422,  494,  460,
      423,  460,  464,  424,  464,  469,  643,  460,  419,  466,
      410,  466,  466,  708,  467,  524,  467,  467,  522,  522,
      522,  414,  425,  494,  416,  494,  412,  412,  412,  418,

      469,  643,  469,  421,  704,  469,  422,  731,  731,  423,
      426,  419,  424,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  414,  414,  414,  416,  416,  416,
      427,  425,  418,  418,  418,  430,  421,  421,  421,  422,
      422,  422,  423,  423,  423,  424,  424,  424,  429,  426,
      431,  472,  477,  539,  539,  539,  540,  540,  540,  432,
      681,  470,  429,  429,  425,  425,  425,  733,  733,  427,
      541,  541,  541,  680,  430,  675,  472,  477,  472,  477,
      477,  472,  426,  426,  426,  470,  476,  429,  648,  431,
      478,  480,  429,  429,  429,  429,  429,  429,  432,  634,

      476,  481,  427,  427,  427,  480,  502,  430,  430,  430,
      470,  476,  470,  476,  479,  478,  480,  478,  480,  478,
      482,  503,  431,  431,  431,  481,  481,  483,  481,  624,
      496,  432,  432,  432,  491,  484,  788,  788,  492,  479,
      505,  479,  493,  790,  790,  482,  479,  482,  495,  496,
      623,  482,  483,  484,  483,  506,  493,  483,  498,  491,
      484,  491,  484,  492,  499,  492,  491,  493,  500,  493,
      492,  507,  622,  495,  496,  495,  496,  498,  508,  505,
      495,  509,  502,  502,  502,  510,  561,  621,  511,  499,
      615,  499,  512,  500,  506,  500,  500,  503,  503,  503,

      499,  588,  498,  587,  498,  586,  585,  525,  527,  558,
      507,  552,  505,  505,  505,  550,  523,  508,  525,  517,
      509,  525,  561,  514,  510,  513,  526,  511,  528,  506,
      504,  512,  542,  542,  542,  453,  452,  526,  529,  451,
      526,  526,  448,  507,  507,  507,  525,  527,  530,  561,
      508,  508,  531,  509,  509,  509,  532,  447,  510,  510,
      511,  511,  511,  438,  512,  526,  533,  528,  420,  534,
      526,  526,  526,  526,  526,  526,  535,  529,  408,  536,
      527,  527,  527,  543,  543,  543,  407,  530,  544,  544,
      544,  531,  545,  545,  545,  532,  551,  551,  551,  401,

      528,  528,  528,  351,  311,  533,  549,  310,  534,  309,
      529,  529,  529,  546,  547,  535,  308,  548,  536,  307,
      530,  530,  530,  306,  531,  531,  531,  305,  532,  532,
      532,  538,  546,  547,  538,  538,  548,  303,  533,  533,
      533,  534,  534,  534,  553,  553,  553,  562,  535,  535,
      535,  536,  536,  536,  555,  555,  555,  546,  547,  546,
      547,  548,  560,  548,  538,  538,  538,  538,  538,  538,
      549,  549,  549,  549,  549,  549,  549,  549,  557,  557,
      557,  560,  294,  563,  569,  291,  562,  564,  616,  616,
      565,  829,  566,  288,  567,  703,  703,  568,  745,  287,

      570,  896,  283,  571,  254,  591,  560,  572,  560,  745,
      573,  241,  896,  574,  194,  193,  575,  192,  593,  562,
      562,  562,  563,  569,  191,  162,  564,  829,  161,  565,
      591,  566,  591,  567,  160,  159,  568,  745,  158,  570,
      896,  157,  571,  593,  616,  593,  572,  156,  593,  573,
      154,  703,  574,  576,  829,  575,  569,  563,  577,  564,
      564,  564,  565,  565,  566,  566,  566,  567,  567,  568,
      568,  568,  570,  570,  570,  571,  571,  571,  578,  572,
      572,  572,  573,  573,  573,  574,  574,  574,  575,  575,
      575,  592,  576,  149,  579,  580,  595,  577,  636,  636,

      636,  637,  637,  637,  638,  638,  638,  148,  130,  580,
      580,  639,  639,  639,  581,  129,  592,  578,  592,  125,
      594,  595,  592,  595,  123,  576,  576,  576,  581,  581,
      577,  577,  577,  579,  580,  640,  640,  640,  594,  580,
      580,  580,  580,  580,  580,  594,  596,  594,  122,  602,
      578,  578,  578,  581,  597,  598,  121,  115,  581,  581,
      581,  581,  581,  581,  599,  110,  579,  579,  579,  598,
      600,  596,  597,  596,  602,  601,  602,  596,  602,  597,
      598,  597,  598,  604,  599,  609,  605,  600,  607,  599,
      104,  599,  601,  606,  607,  600,   76,  600,  608,  604,

      601,   72,  601,   68,  610,  617,   62,   59,  604,  609,
      604,  605,  611,  605,   58,  605,  612,  613,  606,  607,
      606,  607,  610,  608,  617,  608,   27,  618,  606,  610,
      611,  610,  612,  930,  609,  620,  609,  611,   21,  611,
      619,  612,  613,  612,  613,  618,  625,  626,  613,  617,
      627,  617,  618,  620,  618,  628,  619,   19,  629,   18,
      620,  630,  620,    3,  631,  619,    2,  619,  632,  930,
        0,  625,  626,  625,  626,  633,    0,  626,  635,  635,
      641,  641,  641,  642,  642,  642,  645,    0,    0,  627,
      650,  650,  650,    0,  628,    0,  930,  629,    0,    0,

      630,    0,    0,  631,  646,    0,  644,  632,  635,  635,
      635,  635,  635,  635,  633,    0,    0,  647,    0,  685,
      644,  644,  627,  627,  627,  645,    0,  628,  628,  628,
      629,  629,  629,  630,  630,  630,  631,  631,  631,    0,
      632,  632,  632,  646,  685,  644,  685,  633,  633,  633,
      644,  644,  644,  644,  644,  644,  647,    0,  645,  645,
      645,    0,  649,  649,  651,  651,  651,  652,  652,  652,
      654,  654,  654,  655,  655,  655,  646,  646,  646,  656,
      656,  656,  657,  657,  657,  658,  658,  658,    0,  647,
      647,  647,  649,  649,  649,  649,  649,  649,  653,  653,

      653,  653,  653,  653,  653,  653,  653,  653,  653,  653,
      653,  653,  653,  653,  653,  653,  653,  653,  653,  653,
      653,  653,  653,  653,  653,  653,  653,  653,  653,  653,
      653,  653,  653,  653,  653,  653,  653,  653,  653,  653,
      653,  653,  653,  653,  653,  653,  653,  653,  653,  653,
      653,  653,  653,  653,  653,  653,  653,  653,  653,  653,
      653,  653,  653,  653,  653,  653,  653,  653,  653,  653,
      653,  653,  659,  659,  659,  653,  653,  653,  653,  653,
      653,  653,  653,  660,  660,  660,  662,  663,    0,  662,
      662,  664,    0,    0,  665,    0,    0,  666,    0,    0,

      667,    0,  686,  668,    0,    0,  669,  682,    0,  670,
      683,    0,  671,  684,    0,  672,  718,  718,  718,  662,
      662,  662,  662,  662,  662,  682,  663,  686,  683,  686,
      664,  688,  682,  665,  682,  683,  666,  683,  684,  667,
      684,    0,  668,  684,    0,  669,    0,    0,  670,    0,
        0,  671,    0,    0,  672,    0,  688,    0,  688,  663,
      663,  663,  688,  664,  664,  664,  665,  665,  665,  666,
      666,  666,  667,  667,  667,  668,  668,  668,  669,  669,
      669,  670,  670,  670,  671,  671,  671,  672,  672,  672,
      673,    0,    0,  687,  690,  691,  719,  719,  719,    0,

      692,  674,  689,    0,  673,  673,    0,  694,  720,  720,
      720,    0,  690,  691,    0,  674,  674,  687,    0,  690,
      691,  690,  691,    0,    0,  692,  689,  692,  692,  673,
      698,  694,  695,    0,  673,  673,  673,  673,  673,  673,
      674,  693,  687,  699,  687,  674,  674,  674,  674,  674,
      674,  689,  705,  689,  698,  693,  694,  695,  694,  695,
      696,  700,  713,  707,  701,  714,  693,  699,  693,  715,
      706,  705,    0,    0,  696,  700,  728,  728,  728,  698,
      712,  698,  707,  717,  717,  696,  700,  696,  700,  701,
        0,  701,  699,  701,  699,  706,  705,  706,  705,  712,

        0,  713,  706,    0,  714,  721,    0,  707,  715,  707,
      730,  730,  730,  717,  717,  717,  717,  717,  717,  721,
      721,  732,  732,  732,  712,  726,  712,  723,  723,    0,
        0,  722,    0,  727,  713,  713,  713,  714,  714,  714,
        0,  715,  715,  715,  721,  722,  722,    0,    0,  721,
      721,  721,  721,  721,  721,  724,  724,  723,  723,  723,
      723,  723,  723,    0,  726,  734,  734,  734,    0,    0,
      722,    0,  727,    0,    0,  722,  722,  722,  722,  722,
      722,  736,  736,  736,  741,  724,  724,  724,  724,  724,
      724,  737,  737,  737,  738,  738,  738,  742,    0,  758,

      726,  726,  726,  726,  726,  726,  726,  726,  727,  727,
      727,  727,  727,  727,  727,  727,  740,  750,    0,  740,
      740,  743,    0,  741,  758,    0,  758,    0,  744,    0,
        0,  751,  785,  785,  785,  752,  742,    0,  756,    0,
        0,  750,  744,  744,  787,  787,  787,    0,    0,  740,
      740,  740,  740,  740,  740,  751,  741,  741,  741,  752,
      743,  757,  756,  754,    0,    0,  750,  744,  750,  742,
      742,  742,  744,  744,  744,  744,  744,  744,  759,    0,
      751,  754,  751,    0,  752,  757,  752,  756,  754,  756,
      754,  761,  762,  743,  743,  743,    0,  761,    0,  769,

      765,  766,    0,  759,    0,  759,  776,  776,    0,  759,
      757,    0,  757,    0,    0,  766,  782,  762,  769,  762,
      777,  777,  761,  762,  761,  765,  766,  765,  766,  783,
        0,  765,  778,  780,  780,  782,  776,  776,  776,  776,
      776,  776,    0,  769,  779,  769,  778,  778,  783,    0,
      777,  777,  777,  777,  777,  777,    0,  876,  779,  779,
      782,    0,  782,  780,  780,  780,  780,  780,  780,  781,
      781,  778,    0,  783,    0,  783,  778,  778,  778,  778,
      778,  778,  876,  779,  876,    0,  784,    0,  779,  779,
      779,  779,  779,  779,  789,  789,  789,    0,    0,  781,

      781,  781,  781,  781,  781,  784,  791,  791,  791,    0,
        0,  784,  793,  793,  793,  794,  794,  794,  795,  795,
      795,  796,  796,  796,  797,  797,  797,  798,  798,  798,
      784,    0,  784,  799,  799,  799,  800,  811,  784,  800,
      800,    0,  801,  802,  808,  801,  801,  834,  834,  834,
        0,  811,  835,  835,  835,    0,    0,  802,  802,  836,
      836,  836,  811,    0,  811,  837,  837,  837,  808,  800,
      800,  800,  800,  800,  800,  801,  801,  801,  801,  801,
      801,  812,  802,    0,  813,  814,    0,  802,  802,  802,
      802,  802,  802,  808,    0,  808,  815,  816,  813,  812,

      826,  826,  831,  814,    0,    0,  812,    0,  812,  813,
      814,  813,  814,  816,  815,  827,  827,  838,  838,  838,
        0,  815,  816,  815,  816,  828,  830,  830,    0,    0,
      826,  826,  826,  826,  826,  826,  839,  839,  839,  828,
      828,  831,  840,  840,  840,  827,  827,  827,  827,  827,
      827,  832,  841,  841,  841,    0,  830,  830,  830,  830,
      830,  830,  844,    0,  828,  844,  844,  832,    0,  828,
      828,  828,  828,  828,  828,  833,  833,  831,  831,  831,
      831,  831,  831,  831,  831,  842,  842,  842,  843,  843,
      843,  833,  832,    0,  832,  844,  844,  844,  844,  844,

      844,  851,    0,  848,    0,  833,  833,  833,  833,  833,
      833,  845,  846,    0,  845,  845,  833,    0,  833,  869,
      869,  869,  870,  870,  870,  851,  846,  846,  848,    0,
      848,  849,  871,  871,  871,  848,    0,  850,  849,    0,
        0,    0,    0,    0,  845,  845,  845,  845,  845,  845,
      851,  846,  851,  853,  863,  863,  846,  846,  846,  846,
      846,  846,  850,  849,  850,  849,  852,  865,  850,    0,
        0,  853,    0,  852,    0,    0,  867,    0,  853,    0,
      853,  865,  865,  875,  863,  863,  863,  863,  863,  863,
      866,  866,  867,  872,    0,    0,  872,  872,  852,    0,

      852,  875,  868,  868,    0,    0,  865,    0,  875,    0,
      875,  865,  865,  865,  865,  865,  865,  867,  868,  867,
      866,  866,  866,  866,  866,  866,  872,  872,  872,  872,
      872,  872,  868,  868,  868,  868,  868,  868,  874,  877,
      879,    0,    0,  868,  880,  868,  897,    0,    0,    0,
        0,  917,  874,  874,    0,    0,    0,  877,  890,  890,
      891,    0,    0,    0,  877,  879,  877,  879,    0,  880,
      897,  880,  917,    0,  891,  891,  917,  874,  917,    0,
      892,  892,  874,  874,  874,  874,  874,  874,  890,  890,
      890,  890,  890,  890,    0,  897,    0,  897,  898,  891,

      893,  893,    0,  933,  891,  891,  891,  891,  891,  891,
      892,  892,  892,  892,  892,  892,  893,    0,    0,    0,
      894,  894,  933,  898,    0,  898,    0,  898,    0,    0,
      893,  893,  893,  893,  893,  893,  894,    0,  899,  900,
        0,  893,  895,  893,    0,  895,  895,  933,    0,  933,
      894,  894,  894,  894,  894,  894,    0,    0,  935,  936,
        0,  894,  899,  894,  900,    0,  900,  911,  900,  910,
      910,    0,  935,  936,    0,  895,  895,  895,  895,  895,
      895,  911,  911,  935,  936,  935,  936,  899,    0,  899,
      912,  912,    0,  915,    0,    0,  915,  915,    0,  910,

      910,  910,  910,  910,  910,    0,  911,    0,    0,    0,
        0,  911,  911,  911,  911,  911,  911,  913,  913,  919,
      912,  912,  912,  912,  912,  912,  915,  915,  915,  915,
      915,  915,  949,  913,  931,    0,    0,  914,  914,  950,
      919,    0,    0,    0,  919,    0,  919,  913,  913,  913,
      913,  913,  913,  914,  929,  929,    0,  949,  913,  949,
      913,  932,  932,    0,  950,    0,  950,  914,  914,  914,
      914,  914,  914,  931,    0,    0,    0,  932,  914,  969,
      914,    0,    0,    0,  929,  929,  929,  929,  929,  929,
        0,  932,  932,  932,  932,  932,  932,  934,  969,    0,

      934,  934,  932,    0,  932,    0,  947,  947,    0,  931,
      931,  931,  931,  931,  931,  931,  931,    0,    0,    0,
        0,    0,  947,  969,    0,  969,  958,  958,    0,    0,
      934,  934,  934,  934,  934,  934,  947,  947,  947,  947,
      947,  947,  958,    0,    0,    0,    0,  947,    0,  947,
      965,  965,    0,    0,    0,    0,  958,  958,  958,  958,
      958,  958,    0,    0,    0,    0,  965,  958,    0,  958,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      965,  965,  965,  965,  965,  965,    0,    0,    0,    0,
        0,  965,    0,  965,  992,  992,  993,  993,  993,  993,

      994,  994,  994,  994,  995,  995,  995,  995,  995,  996,
      996,  996,  996,  996,  997,  997,  997,  997,  997,  998,
      998,  998,  998,  998,  999,  999,  999,    0,  999, 1000,
     1000, 1000, 1000, 1000, 1001, 1001, 1001, 1001, 1002, 1002,
     1002, 1002, 1002, 1003, 1003, 1003, 1003, 1004, 1004, 1004,
     1004, 1004, 1005, 1005, 1005,    0, 1005, 1006, 1006, 1006,
        0, 1006, 1007, 1007, 1007,    0, 1007, 1008, 1008, 1008,
        0, 1008, 1009, 1009, 1009,    0, 1009, 1010, 1010, 1010,
        0, 1010, 1011, 1011, 1011,    0, 1011, 1012, 1012, 1012,
     1012,  991,  991,  991,  991,  991,  991,  991,  991,  991,

      991,  991,  991,  991,  991,  991,  991,  991,  991,  991,
      991,  991,  991,  991,  991,  991,  991,  991,  991,  991,
      991,  991,  991,  991,  991,  991,  991,  991,  991,  991,
      991,  991,  991,  991,  991,  991,  991,  991,  991,  991,
      991,  991,  991,  991,  991,  991,  991,  991,  991,  991,
      991,  991,  991,  991,  991,  991,  991,  991,  991,  991,
      991,  991,  991,  991,  991,  991,  991,  991,  991,  991,
      991,  991,  991,  991,  991,  991,  991,  991,  991,  991,
      991
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[142] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 
    0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 
    0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int pmatch_flex_debug;
int pmatch_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *pmatchtext;
#line 1 "pmatch_lex.ll"
#line 4 "pmatch_lex.ll"
// Copyright (c) 2016 University of Helsinki
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3 of the License, or (at your option) any later version.
// See the file COPYING included with this distribution for more
// information.

#include <string.h>

#include "HfstTransducer.h"
#include "HfstInputStream.h"
#include "HfstXeroxRules.h"
#include "pmatch_utils.h"
#include "pmatch_parse.hh"

#undef YY_INPUT
#define YY_INPUT(buf, retval, maxlen)   (retval = hfst::pmatch::getinput(buf, maxlen))

extern int pmatcherror(const char *text);

#undef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) pmatcherror(msg);

/* c.f. Unicode Standard 5.1 D92 Table 3-7 */
/* non US-ASCII */
/* any UTF-8 */
/* Escaped */
/* any ASCII */
/* special meaning in pmatch */
/* non-restricted ASCII */
/* token character */
#line 1854 "pmatch_lex.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int pmatchlex_destroy (void );

int pmatchget_debug (void );

void pmatchset_debug (int debug_flag  );

YY_EXTRA_TYPE pmatchget_extra (void );

void pmatchset_extra (YY_EXTRA_TYPE user_defined  );

FILE *pmatchget_in (void );

void pmatchset_in  (FILE * _in_str  );

FILE *pmatchget_out (void );

void pmatchset_out  (FILE * _out_str  );

yy_size_t pmatchget_leng (void );

char *pmatchget_text (void );

int pmatchget_lineno (void );

void pmatchset_lineno (int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int pmatchwrap (void );
#else
extern int pmatchwrap (void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( pmatchtext, pmatchleng, 1, pmatchout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( pmatchin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( pmatchin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, pmatchin))==0 && ferror(pmatchin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(pmatchin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int pmatchlex (void);

#define YY_DECL int pmatchlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after pmatchtext and pmatchleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( pmatchleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(pmatchtext[pmatchleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! pmatchin )
			pmatchin = stdin;

		if ( ! pmatchout )
			pmatchout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			pmatchensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				pmatch_create_buffer(pmatchin,YY_BUF_SIZE );
		}

		pmatch_load_buffer_state( );
		}

	{
#line 67 "pmatch_lex.ll"


#line 2076 "pmatch_lex.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of pmatchtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 992 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 991 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			yy_size_t yyl;
			for ( yyl = 0; yyl < pmatchleng; ++yyl )
				if ( pmatchtext[yyl] == '\n' )
					   
    pmatchlineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 69 "pmatch_lex.ll"
{ return DEFINE; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 70 "pmatch_lex.ll"
{ return DEFINE; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 71 "pmatch_lex.ll"
{ return REGEX; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 72 "pmatch_lex.ll"
{ return SET_VARIABLE; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 73 "pmatch_lex.ll"
{ return DEFINED_LIST; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 74 "pmatch_lex.ll"
{ return LIT_LEFT; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 75 "pmatch_lex.ll"
{ return INS_LEFT; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 76 "pmatch_lex.ll"
{ return ENDTAG_LEFT; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 77 "pmatch_lex.ll"
{ return CAPTURE_LEFT; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 78 "pmatch_lex.ll"
{ return CAP_LEFT; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 79 "pmatch_lex.ll"
{ return OPTCAP_LEFT; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 80 "pmatch_lex.ll"
{ return TOLOWER_LEFT; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 81 "pmatch_lex.ll"
{ return TOUPPER_LEFT; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 82 "pmatch_lex.ll"
{ return OPT_TOUPPER_LEFT; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 83 "pmatch_lex.ll"
{ return OPT_TOLOWER_LEFT; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 84 "pmatch_lex.ll"
{ return ANY_CASE_LEFT; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 85 "pmatch_lex.ll"
{ return EXPLODE_LEFT; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 86 "pmatch_lex.ll"
{ return IMPLODE_LEFT; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 87 "pmatch_lex.ll"
{ return LC_LEFT; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 88 "pmatch_lex.ll"
{ return RC_LEFT; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 89 "pmatch_lex.ll"
{ return NLC_LEFT; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 90 "pmatch_lex.ll"
{ return NRC_LEFT; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 91 "pmatch_lex.ll"
{ return OR_LEFT; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 92 "pmatch_lex.ll"
{ return AND_LEFT; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 93 "pmatch_lex.ll"
{ return TAG_LEFT; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 94 "pmatch_lex.ll"
{ return LST_LEFT; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 95 "pmatch_lex.ll"
{ return EXC_LEFT; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 96 "pmatch_lex.ll"
{ return LIKE_LEFT; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 97 "pmatch_lex.ll"
{ return UNLIKE_LEFT; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 98 "pmatch_lex.ll"
{ return INTERPOLATE_LEFT; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 99 "pmatch_lex.ll"
{ return SIGMA_LEFT; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 100 "pmatch_lex.ll"
{ return COUNTER_LEFT; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 101 "pmatch_lex.ll"
{ return DEFINE_LEFT; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 102 "pmatch_lex.ll"
{ return DEFINS; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 104 "pmatch_lex.ll"
{ return ALPHA; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 105 "pmatch_lex.ll"
{ return UPPERALPHA; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 106 "pmatch_lex.ll"
{ return LOWERALPHA; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 107 "pmatch_lex.ll"
{ return NUM; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 108 "pmatch_lex.ll"
{ return PUNCT; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 109 "pmatch_lex.ll"
{ return WHITESPACE; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 111 "pmatch_lex.ll"
{
    pmatchlval.label = strcpy((char *) malloc(strlen("count-patterns") + 1), "count-patterns");
    return VARIABLE_NAME;
}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 115 "pmatch_lex.ll"
{
    pmatchlval.label = strcpy((char *) malloc(strlen("delete-patterns") + 1), "delete-patterns");
    return VARIABLE_NAME;
}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 119 "pmatch_lex.ll"
{
    pmatchlval.label = strcpy((char *) malloc(strlen("extract-patterns") + 1), "extract-patterns");
    return VARIABLE_NAME;
}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 123 "pmatch_lex.ll"
{
    pmatchlval.label = strcpy((char *) malloc(strlen("locate-patterns") + 1), "locate-patterns");
    return VARIABLE_NAME;
}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 127 "pmatch_lex.ll"
{
    pmatchlval.label = strcpy((char *) malloc(strlen("mark-patterns") + 1), "mark-patterns");
    return VARIABLE_NAME;
}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 131 "pmatch_lex.ll"
{
    pmatchlval.label = strcpy((char *) malloc(strlen("need-separators") + 1), "need-separators");
    return VARIABLE_NAME;
}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 135 "pmatch_lex.ll"
{
    pmatchlval.label = strcpy((char *) malloc(strlen("max-context_length") + 1), "max-context-length");
    return VARIABLE_NAME;
}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 139 "pmatch_lex.ll"
{
    pmatchlval.label = strcpy((char *) malloc(strlen("max-recursion") + 1), "max-recursion");
    return VARIABLE_NAME;
}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 144 "pmatch_lex.ll"
{
    pmatchlval.label = strcpy((char *) malloc(strlen("vector-similarity-projection-factor") + 1), "vector-similarity-projection-factor");
    return VARIABLE_NAME;
}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 149 "pmatch_lex.ll"
{ return COMPLEMENT; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 150 "pmatch_lex.ll"
{ return TERM_COMPLEMENT; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 151 "pmatch_lex.ll"
{ return INTERSECTION; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 152 "pmatch_lex.ll"
{ return MINUS; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 154 "pmatch_lex.ll"
{ return CONTAINMENT_ONCE; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 155 "pmatch_lex.ll"
{ return CONTAINMENT_OPT; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 156 "pmatch_lex.ll"
{ return CONTAINMENT; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 158 "pmatch_lex.ll"
{ return PLUS; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 159 "pmatch_lex.ll"
{ return STAR; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 161 "pmatch_lex.ll"
{ return IGNORE_INTERNALLY; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 162 "pmatch_lex.ll"
{ return IGNORING; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 164 "pmatch_lex.ll"
{ return UNION; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 166 "pmatch_lex.ll"
{ return EPSILON_TOKEN; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 167 "pmatch_lex.ll"
{ return EPSILON_TOKEN; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 168 "pmatch_lex.ll"
{ return EPSILON_TOKEN; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 169 "pmatch_lex.ll"
{ return ANY_TOKEN; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 170 "pmatch_lex.ll"
{ return BOUNDARY_MARKER; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 172 "pmatch_lex.ll"
{ return SHUFFLE; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 173 "pmatch_lex.ll"
{ return BEFORE; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 174 "pmatch_lex.ll"
{ return AFTER; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 176 "pmatch_lex.ll"
{ return COMPOSITION; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 177 "pmatch_lex.ll"
{ return LENIENT_COMPOSITION; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 178 "pmatch_lex.ll"
{ return MERGE_RIGHT_ARROW; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 179 "pmatch_lex.ll"
{ return MERGE_LEFT_ARROW; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 180 "pmatch_lex.ll"
{ return CROSS_PRODUCT; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 181 "pmatch_lex.ll"
{ return UPPER_PRIORITY_UNION; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 182 "pmatch_lex.ll"
{ return LOWER_PRIORITY_UNION; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 183 "pmatch_lex.ll"
{ return UPPER_MINUS; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 184 "pmatch_lex.ll"
{ return LOWER_MINUS; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 185 "pmatch_lex.ll"
{ return SUBSTITUTE_LEFT; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 187 "pmatch_lex.ll"
{ return LEFT_RESTRICTION; } /* Not implemented */
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 188 "pmatch_lex.ll"
{ return LEFT_RIGHT_ARROW; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 189 "pmatch_lex.ll"
{ return LEFT_ARROW; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 190 "pmatch_lex.ll"
{ return RIGHT_ARROW; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 192 "pmatch_lex.ll"
{ return REPLACE_RIGHT; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 193 "pmatch_lex.ll"
{ return OPTIONAL_REPLACE_RIGHT; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 194 "pmatch_lex.ll"
{ return REPLACE_LEFT; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 195 "pmatch_lex.ll"
{ return OPTIONAL_REPLACE_LEFT; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 196 "pmatch_lex.ll"
{ return REPLACE_LEFT_RIGHT; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 197 "pmatch_lex.ll"
{ return OPTIONAL_REPLACE_LEFT_RIGHT; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 198 "pmatch_lex.ll"
{ return LTR_LONGEST_MATCH; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 199 "pmatch_lex.ll"
{ return LTR_SHORTEST_MATCH; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 200 "pmatch_lex.ll"
{ return RTL_LONGEST_MATCH; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 201 "pmatch_lex.ll"
{ return RTL_SHORTEST_MATCH; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 203 "pmatch_lex.ll"
{ return REPLACE_CONTEXT_UU; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 204 "pmatch_lex.ll"
{ return REPLACE_CONTEXT_LU; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 205 "pmatch_lex.ll"
{ return REPLACE_CONTEXT_UL; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 206 "pmatch_lex.ll"
{ return REPLACE_CONTEXT_LL; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 207 "pmatch_lex.ll"
{ return CENTER_MARKER; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 208 "pmatch_lex.ll"
{ return MARKUP_MARKER; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 210 "pmatch_lex.ll"
{ return LEFT_QUOTIENT; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 212 "pmatch_lex.ll"
{
    pmatchlval.values = hfst::pmatch::get_n_to_k(pmatchtext);
    return CATENATE_N_TO_K;
}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 217 "pmatch_lex.ll"
{
    pmatchlval.values = hfst::pmatch::get_n_to_k(pmatchtext);
    return CATENATE_N_TO_K;
}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 222 "pmatch_lex.ll"
{
    pmatchlval.value = strtol(pmatchtext + 2, 0, 10);
    return CATENATE_N_PLUS;
}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 227 "pmatch_lex.ll"
{
    pmatchlval.value = strtol(pmatchtext + 2, 0, 10);
    return CATENATE_N_MINUS;
}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 232 "pmatch_lex.ll"
{
    pmatchlval.value = strtol(pmatchtext + 1, 0, 10);
    return CATENATE_N;
}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 237 "pmatch_lex.ll"
{ return REVERSE; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 238 "pmatch_lex.ll"
{ return INVERT; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 239 "pmatch_lex.ll"
{ return UPPER_PROJECT; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 240 "pmatch_lex.ll"
{ return LOWER_PROJECT; }
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 242 "pmatch_lex.ll"
{
    pmatchlval.label = hfst::pmatch::get_escaped_delimited(pmatchtext, '"');
    return READ_BIN;
}
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 247 "pmatch_lex.ll"
{
    pmatchlval.label = hfst::pmatch::get_escaped_delimited(pmatchtext, '"');
    return READ_TEXT;
}
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
#line 252 "pmatch_lex.ll"
{
    pmatchlval.label = hfst::pmatch::get_escaped_delimited(pmatchtext, '"');
    return READ_SPACED;
}
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 257 "pmatch_lex.ll"
{
    pmatchlval.label = hfst::pmatch::get_escaped_delimited(pmatchtext, '"');
    return READ_PROLOG;
}
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 262 "pmatch_lex.ll"
{
    pmatchlval.label = hfst::pmatch::get_escaped_delimited(pmatchtext, '"');
    return READ_LEXC;
}
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 267 "pmatch_lex.ll"
{
    pmatchlval.label = hfst::pmatch::get_escaped_delimited(pmatchtext, '"');
    return READ_RE;
}
	YY_BREAK
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 272 "pmatch_lex.ll"
{
    pmatchlval.label = hfst::pmatch::get_escaped_delimited(pmatchtext, '"');
    return READ_VEC;
}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 277 "pmatch_lex.ll"
{
    pmatchlval.pmatchObject = hfst::pmatch::parse_range(pmatchtext);
    return CHARACTER_RANGE;
}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 282 "pmatch_lex.ll"
{
    char * label = (char *) malloc(strlen(pmatchtext));
    strncpy(label, pmatchtext, strlen(pmatchtext));
    label[strlen(pmatchtext) - 1] = '\0';
    pmatchlval.label = hfst::pmatch::strip_percents(label);
    free(label);
    return SYMBOL_WITH_LEFT_PAREN;
}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 291 "pmatch_lex.ll"
{ return LEFT_BRACKET_DOTTED; }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 292 "pmatch_lex.ll"
{ return RIGHT_BRACKET_DOTTED; }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 293 "pmatch_lex.ll"
{ return LEFT_BRACKET; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 294 "pmatch_lex.ll"
{ return RIGHT_BRACKET; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 295 "pmatch_lex.ll"
{ return LEFT_PARENTHESIS; }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 296 "pmatch_lex.ll"
{ return RIGHT_PARENTHESIS; }
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
#line 298 "pmatch_lex.ll"
{ return PAIR_SEPARATOR_SOLE; }
	YY_BREAK
case 126:
*yy_cp = (yy_hold_char); /* undo effects of setting up pmatchtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up pmatchtext again */
YY_RULE_SETUP
#line 299 "pmatch_lex.ll"
{ return PAIR_SEPARATOR_SOLE; }
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
#line 300 "pmatch_lex.ll"
{ return PAIR_SEPARATOR_WO_LEFT; }
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
#line 301 "pmatch_lex.ll"
{ return PAIR_SEPARATOR_WO_RIGHT; }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 302 "pmatch_lex.ll"
{ return PAIR_SEPARATOR; }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 304 "pmatch_lex.ll"
{
    pmatchlval.weight = hfst::pmatch::get_weight(pmatchtext + 2);
    return WEIGHT;
}
	YY_BREAK
case 131:
/* rule 131 can match eol */
YY_RULE_SETUP
#line 309 "pmatch_lex.ll"
{
    pmatchlval.label = hfst::pmatch::get_escaped_delimited(pmatchtext, '{', '}');
    return CURLY_LITERAL;
}
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
#line 314 "pmatch_lex.ll"
{
    pmatchlval.label = hfst::pmatch::parse_quoted(pmatchtext);
    return QUOTED_LITERAL;
}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 319 "pmatch_lex.ll"
{
    pmatchlval.label = hfst::pmatch::strip_percents(pmatchtext);
    return SYMBOL;
}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 324 "pmatch_lex.ll"
{ return COMMACOMMA; }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 325 "pmatch_lex.ll"
{ return COMMA; }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 327 "pmatch_lex.ll"
{
    pmatchlval.weight = hfst::pmatch::get_weight(pmatchtext + 2);
    return END_OF_WEIGHTED_EXPRESSION;
}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 332 "pmatch_lex.ll"
{
    pmatchlval.weight = 0.0;
    return END_OF_WEIGHTED_EXPRESSION;
}
	YY_BREAK
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
#line 337 "pmatch_lex.ll"
{ /* ignorable whitespace */ }
	YY_BREAK
case 139:
*yy_cp = (yy_hold_char); /* undo effects of setting up pmatchtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up pmatchtext again */
YY_RULE_SETUP
#line 339 "pmatch_lex.ll"
{ /* ignore comments */ }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 341 "pmatch_lex.ll"
{
    return LEXER_ERROR;
}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 345 "pmatch_lex.ll"
ECHO;
	YY_BREAK
#line 2957 "pmatch_lex.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed pmatchin at a new source and called
			 * pmatchlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = pmatchin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( pmatchwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * pmatchtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of pmatchlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	yy_size_t number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (yy_size_t) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					pmatchrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			pmatchrestart(pmatchin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((int) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) pmatchrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 992 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 992 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 991);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					pmatchrestart(pmatchin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( pmatchwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve pmatchtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
	if ( YY_CURRENT_BUFFER_LVALUE->yy_at_bol )
		   
    pmatchlineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void pmatchrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        pmatchensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            pmatch_create_buffer(pmatchin,YY_BUF_SIZE );
	}

	pmatch_init_buffer(YY_CURRENT_BUFFER,input_file );
	pmatch_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void pmatch_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		pmatchpop_buffer_state();
	 *		pmatchpush_buffer_state(new_buffer);
     */
	pmatchensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	pmatch_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (pmatchwrap()) processing, but the only time this flag
	 * is looked at is after pmatchwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void pmatch_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	pmatchin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE pmatch_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) pmatchalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in pmatch_create_buffer()" );

	b->yy_buf_size = (yy_size_t)size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) pmatchalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in pmatch_create_buffer()" );

	b->yy_is_our_buffer = 1;

	pmatch_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with pmatch_create_buffer()
 * 
 */
    void pmatch_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		pmatchfree((void *) b->yy_ch_buf  );

	pmatchfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a pmatchrestart() or at EOF.
 */
    static void pmatch_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	pmatch_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then pmatch_init_buffer was _probably_
     * called from pmatchrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void pmatch_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		pmatch_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void pmatchpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	pmatchensure_buffer_stack();

	/* This block is copied from pmatch_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from pmatch_switch_to_buffer. */
	pmatch_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void pmatchpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	pmatch_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		pmatch_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void pmatchensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)pmatchalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in pmatchensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)pmatchrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in pmatchensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE pmatch_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) pmatchalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in pmatch_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	pmatch_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to pmatchlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       pmatch_scan_bytes() instead.
 */
YY_BUFFER_STATE pmatch_scan_string (yyconst char * yystr )
{
    
	return pmatch_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to pmatchlex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE pmatch_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) pmatchalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in pmatch_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = pmatch_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in pmatch_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
			(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up pmatchtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		pmatchtext[pmatchleng] = (yy_hold_char); \
		(yy_c_buf_p) = pmatchtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		pmatchleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int pmatchget_lineno  (void)
{
        
    return pmatchlineno;
}

/** Get the input stream.
 * 
 */
FILE *pmatchget_in  (void)
{
        return pmatchin;
}

/** Get the output stream.
 * 
 */
FILE *pmatchget_out  (void)
{
        return pmatchout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t pmatchget_leng  (void)
{
        return pmatchleng;
}

/** Get the current token.
 * 
 */

char *pmatchget_text  (void)
{
        return pmatchtext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void pmatchset_lineno (int  _line_number )
{
    
    pmatchlineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see pmatch_switch_to_buffer
 */
void pmatchset_in (FILE *  _in_str )
{
        pmatchin = _in_str ;
}

void pmatchset_out (FILE *  _out_str )
{
        pmatchout = _out_str ;
}

int pmatchget_debug  (void)
{
        return pmatch_flex_debug;
}

void pmatchset_debug (int  _bdebug )
{
        pmatch_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from pmatchlex_destroy(), so don't allocate here.
     */

    /* We do not touch pmatchlineno unless the option is enabled. */
    pmatchlineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    pmatchin = stdin;
    pmatchout = stdout;
#else
    pmatchin = (FILE *) 0;
    pmatchout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * pmatchlex_init()
     */
    return 0;
}

/* pmatchlex_destroy is for both reentrant and non-reentrant scanners. */
int pmatchlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		pmatch_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		pmatchpop_buffer_state();
	}

	/* Destroy the stack itself. */
	pmatchfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * pmatchlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *pmatchalloc (yy_size_t  size )
{
			return (void *) malloc( size );
}

void *pmatchrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void pmatchfree (void * ptr )
{
			free( (char *) ptr );	/* see pmatchrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 345 "pmatch_lex.ll"



