# coding: utf-8

"""
    logicmonitor_sdk

    LogicMonitor is a cloud-based, full stack, IT infrastructure monitoring solution that allows you to manage your infrastructure from the cloud. logicmonitor_sdk lets you manage your LogicMonitor account programmatically.

    OpenAPI spec version: 1.0.0
    Contact: sdk@logicmonitor.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class SlaMetric(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'group_name': 'str',
        'data_source_id': 'int',
        'instances': 'str',
        'metric': 'str',
        'data_source_full_name': 'str',
        'threshold': 'str',
        'device_name': 'str',
        'exclusion_sdt_type': 'str'
    }

    attribute_map = {
        'group_name': 'groupName',
        'data_source_id': 'dataSourceId',
        'instances': 'instances',
        'metric': 'metric',
        'data_source_full_name': 'dataSourceFullName',
        'threshold': 'threshold',
        'device_name': 'deviceName',
        'exclusion_sdt_type': 'exclusionSDTType'
    }

    def __init__(self, group_name=None, data_source_id=None, instances=None, metric=None, data_source_full_name=None, threshold=None, device_name=None, exclusion_sdt_type=None):
        """
        SlaMetric - a model defined in Swagger
        """

        self._group_name = None
        self._data_source_id = None
        self._instances = None
        self._metric = None
        self._data_source_full_name = None
        self._threshold = None
        self._device_name = None
        self._exclusion_sdt_type = None
        self.discriminator = None

        if group_name is not None:
          self.group_name = group_name
        self.data_source_id = data_source_id
        if instances is not None:
          self.instances = instances
        if metric is not None:
          self.metric = metric
        if data_source_full_name is not None:
          self.data_source_full_name = data_source_full_name
        if threshold is not None:
          self.threshold = threshold
        if device_name is not None:
          self.device_name = device_name
        if exclusion_sdt_type is not None:
          self.exclusion_sdt_type = exclusion_sdt_type

    @property
    def group_name(self):
        """
        Gets the group_name of this SlaMetric.

        :return: The group_name of this SlaMetric.
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """
        Sets the group_name of this SlaMetric.

        :param group_name: The group_name of this SlaMetric.
        :type: str
        """

        self._group_name = group_name

    @property
    def data_source_id(self):
        """
        Gets the data_source_id of this SlaMetric.

        :return: The data_source_id of this SlaMetric.
        :rtype: int
        """
        return self._data_source_id

    @data_source_id.setter
    def data_source_id(self, data_source_id):
        """
        Sets the data_source_id of this SlaMetric.

        :param data_source_id: The data_source_id of this SlaMetric.
        :type: int
        """
        if data_source_id is None:
            raise ValueError("Invalid value for `data_source_id`, must not be `None`")

        self._data_source_id = data_source_id

    @property
    def instances(self):
        """
        Gets the instances of this SlaMetric.

        :return: The instances of this SlaMetric.
        :rtype: str
        """
        return self._instances

    @instances.setter
    def instances(self, instances):
        """
        Sets the instances of this SlaMetric.

        :param instances: The instances of this SlaMetric.
        :type: str
        """

        self._instances = instances

    @property
    def metric(self):
        """
        Gets the metric of this SlaMetric.

        :return: The metric of this SlaMetric.
        :rtype: str
        """
        return self._metric

    @metric.setter
    def metric(self, metric):
        """
        Sets the metric of this SlaMetric.

        :param metric: The metric of this SlaMetric.
        :type: str
        """

        self._metric = metric

    @property
    def data_source_full_name(self):
        """
        Gets the data_source_full_name of this SlaMetric.

        :return: The data_source_full_name of this SlaMetric.
        :rtype: str
        """
        return self._data_source_full_name

    @data_source_full_name.setter
    def data_source_full_name(self, data_source_full_name):
        """
        Sets the data_source_full_name of this SlaMetric.

        :param data_source_full_name: The data_source_full_name of this SlaMetric.
        :type: str
        """

        self._data_source_full_name = data_source_full_name

    @property
    def threshold(self):
        """
        Gets the threshold of this SlaMetric.

        :return: The threshold of this SlaMetric.
        :rtype: str
        """
        return self._threshold

    @threshold.setter
    def threshold(self, threshold):
        """
        Sets the threshold of this SlaMetric.

        :param threshold: The threshold of this SlaMetric.
        :type: str
        """

        self._threshold = threshold

    @property
    def device_name(self):
        """
        Gets the device_name of this SlaMetric.

        :return: The device_name of this SlaMetric.
        :rtype: str
        """
        return self._device_name

    @device_name.setter
    def device_name(self, device_name):
        """
        Sets the device_name of this SlaMetric.

        :param device_name: The device_name of this SlaMetric.
        :type: str
        """

        self._device_name = device_name

    @property
    def exclusion_sdt_type(self):
        """
        Gets the exclusion_sdt_type of this SlaMetric.

        :return: The exclusion_sdt_type of this SlaMetric.
        :rtype: str
        """
        return self._exclusion_sdt_type

    @exclusion_sdt_type.setter
    def exclusion_sdt_type(self, exclusion_sdt_type):
        """
        Sets the exclusion_sdt_type of this SlaMetric.

        :param exclusion_sdt_type: The exclusion_sdt_type of this SlaMetric.
        :type: str
        """

        self._exclusion_sdt_type = exclusion_sdt_type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SlaMetric):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
