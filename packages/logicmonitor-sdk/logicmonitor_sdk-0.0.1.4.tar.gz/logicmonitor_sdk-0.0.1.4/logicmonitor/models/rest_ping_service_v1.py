# coding: utf-8

"""
    logicmonitor_sdk

    LogicMonitor is a cloud-based, full stack, IT infrastructure monitoring solution that allows you to manage your infrastructure from the cloud. logicmonitor_sdk lets you manage your LogicMonitor account programmatically.

    OpenAPI spec version: 1.0.0
    Contact: sdk@logicmonitor.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class RestPingServiceV1(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'alert_status': 'str',
        'test_location': 'str',
        'overall_alert_level': 'str',
        'polling_interval': 'int',
        'description': 'str',
        'disable_alerting': 'bool',
        'timeout_in_ms_pkts_not_receive': 'int',
        'type': 'str',
        'stop_monitoring_by_folder': 'bool',
        'service_status': 'str',
        'host': 'str',
        'id': 'int',
        'alert_status_priority': 'int',
        'alert_disable_status': 'str',
        'service_folder_id': 'int',
        'service_properties': 'list[NameAndValue]',
        'percent_pkts_not_receive_in_time': 'int',
        'stop_monitoring': 'bool',
        'user_permission': 'str',
        'count': 'int',
        'individual_sm_alert_enable': 'bool',
        'checkpoints': 'list[RestServiceCheckpoint]',
        'sdt_status': 'str',
        'transition': 'int',
        'global_sm_alert_cond': 'int',
        'is_internal': 'bool',
        'collectors': 'list[RestCollector]',
        'name': 'str',
        'use_default_location_setting': 'bool',
        'use_default_alert_setting': 'bool',
        'individual_alert_level': 'str'
    }

    attribute_map = {
        'alert_status': 'alertStatus',
        'test_location': 'testLocation',
        'overall_alert_level': 'overallAlertLevel',
        'polling_interval': 'pollingInterval',
        'description': 'description',
        'disable_alerting': 'disableAlerting',
        'timeout_in_ms_pkts_not_receive': 'timeoutInMSPktsNotReceive',
        'type': 'type',
        'stop_monitoring_by_folder': 'stopMonitoringByFolder',
        'service_status': 'serviceStatus',
        'host': 'host',
        'id': 'id',
        'alert_status_priority': 'alertStatusPriority',
        'alert_disable_status': 'alertDisableStatus',
        'service_folder_id': 'serviceFolderId',
        'service_properties': 'serviceProperties',
        'percent_pkts_not_receive_in_time': 'percentPktsNotReceiveInTime',
        'stop_monitoring': 'stopMonitoring',
        'user_permission': 'userPermission',
        'count': 'count',
        'individual_sm_alert_enable': 'individualSmAlertEnable',
        'checkpoints': 'checkpoints',
        'sdt_status': 'sdtStatus',
        'transition': 'transition',
        'global_sm_alert_cond': 'globalSmAlertCond',
        'is_internal': 'isInternal',
        'collectors': 'collectors',
        'name': 'name',
        'use_default_location_setting': 'useDefaultLocationSetting',
        'use_default_alert_setting': 'useDefaultAlertSetting',
        'individual_alert_level': 'individualAlertLevel'
    }

    def __init__(self, alert_status=None, test_location=None, overall_alert_level=None, polling_interval=None, description=None, disable_alerting=None, timeout_in_ms_pkts_not_receive=None, type=None, stop_monitoring_by_folder=None, service_status=None, host=None, id=None, alert_status_priority=None, alert_disable_status=None, service_folder_id=None, service_properties=None, percent_pkts_not_receive_in_time=None, stop_monitoring=None, user_permission=None, count=None, individual_sm_alert_enable=None, checkpoints=None, sdt_status=None, transition=None, global_sm_alert_cond=None, is_internal=None, collectors=None, name=None, use_default_location_setting=None, use_default_alert_setting=None, individual_alert_level=None):
        """
        RestPingServiceV1 - a model defined in Swagger
        """

        self._alert_status = None
        self._test_location = None
        self._overall_alert_level = None
        self._polling_interval = None
        self._description = None
        self._disable_alerting = None
        self._timeout_in_ms_pkts_not_receive = None
        self._type = None
        self._stop_monitoring_by_folder = None
        self._service_status = None
        self._host = None
        self._id = None
        self._alert_status_priority = None
        self._alert_disable_status = None
        self._service_folder_id = None
        self._service_properties = None
        self._percent_pkts_not_receive_in_time = None
        self._stop_monitoring = None
        self._user_permission = None
        self._count = None
        self._individual_sm_alert_enable = None
        self._checkpoints = None
        self._sdt_status = None
        self._transition = None
        self._global_sm_alert_cond = None
        self._is_internal = None
        self._collectors = None
        self._name = None
        self._use_default_location_setting = None
        self._use_default_alert_setting = None
        self._individual_alert_level = None
        self.discriminator = None

        if alert_status is not None:
          self.alert_status = alert_status
        if test_location is not None:
          self.test_location = test_location
        if overall_alert_level is not None:
          self.overall_alert_level = overall_alert_level
        if polling_interval is not None:
          self.polling_interval = polling_interval
        if description is not None:
          self.description = description
        if disable_alerting is not None:
          self.disable_alerting = disable_alerting
        if timeout_in_ms_pkts_not_receive is not None:
          self.timeout_in_ms_pkts_not_receive = timeout_in_ms_pkts_not_receive
        self.type = type
        if stop_monitoring_by_folder is not None:
          self.stop_monitoring_by_folder = stop_monitoring_by_folder
        if service_status is not None:
          self.service_status = service_status
        self.host = host
        if id is not None:
          self.id = id
        if alert_status_priority is not None:
          self.alert_status_priority = alert_status_priority
        if alert_disable_status is not None:
          self.alert_disable_status = alert_disable_status
        if service_folder_id is not None:
          self.service_folder_id = service_folder_id
        if service_properties is not None:
          self.service_properties = service_properties
        if percent_pkts_not_receive_in_time is not None:
          self.percent_pkts_not_receive_in_time = percent_pkts_not_receive_in_time
        if stop_monitoring is not None:
          self.stop_monitoring = stop_monitoring
        if user_permission is not None:
          self.user_permission = user_permission
        if count is not None:
          self.count = count
        if individual_sm_alert_enable is not None:
          self.individual_sm_alert_enable = individual_sm_alert_enable
        if checkpoints is not None:
          self.checkpoints = checkpoints
        if sdt_status is not None:
          self.sdt_status = sdt_status
        if transition is not None:
          self.transition = transition
        if global_sm_alert_cond is not None:
          self.global_sm_alert_cond = global_sm_alert_cond
        if is_internal is not None:
          self.is_internal = is_internal
        if collectors is not None:
          self.collectors = collectors
        self.name = name
        if use_default_location_setting is not None:
          self.use_default_location_setting = use_default_location_setting
        if use_default_alert_setting is not None:
          self.use_default_alert_setting = use_default_alert_setting
        if individual_alert_level is not None:
          self.individual_alert_level = individual_alert_level

    @property
    def alert_status(self):
        """
        Gets the alert_status of this RestPingServiceV1.

        :return: The alert_status of this RestPingServiceV1.
        :rtype: str
        """
        return self._alert_status

    @alert_status.setter
    def alert_status(self, alert_status):
        """
        Sets the alert_status of this RestPingServiceV1.

        :param alert_status: The alert_status of this RestPingServiceV1.
        :type: str
        """

        self._alert_status = alert_status

    @property
    def test_location(self):
        """
        Gets the test_location of this RestPingServiceV1.

        :return: The test_location of this RestPingServiceV1.
        :rtype: str
        """
        return self._test_location

    @test_location.setter
    def test_location(self, test_location):
        """
        Sets the test_location of this RestPingServiceV1.

        :param test_location: The test_location of this RestPingServiceV1.
        :type: str
        """

        self._test_location = test_location

    @property
    def overall_alert_level(self):
        """
        Gets the overall_alert_level of this RestPingServiceV1.

        :return: The overall_alert_level of this RestPingServiceV1.
        :rtype: str
        """
        return self._overall_alert_level

    @overall_alert_level.setter
    def overall_alert_level(self, overall_alert_level):
        """
        Sets the overall_alert_level of this RestPingServiceV1.

        :param overall_alert_level: The overall_alert_level of this RestPingServiceV1.
        :type: str
        """

        self._overall_alert_level = overall_alert_level

    @property
    def polling_interval(self):
        """
        Gets the polling_interval of this RestPingServiceV1.

        :return: The polling_interval of this RestPingServiceV1.
        :rtype: int
        """
        return self._polling_interval

    @polling_interval.setter
    def polling_interval(self, polling_interval):
        """
        Sets the polling_interval of this RestPingServiceV1.

        :param polling_interval: The polling_interval of this RestPingServiceV1.
        :type: int
        """

        self._polling_interval = polling_interval

    @property
    def description(self):
        """
        Gets the description of this RestPingServiceV1.

        :return: The description of this RestPingServiceV1.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this RestPingServiceV1.

        :param description: The description of this RestPingServiceV1.
        :type: str
        """

        self._description = description

    @property
    def disable_alerting(self):
        """
        Gets the disable_alerting of this RestPingServiceV1.

        :return: The disable_alerting of this RestPingServiceV1.
        :rtype: bool
        """
        return self._disable_alerting

    @disable_alerting.setter
    def disable_alerting(self, disable_alerting):
        """
        Sets the disable_alerting of this RestPingServiceV1.

        :param disable_alerting: The disable_alerting of this RestPingServiceV1.
        :type: bool
        """

        self._disable_alerting = disable_alerting

    @property
    def timeout_in_ms_pkts_not_receive(self):
        """
        Gets the timeout_in_ms_pkts_not_receive of this RestPingServiceV1.

        :return: The timeout_in_ms_pkts_not_receive of this RestPingServiceV1.
        :rtype: int
        """
        return self._timeout_in_ms_pkts_not_receive

    @timeout_in_ms_pkts_not_receive.setter
    def timeout_in_ms_pkts_not_receive(self, timeout_in_ms_pkts_not_receive):
        """
        Sets the timeout_in_ms_pkts_not_receive of this RestPingServiceV1.

        :param timeout_in_ms_pkts_not_receive: The timeout_in_ms_pkts_not_receive of this RestPingServiceV1.
        :type: int
        """

        self._timeout_in_ms_pkts_not_receive = timeout_in_ms_pkts_not_receive

    @property
    def type(self):
        """
        Gets the type of this RestPingServiceV1.

        :return: The type of this RestPingServiceV1.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this RestPingServiceV1.

        :param type: The type of this RestPingServiceV1.
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def stop_monitoring_by_folder(self):
        """
        Gets the stop_monitoring_by_folder of this RestPingServiceV1.

        :return: The stop_monitoring_by_folder of this RestPingServiceV1.
        :rtype: bool
        """
        return self._stop_monitoring_by_folder

    @stop_monitoring_by_folder.setter
    def stop_monitoring_by_folder(self, stop_monitoring_by_folder):
        """
        Sets the stop_monitoring_by_folder of this RestPingServiceV1.

        :param stop_monitoring_by_folder: The stop_monitoring_by_folder of this RestPingServiceV1.
        :type: bool
        """

        self._stop_monitoring_by_folder = stop_monitoring_by_folder

    @property
    def service_status(self):
        """
        Gets the service_status of this RestPingServiceV1.

        :return: The service_status of this RestPingServiceV1.
        :rtype: str
        """
        return self._service_status

    @service_status.setter
    def service_status(self, service_status):
        """
        Sets the service_status of this RestPingServiceV1.

        :param service_status: The service_status of this RestPingServiceV1.
        :type: str
        """

        self._service_status = service_status

    @property
    def host(self):
        """
        Gets the host of this RestPingServiceV1.

        :return: The host of this RestPingServiceV1.
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """
        Sets the host of this RestPingServiceV1.

        :param host: The host of this RestPingServiceV1.
        :type: str
        """
        if host is None:
            raise ValueError("Invalid value for `host`, must not be `None`")

        self._host = host

    @property
    def id(self):
        """
        Gets the id of this RestPingServiceV1.

        :return: The id of this RestPingServiceV1.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this RestPingServiceV1.

        :param id: The id of this RestPingServiceV1.
        :type: int
        """

        self._id = id

    @property
    def alert_status_priority(self):
        """
        Gets the alert_status_priority of this RestPingServiceV1.

        :return: The alert_status_priority of this RestPingServiceV1.
        :rtype: int
        """
        return self._alert_status_priority

    @alert_status_priority.setter
    def alert_status_priority(self, alert_status_priority):
        """
        Sets the alert_status_priority of this RestPingServiceV1.

        :param alert_status_priority: The alert_status_priority of this RestPingServiceV1.
        :type: int
        """

        self._alert_status_priority = alert_status_priority

    @property
    def alert_disable_status(self):
        """
        Gets the alert_disable_status of this RestPingServiceV1.

        :return: The alert_disable_status of this RestPingServiceV1.
        :rtype: str
        """
        return self._alert_disable_status

    @alert_disable_status.setter
    def alert_disable_status(self, alert_disable_status):
        """
        Sets the alert_disable_status of this RestPingServiceV1.

        :param alert_disable_status: The alert_disable_status of this RestPingServiceV1.
        :type: str
        """

        self._alert_disable_status = alert_disable_status

    @property
    def service_folder_id(self):
        """
        Gets the service_folder_id of this RestPingServiceV1.

        :return: The service_folder_id of this RestPingServiceV1.
        :rtype: int
        """
        return self._service_folder_id

    @service_folder_id.setter
    def service_folder_id(self, service_folder_id):
        """
        Sets the service_folder_id of this RestPingServiceV1.

        :param service_folder_id: The service_folder_id of this RestPingServiceV1.
        :type: int
        """

        self._service_folder_id = service_folder_id

    @property
    def service_properties(self):
        """
        Gets the service_properties of this RestPingServiceV1.

        :return: The service_properties of this RestPingServiceV1.
        :rtype: list[NameAndValue]
        """
        return self._service_properties

    @service_properties.setter
    def service_properties(self, service_properties):
        """
        Sets the service_properties of this RestPingServiceV1.

        :param service_properties: The service_properties of this RestPingServiceV1.
        :type: list[NameAndValue]
        """

        self._service_properties = service_properties

    @property
    def percent_pkts_not_receive_in_time(self):
        """
        Gets the percent_pkts_not_receive_in_time of this RestPingServiceV1.

        :return: The percent_pkts_not_receive_in_time of this RestPingServiceV1.
        :rtype: int
        """
        return self._percent_pkts_not_receive_in_time

    @percent_pkts_not_receive_in_time.setter
    def percent_pkts_not_receive_in_time(self, percent_pkts_not_receive_in_time):
        """
        Sets the percent_pkts_not_receive_in_time of this RestPingServiceV1.

        :param percent_pkts_not_receive_in_time: The percent_pkts_not_receive_in_time of this RestPingServiceV1.
        :type: int
        """

        self._percent_pkts_not_receive_in_time = percent_pkts_not_receive_in_time

    @property
    def stop_monitoring(self):
        """
        Gets the stop_monitoring of this RestPingServiceV1.

        :return: The stop_monitoring of this RestPingServiceV1.
        :rtype: bool
        """
        return self._stop_monitoring

    @stop_monitoring.setter
    def stop_monitoring(self, stop_monitoring):
        """
        Sets the stop_monitoring of this RestPingServiceV1.

        :param stop_monitoring: The stop_monitoring of this RestPingServiceV1.
        :type: bool
        """

        self._stop_monitoring = stop_monitoring

    @property
    def user_permission(self):
        """
        Gets the user_permission of this RestPingServiceV1.

        :return: The user_permission of this RestPingServiceV1.
        :rtype: str
        """
        return self._user_permission

    @user_permission.setter
    def user_permission(self, user_permission):
        """
        Sets the user_permission of this RestPingServiceV1.

        :param user_permission: The user_permission of this RestPingServiceV1.
        :type: str
        """

        self._user_permission = user_permission

    @property
    def count(self):
        """
        Gets the count of this RestPingServiceV1.

        :return: The count of this RestPingServiceV1.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """
        Sets the count of this RestPingServiceV1.

        :param count: The count of this RestPingServiceV1.
        :type: int
        """

        self._count = count

    @property
    def individual_sm_alert_enable(self):
        """
        Gets the individual_sm_alert_enable of this RestPingServiceV1.

        :return: The individual_sm_alert_enable of this RestPingServiceV1.
        :rtype: bool
        """
        return self._individual_sm_alert_enable

    @individual_sm_alert_enable.setter
    def individual_sm_alert_enable(self, individual_sm_alert_enable):
        """
        Sets the individual_sm_alert_enable of this RestPingServiceV1.

        :param individual_sm_alert_enable: The individual_sm_alert_enable of this RestPingServiceV1.
        :type: bool
        """

        self._individual_sm_alert_enable = individual_sm_alert_enable

    @property
    def checkpoints(self):
        """
        Gets the checkpoints of this RestPingServiceV1.

        :return: The checkpoints of this RestPingServiceV1.
        :rtype: list[RestServiceCheckpoint]
        """
        return self._checkpoints

    @checkpoints.setter
    def checkpoints(self, checkpoints):
        """
        Sets the checkpoints of this RestPingServiceV1.

        :param checkpoints: The checkpoints of this RestPingServiceV1.
        :type: list[RestServiceCheckpoint]
        """

        self._checkpoints = checkpoints

    @property
    def sdt_status(self):
        """
        Gets the sdt_status of this RestPingServiceV1.

        :return: The sdt_status of this RestPingServiceV1.
        :rtype: str
        """
        return self._sdt_status

    @sdt_status.setter
    def sdt_status(self, sdt_status):
        """
        Sets the sdt_status of this RestPingServiceV1.

        :param sdt_status: The sdt_status of this RestPingServiceV1.
        :type: str
        """

        self._sdt_status = sdt_status

    @property
    def transition(self):
        """
        Gets the transition of this RestPingServiceV1.

        :return: The transition of this RestPingServiceV1.
        :rtype: int
        """
        return self._transition

    @transition.setter
    def transition(self, transition):
        """
        Sets the transition of this RestPingServiceV1.

        :param transition: The transition of this RestPingServiceV1.
        :type: int
        """

        self._transition = transition

    @property
    def global_sm_alert_cond(self):
        """
        Gets the global_sm_alert_cond of this RestPingServiceV1.

        :return: The global_sm_alert_cond of this RestPingServiceV1.
        :rtype: int
        """
        return self._global_sm_alert_cond

    @global_sm_alert_cond.setter
    def global_sm_alert_cond(self, global_sm_alert_cond):
        """
        Sets the global_sm_alert_cond of this RestPingServiceV1.

        :param global_sm_alert_cond: The global_sm_alert_cond of this RestPingServiceV1.
        :type: int
        """

        self._global_sm_alert_cond = global_sm_alert_cond

    @property
    def is_internal(self):
        """
        Gets the is_internal of this RestPingServiceV1.

        :return: The is_internal of this RestPingServiceV1.
        :rtype: bool
        """
        return self._is_internal

    @is_internal.setter
    def is_internal(self, is_internal):
        """
        Sets the is_internal of this RestPingServiceV1.

        :param is_internal: The is_internal of this RestPingServiceV1.
        :type: bool
        """

        self._is_internal = is_internal

    @property
    def collectors(self):
        """
        Gets the collectors of this RestPingServiceV1.

        :return: The collectors of this RestPingServiceV1.
        :rtype: list[RestCollector]
        """
        return self._collectors

    @collectors.setter
    def collectors(self, collectors):
        """
        Sets the collectors of this RestPingServiceV1.

        :param collectors: The collectors of this RestPingServiceV1.
        :type: list[RestCollector]
        """

        self._collectors = collectors

    @property
    def name(self):
        """
        Gets the name of this RestPingServiceV1.

        :return: The name of this RestPingServiceV1.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this RestPingServiceV1.

        :param name: The name of this RestPingServiceV1.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def use_default_location_setting(self):
        """
        Gets the use_default_location_setting of this RestPingServiceV1.

        :return: The use_default_location_setting of this RestPingServiceV1.
        :rtype: bool
        """
        return self._use_default_location_setting

    @use_default_location_setting.setter
    def use_default_location_setting(self, use_default_location_setting):
        """
        Sets the use_default_location_setting of this RestPingServiceV1.

        :param use_default_location_setting: The use_default_location_setting of this RestPingServiceV1.
        :type: bool
        """

        self._use_default_location_setting = use_default_location_setting

    @property
    def use_default_alert_setting(self):
        """
        Gets the use_default_alert_setting of this RestPingServiceV1.

        :return: The use_default_alert_setting of this RestPingServiceV1.
        :rtype: bool
        """
        return self._use_default_alert_setting

    @use_default_alert_setting.setter
    def use_default_alert_setting(self, use_default_alert_setting):
        """
        Sets the use_default_alert_setting of this RestPingServiceV1.

        :param use_default_alert_setting: The use_default_alert_setting of this RestPingServiceV1.
        :type: bool
        """

        self._use_default_alert_setting = use_default_alert_setting

    @property
    def individual_alert_level(self):
        """
        Gets the individual_alert_level of this RestPingServiceV1.

        :return: The individual_alert_level of this RestPingServiceV1.
        :rtype: str
        """
        return self._individual_alert_level

    @individual_alert_level.setter
    def individual_alert_level(self, individual_alert_level):
        """
        Sets the individual_alert_level of this RestPingServiceV1.

        :param individual_alert_level: The individual_alert_level of this RestPingServiceV1.
        :type: str
        """

        self._individual_alert_level = individual_alert_level

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, RestPingServiceV1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
