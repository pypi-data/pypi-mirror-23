# coding: utf-8

"""
    logicmonitor_sdk

    LogicMonitor is a cloud-based, full stack, IT infrastructure monitoring solution that allows you to manage your infrastructure from the cloud. logicmonitor_sdk lets you manage your LogicMonitor account programmatically.

    OpenAPI spec version: 1.0.0
    Contact: sdk@logicmonitor.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class RestGraphPlot(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'missinglines': 'list[str]',
        'time_scale': 'str',
        'timestamps': 'list[int]',
        'title': 'str',
        'min_value': 'float',
        'start_time': 'int',
        'id': 'int',
        'rigid': 'bool',
        'lines': 'list[Line]',
        'height': 'int',
        'end_tz_offset': 'int',
        'base1024': 'bool',
        'ds_name': 'str',
        'max_value': 'float',
        'display_prio': 'int',
        'time_zone': 'str',
        'start_tz_offset': 'int',
        'x_axis_name': 'str',
        'width': 'int',
        'name': 'str',
        'vertical_label': 'str',
        'step': 'int',
        'end_time': 'int',
        'scopes': 'list[RestGraphOpsNoteScope]',
        'base': 'int',
        'export_file_name': 'str'
    }

    attribute_map = {
        'missinglines': 'missinglines',
        'time_scale': 'timeScale',
        'timestamps': 'timestamps',
        'title': 'title',
        'min_value': 'minValue',
        'start_time': 'startTime',
        'id': 'id',
        'rigid': 'rigid',
        'lines': 'lines',
        'height': 'height',
        'end_tz_offset': 'endTZOffset',
        'base1024': 'base1024',
        'ds_name': 'dsName',
        'max_value': 'maxValue',
        'display_prio': 'displayPrio',
        'time_zone': 'timeZone',
        'start_tz_offset': 'startTZOffset',
        'x_axis_name': 'xAxisName',
        'width': 'width',
        'name': 'name',
        'vertical_label': 'verticalLabel',
        'step': 'step',
        'end_time': 'endTime',
        'scopes': 'scopes',
        'base': 'base',
        'export_file_name': 'exportFileName'
    }

    def __init__(self, missinglines=None, time_scale=None, timestamps=None, title=None, min_value=None, start_time=None, id=None, rigid=None, lines=None, height=None, end_tz_offset=None, base1024=None, ds_name=None, max_value=None, display_prio=None, time_zone=None, start_tz_offset=None, x_axis_name=None, width=None, name=None, vertical_label=None, step=None, end_time=None, scopes=None, base=None, export_file_name=None):
        """
        RestGraphPlot - a model defined in Swagger
        """

        self._missinglines = None
        self._time_scale = None
        self._timestamps = None
        self._title = None
        self._min_value = None
        self._start_time = None
        self._id = None
        self._rigid = None
        self._lines = None
        self._height = None
        self._end_tz_offset = None
        self._base1024 = None
        self._ds_name = None
        self._max_value = None
        self._display_prio = None
        self._time_zone = None
        self._start_tz_offset = None
        self._x_axis_name = None
        self._width = None
        self._name = None
        self._vertical_label = None
        self._step = None
        self._end_time = None
        self._scopes = None
        self._base = None
        self._export_file_name = None
        self.discriminator = None

        if missinglines is not None:
          self.missinglines = missinglines
        if time_scale is not None:
          self.time_scale = time_scale
        if timestamps is not None:
          self.timestamps = timestamps
        if title is not None:
          self.title = title
        if min_value is not None:
          self.min_value = min_value
        if start_time is not None:
          self.start_time = start_time
        if id is not None:
          self.id = id
        if rigid is not None:
          self.rigid = rigid
        if lines is not None:
          self.lines = lines
        if height is not None:
          self.height = height
        if end_tz_offset is not None:
          self.end_tz_offset = end_tz_offset
        if base1024 is not None:
          self.base1024 = base1024
        if ds_name is not None:
          self.ds_name = ds_name
        if max_value is not None:
          self.max_value = max_value
        if display_prio is not None:
          self.display_prio = display_prio
        if time_zone is not None:
          self.time_zone = time_zone
        if start_tz_offset is not None:
          self.start_tz_offset = start_tz_offset
        if x_axis_name is not None:
          self.x_axis_name = x_axis_name
        if width is not None:
          self.width = width
        if name is not None:
          self.name = name
        if vertical_label is not None:
          self.vertical_label = vertical_label
        if step is not None:
          self.step = step
        if end_time is not None:
          self.end_time = end_time
        if scopes is not None:
          self.scopes = scopes
        if base is not None:
          self.base = base
        if export_file_name is not None:
          self.export_file_name = export_file_name

    @property
    def missinglines(self):
        """
        Gets the missinglines of this RestGraphPlot.

        :return: The missinglines of this RestGraphPlot.
        :rtype: list[str]
        """
        return self._missinglines

    @missinglines.setter
    def missinglines(self, missinglines):
        """
        Sets the missinglines of this RestGraphPlot.

        :param missinglines: The missinglines of this RestGraphPlot.
        :type: list[str]
        """

        self._missinglines = missinglines

    @property
    def time_scale(self):
        """
        Gets the time_scale of this RestGraphPlot.

        :return: The time_scale of this RestGraphPlot.
        :rtype: str
        """
        return self._time_scale

    @time_scale.setter
    def time_scale(self, time_scale):
        """
        Sets the time_scale of this RestGraphPlot.

        :param time_scale: The time_scale of this RestGraphPlot.
        :type: str
        """

        self._time_scale = time_scale

    @property
    def timestamps(self):
        """
        Gets the timestamps of this RestGraphPlot.

        :return: The timestamps of this RestGraphPlot.
        :rtype: list[int]
        """
        return self._timestamps

    @timestamps.setter
    def timestamps(self, timestamps):
        """
        Sets the timestamps of this RestGraphPlot.

        :param timestamps: The timestamps of this RestGraphPlot.
        :type: list[int]
        """

        self._timestamps = timestamps

    @property
    def title(self):
        """
        Gets the title of this RestGraphPlot.

        :return: The title of this RestGraphPlot.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """
        Sets the title of this RestGraphPlot.

        :param title: The title of this RestGraphPlot.
        :type: str
        """

        self._title = title

    @property
    def min_value(self):
        """
        Gets the min_value of this RestGraphPlot.

        :return: The min_value of this RestGraphPlot.
        :rtype: float
        """
        return self._min_value

    @min_value.setter
    def min_value(self, min_value):
        """
        Sets the min_value of this RestGraphPlot.

        :param min_value: The min_value of this RestGraphPlot.
        :type: float
        """

        self._min_value = min_value

    @property
    def start_time(self):
        """
        Gets the start_time of this RestGraphPlot.

        :return: The start_time of this RestGraphPlot.
        :rtype: int
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """
        Sets the start_time of this RestGraphPlot.

        :param start_time: The start_time of this RestGraphPlot.
        :type: int
        """

        self._start_time = start_time

    @property
    def id(self):
        """
        Gets the id of this RestGraphPlot.

        :return: The id of this RestGraphPlot.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this RestGraphPlot.

        :param id: The id of this RestGraphPlot.
        :type: int
        """

        self._id = id

    @property
    def rigid(self):
        """
        Gets the rigid of this RestGraphPlot.

        :return: The rigid of this RestGraphPlot.
        :rtype: bool
        """
        return self._rigid

    @rigid.setter
    def rigid(self, rigid):
        """
        Sets the rigid of this RestGraphPlot.

        :param rigid: The rigid of this RestGraphPlot.
        :type: bool
        """

        self._rigid = rigid

    @property
    def lines(self):
        """
        Gets the lines of this RestGraphPlot.

        :return: The lines of this RestGraphPlot.
        :rtype: list[Line]
        """
        return self._lines

    @lines.setter
    def lines(self, lines):
        """
        Sets the lines of this RestGraphPlot.

        :param lines: The lines of this RestGraphPlot.
        :type: list[Line]
        """

        self._lines = lines

    @property
    def height(self):
        """
        Gets the height of this RestGraphPlot.

        :return: The height of this RestGraphPlot.
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """
        Sets the height of this RestGraphPlot.

        :param height: The height of this RestGraphPlot.
        :type: int
        """

        self._height = height

    @property
    def end_tz_offset(self):
        """
        Gets the end_tz_offset of this RestGraphPlot.

        :return: The end_tz_offset of this RestGraphPlot.
        :rtype: int
        """
        return self._end_tz_offset

    @end_tz_offset.setter
    def end_tz_offset(self, end_tz_offset):
        """
        Sets the end_tz_offset of this RestGraphPlot.

        :param end_tz_offset: The end_tz_offset of this RestGraphPlot.
        :type: int
        """

        self._end_tz_offset = end_tz_offset

    @property
    def base1024(self):
        """
        Gets the base1024 of this RestGraphPlot.

        :return: The base1024 of this RestGraphPlot.
        :rtype: bool
        """
        return self._base1024

    @base1024.setter
    def base1024(self, base1024):
        """
        Sets the base1024 of this RestGraphPlot.

        :param base1024: The base1024 of this RestGraphPlot.
        :type: bool
        """

        self._base1024 = base1024

    @property
    def ds_name(self):
        """
        Gets the ds_name of this RestGraphPlot.

        :return: The ds_name of this RestGraphPlot.
        :rtype: str
        """
        return self._ds_name

    @ds_name.setter
    def ds_name(self, ds_name):
        """
        Sets the ds_name of this RestGraphPlot.

        :param ds_name: The ds_name of this RestGraphPlot.
        :type: str
        """

        self._ds_name = ds_name

    @property
    def max_value(self):
        """
        Gets the max_value of this RestGraphPlot.

        :return: The max_value of this RestGraphPlot.
        :rtype: float
        """
        return self._max_value

    @max_value.setter
    def max_value(self, max_value):
        """
        Sets the max_value of this RestGraphPlot.

        :param max_value: The max_value of this RestGraphPlot.
        :type: float
        """

        self._max_value = max_value

    @property
    def display_prio(self):
        """
        Gets the display_prio of this RestGraphPlot.

        :return: The display_prio of this RestGraphPlot.
        :rtype: int
        """
        return self._display_prio

    @display_prio.setter
    def display_prio(self, display_prio):
        """
        Sets the display_prio of this RestGraphPlot.

        :param display_prio: The display_prio of this RestGraphPlot.
        :type: int
        """

        self._display_prio = display_prio

    @property
    def time_zone(self):
        """
        Gets the time_zone of this RestGraphPlot.

        :return: The time_zone of this RestGraphPlot.
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """
        Sets the time_zone of this RestGraphPlot.

        :param time_zone: The time_zone of this RestGraphPlot.
        :type: str
        """

        self._time_zone = time_zone

    @property
    def start_tz_offset(self):
        """
        Gets the start_tz_offset of this RestGraphPlot.

        :return: The start_tz_offset of this RestGraphPlot.
        :rtype: int
        """
        return self._start_tz_offset

    @start_tz_offset.setter
    def start_tz_offset(self, start_tz_offset):
        """
        Sets the start_tz_offset of this RestGraphPlot.

        :param start_tz_offset: The start_tz_offset of this RestGraphPlot.
        :type: int
        """

        self._start_tz_offset = start_tz_offset

    @property
    def x_axis_name(self):
        """
        Gets the x_axis_name of this RestGraphPlot.

        :return: The x_axis_name of this RestGraphPlot.
        :rtype: str
        """
        return self._x_axis_name

    @x_axis_name.setter
    def x_axis_name(self, x_axis_name):
        """
        Sets the x_axis_name of this RestGraphPlot.

        :param x_axis_name: The x_axis_name of this RestGraphPlot.
        :type: str
        """

        self._x_axis_name = x_axis_name

    @property
    def width(self):
        """
        Gets the width of this RestGraphPlot.

        :return: The width of this RestGraphPlot.
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """
        Sets the width of this RestGraphPlot.

        :param width: The width of this RestGraphPlot.
        :type: int
        """

        self._width = width

    @property
    def name(self):
        """
        Gets the name of this RestGraphPlot.

        :return: The name of this RestGraphPlot.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this RestGraphPlot.

        :param name: The name of this RestGraphPlot.
        :type: str
        """

        self._name = name

    @property
    def vertical_label(self):
        """
        Gets the vertical_label of this RestGraphPlot.

        :return: The vertical_label of this RestGraphPlot.
        :rtype: str
        """
        return self._vertical_label

    @vertical_label.setter
    def vertical_label(self, vertical_label):
        """
        Sets the vertical_label of this RestGraphPlot.

        :param vertical_label: The vertical_label of this RestGraphPlot.
        :type: str
        """

        self._vertical_label = vertical_label

    @property
    def step(self):
        """
        Gets the step of this RestGraphPlot.

        :return: The step of this RestGraphPlot.
        :rtype: int
        """
        return self._step

    @step.setter
    def step(self, step):
        """
        Sets the step of this RestGraphPlot.

        :param step: The step of this RestGraphPlot.
        :type: int
        """

        self._step = step

    @property
    def end_time(self):
        """
        Gets the end_time of this RestGraphPlot.

        :return: The end_time of this RestGraphPlot.
        :rtype: int
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """
        Sets the end_time of this RestGraphPlot.

        :param end_time: The end_time of this RestGraphPlot.
        :type: int
        """

        self._end_time = end_time

    @property
    def scopes(self):
        """
        Gets the scopes of this RestGraphPlot.

        :return: The scopes of this RestGraphPlot.
        :rtype: list[RestGraphOpsNoteScope]
        """
        return self._scopes

    @scopes.setter
    def scopes(self, scopes):
        """
        Sets the scopes of this RestGraphPlot.

        :param scopes: The scopes of this RestGraphPlot.
        :type: list[RestGraphOpsNoteScope]
        """

        self._scopes = scopes

    @property
    def base(self):
        """
        Gets the base of this RestGraphPlot.

        :return: The base of this RestGraphPlot.
        :rtype: int
        """
        return self._base

    @base.setter
    def base(self, base):
        """
        Sets the base of this RestGraphPlot.

        :param base: The base of this RestGraphPlot.
        :type: int
        """

        self._base = base

    @property
    def export_file_name(self):
        """
        Gets the export_file_name of this RestGraphPlot.

        :return: The export_file_name of this RestGraphPlot.
        :rtype: str
        """
        return self._export_file_name

    @export_file_name.setter
    def export_file_name(self, export_file_name):
        """
        Sets the export_file_name of this RestGraphPlot.

        :param export_file_name: The export_file_name of this RestGraphPlot.
        :type: str
        """

        self._export_file_name = export_file_name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, RestGraphPlot):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
