# coding: utf-8

"""
    logicmonitor_sdk

    LogicMonitor is a cloud-based, full stack, IT infrastructure monitoring solution that allows you to manage your infrastructure from the cloud. logicmonitor_sdk lets you manage your LogicMonitor account programmatically.

    OpenAPI spec version: 1.0.0
    Contact: sdk@logicmonitor.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class RestAlertRule(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'datapoint': 'str',
        'instance': 'str',
        'devices': 'list[str]',
        'escalating_chain_id': 'int',
        'priority': 'int',
        'suppress_alert_ack_sdt': 'bool',
        'datasource': 'str',
        'suppress_alert_clear': 'bool',
        'name': 'str',
        'id': 'int',
        'level_str': 'str',
        'device_groups': 'list[str]',
        'escalating_chain': 'str',
        'escalation_interval': 'int'
    }

    attribute_map = {
        'datapoint': 'datapoint',
        'instance': 'instance',
        'devices': 'devices',
        'escalating_chain_id': 'escalatingChainId',
        'priority': 'priority',
        'suppress_alert_ack_sdt': 'suppressAlertAckSdt',
        'datasource': 'datasource',
        'suppress_alert_clear': 'suppressAlertClear',
        'name': 'name',
        'id': 'id',
        'level_str': 'levelStr',
        'device_groups': 'deviceGroups',
        'escalating_chain': 'escalatingChain',
        'escalation_interval': 'escalationInterval'
    }

    def __init__(self, datapoint=None, instance=None, devices=None, escalating_chain_id=None, priority=None, suppress_alert_ack_sdt=None, datasource=None, suppress_alert_clear=None, name=None, id=None, level_str=None, device_groups=None, escalating_chain=None, escalation_interval=None):
        """
        RestAlertRule - a model defined in Swagger
        """

        self._datapoint = None
        self._instance = None
        self._devices = None
        self._escalating_chain_id = None
        self._priority = None
        self._suppress_alert_ack_sdt = None
        self._datasource = None
        self._suppress_alert_clear = None
        self._name = None
        self._id = None
        self._level_str = None
        self._device_groups = None
        self._escalating_chain = None
        self._escalation_interval = None
        self.discriminator = None

        if datapoint is not None:
          self.datapoint = datapoint
        if instance is not None:
          self.instance = instance
        if devices is not None:
          self.devices = devices
        self.escalating_chain_id = escalating_chain_id
        self.priority = priority
        if suppress_alert_ack_sdt is not None:
          self.suppress_alert_ack_sdt = suppress_alert_ack_sdt
        if datasource is not None:
          self.datasource = datasource
        if suppress_alert_clear is not None:
          self.suppress_alert_clear = suppress_alert_clear
        self.name = name
        if id is not None:
          self.id = id
        if level_str is not None:
          self.level_str = level_str
        if device_groups is not None:
          self.device_groups = device_groups
        if escalating_chain is not None:
          self.escalating_chain = escalating_chain
        if escalation_interval is not None:
          self.escalation_interval = escalation_interval

    @property
    def datapoint(self):
        """
        Gets the datapoint of this RestAlertRule.

        :return: The datapoint of this RestAlertRule.
        :rtype: str
        """
        return self._datapoint

    @datapoint.setter
    def datapoint(self, datapoint):
        """
        Sets the datapoint of this RestAlertRule.

        :param datapoint: The datapoint of this RestAlertRule.
        :type: str
        """

        self._datapoint = datapoint

    @property
    def instance(self):
        """
        Gets the instance of this RestAlertRule.

        :return: The instance of this RestAlertRule.
        :rtype: str
        """
        return self._instance

    @instance.setter
    def instance(self, instance):
        """
        Sets the instance of this RestAlertRule.

        :param instance: The instance of this RestAlertRule.
        :type: str
        """

        self._instance = instance

    @property
    def devices(self):
        """
        Gets the devices of this RestAlertRule.

        :return: The devices of this RestAlertRule.
        :rtype: list[str]
        """
        return self._devices

    @devices.setter
    def devices(self, devices):
        """
        Sets the devices of this RestAlertRule.

        :param devices: The devices of this RestAlertRule.
        :type: list[str]
        """

        self._devices = devices

    @property
    def escalating_chain_id(self):
        """
        Gets the escalating_chain_id of this RestAlertRule.

        :return: The escalating_chain_id of this RestAlertRule.
        :rtype: int
        """
        return self._escalating_chain_id

    @escalating_chain_id.setter
    def escalating_chain_id(self, escalating_chain_id):
        """
        Sets the escalating_chain_id of this RestAlertRule.

        :param escalating_chain_id: The escalating_chain_id of this RestAlertRule.
        :type: int
        """
        if escalating_chain_id is None:
            raise ValueError("Invalid value for `escalating_chain_id`, must not be `None`")

        self._escalating_chain_id = escalating_chain_id

    @property
    def priority(self):
        """
        Gets the priority of this RestAlertRule.

        :return: The priority of this RestAlertRule.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """
        Sets the priority of this RestAlertRule.

        :param priority: The priority of this RestAlertRule.
        :type: int
        """
        if priority is None:
            raise ValueError("Invalid value for `priority`, must not be `None`")

        self._priority = priority

    @property
    def suppress_alert_ack_sdt(self):
        """
        Gets the suppress_alert_ack_sdt of this RestAlertRule.

        :return: The suppress_alert_ack_sdt of this RestAlertRule.
        :rtype: bool
        """
        return self._suppress_alert_ack_sdt

    @suppress_alert_ack_sdt.setter
    def suppress_alert_ack_sdt(self, suppress_alert_ack_sdt):
        """
        Sets the suppress_alert_ack_sdt of this RestAlertRule.

        :param suppress_alert_ack_sdt: The suppress_alert_ack_sdt of this RestAlertRule.
        :type: bool
        """

        self._suppress_alert_ack_sdt = suppress_alert_ack_sdt

    @property
    def datasource(self):
        """
        Gets the datasource of this RestAlertRule.

        :return: The datasource of this RestAlertRule.
        :rtype: str
        """
        return self._datasource

    @datasource.setter
    def datasource(self, datasource):
        """
        Sets the datasource of this RestAlertRule.

        :param datasource: The datasource of this RestAlertRule.
        :type: str
        """

        self._datasource = datasource

    @property
    def suppress_alert_clear(self):
        """
        Gets the suppress_alert_clear of this RestAlertRule.

        :return: The suppress_alert_clear of this RestAlertRule.
        :rtype: bool
        """
        return self._suppress_alert_clear

    @suppress_alert_clear.setter
    def suppress_alert_clear(self, suppress_alert_clear):
        """
        Sets the suppress_alert_clear of this RestAlertRule.

        :param suppress_alert_clear: The suppress_alert_clear of this RestAlertRule.
        :type: bool
        """

        self._suppress_alert_clear = suppress_alert_clear

    @property
    def name(self):
        """
        Gets the name of this RestAlertRule.

        :return: The name of this RestAlertRule.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this RestAlertRule.

        :param name: The name of this RestAlertRule.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def id(self):
        """
        Gets the id of this RestAlertRule.

        :return: The id of this RestAlertRule.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this RestAlertRule.

        :param id: The id of this RestAlertRule.
        :type: int
        """

        self._id = id

    @property
    def level_str(self):
        """
        Gets the level_str of this RestAlertRule.

        :return: The level_str of this RestAlertRule.
        :rtype: str
        """
        return self._level_str

    @level_str.setter
    def level_str(self, level_str):
        """
        Sets the level_str of this RestAlertRule.

        :param level_str: The level_str of this RestAlertRule.
        :type: str
        """

        self._level_str = level_str

    @property
    def device_groups(self):
        """
        Gets the device_groups of this RestAlertRule.

        :return: The device_groups of this RestAlertRule.
        :rtype: list[str]
        """
        return self._device_groups

    @device_groups.setter
    def device_groups(self, device_groups):
        """
        Sets the device_groups of this RestAlertRule.

        :param device_groups: The device_groups of this RestAlertRule.
        :type: list[str]
        """

        self._device_groups = device_groups

    @property
    def escalating_chain(self):
        """
        Gets the escalating_chain of this RestAlertRule.
        This is a JSON string

        :return: The escalating_chain of this RestAlertRule.
        :rtype: str
        """
        return self._escalating_chain

    @escalating_chain.setter
    def escalating_chain(self, escalating_chain):
        """
        Sets the escalating_chain of this RestAlertRule.
        This is a JSON string

        :param escalating_chain: The escalating_chain of this RestAlertRule.
        :type: str
        """

        self._escalating_chain = escalating_chain

    @property
    def escalation_interval(self):
        """
        Gets the escalation_interval of this RestAlertRule.

        :return: The escalation_interval of this RestAlertRule.
        :rtype: int
        """
        return self._escalation_interval

    @escalation_interval.setter
    def escalation_interval(self, escalation_interval):
        """
        Sets the escalation_interval of this RestAlertRule.

        :param escalation_interval: The escalation_interval of this RestAlertRule.
        :type: int
        """

        self._escalation_interval = escalation_interval

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, RestAlertRule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
