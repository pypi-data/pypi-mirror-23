# coding: utf-8

"""
    logicmonitor_sdk

    LogicMonitor is a cloud-based, full stack, IT infrastructure monitoring solution that allows you to manage your infrastructure from the cloud. logicmonitor_sdk lets you manage your LogicMonitor account programmatically.

    OpenAPI spec version: 1.0.0
    Contact: sdk@logicmonitor.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class OnetimeUpgradeInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_by': 'str',
        'level': 'str',
        'end_epoch': 'int',
        'description': 'str',
        'type': 'str',
        'major_version': 'int',
        'minor_version': 'int',
        'start_epoch': 'int'
    }

    attribute_map = {
        'created_by': 'createdBy',
        'level': 'level',
        'end_epoch': 'endEpoch',
        'description': 'description',
        'type': 'type',
        'major_version': 'majorVersion',
        'minor_version': 'minorVersion',
        'start_epoch': 'startEpoch'
    }

    def __init__(self, created_by=None, level=None, end_epoch=None, description=None, type=None, major_version=None, minor_version=None, start_epoch=None):
        """
        OnetimeUpgradeInfo - a model defined in Swagger
        """

        self._created_by = None
        self._level = None
        self._end_epoch = None
        self._description = None
        self._type = None
        self._major_version = None
        self._minor_version = None
        self._start_epoch = None
        self.discriminator = None

        if created_by is not None:
          self.created_by = created_by
        if level is not None:
          self.level = level
        if end_epoch is not None:
          self.end_epoch = end_epoch
        if description is not None:
          self.description = description
        if type is not None:
          self.type = type
        self.major_version = major_version
        self.minor_version = minor_version
        self.start_epoch = start_epoch

    @property
    def created_by(self):
        """
        Gets the created_by of this OnetimeUpgradeInfo.

        :return: The created_by of this OnetimeUpgradeInfo.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """
        Sets the created_by of this OnetimeUpgradeInfo.

        :param created_by: The created_by of this OnetimeUpgradeInfo.
        :type: str
        """

        self._created_by = created_by

    @property
    def level(self):
        """
        Gets the level of this OnetimeUpgradeInfo.

        :return: The level of this OnetimeUpgradeInfo.
        :rtype: str
        """
        return self._level

    @level.setter
    def level(self, level):
        """
        Sets the level of this OnetimeUpgradeInfo.

        :param level: The level of this OnetimeUpgradeInfo.
        :type: str
        """

        self._level = level

    @property
    def end_epoch(self):
        """
        Gets the end_epoch of this OnetimeUpgradeInfo.

        :return: The end_epoch of this OnetimeUpgradeInfo.
        :rtype: int
        """
        return self._end_epoch

    @end_epoch.setter
    def end_epoch(self, end_epoch):
        """
        Sets the end_epoch of this OnetimeUpgradeInfo.

        :param end_epoch: The end_epoch of this OnetimeUpgradeInfo.
        :type: int
        """

        self._end_epoch = end_epoch

    @property
    def description(self):
        """
        Gets the description of this OnetimeUpgradeInfo.

        :return: The description of this OnetimeUpgradeInfo.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this OnetimeUpgradeInfo.

        :param description: The description of this OnetimeUpgradeInfo.
        :type: str
        """

        self._description = description

    @property
    def type(self):
        """
        Gets the type of this OnetimeUpgradeInfo.

        :return: The type of this OnetimeUpgradeInfo.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this OnetimeUpgradeInfo.

        :param type: The type of this OnetimeUpgradeInfo.
        :type: str
        """

        self._type = type

    @property
    def major_version(self):
        """
        Gets the major_version of this OnetimeUpgradeInfo.

        :return: The major_version of this OnetimeUpgradeInfo.
        :rtype: int
        """
        return self._major_version

    @major_version.setter
    def major_version(self, major_version):
        """
        Sets the major_version of this OnetimeUpgradeInfo.

        :param major_version: The major_version of this OnetimeUpgradeInfo.
        :type: int
        """
        if major_version is None:
            raise ValueError("Invalid value for `major_version`, must not be `None`")

        self._major_version = major_version

    @property
    def minor_version(self):
        """
        Gets the minor_version of this OnetimeUpgradeInfo.

        :return: The minor_version of this OnetimeUpgradeInfo.
        :rtype: int
        """
        return self._minor_version

    @minor_version.setter
    def minor_version(self, minor_version):
        """
        Sets the minor_version of this OnetimeUpgradeInfo.

        :param minor_version: The minor_version of this OnetimeUpgradeInfo.
        :type: int
        """
        if minor_version is None:
            raise ValueError("Invalid value for `minor_version`, must not be `None`")

        self._minor_version = minor_version

    @property
    def start_epoch(self):
        """
        Gets the start_epoch of this OnetimeUpgradeInfo.

        :return: The start_epoch of this OnetimeUpgradeInfo.
        :rtype: int
        """
        return self._start_epoch

    @start_epoch.setter
    def start_epoch(self, start_epoch):
        """
        Sets the start_epoch of this OnetimeUpgradeInfo.

        :param start_epoch: The start_epoch of this OnetimeUpgradeInfo.
        :type: int
        """
        if start_epoch is None:
            raise ValueError("Invalid value for `start_epoch`, must not be `None`")

        self._start_epoch = start_epoch

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, OnetimeUpgradeInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
