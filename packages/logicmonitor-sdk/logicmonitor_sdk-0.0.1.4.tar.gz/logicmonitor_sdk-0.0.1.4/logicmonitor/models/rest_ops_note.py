# coding: utf-8

"""
    logicmonitor_sdk

    LogicMonitor is a cloud-based, full stack, IT infrastructure monitoring solution that allows you to manage your infrastructure from the cloud. logicmonitor_sdk lets you manage your LogicMonitor account programmatically.

    OpenAPI spec version: 1.0.0
    Contact: sdk@logicmonitor.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class RestOpsNote(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'note': 'str',
        'created_by': 'str',
        'id': 'str',
        'scopes': 'list[RestOpsNoteScopeBase]',
        'happen_on_in_sec': 'int',
        'tags': 'list[RestOpsNoteTagBase]'
    }

    attribute_map = {
        'note': 'note',
        'created_by': 'createdBy',
        'id': 'id',
        'scopes': 'scopes',
        'happen_on_in_sec': 'happenOnInSec',
        'tags': 'tags'
    }

    def __init__(self, note=None, created_by=None, id=None, scopes=None, happen_on_in_sec=None, tags=None):
        """
        RestOpsNote - a model defined in Swagger
        """

        self._note = None
        self._created_by = None
        self._id = None
        self._scopes = None
        self._happen_on_in_sec = None
        self._tags = None
        self.discriminator = None

        self.note = note
        if created_by is not None:
          self.created_by = created_by
        if id is not None:
          self.id = id
        if scopes is not None:
          self.scopes = scopes
        if happen_on_in_sec is not None:
          self.happen_on_in_sec = happen_on_in_sec
        if tags is not None:
          self.tags = tags

    @property
    def note(self):
        """
        Gets the note of this RestOpsNote.

        :return: The note of this RestOpsNote.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """
        Sets the note of this RestOpsNote.

        :param note: The note of this RestOpsNote.
        :type: str
        """
        if note is None:
            raise ValueError("Invalid value for `note`, must not be `None`")

        self._note = note

    @property
    def created_by(self):
        """
        Gets the created_by of this RestOpsNote.

        :return: The created_by of this RestOpsNote.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """
        Sets the created_by of this RestOpsNote.

        :param created_by: The created_by of this RestOpsNote.
        :type: str
        """

        self._created_by = created_by

    @property
    def id(self):
        """
        Gets the id of this RestOpsNote.

        :return: The id of this RestOpsNote.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this RestOpsNote.

        :param id: The id of this RestOpsNote.
        :type: str
        """

        self._id = id

    @property
    def scopes(self):
        """
        Gets the scopes of this RestOpsNote.

        :return: The scopes of this RestOpsNote.
        :rtype: list[RestOpsNoteScopeBase]
        """
        return self._scopes

    @scopes.setter
    def scopes(self, scopes):
        """
        Sets the scopes of this RestOpsNote.

        :param scopes: The scopes of this RestOpsNote.
        :type: list[RestOpsNoteScopeBase]
        """

        self._scopes = scopes

    @property
    def happen_on_in_sec(self):
        """
        Gets the happen_on_in_sec of this RestOpsNote.

        :return: The happen_on_in_sec of this RestOpsNote.
        :rtype: int
        """
        return self._happen_on_in_sec

    @happen_on_in_sec.setter
    def happen_on_in_sec(self, happen_on_in_sec):
        """
        Sets the happen_on_in_sec of this RestOpsNote.

        :param happen_on_in_sec: The happen_on_in_sec of this RestOpsNote.
        :type: int
        """

        self._happen_on_in_sec = happen_on_in_sec

    @property
    def tags(self):
        """
        Gets the tags of this RestOpsNote.

        :return: The tags of this RestOpsNote.
        :rtype: list[RestOpsNoteTagBase]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this RestOpsNote.

        :param tags: The tags of this RestOpsNote.
        :type: list[RestOpsNoteTagBase]
        """

        self._tags = tags

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, RestOpsNote):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
