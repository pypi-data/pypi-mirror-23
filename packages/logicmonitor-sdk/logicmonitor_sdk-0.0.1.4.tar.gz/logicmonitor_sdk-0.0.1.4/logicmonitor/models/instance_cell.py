# coding: utf-8

"""
    logicmonitor_sdk

    LogicMonitor is a cloud-based, full stack, IT infrastructure monitoring solution that allows you to manage your infrastructure from the cloud. logicmonitor_sdk lets you manage your LogicMonitor account programmatically.

    OpenAPI spec version: 1.0.0
    Contact: sdk@logicmonitor.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class InstanceCell(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'validation_status_code': 'int',
        'data_point_name': 'str',
        'instance_id': 'int',
        'data_point_id': 'int',
        'instance_name': 'str'
    }

    attribute_map = {
        'validation_status_code': 'validationStatusCode',
        'data_point_name': 'dataPointName',
        'instance_id': 'instanceId',
        'data_point_id': 'dataPointId',
        'instance_name': 'instanceName'
    }

    def __init__(self, validation_status_code=None, data_point_name=None, instance_id=None, data_point_id=None, instance_name=None):
        """
        InstanceCell - a model defined in Swagger
        """

        self._validation_status_code = None
        self._data_point_name = None
        self._instance_id = None
        self._data_point_id = None
        self._instance_name = None
        self.discriminator = None

        if validation_status_code is not None:
          self.validation_status_code = validation_status_code
        if data_point_name is not None:
          self.data_point_name = data_point_name
        self.instance_id = instance_id
        if data_point_id is not None:
          self.data_point_id = data_point_id
        if instance_name is not None:
          self.instance_name = instance_name

    @property
    def validation_status_code(self):
        """
        Gets the validation_status_code of this InstanceCell.

        :return: The validation_status_code of this InstanceCell.
        :rtype: int
        """
        return self._validation_status_code

    @validation_status_code.setter
    def validation_status_code(self, validation_status_code):
        """
        Sets the validation_status_code of this InstanceCell.

        :param validation_status_code: The validation_status_code of this InstanceCell.
        :type: int
        """

        self._validation_status_code = validation_status_code

    @property
    def data_point_name(self):
        """
        Gets the data_point_name of this InstanceCell.

        :return: The data_point_name of this InstanceCell.
        :rtype: str
        """
        return self._data_point_name

    @data_point_name.setter
    def data_point_name(self, data_point_name):
        """
        Sets the data_point_name of this InstanceCell.

        :param data_point_name: The data_point_name of this InstanceCell.
        :type: str
        """

        self._data_point_name = data_point_name

    @property
    def instance_id(self):
        """
        Gets the instance_id of this InstanceCell.

        :return: The instance_id of this InstanceCell.
        :rtype: int
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """
        Sets the instance_id of this InstanceCell.

        :param instance_id: The instance_id of this InstanceCell.
        :type: int
        """
        if instance_id is None:
            raise ValueError("Invalid value for `instance_id`, must not be `None`")

        self._instance_id = instance_id

    @property
    def data_point_id(self):
        """
        Gets the data_point_id of this InstanceCell.

        :return: The data_point_id of this InstanceCell.
        :rtype: int
        """
        return self._data_point_id

    @data_point_id.setter
    def data_point_id(self, data_point_id):
        """
        Sets the data_point_id of this InstanceCell.

        :param data_point_id: The data_point_id of this InstanceCell.
        :type: int
        """

        self._data_point_id = data_point_id

    @property
    def instance_name(self):
        """
        Gets the instance_name of this InstanceCell.

        :return: The instance_name of this InstanceCell.
        :rtype: str
        """
        return self._instance_name

    @instance_name.setter
    def instance_name(self, instance_name):
        """
        Sets the instance_name of this InstanceCell.

        :param instance_name: The instance_name of this InstanceCell.
        :type: str
        """

        self._instance_name = instance_name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, InstanceCell):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
