# coding: utf-8

"""
    logicmonitor_sdk

    LogicMonitor is a cloud-based, full stack, IT infrastructure monitoring solution that allows you to manage your infrastructure from the cloud. logicmonitor_sdk lets you manage your LogicMonitor account programmatically.

    OpenAPI spec version: 1.0.0
    Contact: sdk@logicmonitor.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class PieChartInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'max_slices_can_be_shown': 'int',
        'virtual_data_points': 'list[VirtualDataPoint]',
        'show_labels_and_lines_on_pc': 'bool',
        'data_points': 'list[PieChartDataPoint]',
        'group_remaining_as_others': 'bool',
        'pie_chart_items': 'list[PieChartItem]',
        'title': 'str'
    }

    attribute_map = {
        'max_slices_can_be_shown': 'maxSlicesCanBeShown',
        'virtual_data_points': 'virtualDataPoints',
        'show_labels_and_lines_on_pc': 'showLabelsAndLinesOnPC',
        'data_points': 'dataPoints',
        'group_remaining_as_others': 'groupRemainingAsOthers',
        'pie_chart_items': 'pieChartItems',
        'title': 'title'
    }

    def __init__(self, max_slices_can_be_shown=None, virtual_data_points=None, show_labels_and_lines_on_pc=None, data_points=None, group_remaining_as_others=None, pie_chart_items=None, title=None):
        """
        PieChartInfo - a model defined in Swagger
        """

        self._max_slices_can_be_shown = None
        self._virtual_data_points = None
        self._show_labels_and_lines_on_pc = None
        self._data_points = None
        self._group_remaining_as_others = None
        self._pie_chart_items = None
        self._title = None
        self.discriminator = None

        if max_slices_can_be_shown is not None:
          self.max_slices_can_be_shown = max_slices_can_be_shown
        if virtual_data_points is not None:
          self.virtual_data_points = virtual_data_points
        if show_labels_and_lines_on_pc is not None:
          self.show_labels_and_lines_on_pc = show_labels_and_lines_on_pc
        if data_points is not None:
          self.data_points = data_points
        if group_remaining_as_others is not None:
          self.group_remaining_as_others = group_remaining_as_others
        self.pie_chart_items = pie_chart_items
        if title is not None:
          self.title = title

    @property
    def max_slices_can_be_shown(self):
        """
        Gets the max_slices_can_be_shown of this PieChartInfo.

        :return: The max_slices_can_be_shown of this PieChartInfo.
        :rtype: int
        """
        return self._max_slices_can_be_shown

    @max_slices_can_be_shown.setter
    def max_slices_can_be_shown(self, max_slices_can_be_shown):
        """
        Sets the max_slices_can_be_shown of this PieChartInfo.

        :param max_slices_can_be_shown: The max_slices_can_be_shown of this PieChartInfo.
        :type: int
        """

        self._max_slices_can_be_shown = max_slices_can_be_shown

    @property
    def virtual_data_points(self):
        """
        Gets the virtual_data_points of this PieChartInfo.

        :return: The virtual_data_points of this PieChartInfo.
        :rtype: list[VirtualDataPoint]
        """
        return self._virtual_data_points

    @virtual_data_points.setter
    def virtual_data_points(self, virtual_data_points):
        """
        Sets the virtual_data_points of this PieChartInfo.

        :param virtual_data_points: The virtual_data_points of this PieChartInfo.
        :type: list[VirtualDataPoint]
        """

        self._virtual_data_points = virtual_data_points

    @property
    def show_labels_and_lines_on_pc(self):
        """
        Gets the show_labels_and_lines_on_pc of this PieChartInfo.

        :return: The show_labels_and_lines_on_pc of this PieChartInfo.
        :rtype: bool
        """
        return self._show_labels_and_lines_on_pc

    @show_labels_and_lines_on_pc.setter
    def show_labels_and_lines_on_pc(self, show_labels_and_lines_on_pc):
        """
        Sets the show_labels_and_lines_on_pc of this PieChartInfo.

        :param show_labels_and_lines_on_pc: The show_labels_and_lines_on_pc of this PieChartInfo.
        :type: bool
        """

        self._show_labels_and_lines_on_pc = show_labels_and_lines_on_pc

    @property
    def data_points(self):
        """
        Gets the data_points of this PieChartInfo.

        :return: The data_points of this PieChartInfo.
        :rtype: list[PieChartDataPoint]
        """
        return self._data_points

    @data_points.setter
    def data_points(self, data_points):
        """
        Sets the data_points of this PieChartInfo.

        :param data_points: The data_points of this PieChartInfo.
        :type: list[PieChartDataPoint]
        """

        self._data_points = data_points

    @property
    def group_remaining_as_others(self):
        """
        Gets the group_remaining_as_others of this PieChartInfo.

        :return: The group_remaining_as_others of this PieChartInfo.
        :rtype: bool
        """
        return self._group_remaining_as_others

    @group_remaining_as_others.setter
    def group_remaining_as_others(self, group_remaining_as_others):
        """
        Sets the group_remaining_as_others of this PieChartInfo.

        :param group_remaining_as_others: The group_remaining_as_others of this PieChartInfo.
        :type: bool
        """

        self._group_remaining_as_others = group_remaining_as_others

    @property
    def pie_chart_items(self):
        """
        Gets the pie_chart_items of this PieChartInfo.

        :return: The pie_chart_items of this PieChartInfo.
        :rtype: list[PieChartItem]
        """
        return self._pie_chart_items

    @pie_chart_items.setter
    def pie_chart_items(self, pie_chart_items):
        """
        Sets the pie_chart_items of this PieChartInfo.

        :param pie_chart_items: The pie_chart_items of this PieChartInfo.
        :type: list[PieChartItem]
        """
        if pie_chart_items is None:
            raise ValueError("Invalid value for `pie_chart_items`, must not be `None`")

        self._pie_chart_items = pie_chart_items

    @property
    def title(self):
        """
        Gets the title of this PieChartInfo.

        :return: The title of this PieChartInfo.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """
        Sets the title of this PieChartInfo.

        :param title: The title of this PieChartInfo.
        :type: str
        """

        self._title = title

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PieChartInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
