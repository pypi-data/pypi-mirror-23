# coding: utf-8

"""
    logicmonitor_sdk

    LogicMonitor is a cloud-based, full stack, IT infrastructure monitoring solution that allows you to manage your infrastructure from the cloud. logicmonitor_sdk lets you manage your LogicMonitor account programmatically.

    OpenAPI spec version: 1.0.0
    Contact: sdk@logicmonitor.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class RestSDTBase(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'end_date_time_on_local': 'str',
        'sdt_type': 'int',
        'month_day': 'int',
        'admin': 'str',
        'end_date_time': 'int',
        'type': 'str',
        'is_effective': 'bool',
        'minute': 'int',
        'duration': 'int',
        'end_hour': 'int',
        'start_date_time': 'int',
        'hour': 'int',
        'start_date_time_on_local': 'str',
        'week_day': 'int',
        'comment': 'str',
        'id': 'str',
        'end_minute': 'int'
    }

    attribute_map = {
        'end_date_time_on_local': 'endDateTimeOnLocal',
        'sdt_type': 'sdtType',
        'month_day': 'monthDay',
        'admin': 'admin',
        'end_date_time': 'endDateTime',
        'type': 'type',
        'is_effective': 'isEffective',
        'minute': 'minute',
        'duration': 'duration',
        'end_hour': 'endHour',
        'start_date_time': 'startDateTime',
        'hour': 'hour',
        'start_date_time_on_local': 'startDateTimeOnLocal',
        'week_day': 'weekDay',
        'comment': 'comment',
        'id': 'id',
        'end_minute': 'endMinute'
    }

    def __init__(self, end_date_time_on_local=None, sdt_type=None, month_day=None, admin=None, end_date_time=None, type=None, is_effective=None, minute=None, duration=None, end_hour=None, start_date_time=None, hour=None, start_date_time_on_local=None, week_day=None, comment=None, id=None, end_minute=None):
        """
        RestSDTBase - a model defined in Swagger
        """

        self._end_date_time_on_local = None
        self._sdt_type = None
        self._month_day = None
        self._admin = None
        self._end_date_time = None
        self._type = None
        self._is_effective = None
        self._minute = None
        self._duration = None
        self._end_hour = None
        self._start_date_time = None
        self._hour = None
        self._start_date_time_on_local = None
        self._week_day = None
        self._comment = None
        self._id = None
        self._end_minute = None
        self.discriminator = 'type'

        if end_date_time_on_local is not None:
          self.end_date_time_on_local = end_date_time_on_local
        if sdt_type is not None:
          self.sdt_type = sdt_type
        if month_day is not None:
          self.month_day = month_day
        if admin is not None:
          self.admin = admin
        if end_date_time is not None:
          self.end_date_time = end_date_time
        self.type = type
        if is_effective is not None:
          self.is_effective = is_effective
        if minute is not None:
          self.minute = minute
        if duration is not None:
          self.duration = duration
        if end_hour is not None:
          self.end_hour = end_hour
        if start_date_time is not None:
          self.start_date_time = start_date_time
        if hour is not None:
          self.hour = hour
        if start_date_time_on_local is not None:
          self.start_date_time_on_local = start_date_time_on_local
        if week_day is not None:
          self.week_day = week_day
        if comment is not None:
          self.comment = comment
        if id is not None:
          self.id = id
        if end_minute is not None:
          self.end_minute = end_minute

    @property
    def end_date_time_on_local(self):
        """
        Gets the end_date_time_on_local of this RestSDTBase.

        :return: The end_date_time_on_local of this RestSDTBase.
        :rtype: str
        """
        return self._end_date_time_on_local

    @end_date_time_on_local.setter
    def end_date_time_on_local(self, end_date_time_on_local):
        """
        Sets the end_date_time_on_local of this RestSDTBase.

        :param end_date_time_on_local: The end_date_time_on_local of this RestSDTBase.
        :type: str
        """

        self._end_date_time_on_local = end_date_time_on_local

    @property
    def sdt_type(self):
        """
        Gets the sdt_type of this RestSDTBase.

        :return: The sdt_type of this RestSDTBase.
        :rtype: int
        """
        return self._sdt_type

    @sdt_type.setter
    def sdt_type(self, sdt_type):
        """
        Sets the sdt_type of this RestSDTBase.

        :param sdt_type: The sdt_type of this RestSDTBase.
        :type: int
        """

        self._sdt_type = sdt_type

    @property
    def month_day(self):
        """
        Gets the month_day of this RestSDTBase.

        :return: The month_day of this RestSDTBase.
        :rtype: int
        """
        return self._month_day

    @month_day.setter
    def month_day(self, month_day):
        """
        Sets the month_day of this RestSDTBase.

        :param month_day: The month_day of this RestSDTBase.
        :type: int
        """

        self._month_day = month_day

    @property
    def admin(self):
        """
        Gets the admin of this RestSDTBase.

        :return: The admin of this RestSDTBase.
        :rtype: str
        """
        return self._admin

    @admin.setter
    def admin(self, admin):
        """
        Sets the admin of this RestSDTBase.

        :param admin: The admin of this RestSDTBase.
        :type: str
        """

        self._admin = admin

    @property
    def end_date_time(self):
        """
        Gets the end_date_time of this RestSDTBase.

        :return: The end_date_time of this RestSDTBase.
        :rtype: int
        """
        return self._end_date_time

    @end_date_time.setter
    def end_date_time(self, end_date_time):
        """
        Sets the end_date_time of this RestSDTBase.

        :param end_date_time: The end_date_time of this RestSDTBase.
        :type: int
        """

        self._end_date_time = end_date_time

    @property
    def type(self):
        """
        Gets the type of this RestSDTBase.

        :return: The type of this RestSDTBase.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this RestSDTBase.

        :param type: The type of this RestSDTBase.
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def is_effective(self):
        """
        Gets the is_effective of this RestSDTBase.

        :return: The is_effective of this RestSDTBase.
        :rtype: bool
        """
        return self._is_effective

    @is_effective.setter
    def is_effective(self, is_effective):
        """
        Sets the is_effective of this RestSDTBase.

        :param is_effective: The is_effective of this RestSDTBase.
        :type: bool
        """

        self._is_effective = is_effective

    @property
    def minute(self):
        """
        Gets the minute of this RestSDTBase.

        :return: The minute of this RestSDTBase.
        :rtype: int
        """
        return self._minute

    @minute.setter
    def minute(self, minute):
        """
        Sets the minute of this RestSDTBase.

        :param minute: The minute of this RestSDTBase.
        :type: int
        """

        self._minute = minute

    @property
    def duration(self):
        """
        Gets the duration of this RestSDTBase.

        :return: The duration of this RestSDTBase.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """
        Sets the duration of this RestSDTBase.

        :param duration: The duration of this RestSDTBase.
        :type: int
        """

        self._duration = duration

    @property
    def end_hour(self):
        """
        Gets the end_hour of this RestSDTBase.

        :return: The end_hour of this RestSDTBase.
        :rtype: int
        """
        return self._end_hour

    @end_hour.setter
    def end_hour(self, end_hour):
        """
        Sets the end_hour of this RestSDTBase.

        :param end_hour: The end_hour of this RestSDTBase.
        :type: int
        """

        self._end_hour = end_hour

    @property
    def start_date_time(self):
        """
        Gets the start_date_time of this RestSDTBase.

        :return: The start_date_time of this RestSDTBase.
        :rtype: int
        """
        return self._start_date_time

    @start_date_time.setter
    def start_date_time(self, start_date_time):
        """
        Sets the start_date_time of this RestSDTBase.

        :param start_date_time: The start_date_time of this RestSDTBase.
        :type: int
        """

        self._start_date_time = start_date_time

    @property
    def hour(self):
        """
        Gets the hour of this RestSDTBase.

        :return: The hour of this RestSDTBase.
        :rtype: int
        """
        return self._hour

    @hour.setter
    def hour(self, hour):
        """
        Sets the hour of this RestSDTBase.

        :param hour: The hour of this RestSDTBase.
        :type: int
        """

        self._hour = hour

    @property
    def start_date_time_on_local(self):
        """
        Gets the start_date_time_on_local of this RestSDTBase.

        :return: The start_date_time_on_local of this RestSDTBase.
        :rtype: str
        """
        return self._start_date_time_on_local

    @start_date_time_on_local.setter
    def start_date_time_on_local(self, start_date_time_on_local):
        """
        Sets the start_date_time_on_local of this RestSDTBase.

        :param start_date_time_on_local: The start_date_time_on_local of this RestSDTBase.
        :type: str
        """

        self._start_date_time_on_local = start_date_time_on_local

    @property
    def week_day(self):
        """
        Gets the week_day of this RestSDTBase.

        :return: The week_day of this RestSDTBase.
        :rtype: int
        """
        return self._week_day

    @week_day.setter
    def week_day(self, week_day):
        """
        Sets the week_day of this RestSDTBase.

        :param week_day: The week_day of this RestSDTBase.
        :type: int
        """

        self._week_day = week_day

    @property
    def comment(self):
        """
        Gets the comment of this RestSDTBase.

        :return: The comment of this RestSDTBase.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """
        Sets the comment of this RestSDTBase.

        :param comment: The comment of this RestSDTBase.
        :type: str
        """

        self._comment = comment

    @property
    def id(self):
        """
        Gets the id of this RestSDTBase.

        :return: The id of this RestSDTBase.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this RestSDTBase.

        :param id: The id of this RestSDTBase.
        :type: str
        """

        self._id = id

    @property
    def end_minute(self):
        """
        Gets the end_minute of this RestSDTBase.

        :return: The end_minute of this RestSDTBase.
        :rtype: int
        """
        return self._end_minute

    @end_minute.setter
    def end_minute(self, end_minute):
        """
        Sets the end_minute of this RestSDTBase.

        :param end_minute: The end_minute of this RestSDTBase.
        :type: int
        """

        self._end_minute = end_minute

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, RestSDTBase):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
