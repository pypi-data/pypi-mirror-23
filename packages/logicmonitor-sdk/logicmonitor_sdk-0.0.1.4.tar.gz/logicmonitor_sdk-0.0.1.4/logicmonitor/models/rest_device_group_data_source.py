# coding: utf-8

"""
    logicmonitor_sdk

    LogicMonitor is a cloud-based, full stack, IT infrastructure monitoring solution that allows you to manage your infrastructure from the cloud. logicmonitor_sdk lets you manage your LogicMonitor account programmatically.

    OpenAPI spec version: 1.0.0
    Contact: sdk@logicmonitor.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class RestDeviceGroupDataSource(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'stop_monitoring': 'bool',
        'data_source_id': 'int',
        'data_source_group_name': 'str',
        'device_group_id': 'int',
        'data_source_display_name': 'str',
        'disable_alerting': 'bool',
        'data_source_name': 'str',
        'data_source_type': 'str'
    }

    attribute_map = {
        'stop_monitoring': 'stopMonitoring',
        'data_source_id': 'dataSourceId',
        'data_source_group_name': 'dataSourceGroupName',
        'device_group_id': 'deviceGroupId',
        'data_source_display_name': 'dataSourceDisplayName',
        'disable_alerting': 'disableAlerting',
        'data_source_name': 'dataSourceName',
        'data_source_type': 'dataSourceType'
    }

    def __init__(self, stop_monitoring=None, data_source_id=None, data_source_group_name=None, device_group_id=None, data_source_display_name=None, disable_alerting=None, data_source_name=None, data_source_type=None):
        """
        RestDeviceGroupDataSource - a model defined in Swagger
        """

        self._stop_monitoring = None
        self._data_source_id = None
        self._data_source_group_name = None
        self._device_group_id = None
        self._data_source_display_name = None
        self._disable_alerting = None
        self._data_source_name = None
        self._data_source_type = None
        self.discriminator = None

        self.stop_monitoring = stop_monitoring
        if data_source_id is not None:
          self.data_source_id = data_source_id
        if data_source_group_name is not None:
          self.data_source_group_name = data_source_group_name
        if device_group_id is not None:
          self.device_group_id = device_group_id
        if data_source_display_name is not None:
          self.data_source_display_name = data_source_display_name
        self.disable_alerting = disable_alerting
        if data_source_name is not None:
          self.data_source_name = data_source_name
        if data_source_type is not None:
          self.data_source_type = data_source_type

    @property
    def stop_monitoring(self):
        """
        Gets the stop_monitoring of this RestDeviceGroupDataSource.

        :return: The stop_monitoring of this RestDeviceGroupDataSource.
        :rtype: bool
        """
        return self._stop_monitoring

    @stop_monitoring.setter
    def stop_monitoring(self, stop_monitoring):
        """
        Sets the stop_monitoring of this RestDeviceGroupDataSource.

        :param stop_monitoring: The stop_monitoring of this RestDeviceGroupDataSource.
        :type: bool
        """
        if stop_monitoring is None:
            raise ValueError("Invalid value for `stop_monitoring`, must not be `None`")

        self._stop_monitoring = stop_monitoring

    @property
    def data_source_id(self):
        """
        Gets the data_source_id of this RestDeviceGroupDataSource.

        :return: The data_source_id of this RestDeviceGroupDataSource.
        :rtype: int
        """
        return self._data_source_id

    @data_source_id.setter
    def data_source_id(self, data_source_id):
        """
        Sets the data_source_id of this RestDeviceGroupDataSource.

        :param data_source_id: The data_source_id of this RestDeviceGroupDataSource.
        :type: int
        """

        self._data_source_id = data_source_id

    @property
    def data_source_group_name(self):
        """
        Gets the data_source_group_name of this RestDeviceGroupDataSource.

        :return: The data_source_group_name of this RestDeviceGroupDataSource.
        :rtype: str
        """
        return self._data_source_group_name

    @data_source_group_name.setter
    def data_source_group_name(self, data_source_group_name):
        """
        Sets the data_source_group_name of this RestDeviceGroupDataSource.

        :param data_source_group_name: The data_source_group_name of this RestDeviceGroupDataSource.
        :type: str
        """

        self._data_source_group_name = data_source_group_name

    @property
    def device_group_id(self):
        """
        Gets the device_group_id of this RestDeviceGroupDataSource.

        :return: The device_group_id of this RestDeviceGroupDataSource.
        :rtype: int
        """
        return self._device_group_id

    @device_group_id.setter
    def device_group_id(self, device_group_id):
        """
        Sets the device_group_id of this RestDeviceGroupDataSource.

        :param device_group_id: The device_group_id of this RestDeviceGroupDataSource.
        :type: int
        """

        self._device_group_id = device_group_id

    @property
    def data_source_display_name(self):
        """
        Gets the data_source_display_name of this RestDeviceGroupDataSource.

        :return: The data_source_display_name of this RestDeviceGroupDataSource.
        :rtype: str
        """
        return self._data_source_display_name

    @data_source_display_name.setter
    def data_source_display_name(self, data_source_display_name):
        """
        Sets the data_source_display_name of this RestDeviceGroupDataSource.

        :param data_source_display_name: The data_source_display_name of this RestDeviceGroupDataSource.
        :type: str
        """

        self._data_source_display_name = data_source_display_name

    @property
    def disable_alerting(self):
        """
        Gets the disable_alerting of this RestDeviceGroupDataSource.

        :return: The disable_alerting of this RestDeviceGroupDataSource.
        :rtype: bool
        """
        return self._disable_alerting

    @disable_alerting.setter
    def disable_alerting(self, disable_alerting):
        """
        Sets the disable_alerting of this RestDeviceGroupDataSource.

        :param disable_alerting: The disable_alerting of this RestDeviceGroupDataSource.
        :type: bool
        """
        if disable_alerting is None:
            raise ValueError("Invalid value for `disable_alerting`, must not be `None`")

        self._disable_alerting = disable_alerting

    @property
    def data_source_name(self):
        """
        Gets the data_source_name of this RestDeviceGroupDataSource.

        :return: The data_source_name of this RestDeviceGroupDataSource.
        :rtype: str
        """
        return self._data_source_name

    @data_source_name.setter
    def data_source_name(self, data_source_name):
        """
        Sets the data_source_name of this RestDeviceGroupDataSource.

        :param data_source_name: The data_source_name of this RestDeviceGroupDataSource.
        :type: str
        """

        self._data_source_name = data_source_name

    @property
    def data_source_type(self):
        """
        Gets the data_source_type of this RestDeviceGroupDataSource.

        :return: The data_source_type of this RestDeviceGroupDataSource.
        :rtype: str
        """
        return self._data_source_type

    @data_source_type.setter
    def data_source_type(self, data_source_type):
        """
        Sets the data_source_type of this RestDeviceGroupDataSource.

        :param data_source_type: The data_source_type of this RestDeviceGroupDataSource.
        :type: str
        """

        self._data_source_type = data_source_type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, RestDeviceGroupDataSource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
