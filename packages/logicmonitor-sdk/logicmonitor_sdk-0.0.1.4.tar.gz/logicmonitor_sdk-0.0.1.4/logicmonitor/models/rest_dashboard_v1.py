# coding: utf-8

"""
    logicmonitor_sdk

    LogicMonitor is a cloud-based, full stack, IT infrastructure monitoring solution that allows you to manage your infrastructure from the cloud. logicmonitor_sdk lets you manage your LogicMonitor account programmatically.

    OpenAPI spec version: 1.0.0
    Contact: sdk@logicmonitor.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class RestDashboardV1(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'owner': 'str',
        'user_permission': 'str',
        'group_id': 'int',
        'description': 'str',
        'sharable': 'bool',
        'widgets_order': 'str',
        'use_dynamic_widget': 'bool',
        'widgets_config': 'str',
        'group_name': 'str',
        'widget_tokens': 'str',
        'name': 'str',
        'id': 'int',
        'group_full_path': 'str'
    }

    attribute_map = {
        'owner': 'owner',
        'user_permission': 'userPermission',
        'group_id': 'groupId',
        'description': 'description',
        'sharable': 'sharable',
        'widgets_order': 'widgetsOrder',
        'use_dynamic_widget': 'useDynamicWidget',
        'widgets_config': 'widgetsConfig',
        'group_name': 'groupName',
        'widget_tokens': 'widgetTokens',
        'name': 'name',
        'id': 'id',
        'group_full_path': 'groupFullPath'
    }

    def __init__(self, owner=None, user_permission=None, group_id=None, description=None, sharable=None, widgets_order=None, use_dynamic_widget=None, widgets_config=None, group_name=None, widget_tokens=None, name=None, id=None, group_full_path=None):
        """
        RestDashboardV1 - a model defined in Swagger
        """

        self._owner = None
        self._user_permission = None
        self._group_id = None
        self._description = None
        self._sharable = None
        self._widgets_order = None
        self._use_dynamic_widget = None
        self._widgets_config = None
        self._group_name = None
        self._widget_tokens = None
        self._name = None
        self._id = None
        self._group_full_path = None
        self.discriminator = None

        if owner is not None:
          self.owner = owner
        if user_permission is not None:
          self.user_permission = user_permission
        if group_id is not None:
          self.group_id = group_id
        if description is not None:
          self.description = description
        if sharable is not None:
          self.sharable = sharable
        if widgets_order is not None:
          self.widgets_order = widgets_order
        if use_dynamic_widget is not None:
          self.use_dynamic_widget = use_dynamic_widget
        if widgets_config is not None:
          self.widgets_config = widgets_config
        if group_name is not None:
          self.group_name = group_name
        if widget_tokens is not None:
          self.widget_tokens = widget_tokens
        self.name = name
        if id is not None:
          self.id = id
        if group_full_path is not None:
          self.group_full_path = group_full_path

    @property
    def owner(self):
        """
        Gets the owner of this RestDashboardV1.

        :return: The owner of this RestDashboardV1.
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """
        Sets the owner of this RestDashboardV1.

        :param owner: The owner of this RestDashboardV1.
        :type: str
        """

        self._owner = owner

    @property
    def user_permission(self):
        """
        Gets the user_permission of this RestDashboardV1.

        :return: The user_permission of this RestDashboardV1.
        :rtype: str
        """
        return self._user_permission

    @user_permission.setter
    def user_permission(self, user_permission):
        """
        Sets the user_permission of this RestDashboardV1.

        :param user_permission: The user_permission of this RestDashboardV1.
        :type: str
        """

        self._user_permission = user_permission

    @property
    def group_id(self):
        """
        Gets the group_id of this RestDashboardV1.

        :return: The group_id of this RestDashboardV1.
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """
        Sets the group_id of this RestDashboardV1.

        :param group_id: The group_id of this RestDashboardV1.
        :type: int
        """

        self._group_id = group_id

    @property
    def description(self):
        """
        Gets the description of this RestDashboardV1.

        :return: The description of this RestDashboardV1.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this RestDashboardV1.

        :param description: The description of this RestDashboardV1.
        :type: str
        """

        self._description = description

    @property
    def sharable(self):
        """
        Gets the sharable of this RestDashboardV1.

        :return: The sharable of this RestDashboardV1.
        :rtype: bool
        """
        return self._sharable

    @sharable.setter
    def sharable(self, sharable):
        """
        Sets the sharable of this RestDashboardV1.

        :param sharable: The sharable of this RestDashboardV1.
        :type: bool
        """

        self._sharable = sharable

    @property
    def widgets_order(self):
        """
        Gets the widgets_order of this RestDashboardV1.

        :return: The widgets_order of this RestDashboardV1.
        :rtype: str
        """
        return self._widgets_order

    @widgets_order.setter
    def widgets_order(self, widgets_order):
        """
        Sets the widgets_order of this RestDashboardV1.

        :param widgets_order: The widgets_order of this RestDashboardV1.
        :type: str
        """

        self._widgets_order = widgets_order

    @property
    def use_dynamic_widget(self):
        """
        Gets the use_dynamic_widget of this RestDashboardV1.

        :return: The use_dynamic_widget of this RestDashboardV1.
        :rtype: bool
        """
        return self._use_dynamic_widget

    @use_dynamic_widget.setter
    def use_dynamic_widget(self, use_dynamic_widget):
        """
        Sets the use_dynamic_widget of this RestDashboardV1.

        :param use_dynamic_widget: The use_dynamic_widget of this RestDashboardV1.
        :type: bool
        """

        self._use_dynamic_widget = use_dynamic_widget

    @property
    def widgets_config(self):
        """
        Gets the widgets_config of this RestDashboardV1.

        :return: The widgets_config of this RestDashboardV1.
        :rtype: str
        """
        return self._widgets_config

    @widgets_config.setter
    def widgets_config(self, widgets_config):
        """
        Sets the widgets_config of this RestDashboardV1.

        :param widgets_config: The widgets_config of this RestDashboardV1.
        :type: str
        """

        self._widgets_config = widgets_config

    @property
    def group_name(self):
        """
        Gets the group_name of this RestDashboardV1.

        :return: The group_name of this RestDashboardV1.
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """
        Sets the group_name of this RestDashboardV1.

        :param group_name: The group_name of this RestDashboardV1.
        :type: str
        """

        self._group_name = group_name

    @property
    def widget_tokens(self):
        """
        Gets the widget_tokens of this RestDashboardV1.
        This is a JSON array String

        :return: The widget_tokens of this RestDashboardV1.
        :rtype: str
        """
        return self._widget_tokens

    @widget_tokens.setter
    def widget_tokens(self, widget_tokens):
        """
        Sets the widget_tokens of this RestDashboardV1.
        This is a JSON array String

        :param widget_tokens: The widget_tokens of this RestDashboardV1.
        :type: str
        """

        self._widget_tokens = widget_tokens

    @property
    def name(self):
        """
        Gets the name of this RestDashboardV1.

        :return: The name of this RestDashboardV1.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this RestDashboardV1.

        :param name: The name of this RestDashboardV1.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def id(self):
        """
        Gets the id of this RestDashboardV1.

        :return: The id of this RestDashboardV1.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this RestDashboardV1.

        :param id: The id of this RestDashboardV1.
        :type: int
        """

        self._id = id

    @property
    def group_full_path(self):
        """
        Gets the group_full_path of this RestDashboardV1.

        :return: The group_full_path of this RestDashboardV1.
        :rtype: str
        """
        return self._group_full_path

    @group_full_path.setter
    def group_full_path(self, group_full_path):
        """
        Sets the group_full_path of this RestDashboardV1.

        :param group_full_path: The group_full_path of this RestDashboardV1.
        :type: str
        """

        self._group_full_path = group_full_path

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, RestDashboardV1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
