# coding: utf-8

"""
    logicmonitor_sdk

    LogicMonitor is a cloud-based, full stack, IT infrastructure monitoring solution that allows you to manage your infrastructure from the cloud. logicmonitor_sdk lets you manage your LogicMonitor account programmatically.

    OpenAPI spec version: 1.0.0
    Contact: sdk@logicmonitor.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class RestServiceGraphWidget(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'row_span': 'int',
        'last_updated_by': 'str',
        'user_permission': 'str',
        'geo_info': 'str',
        'col_span': 'int',
        'description': 'str',
        'type': 'str',
        'service_name': 'str',
        'graph': 'str',
        'column_idx': 'int',
        'dashboard_id': 'int',
        'extra': 'str',
        'name': 'str',
        'last_updated_on': 'int',
        'theme': 'str',
        'interval': 'int',
        'service_checkpoint_id': 'int',
        'id': 'int',
        'timescale': 'str',
        'order': 'int'
    }

    attribute_map = {
        'row_span': 'rowSpan',
        'last_updated_by': 'lastUpdatedBy',
        'user_permission': 'userPermission',
        'geo_info': 'geoInfo',
        'col_span': 'colSpan',
        'description': 'description',
        'type': 'type',
        'service_name': 'serviceName',
        'graph': 'graph',
        'column_idx': 'columnIdx',
        'dashboard_id': 'dashboardId',
        'extra': 'extra',
        'name': 'name',
        'last_updated_on': 'lastUpdatedOn',
        'theme': 'theme',
        'interval': 'interval',
        'service_checkpoint_id': 'serviceCheckpointId',
        'id': 'id',
        'timescale': 'timescale',
        'order': 'order'
    }

    def __init__(self, row_span=None, last_updated_by=None, user_permission=None, geo_info=None, col_span=None, description=None, type=None, service_name=None, graph=None, column_idx=None, dashboard_id=None, extra=None, name=None, last_updated_on=None, theme=None, interval=None, service_checkpoint_id=None, id=None, timescale=None, order=None):
        """
        RestServiceGraphWidget - a model defined in Swagger
        """

        self._row_span = None
        self._last_updated_by = None
        self._user_permission = None
        self._geo_info = None
        self._col_span = None
        self._description = None
        self._type = None
        self._service_name = None
        self._graph = None
        self._column_idx = None
        self._dashboard_id = None
        self._extra = None
        self._name = None
        self._last_updated_on = None
        self._theme = None
        self._interval = None
        self._service_checkpoint_id = None
        self._id = None
        self._timescale = None
        self._order = None
        self.discriminator = None

        if row_span is not None:
          self.row_span = row_span
        if last_updated_by is not None:
          self.last_updated_by = last_updated_by
        if user_permission is not None:
          self.user_permission = user_permission
        if geo_info is not None:
          self.geo_info = geo_info
        if col_span is not None:
          self.col_span = col_span
        if description is not None:
          self.description = description
        self.type = type
        if service_name is not None:
          self.service_name = service_name
        if graph is not None:
          self.graph = graph
        if column_idx is not None:
          self.column_idx = column_idx
        self.dashboard_id = dashboard_id
        if extra is not None:
          self.extra = extra
        self.name = name
        if last_updated_on is not None:
          self.last_updated_on = last_updated_on
        if theme is not None:
          self.theme = theme
        if interval is not None:
          self.interval = interval
        self.service_checkpoint_id = service_checkpoint_id
        if id is not None:
          self.id = id
        if timescale is not None:
          self.timescale = timescale
        if order is not None:
          self.order = order

    @property
    def row_span(self):
        """
        Gets the row_span of this RestServiceGraphWidget.

        :return: The row_span of this RestServiceGraphWidget.
        :rtype: int
        """
        return self._row_span

    @row_span.setter
    def row_span(self, row_span):
        """
        Sets the row_span of this RestServiceGraphWidget.

        :param row_span: The row_span of this RestServiceGraphWidget.
        :type: int
        """

        self._row_span = row_span

    @property
    def last_updated_by(self):
        """
        Gets the last_updated_by of this RestServiceGraphWidget.

        :return: The last_updated_by of this RestServiceGraphWidget.
        :rtype: str
        """
        return self._last_updated_by

    @last_updated_by.setter
    def last_updated_by(self, last_updated_by):
        """
        Sets the last_updated_by of this RestServiceGraphWidget.

        :param last_updated_by: The last_updated_by of this RestServiceGraphWidget.
        :type: str
        """

        self._last_updated_by = last_updated_by

    @property
    def user_permission(self):
        """
        Gets the user_permission of this RestServiceGraphWidget.

        :return: The user_permission of this RestServiceGraphWidget.
        :rtype: str
        """
        return self._user_permission

    @user_permission.setter
    def user_permission(self, user_permission):
        """
        Sets the user_permission of this RestServiceGraphWidget.

        :param user_permission: The user_permission of this RestServiceGraphWidget.
        :type: str
        """

        self._user_permission = user_permission

    @property
    def geo_info(self):
        """
        Gets the geo_info of this RestServiceGraphWidget.

        :return: The geo_info of this RestServiceGraphWidget.
        :rtype: str
        """
        return self._geo_info

    @geo_info.setter
    def geo_info(self, geo_info):
        """
        Sets the geo_info of this RestServiceGraphWidget.

        :param geo_info: The geo_info of this RestServiceGraphWidget.
        :type: str
        """

        self._geo_info = geo_info

    @property
    def col_span(self):
        """
        Gets the col_span of this RestServiceGraphWidget.

        :return: The col_span of this RestServiceGraphWidget.
        :rtype: int
        """
        return self._col_span

    @col_span.setter
    def col_span(self, col_span):
        """
        Sets the col_span of this RestServiceGraphWidget.

        :param col_span: The col_span of this RestServiceGraphWidget.
        :type: int
        """

        self._col_span = col_span

    @property
    def description(self):
        """
        Gets the description of this RestServiceGraphWidget.

        :return: The description of this RestServiceGraphWidget.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this RestServiceGraphWidget.

        :param description: The description of this RestServiceGraphWidget.
        :type: str
        """

        self._description = description

    @property
    def type(self):
        """
        Gets the type of this RestServiceGraphWidget.

        :return: The type of this RestServiceGraphWidget.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this RestServiceGraphWidget.

        :param type: The type of this RestServiceGraphWidget.
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def service_name(self):
        """
        Gets the service_name of this RestServiceGraphWidget.

        :return: The service_name of this RestServiceGraphWidget.
        :rtype: str
        """
        return self._service_name

    @service_name.setter
    def service_name(self, service_name):
        """
        Sets the service_name of this RestServiceGraphWidget.

        :param service_name: The service_name of this RestServiceGraphWidget.
        :type: str
        """

        self._service_name = service_name

    @property
    def graph(self):
        """
        Gets the graph of this RestServiceGraphWidget.

        :return: The graph of this RestServiceGraphWidget.
        :rtype: str
        """
        return self._graph

    @graph.setter
    def graph(self, graph):
        """
        Sets the graph of this RestServiceGraphWidget.

        :param graph: The graph of this RestServiceGraphWidget.
        :type: str
        """

        self._graph = graph

    @property
    def column_idx(self):
        """
        Gets the column_idx of this RestServiceGraphWidget.

        :return: The column_idx of this RestServiceGraphWidget.
        :rtype: int
        """
        return self._column_idx

    @column_idx.setter
    def column_idx(self, column_idx):
        """
        Sets the column_idx of this RestServiceGraphWidget.

        :param column_idx: The column_idx of this RestServiceGraphWidget.
        :type: int
        """

        self._column_idx = column_idx

    @property
    def dashboard_id(self):
        """
        Gets the dashboard_id of this RestServiceGraphWidget.

        :return: The dashboard_id of this RestServiceGraphWidget.
        :rtype: int
        """
        return self._dashboard_id

    @dashboard_id.setter
    def dashboard_id(self, dashboard_id):
        """
        Sets the dashboard_id of this RestServiceGraphWidget.

        :param dashboard_id: The dashboard_id of this RestServiceGraphWidget.
        :type: int
        """
        if dashboard_id is None:
            raise ValueError("Invalid value for `dashboard_id`, must not be `None`")

        self._dashboard_id = dashboard_id

    @property
    def extra(self):
        """
        Gets the extra of this RestServiceGraphWidget.

        :return: The extra of this RestServiceGraphWidget.
        :rtype: str
        """
        return self._extra

    @extra.setter
    def extra(self, extra):
        """
        Sets the extra of this RestServiceGraphWidget.

        :param extra: The extra of this RestServiceGraphWidget.
        :type: str
        """

        self._extra = extra

    @property
    def name(self):
        """
        Gets the name of this RestServiceGraphWidget.

        :return: The name of this RestServiceGraphWidget.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this RestServiceGraphWidget.

        :param name: The name of this RestServiceGraphWidget.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def last_updated_on(self):
        """
        Gets the last_updated_on of this RestServiceGraphWidget.

        :return: The last_updated_on of this RestServiceGraphWidget.
        :rtype: int
        """
        return self._last_updated_on

    @last_updated_on.setter
    def last_updated_on(self, last_updated_on):
        """
        Sets the last_updated_on of this RestServiceGraphWidget.

        :param last_updated_on: The last_updated_on of this RestServiceGraphWidget.
        :type: int
        """

        self._last_updated_on = last_updated_on

    @property
    def theme(self):
        """
        Gets the theme of this RestServiceGraphWidget.

        :return: The theme of this RestServiceGraphWidget.
        :rtype: str
        """
        return self._theme

    @theme.setter
    def theme(self, theme):
        """
        Sets the theme of this RestServiceGraphWidget.

        :param theme: The theme of this RestServiceGraphWidget.
        :type: str
        """

        self._theme = theme

    @property
    def interval(self):
        """
        Gets the interval of this RestServiceGraphWidget.

        :return: The interval of this RestServiceGraphWidget.
        :rtype: int
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """
        Sets the interval of this RestServiceGraphWidget.

        :param interval: The interval of this RestServiceGraphWidget.
        :type: int
        """

        self._interval = interval

    @property
    def service_checkpoint_id(self):
        """
        Gets the service_checkpoint_id of this RestServiceGraphWidget.

        :return: The service_checkpoint_id of this RestServiceGraphWidget.
        :rtype: int
        """
        return self._service_checkpoint_id

    @service_checkpoint_id.setter
    def service_checkpoint_id(self, service_checkpoint_id):
        """
        Sets the service_checkpoint_id of this RestServiceGraphWidget.

        :param service_checkpoint_id: The service_checkpoint_id of this RestServiceGraphWidget.
        :type: int
        """
        if service_checkpoint_id is None:
            raise ValueError("Invalid value for `service_checkpoint_id`, must not be `None`")

        self._service_checkpoint_id = service_checkpoint_id

    @property
    def id(self):
        """
        Gets the id of this RestServiceGraphWidget.

        :return: The id of this RestServiceGraphWidget.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this RestServiceGraphWidget.

        :param id: The id of this RestServiceGraphWidget.
        :type: int
        """

        self._id = id

    @property
    def timescale(self):
        """
        Gets the timescale of this RestServiceGraphWidget.

        :return: The timescale of this RestServiceGraphWidget.
        :rtype: str
        """
        return self._timescale

    @timescale.setter
    def timescale(self, timescale):
        """
        Sets the timescale of this RestServiceGraphWidget.

        :param timescale: The timescale of this RestServiceGraphWidget.
        :type: str
        """

        self._timescale = timescale

    @property
    def order(self):
        """
        Gets the order of this RestServiceGraphWidget.

        :return: The order of this RestServiceGraphWidget.
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """
        Sets the order of this RestServiceGraphWidget.

        :param order: The order of this RestServiceGraphWidget.
        :type: int
        """

        self._order = order

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, RestServiceGraphWidget):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
