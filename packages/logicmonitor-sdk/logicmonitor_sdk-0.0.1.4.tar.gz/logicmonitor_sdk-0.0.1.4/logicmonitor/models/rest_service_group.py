# coding: utf-8

"""
    logicmonitor_sdk

    LogicMonitor is a cloud-based, full stack, IT infrastructure monitoring solution that allows you to manage your infrastructure from the cloud. logicmonitor_sdk lets you manage your LogicMonitor account programmatically.

    OpenAPI spec version: 1.0.0
    Contact: sdk@logicmonitor.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class RestServiceGroup(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'alert_status': 'str',
        'num_of_services': 'int',
        'full_path': 'str',
        'stop_monitoring': 'bool',
        'has_services_disabled': 'bool',
        'user_permission': 'str',
        'test_location': 'str',
        'description': 'str',
        'disable_alerting': 'bool',
        'group_status': 'str',
        'sdt_status': 'str',
        'parent_id': 'int',
        'name': 'str',
        'num_of_direct_sub_groups': 'int',
        'sub_groups': 'list[GroupData]',
        'id': 'int',
        'alert_status_priority': 'int',
        'alert_disable_status': 'str',
        'service_properties': 'list[NameAndValue]',
        'num_of_direct_services': 'int'
    }

    attribute_map = {
        'alert_status': 'alertStatus',
        'num_of_services': 'numOfServices',
        'full_path': 'fullPath',
        'stop_monitoring': 'stopMonitoring',
        'has_services_disabled': 'hasServicesDisabled',
        'user_permission': 'userPermission',
        'test_location': 'testLocation',
        'description': 'description',
        'disable_alerting': 'disableAlerting',
        'group_status': 'groupStatus',
        'sdt_status': 'sdtStatus',
        'parent_id': 'parentId',
        'name': 'name',
        'num_of_direct_sub_groups': 'numOfDirectSubGroups',
        'sub_groups': 'subGroups',
        'id': 'id',
        'alert_status_priority': 'alertStatusPriority',
        'alert_disable_status': 'alertDisableStatus',
        'service_properties': 'serviceProperties',
        'num_of_direct_services': 'numOfDirectServices'
    }

    def __init__(self, alert_status=None, num_of_services=None, full_path=None, stop_monitoring=None, has_services_disabled=None, user_permission=None, test_location=None, description=None, disable_alerting=None, group_status=None, sdt_status=None, parent_id=None, name=None, num_of_direct_sub_groups=None, sub_groups=None, id=None, alert_status_priority=None, alert_disable_status=None, service_properties=None, num_of_direct_services=None):
        """
        RestServiceGroup - a model defined in Swagger
        """

        self._alert_status = None
        self._num_of_services = None
        self._full_path = None
        self._stop_monitoring = None
        self._has_services_disabled = None
        self._user_permission = None
        self._test_location = None
        self._description = None
        self._disable_alerting = None
        self._group_status = None
        self._sdt_status = None
        self._parent_id = None
        self._name = None
        self._num_of_direct_sub_groups = None
        self._sub_groups = None
        self._id = None
        self._alert_status_priority = None
        self._alert_disable_status = None
        self._service_properties = None
        self._num_of_direct_services = None
        self.discriminator = None

        if alert_status is not None:
          self.alert_status = alert_status
        if num_of_services is not None:
          self.num_of_services = num_of_services
        if full_path is not None:
          self.full_path = full_path
        if stop_monitoring is not None:
          self.stop_monitoring = stop_monitoring
        if has_services_disabled is not None:
          self.has_services_disabled = has_services_disabled
        if user_permission is not None:
          self.user_permission = user_permission
        if test_location is not None:
          self.test_location = test_location
        if description is not None:
          self.description = description
        if disable_alerting is not None:
          self.disable_alerting = disable_alerting
        if group_status is not None:
          self.group_status = group_status
        if sdt_status is not None:
          self.sdt_status = sdt_status
        if parent_id is not None:
          self.parent_id = parent_id
        self.name = name
        if num_of_direct_sub_groups is not None:
          self.num_of_direct_sub_groups = num_of_direct_sub_groups
        if sub_groups is not None:
          self.sub_groups = sub_groups
        if id is not None:
          self.id = id
        if alert_status_priority is not None:
          self.alert_status_priority = alert_status_priority
        if alert_disable_status is not None:
          self.alert_disable_status = alert_disable_status
        if service_properties is not None:
          self.service_properties = service_properties
        if num_of_direct_services is not None:
          self.num_of_direct_services = num_of_direct_services

    @property
    def alert_status(self):
        """
        Gets the alert_status of this RestServiceGroup.

        :return: The alert_status of this RestServiceGroup.
        :rtype: str
        """
        return self._alert_status

    @alert_status.setter
    def alert_status(self, alert_status):
        """
        Sets the alert_status of this RestServiceGroup.

        :param alert_status: The alert_status of this RestServiceGroup.
        :type: str
        """

        self._alert_status = alert_status

    @property
    def num_of_services(self):
        """
        Gets the num_of_services of this RestServiceGroup.

        :return: The num_of_services of this RestServiceGroup.
        :rtype: int
        """
        return self._num_of_services

    @num_of_services.setter
    def num_of_services(self, num_of_services):
        """
        Sets the num_of_services of this RestServiceGroup.

        :param num_of_services: The num_of_services of this RestServiceGroup.
        :type: int
        """

        self._num_of_services = num_of_services

    @property
    def full_path(self):
        """
        Gets the full_path of this RestServiceGroup.

        :return: The full_path of this RestServiceGroup.
        :rtype: str
        """
        return self._full_path

    @full_path.setter
    def full_path(self, full_path):
        """
        Sets the full_path of this RestServiceGroup.

        :param full_path: The full_path of this RestServiceGroup.
        :type: str
        """

        self._full_path = full_path

    @property
    def stop_monitoring(self):
        """
        Gets the stop_monitoring of this RestServiceGroup.

        :return: The stop_monitoring of this RestServiceGroup.
        :rtype: bool
        """
        return self._stop_monitoring

    @stop_monitoring.setter
    def stop_monitoring(self, stop_monitoring):
        """
        Sets the stop_monitoring of this RestServiceGroup.

        :param stop_monitoring: The stop_monitoring of this RestServiceGroup.
        :type: bool
        """

        self._stop_monitoring = stop_monitoring

    @property
    def has_services_disabled(self):
        """
        Gets the has_services_disabled of this RestServiceGroup.

        :return: The has_services_disabled of this RestServiceGroup.
        :rtype: bool
        """
        return self._has_services_disabled

    @has_services_disabled.setter
    def has_services_disabled(self, has_services_disabled):
        """
        Sets the has_services_disabled of this RestServiceGroup.

        :param has_services_disabled: The has_services_disabled of this RestServiceGroup.
        :type: bool
        """

        self._has_services_disabled = has_services_disabled

    @property
    def user_permission(self):
        """
        Gets the user_permission of this RestServiceGroup.

        :return: The user_permission of this RestServiceGroup.
        :rtype: str
        """
        return self._user_permission

    @user_permission.setter
    def user_permission(self, user_permission):
        """
        Sets the user_permission of this RestServiceGroup.

        :param user_permission: The user_permission of this RestServiceGroup.
        :type: str
        """

        self._user_permission = user_permission

    @property
    def test_location(self):
        """
        Gets the test_location of this RestServiceGroup.

        :return: The test_location of this RestServiceGroup.
        :rtype: str
        """
        return self._test_location

    @test_location.setter
    def test_location(self, test_location):
        """
        Sets the test_location of this RestServiceGroup.

        :param test_location: The test_location of this RestServiceGroup.
        :type: str
        """

        self._test_location = test_location

    @property
    def description(self):
        """
        Gets the description of this RestServiceGroup.

        :return: The description of this RestServiceGroup.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this RestServiceGroup.

        :param description: The description of this RestServiceGroup.
        :type: str
        """

        self._description = description

    @property
    def disable_alerting(self):
        """
        Gets the disable_alerting of this RestServiceGroup.

        :return: The disable_alerting of this RestServiceGroup.
        :rtype: bool
        """
        return self._disable_alerting

    @disable_alerting.setter
    def disable_alerting(self, disable_alerting):
        """
        Sets the disable_alerting of this RestServiceGroup.

        :param disable_alerting: The disable_alerting of this RestServiceGroup.
        :type: bool
        """

        self._disable_alerting = disable_alerting

    @property
    def group_status(self):
        """
        Gets the group_status of this RestServiceGroup.

        :return: The group_status of this RestServiceGroup.
        :rtype: str
        """
        return self._group_status

    @group_status.setter
    def group_status(self, group_status):
        """
        Sets the group_status of this RestServiceGroup.

        :param group_status: The group_status of this RestServiceGroup.
        :type: str
        """

        self._group_status = group_status

    @property
    def sdt_status(self):
        """
        Gets the sdt_status of this RestServiceGroup.

        :return: The sdt_status of this RestServiceGroup.
        :rtype: str
        """
        return self._sdt_status

    @sdt_status.setter
    def sdt_status(self, sdt_status):
        """
        Sets the sdt_status of this RestServiceGroup.

        :param sdt_status: The sdt_status of this RestServiceGroup.
        :type: str
        """

        self._sdt_status = sdt_status

    @property
    def parent_id(self):
        """
        Gets the parent_id of this RestServiceGroup.

        :return: The parent_id of this RestServiceGroup.
        :rtype: int
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """
        Sets the parent_id of this RestServiceGroup.

        :param parent_id: The parent_id of this RestServiceGroup.
        :type: int
        """

        self._parent_id = parent_id

    @property
    def name(self):
        """
        Gets the name of this RestServiceGroup.

        :return: The name of this RestServiceGroup.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this RestServiceGroup.

        :param name: The name of this RestServiceGroup.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def num_of_direct_sub_groups(self):
        """
        Gets the num_of_direct_sub_groups of this RestServiceGroup.

        :return: The num_of_direct_sub_groups of this RestServiceGroup.
        :rtype: int
        """
        return self._num_of_direct_sub_groups

    @num_of_direct_sub_groups.setter
    def num_of_direct_sub_groups(self, num_of_direct_sub_groups):
        """
        Sets the num_of_direct_sub_groups of this RestServiceGroup.

        :param num_of_direct_sub_groups: The num_of_direct_sub_groups of this RestServiceGroup.
        :type: int
        """

        self._num_of_direct_sub_groups = num_of_direct_sub_groups

    @property
    def sub_groups(self):
        """
        Gets the sub_groups of this RestServiceGroup.

        :return: The sub_groups of this RestServiceGroup.
        :rtype: list[GroupData]
        """
        return self._sub_groups

    @sub_groups.setter
    def sub_groups(self, sub_groups):
        """
        Sets the sub_groups of this RestServiceGroup.

        :param sub_groups: The sub_groups of this RestServiceGroup.
        :type: list[GroupData]
        """

        self._sub_groups = sub_groups

    @property
    def id(self):
        """
        Gets the id of this RestServiceGroup.

        :return: The id of this RestServiceGroup.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this RestServiceGroup.

        :param id: The id of this RestServiceGroup.
        :type: int
        """

        self._id = id

    @property
    def alert_status_priority(self):
        """
        Gets the alert_status_priority of this RestServiceGroup.

        :return: The alert_status_priority of this RestServiceGroup.
        :rtype: int
        """
        return self._alert_status_priority

    @alert_status_priority.setter
    def alert_status_priority(self, alert_status_priority):
        """
        Sets the alert_status_priority of this RestServiceGroup.

        :param alert_status_priority: The alert_status_priority of this RestServiceGroup.
        :type: int
        """

        self._alert_status_priority = alert_status_priority

    @property
    def alert_disable_status(self):
        """
        Gets the alert_disable_status of this RestServiceGroup.

        :return: The alert_disable_status of this RestServiceGroup.
        :rtype: str
        """
        return self._alert_disable_status

    @alert_disable_status.setter
    def alert_disable_status(self, alert_disable_status):
        """
        Sets the alert_disable_status of this RestServiceGroup.

        :param alert_disable_status: The alert_disable_status of this RestServiceGroup.
        :type: str
        """

        self._alert_disable_status = alert_disable_status

    @property
    def service_properties(self):
        """
        Gets the service_properties of this RestServiceGroup.

        :return: The service_properties of this RestServiceGroup.
        :rtype: list[NameAndValue]
        """
        return self._service_properties

    @service_properties.setter
    def service_properties(self, service_properties):
        """
        Sets the service_properties of this RestServiceGroup.

        :param service_properties: The service_properties of this RestServiceGroup.
        :type: list[NameAndValue]
        """

        self._service_properties = service_properties

    @property
    def num_of_direct_services(self):
        """
        Gets the num_of_direct_services of this RestServiceGroup.

        :return: The num_of_direct_services of this RestServiceGroup.
        :rtype: int
        """
        return self._num_of_direct_services

    @num_of_direct_services.setter
    def num_of_direct_services(self, num_of_direct_services):
        """
        Sets the num_of_direct_services of this RestServiceGroup.

        :param num_of_direct_services: The num_of_direct_services of this RestServiceGroup.
        :type: int
        """

        self._num_of_direct_services = num_of_direct_services

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, RestServiceGroup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
