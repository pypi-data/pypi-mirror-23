# coding: utf-8

"""
    logicmonitor_sdk

    LogicMonitor is a cloud-based, full stack, IT infrastructure monitoring solution that allows you to manage your infrastructure from the cloud. logicmonitor_sdk lets you manage your LogicMonitor account programmatically.

    OpenAPI spec version: 1.0.0
    Contact: sdk@logicmonitor.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Period(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'week_days': 'list[int]',
        'start_minutes': 'int',
        'end_minutes': 'int'
    }

    attribute_map = {
        'week_days': 'weekDays',
        'start_minutes': 'startMinutes',
        'end_minutes': 'endMinutes'
    }

    def __init__(self, week_days=None, start_minutes=None, end_minutes=None):
        """
        Period - a model defined in Swagger
        """

        self._week_days = None
        self._start_minutes = None
        self._end_minutes = None
        self.discriminator = None

        self.week_days = week_days
        self.start_minutes = start_minutes
        self.end_minutes = end_minutes

    @property
    def week_days(self):
        """
        Gets the week_days of this Period.

        :return: The week_days of this Period.
        :rtype: list[int]
        """
        return self._week_days

    @week_days.setter
    def week_days(self, week_days):
        """
        Sets the week_days of this Period.

        :param week_days: The week_days of this Period.
        :type: list[int]
        """
        if week_days is None:
            raise ValueError("Invalid value for `week_days`, must not be `None`")

        self._week_days = week_days

    @property
    def start_minutes(self):
        """
        Gets the start_minutes of this Period.

        :return: The start_minutes of this Period.
        :rtype: int
        """
        return self._start_minutes

    @start_minutes.setter
    def start_minutes(self, start_minutes):
        """
        Sets the start_minutes of this Period.

        :param start_minutes: The start_minutes of this Period.
        :type: int
        """
        if start_minutes is None:
            raise ValueError("Invalid value for `start_minutes`, must not be `None`")

        self._start_minutes = start_minutes

    @property
    def end_minutes(self):
        """
        Gets the end_minutes of this Period.

        :return: The end_minutes of this Period.
        :rtype: int
        """
        return self._end_minutes

    @end_minutes.setter
    def end_minutes(self, end_minutes):
        """
        Sets the end_minutes of this Period.

        :param end_minutes: The end_minutes of this Period.
        :type: int
        """
        if end_minutes is None:
            raise ValueError("Invalid value for `end_minutes`, must not be `None`")

        self._end_minutes = end_minutes

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Period):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
