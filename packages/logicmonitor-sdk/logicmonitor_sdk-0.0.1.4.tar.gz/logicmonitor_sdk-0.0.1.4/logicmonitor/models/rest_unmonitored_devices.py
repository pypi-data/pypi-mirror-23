# coding: utf-8

"""
    logicmonitor_sdk

    LogicMonitor is a cloud-based, full stack, IT infrastructure monitoring solution that allows you to manage your infrastructure from the cloud. logicmonitor_sdk lets you manage your LogicMonitor account programmatically.

    OpenAPI spec version: 1.0.0
    Contact: sdk@logicmonitor.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class RestUnmonitoredDevices(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'device_type': 'str',
        'nsp_id': 'int',
        'forward_ip': 'str',
        'end_date': 'str',
        'ip': 'str',
        'dns': 'str',
        'collector_id': 'int',
        'ports': 'str',
        'nsp_name': 'str',
        'device_status': 'str',
        'collector_description': 'str',
        'display_as': 'str',
        'sys_name': 'str',
        'nse_id': 'int',
        'id': 'int',
        'end_timestamp': 'int',
        'status': 'str',
        'nse_scan_id': 'str'
    }

    attribute_map = {
        'device_type': 'deviceType',
        'nsp_id': 'nspId',
        'forward_ip': 'forwardIp',
        'end_date': 'endDate',
        'ip': 'ip',
        'dns': 'dns',
        'collector_id': 'collectorId',
        'ports': 'ports',
        'nsp_name': 'nspName',
        'device_status': 'deviceStatus',
        'collector_description': 'collectorDescription',
        'display_as': 'displayAs',
        'sys_name': 'sysName',
        'nse_id': 'nseId',
        'id': 'id',
        'end_timestamp': 'endTimestamp',
        'status': 'status',
        'nse_scan_id': 'nseScanId'
    }

    def __init__(self, device_type=None, nsp_id=None, forward_ip=None, end_date=None, ip=None, dns=None, collector_id=None, ports=None, nsp_name=None, device_status=None, collector_description=None, display_as=None, sys_name=None, nse_id=None, id=None, end_timestamp=None, status=None, nse_scan_id=None):
        """
        RestUnmonitoredDevices - a model defined in Swagger
        """

        self._device_type = None
        self._nsp_id = None
        self._forward_ip = None
        self._end_date = None
        self._ip = None
        self._dns = None
        self._collector_id = None
        self._ports = None
        self._nsp_name = None
        self._device_status = None
        self._collector_description = None
        self._display_as = None
        self._sys_name = None
        self._nse_id = None
        self._id = None
        self._end_timestamp = None
        self._status = None
        self._nse_scan_id = None
        self.discriminator = None

        if device_type is not None:
          self.device_type = device_type
        if nsp_id is not None:
          self.nsp_id = nsp_id
        if forward_ip is not None:
          self.forward_ip = forward_ip
        if end_date is not None:
          self.end_date = end_date
        if ip is not None:
          self.ip = ip
        if dns is not None:
          self.dns = dns
        if collector_id is not None:
          self.collector_id = collector_id
        if ports is not None:
          self.ports = ports
        if nsp_name is not None:
          self.nsp_name = nsp_name
        if device_status is not None:
          self.device_status = device_status
        if collector_description is not None:
          self.collector_description = collector_description
        if display_as is not None:
          self.display_as = display_as
        if sys_name is not None:
          self.sys_name = sys_name
        if nse_id is not None:
          self.nse_id = nse_id
        if id is not None:
          self.id = id
        if end_timestamp is not None:
          self.end_timestamp = end_timestamp
        if status is not None:
          self.status = status
        if nse_scan_id is not None:
          self.nse_scan_id = nse_scan_id

    @property
    def device_type(self):
        """
        Gets the device_type of this RestUnmonitoredDevices.

        :return: The device_type of this RestUnmonitoredDevices.
        :rtype: str
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type):
        """
        Sets the device_type of this RestUnmonitoredDevices.

        :param device_type: The device_type of this RestUnmonitoredDevices.
        :type: str
        """

        self._device_type = device_type

    @property
    def nsp_id(self):
        """
        Gets the nsp_id of this RestUnmonitoredDevices.

        :return: The nsp_id of this RestUnmonitoredDevices.
        :rtype: int
        """
        return self._nsp_id

    @nsp_id.setter
    def nsp_id(self, nsp_id):
        """
        Sets the nsp_id of this RestUnmonitoredDevices.

        :param nsp_id: The nsp_id of this RestUnmonitoredDevices.
        :type: int
        """

        self._nsp_id = nsp_id

    @property
    def forward_ip(self):
        """
        Gets the forward_ip of this RestUnmonitoredDevices.

        :return: The forward_ip of this RestUnmonitoredDevices.
        :rtype: str
        """
        return self._forward_ip

    @forward_ip.setter
    def forward_ip(self, forward_ip):
        """
        Sets the forward_ip of this RestUnmonitoredDevices.

        :param forward_ip: The forward_ip of this RestUnmonitoredDevices.
        :type: str
        """

        self._forward_ip = forward_ip

    @property
    def end_date(self):
        """
        Gets the end_date of this RestUnmonitoredDevices.

        :return: The end_date of this RestUnmonitoredDevices.
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """
        Sets the end_date of this RestUnmonitoredDevices.

        :param end_date: The end_date of this RestUnmonitoredDevices.
        :type: str
        """

        self._end_date = end_date

    @property
    def ip(self):
        """
        Gets the ip of this RestUnmonitoredDevices.

        :return: The ip of this RestUnmonitoredDevices.
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """
        Sets the ip of this RestUnmonitoredDevices.

        :param ip: The ip of this RestUnmonitoredDevices.
        :type: str
        """

        self._ip = ip

    @property
    def dns(self):
        """
        Gets the dns of this RestUnmonitoredDevices.

        :return: The dns of this RestUnmonitoredDevices.
        :rtype: str
        """
        return self._dns

    @dns.setter
    def dns(self, dns):
        """
        Sets the dns of this RestUnmonitoredDevices.

        :param dns: The dns of this RestUnmonitoredDevices.
        :type: str
        """

        self._dns = dns

    @property
    def collector_id(self):
        """
        Gets the collector_id of this RestUnmonitoredDevices.

        :return: The collector_id of this RestUnmonitoredDevices.
        :rtype: int
        """
        return self._collector_id

    @collector_id.setter
    def collector_id(self, collector_id):
        """
        Sets the collector_id of this RestUnmonitoredDevices.

        :param collector_id: The collector_id of this RestUnmonitoredDevices.
        :type: int
        """

        self._collector_id = collector_id

    @property
    def ports(self):
        """
        Gets the ports of this RestUnmonitoredDevices.

        :return: The ports of this RestUnmonitoredDevices.
        :rtype: str
        """
        return self._ports

    @ports.setter
    def ports(self, ports):
        """
        Sets the ports of this RestUnmonitoredDevices.

        :param ports: The ports of this RestUnmonitoredDevices.
        :type: str
        """

        self._ports = ports

    @property
    def nsp_name(self):
        """
        Gets the nsp_name of this RestUnmonitoredDevices.

        :return: The nsp_name of this RestUnmonitoredDevices.
        :rtype: str
        """
        return self._nsp_name

    @nsp_name.setter
    def nsp_name(self, nsp_name):
        """
        Sets the nsp_name of this RestUnmonitoredDevices.

        :param nsp_name: The nsp_name of this RestUnmonitoredDevices.
        :type: str
        """

        self._nsp_name = nsp_name

    @property
    def device_status(self):
        """
        Gets the device_status of this RestUnmonitoredDevices.

        :return: The device_status of this RestUnmonitoredDevices.
        :rtype: str
        """
        return self._device_status

    @device_status.setter
    def device_status(self, device_status):
        """
        Sets the device_status of this RestUnmonitoredDevices.

        :param device_status: The device_status of this RestUnmonitoredDevices.
        :type: str
        """

        self._device_status = device_status

    @property
    def collector_description(self):
        """
        Gets the collector_description of this RestUnmonitoredDevices.

        :return: The collector_description of this RestUnmonitoredDevices.
        :rtype: str
        """
        return self._collector_description

    @collector_description.setter
    def collector_description(self, collector_description):
        """
        Sets the collector_description of this RestUnmonitoredDevices.

        :param collector_description: The collector_description of this RestUnmonitoredDevices.
        :type: str
        """

        self._collector_description = collector_description

    @property
    def display_as(self):
        """
        Gets the display_as of this RestUnmonitoredDevices.

        :return: The display_as of this RestUnmonitoredDevices.
        :rtype: str
        """
        return self._display_as

    @display_as.setter
    def display_as(self, display_as):
        """
        Sets the display_as of this RestUnmonitoredDevices.

        :param display_as: The display_as of this RestUnmonitoredDevices.
        :type: str
        """

        self._display_as = display_as

    @property
    def sys_name(self):
        """
        Gets the sys_name of this RestUnmonitoredDevices.

        :return: The sys_name of this RestUnmonitoredDevices.
        :rtype: str
        """
        return self._sys_name

    @sys_name.setter
    def sys_name(self, sys_name):
        """
        Sets the sys_name of this RestUnmonitoredDevices.

        :param sys_name: The sys_name of this RestUnmonitoredDevices.
        :type: str
        """

        self._sys_name = sys_name

    @property
    def nse_id(self):
        """
        Gets the nse_id of this RestUnmonitoredDevices.

        :return: The nse_id of this RestUnmonitoredDevices.
        :rtype: int
        """
        return self._nse_id

    @nse_id.setter
    def nse_id(self, nse_id):
        """
        Sets the nse_id of this RestUnmonitoredDevices.

        :param nse_id: The nse_id of this RestUnmonitoredDevices.
        :type: int
        """

        self._nse_id = nse_id

    @property
    def id(self):
        """
        Gets the id of this RestUnmonitoredDevices.

        :return: The id of this RestUnmonitoredDevices.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this RestUnmonitoredDevices.

        :param id: The id of this RestUnmonitoredDevices.
        :type: int
        """

        self._id = id

    @property
    def end_timestamp(self):
        """
        Gets the end_timestamp of this RestUnmonitoredDevices.

        :return: The end_timestamp of this RestUnmonitoredDevices.
        :rtype: int
        """
        return self._end_timestamp

    @end_timestamp.setter
    def end_timestamp(self, end_timestamp):
        """
        Sets the end_timestamp of this RestUnmonitoredDevices.

        :param end_timestamp: The end_timestamp of this RestUnmonitoredDevices.
        :type: int
        """

        self._end_timestamp = end_timestamp

    @property
    def status(self):
        """
        Gets the status of this RestUnmonitoredDevices.

        :return: The status of this RestUnmonitoredDevices.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this RestUnmonitoredDevices.

        :param status: The status of this RestUnmonitoredDevices.
        :type: str
        """

        self._status = status

    @property
    def nse_scan_id(self):
        """
        Gets the nse_scan_id of this RestUnmonitoredDevices.

        :return: The nse_scan_id of this RestUnmonitoredDevices.
        :rtype: str
        """
        return self._nse_scan_id

    @nse_scan_id.setter
    def nse_scan_id(self, nse_scan_id):
        """
        Sets the nse_scan_id of this RestUnmonitoredDevices.

        :param nse_scan_id: The nse_scan_id of this RestUnmonitoredDevices.
        :type: str
        """

        self._nse_scan_id = nse_scan_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, RestUnmonitoredDevices):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
