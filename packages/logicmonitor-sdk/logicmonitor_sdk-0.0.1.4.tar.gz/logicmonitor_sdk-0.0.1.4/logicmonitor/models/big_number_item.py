# coding: utf-8

"""
    logicmonitor_sdk

    LogicMonitor is a cloud-based, full stack, IT infrastructure monitoring solution that allows you to manage your infrastructure from the cloud. logicmonitor_sdk lets you manage your LogicMonitor account programmatically.

    OpenAPI spec version: 1.0.0
    Contact: sdk@logicmonitor.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class BigNumberItem(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'data_point_name': 'str',
        'bottom_label': 'str',
        'rounding': 'int',
        'position': 'int',
        'right_label': 'str',
        'color_thresholds': 'list[ColorThreshold]'
    }

    attribute_map = {
        'data_point_name': 'dataPointName',
        'bottom_label': 'bottomLabel',
        'rounding': 'rounding',
        'position': 'position',
        'right_label': 'rightLabel',
        'color_thresholds': 'colorThresholds'
    }

    def __init__(self, data_point_name=None, bottom_label=None, rounding=None, position=None, right_label=None, color_thresholds=None):
        """
        BigNumberItem - a model defined in Swagger
        """

        self._data_point_name = None
        self._bottom_label = None
        self._rounding = None
        self._position = None
        self._right_label = None
        self._color_thresholds = None
        self.discriminator = None

        self.data_point_name = data_point_name
        if bottom_label is not None:
          self.bottom_label = bottom_label
        if rounding is not None:
          self.rounding = rounding
        if position is not None:
          self.position = position
        if right_label is not None:
          self.right_label = right_label
        if color_thresholds is not None:
          self.color_thresholds = color_thresholds

    @property
    def data_point_name(self):
        """
        Gets the data_point_name of this BigNumberItem.

        :return: The data_point_name of this BigNumberItem.
        :rtype: str
        """
        return self._data_point_name

    @data_point_name.setter
    def data_point_name(self, data_point_name):
        """
        Sets the data_point_name of this BigNumberItem.

        :param data_point_name: The data_point_name of this BigNumberItem.
        :type: str
        """
        if data_point_name is None:
            raise ValueError("Invalid value for `data_point_name`, must not be `None`")

        self._data_point_name = data_point_name

    @property
    def bottom_label(self):
        """
        Gets the bottom_label of this BigNumberItem.

        :return: The bottom_label of this BigNumberItem.
        :rtype: str
        """
        return self._bottom_label

    @bottom_label.setter
    def bottom_label(self, bottom_label):
        """
        Sets the bottom_label of this BigNumberItem.

        :param bottom_label: The bottom_label of this BigNumberItem.
        :type: str
        """

        self._bottom_label = bottom_label

    @property
    def rounding(self):
        """
        Gets the rounding of this BigNumberItem.

        :return: The rounding of this BigNumberItem.
        :rtype: int
        """
        return self._rounding

    @rounding.setter
    def rounding(self, rounding):
        """
        Sets the rounding of this BigNumberItem.

        :param rounding: The rounding of this BigNumberItem.
        :type: int
        """

        self._rounding = rounding

    @property
    def position(self):
        """
        Gets the position of this BigNumberItem.

        :return: The position of this BigNumberItem.
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """
        Sets the position of this BigNumberItem.

        :param position: The position of this BigNumberItem.
        :type: int
        """

        self._position = position

    @property
    def right_label(self):
        """
        Gets the right_label of this BigNumberItem.

        :return: The right_label of this BigNumberItem.
        :rtype: str
        """
        return self._right_label

    @right_label.setter
    def right_label(self, right_label):
        """
        Sets the right_label of this BigNumberItem.

        :param right_label: The right_label of this BigNumberItem.
        :type: str
        """

        self._right_label = right_label

    @property
    def color_thresholds(self):
        """
        Gets the color_thresholds of this BigNumberItem.

        :return: The color_thresholds of this BigNumberItem.
        :rtype: list[ColorThreshold]
        """
        return self._color_thresholds

    @color_thresholds.setter
    def color_thresholds(self, color_thresholds):
        """
        Sets the color_thresholds of this BigNumberItem.

        :param color_thresholds: The color_thresholds of this BigNumberItem.
        :type: list[ColorThreshold]
        """

        self._color_thresholds = color_thresholds

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, BigNumberItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
