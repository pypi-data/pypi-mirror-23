# coding: utf-8

"""
    logicmonitor_sdk

    LogicMonitor is a cloud-based, full stack, IT infrastructure monitoring solution that allows you to manage your infrastructure from the cloud. logicmonitor_sdk lets you manage your LogicMonitor account programmatically.

    OpenAPI spec version: 1.0.0
    Contact: sdk@logicmonitor.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class RestEscalatingChain(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'in_alerting': 'bool',
        'throttling_alerts': 'int',
        'enable_throttling': 'bool',
        'destinations': 'list[Chain]',
        'name': 'str',
        'description': 'str',
        'id': 'int',
        'cc_destinations': 'list[RestRecipient]',
        'throttling_period': 'int'
    }

    attribute_map = {
        'in_alerting': 'inAlerting',
        'throttling_alerts': 'throttlingAlerts',
        'enable_throttling': 'enableThrottling',
        'destinations': 'destinations',
        'name': 'name',
        'description': 'description',
        'id': 'id',
        'cc_destinations': 'ccDestinations',
        'throttling_period': 'throttlingPeriod'
    }

    def __init__(self, in_alerting=None, throttling_alerts=None, enable_throttling=None, destinations=None, name=None, description=None, id=None, cc_destinations=None, throttling_period=None):
        """
        RestEscalatingChain - a model defined in Swagger
        """

        self._in_alerting = None
        self._throttling_alerts = None
        self._enable_throttling = None
        self._destinations = None
        self._name = None
        self._description = None
        self._id = None
        self._cc_destinations = None
        self._throttling_period = None
        self.discriminator = None

        if in_alerting is not None:
          self.in_alerting = in_alerting
        self.throttling_alerts = throttling_alerts
        self.enable_throttling = enable_throttling
        self.destinations = destinations
        self.name = name
        if description is not None:
          self.description = description
        if id is not None:
          self.id = id
        if cc_destinations is not None:
          self.cc_destinations = cc_destinations
        self.throttling_period = throttling_period

    @property
    def in_alerting(self):
        """
        Gets the in_alerting of this RestEscalatingChain.

        :return: The in_alerting of this RestEscalatingChain.
        :rtype: bool
        """
        return self._in_alerting

    @in_alerting.setter
    def in_alerting(self, in_alerting):
        """
        Sets the in_alerting of this RestEscalatingChain.

        :param in_alerting: The in_alerting of this RestEscalatingChain.
        :type: bool
        """

        self._in_alerting = in_alerting

    @property
    def throttling_alerts(self):
        """
        Gets the throttling_alerts of this RestEscalatingChain.

        :return: The throttling_alerts of this RestEscalatingChain.
        :rtype: int
        """
        return self._throttling_alerts

    @throttling_alerts.setter
    def throttling_alerts(self, throttling_alerts):
        """
        Sets the throttling_alerts of this RestEscalatingChain.

        :param throttling_alerts: The throttling_alerts of this RestEscalatingChain.
        :type: int
        """
        if throttling_alerts is None:
            raise ValueError("Invalid value for `throttling_alerts`, must not be `None`")

        self._throttling_alerts = throttling_alerts

    @property
    def enable_throttling(self):
        """
        Gets the enable_throttling of this RestEscalatingChain.

        :return: The enable_throttling of this RestEscalatingChain.
        :rtype: bool
        """
        return self._enable_throttling

    @enable_throttling.setter
    def enable_throttling(self, enable_throttling):
        """
        Sets the enable_throttling of this RestEscalatingChain.

        :param enable_throttling: The enable_throttling of this RestEscalatingChain.
        :type: bool
        """
        if enable_throttling is None:
            raise ValueError("Invalid value for `enable_throttling`, must not be `None`")

        self._enable_throttling = enable_throttling

    @property
    def destinations(self):
        """
        Gets the destinations of this RestEscalatingChain.

        :return: The destinations of this RestEscalatingChain.
        :rtype: list[Chain]
        """
        return self._destinations

    @destinations.setter
    def destinations(self, destinations):
        """
        Sets the destinations of this RestEscalatingChain.

        :param destinations: The destinations of this RestEscalatingChain.
        :type: list[Chain]
        """
        if destinations is None:
            raise ValueError("Invalid value for `destinations`, must not be `None`")

        self._destinations = destinations

    @property
    def name(self):
        """
        Gets the name of this RestEscalatingChain.

        :return: The name of this RestEscalatingChain.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this RestEscalatingChain.

        :param name: The name of this RestEscalatingChain.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def description(self):
        """
        Gets the description of this RestEscalatingChain.

        :return: The description of this RestEscalatingChain.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this RestEscalatingChain.

        :param description: The description of this RestEscalatingChain.
        :type: str
        """

        self._description = description

    @property
    def id(self):
        """
        Gets the id of this RestEscalatingChain.

        :return: The id of this RestEscalatingChain.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this RestEscalatingChain.

        :param id: The id of this RestEscalatingChain.
        :type: int
        """

        self._id = id

    @property
    def cc_destinations(self):
        """
        Gets the cc_destinations of this RestEscalatingChain.

        :return: The cc_destinations of this RestEscalatingChain.
        :rtype: list[RestRecipient]
        """
        return self._cc_destinations

    @cc_destinations.setter
    def cc_destinations(self, cc_destinations):
        """
        Sets the cc_destinations of this RestEscalatingChain.

        :param cc_destinations: The cc_destinations of this RestEscalatingChain.
        :type: list[RestRecipient]
        """

        self._cc_destinations = cc_destinations

    @property
    def throttling_period(self):
        """
        Gets the throttling_period of this RestEscalatingChain.

        :return: The throttling_period of this RestEscalatingChain.
        :rtype: int
        """
        return self._throttling_period

    @throttling_period.setter
    def throttling_period(self, throttling_period):
        """
        Sets the throttling_period of this RestEscalatingChain.

        :param throttling_period: The throttling_period of this RestEscalatingChain.
        :type: int
        """
        if throttling_period is None:
            raise ValueError("Invalid value for `throttling_period`, must not be `None`")

        self._throttling_period = throttling_period

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, RestEscalatingChain):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
