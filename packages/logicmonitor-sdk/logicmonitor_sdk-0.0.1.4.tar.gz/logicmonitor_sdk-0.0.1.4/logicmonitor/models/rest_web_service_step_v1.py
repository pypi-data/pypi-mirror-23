# coding: utf-8

"""
    logicmonitor_sdk

    LogicMonitor is a cloud-based, full stack, IT infrastructure monitoring solution that allows you to manage your infrastructure from the cloud. logicmonitor_sdk lets you manage your LogicMonitor account programmatically.

    OpenAPI spec version: 1.0.0
    Contact: sdk@logicmonitor.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class RestWebServiceStepV1(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'schema': 'str',
        'http_headers': 'str',
        'auth': 'Authentication',
        'match_type': 'str',
        'description': 'str',
        'label': 'str',
        'type': 'str',
        'timeout': 'int',
        'url': 'str',
        'invert_match': 'bool',
        'path': 'str',
        'http_body': 'str',
        'follow_redirection': 'bool',
        'http_method': 'str',
        'enable': 'bool',
        'post_data_edit_type': 'str',
        'name': 'str',
        'require_auth': 'bool',
        'fullpage_load': 'bool',
        'http_version': 'str',
        'keyword': 'str',
        'status_code': 'str'
    }

    attribute_map = {
        'schema': 'schema',
        'http_headers': 'HTTPHeaders',
        'auth': 'auth',
        'match_type': 'matchType',
        'description': 'description',
        'label': 'label',
        'type': 'type',
        'timeout': 'timeout',
        'url': 'url',
        'invert_match': 'invertMatch',
        'path': 'path',
        'http_body': 'HTTPBody',
        'follow_redirection': 'followRedirection',
        'http_method': 'HTTPMethod',
        'enable': 'enable',
        'post_data_edit_type': 'postDataEditType',
        'name': 'name',
        'require_auth': 'requireAuth',
        'fullpage_load': 'fullpageLoad',
        'http_version': 'HTTPVersion',
        'keyword': 'keyword',
        'status_code': 'statusCode'
    }

    def __init__(self, schema=None, http_headers=None, auth=None, match_type=None, description=None, label=None, type=None, timeout=None, url=None, invert_match=None, path=None, http_body=None, follow_redirection=None, http_method=None, enable=None, post_data_edit_type=None, name=None, require_auth=None, fullpage_load=None, http_version=None, keyword=None, status_code=None):
        """
        RestWebServiceStepV1 - a model defined in Swagger
        """

        self._schema = None
        self._http_headers = None
        self._auth = None
        self._match_type = None
        self._description = None
        self._label = None
        self._type = None
        self._timeout = None
        self._url = None
        self._invert_match = None
        self._path = None
        self._http_body = None
        self._follow_redirection = None
        self._http_method = None
        self._enable = None
        self._post_data_edit_type = None
        self._name = None
        self._require_auth = None
        self._fullpage_load = None
        self._http_version = None
        self._keyword = None
        self._status_code = None
        self.discriminator = None

        if schema is not None:
          self.schema = schema
        if http_headers is not None:
          self.http_headers = http_headers
        if auth is not None:
          self.auth = auth
        if match_type is not None:
          self.match_type = match_type
        if description is not None:
          self.description = description
        if label is not None:
          self.label = label
        if type is not None:
          self.type = type
        if timeout is not None:
          self.timeout = timeout
        if url is not None:
          self.url = url
        if invert_match is not None:
          self.invert_match = invert_match
        if path is not None:
          self.path = path
        if http_body is not None:
          self.http_body = http_body
        if follow_redirection is not None:
          self.follow_redirection = follow_redirection
        if http_method is not None:
          self.http_method = http_method
        if enable is not None:
          self.enable = enable
        if post_data_edit_type is not None:
          self.post_data_edit_type = post_data_edit_type
        if name is not None:
          self.name = name
        if require_auth is not None:
          self.require_auth = require_auth
        if fullpage_load is not None:
          self.fullpage_load = fullpage_load
        if http_version is not None:
          self.http_version = http_version
        if keyword is not None:
          self.keyword = keyword
        if status_code is not None:
          self.status_code = status_code

    @property
    def schema(self):
        """
        Gets the schema of this RestWebServiceStepV1.

        :return: The schema of this RestWebServiceStepV1.
        :rtype: str
        """
        return self._schema

    @schema.setter
    def schema(self, schema):
        """
        Sets the schema of this RestWebServiceStepV1.

        :param schema: The schema of this RestWebServiceStepV1.
        :type: str
        """

        self._schema = schema

    @property
    def http_headers(self):
        """
        Gets the http_headers of this RestWebServiceStepV1.

        :return: The http_headers of this RestWebServiceStepV1.
        :rtype: str
        """
        return self._http_headers

    @http_headers.setter
    def http_headers(self, http_headers):
        """
        Sets the http_headers of this RestWebServiceStepV1.

        :param http_headers: The http_headers of this RestWebServiceStepV1.
        :type: str
        """

        self._http_headers = http_headers

    @property
    def auth(self):
        """
        Gets the auth of this RestWebServiceStepV1.

        :return: The auth of this RestWebServiceStepV1.
        :rtype: Authentication
        """
        return self._auth

    @auth.setter
    def auth(self, auth):
        """
        Sets the auth of this RestWebServiceStepV1.

        :param auth: The auth of this RestWebServiceStepV1.
        :type: Authentication
        """

        self._auth = auth

    @property
    def match_type(self):
        """
        Gets the match_type of this RestWebServiceStepV1.

        :return: The match_type of this RestWebServiceStepV1.
        :rtype: str
        """
        return self._match_type

    @match_type.setter
    def match_type(self, match_type):
        """
        Sets the match_type of this RestWebServiceStepV1.

        :param match_type: The match_type of this RestWebServiceStepV1.
        :type: str
        """

        self._match_type = match_type

    @property
    def description(self):
        """
        Gets the description of this RestWebServiceStepV1.

        :return: The description of this RestWebServiceStepV1.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this RestWebServiceStepV1.

        :param description: The description of this RestWebServiceStepV1.
        :type: str
        """

        self._description = description

    @property
    def label(self):
        """
        Gets the label of this RestWebServiceStepV1.

        :return: The label of this RestWebServiceStepV1.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """
        Sets the label of this RestWebServiceStepV1.

        :param label: The label of this RestWebServiceStepV1.
        :type: str
        """

        self._label = label

    @property
    def type(self):
        """
        Gets the type of this RestWebServiceStepV1.

        :return: The type of this RestWebServiceStepV1.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this RestWebServiceStepV1.

        :param type: The type of this RestWebServiceStepV1.
        :type: str
        """

        self._type = type

    @property
    def timeout(self):
        """
        Gets the timeout of this RestWebServiceStepV1.

        :return: The timeout of this RestWebServiceStepV1.
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """
        Sets the timeout of this RestWebServiceStepV1.

        :param timeout: The timeout of this RestWebServiceStepV1.
        :type: int
        """

        self._timeout = timeout

    @property
    def url(self):
        """
        Gets the url of this RestWebServiceStepV1.

        :return: The url of this RestWebServiceStepV1.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """
        Sets the url of this RestWebServiceStepV1.

        :param url: The url of this RestWebServiceStepV1.
        :type: str
        """

        self._url = url

    @property
    def invert_match(self):
        """
        Gets the invert_match of this RestWebServiceStepV1.

        :return: The invert_match of this RestWebServiceStepV1.
        :rtype: bool
        """
        return self._invert_match

    @invert_match.setter
    def invert_match(self, invert_match):
        """
        Sets the invert_match of this RestWebServiceStepV1.

        :param invert_match: The invert_match of this RestWebServiceStepV1.
        :type: bool
        """

        self._invert_match = invert_match

    @property
    def path(self):
        """
        Gets the path of this RestWebServiceStepV1.

        :return: The path of this RestWebServiceStepV1.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """
        Sets the path of this RestWebServiceStepV1.

        :param path: The path of this RestWebServiceStepV1.
        :type: str
        """

        self._path = path

    @property
    def http_body(self):
        """
        Gets the http_body of this RestWebServiceStepV1.

        :return: The http_body of this RestWebServiceStepV1.
        :rtype: str
        """
        return self._http_body

    @http_body.setter
    def http_body(self, http_body):
        """
        Sets the http_body of this RestWebServiceStepV1.

        :param http_body: The http_body of this RestWebServiceStepV1.
        :type: str
        """

        self._http_body = http_body

    @property
    def follow_redirection(self):
        """
        Gets the follow_redirection of this RestWebServiceStepV1.

        :return: The follow_redirection of this RestWebServiceStepV1.
        :rtype: bool
        """
        return self._follow_redirection

    @follow_redirection.setter
    def follow_redirection(self, follow_redirection):
        """
        Sets the follow_redirection of this RestWebServiceStepV1.

        :param follow_redirection: The follow_redirection of this RestWebServiceStepV1.
        :type: bool
        """

        self._follow_redirection = follow_redirection

    @property
    def http_method(self):
        """
        Gets the http_method of this RestWebServiceStepV1.

        :return: The http_method of this RestWebServiceStepV1.
        :rtype: str
        """
        return self._http_method

    @http_method.setter
    def http_method(self, http_method):
        """
        Sets the http_method of this RestWebServiceStepV1.

        :param http_method: The http_method of this RestWebServiceStepV1.
        :type: str
        """

        self._http_method = http_method

    @property
    def enable(self):
        """
        Gets the enable of this RestWebServiceStepV1.

        :return: The enable of this RestWebServiceStepV1.
        :rtype: bool
        """
        return self._enable

    @enable.setter
    def enable(self, enable):
        """
        Sets the enable of this RestWebServiceStepV1.

        :param enable: The enable of this RestWebServiceStepV1.
        :type: bool
        """

        self._enable = enable

    @property
    def post_data_edit_type(self):
        """
        Gets the post_data_edit_type of this RestWebServiceStepV1.

        :return: The post_data_edit_type of this RestWebServiceStepV1.
        :rtype: str
        """
        return self._post_data_edit_type

    @post_data_edit_type.setter
    def post_data_edit_type(self, post_data_edit_type):
        """
        Sets the post_data_edit_type of this RestWebServiceStepV1.

        :param post_data_edit_type: The post_data_edit_type of this RestWebServiceStepV1.
        :type: str
        """

        self._post_data_edit_type = post_data_edit_type

    @property
    def name(self):
        """
        Gets the name of this RestWebServiceStepV1.

        :return: The name of this RestWebServiceStepV1.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this RestWebServiceStepV1.

        :param name: The name of this RestWebServiceStepV1.
        :type: str
        """

        self._name = name

    @property
    def require_auth(self):
        """
        Gets the require_auth of this RestWebServiceStepV1.

        :return: The require_auth of this RestWebServiceStepV1.
        :rtype: bool
        """
        return self._require_auth

    @require_auth.setter
    def require_auth(self, require_auth):
        """
        Sets the require_auth of this RestWebServiceStepV1.

        :param require_auth: The require_auth of this RestWebServiceStepV1.
        :type: bool
        """

        self._require_auth = require_auth

    @property
    def fullpage_load(self):
        """
        Gets the fullpage_load of this RestWebServiceStepV1.

        :return: The fullpage_load of this RestWebServiceStepV1.
        :rtype: bool
        """
        return self._fullpage_load

    @fullpage_load.setter
    def fullpage_load(self, fullpage_load):
        """
        Sets the fullpage_load of this RestWebServiceStepV1.

        :param fullpage_load: The fullpage_load of this RestWebServiceStepV1.
        :type: bool
        """

        self._fullpage_load = fullpage_load

    @property
    def http_version(self):
        """
        Gets the http_version of this RestWebServiceStepV1.

        :return: The http_version of this RestWebServiceStepV1.
        :rtype: str
        """
        return self._http_version

    @http_version.setter
    def http_version(self, http_version):
        """
        Sets the http_version of this RestWebServiceStepV1.

        :param http_version: The http_version of this RestWebServiceStepV1.
        :type: str
        """

        self._http_version = http_version

    @property
    def keyword(self):
        """
        Gets the keyword of this RestWebServiceStepV1.

        :return: The keyword of this RestWebServiceStepV1.
        :rtype: str
        """
        return self._keyword

    @keyword.setter
    def keyword(self, keyword):
        """
        Sets the keyword of this RestWebServiceStepV1.

        :param keyword: The keyword of this RestWebServiceStepV1.
        :type: str
        """

        self._keyword = keyword

    @property
    def status_code(self):
        """
        Gets the status_code of this RestWebServiceStepV1.

        :return: The status_code of this RestWebServiceStepV1.
        :rtype: str
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """
        Sets the status_code of this RestWebServiceStepV1.

        :param status_code: The status_code of this RestWebServiceStepV1.
        :type: str
        """

        self._status_code = status_code

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, RestWebServiceStepV1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
