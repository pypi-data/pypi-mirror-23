# coding: utf-8

"""
    logicmonitor_sdk

    LogicMonitor is a cloud-based, full stack, IT infrastructure monitoring solution that allows you to manage your infrastructure from the cloud. logicmonitor_sdk lets you manage your LogicMonitor account programmatically.

    OpenAPI spec version: 1.0.0
    Contact: sdk@logicmonitor.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class PointSource(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'has_location': 'bool',
        'type': 'str',
        'device_group_full_path': 'str',
        'device_display_name': 'str'
    }

    attribute_map = {
        'has_location': 'hasLocation',
        'type': 'type',
        'device_group_full_path': 'deviceGroupFullPath',
        'device_display_name': 'deviceDisplayName'
    }

    def __init__(self, has_location=None, type=None, device_group_full_path=None, device_display_name=None):
        """
        PointSource - a model defined in Swagger
        """

        self._has_location = None
        self._type = None
        self._device_group_full_path = None
        self._device_display_name = None
        self.discriminator = None

        if has_location is not None:
          self.has_location = has_location
        if type is not None:
          self.type = type
        self.device_group_full_path = device_group_full_path
        if device_display_name is not None:
          self.device_display_name = device_display_name

    @property
    def has_location(self):
        """
        Gets the has_location of this PointSource.

        :return: The has_location of this PointSource.
        :rtype: bool
        """
        return self._has_location

    @has_location.setter
    def has_location(self, has_location):
        """
        Sets the has_location of this PointSource.

        :param has_location: The has_location of this PointSource.
        :type: bool
        """

        self._has_location = has_location

    @property
    def type(self):
        """
        Gets the type of this PointSource.

        :return: The type of this PointSource.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this PointSource.

        :param type: The type of this PointSource.
        :type: str
        """

        self._type = type

    @property
    def device_group_full_path(self):
        """
        Gets the device_group_full_path of this PointSource.

        :return: The device_group_full_path of this PointSource.
        :rtype: str
        """
        return self._device_group_full_path

    @device_group_full_path.setter
    def device_group_full_path(self, device_group_full_path):
        """
        Sets the device_group_full_path of this PointSource.

        :param device_group_full_path: The device_group_full_path of this PointSource.
        :type: str
        """
        if device_group_full_path is None:
            raise ValueError("Invalid value for `device_group_full_path`, must not be `None`")

        self._device_group_full_path = device_group_full_path

    @property
    def device_display_name(self):
        """
        Gets the device_display_name of this PointSource.

        :return: The device_display_name of this PointSource.
        :rtype: str
        """
        return self._device_display_name

    @device_display_name.setter
    def device_display_name(self, device_display_name):
        """
        Sets the device_display_name of this PointSource.

        :param device_display_name: The device_display_name of this PointSource.
        :type: str
        """

        self._device_display_name = device_display_name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PointSource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
