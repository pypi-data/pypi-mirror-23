# coding: utf-8

"""
    logicmonitor_sdk

    LogicMonitor is a cloud-based, full stack, IT infrastructure monitoring solution that allows you to manage your infrastructure from the cloud. logicmonitor_sdk lets you manage your LogicMonitor account programmatically.

    OpenAPI spec version: 1.0.0
    Contact: sdk@logicmonitor.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class RestConfigAlert(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'alert_level': 'int',
        'id': 'str',
        'alert_id': 'str',
        'alert_summary': 'str',
        'timestamp': 'int'
    }

    attribute_map = {
        'alert_level': 'alertLevel',
        'id': 'id',
        'alert_id': 'alertId',
        'alert_summary': 'alertSummary',
        'timestamp': 'timestamp'
    }

    def __init__(self, alert_level=None, id=None, alert_id=None, alert_summary=None, timestamp=None):
        """
        RestConfigAlert - a model defined in Swagger
        """

        self._alert_level = None
        self._id = None
        self._alert_id = None
        self._alert_summary = None
        self._timestamp = None
        self.discriminator = None

        if alert_level is not None:
          self.alert_level = alert_level
        if id is not None:
          self.id = id
        if alert_id is not None:
          self.alert_id = alert_id
        if alert_summary is not None:
          self.alert_summary = alert_summary
        if timestamp is not None:
          self.timestamp = timestamp

    @property
    def alert_level(self):
        """
        Gets the alert_level of this RestConfigAlert.

        :return: The alert_level of this RestConfigAlert.
        :rtype: int
        """
        return self._alert_level

    @alert_level.setter
    def alert_level(self, alert_level):
        """
        Sets the alert_level of this RestConfigAlert.

        :param alert_level: The alert_level of this RestConfigAlert.
        :type: int
        """

        self._alert_level = alert_level

    @property
    def id(self):
        """
        Gets the id of this RestConfigAlert.

        :return: The id of this RestConfigAlert.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this RestConfigAlert.

        :param id: The id of this RestConfigAlert.
        :type: str
        """

        self._id = id

    @property
    def alert_id(self):
        """
        Gets the alert_id of this RestConfigAlert.

        :return: The alert_id of this RestConfigAlert.
        :rtype: str
        """
        return self._alert_id

    @alert_id.setter
    def alert_id(self, alert_id):
        """
        Sets the alert_id of this RestConfigAlert.

        :param alert_id: The alert_id of this RestConfigAlert.
        :type: str
        """

        self._alert_id = alert_id

    @property
    def alert_summary(self):
        """
        Gets the alert_summary of this RestConfigAlert.

        :return: The alert_summary of this RestConfigAlert.
        :rtype: str
        """
        return self._alert_summary

    @alert_summary.setter
    def alert_summary(self, alert_summary):
        """
        Sets the alert_summary of this RestConfigAlert.

        :param alert_summary: The alert_summary of this RestConfigAlert.
        :type: str
        """

        self._alert_summary = alert_summary

    @property
    def timestamp(self):
        """
        Gets the timestamp of this RestConfigAlert.

        :return: The timestamp of this RestConfigAlert.
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """
        Sets the timestamp of this RestConfigAlert.

        :param timestamp: The timestamp of this RestConfigAlert.
        :type: int
        """

        self._timestamp = timestamp

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, RestConfigAlert):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
