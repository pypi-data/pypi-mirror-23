# coding: utf-8

"""
    logicmonitor_sdk

    LogicMonitor is a cloud-based, full stack, IT infrastructure monitoring solution that allows you to manage your infrastructure from the cloud. logicmonitor_sdk lets you manage your LogicMonitor account programmatically.

    OpenAPI spec version: 1.0.0
    Contact: sdk@logicmonitor.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class RestServiceCheckpoint(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'geo_info': 'str',
        'id': 'int',
        'smg_id': 'int'
    }

    attribute_map = {
        'geo_info': 'geoInfo',
        'id': 'id',
        'smg_id': 'smgId'
    }

    def __init__(self, geo_info=None, id=None, smg_id=None):
        """
        RestServiceCheckpoint - a model defined in Swagger
        """

        self._geo_info = None
        self._id = None
        self._smg_id = None
        self.discriminator = None

        if geo_info is not None:
          self.geo_info = geo_info
        if id is not None:
          self.id = id
        if smg_id is not None:
          self.smg_id = smg_id

    @property
    def geo_info(self):
        """
        Gets the geo_info of this RestServiceCheckpoint.

        :return: The geo_info of this RestServiceCheckpoint.
        :rtype: str
        """
        return self._geo_info

    @geo_info.setter
    def geo_info(self, geo_info):
        """
        Sets the geo_info of this RestServiceCheckpoint.

        :param geo_info: The geo_info of this RestServiceCheckpoint.
        :type: str
        """

        self._geo_info = geo_info

    @property
    def id(self):
        """
        Gets the id of this RestServiceCheckpoint.

        :return: The id of this RestServiceCheckpoint.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this RestServiceCheckpoint.

        :param id: The id of this RestServiceCheckpoint.
        :type: int
        """

        self._id = id

    @property
    def smg_id(self):
        """
        Gets the smg_id of this RestServiceCheckpoint.

        :return: The smg_id of this RestServiceCheckpoint.
        :rtype: int
        """
        return self._smg_id

    @smg_id.setter
    def smg_id(self, smg_id):
        """
        Sets the smg_id of this RestServiceCheckpoint.

        :param smg_id: The smg_id of this RestServiceCheckpoint.
        :type: int
        """

        self._smg_id = smg_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, RestServiceCheckpoint):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
