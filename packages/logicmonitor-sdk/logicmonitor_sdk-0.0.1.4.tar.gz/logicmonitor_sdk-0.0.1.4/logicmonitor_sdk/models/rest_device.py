# coding: utf-8

"""
    logicmonitor_sdk

    LogicMonitor is a cloud-based, full stack, IT infrastructure monitoring solution that allows you to manage your infrastructure from the cloud. logicmonitor_sdk lets you manage your LogicMonitor account programmatically.

    OpenAPI spec version: 1.0.0
    Contact: sdk@logicmonitor.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class RestDevice(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'alert_status': 'str',
        'netflow_collector_group_name': 'str',
        'azure_state': 'int',
        'related_device_id': 'int',
        'display_name': 'str',
        'link': 'str',
        'aws_state': 'int',
        'description': 'str',
        'can_use_remote_session': 'bool',
        'disable_alerting': 'bool',
        'netflow_collector_group_id': 'int',
        'created_on': 'int',
        'ancestor_has_disabled_logic_module': 'bool',
        'system_properties': 'list[NameAndValue]',
        'manual_discovery_flags': 'ManualDiscoveryFlags',
        'host_status': 'str',
        'auto_props_updated_on': 'int',
        'scan_config_id': 'int',
        'id': 'int',
        'enable_netflow': 'bool',
        'last_data_time': 'int',
        'alert_status_priority': 'int',
        'alert_disable_status': 'str',
        'host_group_ids': 'str',
        'up_time_in_seconds': 'int',
        'device_type': 'int',
        'current_collector_id': 'int',
        'netflow_collector_description': 'str',
        'netflow_collector_id': 'int',
        'user_permission': 'str',
        'has_disabled_sub_resource': 'bool',
        'auto_props_assigned_on': 'int',
        'updated_on': 'int',
        'preferred_collector_group_name': 'str',
        'sdt_status': 'str',
        'preferred_collector_group_id': 'int',
        'custom_properties': 'list[NameAndValue]',
        'to_delete_time_in_ms': 'int',
        'collector_description': 'str',
        'preferred_collector_id': 'int',
        'last_rawdata_time': 'int',
        'name': 'str',
        'alerting_disabled_on': 'TreeNode',
        'deleted_time_in_ms': 'int'
    }

    attribute_map = {
        'alert_status': 'alertStatus',
        'netflow_collector_group_name': 'netflowCollectorGroupName',
        'azure_state': 'azureState',
        'related_device_id': 'relatedDeviceId',
        'display_name': 'displayName',
        'link': 'link',
        'aws_state': 'awsState',
        'description': 'description',
        'can_use_remote_session': 'canUseRemoteSession',
        'disable_alerting': 'disableAlerting',
        'netflow_collector_group_id': 'netflowCollectorGroupId',
        'created_on': 'createdOn',
        'ancestor_has_disabled_logic_module': 'ancestorHasDisabledLogicModule',
        'system_properties': 'systemProperties',
        'manual_discovery_flags': 'manualDiscoveryFlags',
        'host_status': 'hostStatus',
        'auto_props_updated_on': 'autoPropsUpdatedOn',
        'scan_config_id': 'scanConfigId',
        'id': 'id',
        'enable_netflow': 'enableNetflow',
        'last_data_time': 'lastDataTime',
        'alert_status_priority': 'alertStatusPriority',
        'alert_disable_status': 'alertDisableStatus',
        'host_group_ids': 'hostGroupIds',
        'up_time_in_seconds': 'upTimeInSeconds',
        'device_type': 'deviceType',
        'current_collector_id': 'currentCollectorId',
        'netflow_collector_description': 'netflowCollectorDescription',
        'netflow_collector_id': 'netflowCollectorId',
        'user_permission': 'userPermission',
        'has_disabled_sub_resource': 'hasDisabledSubResource',
        'auto_props_assigned_on': 'autoPropsAssignedOn',
        'updated_on': 'updatedOn',
        'preferred_collector_group_name': 'preferredCollectorGroupName',
        'sdt_status': 'sdtStatus',
        'preferred_collector_group_id': 'preferredCollectorGroupId',
        'custom_properties': 'customProperties',
        'to_delete_time_in_ms': 'toDeleteTimeInMs',
        'collector_description': 'collectorDescription',
        'preferred_collector_id': 'preferredCollectorId',
        'last_rawdata_time': 'lastRawdataTime',
        'name': 'name',
        'alerting_disabled_on': 'alertingDisabledOn',
        'deleted_time_in_ms': 'deletedTimeInMs'
    }

    def __init__(self, alert_status=None, netflow_collector_group_name=None, azure_state=None, related_device_id=None, display_name=None, link=None, aws_state=None, description=None, can_use_remote_session=None, disable_alerting=None, netflow_collector_group_id=None, created_on=None, ancestor_has_disabled_logic_module=None, system_properties=None, manual_discovery_flags=None, host_status=None, auto_props_updated_on=None, scan_config_id=None, id=None, enable_netflow=None, last_data_time=None, alert_status_priority=None, alert_disable_status=None, host_group_ids=None, up_time_in_seconds=None, device_type=None, current_collector_id=None, netflow_collector_description=None, netflow_collector_id=None, user_permission=None, has_disabled_sub_resource=None, auto_props_assigned_on=None, updated_on=None, preferred_collector_group_name=None, sdt_status=None, preferred_collector_group_id=None, custom_properties=None, to_delete_time_in_ms=None, collector_description=None, preferred_collector_id=None, last_rawdata_time=None, name=None, alerting_disabled_on=None, deleted_time_in_ms=None):
        """
        RestDevice - a model defined in Swagger
        """

        self._alert_status = None
        self._netflow_collector_group_name = None
        self._azure_state = None
        self._related_device_id = None
        self._display_name = None
        self._link = None
        self._aws_state = None
        self._description = None
        self._can_use_remote_session = None
        self._disable_alerting = None
        self._netflow_collector_group_id = None
        self._created_on = None
        self._ancestor_has_disabled_logic_module = None
        self._system_properties = None
        self._manual_discovery_flags = None
        self._host_status = None
        self._auto_props_updated_on = None
        self._scan_config_id = None
        self._id = None
        self._enable_netflow = None
        self._last_data_time = None
        self._alert_status_priority = None
        self._alert_disable_status = None
        self._host_group_ids = None
        self._up_time_in_seconds = None
        self._device_type = None
        self._current_collector_id = None
        self._netflow_collector_description = None
        self._netflow_collector_id = None
        self._user_permission = None
        self._has_disabled_sub_resource = None
        self._auto_props_assigned_on = None
        self._updated_on = None
        self._preferred_collector_group_name = None
        self._sdt_status = None
        self._preferred_collector_group_id = None
        self._custom_properties = None
        self._to_delete_time_in_ms = None
        self._collector_description = None
        self._preferred_collector_id = None
        self._last_rawdata_time = None
        self._name = None
        self._alerting_disabled_on = None
        self._deleted_time_in_ms = None
        self.discriminator = None

        if alert_status is not None:
          self.alert_status = alert_status
        if netflow_collector_group_name is not None:
          self.netflow_collector_group_name = netflow_collector_group_name
        if azure_state is not None:
          self.azure_state = azure_state
        if related_device_id is not None:
          self.related_device_id = related_device_id
        self.display_name = display_name
        if link is not None:
          self.link = link
        if aws_state is not None:
          self.aws_state = aws_state
        if description is not None:
          self.description = description
        if can_use_remote_session is not None:
          self.can_use_remote_session = can_use_remote_session
        if disable_alerting is not None:
          self.disable_alerting = disable_alerting
        if netflow_collector_group_id is not None:
          self.netflow_collector_group_id = netflow_collector_group_id
        if created_on is not None:
          self.created_on = created_on
        if ancestor_has_disabled_logic_module is not None:
          self.ancestor_has_disabled_logic_module = ancestor_has_disabled_logic_module
        if system_properties is not None:
          self.system_properties = system_properties
        if manual_discovery_flags is not None:
          self.manual_discovery_flags = manual_discovery_flags
        if host_status is not None:
          self.host_status = host_status
        if auto_props_updated_on is not None:
          self.auto_props_updated_on = auto_props_updated_on
        if scan_config_id is not None:
          self.scan_config_id = scan_config_id
        if id is not None:
          self.id = id
        if enable_netflow is not None:
          self.enable_netflow = enable_netflow
        if last_data_time is not None:
          self.last_data_time = last_data_time
        if alert_status_priority is not None:
          self.alert_status_priority = alert_status_priority
        if alert_disable_status is not None:
          self.alert_disable_status = alert_disable_status
        self.host_group_ids = host_group_ids
        if up_time_in_seconds is not None:
          self.up_time_in_seconds = up_time_in_seconds
        if device_type is not None:
          self.device_type = device_type
        if current_collector_id is not None:
          self.current_collector_id = current_collector_id
        if netflow_collector_description is not None:
          self.netflow_collector_description = netflow_collector_description
        if netflow_collector_id is not None:
          self.netflow_collector_id = netflow_collector_id
        if user_permission is not None:
          self.user_permission = user_permission
        if has_disabled_sub_resource is not None:
          self.has_disabled_sub_resource = has_disabled_sub_resource
        if auto_props_assigned_on is not None:
          self.auto_props_assigned_on = auto_props_assigned_on
        if updated_on is not None:
          self.updated_on = updated_on
        if preferred_collector_group_name is not None:
          self.preferred_collector_group_name = preferred_collector_group_name
        if sdt_status is not None:
          self.sdt_status = sdt_status
        if preferred_collector_group_id is not None:
          self.preferred_collector_group_id = preferred_collector_group_id
        if custom_properties is not None:
          self.custom_properties = custom_properties
        if to_delete_time_in_ms is not None:
          self.to_delete_time_in_ms = to_delete_time_in_ms
        if collector_description is not None:
          self.collector_description = collector_description
        self.preferred_collector_id = preferred_collector_id
        if last_rawdata_time is not None:
          self.last_rawdata_time = last_rawdata_time
        self.name = name
        if alerting_disabled_on is not None:
          self.alerting_disabled_on = alerting_disabled_on
        if deleted_time_in_ms is not None:
          self.deleted_time_in_ms = deleted_time_in_ms

    @property
    def alert_status(self):
        """
        Gets the alert_status of this RestDevice.

        :return: The alert_status of this RestDevice.
        :rtype: str
        """
        return self._alert_status

    @alert_status.setter
    def alert_status(self, alert_status):
        """
        Sets the alert_status of this RestDevice.

        :param alert_status: The alert_status of this RestDevice.
        :type: str
        """

        self._alert_status = alert_status

    @property
    def netflow_collector_group_name(self):
        """
        Gets the netflow_collector_group_name of this RestDevice.

        :return: The netflow_collector_group_name of this RestDevice.
        :rtype: str
        """
        return self._netflow_collector_group_name

    @netflow_collector_group_name.setter
    def netflow_collector_group_name(self, netflow_collector_group_name):
        """
        Sets the netflow_collector_group_name of this RestDevice.

        :param netflow_collector_group_name: The netflow_collector_group_name of this RestDevice.
        :type: str
        """

        self._netflow_collector_group_name = netflow_collector_group_name

    @property
    def azure_state(self):
        """
        Gets the azure_state of this RestDevice.

        :return: The azure_state of this RestDevice.
        :rtype: int
        """
        return self._azure_state

    @azure_state.setter
    def azure_state(self, azure_state):
        """
        Sets the azure_state of this RestDevice.

        :param azure_state: The azure_state of this RestDevice.
        :type: int
        """

        self._azure_state = azure_state

    @property
    def related_device_id(self):
        """
        Gets the related_device_id of this RestDevice.

        :return: The related_device_id of this RestDevice.
        :rtype: int
        """
        return self._related_device_id

    @related_device_id.setter
    def related_device_id(self, related_device_id):
        """
        Sets the related_device_id of this RestDevice.

        :param related_device_id: The related_device_id of this RestDevice.
        :type: int
        """

        self._related_device_id = related_device_id

    @property
    def display_name(self):
        """
        Gets the display_name of this RestDevice.

        :return: The display_name of this RestDevice.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """
        Sets the display_name of this RestDevice.

        :param display_name: The display_name of this RestDevice.
        :type: str
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")

        self._display_name = display_name

    @property
    def link(self):
        """
        Gets the link of this RestDevice.

        :return: The link of this RestDevice.
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """
        Sets the link of this RestDevice.

        :param link: The link of this RestDevice.
        :type: str
        """

        self._link = link

    @property
    def aws_state(self):
        """
        Gets the aws_state of this RestDevice.

        :return: The aws_state of this RestDevice.
        :rtype: int
        """
        return self._aws_state

    @aws_state.setter
    def aws_state(self, aws_state):
        """
        Sets the aws_state of this RestDevice.

        :param aws_state: The aws_state of this RestDevice.
        :type: int
        """

        self._aws_state = aws_state

    @property
    def description(self):
        """
        Gets the description of this RestDevice.

        :return: The description of this RestDevice.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this RestDevice.

        :param description: The description of this RestDevice.
        :type: str
        """

        self._description = description

    @property
    def can_use_remote_session(self):
        """
        Gets the can_use_remote_session of this RestDevice.

        :return: The can_use_remote_session of this RestDevice.
        :rtype: bool
        """
        return self._can_use_remote_session

    @can_use_remote_session.setter
    def can_use_remote_session(self, can_use_remote_session):
        """
        Sets the can_use_remote_session of this RestDevice.

        :param can_use_remote_session: The can_use_remote_session of this RestDevice.
        :type: bool
        """

        self._can_use_remote_session = can_use_remote_session

    @property
    def disable_alerting(self):
        """
        Gets the disable_alerting of this RestDevice.

        :return: The disable_alerting of this RestDevice.
        :rtype: bool
        """
        return self._disable_alerting

    @disable_alerting.setter
    def disable_alerting(self, disable_alerting):
        """
        Sets the disable_alerting of this RestDevice.

        :param disable_alerting: The disable_alerting of this RestDevice.
        :type: bool
        """

        self._disable_alerting = disable_alerting

    @property
    def netflow_collector_group_id(self):
        """
        Gets the netflow_collector_group_id of this RestDevice.

        :return: The netflow_collector_group_id of this RestDevice.
        :rtype: int
        """
        return self._netflow_collector_group_id

    @netflow_collector_group_id.setter
    def netflow_collector_group_id(self, netflow_collector_group_id):
        """
        Sets the netflow_collector_group_id of this RestDevice.

        :param netflow_collector_group_id: The netflow_collector_group_id of this RestDevice.
        :type: int
        """

        self._netflow_collector_group_id = netflow_collector_group_id

    @property
    def created_on(self):
        """
        Gets the created_on of this RestDevice.

        :return: The created_on of this RestDevice.
        :rtype: int
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """
        Sets the created_on of this RestDevice.

        :param created_on: The created_on of this RestDevice.
        :type: int
        """

        self._created_on = created_on

    @property
    def ancestor_has_disabled_logic_module(self):
        """
        Gets the ancestor_has_disabled_logic_module of this RestDevice.

        :return: The ancestor_has_disabled_logic_module of this RestDevice.
        :rtype: bool
        """
        return self._ancestor_has_disabled_logic_module

    @ancestor_has_disabled_logic_module.setter
    def ancestor_has_disabled_logic_module(self, ancestor_has_disabled_logic_module):
        """
        Sets the ancestor_has_disabled_logic_module of this RestDevice.

        :param ancestor_has_disabled_logic_module: The ancestor_has_disabled_logic_module of this RestDevice.
        :type: bool
        """

        self._ancestor_has_disabled_logic_module = ancestor_has_disabled_logic_module

    @property
    def system_properties(self):
        """
        Gets the system_properties of this RestDevice.

        :return: The system_properties of this RestDevice.
        :rtype: list[NameAndValue]
        """
        return self._system_properties

    @system_properties.setter
    def system_properties(self, system_properties):
        """
        Sets the system_properties of this RestDevice.

        :param system_properties: The system_properties of this RestDevice.
        :type: list[NameAndValue]
        """

        self._system_properties = system_properties

    @property
    def manual_discovery_flags(self):
        """
        Gets the manual_discovery_flags of this RestDevice.

        :return: The manual_discovery_flags of this RestDevice.
        :rtype: ManualDiscoveryFlags
        """
        return self._manual_discovery_flags

    @manual_discovery_flags.setter
    def manual_discovery_flags(self, manual_discovery_flags):
        """
        Sets the manual_discovery_flags of this RestDevice.

        :param manual_discovery_flags: The manual_discovery_flags of this RestDevice.
        :type: ManualDiscoveryFlags
        """

        self._manual_discovery_flags = manual_discovery_flags

    @property
    def host_status(self):
        """
        Gets the host_status of this RestDevice.

        :return: The host_status of this RestDevice.
        :rtype: str
        """
        return self._host_status

    @host_status.setter
    def host_status(self, host_status):
        """
        Sets the host_status of this RestDevice.

        :param host_status: The host_status of this RestDevice.
        :type: str
        """

        self._host_status = host_status

    @property
    def auto_props_updated_on(self):
        """
        Gets the auto_props_updated_on of this RestDevice.

        :return: The auto_props_updated_on of this RestDevice.
        :rtype: int
        """
        return self._auto_props_updated_on

    @auto_props_updated_on.setter
    def auto_props_updated_on(self, auto_props_updated_on):
        """
        Sets the auto_props_updated_on of this RestDevice.

        :param auto_props_updated_on: The auto_props_updated_on of this RestDevice.
        :type: int
        """

        self._auto_props_updated_on = auto_props_updated_on

    @property
    def scan_config_id(self):
        """
        Gets the scan_config_id of this RestDevice.

        :return: The scan_config_id of this RestDevice.
        :rtype: int
        """
        return self._scan_config_id

    @scan_config_id.setter
    def scan_config_id(self, scan_config_id):
        """
        Sets the scan_config_id of this RestDevice.

        :param scan_config_id: The scan_config_id of this RestDevice.
        :type: int
        """

        self._scan_config_id = scan_config_id

    @property
    def id(self):
        """
        Gets the id of this RestDevice.

        :return: The id of this RestDevice.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this RestDevice.

        :param id: The id of this RestDevice.
        :type: int
        """

        self._id = id

    @property
    def enable_netflow(self):
        """
        Gets the enable_netflow of this RestDevice.

        :return: The enable_netflow of this RestDevice.
        :rtype: bool
        """
        return self._enable_netflow

    @enable_netflow.setter
    def enable_netflow(self, enable_netflow):
        """
        Sets the enable_netflow of this RestDevice.

        :param enable_netflow: The enable_netflow of this RestDevice.
        :type: bool
        """

        self._enable_netflow = enable_netflow

    @property
    def last_data_time(self):
        """
        Gets the last_data_time of this RestDevice.

        :return: The last_data_time of this RestDevice.
        :rtype: int
        """
        return self._last_data_time

    @last_data_time.setter
    def last_data_time(self, last_data_time):
        """
        Sets the last_data_time of this RestDevice.

        :param last_data_time: The last_data_time of this RestDevice.
        :type: int
        """

        self._last_data_time = last_data_time

    @property
    def alert_status_priority(self):
        """
        Gets the alert_status_priority of this RestDevice.

        :return: The alert_status_priority of this RestDevice.
        :rtype: int
        """
        return self._alert_status_priority

    @alert_status_priority.setter
    def alert_status_priority(self, alert_status_priority):
        """
        Sets the alert_status_priority of this RestDevice.

        :param alert_status_priority: The alert_status_priority of this RestDevice.
        :type: int
        """

        self._alert_status_priority = alert_status_priority

    @property
    def alert_disable_status(self):
        """
        Gets the alert_disable_status of this RestDevice.

        :return: The alert_disable_status of this RestDevice.
        :rtype: str
        """
        return self._alert_disable_status

    @alert_disable_status.setter
    def alert_disable_status(self, alert_disable_status):
        """
        Sets the alert_disable_status of this RestDevice.

        :param alert_disable_status: The alert_disable_status of this RestDevice.
        :type: str
        """

        self._alert_disable_status = alert_disable_status

    @property
    def host_group_ids(self):
        """
        Gets the host_group_ids of this RestDevice.

        :return: The host_group_ids of this RestDevice.
        :rtype: str
        """
        return self._host_group_ids

    @host_group_ids.setter
    def host_group_ids(self, host_group_ids):
        """
        Sets the host_group_ids of this RestDevice.

        :param host_group_ids: The host_group_ids of this RestDevice.
        :type: str
        """
        if host_group_ids is None:
            raise ValueError("Invalid value for `host_group_ids`, must not be `None`")

        self._host_group_ids = host_group_ids

    @property
    def up_time_in_seconds(self):
        """
        Gets the up_time_in_seconds of this RestDevice.

        :return: The up_time_in_seconds of this RestDevice.
        :rtype: int
        """
        return self._up_time_in_seconds

    @up_time_in_seconds.setter
    def up_time_in_seconds(self, up_time_in_seconds):
        """
        Sets the up_time_in_seconds of this RestDevice.

        :param up_time_in_seconds: The up_time_in_seconds of this RestDevice.
        :type: int
        """

        self._up_time_in_seconds = up_time_in_seconds

    @property
    def device_type(self):
        """
        Gets the device_type of this RestDevice.

        :return: The device_type of this RestDevice.
        :rtype: int
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type):
        """
        Sets the device_type of this RestDevice.

        :param device_type: The device_type of this RestDevice.
        :type: int
        """

        self._device_type = device_type

    @property
    def current_collector_id(self):
        """
        Gets the current_collector_id of this RestDevice.

        :return: The current_collector_id of this RestDevice.
        :rtype: int
        """
        return self._current_collector_id

    @current_collector_id.setter
    def current_collector_id(self, current_collector_id):
        """
        Sets the current_collector_id of this RestDevice.

        :param current_collector_id: The current_collector_id of this RestDevice.
        :type: int
        """

        self._current_collector_id = current_collector_id

    @property
    def netflow_collector_description(self):
        """
        Gets the netflow_collector_description of this RestDevice.

        :return: The netflow_collector_description of this RestDevice.
        :rtype: str
        """
        return self._netflow_collector_description

    @netflow_collector_description.setter
    def netflow_collector_description(self, netflow_collector_description):
        """
        Sets the netflow_collector_description of this RestDevice.

        :param netflow_collector_description: The netflow_collector_description of this RestDevice.
        :type: str
        """

        self._netflow_collector_description = netflow_collector_description

    @property
    def netflow_collector_id(self):
        """
        Gets the netflow_collector_id of this RestDevice.

        :return: The netflow_collector_id of this RestDevice.
        :rtype: int
        """
        return self._netflow_collector_id

    @netflow_collector_id.setter
    def netflow_collector_id(self, netflow_collector_id):
        """
        Sets the netflow_collector_id of this RestDevice.

        :param netflow_collector_id: The netflow_collector_id of this RestDevice.
        :type: int
        """

        self._netflow_collector_id = netflow_collector_id

    @property
    def user_permission(self):
        """
        Gets the user_permission of this RestDevice.

        :return: The user_permission of this RestDevice.
        :rtype: str
        """
        return self._user_permission

    @user_permission.setter
    def user_permission(self, user_permission):
        """
        Sets the user_permission of this RestDevice.

        :param user_permission: The user_permission of this RestDevice.
        :type: str
        """

        self._user_permission = user_permission

    @property
    def has_disabled_sub_resource(self):
        """
        Gets the has_disabled_sub_resource of this RestDevice.

        :return: The has_disabled_sub_resource of this RestDevice.
        :rtype: bool
        """
        return self._has_disabled_sub_resource

    @has_disabled_sub_resource.setter
    def has_disabled_sub_resource(self, has_disabled_sub_resource):
        """
        Sets the has_disabled_sub_resource of this RestDevice.

        :param has_disabled_sub_resource: The has_disabled_sub_resource of this RestDevice.
        :type: bool
        """

        self._has_disabled_sub_resource = has_disabled_sub_resource

    @property
    def auto_props_assigned_on(self):
        """
        Gets the auto_props_assigned_on of this RestDevice.

        :return: The auto_props_assigned_on of this RestDevice.
        :rtype: int
        """
        return self._auto_props_assigned_on

    @auto_props_assigned_on.setter
    def auto_props_assigned_on(self, auto_props_assigned_on):
        """
        Sets the auto_props_assigned_on of this RestDevice.

        :param auto_props_assigned_on: The auto_props_assigned_on of this RestDevice.
        :type: int
        """

        self._auto_props_assigned_on = auto_props_assigned_on

    @property
    def updated_on(self):
        """
        Gets the updated_on of this RestDevice.

        :return: The updated_on of this RestDevice.
        :rtype: int
        """
        return self._updated_on

    @updated_on.setter
    def updated_on(self, updated_on):
        """
        Sets the updated_on of this RestDevice.

        :param updated_on: The updated_on of this RestDevice.
        :type: int
        """

        self._updated_on = updated_on

    @property
    def preferred_collector_group_name(self):
        """
        Gets the preferred_collector_group_name of this RestDevice.

        :return: The preferred_collector_group_name of this RestDevice.
        :rtype: str
        """
        return self._preferred_collector_group_name

    @preferred_collector_group_name.setter
    def preferred_collector_group_name(self, preferred_collector_group_name):
        """
        Sets the preferred_collector_group_name of this RestDevice.

        :param preferred_collector_group_name: The preferred_collector_group_name of this RestDevice.
        :type: str
        """

        self._preferred_collector_group_name = preferred_collector_group_name

    @property
    def sdt_status(self):
        """
        Gets the sdt_status of this RestDevice.

        :return: The sdt_status of this RestDevice.
        :rtype: str
        """
        return self._sdt_status

    @sdt_status.setter
    def sdt_status(self, sdt_status):
        """
        Sets the sdt_status of this RestDevice.

        :param sdt_status: The sdt_status of this RestDevice.
        :type: str
        """

        self._sdt_status = sdt_status

    @property
    def preferred_collector_group_id(self):
        """
        Gets the preferred_collector_group_id of this RestDevice.

        :return: The preferred_collector_group_id of this RestDevice.
        :rtype: int
        """
        return self._preferred_collector_group_id

    @preferred_collector_group_id.setter
    def preferred_collector_group_id(self, preferred_collector_group_id):
        """
        Sets the preferred_collector_group_id of this RestDevice.

        :param preferred_collector_group_id: The preferred_collector_group_id of this RestDevice.
        :type: int
        """

        self._preferred_collector_group_id = preferred_collector_group_id

    @property
    def custom_properties(self):
        """
        Gets the custom_properties of this RestDevice.

        :return: The custom_properties of this RestDevice.
        :rtype: list[NameAndValue]
        """
        return self._custom_properties

    @custom_properties.setter
    def custom_properties(self, custom_properties):
        """
        Sets the custom_properties of this RestDevice.

        :param custom_properties: The custom_properties of this RestDevice.
        :type: list[NameAndValue]
        """

        self._custom_properties = custom_properties

    @property
    def to_delete_time_in_ms(self):
        """
        Gets the to_delete_time_in_ms of this RestDevice.

        :return: The to_delete_time_in_ms of this RestDevice.
        :rtype: int
        """
        return self._to_delete_time_in_ms

    @to_delete_time_in_ms.setter
    def to_delete_time_in_ms(self, to_delete_time_in_ms):
        """
        Sets the to_delete_time_in_ms of this RestDevice.

        :param to_delete_time_in_ms: The to_delete_time_in_ms of this RestDevice.
        :type: int
        """

        self._to_delete_time_in_ms = to_delete_time_in_ms

    @property
    def collector_description(self):
        """
        Gets the collector_description of this RestDevice.

        :return: The collector_description of this RestDevice.
        :rtype: str
        """
        return self._collector_description

    @collector_description.setter
    def collector_description(self, collector_description):
        """
        Sets the collector_description of this RestDevice.

        :param collector_description: The collector_description of this RestDevice.
        :type: str
        """

        self._collector_description = collector_description

    @property
    def preferred_collector_id(self):
        """
        Gets the preferred_collector_id of this RestDevice.

        :return: The preferred_collector_id of this RestDevice.
        :rtype: int
        """
        return self._preferred_collector_id

    @preferred_collector_id.setter
    def preferred_collector_id(self, preferred_collector_id):
        """
        Sets the preferred_collector_id of this RestDevice.

        :param preferred_collector_id: The preferred_collector_id of this RestDevice.
        :type: int
        """
        if preferred_collector_id is None:
            raise ValueError("Invalid value for `preferred_collector_id`, must not be `None`")

        self._preferred_collector_id = preferred_collector_id

    @property
    def last_rawdata_time(self):
        """
        Gets the last_rawdata_time of this RestDevice.

        :return: The last_rawdata_time of this RestDevice.
        :rtype: int
        """
        return self._last_rawdata_time

    @last_rawdata_time.setter
    def last_rawdata_time(self, last_rawdata_time):
        """
        Sets the last_rawdata_time of this RestDevice.

        :param last_rawdata_time: The last_rawdata_time of this RestDevice.
        :type: int
        """

        self._last_rawdata_time = last_rawdata_time

    @property
    def name(self):
        """
        Gets the name of this RestDevice.

        :return: The name of this RestDevice.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this RestDevice.

        :param name: The name of this RestDevice.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def alerting_disabled_on(self):
        """
        Gets the alerting_disabled_on of this RestDevice.

        :return: The alerting_disabled_on of this RestDevice.
        :rtype: TreeNode
        """
        return self._alerting_disabled_on

    @alerting_disabled_on.setter
    def alerting_disabled_on(self, alerting_disabled_on):
        """
        Sets the alerting_disabled_on of this RestDevice.

        :param alerting_disabled_on: The alerting_disabled_on of this RestDevice.
        :type: TreeNode
        """

        self._alerting_disabled_on = alerting_disabled_on

    @property
    def deleted_time_in_ms(self):
        """
        Gets the deleted_time_in_ms of this RestDevice.

        :return: The deleted_time_in_ms of this RestDevice.
        :rtype: int
        """
        return self._deleted_time_in_ms

    @deleted_time_in_ms.setter
    def deleted_time_in_ms(self, deleted_time_in_ms):
        """
        Sets the deleted_time_in_ms of this RestDevice.

        :param deleted_time_in_ms: The deleted_time_in_ms of this RestDevice.
        :type: int
        """

        self._deleted_time_in_ms = deleted_time_in_ms

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, RestDevice):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
