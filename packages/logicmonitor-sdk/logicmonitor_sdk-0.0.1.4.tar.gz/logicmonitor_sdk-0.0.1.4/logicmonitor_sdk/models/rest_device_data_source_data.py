# coding: utf-8

"""
    logicmonitor_sdk

    LogicMonitor is a cloud-based, full stack, IT infrastructure monitoring solution that allows you to manage your infrastructure from the cloud. logicmonitor_sdk lets you manage your LogicMonitor account programmatically.

    OpenAPI spec version: 1.0.0
    Contact: sdk@logicmonitor.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class RestDeviceDataSourceData(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'instances': 'dict(str, RestRawDataValues)',
        'data_points': 'list[str]',
        'data_source_name': 'str'
    }

    attribute_map = {
        'instances': 'instances',
        'data_points': 'dataPoints',
        'data_source_name': 'dataSourceName'
    }

    def __init__(self, instances=None, data_points=None, data_source_name=None):
        """
        RestDeviceDataSourceData - a model defined in Swagger
        """

        self._instances = None
        self._data_points = None
        self._data_source_name = None
        self.discriminator = None

        if instances is not None:
          self.instances = instances
        if data_points is not None:
          self.data_points = data_points
        if data_source_name is not None:
          self.data_source_name = data_source_name

    @property
    def instances(self):
        """
        Gets the instances of this RestDeviceDataSourceData.

        :return: The instances of this RestDeviceDataSourceData.
        :rtype: dict(str, RestRawDataValues)
        """
        return self._instances

    @instances.setter
    def instances(self, instances):
        """
        Sets the instances of this RestDeviceDataSourceData.

        :param instances: The instances of this RestDeviceDataSourceData.
        :type: dict(str, RestRawDataValues)
        """

        self._instances = instances

    @property
    def data_points(self):
        """
        Gets the data_points of this RestDeviceDataSourceData.

        :return: The data_points of this RestDeviceDataSourceData.
        :rtype: list[str]
        """
        return self._data_points

    @data_points.setter
    def data_points(self, data_points):
        """
        Sets the data_points of this RestDeviceDataSourceData.

        :param data_points: The data_points of this RestDeviceDataSourceData.
        :type: list[str]
        """

        self._data_points = data_points

    @property
    def data_source_name(self):
        """
        Gets the data_source_name of this RestDeviceDataSourceData.

        :return: The data_source_name of this RestDeviceDataSourceData.
        :rtype: str
        """
        return self._data_source_name

    @data_source_name.setter
    def data_source_name(self, data_source_name):
        """
        Sets the data_source_name of this RestDeviceDataSourceData.

        :param data_source_name: The data_source_name of this RestDeviceDataSourceData.
        :type: str
        """

        self._data_source_name = data_source_name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, RestDeviceDataSourceData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
