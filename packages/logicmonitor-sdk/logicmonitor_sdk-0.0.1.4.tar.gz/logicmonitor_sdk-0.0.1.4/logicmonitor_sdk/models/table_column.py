# coding: utf-8

"""
    logicmonitor_sdk

    LogicMonitor is a cloud-based, full stack, IT infrastructure monitoring solution that allows you to manage your infrastructure from the cloud. logicmonitor_sdk lets you manage your LogicMonitor account programmatically.

    OpenAPI spec version: 1.0.0
    Contact: sdk@logicmonitor.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class TableColumn(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'alternate_data_points': 'list[TableDataPoint]',
        'rpn': 'str',
        'data_point': 'TableDataPoint',
        'column_name': 'str',
        'enable_forecast': 'bool',
        'rounding_decimal': 'int'
    }

    attribute_map = {
        'alternate_data_points': 'alternateDataPoints',
        'rpn': 'rpn',
        'data_point': 'dataPoint',
        'column_name': 'columnName',
        'enable_forecast': 'enableForecast',
        'rounding_decimal': 'roundingDecimal'
    }

    def __init__(self, alternate_data_points=None, rpn=None, data_point=None, column_name=None, enable_forecast=None, rounding_decimal=None):
        """
        TableColumn - a model defined in Swagger
        """

        self._alternate_data_points = None
        self._rpn = None
        self._data_point = None
        self._column_name = None
        self._enable_forecast = None
        self._rounding_decimal = None
        self.discriminator = None

        if alternate_data_points is not None:
          self.alternate_data_points = alternate_data_points
        if rpn is not None:
          self.rpn = rpn
        self.data_point = data_point
        self.column_name = column_name
        if enable_forecast is not None:
          self.enable_forecast = enable_forecast
        if rounding_decimal is not None:
          self.rounding_decimal = rounding_decimal

    @property
    def alternate_data_points(self):
        """
        Gets the alternate_data_points of this TableColumn.

        :return: The alternate_data_points of this TableColumn.
        :rtype: list[TableDataPoint]
        """
        return self._alternate_data_points

    @alternate_data_points.setter
    def alternate_data_points(self, alternate_data_points):
        """
        Sets the alternate_data_points of this TableColumn.

        :param alternate_data_points: The alternate_data_points of this TableColumn.
        :type: list[TableDataPoint]
        """

        self._alternate_data_points = alternate_data_points

    @property
    def rpn(self):
        """
        Gets the rpn of this TableColumn.

        :return: The rpn of this TableColumn.
        :rtype: str
        """
        return self._rpn

    @rpn.setter
    def rpn(self, rpn):
        """
        Sets the rpn of this TableColumn.

        :param rpn: The rpn of this TableColumn.
        :type: str
        """

        self._rpn = rpn

    @property
    def data_point(self):
        """
        Gets the data_point of this TableColumn.

        :return: The data_point of this TableColumn.
        :rtype: TableDataPoint
        """
        return self._data_point

    @data_point.setter
    def data_point(self, data_point):
        """
        Sets the data_point of this TableColumn.

        :param data_point: The data_point of this TableColumn.
        :type: TableDataPoint
        """
        if data_point is None:
            raise ValueError("Invalid value for `data_point`, must not be `None`")

        self._data_point = data_point

    @property
    def column_name(self):
        """
        Gets the column_name of this TableColumn.

        :return: The column_name of this TableColumn.
        :rtype: str
        """
        return self._column_name

    @column_name.setter
    def column_name(self, column_name):
        """
        Sets the column_name of this TableColumn.

        :param column_name: The column_name of this TableColumn.
        :type: str
        """
        if column_name is None:
            raise ValueError("Invalid value for `column_name`, must not be `None`")

        self._column_name = column_name

    @property
    def enable_forecast(self):
        """
        Gets the enable_forecast of this TableColumn.

        :return: The enable_forecast of this TableColumn.
        :rtype: bool
        """
        return self._enable_forecast

    @enable_forecast.setter
    def enable_forecast(self, enable_forecast):
        """
        Sets the enable_forecast of this TableColumn.

        :param enable_forecast: The enable_forecast of this TableColumn.
        :type: bool
        """

        self._enable_forecast = enable_forecast

    @property
    def rounding_decimal(self):
        """
        Gets the rounding_decimal of this TableColumn.

        :return: The rounding_decimal of this TableColumn.
        :rtype: int
        """
        return self._rounding_decimal

    @rounding_decimal.setter
    def rounding_decimal(self, rounding_decimal):
        """
        Sets the rounding_decimal of this TableColumn.

        :param rounding_decimal: The rounding_decimal of this TableColumn.
        :type: int
        """

        self._rounding_decimal = rounding_decimal

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TableColumn):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
