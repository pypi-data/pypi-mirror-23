# coding: utf-8

"""
    logicmonitor_sdk

    LogicMonitor is a cloud-based, full stack, IT infrastructure monitoring solution that allows you to manage your infrastructure from the cloud. logicmonitor_sdk lets you manage your LogicMonitor account programmatically.

    OpenAPI spec version: 1.0.0
    Contact: sdk@logicmonitor.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class RestCustomGraph(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'base1024': 'bool',
        'max_value': 'float',
        'top10_only': 'bool',
        'title': 'str',
        'aggregate': 'bool',
        'virtual_data_points': 'list[RestCustomVirtualDataPoint]',
        'min_value': 'float',
        'width': 'int',
        'data_points': 'list[RestCustomFlexibleVirtualDataSourceExV1]',
        'vertical_label': 'str',
        'id': 'int',
        'graph_lines': 'list[RestCustomGraphLine]',
        'height': 'int'
    }

    attribute_map = {
        'base1024': 'base1024',
        'max_value': 'maxValue',
        'top10_only': 'top10Only',
        'title': 'title',
        'aggregate': 'aggregate',
        'virtual_data_points': 'virtualDataPoints',
        'min_value': 'minValue',
        'width': 'width',
        'data_points': 'dataPoints',
        'vertical_label': 'verticalLabel',
        'id': 'id',
        'graph_lines': 'graphLines',
        'height': 'height'
    }

    def __init__(self, base1024=None, max_value=None, top10_only=None, title=None, aggregate=None, virtual_data_points=None, min_value=None, width=None, data_points=None, vertical_label=None, id=None, graph_lines=None, height=None):
        """
        RestCustomGraph - a model defined in Swagger
        """

        self._base1024 = None
        self._max_value = None
        self._top10_only = None
        self._title = None
        self._aggregate = None
        self._virtual_data_points = None
        self._min_value = None
        self._width = None
        self._data_points = None
        self._vertical_label = None
        self._id = None
        self._graph_lines = None
        self._height = None
        self.discriminator = None

        if base1024 is not None:
          self.base1024 = base1024
        if max_value is not None:
          self.max_value = max_value
        if top10_only is not None:
          self.top10_only = top10_only
        if title is not None:
          self.title = title
        if aggregate is not None:
          self.aggregate = aggregate
        if virtual_data_points is not None:
          self.virtual_data_points = virtual_data_points
        if min_value is not None:
          self.min_value = min_value
        if width is not None:
          self.width = width
        if data_points is not None:
          self.data_points = data_points
        if vertical_label is not None:
          self.vertical_label = vertical_label
        if id is not None:
          self.id = id
        if graph_lines is not None:
          self.graph_lines = graph_lines
        if height is not None:
          self.height = height

    @property
    def base1024(self):
        """
        Gets the base1024 of this RestCustomGraph.

        :return: The base1024 of this RestCustomGraph.
        :rtype: bool
        """
        return self._base1024

    @base1024.setter
    def base1024(self, base1024):
        """
        Sets the base1024 of this RestCustomGraph.

        :param base1024: The base1024 of this RestCustomGraph.
        :type: bool
        """

        self._base1024 = base1024

    @property
    def max_value(self):
        """
        Gets the max_value of this RestCustomGraph.

        :return: The max_value of this RestCustomGraph.
        :rtype: float
        """
        return self._max_value

    @max_value.setter
    def max_value(self, max_value):
        """
        Sets the max_value of this RestCustomGraph.

        :param max_value: The max_value of this RestCustomGraph.
        :type: float
        """

        self._max_value = max_value

    @property
    def top10_only(self):
        """
        Gets the top10_only of this RestCustomGraph.

        :return: The top10_only of this RestCustomGraph.
        :rtype: bool
        """
        return self._top10_only

    @top10_only.setter
    def top10_only(self, top10_only):
        """
        Sets the top10_only of this RestCustomGraph.

        :param top10_only: The top10_only of this RestCustomGraph.
        :type: bool
        """

        self._top10_only = top10_only

    @property
    def title(self):
        """
        Gets the title of this RestCustomGraph.

        :return: The title of this RestCustomGraph.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """
        Sets the title of this RestCustomGraph.

        :param title: The title of this RestCustomGraph.
        :type: str
        """

        self._title = title

    @property
    def aggregate(self):
        """
        Gets the aggregate of this RestCustomGraph.

        :return: The aggregate of this RestCustomGraph.
        :rtype: bool
        """
        return self._aggregate

    @aggregate.setter
    def aggregate(self, aggregate):
        """
        Sets the aggregate of this RestCustomGraph.

        :param aggregate: The aggregate of this RestCustomGraph.
        :type: bool
        """

        self._aggregate = aggregate

    @property
    def virtual_data_points(self):
        """
        Gets the virtual_data_points of this RestCustomGraph.

        :return: The virtual_data_points of this RestCustomGraph.
        :rtype: list[RestCustomVirtualDataPoint]
        """
        return self._virtual_data_points

    @virtual_data_points.setter
    def virtual_data_points(self, virtual_data_points):
        """
        Sets the virtual_data_points of this RestCustomGraph.

        :param virtual_data_points: The virtual_data_points of this RestCustomGraph.
        :type: list[RestCustomVirtualDataPoint]
        """

        self._virtual_data_points = virtual_data_points

    @property
    def min_value(self):
        """
        Gets the min_value of this RestCustomGraph.

        :return: The min_value of this RestCustomGraph.
        :rtype: float
        """
        return self._min_value

    @min_value.setter
    def min_value(self, min_value):
        """
        Sets the min_value of this RestCustomGraph.

        :param min_value: The min_value of this RestCustomGraph.
        :type: float
        """

        self._min_value = min_value

    @property
    def width(self):
        """
        Gets the width of this RestCustomGraph.

        :return: The width of this RestCustomGraph.
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """
        Sets the width of this RestCustomGraph.

        :param width: The width of this RestCustomGraph.
        :type: int
        """

        self._width = width

    @property
    def data_points(self):
        """
        Gets the data_points of this RestCustomGraph.

        :return: The data_points of this RestCustomGraph.
        :rtype: list[RestCustomFlexibleVirtualDataSourceExV1]
        """
        return self._data_points

    @data_points.setter
    def data_points(self, data_points):
        """
        Sets the data_points of this RestCustomGraph.

        :param data_points: The data_points of this RestCustomGraph.
        :type: list[RestCustomFlexibleVirtualDataSourceExV1]
        """

        self._data_points = data_points

    @property
    def vertical_label(self):
        """
        Gets the vertical_label of this RestCustomGraph.

        :return: The vertical_label of this RestCustomGraph.
        :rtype: str
        """
        return self._vertical_label

    @vertical_label.setter
    def vertical_label(self, vertical_label):
        """
        Sets the vertical_label of this RestCustomGraph.

        :param vertical_label: The vertical_label of this RestCustomGraph.
        :type: str
        """

        self._vertical_label = vertical_label

    @property
    def id(self):
        """
        Gets the id of this RestCustomGraph.

        :return: The id of this RestCustomGraph.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this RestCustomGraph.

        :param id: The id of this RestCustomGraph.
        :type: int
        """

        self._id = id

    @property
    def graph_lines(self):
        """
        Gets the graph_lines of this RestCustomGraph.

        :return: The graph_lines of this RestCustomGraph.
        :rtype: list[RestCustomGraphLine]
        """
        return self._graph_lines

    @graph_lines.setter
    def graph_lines(self, graph_lines):
        """
        Sets the graph_lines of this RestCustomGraph.

        :param graph_lines: The graph_lines of this RestCustomGraph.
        :type: list[RestCustomGraphLine]
        """

        self._graph_lines = graph_lines

    @property
    def height(self):
        """
        Gets the height of this RestCustomGraph.

        :return: The height of this RestCustomGraph.
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """
        Sets the height of this RestCustomGraph.

        :param height: The height of this RestCustomGraph.
        :type: int
        """

        self._height = height

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, RestCustomGraph):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
