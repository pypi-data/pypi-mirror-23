# coding: utf-8

"""
    logicmonitor_sdk

    LogicMonitor is a cloud-based, full stack, IT infrastructure monitoring solution that allows you to manage your infrastructure from the cloud. logicmonitor_sdk lets you manage your LogicMonitor account programmatically.

    OpenAPI spec version: 1.0.0
    Contact: sdk@logicmonitor.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class RestCollectorGroup(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_permission': 'str',
        'num_of_collectors': 'int',
        'name': 'str',
        'description': 'str',
        'create_on': 'int',
        'id': 'int'
    }

    attribute_map = {
        'user_permission': 'userPermission',
        'num_of_collectors': 'numOfCollectors',
        'name': 'name',
        'description': 'description',
        'create_on': 'createOn',
        'id': 'id'
    }

    def __init__(self, user_permission=None, num_of_collectors=None, name=None, description=None, create_on=None, id=None):
        """
        RestCollectorGroup - a model defined in Swagger
        """

        self._user_permission = None
        self._num_of_collectors = None
        self._name = None
        self._description = None
        self._create_on = None
        self._id = None
        self.discriminator = None

        if user_permission is not None:
          self.user_permission = user_permission
        if num_of_collectors is not None:
          self.num_of_collectors = num_of_collectors
        self.name = name
        if description is not None:
          self.description = description
        if create_on is not None:
          self.create_on = create_on
        if id is not None:
          self.id = id

    @property
    def user_permission(self):
        """
        Gets the user_permission of this RestCollectorGroup.

        :return: The user_permission of this RestCollectorGroup.
        :rtype: str
        """
        return self._user_permission

    @user_permission.setter
    def user_permission(self, user_permission):
        """
        Sets the user_permission of this RestCollectorGroup.

        :param user_permission: The user_permission of this RestCollectorGroup.
        :type: str
        """

        self._user_permission = user_permission

    @property
    def num_of_collectors(self):
        """
        Gets the num_of_collectors of this RestCollectorGroup.

        :return: The num_of_collectors of this RestCollectorGroup.
        :rtype: int
        """
        return self._num_of_collectors

    @num_of_collectors.setter
    def num_of_collectors(self, num_of_collectors):
        """
        Sets the num_of_collectors of this RestCollectorGroup.

        :param num_of_collectors: The num_of_collectors of this RestCollectorGroup.
        :type: int
        """

        self._num_of_collectors = num_of_collectors

    @property
    def name(self):
        """
        Gets the name of this RestCollectorGroup.

        :return: The name of this RestCollectorGroup.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this RestCollectorGroup.

        :param name: The name of this RestCollectorGroup.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def description(self):
        """
        Gets the description of this RestCollectorGroup.

        :return: The description of this RestCollectorGroup.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this RestCollectorGroup.

        :param description: The description of this RestCollectorGroup.
        :type: str
        """

        self._description = description

    @property
    def create_on(self):
        """
        Gets the create_on of this RestCollectorGroup.

        :return: The create_on of this RestCollectorGroup.
        :rtype: int
        """
        return self._create_on

    @create_on.setter
    def create_on(self, create_on):
        """
        Sets the create_on of this RestCollectorGroup.

        :param create_on: The create_on of this RestCollectorGroup.
        :type: int
        """

        self._create_on = create_on

    @property
    def id(self):
        """
        Gets the id of this RestCollectorGroup.

        :return: The id of this RestCollectorGroup.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this RestCollectorGroup.

        :param id: The id of this RestCollectorGroup.
        :type: int
        """

        self._id = id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, RestCollectorGroup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
