# coding: utf-8

"""
    logicmonitor_sdk

    LogicMonitor is a cloud-based, full stack, IT infrastructure monitoring solution that allows you to manage your infrastructure from the cloud. logicmonitor_sdk lets you manage your LogicMonitor account programmatically.

    OpenAPI spec version: 1.0.0
    Contact: sdk@logicmonitor.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class RestAdmin(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'last_name': 'str',
        'note': 'str',
        'view_permission': 'str',
        'accept_eula_on': 'int',
        'roles': 'list[RestRole]',
        'last_login_on': 'int',
        'sms_email': 'str',
        'last_action_on_local': 'str',
        'two_fa_enabled': 'bool',
        'sms_email_format': 'str',
        'first_name': 'str',
        'api_tokens': 'list[RestAPIToken]',
        'password': 'str',
        'last_action': 'str',
        'phone': 'str',
        'created_by': 'str',
        'force_password_change': 'bool',
        'last_action_on': 'int',
        'id': 'int',
        'accept_eula': 'bool',
        'email': 'str',
        'contact_method': 'str',
        'username': 'str',
        'status': 'str'
    }

    attribute_map = {
        'last_name': 'lastName',
        'note': 'note',
        'view_permission': 'viewPermission',
        'accept_eula_on': 'acceptEULAOn',
        'roles': 'roles',
        'last_login_on': 'lastLoginOn',
        'sms_email': 'smsEmail',
        'last_action_on_local': 'lastActionOnLocal',
        'two_fa_enabled': 'twoFAEnabled',
        'sms_email_format': 'smsEmailFormat',
        'first_name': 'firstName',
        'api_tokens': 'apiTokens',
        'password': 'password',
        'last_action': 'lastAction',
        'phone': 'phone',
        'created_by': 'createdBy',
        'force_password_change': 'forcePasswordChange',
        'last_action_on': 'lastActionOn',
        'id': 'id',
        'accept_eula': 'acceptEULA',
        'email': 'email',
        'contact_method': 'contactMethod',
        'username': 'username',
        'status': 'status'
    }

    def __init__(self, last_name=None, note=None, view_permission=None, accept_eula_on=None, roles=None, last_login_on=None, sms_email=None, last_action_on_local=None, two_fa_enabled=None, sms_email_format=None, first_name=None, api_tokens=None, password=None, last_action=None, phone=None, created_by=None, force_password_change=None, last_action_on=None, id=None, accept_eula=None, email=None, contact_method=None, username=None, status=None):
        """
        RestAdmin - a model defined in Swagger
        """

        self._last_name = None
        self._note = None
        self._view_permission = None
        self._accept_eula_on = None
        self._roles = None
        self._last_login_on = None
        self._sms_email = None
        self._last_action_on_local = None
        self._two_fa_enabled = None
        self._sms_email_format = None
        self._first_name = None
        self._api_tokens = None
        self._password = None
        self._last_action = None
        self._phone = None
        self._created_by = None
        self._force_password_change = None
        self._last_action_on = None
        self._id = None
        self._accept_eula = None
        self._email = None
        self._contact_method = None
        self._username = None
        self._status = None
        self.discriminator = None

        if last_name is not None:
          self.last_name = last_name
        if note is not None:
          self.note = note
        if view_permission is not None:
          self.view_permission = view_permission
        if accept_eula_on is not None:
          self.accept_eula_on = accept_eula_on
        self.roles = roles
        if last_login_on is not None:
          self.last_login_on = last_login_on
        if sms_email is not None:
          self.sms_email = sms_email
        if last_action_on_local is not None:
          self.last_action_on_local = last_action_on_local
        if two_fa_enabled is not None:
          self.two_fa_enabled = two_fa_enabled
        if sms_email_format is not None:
          self.sms_email_format = sms_email_format
        if first_name is not None:
          self.first_name = first_name
        if api_tokens is not None:
          self.api_tokens = api_tokens
        self.password = password
        if last_action is not None:
          self.last_action = last_action
        if phone is not None:
          self.phone = phone
        if created_by is not None:
          self.created_by = created_by
        if force_password_change is not None:
          self.force_password_change = force_password_change
        if last_action_on is not None:
          self.last_action_on = last_action_on
        if id is not None:
          self.id = id
        if accept_eula is not None:
          self.accept_eula = accept_eula
        self.email = email
        if contact_method is not None:
          self.contact_method = contact_method
        self.username = username
        if status is not None:
          self.status = status

    @property
    def last_name(self):
        """
        Gets the last_name of this RestAdmin.

        :return: The last_name of this RestAdmin.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """
        Sets the last_name of this RestAdmin.

        :param last_name: The last_name of this RestAdmin.
        :type: str
        """

        self._last_name = last_name

    @property
    def note(self):
        """
        Gets the note of this RestAdmin.

        :return: The note of this RestAdmin.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """
        Sets the note of this RestAdmin.

        :param note: The note of this RestAdmin.
        :type: str
        """

        self._note = note

    @property
    def view_permission(self):
        """
        Gets the view_permission of this RestAdmin.
        this value should be a JSON String, for example:{\"Alerts\":true}

        :return: The view_permission of this RestAdmin.
        :rtype: str
        """
        return self._view_permission

    @view_permission.setter
    def view_permission(self, view_permission):
        """
        Sets the view_permission of this RestAdmin.
        this value should be a JSON String, for example:{\"Alerts\":true}

        :param view_permission: The view_permission of this RestAdmin.
        :type: str
        """

        self._view_permission = view_permission

    @property
    def accept_eula_on(self):
        """
        Gets the accept_eula_on of this RestAdmin.

        :return: The accept_eula_on of this RestAdmin.
        :rtype: int
        """
        return self._accept_eula_on

    @accept_eula_on.setter
    def accept_eula_on(self, accept_eula_on):
        """
        Sets the accept_eula_on of this RestAdmin.

        :param accept_eula_on: The accept_eula_on of this RestAdmin.
        :type: int
        """

        self._accept_eula_on = accept_eula_on

    @property
    def roles(self):
        """
        Gets the roles of this RestAdmin.

        :return: The roles of this RestAdmin.
        :rtype: list[RestRole]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """
        Sets the roles of this RestAdmin.

        :param roles: The roles of this RestAdmin.
        :type: list[RestRole]
        """
        if roles is None:
            raise ValueError("Invalid value for `roles`, must not be `None`")

        self._roles = roles

    @property
    def last_login_on(self):
        """
        Gets the last_login_on of this RestAdmin.

        :return: The last_login_on of this RestAdmin.
        :rtype: int
        """
        return self._last_login_on

    @last_login_on.setter
    def last_login_on(self, last_login_on):
        """
        Sets the last_login_on of this RestAdmin.

        :param last_login_on: The last_login_on of this RestAdmin.
        :type: int
        """

        self._last_login_on = last_login_on

    @property
    def sms_email(self):
        """
        Gets the sms_email of this RestAdmin.

        :return: The sms_email of this RestAdmin.
        :rtype: str
        """
        return self._sms_email

    @sms_email.setter
    def sms_email(self, sms_email):
        """
        Sets the sms_email of this RestAdmin.

        :param sms_email: The sms_email of this RestAdmin.
        :type: str
        """

        self._sms_email = sms_email

    @property
    def last_action_on_local(self):
        """
        Gets the last_action_on_local of this RestAdmin.

        :return: The last_action_on_local of this RestAdmin.
        :rtype: str
        """
        return self._last_action_on_local

    @last_action_on_local.setter
    def last_action_on_local(self, last_action_on_local):
        """
        Sets the last_action_on_local of this RestAdmin.

        :param last_action_on_local: The last_action_on_local of this RestAdmin.
        :type: str
        """

        self._last_action_on_local = last_action_on_local

    @property
    def two_fa_enabled(self):
        """
        Gets the two_fa_enabled of this RestAdmin.

        :return: The two_fa_enabled of this RestAdmin.
        :rtype: bool
        """
        return self._two_fa_enabled

    @two_fa_enabled.setter
    def two_fa_enabled(self, two_fa_enabled):
        """
        Sets the two_fa_enabled of this RestAdmin.

        :param two_fa_enabled: The two_fa_enabled of this RestAdmin.
        :type: bool
        """

        self._two_fa_enabled = two_fa_enabled

    @property
    def sms_email_format(self):
        """
        Gets the sms_email_format of this RestAdmin.

        :return: The sms_email_format of this RestAdmin.
        :rtype: str
        """
        return self._sms_email_format

    @sms_email_format.setter
    def sms_email_format(self, sms_email_format):
        """
        Sets the sms_email_format of this RestAdmin.

        :param sms_email_format: The sms_email_format of this RestAdmin.
        :type: str
        """

        self._sms_email_format = sms_email_format

    @property
    def first_name(self):
        """
        Gets the first_name of this RestAdmin.

        :return: The first_name of this RestAdmin.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """
        Sets the first_name of this RestAdmin.

        :param first_name: The first_name of this RestAdmin.
        :type: str
        """

        self._first_name = first_name

    @property
    def api_tokens(self):
        """
        Gets the api_tokens of this RestAdmin.

        :return: The api_tokens of this RestAdmin.
        :rtype: list[RestAPIToken]
        """
        return self._api_tokens

    @api_tokens.setter
    def api_tokens(self, api_tokens):
        """
        Sets the api_tokens of this RestAdmin.

        :param api_tokens: The api_tokens of this RestAdmin.
        :type: list[RestAPIToken]
        """

        self._api_tokens = api_tokens

    @property
    def password(self):
        """
        Gets the password of this RestAdmin.

        :return: The password of this RestAdmin.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """
        Sets the password of this RestAdmin.

        :param password: The password of this RestAdmin.
        :type: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")

        self._password = password

    @property
    def last_action(self):
        """
        Gets the last_action of this RestAdmin.

        :return: The last_action of this RestAdmin.
        :rtype: str
        """
        return self._last_action

    @last_action.setter
    def last_action(self, last_action):
        """
        Sets the last_action of this RestAdmin.

        :param last_action: The last_action of this RestAdmin.
        :type: str
        """

        self._last_action = last_action

    @property
    def phone(self):
        """
        Gets the phone of this RestAdmin.

        :return: The phone of this RestAdmin.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """
        Sets the phone of this RestAdmin.

        :param phone: The phone of this RestAdmin.
        :type: str
        """

        self._phone = phone

    @property
    def created_by(self):
        """
        Gets the created_by of this RestAdmin.

        :return: The created_by of this RestAdmin.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """
        Sets the created_by of this RestAdmin.

        :param created_by: The created_by of this RestAdmin.
        :type: str
        """

        self._created_by = created_by

    @property
    def force_password_change(self):
        """
        Gets the force_password_change of this RestAdmin.

        :return: The force_password_change of this RestAdmin.
        :rtype: bool
        """
        return self._force_password_change

    @force_password_change.setter
    def force_password_change(self, force_password_change):
        """
        Sets the force_password_change of this RestAdmin.

        :param force_password_change: The force_password_change of this RestAdmin.
        :type: bool
        """

        self._force_password_change = force_password_change

    @property
    def last_action_on(self):
        """
        Gets the last_action_on of this RestAdmin.

        :return: The last_action_on of this RestAdmin.
        :rtype: int
        """
        return self._last_action_on

    @last_action_on.setter
    def last_action_on(self, last_action_on):
        """
        Sets the last_action_on of this RestAdmin.

        :param last_action_on: The last_action_on of this RestAdmin.
        :type: int
        """

        self._last_action_on = last_action_on

    @property
    def id(self):
        """
        Gets the id of this RestAdmin.

        :return: The id of this RestAdmin.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this RestAdmin.

        :param id: The id of this RestAdmin.
        :type: int
        """

        self._id = id

    @property
    def accept_eula(self):
        """
        Gets the accept_eula of this RestAdmin.

        :return: The accept_eula of this RestAdmin.
        :rtype: bool
        """
        return self._accept_eula

    @accept_eula.setter
    def accept_eula(self, accept_eula):
        """
        Sets the accept_eula of this RestAdmin.

        :param accept_eula: The accept_eula of this RestAdmin.
        :type: bool
        """

        self._accept_eula = accept_eula

    @property
    def email(self):
        """
        Gets the email of this RestAdmin.

        :return: The email of this RestAdmin.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this RestAdmin.

        :param email: The email of this RestAdmin.
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def contact_method(self):
        """
        Gets the contact_method of this RestAdmin.

        :return: The contact_method of this RestAdmin.
        :rtype: str
        """
        return self._contact_method

    @contact_method.setter
    def contact_method(self, contact_method):
        """
        Sets the contact_method of this RestAdmin.

        :param contact_method: The contact_method of this RestAdmin.
        :type: str
        """

        self._contact_method = contact_method

    @property
    def username(self):
        """
        Gets the username of this RestAdmin.

        :return: The username of this RestAdmin.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """
        Sets the username of this RestAdmin.

        :param username: The username of this RestAdmin.
        :type: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")

        self._username = username

    @property
    def status(self):
        """
        Gets the status of this RestAdmin.

        :return: The status of this RestAdmin.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this RestAdmin.

        :param status: The status of this RestAdmin.
        :type: str
        """

        self._status = status

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, RestAdmin):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
