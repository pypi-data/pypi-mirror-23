[tox]
envlist =
    clean,setup,safety,style,spell,link,docs,
    py27,
    py34,
    py35,
    py36,
    py37-dev,
    pypy,
    report
skip_missing_interpreters = true

[testenv]
setenv =
    PYTHONPATH = {toxinidir}:{toxinidir}/src:{toxinidir}/tests
    PYTHONUNBUFFERED=yes
commands = {posargs:pytest --cov --cov-report=term-missing -vv  tests}
deps =
    -r{toxinidir}/requirements/test.txt
passenv = *
usedevelop = false
whitelist_externals = tox

[testenv:test]
description = Run all the Python/Django test environments.
skip_install = true
commands =
    tox -e py27,py34,py35,py36,py37-dev,pypy,
    tox -e report

[testenv:dtest]
description = Run all the Python/Django test environments in parallel.
skip_install = true
deps = detox
commands =
    detox -e py27,py34,py35,py36,py37-dev,pypy,
    tox -e report

[testenv:detox]
description = Run all the environments in parallel.
skip_install = true
deps = detox
commands =
    detox -e clean,setup,safety,style,spell,link,docs,py27,py34,py35,py36,py37-dev,pypy,
    tox -e report

[testenv:docs]
description = Build the documentation locally.
skip_install = true
deps = -r{toxinidir}/docs/requirements.txt
commands = sphinx-build {posargs:-E} -b html docs dist/docs

[testenv:check]
description = Run all the check environments.
skip_install = true
commands = tox -e setup,safety,style,docs,spell,link

[testenv:dcheck]
description = Run all the check environments in parallel.
skip_install = true
deps = detox
commands = detox -e setup,safety,style,docs,spell,link

[testenv:setup]
description = Check that the package will be correctly installed and correctly rendered on PyPI.
skip_install = true
deps =
    docutils
    check-manifest
    readme-renderer
    pygments
commands =
    python setup.py check --strict --metadata --restructuredtext
    check-manifest {toxinidir}

[testenv:safety]
description = Check that the requirements versions do not have security vulnerabilities.
skip_install = true
deps =
    bandit
    safety
commands =
    safety check -r {toxinidir}/requirements/base.txt
    bandit -r {toxinidir}/src/archan -s B404,B603

[testenv:style]
description = Check the code style.
deps =
    isort
    prospector[with_everything]
commands =
    isort --diff --recursive src/archan tests setup.py
    prospector {posargs} {toxinidir}

[testenv:spell]
description = Check the spelling in the documentation.
skip_install = true
setenv = SPELLCHECK=1
deps =
    -r{toxinidir}/docs/requirements.txt
    sphinxcontrib-spelling
    pyenchant
commands =
    - sphinx-build {posargs:-E} -Q -b html docs dist/docs
    sphinx-build -b spelling -w /dev/null docs dist/docs

[testenv:link]
description = Check that the links written in documentation are valid.
skip_install = true
deps = -r{toxinidir}/docs/requirements.txt
commands =
    - sphinx-build {posargs:-E} -Q -b html docs dist/docs
    sphinx-build -b linkcheck -w /dev/null docs dist/docs

[testenv:report]
description = Create coverage report.
deps = coverage
skip_install = true
commands =
    coverage combine --append
    coverage report
    coverage html

[testenv:clean]
description = Delete coverage report.
commands = coverage erase
skip_install = true
deps = coverage

[testenv:codacy]
description = Upload coverage report to codacy.
deps =
    codacy-coverage
    coverage
skip_install = true
commands =
    coverage combine --append
    coverage report
    coverage xml --ignore-errors
    python-codacy-coverage []

[testenv:archan]
description = Run archan test.
whitelist_externals = archan
commands = archan
use_develop = true
