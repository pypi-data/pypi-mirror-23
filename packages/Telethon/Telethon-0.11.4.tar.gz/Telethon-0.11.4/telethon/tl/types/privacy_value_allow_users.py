from ...tl.mtproto_request import MTProtoRequest


class PrivacyValueAllowUsers(MTProtoRequest):
    """Class generated by TLObjects' generator. All changes will be ERASED. TL definition below.
    privacyValueAllowUsers#4d5bbe0c users:Vector<int> = PrivacyRule"""

    # Telegram's constructor (U)ID for this class
    constructor_id = 0x4d5bbe0c
    # Also the ID of its resulting type for fast checks
    subclass_of_id = 0xebb7f270

    def __init__(self, users):
        """
        :param users: Telegram type: "int". Must be a list.

        Constructor for PrivacyRule: Instance of either PrivacyValueAllowContacts, PrivacyValueAllowAll, PrivacyValueAllowUsers, PrivacyValueDisallowContacts, PrivacyValueDisallowAll, PrivacyValueDisallowUsers.
        """
        super().__init__()

        self.users = users

    def to_dict(self):
        return {
            'users': [] if self.users is None else self.users[:],
        }

    def on_send(self, writer):
        writer.write_int(PrivacyValueAllowUsers.constructor_id, signed=False)
        writer.write_int(0x1cb5c415, signed=False)  # Vector's constructor ID
        writer.write_int(len(self.users))
        for users_item in self.users:
            writer.write_int(users_item)

    @staticmethod
    def empty():
        """Returns an "empty" instance (attributes=None)"""
        return PrivacyValueAllowUsers(None)

    def on_response(self, reader):
        reader.read_int()  # Vector's constructor ID
        self.users = []  # Initialize an empty list
        users_len = reader.read_int()
        for _ in range(users_len):
            users_item = reader.read_int()
            self.users.append(users_item)

    def __repr__(self):
        return 'privacyValueAllowUsers#4d5bbe0c users:Vector<int> = PrivacyRule'

    def __str__(self):
        return MTProtoRequest.pretty_format(self)

    def stringify(self):
        return MTProtoRequest.pretty_format(self, indent=0)
