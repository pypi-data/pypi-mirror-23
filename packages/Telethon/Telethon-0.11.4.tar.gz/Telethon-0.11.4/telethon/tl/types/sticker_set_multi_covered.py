from ...tl.mtproto_request import MTProtoRequest


class StickerSetMultiCovered(MTProtoRequest):
    """Class generated by TLObjects' generator. All changes will be ERASED. TL definition below.
    stickerSetMultiCovered#3407e51b set:StickerSet covers:Vector<Document> = StickerSetCovered"""

    # Telegram's constructor (U)ID for this class
    constructor_id = 0x3407e51b
    # Also the ID of its resulting type for fast checks
    subclass_of_id = 0x7f86e4e5

    def __init__(self, set, covers):
        """
        :param set: Telegram type: "StickerSet".
        :param covers: Telegram type: "Document". Must be a list.

        Constructor for StickerSetCovered: Instance of either StickerSetCovered, StickerSetMultiCovered.
        """
        super().__init__()

        self.set = set
        self.covers = covers

    def to_dict(self):
        return {
            'set': None if self.set is None else self.set.to_dict(),
            'covers': [] if self.covers is None else [None if x is None else x.to_dict() for x in self.covers],
        }

    def on_send(self, writer):
        writer.write_int(StickerSetMultiCovered.constructor_id, signed=False)
        self.set.on_send(writer)
        writer.write_int(0x1cb5c415, signed=False)  # Vector's constructor ID
        writer.write_int(len(self.covers))
        for covers_item in self.covers:
            covers_item.on_send(writer)

    @staticmethod
    def empty():
        """Returns an "empty" instance (attributes=None)"""
        return StickerSetMultiCovered(None, None)

    def on_response(self, reader):
        self.set = reader.tgread_object()
        reader.read_int()  # Vector's constructor ID
        self.covers = []  # Initialize an empty list
        covers_len = reader.read_int()
        for _ in range(covers_len):
            covers_item = reader.tgread_object()
            self.covers.append(covers_item)

    def __repr__(self):
        return 'stickerSetMultiCovered#3407e51b set:StickerSet covers:Vector<Document> = StickerSetCovered'

    def __str__(self):
        return MTProtoRequest.pretty_format(self)

    def stringify(self):
        return MTProtoRequest.pretty_format(self, indent=0)
