from ....tl.mtproto_request import MTProtoRequest


class KickFromChannelRequest(MTProtoRequest):
    """Class generated by TLObjects' generator. All changes will be ERASED. TL definition below.
    channels.kickFromChannel#a672de14 channel:InputChannel user_id:InputUser kicked:Bool = Updates"""

    # Telegram's constructor (U)ID for this class
    constructor_id = 0xa672de14
    # Also the ID of its resulting type for fast checks
    subclass_of_id = 0x8af52aac

    def __init__(self, channel, user_id, kicked):
        """
        :param channel: Telegram type: "InputChannel".
        :param user_id: Telegram type: "InputUser".
        :param kicked: Telegram type: "Bool".

        :returns Updates: Instance of either UpdatesTooLong, UpdateShortMessage, UpdateShortChatMessage, UpdateShort, UpdatesCombined, UpdatesTg, UpdateShortSentMessage.
        """
        super().__init__()
        self.result = None
        self.confirmed = True  # Confirmed by default

        self.channel = channel
        self.user_id = user_id
        self.kicked = kicked

    def to_dict(self):
        return {
            'channel': None if self.channel is None else self.channel.to_dict(),
            'user_id': None if self.user_id is None else self.user_id.to_dict(),
            'kicked': self.kicked,
        }

    def on_send(self, writer):
        writer.write_int(KickFromChannelRequest.constructor_id, signed=False)
        self.channel.on_send(writer)
        self.user_id.on_send(writer)
        writer.tgwrite_bool(self.kicked)

    @staticmethod
    def empty():
        """Returns an "empty" instance (attributes=None)"""
        return KickFromChannelRequest(None, None, None)

    def on_response(self, reader):
        self.result = reader.tgread_object()

    def __repr__(self):
        return 'channels.kickFromChannel#a672de14 channel:InputChannel user_id:InputUser kicked:Bool = Updates'

    def __str__(self):
        return '(channels.kickFromChannel (ID: 0xa672de14) = (channel={}, user_id={}, kicked={}))'.format(str(self.channel), str(self.user_id), str(self.kicked))
