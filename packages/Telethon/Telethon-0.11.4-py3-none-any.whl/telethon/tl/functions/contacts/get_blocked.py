from ....tl.mtproto_request import MTProtoRequest


class GetBlockedRequest(MTProtoRequest):
    """Class generated by TLObjects' generator. All changes will be ERASED. TL definition below.
    contacts.getBlocked#f57c350f offset:int limit:int = contacts.Blocked"""

    # Telegram's constructor (U)ID for this class
    constructor_id = 0xf57c350f
    # Also the ID of its resulting type for fast checks
    subclass_of_id = 0xffba4f4f

    def __init__(self, offset, limit):
        """
        :param offset: Telegram type: "int".
        :param limit: Telegram type: "int".

        :returns contacts.Blocked: Instance of either Blocked, BlockedSlice.
        """
        super().__init__()
        self.result = None
        self.confirmed = True  # Confirmed by default

        self.offset = offset
        self.limit = limit

    def to_dict(self):
        return {
            'offset': self.offset,
            'limit': self.limit,
        }

    def on_send(self, writer):
        writer.write_int(GetBlockedRequest.constructor_id, signed=False)
        writer.write_int(self.offset)
        writer.write_int(self.limit)

    @staticmethod
    def empty():
        """Returns an "empty" instance (attributes=None)"""
        return GetBlockedRequest(None, None)

    def on_response(self, reader):
        self.result = reader.tgread_object()

    def __repr__(self):
        return 'contacts.getBlocked#f57c350f offset:int limit:int = contacts.Blocked'

    def __str__(self):
        return MTProtoRequest.pretty_format(self)

    def stringify(self):
        return MTProtoRequest.pretty_format(self, indent=0)
