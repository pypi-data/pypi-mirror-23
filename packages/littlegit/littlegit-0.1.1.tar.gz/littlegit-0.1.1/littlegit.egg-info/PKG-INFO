Metadata-Version: 1.1
Name: littlegit
Version: 0.1.1
Summary: This is a little tiny wrapper around Git CLI
Home-page: https://github.com/expobrain/littlegit
Author: Daniele Esposti
Author-email: daniele.esposti@gmail.com
License: MIT License

Copyright (c) 2017 Daniele Esposti

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

Description: Littlegit
        =========
        
        A very little Python wrapper around Git CLI.
        
        Littlegit doesn't need any external dependency except for the `Git <https://git-scm.com/>`_ binary
        to be installed in your system.
        
        All the current, past and future commands and options of Git are fully supported.
        
        
        Installation
        ------------
        
        Install Littlegit with `pip`:
        
        .. code-block:: python
        
            pip install littlepip
        
        
        Usage
        -----
        
        To use Littlegit is very simple, it follows a very simple rule to map Git's commands to Littlegit's
        API:
        
        * every Git command is a method
        * every argument is a method's argument
        * every option is a method's keywords
        
        Lets explain this with an example of initialising a local repository, adding a file and commiting:
        
        .. code-block:: python
        
            repo = Git("/my/local/repo")
            repo.init()  # git init /my/local/repo
        
            open("myfile", "w").close()
        
            repo.add("myfile")  # git add myfile
            repo.commit(message="this is my first commit")  # git commit --message "this is my first commit"
            repo.remote("add", "origin", "<my_remote_repo>")  # git remote add origin <my_remote_repo>
            repo.push("origin", "master")  # git push origin master
        
        All the methods return the output if the Git command:
        
        .. code-block:: python
        
            output = repo.branch(remote=True)  # git branch --remote
            print(output)
            origin/HEAD -> origin/master
            origin/master
        
        
        Tests
        -----
        
        To run the unit tests install the development dependencies and then run
        `Tox <https://tox.readthedocs.io>`_:
        
        .. code-block:: bash
        
            pip install -r requirements-dev.txt
            tox
        
Platform: UNKNOWN
Classifier: License :: Public Domain
Classifier: Development Status :: 5 - Production/Stable
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 2
Classifier: Programming Language :: Python :: 3
Classifier: Intended Audience :: Developers
Classifier: Topic :: System
Classifier: Topic :: Internet
Classifier: Topic :: Software Development :: Libraries
