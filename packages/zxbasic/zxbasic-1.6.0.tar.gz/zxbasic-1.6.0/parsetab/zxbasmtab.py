
# zxbasmtab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftRSHIFTLSHIFTBANDBORBXORleftPLUSMINUSleftMULDIVMODrightPOWrightUMINUSA ADC ADD ADDR AF ALIGN AND APO B BAND BC BIT BOR BXOR C CALL CCF COMMA CP CPD CPDR CPI CPIR CPL D DAA DE DEC DEFAULT DEFB DEFS DEFW DI DIV DJNZ E EI END ENDP EQU EX EXX H HALT HL I ID IM IN INC INCBIN IND INDR INI INIR INTEGER IX IXH IXL IY IYH IYL JP JR L LABEL LD LDD LDDR LDI LDIR LOCAL LP LSHIFT M MINUS MOD MUL NAMESPACE NC NEG NEWLINE NOP NZ OR ORG OTDR OTIR OUT OUTD OUTI P PE PLUS PO POP POW PROC PUSH R RES RET RETI RETN RL RLA RLC RLCA RLD RP RR RRA RRC RRCA RRD RSHIFT RST SBC SCF SET SLA SLL SP SRA SRL STRING SUB UMINUS XOR Z _INIT _LINE start : program\n              | program endline\n     endline : END NEWLINE\n     endline : END expr NEWLINE\n                | END pexpr NEWLINE\n     program : line\n     program : program line\n     line : ID EQU expr NEWLINE\n             | ID EQU pexpr NEWLINE\n     line : LABEL NEWLINE\n     line : LABEL asm NEWLINE\n     line : asm NEWLINE\n     line : NEWLINE\n     asm : LD reg8 COMMA reg8_hl\n            | LD reg8_hl COMMA reg8\n            | LD reg8 COMMA reg8\n            | LD SP COMMA HL\n            | LD SP COMMA reg16i\n            | LD A COMMA reg8\n            | LD reg8 COMMA A\n            | LD reg8_hl COMMA A\n            | LD A COMMA reg8_hl\n            | LD A COMMA A\n            | LD A COMMA I\n            | LD I COMMA A\n            | LD A COMMA R\n            | LD R COMMA A\n            | LD A COMMA reg8i\n            | LD reg8i COMMA A\n            | LD reg8 COMMA reg8i\n            | LD reg8i COMMA regBCDE\n            | LD reg8i COMMA reg8i\n     asm : LD A COMMA LP BC RP\n            | LD A COMMA LP DE RP\n            | LD LP BC RP COMMA A\n            | LD LP DE RP COMMA A\n     asm : PROC\n     asm : ENDP\n     asm : LOCAL id_list\n     id_list : ID\n     id_list : id_list COMMA ID\n     asm : DEFB number_list\n            | DEFB STRING\n     asm : DEFS number_list\n     asm : DEFW number_list\n     number_list : expr\n                    | pexpr\n     number_list : number_list COMMA expr\n                    | number_list COMMA pexpr\n     asm : LD reg8_I COMMA reg8\n            | LD reg8_I COMMA A\n     asm : LD reg8 COMMA reg8_I\n            | LD A COMMA reg8_I\n     reg8_hl : LP HL RP\n        reg8_I : LP IX PLUS expr RP\n               | LP IX MINUS expr RP\n               | LP IY PLUS expr RP\n               | LP IY MINUS expr RP\n               | LP IX PLUS pexpr RP\n               | LP IX MINUS pexpr RP\n               | LP IY PLUS pexpr RP\n               | LP IY MINUS pexpr RP\n     asm : EX AF COMMA AF APO\n     asm : EX DE COMMA HL\n     asm : ORG expr\n            | ORG pexpr\n     asm : NAMESPACE DEFAULT\n            | NAMESPACE ID\n     asm : ALIGN expr\n            | ALIGN pexpr\n     asm : INCBIN STRING\n     asm : EX LP SP RP COMMA reg16i\n            | EX LP SP RP COMMA HL\n     asm : INC inc_reg\n            | DEC inc_reg\n     asm : INC reg8_I\n            | DEC reg8_I\n     asm : LD reg8 COMMA expr\n            | LD reg8 COMMA pexpr\n            | LD reg16 COMMA expr\n            | LD reg8_hl COMMA expr\n            | LD A COMMA expr\n            | LD SP COMMA expr\n            | LD reg8i COMMA expr\n     asm : LD reg8_I COMMA expr\n     asm : JP reg8_hl\n            | JP LP reg16i RP\n     asm : SBC A COMMA reg8\n            | SBC A COMMA reg8i\n            | SBC A COMMA A\n            | SBC A COMMA reg8_hl\n            | SBC HL COMMA SP\n            | SBC HL COMMA BC\n            | SBC HL COMMA DE\n            | SBC HL COMMA HL\n            | ADD A COMMA reg8\n            | ADD A COMMA reg8i\n            | ADD A COMMA A\n            | ADD A COMMA reg8_hl\n            | ADC A COMMA reg8\n            | ADC A COMMA reg8i\n            | ADC A COMMA A\n            | ADC A COMMA reg8_hl\n            | ADD HL COMMA BC\n            | ADD HL COMMA DE\n            | ADD HL COMMA HL\n            | ADD HL COMMA SP\n            | ADC HL COMMA BC\n            | ADC HL COMMA DE\n            | ADC HL COMMA HL\n            | ADC HL COMMA SP\n            | ADD reg16i COMMA BC\n            | ADD reg16i COMMA DE\n            | ADD reg16i COMMA HL\n            | ADD reg16i COMMA SP\n            | ADD reg16i COMMA reg16i\n     asm : SBC A COMMA expr\n            | SBC A COMMA pexpr\n            | ADD A COMMA expr\n            | ADD A COMMA pexpr\n            | ADC A COMMA expr\n            | ADC A COMMA pexpr\n     asm : SBC A COMMA reg8_I\n            | ADD A COMMA reg8_I\n            | ADC A COMMA reg8_I\n     asm : bitwiseop reg8\n            | bitwiseop reg8i\n            | bitwiseop A\n            | bitwiseop reg8_hl\n     asm : bitwiseop reg8_I\n     asm : bitwiseop expr\n            | bitwiseop pexpr\n     bitwiseop : OR\n              | AND\n              | XOR\n              | SUB\n              | CP\n     asm : PUSH AF\n            | PUSH reg16\n            | POP AF\n            | POP reg16\n     asm : LD pexpr COMMA A\n            | LD pexpr COMMA reg16\n            | LD pexpr COMMA SP\n     asm : LD A COMMA pexpr\n            | LD reg16 COMMA pexpr\n            | LD SP COMMA pexpr\n     asm : rotation reg8\n            | rotation reg8_hl\n            | rotation A\n     asm : rotation reg8_I\n     asm : bitop expr COMMA A\n            | bitop pexpr COMMA A\n            | bitop expr COMMA reg8\n            | bitop pexpr COMMA reg8\n            | bitop expr COMMA reg8_hl\n            | bitop pexpr COMMA reg8_hl\n     asm : bitop expr COMMA reg8_I\n            | bitop pexpr COMMA reg8_I\n     bitop : BIT\n              | RES\n              | SET\n     rotation : RR\n                 | RL\n                 | RRC\n                 | RLC\n                 | SLA\n                 | SLL\n                 | SRA\n                 | SRL\n     inc_reg : SP\n                | reg8\n                | reg16\n                | reg8_hl\n                | A\n                | reg8i\n     reg8 : H\n             | L\n             | regBCDE\n     regBCDE : B\n                | C\n                | D\n                | E\n     reg8i : IXH\n              | IXL\n              | IYH\n              | IYL\n     reg16 : BC\n             | DE\n             | HL\n             | reg16i\n     reg16i : IX\n               | IY\n     asm : JP jp_flags COMMA expr\n            | JP jp_flags COMMA pexpr\n            | CALL jp_flags COMMA expr\n            | CALL jp_flags COMMA pexpr\n     asm : RET jp_flags\n     jp_flags : P\n                 | M\n                 | PO\n                 | PE\n                 | jr_flags\n     asm : JR jr_flags COMMA expr\n            | JR jr_flags COMMA pexpr\n     jr_flags : Z\n                 | C\n                 | NZ\n                 | NC\n     asm : JP expr\n            | JR expr\n            | CALL expr\n            | DJNZ expr\n            | JP pexpr\n            | JR pexpr\n            | CALL pexpr\n            | DJNZ pexpr\n     asm : RST expr\n     asm : IM expr\n        asm : IN A COMMA LP C RP\n            | IN reg8 COMMA LP C RP\n        asm : OUT LP C RP COMMA A\n            | OUT LP C RP COMMA reg8\n     asm : IN A COMMA pexpr\n     asm : OUT pexpr COMMA A\n     asm : NOP\n            | EXX\n            | CCF\n            | SCF\n            | LDIR\n            | LDI\n            | LDDR\n            | LDD\n            | CPIR\n            | CPI\n            | CPDR\n            | CPD\n            | DAA\n            | NEG\n            | CPL\n            | HALT\n            | EI\n            | DI\n            | OUTD\n            | OUTI\n            | OTDR\n            | OTIR\n            | IND\n            | INI\n            | INDR\n            | INIR\n            | RET\n            | RETI\n            | RETN\n            | RLA\n            | RLCA\n            | RRA\n            | RRCA\n            | RLD\n            | RRD\n     expr : expr BAND expr\n             | expr BOR expr\n             | expr BXOR expr\n             | expr PLUS expr\n             | expr MINUS expr\n             | expr MUL expr\n             | expr DIV expr\n             | expr MOD expr\n             | expr POW expr\n             | expr LSHIFT expr\n             | expr RSHIFT expr\n             | pexpr BAND expr\n             | pexpr BOR expr\n             | pexpr BXOR expr\n             | pexpr PLUS expr\n             | pexpr MINUS expr\n             | pexpr MUL expr\n             | pexpr DIV expr\n             | pexpr MOD expr\n             | pexpr POW expr\n             | pexpr LSHIFT expr\n             | pexpr RSHIFT expr\n             | expr BAND pexpr\n             | expr BOR pexpr\n             | expr BXOR pexpr\n             | expr PLUS pexpr\n             | expr MINUS pexpr\n             | expr MUL pexpr\n             | expr DIV pexpr\n             | expr MOD pexpr\n             | expr POW pexpr\n             | expr LSHIFT pexpr\n             | expr RSHIFT pexpr\n     pexpr : LP expr RP\n     expr : MINUS expr %prec UMINUS\n     expr : INTEGER\n     expr : ID\n     expr : ADDR\n     asm : preproc_line\n     preproc_line : _LINE INTEGER\n     preproc_line : _LINE INTEGER STRING\n     preproc_line : _INIT ID\n    '
    
_lr_action_items = {end':([16,18,42,43,134,140,141,153,252,254,333,334,433,434,],[-1,-6,0,-13,-12,-2,-7,-10,-3,-11,-4,-5,-8,-9,]),'SET':([0,16,18,27,43,134,141,153,254,433,434,],[24,24,-6,24,-13,-12,-7,-10,-11,-8,-9,]),'RR':([0,16,18,27,43,134,141,153,254,433,434,],[25,25,-6,25,-13,-12,-7,-10,-11,-8,-9,]),'IY':([5,31,46,50,58,65,95,122,143,160,182,262,263,274,341,378,451,],[124,124,124,124,124,124,243,243,243,124,243,124,124,124,243,243,124,]),'EXX':([0,16,18,27,43,134,141,153,254,433,434,],[26,26,-6,26,-13,-12,-7,-10,-11,-8,-9,]),'LABEL':([0,16,18,43,134,141,153,254,433,434,],[27,27,-6,-13,-12,-7,-10,-11,-8,-9,]),'RLA':([0,16,18,27,43,134,141,153,254,433,434,],[28,28,-6,28,-13,-12,-7,-10,-11,-8,-9,]),'CCF':([0,16,18,27,43,134,141,153,254,433,434,],[29,29,-6,29,-13,-12,-7,-10,-11,-8,-9,]),'EI':([0,16,18,27,43,134,141,153,254,433,434,],[39,39,-6,39,-13,-12,-7,-10,-11,-8,-9,]),'PO':([34,38,41,],[171,171,171,]),'NZ':([34,38,41,57,],[163,163,163,163,]),'PUSH':([0,16,18,27,43,134,141,153,254,433,434,],[31,31,-6,31,-13,-12,-7,-10,-11,-8,-9,]),'SBC':([0,16,18,27,43,134,141,153,254,433,434,],[32,32,-6,32,-13,-12,-7,-10,-11,-8,-9,]),'RRCA':([0,16,18,27,43,134,141,153,254,433,434,],[67,67,-6,67,-13,-12,-7,-10,-11,-8,-9,]),'OUTI':([0,16,18,27,43,134,141,153,254,433,434,],[33,33,-6,33,-13,-12,-7,-10,-11,-8,-9,]),'JP':([0,16,18,27,43,134,141,153,254,433,434,],[34,34,-6,34,-13,-12,-7,-10,-11,-8,-9,]),'PE':([34,38,41,],[170,170,170,]),'RETI':([0,16,18,27,43,134,141,153,254,433,434,],[35,35,-6,35,-13,-12,-7,-10,-11,-8,-9,]),'INDR':([0,16,18,27,43,134,141,153,254,433,434,],[36,36,-6,36,-13,-12,-7,-10,-11,-8,-9,]),'SUB':([0,16,18,27,43,134,141,153,254,433,434,],[37,37,-6,37,-13,-12,-7,-10,-11,-8,-9,]),'CALL':([0,16,18,27,43,134,141,153,254,433,434,],[38,38,-6,38,-13,-12,-7,-10,-11,-8,-9,]),'APO':([419,],[450,]),'C':([2,3,5,7,11,17,25,34,37,38,41,50,52,53,55,57,65,70,72,79,83,84,87,138,256,261,267,269,271,272,273,275,276,283,329,330,445,],[-169,107,107,-134,107,107,-163,166,-136,166,166,107,-135,-165,-137,166,107,-167,-133,-166,-168,-170,-164,250,107,107,107,107,107,107,107,107,107,107,443,444,107,]),'IXL':([3,5,7,37,50,52,55,65,72,256,261,267,271,273,283,],[100,100,-134,-136,100,-135,-137,100,-133,100,100,100,100,100,100,]),'P':([34,38,41,],[161,161,161,]),'NEWLINE':([0,1,6,8,9,10,12,13,16,18,20,22,23,26,27,28,29,30,33,35,36,39,41,43,44,45,47,48,49,56,61,62,63,66,67,68,69,71,82,86,88,89,90,91,92,93,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,111,112,113,114,115,116,117,119,120,121,123,124,125,126,127,128,129,130,131,132,133,134,139,141,142,144,145,146,147,148,149,150,151,152,153,154,155,158,159,161,162,163,164,165,166,167,168,170,171,172,173,175,177,194,195,197,198,199,200,201,202,206,207,208,209,210,211,214,215,216,218,245,251,253,254,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,326,327,328,331,335,336,337,338,339,340,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,374,375,376,377,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,421,422,423,424,425,426,427,428,429,430,431,432,433,434,450,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,],[43,-248,-236,134,-246,-256,-237,-244,43,-6,-241,-229,-247,-227,153,-255,-228,-235,-245,-253,-250,-242,-252,-13,-38,-234,-299,-226,-257,-230,-249,-239,-254,-231,-258,-260,-37,-233,-259,-243,-238,-232,-240,-251,-131,-132,-183,-177,-128,-182,-130,-185,-296,-127,-297,-184,-179,-187,-181,-298,-129,-186,-126,-178,-180,-46,-47,-45,-171,-173,-189,-175,-193,-192,-77,-176,-188,-190,-75,-174,-191,-172,-12,-302,-7,252,-150,-149,-151,-148,-67,-68,-69,-70,254,-10,-139,-138,-210,-214,-199,-209,-208,-200,-206,-207,-86,-203,-202,-201,-212,-216,-219,-198,-215,-211,-141,-140,-39,-40,-213,-217,-76,-74,-42,-43,-65,-66,-44,-300,-71,-218,-295,333,334,-11,-301,433,434,-265,-287,-261,-283,-270,-292,-267,-289,-268,-290,-262,-284,-269,-291,-266,-288,-263,-285,-264,-286,-271,-293,-272,-281,-278,-279,-273,-280,-277,-276,-274,-275,-282,-294,-54,-48,-49,-224,-225,-95,-92,-94,-93,-118,-117,-90,-89,-91,-123,-88,-87,-195,-194,-196,-197,-107,-106,-105,-104,-119,-120,-98,-124,-97,-99,-96,-114,-116,-115,-113,-112,-147,-83,-18,-17,-80,-146,-82,-145,-23,-26,-53,-24,-28,-22,-19,-27,-85,-51,-50,-25,-84,-29,-32,-31,-81,-21,-15,-78,-79,-20,-52,-30,-14,-16,-144,-143,-142,-152,-158,-156,-154,-153,-159,-157,-155,-205,-204,-41,-64,-111,-110,-109,-108,-121,-122,-102,-101,-103,-125,-100,-8,-9,-63,-57,-61,-58,-62,-56,-60,-55,-59,-220,-221,-222,-223,-35,-36,-33,-34,-72,-73,]),'ENDP':([0,16,18,27,43,134,141,153,254,433,434,],[44,44,-6,44,-13,-12,-7,-10,-11,-8,-9,]),'CPIR':([0,16,18,27,43,134,141,153,254,433,434,],[45,45,-6,45,-13,-12,-7,-10,-11,-8,-9,]),'AF':([31,58,64,279,],[155,198,203,419,]),'LP':([2,3,4,5,7,14,17,21,24,25,34,37,38,40,50,51,52,53,54,55,57,60,64,65,70,72,73,74,75,77,79,83,84,85,87,95,110,118,138,142,160,182,217,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,246,247,248,256,258,259,261,263,266,267,269,271,272,273,275,276,277,283,322,323,324,325,329,341,378,],[-169,95,118,122,-134,138,143,118,-162,-163,160,-136,118,118,182,-161,-135,-165,118,-137,118,118,204,122,-167,-133,118,118,-160,118,-166,-168,-170,118,-164,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,329,330,341,118,118,341,118,118,378,118,118,118,95,143,143,118,341,118,118,118,118,118,118,118,]),'ADD':([0,16,18,27,43,134,141,153,254,433,434,],[46,46,-6,46,-13,-12,-7,-10,-11,-8,-9,]),'R':([50,267,],[185,380,]),'IXH':([3,5,7,37,50,52,55,65,72,256,261,267,271,273,283,],[104,104,-134,-136,104,-135,-137,104,-133,104,104,104,104,104,104,]),'END':([16,18,43,134,141,153,254,433,434,],[142,-6,-13,-12,-7,-10,-11,-8,-9,]),'ADDR':([3,4,7,21,24,34,37,38,40,51,52,54,55,57,60,72,73,74,75,77,85,95,110,118,138,142,160,182,217,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,246,256,258,259,261,263,266,267,269,271,272,273,277,283,322,323,324,325,329,341,378,],[108,108,-134,108,-162,108,-136,108,108,-161,-135,108,-137,108,108,-133,108,108,-160,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,]),'POW':([92,93,101,103,108,115,116,150,151,158,159,172,173,175,176,192,193,194,195,201,202,210,211,218,241,245,251,253,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,326,327,339,340,348,349,350,351,356,357,368,369,374,375,376,377,387,391,395,398,399,416,417,426,427,435,436,437,438,439,440,441,442,],[225,235,-296,-297,-298,225,235,225,235,225,235,225,235,225,235,225,235,235,225,225,235,225,235,225,225,-295,225,235,225,235,225,235,225,235,225,235,225,235,225,235,225,235,225,235,225,235,225,235,225,235,225,235,225,225,225,225,225,225,225,225,225,225,225,-294,225,235,235,225,235,225,225,235,225,235,235,225,225,235,225,235,225,225,225,225,235,235,225,225,235,225,235,225,235,225,235,225,235,]),'NOP':([0,16,18,27,43,134,141,153,254,433,434,],[48,48,-6,48,-13,-12,-7,-10,-11,-8,-9,]),'RRA':([0,16,18,27,43,134,141,153,254,433,434,],[49,49,-6,49,-13,-12,-7,-10,-11,-8,-9,]),'LD':([0,16,18,27,43,134,141,153,254,433,434,],[50,50,-6,50,-13,-12,-7,-10,-11,-8,-9,]),'RES':([0,16,18,27,43,134,141,153,254,433,434,],[51,51,-6,51,-13,-12,-7,-10,-11,-8,-9,]),'RRC':([0,16,18,27,43,134,141,153,254,433,434,],[53,53,-6,53,-13,-12,-7,-10,-11,-8,-9,]),'IM':([0,16,18,27,43,134,141,153,254,433,434,],[40,40,-6,40,-13,-12,-7,-10,-11,-8,-9,]),'CP':([0,16,18,27,43,134,141,153,254,433,434,],[55,55,-6,55,-13,-12,-7,-10,-11,-8,-9,]),'DEFS':([0,16,18,27,43,134,141,153,254,433,434,],[77,77,-6,77,-13,-12,-7,-10,-11,-8,-9,]),'XOR':([0,16,18,27,43,134,141,153,254,433,434,],[52,52,-6,52,-13,-12,-7,-10,-11,-8,-9,]),'H':([2,3,5,7,11,17,25,37,50,52,53,55,65,70,72,79,83,84,87,256,261,267,269,272,273,275,276,283,445,],[-169,96,96,-134,96,96,-163,-136,96,-135,-165,-137,96,-167,-133,-166,-168,-170,-164,96,96,96,96,96,96,96,96,96,96,]),'JR':([0,16,18,27,43,134,141,153,254,433,434,],[57,57,-6,57,-13,-12,-7,-10,-11,-8,-9,]),'POP':([0,16,18,27,43,134,141,153,254,433,434,],[58,58,-6,58,-13,-12,-7,-10,-11,-8,-9,]),'LOCAL':([0,16,18,27,43,134,141,153,254,433,434,],[59,59,-6,59,-13,-12,-7,-10,-11,-8,-9,]),'DJNZ':([0,16,18,27,43,134,141,153,254,433,434,],[60,60,-6,60,-13,-12,-7,-10,-11,-8,-9,]),'INI':([0,16,18,27,43,134,141,153,254,433,434,],[61,61,-6,61,-13,-12,-7,-10,-11,-8,-9,]),'PLUS':([92,93,101,103,108,115,116,150,151,158,159,172,173,175,176,192,193,194,195,201,202,210,211,218,241,243,244,245,251,253,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,326,327,339,340,348,349,350,351,356,357,368,369,374,375,376,377,387,391,395,398,399,416,417,426,427,435,436,437,438,439,440,441,442,],[228,239,-296,-297,-298,228,239,228,239,228,239,228,239,228,239,228,239,239,228,228,239,228,239,228,228,322,325,-295,228,239,228,239,-265,-287,228,239,228,239,-267,-289,-268,-290,228,239,-269,-291,-266,-288,228,239,-264,-286,228,239,228,228,-278,-279,228,-280,-277,-276,228,-275,228,-294,228,239,239,228,239,228,228,239,228,239,239,228,228,239,228,239,228,228,228,228,239,239,228,228,239,228,239,228,239,228,239,228,239,]),'DI':([0,16,18,27,43,134,141,153,254,433,434,],[86,86,-6,86,-13,-12,-7,-10,-11,-8,-9,]),'RETN':([0,16,18,27,43,134,141,153,254,433,434,],[63,63,-6,63,-13,-12,-7,-10,-11,-8,-9,]),'L':([2,3,5,7,11,17,25,37,50,52,53,55,65,70,72,79,83,84,87,256,261,267,269,272,273,275,276,283,445,],[-169,113,113,-134,113,113,-163,-136,113,-135,-165,-137,113,-167,-133,-166,-168,-170,-164,113,113,113,113,113,113,113,113,113,113,]),'EX':([0,16,18,27,43,134,141,153,254,433,434,],[64,64,-6,64,-13,-12,-7,-10,-11,-8,-9,]),'INC':([0,16,18,27,43,134,141,153,254,433,434,],[65,65,-6,65,-13,-12,-7,-10,-11,-8,-9,]),'LDI':([0,16,18,27,43,134,141,153,254,433,434,],[66,66,-6,66,-13,-12,-7,-10,-11,-8,-9,]),'LDIR':([0,16,18,27,43,134,141,153,254,433,434,],[56,56,-6,56,-13,-12,-7,-10,-11,-8,-9,]),'RRD':([0,16,18,27,43,134,141,153,254,433,434,],[68,68,-6,68,-13,-12,-7,-10,-11,-8,-9,]),'PROC':([0,16,18,27,43,134,141,153,254,433,434,],[69,69,-6,69,-13,-12,-7,-10,-11,-8,-9,]),'DE':([5,31,50,58,64,65,182,255,260,262,274,282,378,],[121,121,121,121,205,121,265,337,354,366,121,424,449,]),'SLA':([0,16,18,27,43,134,141,153,254,433,434,],[70,70,-6,70,-13,-12,-7,-10,-11,-8,-9,]),'MOD':([92,93,101,103,108,115,116,150,151,158,159,172,173,175,176,192,193,194,195,201,202,210,211,218,241,245,251,253,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,326,327,339,340,348,349,350,351,356,357,368,369,374,375,376,377,387,391,395,398,399,416,417,426,427,435,436,437,438,439,440,441,442,],[223,233,-296,-297,-298,223,233,223,233,223,233,223,233,223,233,223,233,233,223,223,233,223,233,223,223,-295,223,233,223,233,223,233,223,233,223,233,-267,-289,-268,-290,223,233,-269,-291,-266,-288,223,233,223,233,223,233,223,223,-278,-279,223,-280,-277,223,223,223,223,-294,223,233,233,223,233,223,223,233,223,233,233,223,223,233,223,233,223,223,223,223,233,233,223,223,233,223,233,223,233,223,233,223,233,]),'LDD':([0,16,18,27,43,134,141,153,254,433,434,],[71,71,-6,71,-13,-12,-7,-10,-11,-8,-9,]),'DEFAULT':([19,],[148,]),'OUTD':([0,16,18,27,43,134,141,153,254,433,434,],[13,13,-6,13,-13,-12,-7,-10,-11,-8,-9,]),'EQU':([81,],[217,]),'OR':([0,16,18,27,43,134,141,153,254,433,434,],[72,72,-6,72,-13,-12,-7,-10,-11,-8,-9,]),'BOR':([92,93,101,103,108,115,116,150,151,158,159,172,173,175,176,192,193,194,195,201,202,210,211,218,241,245,251,253,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,326,327,339,340,348,349,350,351,356,357,368,369,374,375,376,377,387,391,395,398,399,416,417,426,427,435,436,437,438,439,440,441,442,],[224,234,-296,-297,-298,224,234,224,234,224,234,224,234,224,234,224,234,234,224,224,234,224,234,224,224,-295,224,234,224,234,-265,-287,-261,-283,-270,-292,-267,-289,-268,-290,-262,-284,-269,-291,-266,-288,-263,-285,-264,-286,-271,-293,-272,-281,-278,-279,-273,-280,-277,-276,-274,-275,-282,-294,224,234,234,224,234,224,224,234,224,234,234,224,224,234,224,234,224,224,224,224,234,234,224,224,234,224,234,224,234,224,234,224,234,]),'DEFB':([0,16,18,27,43,134,141,153,254,433,434,],[73,73,-6,73,-13,-12,-7,-10,-11,-8,-9,]),'INCBIN':([0,16,18,27,43,134,141,153,254,433,434,],[80,80,-6,80,-13,-12,-7,-10,-11,-8,-9,]),'IN':([0,16,18,27,43,134,141,153,254,433,434,],[11,11,-6,11,-13,-12,-7,-10,-11,-8,-9,]),'ORG':([0,16,18,27,43,134,141,153,254,433,434,],[74,74,-6,74,-13,-12,-7,-10,-11,-8,-9,]),'BC':([5,31,50,58,65,182,255,260,262,274,282,378,],[128,128,128,128,128,264,338,355,367,128,425,448,]),'NC':([34,38,41,57,],[162,162,162,162,]),'BIT':([0,16,18,27,43,134,141,153,254,433,434,],[75,75,-6,75,-13,-12,-7,-10,-11,-8,-9,]),'CPL':([0,16,18,27,43,134,141,153,254,433,434,],[90,90,-6,90,-13,-12,-7,-10,-11,-8,-9,]),'_LINE':([0,16,18,27,43,134,141,153,254,433,434,],[78,78,-6,78,-13,-12,-7,-10,-11,-8,-9,]),'M':([34,38,41,],[164,164,164,]),'RLC':([0,16,18,27,43,134,141,153,254,433,434,],[79,79,-6,79,-13,-12,-7,-10,-11,-8,-9,]),'OUT':([0,16,18,27,43,134,141,153,254,433,434,],[14,14,-6,14,-13,-12,-7,-10,-11,-8,-9,]),'ID':([0,3,4,7,15,16,18,19,21,24,34,37,38,40,43,51,52,54,55,57,59,60,72,73,74,75,77,85,95,110,118,134,138,141,142,153,160,182,217,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,246,254,256,258,259,261,263,266,267,269,271,272,273,277,278,283,322,323,324,325,329,341,378,433,434,],[81,103,103,-134,139,81,-6,149,103,-162,103,-136,103,103,-13,-161,-135,103,-137,103,200,103,-133,103,103,-160,103,103,103,103,103,-12,103,-7,103,-10,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,-11,103,103,103,103,103,103,103,103,103,103,103,103,418,103,103,103,103,103,103,103,103,-8,-9,]),'RP':([101,103,108,124,125,241,242,245,250,257,264,265,280,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,435,436,437,438,439,440,441,442,443,444,448,449,],[-296,-297,-298,-193,-192,320,321,-295,332,347,372,373,420,-265,-287,-261,-283,-270,-292,-267,-289,-268,-290,-262,-284,-269,-291,-266,-288,-263,-285,-264,-286,-271,-293,-272,-281,-278,-279,-273,-280,-277,-276,-274,-275,-282,-294,452,453,454,455,456,457,458,459,460,461,466,467,]),'RLD':([0,16,18,27,43,134,141,153,254,433,434,],[82,82,-6,82,-13,-12,-7,-10,-11,-8,-9,]),'IYL':([3,5,7,37,50,52,55,65,72,256,261,267,271,273,283,],[106,106,-134,-136,106,-135,-137,106,-133,106,106,106,106,106,106,]),'SLL':([0,16,18,27,43,134,141,153,254,433,434,],[83,83,-6,83,-13,-12,-7,-10,-11,-8,-9,]),'D':([2,3,5,7,11,17,25,37,50,52,53,55,65,70,72,79,83,84,87,256,261,267,269,271,272,273,275,276,283,445,],[-169,98,98,-134,98,98,-163,-136,98,-135,-165,-137,98,-167,-133,-166,-168,-170,-164,98,98,98,98,98,98,98,98,98,98,98,]),'SRL':([0,16,18,27,43,134,141,153,254,433,434,],[84,84,-6,84,-13,-12,-7,-10,-11,-8,-9,]),'RST':([0,16,18,27,43,134,141,153,254,433,434,],[85,85,-6,85,-13,-12,-7,-10,-11,-8,-9,]),'IYH':([3,5,7,37,50,52,55,65,72,256,261,267,271,273,283,],[111,111,-134,-136,111,-135,-137,111,-133,111,111,111,111,111,111,]),'RL':([0,16,18,27,43,134,141,153,254,433,434,],[87,87,-6,87,-13,-12,-7,-10,-11,-8,-9,]),'DAA':([0,16,18,27,43,134,141,153,254,433,434,],[88,88,-6,88,-13,-12,-7,-10,-11,-8,-9,]),'LDDR':([0,16,18,27,43,134,141,153,254,433,434,],[89,89,-6,89,-13,-12,-7,-10,-11,-8,-9,]),'NAMESPACE':([0,16,18,27,43,134,141,153,254,433,434,],[19,19,-6,19,-13,-12,-7,-10,-11,-8,-9,]),'INIR':([0,16,18,27,43,134,141,153,254,433,434,],[91,91,-6,91,-13,-12,-7,-10,-11,-8,-9,]),'STRING':([73,80,215,],[209,216,284,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[42,]),'expr':([3,4,21,34,38,40,54,57,60,73,74,77,85,95,110,118,138,142,160,182,217,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,246,256,258,259,261,263,266,267,269,271,272,273,277,283,322,323,324,325,329,341,378,],[92,115,150,158,172,175,192,195,201,115,210,115,218,241,245,241,241,251,241,241,285,287,289,291,293,295,297,299,301,303,305,307,309,310,311,312,313,314,315,316,317,318,319,326,340,349,350,356,369,374,376,387,391,395,398,417,426,435,437,439,441,241,241,241,]),'jp_flags':([34,38,41,],[169,174,177,]),'reg16':([5,31,50,58,65,274,],[120,154,183,197,120,406,]),'bitwiseop':([0,16,27,],[3,3,3,]),'asm':([0,16,27,],[8,8,152,]),'reg8_I':([3,5,17,50,65,256,261,267,273,275,276,283,],[99,126,146,186,206,345,359,381,401,409,413,431,]),'reg8i':([3,5,50,65,256,261,267,271,273,283,],[102,127,188,127,343,360,383,393,402,429,]),'endline':([16,],[140,]),'bitop':([0,16,27,],[54,54,54,]),'reg16i':([5,31,46,50,58,65,160,262,263,274,451,],[132,132,180,132,132,132,257,364,370,132,468,]),'number_list':([4,73,77,],[117,208,214,]),'regBCDE':([3,5,11,17,50,65,256,261,267,269,271,272,273,275,276,283,445,],[105,105,105,105,105,105,105,105,105,105,394,105,105,105,105,105,105,]),'jr_flags':([34,38,41,57,],[168,168,168,196,]),'inc_reg':([5,65,],[130,207,]),'preproc_line':([0,16,27,],[47,47,47,]),'reg8_hl':([3,5,17,34,50,65,256,261,267,273,275,276,283,],[109,131,145,167,189,131,344,361,384,403,410,414,430,]),'id_list':([59,],[199,]),'program':([0,],[16,]),'reg8':([3,5,11,17,50,65,256,261,267,269,272,273,275,276,283,445,],[112,133,136,147,190,133,346,362,385,389,397,404,411,415,432,463,]),'rotation':([0,16,27,],[17,17,17,]),'pexpr':([3,4,14,21,34,38,40,50,54,57,60,73,74,77,85,95,110,118,138,142,160,182,217,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,246,247,256,258,259,261,263,266,267,269,271,272,273,277,283,322,323,324,325,329,341,378,],[93,116,137,151,159,173,176,191,193,194,202,116,211,116,176,176,176,176,176,253,176,176,286,288,290,292,294,296,298,300,302,304,306,308,176,176,176,176,176,176,176,176,176,176,176,327,328,339,348,351,357,368,375,377,176,176,176,399,416,427,436,438,440,442,176,176,176,]),'line':([0,16,],[18,141,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> program','start',1,'p_start','asmparse.py',539),
  ('start -> program endline','start',2,'p_start','asmparse.py',540),
  ('endline -> END NEWLINE','endline',2,'p_program_endline','asmparse.py',545),
  ('endline -> END expr NEWLINE','endline',3,'p_program_endline2','asmparse.py',550),
  ('endline -> END pexpr NEWLINE','endline',3,'p_program_endline2','asmparse.py',551),
  ('program -> line','program',1,'p_program','asmparse.py',558),
  ('program -> program line','program',2,'p_program_line','asmparse.py',566),
  ('line -> ID EQU expr NEWLINE','line',4,'p_def_label','asmparse.py',574),
  ('line -> ID EQU pexpr NEWLINE','line',4,'p_def_label','asmparse.py',575),
  ('line -> LABEL NEWLINE','line',2,'p_line_label','asmparse.py',584),
  ('line -> LABEL asm NEWLINE','line',3,'p_line_label_asm','asmparse.py',593),
  ('line -> asm NEWLINE','line',2,'p_line_asm','asmparse.py',602),
  ('line -> NEWLINE','line',1,'p_line_newline','asmparse.py',608),
  ('asm -> LD reg8 COMMA reg8_hl','asm',4,'p_asm_ld8','asmparse.py',614),
  ('asm -> LD reg8_hl COMMA reg8','asm',4,'p_asm_ld8','asmparse.py',615),
  ('asm -> LD reg8 COMMA reg8','asm',4,'p_asm_ld8','asmparse.py',616),
  ('asm -> LD SP COMMA HL','asm',4,'p_asm_ld8','asmparse.py',617),
  ('asm -> LD SP COMMA reg16i','asm',4,'p_asm_ld8','asmparse.py',618),
  ('asm -> LD A COMMA reg8','asm',4,'p_asm_ld8','asmparse.py',619),
  ('asm -> LD reg8 COMMA A','asm',4,'p_asm_ld8','asmparse.py',620),
  ('asm -> LD reg8_hl COMMA A','asm',4,'p_asm_ld8','asmparse.py',621),
  ('asm -> LD A COMMA reg8_hl','asm',4,'p_asm_ld8','asmparse.py',622),
  ('asm -> LD A COMMA A','asm',4,'p_asm_ld8','asmparse.py',623),
  ('asm -> LD A COMMA I','asm',4,'p_asm_ld8','asmparse.py',624),
  ('asm -> LD I COMMA A','asm',4,'p_asm_ld8','asmparse.py',625),
  ('asm -> LD A COMMA R','asm',4,'p_asm_ld8','asmparse.py',626),
  ('asm -> LD R COMMA A','asm',4,'p_asm_ld8','asmparse.py',627),
  ('asm -> LD A COMMA reg8i','asm',4,'p_asm_ld8','asmparse.py',628),
  ('asm -> LD reg8i COMMA A','asm',4,'p_asm_ld8','asmparse.py',629),
  ('asm -> LD reg8 COMMA reg8i','asm',4,'p_asm_ld8','asmparse.py',630),
  ('asm -> LD reg8i COMMA regBCDE','asm',4,'p_asm_ld8','asmparse.py',631),
  ('asm -> LD reg8i COMMA reg8i','asm',4,'p_asm_ld8','asmparse.py',632),
  ('asm -> LD A COMMA LP BC RP','asm',6,'p_LDa','asmparse.py',642),
  ('asm -> LD A COMMA LP DE RP','asm',6,'p_LDa','asmparse.py',643),
  ('asm -> LD LP BC RP COMMA A','asm',6,'p_LDa','asmparse.py',644),
  ('asm -> LD LP DE RP COMMA A','asm',6,'p_LDa','asmparse.py',645),
  ('asm -> PROC','asm',1,'p_PROC','asmparse.py',651),
  ('asm -> ENDP','asm',1,'p_ENDP','asmparse.py',658),
  ('asm -> LOCAL id_list','asm',2,'p_LOCAL','asmparse.py',665),
  ('id_list -> ID','id_list',1,'p_idlist','asmparse.py',675),
  ('id_list -> id_list COMMA ID','id_list',3,'p_idlist_id','asmparse.py',681),
  ('asm -> DEFB number_list','asm',2,'p_DEFB','asmparse.py',687),
  ('asm -> DEFB STRING','asm',2,'p_DEFB','asmparse.py',688),
  ('asm -> DEFS number_list','asm',2,'p_DEFS','asmparse.py',694),
  ('asm -> DEFW number_list','asm',2,'p_DEFW','asmparse.py',707),
  ('number_list -> expr','number_list',1,'p_number_list','asmparse.py',713),
  ('number_list -> pexpr','number_list',1,'p_number_list','asmparse.py',714),
  ('number_list -> number_list COMMA expr','number_list',3,'p_number_list_number','asmparse.py',720),
  ('number_list -> number_list COMMA pexpr','number_list',3,'p_number_list_number','asmparse.py',721),
  ('asm -> LD reg8_I COMMA reg8','asm',4,'p_asm_ldind_r8','asmparse.py',727),
  ('asm -> LD reg8_I COMMA A','asm',4,'p_asm_ldind_r8','asmparse.py',728),
  ('asm -> LD reg8 COMMA reg8_I','asm',4,'p_asm_ldr8_ind','asmparse.py',734),
  ('asm -> LD A COMMA reg8_I','asm',4,'p_asm_ldr8_ind','asmparse.py',735),
  ('reg8_hl -> LP HL RP','reg8_hl',3,'p_reg8_hl','asmparse.py',741),
  ('reg8_I -> LP IX PLUS expr RP','reg8_I',5,'p_ind8_I','asmparse.py',747),
  ('reg8_I -> LP IX MINUS expr RP','reg8_I',5,'p_ind8_I','asmparse.py',748),
  ('reg8_I -> LP IY PLUS expr RP','reg8_I',5,'p_ind8_I','asmparse.py',749),
  ('reg8_I -> LP IY MINUS expr RP','reg8_I',5,'p_ind8_I','asmparse.py',750),
  ('reg8_I -> LP IX PLUS pexpr RP','reg8_I',5,'p_ind8_I','asmparse.py',751),
  ('reg8_I -> LP IX MINUS pexpr RP','reg8_I',5,'p_ind8_I','asmparse.py',752),
  ('reg8_I -> LP IY PLUS pexpr RP','reg8_I',5,'p_ind8_I','asmparse.py',753),
  ('reg8_I -> LP IY MINUS pexpr RP','reg8_I',5,'p_ind8_I','asmparse.py',754),
  ('asm -> EX AF COMMA AF APO','asm',5,'p_ex_af_af','asmparse.py',764),
  ('asm -> EX DE COMMA HL','asm',4,'p_ex_de_hl','asmparse.py',770),
  ('asm -> ORG expr','asm',2,'p_org','asmparse.py',776),
  ('asm -> ORG pexpr','asm',2,'p_org','asmparse.py',777),
  ('asm -> NAMESPACE DEFAULT','asm',2,'p_namespace','asmparse.py',783),
  ('asm -> NAMESPACE ID','asm',2,'p_namespace','asmparse.py',784),
  ('asm -> ALIGN expr','asm',2,'p_align','asmparse.py',797),
  ('asm -> ALIGN pexpr','asm',2,'p_align','asmparse.py',798),
  ('asm -> INCBIN STRING','asm',2,'p_incbin','asmparse.py',808),
  ('asm -> EX LP SP RP COMMA reg16i','asm',6,'p_ex_sp_reg8','asmparse.py',819),
  ('asm -> EX LP SP RP COMMA HL','asm',6,'p_ex_sp_reg8','asmparse.py',820),
  ('asm -> INC inc_reg','asm',2,'p_incdec','asmparse.py',826),
  ('asm -> DEC inc_reg','asm',2,'p_incdec','asmparse.py',827),
  ('asm -> INC reg8_I','asm',2,'p_incdeci','asmparse.py',833),
  ('asm -> DEC reg8_I','asm',2,'p_incdeci','asmparse.py',834),
  ('asm -> LD reg8 COMMA expr','asm',4,'p_LD_reg_val','asmparse.py',840),
  ('asm -> LD reg8 COMMA pexpr','asm',4,'p_LD_reg_val','asmparse.py',841),
  ('asm -> LD reg16 COMMA expr','asm',4,'p_LD_reg_val','asmparse.py',842),
  ('asm -> LD reg8_hl COMMA expr','asm',4,'p_LD_reg_val','asmparse.py',843),
  ('asm -> LD A COMMA expr','asm',4,'p_LD_reg_val','asmparse.py',844),
  ('asm -> LD SP COMMA expr','asm',4,'p_LD_reg_val','asmparse.py',845),
  ('asm -> LD reg8i COMMA expr','asm',4,'p_LD_reg_val','asmparse.py',846),
  ('asm -> LD reg8_I COMMA expr','asm',4,'p_LD_regI_val','asmparse.py',856),
  ('asm -> JP reg8_hl','asm',2,'p_JP_hl','asmparse.py',862),
  ('asm -> JP LP reg16i RP','asm',4,'p_JP_hl','asmparse.py',863),
  ('asm -> SBC A COMMA reg8','asm',4,'p_SBCADD','asmparse.py',875),
  ('asm -> SBC A COMMA reg8i','asm',4,'p_SBCADD','asmparse.py',876),
  ('asm -> SBC A COMMA A','asm',4,'p_SBCADD','asmparse.py',877),
  ('asm -> SBC A COMMA reg8_hl','asm',4,'p_SBCADD','asmparse.py',878),
  ('asm -> SBC HL COMMA SP','asm',4,'p_SBCADD','asmparse.py',879),
  ('asm -> SBC HL COMMA BC','asm',4,'p_SBCADD','asmparse.py',880),
  ('asm -> SBC HL COMMA DE','asm',4,'p_SBCADD','asmparse.py',881),
  ('asm -> SBC HL COMMA HL','asm',4,'p_SBCADD','asmparse.py',882),
  ('asm -> ADD A COMMA reg8','asm',4,'p_SBCADD','asmparse.py',883),
  ('asm -> ADD A COMMA reg8i','asm',4,'p_SBCADD','asmparse.py',884),
  ('asm -> ADD A COMMA A','asm',4,'p_SBCADD','asmparse.py',885),
  ('asm -> ADD A COMMA reg8_hl','asm',4,'p_SBCADD','asmparse.py',886),
  ('asm -> ADC A COMMA reg8','asm',4,'p_SBCADD','asmparse.py',887),
  ('asm -> ADC A COMMA reg8i','asm',4,'p_SBCADD','asmparse.py',888),
  ('asm -> ADC A COMMA A','asm',4,'p_SBCADD','asmparse.py',889),
  ('asm -> ADC A COMMA reg8_hl','asm',4,'p_SBCADD','asmparse.py',890),
  ('asm -> ADD HL COMMA BC','asm',4,'p_SBCADD','asmparse.py',891),
  ('asm -> ADD HL COMMA DE','asm',4,'p_SBCADD','asmparse.py',892),
  ('asm -> ADD HL COMMA HL','asm',4,'p_SBCADD','asmparse.py',893),
  ('asm -> ADD HL COMMA SP','asm',4,'p_SBCADD','asmparse.py',894),
  ('asm -> ADC HL COMMA BC','asm',4,'p_SBCADD','asmparse.py',895),
  ('asm -> ADC HL COMMA DE','asm',4,'p_SBCADD','asmparse.py',896),
  ('asm -> ADC HL COMMA HL','asm',4,'p_SBCADD','asmparse.py',897),
  ('asm -> ADC HL COMMA SP','asm',4,'p_SBCADD','asmparse.py',898),
  ('asm -> ADD reg16i COMMA BC','asm',4,'p_SBCADD','asmparse.py',899),
  ('asm -> ADD reg16i COMMA DE','asm',4,'p_SBCADD','asmparse.py',900),
  ('asm -> ADD reg16i COMMA HL','asm',4,'p_SBCADD','asmparse.py',901),
  ('asm -> ADD reg16i COMMA SP','asm',4,'p_SBCADD','asmparse.py',902),
  ('asm -> ADD reg16i COMMA reg16i','asm',4,'p_SBCADD','asmparse.py',903),
  ('asm -> SBC A COMMA expr','asm',4,'p_arith_A_expr','asmparse.py',909),
  ('asm -> SBC A COMMA pexpr','asm',4,'p_arith_A_expr','asmparse.py',910),
  ('asm -> ADD A COMMA expr','asm',4,'p_arith_A_expr','asmparse.py',911),
  ('asm -> ADD A COMMA pexpr','asm',4,'p_arith_A_expr','asmparse.py',912),
  ('asm -> ADC A COMMA expr','asm',4,'p_arith_A_expr','asmparse.py',913),
  ('asm -> ADC A COMMA pexpr','asm',4,'p_arith_A_expr','asmparse.py',914),
  ('asm -> SBC A COMMA reg8_I','asm',4,'p_arith_A_regI','asmparse.py',920),
  ('asm -> ADD A COMMA reg8_I','asm',4,'p_arith_A_regI','asmparse.py',921),
  ('asm -> ADC A COMMA reg8_I','asm',4,'p_arith_A_regI','asmparse.py',922),
  ('asm -> bitwiseop reg8','asm',2,'p_bitwiseop_reg','asmparse.py',928),
  ('asm -> bitwiseop reg8i','asm',2,'p_bitwiseop_reg','asmparse.py',929),
  ('asm -> bitwiseop A','asm',2,'p_bitwiseop_reg','asmparse.py',930),
  ('asm -> bitwiseop reg8_hl','asm',2,'p_bitwiseop_reg','asmparse.py',931),
  ('asm -> bitwiseop reg8_I','asm',2,'p_bitwiseop_regI','asmparse.py',937),
  ('asm -> bitwiseop expr','asm',2,'p_bitwise_expr','asmparse.py',943),
  ('asm -> bitwiseop pexpr','asm',2,'p_bitwise_expr','asmparse.py',944),
  ('bitwiseop -> OR','bitwiseop',1,'p_bitwise','asmparse.py',950),
  ('bitwiseop -> AND','bitwiseop',1,'p_bitwise','asmparse.py',951),
  ('bitwiseop -> XOR','bitwiseop',1,'p_bitwise','asmparse.py',952),
  ('bitwiseop -> SUB','bitwiseop',1,'p_bitwise','asmparse.py',953),
  ('bitwiseop -> CP','bitwiseop',1,'p_bitwise','asmparse.py',954),
  ('asm -> PUSH AF','asm',2,'p_PUSH_POP','asmparse.py',960),
  ('asm -> PUSH reg16','asm',2,'p_PUSH_POP','asmparse.py',961),
  ('asm -> POP AF','asm',2,'p_PUSH_POP','asmparse.py',962),
  ('asm -> POP reg16','asm',2,'p_PUSH_POP','asmparse.py',963),
  ('asm -> LD pexpr COMMA A','asm',4,'p_LD_addr_reg','asmparse.py',969),
  ('asm -> LD pexpr COMMA reg16','asm',4,'p_LD_addr_reg','asmparse.py',970),
  ('asm -> LD pexpr COMMA SP','asm',4,'p_LD_addr_reg','asmparse.py',971),
  ('asm -> LD A COMMA pexpr','asm',4,'p_LD_reg_addr','asmparse.py',977),
  ('asm -> LD reg16 COMMA pexpr','asm',4,'p_LD_reg_addr','asmparse.py',978),
  ('asm -> LD SP COMMA pexpr','asm',4,'p_LD_reg_addr','asmparse.py',979),
  ('asm -> rotation reg8','asm',2,'p_ROTATE','asmparse.py',985),
  ('asm -> rotation reg8_hl','asm',2,'p_ROTATE','asmparse.py',986),
  ('asm -> rotation A','asm',2,'p_ROTATE','asmparse.py',987),
  ('asm -> rotation reg8_I','asm',2,'p_ROTATE_ix','asmparse.py',993),
  ('asm -> bitop expr COMMA A','asm',4,'p_BIT','asmparse.py',999),
  ('asm -> bitop pexpr COMMA A','asm',4,'p_BIT','asmparse.py',1000),
  ('asm -> bitop expr COMMA reg8','asm',4,'p_BIT','asmparse.py',1001),
  ('asm -> bitop pexpr COMMA reg8','asm',4,'p_BIT','asmparse.py',1002),
  ('asm -> bitop expr COMMA reg8_hl','asm',4,'p_BIT','asmparse.py',1003),
  ('asm -> bitop pexpr COMMA reg8_hl','asm',4,'p_BIT','asmparse.py',1004),
  ('asm -> bitop expr COMMA reg8_I','asm',4,'p_BIT_ix','asmparse.py',1014),
  ('asm -> bitop pexpr COMMA reg8_I','asm',4,'p_BIT_ix','asmparse.py',1015),
  ('bitop -> BIT','bitop',1,'p_bitop','asmparse.py',1025),
  ('bitop -> RES','bitop',1,'p_bitop','asmparse.py',1026),
  ('bitop -> SET','bitop',1,'p_bitop','asmparse.py',1027),
  ('rotation -> RR','rotation',1,'p_rotation','asmparse.py',1033),
  ('rotation -> RL','rotation',1,'p_rotation','asmparse.py',1034),
  ('rotation -> RRC','rotation',1,'p_rotation','asmparse.py',1035),
  ('rotation -> RLC','rotation',1,'p_rotation','asmparse.py',1036),
  ('rotation -> SLA','rotation',1,'p_rotation','asmparse.py',1037),
  ('rotation -> SLL','rotation',1,'p_rotation','asmparse.py',1038),
  ('rotation -> SRA','rotation',1,'p_rotation','asmparse.py',1039),
  ('rotation -> SRL','rotation',1,'p_rotation','asmparse.py',1040),
  ('inc_reg -> SP','inc_reg',1,'p_reg_inc','asmparse.py',1046),
  ('inc_reg -> reg8','inc_reg',1,'p_reg_inc','asmparse.py',1047),
  ('inc_reg -> reg16','inc_reg',1,'p_reg_inc','asmparse.py',1048),
  ('inc_reg -> reg8_hl','inc_reg',1,'p_reg_inc','asmparse.py',1049),
  ('inc_reg -> A','inc_reg',1,'p_reg_inc','asmparse.py',1050),
  ('inc_reg -> reg8i','inc_reg',1,'p_reg_inc','asmparse.py',1051),
  ('reg8 -> H','reg8',1,'p_reg8','asmparse.py',1057),
  ('reg8 -> L','reg8',1,'p_reg8','asmparse.py',1058),
  ('reg8 -> regBCDE','reg8',1,'p_reg8','asmparse.py',1059),
  ('regBCDE -> B','regBCDE',1,'p_regBCDE','asmparse.py',1065),
  ('regBCDE -> C','regBCDE',1,'p_regBCDE','asmparse.py',1066),
  ('regBCDE -> D','regBCDE',1,'p_regBCDE','asmparse.py',1067),
  ('regBCDE -> E','regBCDE',1,'p_regBCDE','asmparse.py',1068),
  ('reg8i -> IXH','reg8i',1,'p_reg8i','asmparse.py',1074),
  ('reg8i -> IXL','reg8i',1,'p_reg8i','asmparse.py',1075),
  ('reg8i -> IYH','reg8i',1,'p_reg8i','asmparse.py',1076),
  ('reg8i -> IYL','reg8i',1,'p_reg8i','asmparse.py',1077),
  ('reg16 -> BC','reg16',1,'p_reg16','asmparse.py',1083),
  ('reg16 -> DE','reg16',1,'p_reg16','asmparse.py',1084),
  ('reg16 -> HL','reg16',1,'p_reg16','asmparse.py',1085),
  ('reg16 -> reg16i','reg16',1,'p_reg16','asmparse.py',1086),
  ('reg16i -> IX','reg16i',1,'p_reg16i','asmparse.py',1092),
  ('reg16i -> IY','reg16i',1,'p_reg16i','asmparse.py',1093),
  ('asm -> JP jp_flags COMMA expr','asm',4,'p_jp','asmparse.py',1099),
  ('asm -> JP jp_flags COMMA pexpr','asm',4,'p_jp','asmparse.py',1100),
  ('asm -> CALL jp_flags COMMA expr','asm',4,'p_jp','asmparse.py',1101),
  ('asm -> CALL jp_flags COMMA pexpr','asm',4,'p_jp','asmparse.py',1102),
  ('asm -> RET jp_flags','asm',2,'p_ret','asmparse.py',1108),
  ('jp_flags -> P','jp_flags',1,'p_jpflags_other','asmparse.py',1114),
  ('jp_flags -> M','jp_flags',1,'p_jpflags_other','asmparse.py',1115),
  ('jp_flags -> PO','jp_flags',1,'p_jpflags_other','asmparse.py',1116),
  ('jp_flags -> PE','jp_flags',1,'p_jpflags_other','asmparse.py',1117),
  ('jp_flags -> jr_flags','jp_flags',1,'p_jpflags_other','asmparse.py',1118),
  ('asm -> JR jr_flags COMMA expr','asm',4,'p_jr','asmparse.py',1124),
  ('asm -> JR jr_flags COMMA pexpr','asm',4,'p_jr','asmparse.py',1125),
  ('jr_flags -> Z','jr_flags',1,'p_jr_flags','asmparse.py',1132),
  ('jr_flags -> C','jr_flags',1,'p_jr_flags','asmparse.py',1133),
  ('jr_flags -> NZ','jr_flags',1,'p_jr_flags','asmparse.py',1134),
  ('jr_flags -> NC','jr_flags',1,'p_jr_flags','asmparse.py',1135),
  ('asm -> JP expr','asm',2,'p_jrjp','asmparse.py',1141),
  ('asm -> JR expr','asm',2,'p_jrjp','asmparse.py',1142),
  ('asm -> CALL expr','asm',2,'p_jrjp','asmparse.py',1143),
  ('asm -> DJNZ expr','asm',2,'p_jrjp','asmparse.py',1144),
  ('asm -> JP pexpr','asm',2,'p_jrjp','asmparse.py',1145),
  ('asm -> JR pexpr','asm',2,'p_jrjp','asmparse.py',1146),
  ('asm -> CALL pexpr','asm',2,'p_jrjp','asmparse.py',1147),
  ('asm -> DJNZ pexpr','asm',2,'p_jrjp','asmparse.py',1148),
  ('asm -> RST expr','asm',2,'p_rst','asmparse.py',1160),
  ('asm -> IM expr','asm',2,'p_im','asmparse.py',1171),
  ('asm -> IN A COMMA LP C RP','asm',6,'p_in','asmparse.py',1181),
  ('asm -> IN reg8 COMMA LP C RP','asm',6,'p_in','asmparse.py',1182),
  ('asm -> OUT LP C RP COMMA A','asm',6,'p_out','asmparse.py',1188),
  ('asm -> OUT LP C RP COMMA reg8','asm',6,'p_out','asmparse.py',1189),
  ('asm -> IN A COMMA pexpr','asm',4,'p_in_expr','asmparse.py',1195),
  ('asm -> OUT pexpr COMMA A','asm',4,'p_out_expr','asmparse.py',1201),
  ('asm -> NOP','asm',1,'p_single','asmparse.py',1207),
  ('asm -> EXX','asm',1,'p_single','asmparse.py',1208),
  ('asm -> CCF','asm',1,'p_single','asmparse.py',1209),
  ('asm -> SCF','asm',1,'p_single','asmparse.py',1210),
  ('asm -> LDIR','asm',1,'p_single','asmparse.py',1211),
  ('asm -> LDI','asm',1,'p_single','asmparse.py',1212),
  ('asm -> LDDR','asm',1,'p_single','asmparse.py',1213),
  ('asm -> LDD','asm',1,'p_single','asmparse.py',1214),
  ('asm -> CPIR','asm',1,'p_single','asmparse.py',1215),
  ('asm -> CPI','asm',1,'p_single','asmparse.py',1216),
  ('asm -> CPDR','asm',1,'p_single','asmparse.py',1217),
  ('asm -> CPD','asm',1,'p_single','asmparse.py',1218),
  ('asm -> DAA','asm',1,'p_single','asmparse.py',1219),
  ('asm -> NEG','asm',1,'p_single','asmparse.py',1220),
  ('asm -> CPL','asm',1,'p_single','asmparse.py',1221),
  ('asm -> HALT','asm',1,'p_single','asmparse.py',1222),
  ('asm -> EI','asm',1,'p_single','asmparse.py',1223),
  ('asm -> DI','asm',1,'p_single','asmparse.py',1224),
  ('asm -> OUTD','asm',1,'p_single','asmparse.py',1225),
  ('asm -> OUTI','asm',1,'p_single','asmparse.py',1226),
  ('asm -> OTDR','asm',1,'p_single','asmparse.py',1227),
  ('asm -> OTIR','asm',1,'p_single','asmparse.py',1228),
  ('asm -> IND','asm',1,'p_single','asmparse.py',1229),
  ('asm -> INI','asm',1,'p_single','asmparse.py',1230),
  ('asm -> INDR','asm',1,'p_single','asmparse.py',1231),
  ('asm -> INIR','asm',1,'p_single','asmparse.py',1232),
  ('asm -> RET','asm',1,'p_single','asmparse.py',1233),
  ('asm -> RETI','asm',1,'p_single','asmparse.py',1234),
  ('asm -> RETN','asm',1,'p_single','asmparse.py',1235),
  ('asm -> RLA','asm',1,'p_single','asmparse.py',1236),
  ('asm -> RLCA','asm',1,'p_single','asmparse.py',1237),
  ('asm -> RRA','asm',1,'p_single','asmparse.py',1238),
  ('asm -> RRCA','asm',1,'p_single','asmparse.py',1239),
  ('asm -> RLD','asm',1,'p_single','asmparse.py',1240),
  ('asm -> RRD','asm',1,'p_single','asmparse.py',1241),
  ('expr -> expr BAND expr','expr',3,'p_expr_div_expr','asmparse.py',1247),
  ('expr -> expr BOR expr','expr',3,'p_expr_div_expr','asmparse.py',1248),
  ('expr -> expr BXOR expr','expr',3,'p_expr_div_expr','asmparse.py',1249),
  ('expr -> expr PLUS expr','expr',3,'p_expr_div_expr','asmparse.py',1250),
  ('expr -> expr MINUS expr','expr',3,'p_expr_div_expr','asmparse.py',1251),
  ('expr -> expr MUL expr','expr',3,'p_expr_div_expr','asmparse.py',1252),
  ('expr -> expr DIV expr','expr',3,'p_expr_div_expr','asmparse.py',1253),
  ('expr -> expr MOD expr','expr',3,'p_expr_div_expr','asmparse.py',1254),
  ('expr -> expr POW expr','expr',3,'p_expr_div_expr','asmparse.py',1255),
  ('expr -> expr LSHIFT expr','expr',3,'p_expr_div_expr','asmparse.py',1256),
  ('expr -> expr RSHIFT expr','expr',3,'p_expr_div_expr','asmparse.py',1257),
  ('expr -> pexpr BAND expr','expr',3,'p_expr_div_expr','asmparse.py',1258),
  ('expr -> pexpr BOR expr','expr',3,'p_expr_div_expr','asmparse.py',1259),
  ('expr -> pexpr BXOR expr','expr',3,'p_expr_div_expr','asmparse.py',1260),
  ('expr -> pexpr PLUS expr','expr',3,'p_expr_div_expr','asmparse.py',1261),
  ('expr -> pexpr MINUS expr','expr',3,'p_expr_div_expr','asmparse.py',1262),
  ('expr -> pexpr MUL expr','expr',3,'p_expr_div_expr','asmparse.py',1263),
  ('expr -> pexpr DIV expr','expr',3,'p_expr_div_expr','asmparse.py',1264),
  ('expr -> pexpr MOD expr','expr',3,'p_expr_div_expr','asmparse.py',1265),
  ('expr -> pexpr POW expr','expr',3,'p_expr_div_expr','asmparse.py',1266),
  ('expr -> pexpr LSHIFT expr','expr',3,'p_expr_div_expr','asmparse.py',1267),
  ('expr -> pexpr RSHIFT expr','expr',3,'p_expr_div_expr','asmparse.py',1268),
  ('expr -> expr BAND pexpr','expr',3,'p_expr_div_expr','asmparse.py',1269),
  ('expr -> expr BOR pexpr','expr',3,'p_expr_div_expr','asmparse.py',1270),
  ('expr -> expr BXOR pexpr','expr',3,'p_expr_div_expr','asmparse.py',1271),
  ('expr -> expr PLUS pexpr','expr',3,'p_expr_div_expr','asmparse.py',1272),
  ('expr -> expr MINUS pexpr','expr',3,'p_expr_div_expr','asmparse.py',1273),
  ('expr -> expr MUL pexpr','expr',3,'p_expr_div_expr','asmparse.py',1274),
  ('expr -> expr DIV pexpr','expr',3,'p_expr_div_expr','asmparse.py',1275),
  ('expr -> expr MOD pexpr','expr',3,'p_expr_div_expr','asmparse.py',1276),
  ('expr -> expr POW pexpr','expr',3,'p_expr_div_expr','asmparse.py',1277),
  ('expr -> expr LSHIFT pexpr','expr',3,'p_expr_div_expr','asmparse.py',1278),
  ('expr -> expr RSHIFT pexpr','expr',3,'p_expr_div_expr','asmparse.py',1279),
  ('pexpr -> LP expr RP','pexpr',3,'p_expr_lprp','asmparse.py',1285),
  ('expr -> MINUS expr','expr',2,'p_expr_uminus','asmparse.py',1291),
  ('expr -> INTEGER','expr',1,'p_expr_int','asmparse.py',1297),
  ('expr -> ID','expr',1,'p_expr_label','asmparse.py',1303),
  ('expr -> ADDR','expr',1,'p_expr_addr','asmparse.py',1309),
  ('asm -> preproc_line','asm',1,'p_preprocessor_line','asmparse.py',1316),
  ('preproc_line -> _LINE INTEGER','preproc_line',2,'p_preprocessor_line_line','asmparse.py',1322),
  ('preproc_line -> _LINE INTEGER STRING','preproc_line',3,'p_preprocessor_line_line_file','asmparse.py',1328),
  ('preproc_line -> _INIT ID','preproc_line',2,'p_preproc_line_init','asmparse.py',1337),
]
