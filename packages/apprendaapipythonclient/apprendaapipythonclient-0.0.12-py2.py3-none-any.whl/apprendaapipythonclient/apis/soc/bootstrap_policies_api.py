# coding: utf-8

"""
    Platform Operations Rest API

    The Platform Operations REST API can be leveraged to customize the Platform Operator experience of managing infrastructure and applications for the Apprenda Platform. This allows some of the functionality of the Platform's System Operations Center (SOC) to be accomplished through a variety of means such as custom-built UX or command-line interfaces.   For more information about the abilities of Platform Operators, see our documentation on the [SOC](/current/SOC).   ##Authentication   Before making a request, you must be authenticated. Learn how to [get authenticated](/restapi/platformops/v1/authentication).   ##Making a Request   ###Prerequisites   * Installed Platform of version 6.5.1 or later (Note that most endpoints are only available in version 6.7.0 and later)    * Authentication token   * If SOC authorization is enabled on your Platform, you must be assigned as an active Platform Operator   ###Request URL   All requests must use **https**.   The URL for every request you make is the Cloud URI of your Platform followed by \"/soc\" and the path structure of the endpoint. For example, if your Cloud URI is apps.apprenda.harp and you want to get the Add-ons for your Platform, the request URI will be **apps.apprenda.harp/soc/api/v1/addons**.   For more information, see our documentation on [using API resources](/restapi/platformops/v1/using-resources) and [finding your Cloud URI](/current/clouduri).   ###Request Headers   Your authenication token must be passed in the header of all requests using the key **ApprendaSessionToken** (not case sensitive).  

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

# python 2 and python 3 compatibility library
from six import iteritems

from apprendaapipythonclient.configuration import Configuration
from apprendaapipythonclient.api_client import ApiClient


class BootstrapPoliciesApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def bootstrap_policies_add(self, bootstrap_policy, **kwargs):
        """
        Create Bootsrap Policy
        **Requires Platform version 6.7.0 or later.**   Adds a new Bootstrap Policy to the Platform. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.bootstrap_policies_add(bootstrap_policy, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ApprendaSOCWebRestAPIResourcesBootstrapPolicy bootstrap_policy: Required. Bootstrap Policy  to add to the system (required)
        :return: ApprendaSOCWebRestAPIResourcesBootstrapPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.bootstrap_policies_add_with_http_info(bootstrap_policy, **kwargs)
        else:
            (data) = self.bootstrap_policies_add_with_http_info(bootstrap_policy, **kwargs)
            return data

    def bootstrap_policies_add_with_http_info(self, bootstrap_policy, **kwargs):
        """
        Create Bootsrap Policy
        **Requires Platform version 6.7.0 or later.**   Adds a new Bootstrap Policy to the Platform. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.bootstrap_policies_add_with_http_info(bootstrap_policy, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ApprendaSOCWebRestAPIResourcesBootstrapPolicy bootstrap_policy: Required. Bootstrap Policy  to add to the system (required)
        :return: ApprendaSOCWebRestAPIResourcesBootstrapPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bootstrap_policy']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bootstrap_policies_add" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bootstrap_policy' is set
        if ('bootstrap_policy' not in params) or (params['bootstrap_policy'] is None):
            raise ValueError("Missing the required parameter `bootstrap_policy` when calling `bootstrap_policies_add`")


        collection_formats = {}

        resource_path = '/api/v1/bootstrappolicies'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'bootstrap_policy' in params:
            body_params = params['bootstrap_policy']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ApprendaSOCWebRestAPIResourcesBootstrapPolicy',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def bootstrap_policies_get_all(self, **kwargs):
        """
        Get all Bootstrap Policies
        **Requires Platform version 6.7.0 or later.**   Returns a list of all Bootstrap Policies on the Platform. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.bootstrap_policies_get_all(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: UnpagedResourceBaseBootstrapPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.bootstrap_policies_get_all_with_http_info(**kwargs)
        else:
            (data) = self.bootstrap_policies_get_all_with_http_info(**kwargs)
            return data

    def bootstrap_policies_get_all_with_http_info(self, **kwargs):
        """
        Get all Bootstrap Policies
        **Requires Platform version 6.7.0 or later.**   Returns a list of all Bootstrap Policies on the Platform. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.bootstrap_policies_get_all_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: UnpagedResourceBaseBootstrapPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bootstrap_policies_get_all" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        resource_path = '/api/v1/bootstrappolicies'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='UnpagedResourceBaseBootstrapPolicy',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def bootstrap_policies_get_single_by_name(self, id, **kwargs):
        """
        Get Bootstrap Policy
        **Requires Platform version 6.7.0 or later.**   Returns a Bootstrap Policy. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.bootstrap_policies_get_single_by_name(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Required. Id of the Bootstrap Policy to retrieve (required)
        :return: ApprendaSOCWebRestAPIResourcesBootstrapPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.bootstrap_policies_get_single_by_name_with_http_info(id, **kwargs)
        else:
            (data) = self.bootstrap_policies_get_single_by_name_with_http_info(id, **kwargs)
            return data

    def bootstrap_policies_get_single_by_name_with_http_info(self, id, **kwargs):
        """
        Get Bootstrap Policy
        **Requires Platform version 6.7.0 or later.**   Returns a Bootstrap Policy. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.bootstrap_policies_get_single_by_name_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Required. Id of the Bootstrap Policy to retrieve (required)
        :return: ApprendaSOCWebRestAPIResourcesBootstrapPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bootstrap_policies_get_single_by_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bootstrap_policies_get_single_by_name`")


        collection_formats = {}

        resource_path = '/api/v1/bootstrappolicies/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ApprendaSOCWebRestAPIResourcesBootstrapPolicy',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def remove_bootstrap_policy(self, id, **kwargs):
        """
        Delete Bootstrap Policy
        **Requires Platform version 6.7.0 or later.**   Deletes a Bootstrap Policy from the Platform.  
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.remove_bootstrap_policy(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Required. Id of the Bootstrap Policy to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.remove_bootstrap_policy_with_http_info(id, **kwargs)
        else:
            (data) = self.remove_bootstrap_policy_with_http_info(id, **kwargs)
            return data

    def remove_bootstrap_policy_with_http_info(self, id, **kwargs):
        """
        Delete Bootstrap Policy
        **Requires Platform version 6.7.0 or later.**   Deletes a Bootstrap Policy from the Platform.  
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.remove_bootstrap_policy_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Required. Id of the Bootstrap Policy to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_bootstrap_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `remove_bootstrap_policy`")


        collection_formats = {}

        resource_path = '/api/v1/bootstrappolicies/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_bootstrap_policy(self, id, bootstrap_policy, **kwargs):
        """
        Update Bootstrap Policy
        **Requires Platform version 6.7.0 or later.**   Updates configuration settings for a Boostrap Policy. Making a request to this endpoint will update all fields for a Boostrap Policy. You should always pass all input values in the body of the request, because any value that is not provided will be updated to the default value. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_bootstrap_policy(id, bootstrap_policy, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Required. Id of Boostrap Policy to update (required)
        :param ApprendaSOCWebRestAPIResourcesBootstrapPolicy bootstrap_policy: Required. Bootstrap Policy to add to the collection. All fields should be passed in the request (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_bootstrap_policy_with_http_info(id, bootstrap_policy, **kwargs)
        else:
            (data) = self.update_bootstrap_policy_with_http_info(id, bootstrap_policy, **kwargs)
            return data

    def update_bootstrap_policy_with_http_info(self, id, bootstrap_policy, **kwargs):
        """
        Update Bootstrap Policy
        **Requires Platform version 6.7.0 or later.**   Updates configuration settings for a Boostrap Policy. Making a request to this endpoint will update all fields for a Boostrap Policy. You should always pass all input values in the body of the request, because any value that is not provided will be updated to the default value. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_bootstrap_policy_with_http_info(id, bootstrap_policy, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Required. Id of Boostrap Policy to update (required)
        :param ApprendaSOCWebRestAPIResourcesBootstrapPolicy bootstrap_policy: Required. Bootstrap Policy to add to the collection. All fields should be passed in the request (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'bootstrap_policy']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_bootstrap_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_bootstrap_policy`")
        # verify the required parameter 'bootstrap_policy' is set
        if ('bootstrap_policy' not in params) or (params['bootstrap_policy'] is None):
            raise ValueError("Missing the required parameter `bootstrap_policy` when calling `update_bootstrap_policy`")


        collection_formats = {}

        resource_path = '/api/v1/bootstrappolicies/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'bootstrap_policy' in params:
            body_params = params['bootstrap_policy']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def upload_bootstrap_archive_file(self, id, file, **kwargs):
        """
        Upload Bootstrap Policy archive
        **Requires Platform version 6.7.0 or later.**   Uploads an archive for a Bootstrap Policy. This will replace any archive already attached to the Bootstrap Policy.   Learn more about [Bootstrap Policy archive requirements](/current/bootstrap-policies). 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.upload_bootstrap_archive_file(id, file, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Id of the Bootstrap Policy to update (required)
        :param file file: Archive for the Bootstrap Policy (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.upload_bootstrap_archive_file_with_http_info(id, file, **kwargs)
        else:
            (data) = self.upload_bootstrap_archive_file_with_http_info(id, file, **kwargs)
            return data

    def upload_bootstrap_archive_file_with_http_info(self, id, file, **kwargs):
        """
        Upload Bootstrap Policy archive
        **Requires Platform version 6.7.0 or later.**   Uploads an archive for a Bootstrap Policy. This will replace any archive already attached to the Bootstrap Policy.   Learn more about [Bootstrap Policy archive requirements](/current/bootstrap-policies). 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.upload_bootstrap_archive_file_with_http_info(id, file, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Id of the Bootstrap Policy to update (required)
        :param file file: Archive for the Bootstrap Policy (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'file']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_bootstrap_archive_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `upload_bootstrap_archive_file`")
        # verify the required parameter 'file' is set
        if ('file' not in params) or (params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `upload_bootstrap_archive_file`")


        collection_formats = {}

        resource_path = '/api/v1/bootstrappolicies/{id}/archive'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'file' in params:
            local_var_files['file'] = params['file']

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['multipart/form-data'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
