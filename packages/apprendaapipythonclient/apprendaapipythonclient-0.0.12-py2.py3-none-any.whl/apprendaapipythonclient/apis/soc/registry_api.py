# coding: utf-8

"""
    Platform Operations Rest API

    The Platform Operations REST API can be leveraged to customize the Platform Operator experience of managing infrastructure and applications for the Apprenda Platform. This allows some of the functionality of the Platform's System Operations Center (SOC) to be accomplished through a variety of means such as custom-built UX or command-line interfaces.   For more information about the abilities of Platform Operators, see our documentation on the [SOC](/current/SOC).   ##Authentication   Before making a request, you must be authenticated. Learn how to [get authenticated](/restapi/platformops/v1/authentication).   ##Making a Request   ###Prerequisites   * Installed Platform of version 6.5.1 or later (Note that most endpoints are only available in version 6.7.0 and later)    * Authentication token   * If SOC authorization is enabled on your Platform, you must be assigned as an active Platform Operator   ###Request URL   All requests must use **https**.   The URL for every request you make is the Cloud URI of your Platform followed by \"/soc\" and the path structure of the endpoint. For example, if your Cloud URI is apps.apprenda.harp and you want to get the Add-ons for your Platform, the request URI will be **apps.apprenda.harp/soc/api/v1/addons**.   For more information, see our documentation on [using API resources](/restapi/platformops/v1/using-resources) and [finding your Cloud URI](/current/clouduri).   ###Request Headers   Your authenication token must be passed in the header of all requests using the key **ApprendaSessionToken** (not case sensitive).  

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

# python 2 and python 3 compatibility library
from six import iteritems

from apprendaapipythonclient.configuration import Configuration
from apprendaapipythonclient.api_client import ApiClient


class RegistryApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def registry_delete(self, name, **kwargs):
        """
        Delete Registry Setting
        **Requires Platform verison 6.7.0 or later.**   Removes a Registry Setting from the Platform. Before removing a setting, you should know how it will affect the Platform.    Learn more about [Platform Registry Settings](/current-managing-registry). 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.registry_delete(name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: Required. Name of setting (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.registry_delete_with_http_info(name, **kwargs)
        else:
            (data) = self.registry_delete_with_http_info(name, **kwargs)
            return data

    def registry_delete_with_http_info(self, name, **kwargs):
        """
        Delete Registry Setting
        **Requires Platform verison 6.7.0 or later.**   Removes a Registry Setting from the Platform. Before removing a setting, you should know how it will affect the Platform.    Learn more about [Platform Registry Settings](/current-managing-registry). 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.registry_delete_with_http_info(name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: Required. Name of setting (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method registry_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `registry_delete`")


        collection_formats = {}

        resource_path = '/api/v1/registry/{name}'.replace('{format}', 'json')
        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def registry_get(self, **kwargs):
        """
        Get all Registry Settings
        **Requires Platform version 6.7.0 or later.**   Returns all Platform Registry Settings. Learn more about [Platform Registry Settings](/current/managing-registry). 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.registry_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int page_size: Number of results to return in a single request. All results will be grouped into pages of this size. Default: 20
        :param int page_number: The page of results to return. Defaults to 1, the first page
        :param str search_term: Word to use to search for matching settings
        :return: list[PagedResourceBaseRegistrySetting]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.registry_get_with_http_info(**kwargs)
        else:
            (data) = self.registry_get_with_http_info(**kwargs)
            return data

    def registry_get_with_http_info(self, **kwargs):
        """
        Get all Registry Settings
        **Requires Platform version 6.7.0 or later.**   Returns all Platform Registry Settings. Learn more about [Platform Registry Settings](/current/managing-registry). 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.registry_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int page_size: Number of results to return in a single request. All results will be grouped into pages of this size. Default: 20
        :param int page_number: The page of results to return. Defaults to 1, the first page
        :param str search_term: Word to use to search for matching settings
        :return: list[PagedResourceBaseRegistrySetting]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page_size', 'page_number', 'search_term']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method registry_get" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        resource_path = '/api/v1/registry'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'page_size' in params:
            query_params['pageSize'] = params['page_size']
        if 'page_number' in params:
            query_params['pageNumber'] = params['page_number']
        if 'search_term' in params:
            query_params['searchTerm'] = params['search_term']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='PagedResourceBaseRegistrySetting',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def registry_get_by_name(self, name, **kwargs):
        """
        Get Registry Setting
        **Required Platform version 6.7.0 or later.**   Returns a Registry Setting.   Learn more about [Platform Registry Settings](/current/managing-registry). 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.registry_get_by_name(name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: Required. Name of the setting (required)
        :return: RegistrySetting
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.registry_get_by_name_with_http_info(name, **kwargs)
        else:
            (data) = self.registry_get_by_name_with_http_info(name, **kwargs)
            return data

    def registry_get_by_name_with_http_info(self, name, **kwargs):
        """
        Get Registry Setting
        **Required Platform version 6.7.0 or later.**   Returns a Registry Setting.   Learn more about [Platform Registry Settings](/current/managing-registry). 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.registry_get_by_name_with_http_info(name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: Required. Name of the setting (required)
        :return: RegistrySetting
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method registry_get_by_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `registry_get_by_name`")


        collection_formats = {}

        resource_path = '/api/v1/registry/{name}'.replace('{format}', 'json')
        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='RegistrySetting',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def registry_post_new(self, setting, **kwargs):
        """
        Create new Registry Setting
        **Required Platform version 6.7.0 or later.**   Creates a new Platform Registry Setting. This endpoint should be used if you want to add a registry setting that has not already be added to the Platform.   All available settings are described on the [Platform Registry Setting page](/current/managing-registry). 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.registry_post_new(setting, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param RegistrySetting setting: Required. Registry Setting to add (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.registry_post_new_with_http_info(setting, **kwargs)
        else:
            (data) = self.registry_post_new_with_http_info(setting, **kwargs)
            return data

    def registry_post_new_with_http_info(self, setting, **kwargs):
        """
        Create new Registry Setting
        **Required Platform version 6.7.0 or later.**   Creates a new Platform Registry Setting. This endpoint should be used if you want to add a registry setting that has not already be added to the Platform.   All available settings are described on the [Platform Registry Setting page](/current/managing-registry). 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.registry_post_new_with_http_info(setting, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param RegistrySetting setting: Required. Registry Setting to add (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['setting']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method registry_post_new" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'setting' is set
        if ('setting' not in params) or (params['setting'] is None):
            raise ValueError("Missing the required parameter `setting` when calling `registry_post_new`")


        collection_formats = {}

        resource_path = '/api/v1/registry'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'setting' in params:
            body_params = params['setting']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/json', 'application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='str',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def registry_put(self, name, setting, **kwargs):
        """
        Update Registry Setting
        **Required Platform version 6.7.0 or later.**   Updates the Registry Setting. Making a request to this endpoint will update all fields for a setting. You should always pass all input values in the body of the request, because any value that is not provided will be updated to the default value.   All available settings are described on the [Platform Registry Setting page](/current/managing-registry). 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.registry_put(name, setting, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: Required. Name of the setting (required)
        :param RegistrySetting setting: Required. Regirty Setting to update (required)
        :return: RegistrySetting
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.registry_put_with_http_info(name, setting, **kwargs)
        else:
            (data) = self.registry_put_with_http_info(name, setting, **kwargs)
            return data

    def registry_put_with_http_info(self, name, setting, **kwargs):
        """
        Update Registry Setting
        **Required Platform version 6.7.0 or later.**   Updates the Registry Setting. Making a request to this endpoint will update all fields for a setting. You should always pass all input values in the body of the request, because any value that is not provided will be updated to the default value.   All available settings are described on the [Platform Registry Setting page](/current/managing-registry). 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.registry_put_with_http_info(name, setting, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: Required. Name of the setting (required)
        :param RegistrySetting setting: Required. Regirty Setting to update (required)
        :return: RegistrySetting
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'setting']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method registry_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `registry_put`")
        # verify the required parameter 'setting' is set
        if ('setting' not in params) or (params['setting'] is None):
            raise ValueError("Missing the required parameter `setting` when calling `registry_put`")


        collection_formats = {}

        resource_path = '/api/v1/registry/{name}'.replace('{format}', 'json')
        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'setting' in params:
            body_params = params['setting']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='RegistrySetting',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
