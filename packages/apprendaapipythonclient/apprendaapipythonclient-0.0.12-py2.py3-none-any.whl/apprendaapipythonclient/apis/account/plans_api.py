# coding: utf-8

"""
    Account Management REST API

    The Account Management REST API can be used to manage user accounts, roles, and securables for applications on the Platform. The endpoints of this API allow you to perform the same the functionality of the Platform's Account Portal for your Tenant's applications.   For more information, see our documentation on the [Account Portal](/current/account).     ## Authentication    Before making a request, you must be authenticated. Follow these instuctions [to get authenticated](/restapi/accountmanagement/v1/authentication). ## Making a Request   ### Prerequisites    * Installed Platform of version 6.6.0 or later    * An active user account assigned to an active Tenant Account or Developer Team    * Authentication token   ### Request URL    All requests must use **https**.       The URL for every request you make is the URL of your Platform followed by \"/account\" and the path structure of the endpoint. For example, if your Platform URL is https://apps.apprenda.harp and you want to get a list of all user accounts for your Tenant, the request URL will be https://apps.apprenda.harp/account/api/v1/users.     For more information, see our documentation on [using api resources](/restapi/accountmanagement/v1/using-resources) and [finding your Cloud URI](/current/clouduri).    ### Request Headers  Your authenication token must be passed in the header of all requests using the key **ApprendaSessionToken** (not case sensitive).    

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

# python 2 and python 3 compatibility library
from six import iteritems

from apprendaapipythonclient.configuration import Configuration
from apprendaapipythonclient.api_client import ApiClient


class PlansApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def api_v1_application_versions_application_version_key_plans_get(self, application_version_key, **kwargs):
        """
        Get all plans for an application version
        Returns all plans for an given application version.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_application_versions_application_version_key_plans_get(application_version_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str application_version_key: Required. Concatenation of application alias and version alias as 'AppAlias-VersionAlias' (required)
        :return: list[UnpagedResourceBasePlan]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.api_v1_application_versions_application_version_key_plans_get_with_http_info(application_version_key, **kwargs)
        else:
            (data) = self.api_v1_application_versions_application_version_key_plans_get_with_http_info(application_version_key, **kwargs)
            return data

    def api_v1_application_versions_application_version_key_plans_get_with_http_info(self, application_version_key, **kwargs):
        """
        Get all plans for an application version
        Returns all plans for an given application version.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_application_versions_application_version_key_plans_get_with_http_info(application_version_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str application_version_key: Required. Concatenation of application alias and version alias as 'AppAlias-VersionAlias' (required)
        :return: list[UnpagedResourceBasePlan]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['application_version_key']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_application_versions_application_version_key_plans_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'application_version_key' is set
        if ('application_version_key' not in params) or (params['application_version_key'] is None):
            raise ValueError("Missing the required parameter `application_version_key` when calling `api_v1_application_versions_application_version_key_plans_get`")


        collection_formats = {}

        resource_path = '/api/v1/applicationVersions/{applicationVersionKey}/plans'.replace('{format}', 'json')
        path_params = {}
        if 'application_version_key' in params:
            path_params['applicationVersionKey'] = params['application_version_key']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='UnpagedResourceBasePlan',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def api_v1_application_versions_application_version_key_plans_plan_id_get(self, application_version_key, plan_id, **kwargs):
        """
        Get a plan for an application version
        Returns a specific plan for the given application version and plan id.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_application_versions_application_version_key_plans_plan_id_get(application_version_key, plan_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str application_version_key: Required. Concatenation of application alias and version alias as 'AppAlias-VersionAlias' (required)
        :param str plan_id: Required. Unique Platform assigned id of the plan (required)
        :return: Plan
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.api_v1_application_versions_application_version_key_plans_plan_id_get_with_http_info(application_version_key, plan_id, **kwargs)
        else:
            (data) = self.api_v1_application_versions_application_version_key_plans_plan_id_get_with_http_info(application_version_key, plan_id, **kwargs)
            return data

    def api_v1_application_versions_application_version_key_plans_plan_id_get_with_http_info(self, application_version_key, plan_id, **kwargs):
        """
        Get a plan for an application version
        Returns a specific plan for the given application version and plan id.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_application_versions_application_version_key_plans_plan_id_get_with_http_info(application_version_key, plan_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str application_version_key: Required. Concatenation of application alias and version alias as 'AppAlias-VersionAlias' (required)
        :param str plan_id: Required. Unique Platform assigned id of the plan (required)
        :return: Plan
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['application_version_key', 'plan_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_application_versions_application_version_key_plans_plan_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'application_version_key' is set
        if ('application_version_key' not in params) or (params['application_version_key'] is None):
            raise ValueError("Missing the required parameter `application_version_key` when calling `api_v1_application_versions_application_version_key_plans_plan_id_get`")
        # verify the required parameter 'plan_id' is set
        if ('plan_id' not in params) or (params['plan_id'] is None):
            raise ValueError("Missing the required parameter `plan_id` when calling `api_v1_application_versions_application_version_key_plans_plan_id_get`")


        collection_formats = {}

        resource_path = '/api/v1/applicationVersions/{applicationVersionKey}/plans/{planId}'.replace('{format}', 'json')
        path_params = {}
        if 'application_version_key' in params:
            path_params['applicationVersionKey'] = params['application_version_key']
        if 'plan_id' in params:
            path_params['planId'] = params['plan_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Plan',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
