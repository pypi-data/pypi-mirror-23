# coding: utf-8

"""
    Apprenda.DeveloperPortal.Web

    The Application Management REST API can be leveraged to customize the Developer experience of deploying and managing applications  on the Apprenda Platform. This allows some of the functionality of the Platform's [Developer Portal](/current/developer-portal)to be accomplished through a variety of means such as custom-built UX or command-line interfaces.     ##Authentication    Before making a request, you must be authenticated. Learn how to [get authenticated](/restapi/appmanagement/v1/authentication).    ##Making a Request    ###Prerequisites    * Installed Platform of version 4.5.0 or later     * Authentication token     * To use this API you must be part of a [Development Team or Tenant](/current/create-users) and have an [active subscription](/current/dev-portal-setup#create) to Developer Portal    ###Request URL    All requests must use **https**.    The URL for every request you make is the Cloud URI of your Platform followed by \"/developer\" and the path structure of the endpoint. For example, if your Cloud URI is apps.apprenda.harp and you want to get the Add-ons for your Platform, the request URI will be **apps.apprenda.harp/developer/api/v1/addons**.      For more information, see our documentation on [using API resources](/restapi/appmanagement/v1/resources) and [finding your Cloud URI](/current/clouduri).

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

# python 2 and python 3 compatibility library
from six import iteritems

from configuration import Configuration
from src.api_client import ApiClient


class ComponentsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def blank_environment_variable(self, app_alias, version_alias, component_alias, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.blank_environment_variable(app_alias, version_alias, component_alias, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str app_alias: (required)
        :param str version_alias: (required)
        :param str component_alias: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.blank_environment_variable_with_http_info(app_alias, version_alias, component_alias, **kwargs)
        else:
            (data) = self.blank_environment_variable_with_http_info(app_alias, version_alias, component_alias, **kwargs)
            return data

    def blank_environment_variable_with_http_info(self, app_alias, version_alias, component_alias, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.blank_environment_variable_with_http_info(app_alias, version_alias, component_alias, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str app_alias: (required)
        :param str version_alias: (required)
        :param str component_alias: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_alias', 'version_alias', 'component_alias']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method blank_environment_variable" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_alias' is set
        if ('app_alias' not in params) or (params['app_alias'] is None):
            raise ValueError("Missing the required parameter `app_alias` when calling `blank_environment_variable`")
        # verify the required parameter 'version_alias' is set
        if ('version_alias' not in params) or (params['version_alias'] is None):
            raise ValueError("Missing the required parameter `version_alias` when calling `blank_environment_variable`")
        # verify the required parameter 'component_alias' is set
        if ('component_alias' not in params) or (params['component_alias'] is None):
            raise ValueError("Missing the required parameter `component_alias` when calling `blank_environment_variable`")


        collection_formats = {}

        resource_path = '/api/v1/apps/{appAlias}/versions/{versionAlias}/components/{componentAlias}/environmentVariables'.replace('{format}', 'json')
        path_params = {}
        if 'app_alias' in params:
            path_params['appAlias'] = params['app_alias']
        if 'version_alias' in params:
            path_params['versionAlias'] = params['version_alias']
        if 'component_alias' in params:
            path_params['componentAlias'] = params['component_alias']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def components_delete_certificate(self, app_alias, version_alias, component_alias, file_name, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.components_delete_certificate(app_alias, version_alias, component_alias, file_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str app_alias: (required)
        :param str version_alias: (required)
        :param str component_alias: (required)
        :param str file_name: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.components_delete_certificate_with_http_info(app_alias, version_alias, component_alias, file_name, **kwargs)
        else:
            (data) = self.components_delete_certificate_with_http_info(app_alias, version_alias, component_alias, file_name, **kwargs)
            return data

    def components_delete_certificate_with_http_info(self, app_alias, version_alias, component_alias, file_name, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.components_delete_certificate_with_http_info(app_alias, version_alias, component_alias, file_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str app_alias: (required)
        :param str version_alias: (required)
        :param str component_alias: (required)
        :param str file_name: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_alias', 'version_alias', 'component_alias', 'file_name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method components_delete_certificate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_alias' is set
        if ('app_alias' not in params) or (params['app_alias'] is None):
            raise ValueError("Missing the required parameter `app_alias` when calling `components_delete_certificate`")
        # verify the required parameter 'version_alias' is set
        if ('version_alias' not in params) or (params['version_alias'] is None):
            raise ValueError("Missing the required parameter `version_alias` when calling `components_delete_certificate`")
        # verify the required parameter 'component_alias' is set
        if ('component_alias' not in params) or (params['component_alias'] is None):
            raise ValueError("Missing the required parameter `component_alias` when calling `components_delete_certificate`")
        # verify the required parameter 'file_name' is set
        if ('file_name' not in params) or (params['file_name'] is None):
            raise ValueError("Missing the required parameter `file_name` when calling `components_delete_certificate`")


        collection_formats = {}

        resource_path = '/api/v1/components/{appAlias}/{versionAlias}/{componentAlias}/certificates/{fileName}'.replace('{format}', 'json')
        path_params = {}
        if 'app_alias' in params:
            path_params['appAlias'] = params['app_alias']
        if 'version_alias' in params:
            path_params['versionAlias'] = params['version_alias']
        if 'component_alias' in params:
            path_params['componentAlias'] = params['component_alias']
        if 'file_name' in params:
            path_params['fileName'] = params['file_name']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def components_get(self, alias, sub_alias, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.components_get(alias, sub_alias, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str alias: (required)
        :param str sub_alias: (required)
        :return: list[Component]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.components_get_with_http_info(alias, sub_alias, **kwargs)
        else:
            (data) = self.components_get_with_http_info(alias, sub_alias, **kwargs)
            return data

    def components_get_with_http_info(self, alias, sub_alias, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.components_get_with_http_info(alias, sub_alias, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str alias: (required)
        :param str sub_alias: (required)
        :return: list[Component]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['alias', 'sub_alias']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method components_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'alias' is set
        if ('alias' not in params) or (params['alias'] is None):
            raise ValueError("Missing the required parameter `alias` when calling `components_get`")
        # verify the required parameter 'sub_alias' is set
        if ('sub_alias' not in params) or (params['sub_alias'] is None):
            raise ValueError("Missing the required parameter `sub_alias` when calling `components_get`")


        collection_formats = {}

        resource_path = '/api/v1/Components'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'alias' in params:
            query_params['alias'] = params['alias']
        if 'sub_alias' in params:
            query_params['subAlias'] = params['sub_alias']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[Component]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def components_get_all_for_version(self, app_alias, version_alias, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.components_get_all_for_version(app_alias, version_alias, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str app_alias: (required)
        :param str version_alias: (required)
        :return: UnpagedResourceBaseComponent
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.components_get_all_for_version_with_http_info(app_alias, version_alias, **kwargs)
        else:
            (data) = self.components_get_all_for_version_with_http_info(app_alias, version_alias, **kwargs)
            return data

    def components_get_all_for_version_with_http_info(self, app_alias, version_alias, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.components_get_all_for_version_with_http_info(app_alias, version_alias, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str app_alias: (required)
        :param str version_alias: (required)
        :return: UnpagedResourceBaseComponent
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_alias', 'version_alias']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method components_get_all_for_version" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_alias' is set
        if ('app_alias' not in params) or (params['app_alias'] is None):
            raise ValueError("Missing the required parameter `app_alias` when calling `components_get_all_for_version`")
        # verify the required parameter 'version_alias' is set
        if ('version_alias' not in params) or (params['version_alias'] is None):
            raise ValueError("Missing the required parameter `version_alias` when calling `components_get_all_for_version`")


        collection_formats = {}

        resource_path = '/api/v1/apps/{appAlias}/versions/{versionAlias}/components'.replace('{format}', 'json')
        path_params = {}
        if 'app_alias' in params:
            path_params['appAlias'] = params['app_alias']
        if 'version_alias' in params:
            path_params['versionAlias'] = params['version_alias']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='UnpagedResourceBaseComponent',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def components_get_by_component_alias(self, app_alias, version_alias, component_alias, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.components_get_by_component_alias(app_alias, version_alias, component_alias, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str app_alias: (required)
        :param str version_alias: (required)
        :param str component_alias: (required)
        :return: Component
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.components_get_by_component_alias_with_http_info(app_alias, version_alias, component_alias, **kwargs)
        else:
            (data) = self.components_get_by_component_alias_with_http_info(app_alias, version_alias, component_alias, **kwargs)
            return data

    def components_get_by_component_alias_with_http_info(self, app_alias, version_alias, component_alias, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.components_get_by_component_alias_with_http_info(app_alias, version_alias, component_alias, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str app_alias: (required)
        :param str version_alias: (required)
        :param str component_alias: (required)
        :return: Component
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_alias', 'version_alias', 'component_alias']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method components_get_by_component_alias" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_alias' is set
        if ('app_alias' not in params) or (params['app_alias'] is None):
            raise ValueError("Missing the required parameter `app_alias` when calling `components_get_by_component_alias`")
        # verify the required parameter 'version_alias' is set
        if ('version_alias' not in params) or (params['version_alias'] is None):
            raise ValueError("Missing the required parameter `version_alias` when calling `components_get_by_component_alias`")
        # verify the required parameter 'component_alias' is set
        if ('component_alias' not in params) or (params['component_alias'] is None):
            raise ValueError("Missing the required parameter `component_alias` when calling `components_get_by_component_alias`")


        collection_formats = {}

        resource_path = '/api/v1/apps/{appAlias}/versions/{versionAlias}/components/{componentAlias}'.replace('{format}', 'json')
        path_params = {}
        if 'app_alias' in params:
            path_params['appAlias'] = params['app_alias']
        if 'version_alias' in params:
            path_params['versionAlias'] = params['version_alias']
        if 'component_alias' in params:
            path_params['componentAlias'] = params['component_alias']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Component',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def components_get_by_i_dentifier(self, alias, sub_alias, identifier, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.components_get_by_i_dentifier(alias, sub_alias, identifier, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str alias: (required)
        :param str sub_alias: (required)
        :param str identifier: (required)
        :return: EnrichedComponent
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.components_get_by_i_dentifier_with_http_info(alias, sub_alias, identifier, **kwargs)
        else:
            (data) = self.components_get_by_i_dentifier_with_http_info(alias, sub_alias, identifier, **kwargs)
            return data

    def components_get_by_i_dentifier_with_http_info(self, alias, sub_alias, identifier, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.components_get_by_i_dentifier_with_http_info(alias, sub_alias, identifier, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str alias: (required)
        :param str sub_alias: (required)
        :param str identifier: (required)
        :return: EnrichedComponent
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['alias', 'sub_alias', 'identifier']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method components_get_by_i_dentifier" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'alias' is set
        if ('alias' not in params) or (params['alias'] is None):
            raise ValueError("Missing the required parameter `alias` when calling `components_get_by_i_dentifier`")
        # verify the required parameter 'sub_alias' is set
        if ('sub_alias' not in params) or (params['sub_alias'] is None):
            raise ValueError("Missing the required parameter `sub_alias` when calling `components_get_by_i_dentifier`")
        # verify the required parameter 'identifier' is set
        if ('identifier' not in params) or (params['identifier'] is None):
            raise ValueError("Missing the required parameter `identifier` when calling `components_get_by_i_dentifier`")


        collection_formats = {}

        resource_path = '/api/v1/Components/{alias}/{subAlias}/{identifier}'.replace('{format}', 'json')
        path_params = {}
        if 'alias' in params:
            path_params['alias'] = params['alias']
        if 'sub_alias' in params:
            path_params['subAlias'] = params['sub_alias']
        if 'identifier' in params:
            path_params['identifier'] = params['identifier']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnrichedComponent',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def components_get_by_sub_alias(self, alias, sub_alias, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.components_get_by_sub_alias(alias, sub_alias, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str alias: (required)
        :param str sub_alias: (required)
        :return: list[Component]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.components_get_by_sub_alias_with_http_info(alias, sub_alias, **kwargs)
        else:
            (data) = self.components_get_by_sub_alias_with_http_info(alias, sub_alias, **kwargs)
            return data

    def components_get_by_sub_alias_with_http_info(self, alias, sub_alias, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.components_get_by_sub_alias_with_http_info(alias, sub_alias, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str alias: (required)
        :param str sub_alias: (required)
        :return: list[Component]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['alias', 'sub_alias']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method components_get_by_sub_alias" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'alias' is set
        if ('alias' not in params) or (params['alias'] is None):
            raise ValueError("Missing the required parameter `alias` when calling `components_get_by_sub_alias`")
        # verify the required parameter 'sub_alias' is set
        if ('sub_alias' not in params) or (params['sub_alias'] is None):
            raise ValueError("Missing the required parameter `sub_alias` when calling `components_get_by_sub_alias`")


        collection_formats = {}

        resource_path = '/api/v1/Components/{alias}/{subAlias}'.replace('{format}', 'json')
        path_params = {}
        if 'alias' in params:
            path_params['alias'] = params['alias']
        if 'sub_alias' in params:
            path_params['subAlias'] = params['sub_alias']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[Component]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def components_get_certificate(self, app_alias, version_alias, component_alias, file_name, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.components_get_certificate(app_alias, version_alias, component_alias, file_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str app_alias: (required)
        :param str version_alias: (required)
        :param str component_alias: (required)
        :param str file_name: (required)
        :return: Certificate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.components_get_certificate_with_http_info(app_alias, version_alias, component_alias, file_name, **kwargs)
        else:
            (data) = self.components_get_certificate_with_http_info(app_alias, version_alias, component_alias, file_name, **kwargs)
            return data

    def components_get_certificate_with_http_info(self, app_alias, version_alias, component_alias, file_name, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.components_get_certificate_with_http_info(app_alias, version_alias, component_alias, file_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str app_alias: (required)
        :param str version_alias: (required)
        :param str component_alias: (required)
        :param str file_name: (required)
        :return: Certificate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_alias', 'version_alias', 'component_alias', 'file_name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method components_get_certificate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_alias' is set
        if ('app_alias' not in params) or (params['app_alias'] is None):
            raise ValueError("Missing the required parameter `app_alias` when calling `components_get_certificate`")
        # verify the required parameter 'version_alias' is set
        if ('version_alias' not in params) or (params['version_alias'] is None):
            raise ValueError("Missing the required parameter `version_alias` when calling `components_get_certificate`")
        # verify the required parameter 'component_alias' is set
        if ('component_alias' not in params) or (params['component_alias'] is None):
            raise ValueError("Missing the required parameter `component_alias` when calling `components_get_certificate`")
        # verify the required parameter 'file_name' is set
        if ('file_name' not in params) or (params['file_name'] is None):
            raise ValueError("Missing the required parameter `file_name` when calling `components_get_certificate`")


        collection_formats = {}

        resource_path = '/api/v1/components/{appAlias}/{versionAlias}/{componentAlias}/certificates/{fileName}'.replace('{format}', 'json')
        path_params = {}
        if 'app_alias' in params:
            path_params['appAlias'] = params['app_alias']
        if 'version_alias' in params:
            path_params['versionAlias'] = params['version_alias']
        if 'component_alias' in params:
            path_params['componentAlias'] = params['component_alias']
        if 'file_name' in params:
            path_params['fileName'] = params['file_name']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Certificate',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def components_get_files(self, app_alias, version_alias, component_alias, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.components_get_files(app_alias, version_alias, component_alias, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str app_alias: (required)
        :param str version_alias: (required)
        :param str component_alias: (required)
        :param str path:
        :return: list[ComponentResource]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.components_get_files_with_http_info(app_alias, version_alias, component_alias, **kwargs)
        else:
            (data) = self.components_get_files_with_http_info(app_alias, version_alias, component_alias, **kwargs)
            return data

    def components_get_files_with_http_info(self, app_alias, version_alias, component_alias, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.components_get_files_with_http_info(app_alias, version_alias, component_alias, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str app_alias: (required)
        :param str version_alias: (required)
        :param str component_alias: (required)
        :param str path:
        :return: list[ComponentResource]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_alias', 'version_alias', 'component_alias', 'path']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method components_get_files" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_alias' is set
        if ('app_alias' not in params) or (params['app_alias'] is None):
            raise ValueError("Missing the required parameter `app_alias` when calling `components_get_files`")
        # verify the required parameter 'version_alias' is set
        if ('version_alias' not in params) or (params['version_alias'] is None):
            raise ValueError("Missing the required parameter `version_alias` when calling `components_get_files`")
        # verify the required parameter 'component_alias' is set
        if ('component_alias' not in params) or (params['component_alias'] is None):
            raise ValueError("Missing the required parameter `component_alias` when calling `components_get_files`")


        collection_formats = {}

        resource_path = '/api/v1/components/{appAlias}/{versionAlias}/{componentAlias}/files'.replace('{format}', 'json')
        path_params = {}
        if 'app_alias' in params:
            path_params['appAlias'] = params['app_alias']
        if 'version_alias' in params:
            path_params['versionAlias'] = params['version_alias']
        if 'component_alias' in params:
            path_params['componentAlias'] = params['component_alias']

        query_params = {}
        if 'path' in params:
            query_params['path'] = params['path']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[ComponentResource]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def components_get_scale_by_alias(self, alias, sub_alias, app_alias, version_alias, component_alias, count, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.components_get_scale_by_alias(alias, sub_alias, app_alias, version_alias, component_alias, count, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str alias: (required)
        :param str sub_alias: (required)
        :param str app_alias: (required)
        :param str version_alias: (required)
        :param str component_alias: (required)
        :param str count: (required)
        :return: list[Component]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.components_get_scale_by_alias_with_http_info(alias, sub_alias, app_alias, version_alias, component_alias, count, **kwargs)
        else:
            (data) = self.components_get_scale_by_alias_with_http_info(alias, sub_alias, app_alias, version_alias, component_alias, count, **kwargs)
            return data

    def components_get_scale_by_alias_with_http_info(self, alias, sub_alias, app_alias, version_alias, component_alias, count, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.components_get_scale_by_alias_with_http_info(alias, sub_alias, app_alias, version_alias, component_alias, count, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str alias: (required)
        :param str sub_alias: (required)
        :param str app_alias: (required)
        :param str version_alias: (required)
        :param str component_alias: (required)
        :param str count: (required)
        :return: list[Component]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['alias', 'sub_alias', 'app_alias', 'version_alias', 'component_alias', 'count']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method components_get_scale_by_alias" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'alias' is set
        if ('alias' not in params) or (params['alias'] is None):
            raise ValueError("Missing the required parameter `alias` when calling `components_get_scale_by_alias`")
        # verify the required parameter 'sub_alias' is set
        if ('sub_alias' not in params) or (params['sub_alias'] is None):
            raise ValueError("Missing the required parameter `sub_alias` when calling `components_get_scale_by_alias`")
        # verify the required parameter 'app_alias' is set
        if ('app_alias' not in params) or (params['app_alias'] is None):
            raise ValueError("Missing the required parameter `app_alias` when calling `components_get_scale_by_alias`")
        # verify the required parameter 'version_alias' is set
        if ('version_alias' not in params) or (params['version_alias'] is None):
            raise ValueError("Missing the required parameter `version_alias` when calling `components_get_scale_by_alias`")
        # verify the required parameter 'component_alias' is set
        if ('component_alias' not in params) or (params['component_alias'] is None):
            raise ValueError("Missing the required parameter `component_alias` when calling `components_get_scale_by_alias`")
        # verify the required parameter 'count' is set
        if ('count' not in params) or (params['count'] is None):
            raise ValueError("Missing the required parameter `count` when calling `components_get_scale_by_alias`")


        collection_formats = {}

        resource_path = '/api/v1/Components/{appAlias}/{versionAlias}/{componentAlias}/scale/{count}'.replace('{format}', 'json')
        path_params = {}
        if 'app_alias' in params:
            path_params['appAlias'] = params['app_alias']
        if 'version_alias' in params:
            path_params['versionAlias'] = params['version_alias']
        if 'component_alias' in params:
            path_params['componentAlias'] = params['component_alias']
        if 'count' in params:
            path_params['count'] = params['count']

        query_params = {}
        if 'alias' in params:
            query_params['alias'] = params['alias']
        if 'sub_alias' in params:
            query_params['subAlias'] = params['sub_alias']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[Component]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def components_post(self, alias, sub_alias, identifier, action, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.components_post(alias, sub_alias, identifier, action, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str alias: (required)
        :param str sub_alias: (required)
        :param str identifier: (required)
        :param str action: (required)
        :param int count:
        :param int min_count:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.components_post_with_http_info(alias, sub_alias, identifier, action, **kwargs)
        else:
            (data) = self.components_post_with_http_info(alias, sub_alias, identifier, action, **kwargs)
            return data

    def components_post_with_http_info(self, alias, sub_alias, identifier, action, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.components_post_with_http_info(alias, sub_alias, identifier, action, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str alias: (required)
        :param str sub_alias: (required)
        :param str identifier: (required)
        :param str action: (required)
        :param int count:
        :param int min_count:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['alias', 'sub_alias', 'identifier', 'action', 'count', 'min_count']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method components_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'alias' is set
        if ('alias' not in params) or (params['alias'] is None):
            raise ValueError("Missing the required parameter `alias` when calling `components_post`")
        # verify the required parameter 'sub_alias' is set
        if ('sub_alias' not in params) or (params['sub_alias'] is None):
            raise ValueError("Missing the required parameter `sub_alias` when calling `components_post`")
        # verify the required parameter 'identifier' is set
        if ('identifier' not in params) or (params['identifier'] is None):
            raise ValueError("Missing the required parameter `identifier` when calling `components_post`")
        # verify the required parameter 'action' is set
        if ('action' not in params) or (params['action'] is None):
            raise ValueError("Missing the required parameter `action` when calling `components_post`")


        collection_formats = {}

        resource_path = '/api/v1/Components'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'alias' in params:
            query_params['alias'] = params['alias']
        if 'sub_alias' in params:
            query_params['subAlias'] = params['sub_alias']
        if 'identifier' in params:
            query_params['identifier'] = params['identifier']
        if 'action' in params:
            query_params['action'] = params['action']
        if 'count' in params:
            query_params['count'] = params['count']
        if 'min_count' in params:
            query_params['minCount'] = params['min_count']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def components_post_action_by_identifier(self, alias, sub_alias, identifier, action, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.components_post_action_by_identifier(alias, sub_alias, identifier, action, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str alias: (required)
        :param str sub_alias: (required)
        :param str identifier: (required)
        :param str action: (required)
        :param int count:
        :param int min_count:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.components_post_action_by_identifier_with_http_info(alias, sub_alias, identifier, action, **kwargs)
        else:
            (data) = self.components_post_action_by_identifier_with_http_info(alias, sub_alias, identifier, action, **kwargs)
            return data

    def components_post_action_by_identifier_with_http_info(self, alias, sub_alias, identifier, action, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.components_post_action_by_identifier_with_http_info(alias, sub_alias, identifier, action, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str alias: (required)
        :param str sub_alias: (required)
        :param str identifier: (required)
        :param str action: (required)
        :param int count:
        :param int min_count:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['alias', 'sub_alias', 'identifier', 'action', 'count', 'min_count']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method components_post_action_by_identifier" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'alias' is set
        if ('alias' not in params) or (params['alias'] is None):
            raise ValueError("Missing the required parameter `alias` when calling `components_post_action_by_identifier`")
        # verify the required parameter 'sub_alias' is set
        if ('sub_alias' not in params) or (params['sub_alias'] is None):
            raise ValueError("Missing the required parameter `sub_alias` when calling `components_post_action_by_identifier`")
        # verify the required parameter 'identifier' is set
        if ('identifier' not in params) or (params['identifier'] is None):
            raise ValueError("Missing the required parameter `identifier` when calling `components_post_action_by_identifier`")
        # verify the required parameter 'action' is set
        if ('action' not in params) or (params['action'] is None):
            raise ValueError("Missing the required parameter `action` when calling `components_post_action_by_identifier`")


        collection_formats = {}

        resource_path = '/api/v1/Components/{alias}/{subAlias}/{identifier}'.replace('{format}', 'json')
        path_params = {}
        if 'alias' in params:
            path_params['alias'] = params['alias']
        if 'sub_alias' in params:
            path_params['subAlias'] = params['sub_alias']
        if 'identifier' in params:
            path_params['identifier'] = params['identifier']

        query_params = {}
        if 'action' in params:
            query_params['action'] = params['action']
        if 'count' in params:
            query_params['count'] = params['count']
        if 'min_count' in params:
            query_params['minCount'] = params['min_count']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def components_post_certificate(self, app_alias, version_alias, component_alias, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.components_post_certificate(app_alias, version_alias, component_alias, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str app_alias: (required)
        :param str version_alias: (required)
        :param str component_alias: (required)
        :param str url:
        :return: list[Certificate]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.components_post_certificate_with_http_info(app_alias, version_alias, component_alias, **kwargs)
        else:
            (data) = self.components_post_certificate_with_http_info(app_alias, version_alias, component_alias, **kwargs)
            return data

    def components_post_certificate_with_http_info(self, app_alias, version_alias, component_alias, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.components_post_certificate_with_http_info(app_alias, version_alias, component_alias, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str app_alias: (required)
        :param str version_alias: (required)
        :param str component_alias: (required)
        :param str url:
        :return: list[Certificate]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_alias', 'version_alias', 'component_alias', 'url']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method components_post_certificate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_alias' is set
        if ('app_alias' not in params) or (params['app_alias'] is None):
            raise ValueError("Missing the required parameter `app_alias` when calling `components_post_certificate`")
        # verify the required parameter 'version_alias' is set
        if ('version_alias' not in params) or (params['version_alias'] is None):
            raise ValueError("Missing the required parameter `version_alias` when calling `components_post_certificate`")
        # verify the required parameter 'component_alias' is set
        if ('component_alias' not in params) or (params['component_alias'] is None):
            raise ValueError("Missing the required parameter `component_alias` when calling `components_post_certificate`")


        collection_formats = {}

        resource_path = '/api/v1/components/{appAlias}/{versionAlias}/{componentAlias}/certificates'.replace('{format}', 'json')
        path_params = {}
        if 'app_alias' in params:
            path_params['appAlias'] = params['app_alias']
        if 'version_alias' in params:
            path_params['versionAlias'] = params['version_alias']
        if 'component_alias' in params:
            path_params['componentAlias'] = params['component_alias']

        query_params = {}
        if 'url' in params:
            query_params['url'] = params['url']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[Certificate]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def components_post_scale_by_identifier(self, alias, sub_alias, identifier, action, count, app_alias, version_alias, component_alias, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.components_post_scale_by_identifier(alias, sub_alias, identifier, action, count, app_alias, version_alias, component_alias, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str alias: (required)
        :param str sub_alias: (required)
        :param str identifier: (required)
        :param str action: (required)
        :param int count: (required)
        :param str app_alias: (required)
        :param str version_alias: (required)
        :param str component_alias: (required)
        :param int min_count:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.components_post_scale_by_identifier_with_http_info(alias, sub_alias, identifier, action, count, app_alias, version_alias, component_alias, **kwargs)
        else:
            (data) = self.components_post_scale_by_identifier_with_http_info(alias, sub_alias, identifier, action, count, app_alias, version_alias, component_alias, **kwargs)
            return data

    def components_post_scale_by_identifier_with_http_info(self, alias, sub_alias, identifier, action, count, app_alias, version_alias, component_alias, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.components_post_scale_by_identifier_with_http_info(alias, sub_alias, identifier, action, count, app_alias, version_alias, component_alias, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str alias: (required)
        :param str sub_alias: (required)
        :param str identifier: (required)
        :param str action: (required)
        :param int count: (required)
        :param str app_alias: (required)
        :param str version_alias: (required)
        :param str component_alias: (required)
        :param int min_count:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['alias', 'sub_alias', 'identifier', 'action', 'count', 'app_alias', 'version_alias', 'component_alias', 'min_count']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method components_post_scale_by_identifier" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'alias' is set
        if ('alias' not in params) or (params['alias'] is None):
            raise ValueError("Missing the required parameter `alias` when calling `components_post_scale_by_identifier`")
        # verify the required parameter 'sub_alias' is set
        if ('sub_alias' not in params) or (params['sub_alias'] is None):
            raise ValueError("Missing the required parameter `sub_alias` when calling `components_post_scale_by_identifier`")
        # verify the required parameter 'identifier' is set
        if ('identifier' not in params) or (params['identifier'] is None):
            raise ValueError("Missing the required parameter `identifier` when calling `components_post_scale_by_identifier`")
        # verify the required parameter 'action' is set
        if ('action' not in params) or (params['action'] is None):
            raise ValueError("Missing the required parameter `action` when calling `components_post_scale_by_identifier`")
        # verify the required parameter 'count' is set
        if ('count' not in params) or (params['count'] is None):
            raise ValueError("Missing the required parameter `count` when calling `components_post_scale_by_identifier`")
        # verify the required parameter 'app_alias' is set
        if ('app_alias' not in params) or (params['app_alias'] is None):
            raise ValueError("Missing the required parameter `app_alias` when calling `components_post_scale_by_identifier`")
        # verify the required parameter 'version_alias' is set
        if ('version_alias' not in params) or (params['version_alias'] is None):
            raise ValueError("Missing the required parameter `version_alias` when calling `components_post_scale_by_identifier`")
        # verify the required parameter 'component_alias' is set
        if ('component_alias' not in params) or (params['component_alias'] is None):
            raise ValueError("Missing the required parameter `component_alias` when calling `components_post_scale_by_identifier`")


        collection_formats = {}

        resource_path = '/api/v1/Components/{appAlias}/{versionAlias}/{componentAlias}/scale/{count}'.replace('{format}', 'json')
        path_params = {}
        if 'count' in params:
            path_params['count'] = params['count']
        if 'app_alias' in params:
            path_params['appAlias'] = params['app_alias']
        if 'version_alias' in params:
            path_params['versionAlias'] = params['version_alias']
        if 'component_alias' in params:
            path_params['componentAlias'] = params['component_alias']

        query_params = {}
        if 'alias' in params:
            query_params['alias'] = params['alias']
        if 'sub_alias' in params:
            query_params['subAlias'] = params['sub_alias']
        if 'identifier' in params:
            query_params['identifier'] = params['identifier']
        if 'action' in params:
            query_params['action'] = params['action']
        if 'min_count' in params:
            query_params['minCount'] = params['min_count']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def components_put(self, alias, sub_alias, identifier, component, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.components_put(alias, sub_alias, identifier, component, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str alias: (required)
        :param str sub_alias: (required)
        :param str identifier: (required)
        :param EnrichedComponentModel component: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.components_put_with_http_info(alias, sub_alias, identifier, component, **kwargs)
        else:
            (data) = self.components_put_with_http_info(alias, sub_alias, identifier, component, **kwargs)
            return data

    def components_put_with_http_info(self, alias, sub_alias, identifier, component, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.components_put_with_http_info(alias, sub_alias, identifier, component, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str alias: (required)
        :param str sub_alias: (required)
        :param str identifier: (required)
        :param EnrichedComponentModel component: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['alias', 'sub_alias', 'identifier', 'component']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method components_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'alias' is set
        if ('alias' not in params) or (params['alias'] is None):
            raise ValueError("Missing the required parameter `alias` when calling `components_put`")
        # verify the required parameter 'sub_alias' is set
        if ('sub_alias' not in params) or (params['sub_alias'] is None):
            raise ValueError("Missing the required parameter `sub_alias` when calling `components_put`")
        # verify the required parameter 'identifier' is set
        if ('identifier' not in params) or (params['identifier'] is None):
            raise ValueError("Missing the required parameter `identifier` when calling `components_put`")
        # verify the required parameter 'component' is set
        if ('component' not in params) or (params['component'] is None):
            raise ValueError("Missing the required parameter `component` when calling `components_put`")


        collection_formats = {}

        resource_path = '/api/v1/Components'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'alias' in params:
            query_params['alias'] = params['alias']
        if 'sub_alias' in params:
            query_params['subAlias'] = params['sub_alias']
        if 'identifier' in params:
            query_params['identifier'] = params['identifier']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'component' in params:
            body_params = params['component']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/json', 'application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='object',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def components_put_by_alias(self, alias, sub_alias, identifier, component, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.components_put_by_alias(alias, sub_alias, identifier, component, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str alias: (required)
        :param str sub_alias: (required)
        :param str identifier: (required)
        :param EnrichedComponentModel component: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.components_put_by_alias_with_http_info(alias, sub_alias, identifier, component, **kwargs)
        else:
            (data) = self.components_put_by_alias_with_http_info(alias, sub_alias, identifier, component, **kwargs)
            return data

    def components_put_by_alias_with_http_info(self, alias, sub_alias, identifier, component, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.components_put_by_alias_with_http_info(alias, sub_alias, identifier, component, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str alias: (required)
        :param str sub_alias: (required)
        :param str identifier: (required)
        :param EnrichedComponentModel component: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['alias', 'sub_alias', 'identifier', 'component']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method components_put_by_alias" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'alias' is set
        if ('alias' not in params) or (params['alias'] is None):
            raise ValueError("Missing the required parameter `alias` when calling `components_put_by_alias`")
        # verify the required parameter 'sub_alias' is set
        if ('sub_alias' not in params) or (params['sub_alias'] is None):
            raise ValueError("Missing the required parameter `sub_alias` when calling `components_put_by_alias`")
        # verify the required parameter 'identifier' is set
        if ('identifier' not in params) or (params['identifier'] is None):
            raise ValueError("Missing the required parameter `identifier` when calling `components_put_by_alias`")
        # verify the required parameter 'component' is set
        if ('component' not in params) or (params['component'] is None):
            raise ValueError("Missing the required parameter `component` when calling `components_put_by_alias`")


        collection_formats = {}

        resource_path = '/api/v1/Components/{alias}/{subAlias}/{identifier}'.replace('{format}', 'json')
        path_params = {}
        if 'alias' in params:
            path_params['alias'] = params['alias']
        if 'sub_alias' in params:
            path_params['subAlias'] = params['sub_alias']
        if 'identifier' in params:
            path_params['identifier'] = params['identifier']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'component' in params:
            body_params = params['component']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/json', 'application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='object',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def components_put_by_component_alias(self, app_alias, version_alias, component_alias, component, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.components_put_by_component_alias(app_alias, version_alias, component_alias, component, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str app_alias: (required)
        :param str version_alias: (required)
        :param str component_alias: (required)
        :param EnrichedComponentModel component: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.components_put_by_component_alias_with_http_info(app_alias, version_alias, component_alias, component, **kwargs)
        else:
            (data) = self.components_put_by_component_alias_with_http_info(app_alias, version_alias, component_alias, component, **kwargs)
            return data

    def components_put_by_component_alias_with_http_info(self, app_alias, version_alias, component_alias, component, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.components_put_by_component_alias_with_http_info(app_alias, version_alias, component_alias, component, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str app_alias: (required)
        :param str version_alias: (required)
        :param str component_alias: (required)
        :param EnrichedComponentModel component: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_alias', 'version_alias', 'component_alias', 'component']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method components_put_by_component_alias" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_alias' is set
        if ('app_alias' not in params) or (params['app_alias'] is None):
            raise ValueError("Missing the required parameter `app_alias` when calling `components_put_by_component_alias`")
        # verify the required parameter 'version_alias' is set
        if ('version_alias' not in params) or (params['version_alias'] is None):
            raise ValueError("Missing the required parameter `version_alias` when calling `components_put_by_component_alias`")
        # verify the required parameter 'component_alias' is set
        if ('component_alias' not in params) or (params['component_alias'] is None):
            raise ValueError("Missing the required parameter `component_alias` when calling `components_put_by_component_alias`")
        # verify the required parameter 'component' is set
        if ('component' not in params) or (params['component'] is None):
            raise ValueError("Missing the required parameter `component` when calling `components_put_by_component_alias`")


        collection_formats = {}

        resource_path = '/api/v1/apps/{appAlias}/versions/{versionAlias}/components/{componentAlias}'.replace('{format}', 'json')
        path_params = {}
        if 'app_alias' in params:
            path_params['appAlias'] = params['app_alias']
        if 'version_alias' in params:
            path_params['versionAlias'] = params['version_alias']
        if 'component_alias' in params:
            path_params['componentAlias'] = params['component_alias']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'component' in params:
            body_params = params['component']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/json', 'application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='object',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def components_put_count_by_identifier(self, alias, sub_alias, identifier, component, app_alias, version_alias, component_alias, count, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.components_put_count_by_identifier(alias, sub_alias, identifier, component, app_alias, version_alias, component_alias, count, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str alias: (required)
        :param str sub_alias: (required)
        :param str identifier: (required)
        :param EnrichedComponentModel component: (required)
        :param str app_alias: (required)
        :param str version_alias: (required)
        :param str component_alias: (required)
        :param str count: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.components_put_count_by_identifier_with_http_info(alias, sub_alias, identifier, component, app_alias, version_alias, component_alias, count, **kwargs)
        else:
            (data) = self.components_put_count_by_identifier_with_http_info(alias, sub_alias, identifier, component, app_alias, version_alias, component_alias, count, **kwargs)
            return data

    def components_put_count_by_identifier_with_http_info(self, alias, sub_alias, identifier, component, app_alias, version_alias, component_alias, count, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.components_put_count_by_identifier_with_http_info(alias, sub_alias, identifier, component, app_alias, version_alias, component_alias, count, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str alias: (required)
        :param str sub_alias: (required)
        :param str identifier: (required)
        :param EnrichedComponentModel component: (required)
        :param str app_alias: (required)
        :param str version_alias: (required)
        :param str component_alias: (required)
        :param str count: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['alias', 'sub_alias', 'identifier', 'component', 'app_alias', 'version_alias', 'component_alias', 'count']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method components_put_count_by_identifier" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'alias' is set
        if ('alias' not in params) or (params['alias'] is None):
            raise ValueError("Missing the required parameter `alias` when calling `components_put_count_by_identifier`")
        # verify the required parameter 'sub_alias' is set
        if ('sub_alias' not in params) or (params['sub_alias'] is None):
            raise ValueError("Missing the required parameter `sub_alias` when calling `components_put_count_by_identifier`")
        # verify the required parameter 'identifier' is set
        if ('identifier' not in params) or (params['identifier'] is None):
            raise ValueError("Missing the required parameter `identifier` when calling `components_put_count_by_identifier`")
        # verify the required parameter 'component' is set
        if ('component' not in params) or (params['component'] is None):
            raise ValueError("Missing the required parameter `component` when calling `components_put_count_by_identifier`")
        # verify the required parameter 'app_alias' is set
        if ('app_alias' not in params) or (params['app_alias'] is None):
            raise ValueError("Missing the required parameter `app_alias` when calling `components_put_count_by_identifier`")
        # verify the required parameter 'version_alias' is set
        if ('version_alias' not in params) or (params['version_alias'] is None):
            raise ValueError("Missing the required parameter `version_alias` when calling `components_put_count_by_identifier`")
        # verify the required parameter 'component_alias' is set
        if ('component_alias' not in params) or (params['component_alias'] is None):
            raise ValueError("Missing the required parameter `component_alias` when calling `components_put_count_by_identifier`")
        # verify the required parameter 'count' is set
        if ('count' not in params) or (params['count'] is None):
            raise ValueError("Missing the required parameter `count` when calling `components_put_count_by_identifier`")


        collection_formats = {}

        resource_path = '/api/v1/Components/{appAlias}/{versionAlias}/{componentAlias}/scale/{count}'.replace('{format}', 'json')
        path_params = {}
        if 'app_alias' in params:
            path_params['appAlias'] = params['app_alias']
        if 'version_alias' in params:
            path_params['versionAlias'] = params['version_alias']
        if 'component_alias' in params:
            path_params['componentAlias'] = params['component_alias']
        if 'count' in params:
            path_params['count'] = params['count']

        query_params = {}
        if 'alias' in params:
            query_params['alias'] = params['alias']
        if 'sub_alias' in params:
            query_params['subAlias'] = params['sub_alias']
        if 'identifier' in params:
            query_params['identifier'] = params['identifier']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'component' in params:
            body_params = params['component']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/json', 'application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='object',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_environment_variables_by_component(self, app_alias, version_alias, component_alias, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_environment_variables_by_component(app_alias, version_alias, component_alias, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str app_alias: (required)
        :param str version_alias: (required)
        :param str component_alias: (required)
        :return: EnvironmentVariableData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_environment_variables_by_component_with_http_info(app_alias, version_alias, component_alias, **kwargs)
        else:
            (data) = self.get_environment_variables_by_component_with_http_info(app_alias, version_alias, component_alias, **kwargs)
            return data

    def get_environment_variables_by_component_with_http_info(self, app_alias, version_alias, component_alias, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_environment_variables_by_component_with_http_info(app_alias, version_alias, component_alias, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str app_alias: (required)
        :param str version_alias: (required)
        :param str component_alias: (required)
        :return: EnvironmentVariableData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_alias', 'version_alias', 'component_alias']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_environment_variables_by_component" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_alias' is set
        if ('app_alias' not in params) or (params['app_alias'] is None):
            raise ValueError("Missing the required parameter `app_alias` when calling `get_environment_variables_by_component`")
        # verify the required parameter 'version_alias' is set
        if ('version_alias' not in params) or (params['version_alias'] is None):
            raise ValueError("Missing the required parameter `version_alias` when calling `get_environment_variables_by_component`")
        # verify the required parameter 'component_alias' is set
        if ('component_alias' not in params) or (params['component_alias'] is None):
            raise ValueError("Missing the required parameter `component_alias` when calling `get_environment_variables_by_component`")


        collection_formats = {}

        resource_path = '/api/v1/apps/{appAlias}/versions/{versionAlias}/components/{componentAlias}/environmentVariables'.replace('{format}', 'json')
        path_params = {}
        if 'app_alias' in params:
            path_params['appAlias'] = params['app_alias']
        if 'version_alias' in params:
            path_params['versionAlias'] = params['version_alias']
        if 'component_alias' in params:
            path_params['componentAlias'] = params['component_alias']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnvironmentVariableData',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_environment_variable(self, app_alias, version_alias, component_alias, environment_variable, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_environment_variable(app_alias, version_alias, component_alias, environment_variable, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str app_alias: (required)
        :param str version_alias: (required)
        :param str component_alias: (required)
        :param EnvironmentVariableData environment_variable: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_environment_variable_with_http_info(app_alias, version_alias, component_alias, environment_variable, **kwargs)
        else:
            (data) = self.update_environment_variable_with_http_info(app_alias, version_alias, component_alias, environment_variable, **kwargs)
            return data

    def update_environment_variable_with_http_info(self, app_alias, version_alias, component_alias, environment_variable, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_environment_variable_with_http_info(app_alias, version_alias, component_alias, environment_variable, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str app_alias: (required)
        :param str version_alias: (required)
        :param str component_alias: (required)
        :param EnvironmentVariableData environment_variable: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_alias', 'version_alias', 'component_alias', 'environment_variable']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_environment_variable" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_alias' is set
        if ('app_alias' not in params) or (params['app_alias'] is None):
            raise ValueError("Missing the required parameter `app_alias` when calling `update_environment_variable`")
        # verify the required parameter 'version_alias' is set
        if ('version_alias' not in params) or (params['version_alias'] is None):
            raise ValueError("Missing the required parameter `version_alias` when calling `update_environment_variable`")
        # verify the required parameter 'component_alias' is set
        if ('component_alias' not in params) or (params['component_alias'] is None):
            raise ValueError("Missing the required parameter `component_alias` when calling `update_environment_variable`")
        # verify the required parameter 'environment_variable' is set
        if ('environment_variable' not in params) or (params['environment_variable'] is None):
            raise ValueError("Missing the required parameter `environment_variable` when calling `update_environment_variable`")


        collection_formats = {}

        resource_path = '/api/v1/apps/{appAlias}/versions/{versionAlias}/components/{componentAlias}/environmentVariables'.replace('{format}', 'json')
        path_params = {}
        if 'app_alias' in params:
            path_params['appAlias'] = params['app_alias']
        if 'version_alias' in params:
            path_params['versionAlias'] = params['version_alias']
        if 'component_alias' in params:
            path_params['componentAlias'] = params['component_alias']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'environment_variable' in params:
            body_params = params['environment_variable']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
