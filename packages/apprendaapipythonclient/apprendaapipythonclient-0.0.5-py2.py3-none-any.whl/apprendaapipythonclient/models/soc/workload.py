# coding: utf-8

"""
    Platform Operations Rest API

    The Platform Operations REST API can be leveraged to customize the Platform Operator experience of managing infrastructure and applications for the Apprenda Platform. This allows some of the functionality of the Platform's System Operations Center (SOC) to be accomplished through a variety of means such as custom-built UX or command-line interfaces.   For more information about the abilities of Platform Operators, see our documentation on the [SOC](/current/SOC).   ##Authentication   Before making a request, you must be authenticated. Learn how to [get authenticated](/restapi/platformops/v1/authentication).   ##Making a Request   ###Prerequisites   * Installed Platform of version 6.5.1 or later (Note that most endpoints are only available in version 6.7.0 and later)    * Authentication token   * If SOC authorization is enabled on your Platform, you must be assigned as an active Platform Operator   ###Request URL   All requests must use **https**.   The URL for every request you make is the Cloud URI of your Platform followed by \"/soc\" and the path structure of the endpoint. For example, if your Cloud URI is apps.apprenda.harp and you want to get the Add-ons for your Platform, the request URI will be **apps.apprenda.harp/soc/api/v1/addons**.   For more information, see our documentation on [using API resources](/restapi/platformops/v1/using-resources) and [finding your Cloud URI](/current/clouduri).   ###Request Headers   Your authenication token must be passed in the header of all requests using the key **ApprendaSessionToken** (not case sensitive).  

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Workload(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, workload_id=None, process_id=None, status=None, developer_name=None, developer_alias=None, application_alias=None, version_alias=None, component_name=None, component_alias=None, node_name=None, application=None, version=None, component=None, node=None, href=None):
        """
        Workload - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'workload_id': 'str',
            'process_id': 'str',
            'status': 'str',
            'developer_name': 'str',
            'developer_alias': 'str',
            'application_alias': 'str',
            'version_alias': 'str',
            'component_name': 'str',
            'component_alias': 'str',
            'node_name': 'str',
            'application': 'ApprendaUtilityRestAPICommonResourcesResourceBase',
            'version': 'ApprendaUtilityRestAPICommonResourcesResourceBase',
            'component': 'ApprendaUtilityRestAPICommonResourcesResourceBase',
            'node': 'ApprendaUtilityRestAPICommonResourcesResourceBase',
            'href': 'str'
        }

        self.attribute_map = {
            'workload_id': 'workloadId',
            'process_id': 'processId',
            'status': 'status',
            'developer_name': 'developerName',
            'developer_alias': 'developerAlias',
            'application_alias': 'applicationAlias',
            'version_alias': 'versionAlias',
            'component_name': 'componentName',
            'component_alias': 'componentAlias',
            'node_name': 'nodeName',
            'application': 'application',
            'version': 'version',
            'component': 'component',
            'node': 'node',
            'href': 'href'
        }

        self._workload_id = workload_id
        self._process_id = process_id
        self._status = status
        self._developer_name = developer_name
        self._developer_alias = developer_alias
        self._application_alias = application_alias
        self._version_alias = version_alias
        self._component_name = component_name
        self._component_alias = component_alias
        self._node_name = node_name
        self._application = application
        self._version = version
        self._component = component
        self._node = node
        self._href = href

    @property
    def workload_id(self):
        """
        Gets the workload_id of this Workload.

        :return: The workload_id of this Workload.
        :rtype: str
        """
        return self._workload_id

    @workload_id.setter
    def workload_id(self, workload_id):
        """
        Sets the workload_id of this Workload.

        :param workload_id: The workload_id of this Workload.
        :type: str
        """

        self._workload_id = workload_id

    @property
    def process_id(self):
        """
        Gets the process_id of this Workload.

        :return: The process_id of this Workload.
        :rtype: str
        """
        return self._process_id

    @process_id.setter
    def process_id(self, process_id):
        """
        Sets the process_id of this Workload.

        :param process_id: The process_id of this Workload.
        :type: str
        """

        self._process_id = process_id

    @property
    def status(self):
        """
        Gets the status of this Workload.

        :return: The status of this Workload.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this Workload.

        :param status: The status of this Workload.
        :type: str
        """
        allowed_values = ["Online", "Offline", "Deployed"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def developer_name(self):
        """
        Gets the developer_name of this Workload.

        :return: The developer_name of this Workload.
        :rtype: str
        """
        return self._developer_name

    @developer_name.setter
    def developer_name(self, developer_name):
        """
        Sets the developer_name of this Workload.

        :param developer_name: The developer_name of this Workload.
        :type: str
        """

        self._developer_name = developer_name

    @property
    def developer_alias(self):
        """
        Gets the developer_alias of this Workload.

        :return: The developer_alias of this Workload.
        :rtype: str
        """
        return self._developer_alias

    @developer_alias.setter
    def developer_alias(self, developer_alias):
        """
        Sets the developer_alias of this Workload.

        :param developer_alias: The developer_alias of this Workload.
        :type: str
        """

        self._developer_alias = developer_alias

    @property
    def application_alias(self):
        """
        Gets the application_alias of this Workload.

        :return: The application_alias of this Workload.
        :rtype: str
        """
        return self._application_alias

    @application_alias.setter
    def application_alias(self, application_alias):
        """
        Sets the application_alias of this Workload.

        :param application_alias: The application_alias of this Workload.
        :type: str
        """

        self._application_alias = application_alias

    @property
    def version_alias(self):
        """
        Gets the version_alias of this Workload.

        :return: The version_alias of this Workload.
        :rtype: str
        """
        return self._version_alias

    @version_alias.setter
    def version_alias(self, version_alias):
        """
        Sets the version_alias of this Workload.

        :param version_alias: The version_alias of this Workload.
        :type: str
        """

        self._version_alias = version_alias

    @property
    def component_name(self):
        """
        Gets the component_name of this Workload.

        :return: The component_name of this Workload.
        :rtype: str
        """
        return self._component_name

    @component_name.setter
    def component_name(self, component_name):
        """
        Sets the component_name of this Workload.

        :param component_name: The component_name of this Workload.
        :type: str
        """

        self._component_name = component_name

    @property
    def component_alias(self):
        """
        Gets the component_alias of this Workload.

        :return: The component_alias of this Workload.
        :rtype: str
        """
        return self._component_alias

    @component_alias.setter
    def component_alias(self, component_alias):
        """
        Sets the component_alias of this Workload.

        :param component_alias: The component_alias of this Workload.
        :type: str
        """

        self._component_alias = component_alias

    @property
    def node_name(self):
        """
        Gets the node_name of this Workload.

        :return: The node_name of this Workload.
        :rtype: str
        """
        return self._node_name

    @node_name.setter
    def node_name(self, node_name):
        """
        Sets the node_name of this Workload.

        :param node_name: The node_name of this Workload.
        :type: str
        """

        self._node_name = node_name

    @property
    def application(self):
        """
        Gets the application of this Workload.

        :return: The application of this Workload.
        :rtype: ApprendaUtilityRestAPICommonResourcesResourceBase
        """
        return self._application

    @application.setter
    def application(self, application):
        """
        Sets the application of this Workload.

        :param application: The application of this Workload.
        :type: ApprendaUtilityRestAPICommonResourcesResourceBase
        """

        self._application = application

    @property
    def version(self):
        """
        Gets the version of this Workload.

        :return: The version of this Workload.
        :rtype: ApprendaUtilityRestAPICommonResourcesResourceBase
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this Workload.

        :param version: The version of this Workload.
        :type: ApprendaUtilityRestAPICommonResourcesResourceBase
        """

        self._version = version

    @property
    def component(self):
        """
        Gets the component of this Workload.

        :return: The component of this Workload.
        :rtype: ApprendaUtilityRestAPICommonResourcesResourceBase
        """
        return self._component

    @component.setter
    def component(self, component):
        """
        Sets the component of this Workload.

        :param component: The component of this Workload.
        :type: ApprendaUtilityRestAPICommonResourcesResourceBase
        """

        self._component = component

    @property
    def node(self):
        """
        Gets the node of this Workload.

        :return: The node of this Workload.
        :rtype: ApprendaUtilityRestAPICommonResourcesResourceBase
        """
        return self._node

    @node.setter
    def node(self, node):
        """
        Sets the node of this Workload.

        :param node: The node of this Workload.
        :type: ApprendaUtilityRestAPICommonResourcesResourceBase
        """

        self._node = node

    @property
    def href(self):
        """
        Gets the href of this Workload.

        :return: The href of this Workload.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """
        Sets the href of this Workload.

        :param href: The href of this Workload.
        :type: str
        """

        self._href = href

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Workload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
