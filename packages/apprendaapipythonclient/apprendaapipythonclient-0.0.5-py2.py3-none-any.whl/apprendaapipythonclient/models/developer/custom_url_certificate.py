# coding: utf-8

"""
    Apprenda.DeveloperPortal.Web

    The Application Management REST API can be leveraged to customize the Developer experience of deploying and managing applications  on the Apprenda Platform. This allows some of the functionality of the Platform's [Developer Portal](/current/developer-portal)to be accomplished through a variety of means such as custom-built UX or command-line interfaces.     ##Authentication    Before making a request, you must be authenticated. Learn how to [get authenticated](/restapi/appmanagement/v1/authentication).    ##Making a Request    ###Prerequisites    * Installed Platform of version 4.5.0 or later     * Authentication token     * To use this API you must be part of a [Development Team or Tenant](/current/create-users) and have an [active subscription](/current/dev-portal-setup#create) to Developer Portal    ###Request URL    All requests must use **https**.    The URL for every request you make is the Cloud URI of your Platform followed by \"/developer\" and the path structure of the endpoint. For example, if your Cloud URI is apps.apprenda.harp and you want to get the Add-ons for your Platform, the request URI will be **apps.apprenda.harp/developer/api/v1/addons**.      For more information, see our documentation on [using API resources](/restapi/appmanagement/v1/resources) and [finding your Cloud URI](/current/clouduri).

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CustomUrlCertificate(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, app_alias=None, version=None, serial_number=None, issuer=None, valid_after=None, valid_before=None, subject=None, subject_alt_names=None, href=None):
        """
        CustomUrlCertificate - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'app_alias': 'str',
            'version': 'int',
            'serial_number': 'str',
            'issuer': 'str',
            'valid_after': 'datetime',
            'valid_before': 'datetime',
            'subject': 'str',
            'subject_alt_names': 'str',
            'href': 'str'
        }

        self.attribute_map = {
            'app_alias': 'appAlias',
            'version': 'version',
            'serial_number': 'serialNumber',
            'issuer': 'issuer',
            'valid_after': 'validAfter',
            'valid_before': 'validBefore',
            'subject': 'subject',
            'subject_alt_names': 'subjectAltNames',
            'href': 'href'
        }

        self._app_alias = app_alias
        self._version = version
        self._serial_number = serial_number
        self._issuer = issuer
        self._valid_after = valid_after
        self._valid_before = valid_before
        self._subject = subject
        self._subject_alt_names = subject_alt_names
        self._href = href

    @property
    def app_alias(self):
        """
        Gets the app_alias of this CustomUrlCertificate.

        :return: The app_alias of this CustomUrlCertificate.
        :rtype: str
        """
        return self._app_alias

    @app_alias.setter
    def app_alias(self, app_alias):
        """
        Sets the app_alias of this CustomUrlCertificate.

        :param app_alias: The app_alias of this CustomUrlCertificate.
        :type: str
        """

        self._app_alias = app_alias

    @property
    def version(self):
        """
        Gets the version of this CustomUrlCertificate.

        :return: The version of this CustomUrlCertificate.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this CustomUrlCertificate.

        :param version: The version of this CustomUrlCertificate.
        :type: int
        """

        self._version = version

    @property
    def serial_number(self):
        """
        Gets the serial_number of this CustomUrlCertificate.

        :return: The serial_number of this CustomUrlCertificate.
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """
        Sets the serial_number of this CustomUrlCertificate.

        :param serial_number: The serial_number of this CustomUrlCertificate.
        :type: str
        """

        self._serial_number = serial_number

    @property
    def issuer(self):
        """
        Gets the issuer of this CustomUrlCertificate.

        :return: The issuer of this CustomUrlCertificate.
        :rtype: str
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """
        Sets the issuer of this CustomUrlCertificate.

        :param issuer: The issuer of this CustomUrlCertificate.
        :type: str
        """

        self._issuer = issuer

    @property
    def valid_after(self):
        """
        Gets the valid_after of this CustomUrlCertificate.

        :return: The valid_after of this CustomUrlCertificate.
        :rtype: datetime
        """
        return self._valid_after

    @valid_after.setter
    def valid_after(self, valid_after):
        """
        Sets the valid_after of this CustomUrlCertificate.

        :param valid_after: The valid_after of this CustomUrlCertificate.
        :type: datetime
        """

        self._valid_after = valid_after

    @property
    def valid_before(self):
        """
        Gets the valid_before of this CustomUrlCertificate.

        :return: The valid_before of this CustomUrlCertificate.
        :rtype: datetime
        """
        return self._valid_before

    @valid_before.setter
    def valid_before(self, valid_before):
        """
        Sets the valid_before of this CustomUrlCertificate.

        :param valid_before: The valid_before of this CustomUrlCertificate.
        :type: datetime
        """

        self._valid_before = valid_before

    @property
    def subject(self):
        """
        Gets the subject of this CustomUrlCertificate.

        :return: The subject of this CustomUrlCertificate.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """
        Sets the subject of this CustomUrlCertificate.

        :param subject: The subject of this CustomUrlCertificate.
        :type: str
        """

        self._subject = subject

    @property
    def subject_alt_names(self):
        """
        Gets the subject_alt_names of this CustomUrlCertificate.

        :return: The subject_alt_names of this CustomUrlCertificate.
        :rtype: str
        """
        return self._subject_alt_names

    @subject_alt_names.setter
    def subject_alt_names(self, subject_alt_names):
        """
        Sets the subject_alt_names of this CustomUrlCertificate.

        :param subject_alt_names: The subject_alt_names of this CustomUrlCertificate.
        :type: str
        """

        self._subject_alt_names = subject_alt_names

    @property
    def href(self):
        """
        Gets the href of this CustomUrlCertificate.

        :return: The href of this CustomUrlCertificate.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """
        Sets the href of this CustomUrlCertificate.

        :param href: The href of this CustomUrlCertificate.
        :type: str
        """

        self._href = href

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CustomUrlCertificate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
