# coding: utf-8

"""
    Platform Operations Rest API

    The Platform Operations REST API can be leveraged to customize the Platform Operator experience of managing infrastructure and applications for the Apprenda Platform. This allows some of the functionality of the Platform's System Operations Center (SOC) to be accomplished through a variety of means such as custom-built UX or command-line interfaces.   For more information about the abilities of Platform Operators, see our documentation on the [SOC](/current/SOC).   ##Authentication   Before making a request, you must be authenticated. Learn how to [get authenticated](/restapi/platformops/v1/authentication).   ##Making a Request   ###Prerequisites   * Installed Platform of version 6.5.1 or later (Note that most endpoints are only available in version 6.7.0 and later)    * Authentication token   * If SOC authorization is enabled on your Platform, you must be assigned as an active Platform Operator   ###Request URL   All requests must use **https**.   The URL for every request you make is the Cloud URI of your Platform followed by \"/soc\" and the path structure of the endpoint. For example, if your Cloud URI is apps.apprenda.harp and you want to get the Add-ons for your Platform, the request URI will be **apps.apprenda.harp/soc/api/v1/addons**.   For more information, see our documentation on [using API resources](/restapi/platformops/v1/using-resources) and [finding your Cloud URI](/current/clouduri).   ###Request Headers   Your authenication token must be passed in the header of all requests using the key **ApprendaSessionToken** (not case sensitive).  

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

# python 2 and python 3 compatibility library
from six import iteritems

from apprendaapipythonclient.configuration import Configuration
from apprendaapipythonclient.api_client import ApiClient


class ClustersApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def api_v1_clusters_get(self, **kwargs):
        """
        Get all clusters
        **Requires Platform version 7.0.0 or later.**   Returns a list of all Kubernetes clusters added to the Platform. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_clusters_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: UnpagedResourceBaseCluster
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.api_v1_clusters_get_with_http_info(**kwargs)
        else:
            (data) = self.api_v1_clusters_get_with_http_info(**kwargs)
            return data

    def api_v1_clusters_get_with_http_info(self, **kwargs):
        """
        Get all clusters
        **Requires Platform version 7.0.0 or later.**   Returns a list of all Kubernetes clusters added to the Platform. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_clusters_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: UnpagedResourceBaseCluster
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_clusters_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        resource_path = '/api/v1/clusters'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='UnpagedResourceBaseCluster',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def clusters_create(self, cluster, **kwargs):
        """
        Add new cluster
        **Requires Platform version 7.0.0 or later.**   Adds an exisiting Kubernetes cluster to the Platform.  Note that only one cluster can be added per cloud.   Validation is run on the cluster to make sure it meets the minimum requirements for being part of the Platform. The request will wait for the validation to complete and return a report on how the cluster performed. If some validation steps fail, the cluster will still be added to the Platform, but the errors need to be corrected before you can use the Platform to manage the cluster.  
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.clusters_create(cluster, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Cluster cluster: Required. Cluster to add (required)
        :return: ClusterReportCard
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.clusters_create_with_http_info(cluster, **kwargs)
        else:
            (data) = self.clusters_create_with_http_info(cluster, **kwargs)
            return data

    def clusters_create_with_http_info(self, cluster, **kwargs):
        """
        Add new cluster
        **Requires Platform version 7.0.0 or later.**   Adds an exisiting Kubernetes cluster to the Platform.  Note that only one cluster can be added per cloud.   Validation is run on the cluster to make sure it meets the minimum requirements for being part of the Platform. The request will wait for the validation to complete and return a report on how the cluster performed. If some validation steps fail, the cluster will still be added to the Platform, but the errors need to be corrected before you can use the Platform to manage the cluster.  
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.clusters_create_with_http_info(cluster, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Cluster cluster: Required. Cluster to add (required)
        :return: ClusterReportCard
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method clusters_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster' is set
        if ('cluster' not in params) or (params['cluster'] is None):
            raise ValueError("Missing the required parameter `cluster` when calling `clusters_create`")


        collection_formats = {}

        resource_path = '/api/v1/clusters'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'cluster' in params:
            body_params = params['cluster']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ClusterReportCard',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def clusters_delete_by_name(self, name, **kwargs):
        """
        Remove cluster
        **Requires Platform version 7.0.0 or later.**    Removes the specified Kubernetes cluster from the Platform. The cluster will not be affected, but you will no longer be able to access it from the Platform.  
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.clusters_delete_by_name(name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: Required. Name of the cluster (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.clusters_delete_by_name_with_http_info(name, **kwargs)
        else:
            (data) = self.clusters_delete_by_name_with_http_info(name, **kwargs)
            return data

    def clusters_delete_by_name_with_http_info(self, name, **kwargs):
        """
        Remove cluster
        **Requires Platform version 7.0.0 or later.**    Removes the specified Kubernetes cluster from the Platform. The cluster will not be affected, but you will no longer be able to access it from the Platform.  
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.clusters_delete_by_name_with_http_info(name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: Required. Name of the cluster (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method clusters_delete_by_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `clusters_delete_by_name`")


        collection_formats = {}

        resource_path = '/api/v1/clusters/{name}'.replace('{format}', 'json')
        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def clusters_get_by_name(self, name, **kwargs):
        """
        Get a cluster
        **Requires Platform version 7.0.0 or later.**   Returns information about the specified cluster.  
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.clusters_get_by_name(name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: Required. Name of the cluster (required)
        :return: Cluster
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.clusters_get_by_name_with_http_info(name, **kwargs)
        else:
            (data) = self.clusters_get_by_name_with_http_info(name, **kwargs)
            return data

    def clusters_get_by_name_with_http_info(self, name, **kwargs):
        """
        Get a cluster
        **Requires Platform version 7.0.0 or later.**   Returns information about the specified cluster.  
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.clusters_get_by_name_with_http_info(name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: Required. Name of the cluster (required)
        :return: Cluster
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method clusters_get_by_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `clusters_get_by_name`")


        collection_formats = {}

        resource_path = '/api/v1/clusters/{name}'.replace('{format}', 'json')
        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Cluster',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def clusters_update_by_name(self, name, cluster, **kwargs):
        """
        Update a cluster
        **Requires Platform version 7.0.0 or later.**    Updates the specified Kubernetes cluster with the information provided. Making a request to this endpoint will update all fields. You should always pass all input values in the body of the request, because any value that is not provided will be updated to the default value. The only exception to this is the password field. You can pass a value of null for that field and it will not be updated.     Validation is run on the cluster to make sure it meets the minimum requirements for being part of the Platform. The request will wait for the validation to complete and return a report on how the cluster performed. If some validation steps fail, the cluster information will still be updated, but the errors need to be corrected before you can use the Platform to manage the cluster.  
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.clusters_update_by_name(name, cluster, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: Required. Original name of the cluster (required)
        :param Cluster cluster: Required. Cluster to add (required)
        :return: ClusterReportCard
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.clusters_update_by_name_with_http_info(name, cluster, **kwargs)
        else:
            (data) = self.clusters_update_by_name_with_http_info(name, cluster, **kwargs)
            return data

    def clusters_update_by_name_with_http_info(self, name, cluster, **kwargs):
        """
        Update a cluster
        **Requires Platform version 7.0.0 or later.**    Updates the specified Kubernetes cluster with the information provided. Making a request to this endpoint will update all fields. You should always pass all input values in the body of the request, because any value that is not provided will be updated to the default value. The only exception to this is the password field. You can pass a value of null for that field and it will not be updated.     Validation is run on the cluster to make sure it meets the minimum requirements for being part of the Platform. The request will wait for the validation to complete and return a report on how the cluster performed. If some validation steps fail, the cluster information will still be updated, but the errors need to be corrected before you can use the Platform to manage the cluster.  
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.clusters_update_by_name_with_http_info(name, cluster, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: Required. Original name of the cluster (required)
        :param Cluster cluster: Required. Cluster to add (required)
        :return: ClusterReportCard
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'cluster']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method clusters_update_by_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `clusters_update_by_name`")
        # verify the required parameter 'cluster' is set
        if ('cluster' not in params) or (params['cluster'] is None):
            raise ValueError("Missing the required parameter `cluster` when calling `clusters_update_by_name`")


        collection_formats = {}

        resource_path = '/api/v1/clusters/{name}'.replace('{format}', 'json')
        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'cluster' in params:
            body_params = params['cluster']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ClusterReportCard',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def clusters_validate(self, name, **kwargs):
        """
        Validate a cluster
        **Requires Platform version 7.0.0 or later.**   Runs validation against the specified Kubernetes cluster. Validation checks the cluster for a valid configuration and minimum requrements to run as part of the Platform. All clusters must pass validation before the Platform can be used to manage it.    The request will return a report on how the cluster performed. Errors need to be corrected before you can use the Platform to manage the cluster. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.clusters_validate(name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: Required. Name of the cluster (required)
        :return: ClusterReportCard
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.clusters_validate_with_http_info(name, **kwargs)
        else:
            (data) = self.clusters_validate_with_http_info(name, **kwargs)
            return data

    def clusters_validate_with_http_info(self, name, **kwargs):
        """
        Validate a cluster
        **Requires Platform version 7.0.0 or later.**   Runs validation against the specified Kubernetes cluster. Validation checks the cluster for a valid configuration and minimum requrements to run as part of the Platform. All clusters must pass validation before the Platform can be used to manage it.    The request will return a report on how the cluster performed. Errors need to be corrected before you can use the Platform to manage the cluster. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.clusters_validate_with_http_info(name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: Required. Name of the cluster (required)
        :return: ClusterReportCard
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method clusters_validate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `clusters_validate`")


        collection_formats = {}

        resource_path = '/api/v1/clusters/{name}/validate'.replace('{format}', 'json')
        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ClusterReportCard',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
