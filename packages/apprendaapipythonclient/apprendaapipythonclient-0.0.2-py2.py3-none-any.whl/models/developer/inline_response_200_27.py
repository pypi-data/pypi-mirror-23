# coding: utf-8

"""
    Apprenda.DeveloperPortal.Web

    The Application Management REST API can be leveraged to customize the Developer experience of deploying and managing applications  on the Apprenda Platform. This allows some of the functionality of the Platform's [Developer Portal](/current/developer-portal)to be accomplished through a variety of means such as custom-built UX or command-line interfaces.     ##Authentication    Before making a request, you must be authenticated. Learn how to [get authenticated](/restapi/appmanagement/v1/authentication).    ##Making a Request    ###Prerequisites    * Installed Platform of version 4.5.0 or later     * Authentication token     * To use this API you must be part of a [Development Team or Tenant](/current/create-users) and have an [active subscription](/current/dev-portal-setup#create) to Developer Portal    ###Request URL    All requests must use **https**.    The URL for every request you make is the Cloud URI of your Platform followed by \"/developer\" and the path structure of the endpoint. For example, if your Cloud URI is apps.apprenda.harp and you want to get the Add-ons for your Platform, the request URI will be **apps.apprenda.harp/developer/api/v1/addons**.      For more information, see our documentation on [using API resources](/restapi/appmanagement/v1/resources) and [finding your Cloud URI](/current/clouduri).

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class InlineResponse20027(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, description=None, memory_limit=None, cpu_limit=None, cpu_cores=None, cost=None, applies_to_services=None, applies_to_databases=None, applies_to_user_interfaces=None, applies_to_wars=None, applies_to_linux_services=None, name=None, href=None):
        """
        InlineResponse20027 - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'description': 'str',
            'memory_limit': 'int',
            'cpu_limit': 'int',
            'cpu_cores': 'int',
            'cost': 'str',
            'applies_to_services': 'bool',
            'applies_to_databases': 'bool',
            'applies_to_user_interfaces': 'bool',
            'applies_to_wars': 'bool',
            'applies_to_linux_services': 'bool',
            'name': 'str',
            'href': 'str'
        }

        self.attribute_map = {
            'description': 'description',
            'memory_limit': 'memoryLimit',
            'cpu_limit': 'cpuLimit',
            'cpu_cores': 'cpuCores',
            'cost': 'cost',
            'applies_to_services': 'appliesToServices',
            'applies_to_databases': 'appliesToDatabases',
            'applies_to_user_interfaces': 'appliesToUserInterfaces',
            'applies_to_wars': 'appliesToWars',
            'applies_to_linux_services': 'appliesToLinuxServices',
            'name': 'name',
            'href': 'href'
        }

        self._description = description
        self._memory_limit = memory_limit
        self._cpu_limit = cpu_limit
        self._cpu_cores = cpu_cores
        self._cost = cost
        self._applies_to_services = applies_to_services
        self._applies_to_databases = applies_to_databases
        self._applies_to_user_interfaces = applies_to_user_interfaces
        self._applies_to_wars = applies_to_wars
        self._applies_to_linux_services = applies_to_linux_services
        self._name = name
        self._href = href

    @property
    def description(self):
        """
        Gets the description of this InlineResponse20027.

        :return: The description of this InlineResponse20027.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this InlineResponse20027.

        :param description: The description of this InlineResponse20027.
        :type: str
        """

        self._description = description

    @property
    def memory_limit(self):
        """
        Gets the memory_limit of this InlineResponse20027.

        :return: The memory_limit of this InlineResponse20027.
        :rtype: int
        """
        return self._memory_limit

    @memory_limit.setter
    def memory_limit(self, memory_limit):
        """
        Sets the memory_limit of this InlineResponse20027.

        :param memory_limit: The memory_limit of this InlineResponse20027.
        :type: int
        """

        self._memory_limit = memory_limit

    @property
    def cpu_limit(self):
        """
        Gets the cpu_limit of this InlineResponse20027.

        :return: The cpu_limit of this InlineResponse20027.
        :rtype: int
        """
        return self._cpu_limit

    @cpu_limit.setter
    def cpu_limit(self, cpu_limit):
        """
        Sets the cpu_limit of this InlineResponse20027.

        :param cpu_limit: The cpu_limit of this InlineResponse20027.
        :type: int
        """

        self._cpu_limit = cpu_limit

    @property
    def cpu_cores(self):
        """
        Gets the cpu_cores of this InlineResponse20027.

        :return: The cpu_cores of this InlineResponse20027.
        :rtype: int
        """
        return self._cpu_cores

    @cpu_cores.setter
    def cpu_cores(self, cpu_cores):
        """
        Sets the cpu_cores of this InlineResponse20027.

        :param cpu_cores: The cpu_cores of this InlineResponse20027.
        :type: int
        """

        self._cpu_cores = cpu_cores

    @property
    def cost(self):
        """
        Gets the cost of this InlineResponse20027.

        :return: The cost of this InlineResponse20027.
        :rtype: str
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """
        Sets the cost of this InlineResponse20027.

        :param cost: The cost of this InlineResponse20027.
        :type: str
        """

        self._cost = cost

    @property
    def applies_to_services(self):
        """
        Gets the applies_to_services of this InlineResponse20027.

        :return: The applies_to_services of this InlineResponse20027.
        :rtype: bool
        """
        return self._applies_to_services

    @applies_to_services.setter
    def applies_to_services(self, applies_to_services):
        """
        Sets the applies_to_services of this InlineResponse20027.

        :param applies_to_services: The applies_to_services of this InlineResponse20027.
        :type: bool
        """

        self._applies_to_services = applies_to_services

    @property
    def applies_to_databases(self):
        """
        Gets the applies_to_databases of this InlineResponse20027.

        :return: The applies_to_databases of this InlineResponse20027.
        :rtype: bool
        """
        return self._applies_to_databases

    @applies_to_databases.setter
    def applies_to_databases(self, applies_to_databases):
        """
        Sets the applies_to_databases of this InlineResponse20027.

        :param applies_to_databases: The applies_to_databases of this InlineResponse20027.
        :type: bool
        """

        self._applies_to_databases = applies_to_databases

    @property
    def applies_to_user_interfaces(self):
        """
        Gets the applies_to_user_interfaces of this InlineResponse20027.

        :return: The applies_to_user_interfaces of this InlineResponse20027.
        :rtype: bool
        """
        return self._applies_to_user_interfaces

    @applies_to_user_interfaces.setter
    def applies_to_user_interfaces(self, applies_to_user_interfaces):
        """
        Sets the applies_to_user_interfaces of this InlineResponse20027.

        :param applies_to_user_interfaces: The applies_to_user_interfaces of this InlineResponse20027.
        :type: bool
        """

        self._applies_to_user_interfaces = applies_to_user_interfaces

    @property
    def applies_to_wars(self):
        """
        Gets the applies_to_wars of this InlineResponse20027.

        :return: The applies_to_wars of this InlineResponse20027.
        :rtype: bool
        """
        return self._applies_to_wars

    @applies_to_wars.setter
    def applies_to_wars(self, applies_to_wars):
        """
        Sets the applies_to_wars of this InlineResponse20027.

        :param applies_to_wars: The applies_to_wars of this InlineResponse20027.
        :type: bool
        """

        self._applies_to_wars = applies_to_wars

    @property
    def applies_to_linux_services(self):
        """
        Gets the applies_to_linux_services of this InlineResponse20027.

        :return: The applies_to_linux_services of this InlineResponse20027.
        :rtype: bool
        """
        return self._applies_to_linux_services

    @applies_to_linux_services.setter
    def applies_to_linux_services(self, applies_to_linux_services):
        """
        Sets the applies_to_linux_services of this InlineResponse20027.

        :param applies_to_linux_services: The applies_to_linux_services of this InlineResponse20027.
        :type: bool
        """

        self._applies_to_linux_services = applies_to_linux_services

    @property
    def name(self):
        """
        Gets the name of this InlineResponse20027.

        :return: The name of this InlineResponse20027.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this InlineResponse20027.

        :param name: The name of this InlineResponse20027.
        :type: str
        """

        self._name = name

    @property
    def href(self):
        """
        Gets the href of this InlineResponse20027.

        :return: The href of this InlineResponse20027.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """
        Sets the href of this InlineResponse20027.

        :param href: The href of this InlineResponse20027.
        :type: str
        """

        self._href = href

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, InlineResponse20027):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
