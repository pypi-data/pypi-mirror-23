# coding: utf-8

"""
    Apprenda.DeveloperPortal.Web

    The Application Management REST API can be leveraged to customize the Developer experience of deploying and managing applications  on the Apprenda Platform. This allows some of the functionality of the Platform's [Developer Portal](/current/developer-portal)to be accomplished through a variety of means such as custom-built UX or command-line interfaces.     ##Authentication    Before making a request, you must be authenticated. Learn how to [get authenticated](/restapi/appmanagement/v1/authentication).    ##Making a Request    ###Prerequisites    * Installed Platform of version 4.5.0 or later     * Authentication token     * To use this API you must be part of a [Development Team or Tenant](/current/create-users) and have an [active subscription](/current/dev-portal-setup#create) to Developer Portal    ###Request URL    All requests must use **https**.    The URL for every request you make is the Cloud URI of your Platform followed by \"/developer\" and the path structure of the endpoint. For example, if your Cloud URI is apps.apprenda.harp and you want to get the Add-ons for your Platform, the request URI will be **apps.apprenda.harp/developer/api/v1/addons**.      For more information, see our documentation on [using API resources](/restapi/appmanagement/v1/resources) and [finding your Cloud URI](/current/clouduri).

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class StorageQuota(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, description=None, unit_size=None, max_units=None, cost=None, is_unlimited=None, name=None, href=None):
        """
        StorageQuota - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'description': 'str',
            'unit_size': 'int',
            'max_units': 'int',
            'cost': 'str',
            'is_unlimited': 'bool',
            'name': 'str',
            'href': 'str'
        }

        self.attribute_map = {
            'description': 'description',
            'unit_size': 'unitSize',
            'max_units': 'maxUnits',
            'cost': 'cost',
            'is_unlimited': 'isUnlimited',
            'name': 'name',
            'href': 'href'
        }

        self._description = description
        self._unit_size = unit_size
        self._max_units = max_units
        self._cost = cost
        self._is_unlimited = is_unlimited
        self._name = name
        self._href = href

    @property
    def description(self):
        """
        Gets the description of this StorageQuota.

        :return: The description of this StorageQuota.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this StorageQuota.

        :param description: The description of this StorageQuota.
        :type: str
        """

        self._description = description

    @property
    def unit_size(self):
        """
        Gets the unit_size of this StorageQuota.

        :return: The unit_size of this StorageQuota.
        :rtype: int
        """
        return self._unit_size

    @unit_size.setter
    def unit_size(self, unit_size):
        """
        Sets the unit_size of this StorageQuota.

        :param unit_size: The unit_size of this StorageQuota.
        :type: int
        """

        self._unit_size = unit_size

    @property
    def max_units(self):
        """
        Gets the max_units of this StorageQuota.

        :return: The max_units of this StorageQuota.
        :rtype: int
        """
        return self._max_units

    @max_units.setter
    def max_units(self, max_units):
        """
        Sets the max_units of this StorageQuota.

        :param max_units: The max_units of this StorageQuota.
        :type: int
        """

        self._max_units = max_units

    @property
    def cost(self):
        """
        Gets the cost of this StorageQuota.

        :return: The cost of this StorageQuota.
        :rtype: str
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """
        Sets the cost of this StorageQuota.

        :param cost: The cost of this StorageQuota.
        :type: str
        """

        self._cost = cost

    @property
    def is_unlimited(self):
        """
        Gets the is_unlimited of this StorageQuota.

        :return: The is_unlimited of this StorageQuota.
        :rtype: bool
        """
        return self._is_unlimited

    @is_unlimited.setter
    def is_unlimited(self, is_unlimited):
        """
        Sets the is_unlimited of this StorageQuota.

        :param is_unlimited: The is_unlimited of this StorageQuota.
        :type: bool
        """

        self._is_unlimited = is_unlimited

    @property
    def name(self):
        """
        Gets the name of this StorageQuota.

        :return: The name of this StorageQuota.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this StorageQuota.

        :param name: The name of this StorageQuota.
        :type: str
        """

        self._name = name

    @property
    def href(self):
        """
        Gets the href of this StorageQuota.

        :return: The href of this StorageQuota.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """
        Sets the href of this StorageQuota.

        :param href: The href of this StorageQuota.
        :type: str
        """

        self._href = href

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, StorageQuota):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
