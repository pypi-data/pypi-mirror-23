# coding: utf-8

"""
    Apprenda.DeveloperPortal.Web

    The Application Management REST API can be leveraged to customize the Developer experience of deploying and managing applications  on the Apprenda Platform. This allows some of the functionality of the Platform's [Developer Portal](/current/developer-portal)to be accomplished through a variety of means such as custom-built UX or command-line interfaces.     ##Authentication    Before making a request, you must be authenticated. Learn how to [get authenticated](/restapi/appmanagement/v1/authentication).    ##Making a Request    ###Prerequisites    * Installed Platform of version 4.5.0 or later     * Authentication token     * To use this API you must be part of a [Development Team or Tenant](/current/create-users) and have an [active subscription](/current/dev-portal-setup#create) to Developer Portal    ###Request URL    All requests must use **https**.    The URL for every request you make is the Cloud URI of your Platform followed by \"/developer\" and the path structure of the endpoint. For example, if your Cloud URI is apps.apprenda.harp and you want to get the Add-ons for your Platform, the request URI will be **apps.apprenda.harp/developer/api/v1/addons**.      For more information, see our documentation on [using API resources](/restapi/appmanagement/v1/resources) and [finding your Cloud URI](/current/clouduri).

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class InlineResponse2002Items(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, application=None, version=None, utilized=None, group=None, description=None, locator=None, label=None, plan=None, status=None, href=None):
        """
        InlineResponse2002Items - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'application': 'InlineResponse200Roles',
            'version': 'InlineResponse200Roles',
            'utilized': 'bool',
            'group': 'str',
            'description': 'str',
            'locator': 'str',
            'label': 'str',
            'plan': 'InlineResponse200Roles',
            'status': 'str',
            'href': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'application': 'application',
            'version': 'version',
            'utilized': 'utilized',
            'group': 'group',
            'description': 'description',
            'locator': 'locator',
            'label': 'label',
            'plan': 'plan',
            'status': 'status',
            'href': 'href'
        }

        self._id = id
        self._application = application
        self._version = version
        self._utilized = utilized
        self._group = group
        self._description = description
        self._locator = locator
        self._label = label
        self._plan = plan
        self._status = status
        self._href = href

    @property
    def id(self):
        """
        Gets the id of this InlineResponse2002Items.

        :return: The id of this InlineResponse2002Items.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this InlineResponse2002Items.

        :param id: The id of this InlineResponse2002Items.
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def application(self):
        """
        Gets the application of this InlineResponse2002Items.

        :return: The application of this InlineResponse2002Items.
        :rtype: InlineResponse200Roles
        """
        return self._application

    @application.setter
    def application(self, application):
        """
        Sets the application of this InlineResponse2002Items.

        :param application: The application of this InlineResponse2002Items.
        :type: InlineResponse200Roles
        """

        self._application = application

    @property
    def version(self):
        """
        Gets the version of this InlineResponse2002Items.

        :return: The version of this InlineResponse2002Items.
        :rtype: InlineResponse200Roles
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this InlineResponse2002Items.

        :param version: The version of this InlineResponse2002Items.
        :type: InlineResponse200Roles
        """

        self._version = version

    @property
    def utilized(self):
        """
        Gets the utilized of this InlineResponse2002Items.

        :return: The utilized of this InlineResponse2002Items.
        :rtype: bool
        """
        return self._utilized

    @utilized.setter
    def utilized(self, utilized):
        """
        Sets the utilized of this InlineResponse2002Items.

        :param utilized: The utilized of this InlineResponse2002Items.
        :type: bool
        """

        self._utilized = utilized

    @property
    def group(self):
        """
        Gets the group of this InlineResponse2002Items.

        :return: The group of this InlineResponse2002Items.
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """
        Sets the group of this InlineResponse2002Items.

        :param group: The group of this InlineResponse2002Items.
        :type: str
        """

        self._group = group

    @property
    def description(self):
        """
        Gets the description of this InlineResponse2002Items.

        :return: The description of this InlineResponse2002Items.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this InlineResponse2002Items.

        :param description: The description of this InlineResponse2002Items.
        :type: str
        """

        self._description = description

    @property
    def locator(self):
        """
        Gets the locator of this InlineResponse2002Items.

        :return: The locator of this InlineResponse2002Items.
        :rtype: str
        """
        return self._locator

    @locator.setter
    def locator(self, locator):
        """
        Sets the locator of this InlineResponse2002Items.

        :param locator: The locator of this InlineResponse2002Items.
        :type: str
        """

        self._locator = locator

    @property
    def label(self):
        """
        Gets the label of this InlineResponse2002Items.

        :return: The label of this InlineResponse2002Items.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """
        Sets the label of this InlineResponse2002Items.

        :param label: The label of this InlineResponse2002Items.
        :type: str
        """

        self._label = label

    @property
    def plan(self):
        """
        Gets the plan of this InlineResponse2002Items.

        :return: The plan of this InlineResponse2002Items.
        :rtype: InlineResponse200Roles
        """
        return self._plan

    @plan.setter
    def plan(self, plan):
        """
        Sets the plan of this InlineResponse2002Items.

        :param plan: The plan of this InlineResponse2002Items.
        :type: InlineResponse200Roles
        """

        self._plan = plan

    @property
    def status(self):
        """
        Gets the status of this InlineResponse2002Items.

        :return: The status of this InlineResponse2002Items.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this InlineResponse2002Items.

        :param status: The status of this InlineResponse2002Items.
        :type: str
        """
        allowed_values = ["Active", "Expired", "Cancelled", "Suspended", "Dead", "Swapped"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def href(self):
        """
        Gets the href of this InlineResponse2002Items.

        :return: The href of this InlineResponse2002Items.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """
        Sets the href of this InlineResponse2002Items.

        :param href: The href of this InlineResponse2002Items.
        :type: str
        """

        self._href = href

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, InlineResponse2002Items):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
