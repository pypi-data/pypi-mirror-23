# coding: utf-8

"""
    Apprenda.DeveloperPortal.Web

    The Application Management REST API can be leveraged to customize the Developer experience of deploying and managing applications  on the Apprenda Platform. This allows some of the functionality of the Platform's [Developer Portal](/current/developer-portal)to be accomplished through a variety of means such as custom-built UX or command-line interfaces.     ##Authentication    Before making a request, you must be authenticated. Learn how to [get authenticated](/restapi/appmanagement/v1/authentication).    ##Making a Request    ###Prerequisites    * Installed Platform of version 4.5.0 or later     * Authentication token     * To use this API you must be part of a [Development Team or Tenant](/current/create-users) and have an [active subscription](/current/dev-portal-setup#create) to Developer Portal    ###Request URL    All requests must use **https**.    The URL for every request you make is the Cloud URI of your Platform followed by \"/developer\" and the path structure of the endpoint. For example, if your Cloud URI is apps.apprenda.harp and you want to get the Add-ons for your Platform, the request URI will be **apps.apprenda.harp/developer/api/v1/addons**.      For more information, see our documentation on [using API resources](/restapi/appmanagement/v1/resources) and [finding your Cloud URI](/current/clouduri).

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class LogOverride(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, log_level=None, app_alias=None, app_version=None, email_recipients=None, override_type=None, tag=None, subscriber=None, user=None, message=None, notification=None, href=None):
        """
        LogOverride - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'log_level': 'int',
            'app_alias': 'str',
            'app_version': 'str',
            'email_recipients': 'list[str]',
            'override_type': 'str',
            'tag': 'str',
            'subscriber': 'Apiv1LogOverridesSubscriber',
            'user': 'Apiv1LogOverridesUser',
            'message': 'str',
            'notification': 'Apiv1LogOverridesNotification',
            'href': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'log_level': 'logLevel',
            'app_alias': 'appAlias',
            'app_version': 'appVersion',
            'email_recipients': 'emailRecipients',
            'override_type': 'overrideType',
            'tag': 'tag',
            'subscriber': 'subscriber',
            'user': 'user',
            'message': 'message',
            'notification': 'notification',
            'href': 'href'
        }

        self._id = id
        self._log_level = log_level
        self._app_alias = app_alias
        self._app_version = app_version
        self._email_recipients = email_recipients
        self._override_type = override_type
        self._tag = tag
        self._subscriber = subscriber
        self._user = user
        self._message = message
        self._notification = notification
        self._href = href

    @property
    def id(self):
        """
        Gets the id of this LogOverride.

        :return: The id of this LogOverride.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this LogOverride.

        :param id: The id of this LogOverride.
        :type: str
        """

        self._id = id

    @property
    def log_level(self):
        """
        Gets the log_level of this LogOverride.

        :return: The log_level of this LogOverride.
        :rtype: int
        """
        return self._log_level

    @log_level.setter
    def log_level(self, log_level):
        """
        Sets the log_level of this LogOverride.

        :param log_level: The log_level of this LogOverride.
        :type: int
        """

        self._log_level = log_level

    @property
    def app_alias(self):
        """
        Gets the app_alias of this LogOverride.

        :return: The app_alias of this LogOverride.
        :rtype: str
        """
        return self._app_alias

    @app_alias.setter
    def app_alias(self, app_alias):
        """
        Sets the app_alias of this LogOverride.

        :param app_alias: The app_alias of this LogOverride.
        :type: str
        """

        self._app_alias = app_alias

    @property
    def app_version(self):
        """
        Gets the app_version of this LogOverride.

        :return: The app_version of this LogOverride.
        :rtype: str
        """
        return self._app_version

    @app_version.setter
    def app_version(self, app_version):
        """
        Sets the app_version of this LogOverride.

        :param app_version: The app_version of this LogOverride.
        :type: str
        """

        self._app_version = app_version

    @property
    def email_recipients(self):
        """
        Gets the email_recipients of this LogOverride.

        :return: The email_recipients of this LogOverride.
        :rtype: list[str]
        """
        return self._email_recipients

    @email_recipients.setter
    def email_recipients(self, email_recipients):
        """
        Sets the email_recipients of this LogOverride.

        :param email_recipients: The email_recipients of this LogOverride.
        :type: list[str]
        """

        self._email_recipients = email_recipients

    @property
    def override_type(self):
        """
        Gets the override_type of this LogOverride.

        :return: The override_type of this LogOverride.
        :rtype: str
        """
        return self._override_type

    @override_type.setter
    def override_type(self, override_type):
        """
        Sets the override_type of this LogOverride.

        :param override_type: The override_type of this LogOverride.
        :type: str
        """

        self._override_type = override_type

    @property
    def tag(self):
        """
        Gets the tag of this LogOverride.

        :return: The tag of this LogOverride.
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """
        Sets the tag of this LogOverride.

        :param tag: The tag of this LogOverride.
        :type: str
        """

        self._tag = tag

    @property
    def subscriber(self):
        """
        Gets the subscriber of this LogOverride.

        :return: The subscriber of this LogOverride.
        :rtype: Apiv1LogOverridesSubscriber
        """
        return self._subscriber

    @subscriber.setter
    def subscriber(self, subscriber):
        """
        Sets the subscriber of this LogOverride.

        :param subscriber: The subscriber of this LogOverride.
        :type: Apiv1LogOverridesSubscriber
        """

        self._subscriber = subscriber

    @property
    def user(self):
        """
        Gets the user of this LogOverride.

        :return: The user of this LogOverride.
        :rtype: Apiv1LogOverridesUser
        """
        return self._user

    @user.setter
    def user(self, user):
        """
        Sets the user of this LogOverride.

        :param user: The user of this LogOverride.
        :type: Apiv1LogOverridesUser
        """

        self._user = user

    @property
    def message(self):
        """
        Gets the message of this LogOverride.

        :return: The message of this LogOverride.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """
        Sets the message of this LogOverride.

        :param message: The message of this LogOverride.
        :type: str
        """

        self._message = message

    @property
    def notification(self):
        """
        Gets the notification of this LogOverride.

        :return: The notification of this LogOverride.
        :rtype: Apiv1LogOverridesNotification
        """
        return self._notification

    @notification.setter
    def notification(self, notification):
        """
        Sets the notification of this LogOverride.

        :param notification: The notification of this LogOverride.
        :type: Apiv1LogOverridesNotification
        """

        self._notification = notification

    @property
    def href(self):
        """
        Gets the href of this LogOverride.

        :return: The href of this LogOverride.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """
        Sets the href of this LogOverride.

        :param href: The href of this LogOverride.
        :type: str
        """

        self._href = href

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, LogOverride):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
