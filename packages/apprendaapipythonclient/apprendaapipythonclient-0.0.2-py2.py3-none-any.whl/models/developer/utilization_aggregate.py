# coding: utf-8

"""
    Apprenda.DeveloperPortal.Web

    The Application Management REST API can be leveraged to customize the Developer experience of deploying and managing applications  on the Apprenda Platform. This allows some of the functionality of the Platform's [Developer Portal](/current/developer-portal)to be accomplished through a variety of means such as custom-built UX or command-line interfaces.     ##Authentication    Before making a request, you must be authenticated. Learn how to [get authenticated](/restapi/appmanagement/v1/authentication).    ##Making a Request    ###Prerequisites    * Installed Platform of version 4.5.0 or later     * Authentication token     * To use this API you must be part of a [Development Team or Tenant](/current/create-users) and have an [active subscription](/current/dev-portal-setup#create) to Developer Portal    ###Request URL    All requests must use **https**.    The URL for every request you make is the Cloud URI of your Platform followed by \"/developer\" and the path structure of the endpoint. For example, if your Cloud URI is apps.apprenda.harp and you want to get the Add-ons for your Platform, the request URI will be **apps.apprenda.harp/developer/api/v1/addons**.      For more information, see our documentation on [using API resources](/restapi/appmanagement/v1/resources) and [finding your Cloud URI](/current/clouduri).

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class UtilizationAggregate(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, sample_count=None, minimum_cpu_usage=None, average_cpu_usage=None, maximum_cpu_usage=None, standard_deviation_cpu_usage=None, minimum_memory_usage=None, average_memory_usage=None, maximum_memory_usage=None, standard_deviation_memory_usage=None, workload=None, is_policy_applicable=None, href=None):
        """
        UtilizationAggregate - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'sample_count': 'int',
            'minimum_cpu_usage': 'float',
            'average_cpu_usage': 'float',
            'maximum_cpu_usage': 'float',
            'standard_deviation_cpu_usage': 'float',
            'minimum_memory_usage': 'float',
            'average_memory_usage': 'float',
            'maximum_memory_usage': 'float',
            'standard_deviation_memory_usage': 'float',
            'workload': 'InlineResponse200Roles',
            'is_policy_applicable': 'bool',
            'href': 'str'
        }

        self.attribute_map = {
            'sample_count': 'sampleCount',
            'minimum_cpu_usage': 'minimumCpuUsage',
            'average_cpu_usage': 'averageCpuUsage',
            'maximum_cpu_usage': 'maximumCpuUsage',
            'standard_deviation_cpu_usage': 'standardDeviationCpuUsage',
            'minimum_memory_usage': 'minimumMemoryUsage',
            'average_memory_usage': 'averageMemoryUsage',
            'maximum_memory_usage': 'maximumMemoryUsage',
            'standard_deviation_memory_usage': 'standardDeviationMemoryUsage',
            'workload': 'workload',
            'is_policy_applicable': 'isPolicyApplicable',
            'href': 'href'
        }

        self._sample_count = sample_count
        self._minimum_cpu_usage = minimum_cpu_usage
        self._average_cpu_usage = average_cpu_usage
        self._maximum_cpu_usage = maximum_cpu_usage
        self._standard_deviation_cpu_usage = standard_deviation_cpu_usage
        self._minimum_memory_usage = minimum_memory_usage
        self._average_memory_usage = average_memory_usage
        self._maximum_memory_usage = maximum_memory_usage
        self._standard_deviation_memory_usage = standard_deviation_memory_usage
        self._workload = workload
        self._is_policy_applicable = is_policy_applicable
        self._href = href

    @property
    def sample_count(self):
        """
        Gets the sample_count of this UtilizationAggregate.

        :return: The sample_count of this UtilizationAggregate.
        :rtype: int
        """
        return self._sample_count

    @sample_count.setter
    def sample_count(self, sample_count):
        """
        Sets the sample_count of this UtilizationAggregate.

        :param sample_count: The sample_count of this UtilizationAggregate.
        :type: int
        """

        self._sample_count = sample_count

    @property
    def minimum_cpu_usage(self):
        """
        Gets the minimum_cpu_usage of this UtilizationAggregate.

        :return: The minimum_cpu_usage of this UtilizationAggregate.
        :rtype: float
        """
        return self._minimum_cpu_usage

    @minimum_cpu_usage.setter
    def minimum_cpu_usage(self, minimum_cpu_usage):
        """
        Sets the minimum_cpu_usage of this UtilizationAggregate.

        :param minimum_cpu_usage: The minimum_cpu_usage of this UtilizationAggregate.
        :type: float
        """

        self._minimum_cpu_usage = minimum_cpu_usage

    @property
    def average_cpu_usage(self):
        """
        Gets the average_cpu_usage of this UtilizationAggregate.

        :return: The average_cpu_usage of this UtilizationAggregate.
        :rtype: float
        """
        return self._average_cpu_usage

    @average_cpu_usage.setter
    def average_cpu_usage(self, average_cpu_usage):
        """
        Sets the average_cpu_usage of this UtilizationAggregate.

        :param average_cpu_usage: The average_cpu_usage of this UtilizationAggregate.
        :type: float
        """

        self._average_cpu_usage = average_cpu_usage

    @property
    def maximum_cpu_usage(self):
        """
        Gets the maximum_cpu_usage of this UtilizationAggregate.

        :return: The maximum_cpu_usage of this UtilizationAggregate.
        :rtype: float
        """
        return self._maximum_cpu_usage

    @maximum_cpu_usage.setter
    def maximum_cpu_usage(self, maximum_cpu_usage):
        """
        Sets the maximum_cpu_usage of this UtilizationAggregate.

        :param maximum_cpu_usage: The maximum_cpu_usage of this UtilizationAggregate.
        :type: float
        """

        self._maximum_cpu_usage = maximum_cpu_usage

    @property
    def standard_deviation_cpu_usage(self):
        """
        Gets the standard_deviation_cpu_usage of this UtilizationAggregate.

        :return: The standard_deviation_cpu_usage of this UtilizationAggregate.
        :rtype: float
        """
        return self._standard_deviation_cpu_usage

    @standard_deviation_cpu_usage.setter
    def standard_deviation_cpu_usage(self, standard_deviation_cpu_usage):
        """
        Sets the standard_deviation_cpu_usage of this UtilizationAggregate.

        :param standard_deviation_cpu_usage: The standard_deviation_cpu_usage of this UtilizationAggregate.
        :type: float
        """

        self._standard_deviation_cpu_usage = standard_deviation_cpu_usage

    @property
    def minimum_memory_usage(self):
        """
        Gets the minimum_memory_usage of this UtilizationAggregate.

        :return: The minimum_memory_usage of this UtilizationAggregate.
        :rtype: float
        """
        return self._minimum_memory_usage

    @minimum_memory_usage.setter
    def minimum_memory_usage(self, minimum_memory_usage):
        """
        Sets the minimum_memory_usage of this UtilizationAggregate.

        :param minimum_memory_usage: The minimum_memory_usage of this UtilizationAggregate.
        :type: float
        """

        self._minimum_memory_usage = minimum_memory_usage

    @property
    def average_memory_usage(self):
        """
        Gets the average_memory_usage of this UtilizationAggregate.

        :return: The average_memory_usage of this UtilizationAggregate.
        :rtype: float
        """
        return self._average_memory_usage

    @average_memory_usage.setter
    def average_memory_usage(self, average_memory_usage):
        """
        Sets the average_memory_usage of this UtilizationAggregate.

        :param average_memory_usage: The average_memory_usage of this UtilizationAggregate.
        :type: float
        """

        self._average_memory_usage = average_memory_usage

    @property
    def maximum_memory_usage(self):
        """
        Gets the maximum_memory_usage of this UtilizationAggregate.

        :return: The maximum_memory_usage of this UtilizationAggregate.
        :rtype: float
        """
        return self._maximum_memory_usage

    @maximum_memory_usage.setter
    def maximum_memory_usage(self, maximum_memory_usage):
        """
        Sets the maximum_memory_usage of this UtilizationAggregate.

        :param maximum_memory_usage: The maximum_memory_usage of this UtilizationAggregate.
        :type: float
        """

        self._maximum_memory_usage = maximum_memory_usage

    @property
    def standard_deviation_memory_usage(self):
        """
        Gets the standard_deviation_memory_usage of this UtilizationAggregate.

        :return: The standard_deviation_memory_usage of this UtilizationAggregate.
        :rtype: float
        """
        return self._standard_deviation_memory_usage

    @standard_deviation_memory_usage.setter
    def standard_deviation_memory_usage(self, standard_deviation_memory_usage):
        """
        Sets the standard_deviation_memory_usage of this UtilizationAggregate.

        :param standard_deviation_memory_usage: The standard_deviation_memory_usage of this UtilizationAggregate.
        :type: float
        """

        self._standard_deviation_memory_usage = standard_deviation_memory_usage

    @property
    def workload(self):
        """
        Gets the workload of this UtilizationAggregate.

        :return: The workload of this UtilizationAggregate.
        :rtype: InlineResponse200Roles
        """
        return self._workload

    @workload.setter
    def workload(self, workload):
        """
        Sets the workload of this UtilizationAggregate.

        :param workload: The workload of this UtilizationAggregate.
        :type: InlineResponse200Roles
        """

        self._workload = workload

    @property
    def is_policy_applicable(self):
        """
        Gets the is_policy_applicable of this UtilizationAggregate.

        :return: The is_policy_applicable of this UtilizationAggregate.
        :rtype: bool
        """
        return self._is_policy_applicable

    @is_policy_applicable.setter
    def is_policy_applicable(self, is_policy_applicable):
        """
        Sets the is_policy_applicable of this UtilizationAggregate.

        :param is_policy_applicable: The is_policy_applicable of this UtilizationAggregate.
        :type: bool
        """

        self._is_policy_applicable = is_policy_applicable

    @property
    def href(self):
        """
        Gets the href of this UtilizationAggregate.

        :return: The href of this UtilizationAggregate.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """
        Sets the href of this UtilizationAggregate.

        :param href: The href of this UtilizationAggregate.
        :type: str
        """

        self._href = href

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, UtilizationAggregate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
