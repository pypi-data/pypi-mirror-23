# coding: utf-8

"""
    Apprenda.DeveloperPortal.Web

    The Application Management REST API can be leveraged to customize the Developer experience of deploying and managing applications  on the Apprenda Platform. This allows some of the functionality of the Platform's [Developer Portal](/current/developer-portal)to be accomplished through a variety of means such as custom-built UX or command-line interfaces.     ##Authentication    Before making a request, you must be authenticated. Learn how to [get authenticated](/restapi/appmanagement/v1/authentication).    ##Making a Request    ###Prerequisites    * Installed Platform of version 4.5.0 or later     * Authentication token     * To use this API you must be part of a [Development Team or Tenant](/current/create-users) and have an [active subscription](/current/dev-portal-setup#create) to Developer Portal    ###Request URL    All requests must use **https**.    The URL for every request you make is the Cloud URI of your Platform followed by \"/developer\" and the path structure of the endpoint. For example, if your Cloud URI is apps.apprenda.harp and you want to get the Add-ons for your Platform, the request URI will be **apps.apprenda.harp/developer/api/v1/addons**.      For more information, see our documentation on [using API resources](/restapi/appmanagement/v1/resources) and [finding your Cloud URI](/current/clouduri).

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class InlineResponse2005(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, available_add_ons=None, deployed_add_ons=None, href=None):
        """
        InlineResponse2005 - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'available_add_ons': 'list[InlineResponse2005AvailableAddOns]',
            'deployed_add_ons': 'list[InlineResponse2005DeployedAddOns]',
            'href': 'str'
        }

        self.attribute_map = {
            'available_add_ons': 'availableAddOns',
            'deployed_add_ons': 'deployedAddOns',
            'href': 'href'
        }

        self._available_add_ons = available_add_ons
        self._deployed_add_ons = deployed_add_ons
        self._href = href

    @property
    def available_add_ons(self):
        """
        Gets the available_add_ons of this InlineResponse2005.

        :return: The available_add_ons of this InlineResponse2005.
        :rtype: list[InlineResponse2005AvailableAddOns]
        """
        return self._available_add_ons

    @available_add_ons.setter
    def available_add_ons(self, available_add_ons):
        """
        Sets the available_add_ons of this InlineResponse2005.

        :param available_add_ons: The available_add_ons of this InlineResponse2005.
        :type: list[InlineResponse2005AvailableAddOns]
        """

        self._available_add_ons = available_add_ons

    @property
    def deployed_add_ons(self):
        """
        Gets the deployed_add_ons of this InlineResponse2005.

        :return: The deployed_add_ons of this InlineResponse2005.
        :rtype: list[InlineResponse2005DeployedAddOns]
        """
        return self._deployed_add_ons

    @deployed_add_ons.setter
    def deployed_add_ons(self, deployed_add_ons):
        """
        Sets the deployed_add_ons of this InlineResponse2005.

        :param deployed_add_ons: The deployed_add_ons of this InlineResponse2005.
        :type: list[InlineResponse2005DeployedAddOns]
        """

        self._deployed_add_ons = deployed_add_ons

    @property
    def href(self):
        """
        Gets the href of this InlineResponse2005.

        :return: The href of this InlineResponse2005.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """
        Sets the href of this InlineResponse2005.

        :param href: The href of this InlineResponse2005.
        :type: str
        """

        self._href = href

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, InlineResponse2005):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
