# coding: utf-8

"""
    Apprenda.DeveloperPortal.Web

    The Application Management REST API can be leveraged to customize the Developer experience of deploying and managing applications  on the Apprenda Platform. This allows some of the functionality of the Platform's [Developer Portal](/current/developer-portal)to be accomplished through a variety of means such as custom-built UX or command-line interfaces.     ##Authentication    Before making a request, you must be authenticated. Learn how to [get authenticated](/restapi/appmanagement/v1/authentication).    ##Making a Request    ###Prerequisites    * Installed Platform of version 4.5.0 or later     * Authentication token     * To use this API you must be part of a [Development Team or Tenant](/current/create-users) and have an [active subscription](/current/dev-portal-setup#create) to Developer Portal    ###Request URL    All requests must use **https**.    The URL for every request you make is the Cloud URI of your Platform followed by \"/developer\" and the path structure of the endpoint. For example, if your Cloud URI is apps.apprenda.harp and you want to get the Add-ons for your Platform, the request URI will be **apps.apprenda.harp/developer/api/v1/addons**.      For more information, see our documentation on [using API resources](/restapi/appmanagement/v1/resources) and [finding your Cloud URI](/current/clouduri).

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class InlineResponse200Items(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, description=None, email=None, first_name=None, href=None, identifier=None, is_enabled=False, last_name=None, middle_name=None, name=None, prefix=None, roles=None, subscriptions=None, suffix=None):
        """
        InlineResponse200Items - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'description': 'str',
            'email': 'str',
            'first_name': 'str',
            'href': 'str',
            'identifier': 'str',
            'is_enabled': 'bool',
            'last_name': 'str',
            'middle_name': 'str',
            'name': 'str',
            'prefix': 'str',
            'roles': 'InlineResponse200Roles',
            'subscriptions': 'InlineResponse200Roles',
            'suffix': 'str'
        }

        self.attribute_map = {
            'description': 'description',
            'email': 'email',
            'first_name': 'firstName',
            'href': 'href',
            'identifier': 'identifier',
            'is_enabled': 'isEnabled',
            'last_name': 'lastName',
            'middle_name': 'middleName',
            'name': 'name',
            'prefix': 'prefix',
            'roles': 'roles',
            'subscriptions': 'subscriptions',
            'suffix': 'suffix'
        }

        self._description = description
        self._email = email
        self._first_name = first_name
        self._href = href
        self._identifier = identifier
        self._is_enabled = is_enabled
        self._last_name = last_name
        self._middle_name = middle_name
        self._name = name
        self._prefix = prefix
        self._roles = roles
        self._subscriptions = subscriptions
        self._suffix = suffix

    @property
    def description(self):
        """
        Gets the description of this InlineResponse200Items.

        :return: The description of this InlineResponse200Items.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this InlineResponse200Items.

        :param description: The description of this InlineResponse200Items.
        :type: str
        """

        self._description = description

    @property
    def email(self):
        """
        Gets the email of this InlineResponse200Items.

        :return: The email of this InlineResponse200Items.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this InlineResponse200Items.

        :param email: The email of this InlineResponse200Items.
        :type: str
        """

        self._email = email

    @property
    def first_name(self):
        """
        Gets the first_name of this InlineResponse200Items.

        :return: The first_name of this InlineResponse200Items.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """
        Sets the first_name of this InlineResponse200Items.

        :param first_name: The first_name of this InlineResponse200Items.
        :type: str
        """

        self._first_name = first_name

    @property
    def href(self):
        """
        Gets the href of this InlineResponse200Items.

        :return: The href of this InlineResponse200Items.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """
        Sets the href of this InlineResponse200Items.

        :param href: The href of this InlineResponse200Items.
        :type: str
        """

        self._href = href

    @property
    def identifier(self):
        """
        Gets the identifier of this InlineResponse200Items.

        :return: The identifier of this InlineResponse200Items.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """
        Sets the identifier of this InlineResponse200Items.

        :param identifier: The identifier of this InlineResponse200Items.
        :type: str
        """

        self._identifier = identifier

    @property
    def is_enabled(self):
        """
        Gets the is_enabled of this InlineResponse200Items.

        :return: The is_enabled of this InlineResponse200Items.
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """
        Sets the is_enabled of this InlineResponse200Items.

        :param is_enabled: The is_enabled of this InlineResponse200Items.
        :type: bool
        """

        self._is_enabled = is_enabled

    @property
    def last_name(self):
        """
        Gets the last_name of this InlineResponse200Items.

        :return: The last_name of this InlineResponse200Items.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """
        Sets the last_name of this InlineResponse200Items.

        :param last_name: The last_name of this InlineResponse200Items.
        :type: str
        """

        self._last_name = last_name

    @property
    def middle_name(self):
        """
        Gets the middle_name of this InlineResponse200Items.

        :return: The middle_name of this InlineResponse200Items.
        :rtype: str
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name):
        """
        Sets the middle_name of this InlineResponse200Items.

        :param middle_name: The middle_name of this InlineResponse200Items.
        :type: str
        """

        self._middle_name = middle_name

    @property
    def name(self):
        """
        Gets the name of this InlineResponse200Items.

        :return: The name of this InlineResponse200Items.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this InlineResponse200Items.

        :param name: The name of this InlineResponse200Items.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def prefix(self):
        """
        Gets the prefix of this InlineResponse200Items.

        :return: The prefix of this InlineResponse200Items.
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """
        Sets the prefix of this InlineResponse200Items.

        :param prefix: The prefix of this InlineResponse200Items.
        :type: str
        """

        self._prefix = prefix

    @property
    def roles(self):
        """
        Gets the roles of this InlineResponse200Items.

        :return: The roles of this InlineResponse200Items.
        :rtype: InlineResponse200Roles
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """
        Sets the roles of this InlineResponse200Items.

        :param roles: The roles of this InlineResponse200Items.
        :type: InlineResponse200Roles
        """

        self._roles = roles

    @property
    def subscriptions(self):
        """
        Gets the subscriptions of this InlineResponse200Items.

        :return: The subscriptions of this InlineResponse200Items.
        :rtype: InlineResponse200Roles
        """
        return self._subscriptions

    @subscriptions.setter
    def subscriptions(self, subscriptions):
        """
        Sets the subscriptions of this InlineResponse200Items.

        :param subscriptions: The subscriptions of this InlineResponse200Items.
        :type: InlineResponse200Roles
        """

        self._subscriptions = subscriptions

    @property
    def suffix(self):
        """
        Gets the suffix of this InlineResponse200Items.

        :return: The suffix of this InlineResponse200Items.
        :rtype: str
        """
        return self._suffix

    @suffix.setter
    def suffix(self, suffix):
        """
        Sets the suffix of this InlineResponse200Items.

        :param suffix: The suffix of this InlineResponse200Items.
        :type: str
        """

        self._suffix = suffix

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, InlineResponse200Items):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
