# coding: utf-8

"""
    Platform Operations Rest API

    The Platform Operations REST API can be leveraged to customize the Platform Operator experience of managing infrastructure and applications for the Apprenda Platform. This allows some of the functionality of the Platform's System Operations Center (SOC) to be accomplished through a variety of means such as custom-built UX or command-line interfaces.   For more information about the abilities of Platform Operators, see our documentation on the [SOC](/current/SOC).   ##Authentication   Before making a request, you must be authenticated. Learn how to [get authenticated](/restapi/platformops/v1/authentication).   ##Making a Request   ###Prerequisites   * Installed Platform of version 6.5.1 or later (Note that most endpoints are only available in version 6.7.0 and later)    * Authentication token   * If SOC authorization is enabled on your Platform, you must be assigned as an active Platform Operator   ###Request URL   All requests must use **https**.   The URL for every request you make is the Cloud URI of your Platform followed by \"/soc\" and the path structure of the endpoint. For example, if your Cloud URI is apps.apprenda.harp and you want to get the Add-ons for your Platform, the request URI will be **apps.apprenda.harp/soc/api/v1/addons**.   For more information, see our documentation on [using API resources](/restapi/platformops/v1/using-resources) and [finding your Cloud URI](/current/clouduri).   ###Request Headers   Your authenication token must be passed in the header of all requests using the key **ApprendaSessionToken** (not case sensitive).  

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class InlineResponse200Items(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, alias=None, href=None, name=None, description=None, version=None, vendor=None, is_enabled=None, deployment_notes=None, temp_location=None, user=None, password=None, dev_team_access=None, allowed_dev_teams=None, max_instances_per_dev_team=None):
        """
        InlineResponse200Items - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'alias': 'str',
            'href': 'str',
            'name': 'str',
            'description': 'str',
            'version': 'str',
            'vendor': 'str',
            'is_enabled': 'bool',
            'deployment_notes': 'str',
            'temp_location': 'str',
            'user': 'str',
            'password': 'str',
            'dev_team_access': 'str',
            'allowed_dev_teams': 'list[str]',
            'max_instances_per_dev_team': 'float'
        }

        self.attribute_map = {
            'alias': 'alias',
            'href': 'href',
            'name': 'name',
            'description': 'description',
            'version': 'version',
            'vendor': 'vendor',
            'is_enabled': 'isEnabled',
            'deployment_notes': 'deploymentNotes',
            'temp_location': 'tempLocation',
            'user': 'user',
            'password': 'password',
            'dev_team_access': 'devTeamAccess',
            'allowed_dev_teams': 'allowedDevTeams',
            'max_instances_per_dev_team': 'maxInstancesPerDevTeam'
        }

        self._alias = alias
        self._href = href
        self._name = name
        self._description = description
        self._version = version
        self._vendor = vendor
        self._is_enabled = is_enabled
        self._deployment_notes = deployment_notes
        self._temp_location = temp_location
        self._user = user
        self._password = password
        self._dev_team_access = dev_team_access
        self._allowed_dev_teams = allowed_dev_teams
        self._max_instances_per_dev_team = max_instances_per_dev_team

    @property
    def alias(self):
        """
        Gets the alias of this InlineResponse200Items.

        :return: The alias of this InlineResponse200Items.
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """
        Sets the alias of this InlineResponse200Items.

        :param alias: The alias of this InlineResponse200Items.
        :type: str
        """

        self._alias = alias

    @property
    def href(self):
        """
        Gets the href of this InlineResponse200Items.

        :return: The href of this InlineResponse200Items.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """
        Sets the href of this InlineResponse200Items.

        :param href: The href of this InlineResponse200Items.
        :type: str
        """

        self._href = href

    @property
    def name(self):
        """
        Gets the name of this InlineResponse200Items.

        :return: The name of this InlineResponse200Items.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this InlineResponse200Items.

        :param name: The name of this InlineResponse200Items.
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """
        Gets the description of this InlineResponse200Items.

        :return: The description of this InlineResponse200Items.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this InlineResponse200Items.

        :param description: The description of this InlineResponse200Items.
        :type: str
        """

        self._description = description

    @property
    def version(self):
        """
        Gets the version of this InlineResponse200Items.

        :return: The version of this InlineResponse200Items.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this InlineResponse200Items.

        :param version: The version of this InlineResponse200Items.
        :type: str
        """

        self._version = version

    @property
    def vendor(self):
        """
        Gets the vendor of this InlineResponse200Items.

        :return: The vendor of this InlineResponse200Items.
        :rtype: str
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """
        Sets the vendor of this InlineResponse200Items.

        :param vendor: The vendor of this InlineResponse200Items.
        :type: str
        """

        self._vendor = vendor

    @property
    def is_enabled(self):
        """
        Gets the is_enabled of this InlineResponse200Items.

        :return: The is_enabled of this InlineResponse200Items.
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """
        Sets the is_enabled of this InlineResponse200Items.

        :param is_enabled: The is_enabled of this InlineResponse200Items.
        :type: bool
        """

        self._is_enabled = is_enabled

    @property
    def deployment_notes(self):
        """
        Gets the deployment_notes of this InlineResponse200Items.

        :return: The deployment_notes of this InlineResponse200Items.
        :rtype: str
        """
        return self._deployment_notes

    @deployment_notes.setter
    def deployment_notes(self, deployment_notes):
        """
        Sets the deployment_notes of this InlineResponse200Items.

        :param deployment_notes: The deployment_notes of this InlineResponse200Items.
        :type: str
        """

        self._deployment_notes = deployment_notes

    @property
    def temp_location(self):
        """
        Gets the temp_location of this InlineResponse200Items.

        :return: The temp_location of this InlineResponse200Items.
        :rtype: str
        """
        return self._temp_location

    @temp_location.setter
    def temp_location(self, temp_location):
        """
        Sets the temp_location of this InlineResponse200Items.

        :param temp_location: The temp_location of this InlineResponse200Items.
        :type: str
        """

        self._temp_location = temp_location

    @property
    def user(self):
        """
        Gets the user of this InlineResponse200Items.

        :return: The user of this InlineResponse200Items.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """
        Sets the user of this InlineResponse200Items.

        :param user: The user of this InlineResponse200Items.
        :type: str
        """

        self._user = user

    @property
    def password(self):
        """
        Gets the password of this InlineResponse200Items.
        returned null for security

        :return: The password of this InlineResponse200Items.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """
        Sets the password of this InlineResponse200Items.
        returned null for security

        :param password: The password of this InlineResponse200Items.
        :type: str
        """

        self._password = password

    @property
    def dev_team_access(self):
        """
        Gets the dev_team_access of this InlineResponse200Items.

        :return: The dev_team_access of this InlineResponse200Items.
        :rtype: str
        """
        return self._dev_team_access

    @dev_team_access.setter
    def dev_team_access(self, dev_team_access):
        """
        Sets the dev_team_access of this InlineResponse200Items.

        :param dev_team_access: The dev_team_access of this InlineResponse200Items.
        :type: str
        """
        allowed_values = ["Restricted", "Unrestricted"]
        if dev_team_access not in allowed_values:
            raise ValueError(
                "Invalid value for `dev_team_access` ({0}), must be one of {1}"
                .format(dev_team_access, allowed_values)
            )

        self._dev_team_access = dev_team_access

    @property
    def allowed_dev_teams(self):
        """
        Gets the allowed_dev_teams of this InlineResponse200Items.
        will be null if Unrestricted dev team access is enabled

        :return: The allowed_dev_teams of this InlineResponse200Items.
        :rtype: list[str]
        """
        return self._allowed_dev_teams

    @allowed_dev_teams.setter
    def allowed_dev_teams(self, allowed_dev_teams):
        """
        Sets the allowed_dev_teams of this InlineResponse200Items.
        will be null if Unrestricted dev team access is enabled

        :param allowed_dev_teams: The allowed_dev_teams of this InlineResponse200Items.
        :type: list[str]
        """

        self._allowed_dev_teams = allowed_dev_teams

    @property
    def max_instances_per_dev_team(self):
        """
        Gets the max_instances_per_dev_team of this InlineResponse200Items.
        will be null if unlimited

        :return: The max_instances_per_dev_team of this InlineResponse200Items.
        :rtype: float
        """
        return self._max_instances_per_dev_team

    @max_instances_per_dev_team.setter
    def max_instances_per_dev_team(self, max_instances_per_dev_team):
        """
        Sets the max_instances_per_dev_team of this InlineResponse200Items.
        will be null if unlimited

        :param max_instances_per_dev_team: The max_instances_per_dev_team of this InlineResponse200Items.
        :type: float
        """

        self._max_instances_per_dev_team = max_instances_per_dev_team

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, InlineResponse200Items):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
