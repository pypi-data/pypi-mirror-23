# coding: utf-8

"""
    Platform Operations Rest API

    The Platform Operations REST API can be leveraged to customize the Platform Operator experience of managing infrastructure and applications for the Apprenda Platform. This allows some of the functionality of the Platform's System Operations Center (SOC) to be accomplished through a variety of means such as custom-built UX or command-line interfaces.   For more information about the abilities of Platform Operators, see our documentation on the [SOC](/current/SOC).   ##Authentication   Before making a request, you must be authenticated. Learn how to [get authenticated](/restapi/platformops/v1/authentication).   ##Making a Request   ###Prerequisites   * Installed Platform of version 6.5.1 or later (Note that most endpoints are only available in version 6.7.0 and later)    * Authentication token   * If SOC authorization is enabled on your Platform, you must be assigned as an active Platform Operator   ###Request URL   All requests must use **https**.   The URL for every request you make is the Cloud URI of your Platform followed by \"/soc\" and the path structure of the endpoint. For example, if your Cloud URI is apps.apprenda.harp and you want to get the Add-ons for your Platform, the request URI will be **apps.apprenda.harp/soc/api/v1/addons**.   For more information, see our documentation on [using API resources](/restapi/platformops/v1/using-resources) and [finding your Cloud URI](/current/clouduri).   ###Request Headers   Your authenication token must be passed in the header of all requests using the key **ApprendaSessionToken** (not case sensitive).  

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Application(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, alias=None, name=None, description=None, developer_name=None, application_services=None, versions=None, href=None):
        """
        Application - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'alias': 'str',
            'name': 'str',
            'description': 'str',
            'developer_name': 'str',
            'application_services': 'str',
            'versions': 'list[InlineResponse2001Version]',
            'href': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'alias': 'alias',
            'name': 'name',
            'description': 'description',
            'developer_name': 'developerName',
            'application_services': 'applicationServices',
            'versions': 'versions',
            'href': 'href'
        }

        self._id = id
        self._alias = alias
        self._name = name
        self._description = description
        self._developer_name = developer_name
        self._application_services = application_services
        self._versions = versions
        self._href = href

    @property
    def id(self):
        """
        Gets the id of this Application.

        :return: The id of this Application.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Application.

        :param id: The id of this Application.
        :type: str
        """

        self._id = id

    @property
    def alias(self):
        """
        Gets the alias of this Application.

        :return: The alias of this Application.
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """
        Sets the alias of this Application.

        :param alias: The alias of this Application.
        :type: str
        """

        self._alias = alias

    @property
    def name(self):
        """
        Gets the name of this Application.

        :return: The name of this Application.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Application.

        :param name: The name of this Application.
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """
        Gets the description of this Application.

        :return: The description of this Application.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Application.

        :param description: The description of this Application.
        :type: str
        """

        self._description = description

    @property
    def developer_name(self):
        """
        Gets the developer_name of this Application.

        :return: The developer_name of this Application.
        :rtype: str
        """
        return self._developer_name

    @developer_name.setter
    def developer_name(self, developer_name):
        """
        Sets the developer_name of this Application.

        :param developer_name: The developer_name of this Application.
        :type: str
        """

        self._developer_name = developer_name

    @property
    def application_services(self):
        """
        Gets the application_services of this Application.

        :return: The application_services of this Application.
        :rtype: str
        """
        return self._application_services

    @application_services.setter
    def application_services(self, application_services):
        """
        Sets the application_services of this Application.

        :param application_services: The application_services of this Application.
        :type: str
        """
        allowed_values = ["None", "Authentication", "Authorization", "Multitenancy", "Billing"]
        if application_services not in allowed_values:
            raise ValueError(
                "Invalid value for `application_services` ({0}), must be one of {1}"
                .format(application_services, allowed_values)
            )

        self._application_services = application_services

    @property
    def versions(self):
        """
        Gets the versions of this Application.

        :return: The versions of this Application.
        :rtype: list[InlineResponse2001Version]
        """
        return self._versions

    @versions.setter
    def versions(self, versions):
        """
        Sets the versions of this Application.

        :param versions: The versions of this Application.
        :type: list[InlineResponse2001Version]
        """

        self._versions = versions

    @property
    def href(self):
        """
        Gets the href of this Application.

        :return: The href of this Application.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """
        Sets the href of this Application.

        :param href: The href of this Application.
        :type: str
        """

        self._href = href

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Application):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
