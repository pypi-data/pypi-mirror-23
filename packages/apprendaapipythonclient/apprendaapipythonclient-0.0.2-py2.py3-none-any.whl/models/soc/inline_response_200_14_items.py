# coding: utf-8

"""
    Platform Operations Rest API

    The Platform Operations REST API can be leveraged to customize the Platform Operator experience of managing infrastructure and applications for the Apprenda Platform. This allows some of the functionality of the Platform's System Operations Center (SOC) to be accomplished through a variety of means such as custom-built UX or command-line interfaces.   For more information about the abilities of Platform Operators, see our documentation on the [SOC](/current/SOC).   ##Authentication   Before making a request, you must be authenticated. Learn how to [get authenticated](/restapi/platformops/v1/authentication).   ##Making a Request   ###Prerequisites   * Installed Platform of version 6.5.1 or later (Note that most endpoints are only available in version 6.7.0 and later)    * Authentication token   * If SOC authorization is enabled on your Platform, you must be assigned as an active Platform Operator   ###Request URL   All requests must use **https**.   The URL for every request you make is the Cloud URI of your Platform followed by \"/soc\" and the path structure of the endpoint. For example, if your Cloud URI is apps.apprenda.harp and you want to get the Add-ons for your Platform, the request URI will be **apps.apprenda.harp/soc/api/v1/addons**.   For more information, see our documentation on [using API resources](/restapi/platformops/v1/using-resources) and [finding your Cloud URI](/current/clouduri).   ###Request Headers   Your authenication token must be passed in the header of all requests using the key **ApprendaSessionToken** (not case sensitive).  

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class InlineResponse20014Items(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, timestamp=None, user_id=None, tenant_id=None, resource=None, original_value=None, new_value=None, event_type=None, source_ip=None, operation=None, details=None):
        """
        InlineResponse20014Items - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'timestamp': 'str',
            'user_id': 'str',
            'tenant_id': 'str',
            'resource': 'str',
            'original_value': 'str',
            'new_value': 'str',
            'event_type': 'str',
            'source_ip': 'str',
            'operation': 'str',
            'details': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'timestamp': 'timestamp',
            'user_id': 'userId',
            'tenant_id': 'tenantId',
            'resource': 'resource',
            'original_value': 'originalValue',
            'new_value': 'newValue',
            'event_type': 'eventType',
            'source_ip': 'sourceIP',
            'operation': 'operation',
            'details': 'details'
        }

        self._id = id
        self._timestamp = timestamp
        self._user_id = user_id
        self._tenant_id = tenant_id
        self._resource = resource
        self._original_value = original_value
        self._new_value = new_value
        self._event_type = event_type
        self._source_ip = source_ip
        self._operation = operation
        self._details = details

    @property
    def id(self):
        """
        Gets the id of this InlineResponse20014Items.

        :return: The id of this InlineResponse20014Items.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this InlineResponse20014Items.

        :param id: The id of this InlineResponse20014Items.
        :type: int
        """

        self._id = id

    @property
    def timestamp(self):
        """
        Gets the timestamp of this InlineResponse20014Items.

        :return: The timestamp of this InlineResponse20014Items.
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """
        Sets the timestamp of this InlineResponse20014Items.

        :param timestamp: The timestamp of this InlineResponse20014Items.
        :type: str
        """

        self._timestamp = timestamp

    @property
    def user_id(self):
        """
        Gets the user_id of this InlineResponse20014Items.

        :return: The user_id of this InlineResponse20014Items.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """
        Sets the user_id of this InlineResponse20014Items.

        :param user_id: The user_id of this InlineResponse20014Items.
        :type: str
        """

        self._user_id = user_id

    @property
    def tenant_id(self):
        """
        Gets the tenant_id of this InlineResponse20014Items.

        :return: The tenant_id of this InlineResponse20014Items.
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """
        Sets the tenant_id of this InlineResponse20014Items.

        :param tenant_id: The tenant_id of this InlineResponse20014Items.
        :type: str
        """

        self._tenant_id = tenant_id

    @property
    def resource(self):
        """
        Gets the resource of this InlineResponse20014Items.

        :return: The resource of this InlineResponse20014Items.
        :rtype: str
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """
        Sets the resource of this InlineResponse20014Items.

        :param resource: The resource of this InlineResponse20014Items.
        :type: str
        """

        self._resource = resource

    @property
    def original_value(self):
        """
        Gets the original_value of this InlineResponse20014Items.

        :return: The original_value of this InlineResponse20014Items.
        :rtype: str
        """
        return self._original_value

    @original_value.setter
    def original_value(self, original_value):
        """
        Sets the original_value of this InlineResponse20014Items.

        :param original_value: The original_value of this InlineResponse20014Items.
        :type: str
        """

        self._original_value = original_value

    @property
    def new_value(self):
        """
        Gets the new_value of this InlineResponse20014Items.

        :return: The new_value of this InlineResponse20014Items.
        :rtype: str
        """
        return self._new_value

    @new_value.setter
    def new_value(self, new_value):
        """
        Sets the new_value of this InlineResponse20014Items.

        :param new_value: The new_value of this InlineResponse20014Items.
        :type: str
        """

        self._new_value = new_value

    @property
    def event_type(self):
        """
        Gets the event_type of this InlineResponse20014Items.

        :return: The event_type of this InlineResponse20014Items.
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """
        Sets the event_type of this InlineResponse20014Items.

        :param event_type: The event_type of this InlineResponse20014Items.
        :type: str
        """
        allowed_values = ["OperationStarting", "OperationCompleted", "OperationFailed"]
        if event_type not in allowed_values:
            raise ValueError(
                "Invalid value for `event_type` ({0}), must be one of {1}"
                .format(event_type, allowed_values)
            )

        self._event_type = event_type

    @property
    def source_ip(self):
        """
        Gets the source_ip of this InlineResponse20014Items.

        :return: The source_ip of this InlineResponse20014Items.
        :rtype: str
        """
        return self._source_ip

    @source_ip.setter
    def source_ip(self, source_ip):
        """
        Sets the source_ip of this InlineResponse20014Items.

        :param source_ip: The source_ip of this InlineResponse20014Items.
        :type: str
        """

        self._source_ip = source_ip

    @property
    def operation(self):
        """
        Gets the operation of this InlineResponse20014Items.

        :return: The operation of this InlineResponse20014Items.
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """
        Sets the operation of this InlineResponse20014Items.

        :param operation: The operation of this InlineResponse20014Items.
        :type: str
        """

        self._operation = operation

    @property
    def details(self):
        """
        Gets the details of this InlineResponse20014Items.

        :return: The details of this InlineResponse20014Items.
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """
        Sets the details of this InlineResponse20014Items.

        :param details: The details of this InlineResponse20014Items.
        :type: str
        """

        self._details = details

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, InlineResponse20014Items):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
