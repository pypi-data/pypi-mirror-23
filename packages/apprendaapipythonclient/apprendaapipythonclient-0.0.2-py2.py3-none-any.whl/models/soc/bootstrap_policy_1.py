# coding: utf-8

"""
    Platform Operations Rest API

    The Platform Operations REST API can be leveraged to customize the Platform Operator experience of managing infrastructure and applications for the Apprenda Platform. This allows some of the functionality of the Platform's System Operations Center (SOC) to be accomplished through a variety of means such as custom-built UX or command-line interfaces.   For more information about the abilities of Platform Operators, see our documentation on the [SOC](/current/SOC).   ##Authentication   Before making a request, you must be authenticated. Learn how to [get authenticated](/restapi/platformops/v1/authentication).   ##Making a Request   ###Prerequisites   * Installed Platform of version 6.5.1 or later (Note that most endpoints are only available in version 6.7.0 and later)    * Authentication token   * If SOC authorization is enabled on your Platform, you must be assigned as an active Platform Operator   ###Request URL   All requests must use **https**.   The URL for every request you make is the Cloud URI of your Platform followed by \"/soc\" and the path structure of the endpoint. For example, if your Cloud URI is apps.apprenda.harp and you want to get the Add-ons for your Platform, the request URI will be **apps.apprenda.harp/soc/api/v1/addons**.   For more information, see our documentation on [using API resources](/restapi/platformops/v1/using-resources) and [finding your Cloud URI](/current/clouduri).   ###Request Headers   Your authenication token must be passed in the header of all requests using the key **ApprendaSessionToken** (not case sensitive).  

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class BootstrapPolicy1(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, href=None, name=None, description=None, is_active=None, applied_to_windows=None, applied_to_linux=None, is_always_applied=None, applied_to_sandbox_stage=None, applied_to_published_stage=None, custom_property_name=None, component_type=None, comparison=None, values=None):
        """
        BootstrapPolicy1 - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'href': 'str',
            'name': 'str',
            'description': 'str',
            'is_active': 'bool',
            'applied_to_windows': 'bool',
            'applied_to_linux': 'bool',
            'is_always_applied': 'str',
            'applied_to_sandbox_stage': 'bool',
            'applied_to_published_stage': 'bool',
            'custom_property_name': 'str',
            'component_type': 'str',
            'comparison': 'str',
            'values': 'list[str]'
        }

        self.attribute_map = {
            'id': 'id',
            'href': 'href',
            'name': 'name',
            'description': 'description',
            'is_active': 'isActive',
            'applied_to_windows': 'appliedToWindows',
            'applied_to_linux': 'appliedToLinux',
            'is_always_applied': 'isAlwaysApplied',
            'applied_to_sandbox_stage': 'appliedToSandboxStage',
            'applied_to_published_stage': 'appliedToPublishedStage',
            'custom_property_name': 'customPropertyName',
            'component_type': 'componentType',
            'comparison': 'comparison',
            'values': 'values'
        }

        self._id = id
        self._href = href
        self._name = name
        self._description = description
        self._is_active = is_active
        self._applied_to_windows = applied_to_windows
        self._applied_to_linux = applied_to_linux
        self._is_always_applied = is_always_applied
        self._applied_to_sandbox_stage = applied_to_sandbox_stage
        self._applied_to_published_stage = applied_to_published_stage
        self._custom_property_name = custom_property_name
        self._component_type = component_type
        self._comparison = comparison
        self._values = values

    @property
    def id(self):
        """
        Gets the id of this BootstrapPolicy1.

        :return: The id of this BootstrapPolicy1.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this BootstrapPolicy1.

        :param id: The id of this BootstrapPolicy1.
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def href(self):
        """
        Gets the href of this BootstrapPolicy1.

        :return: The href of this BootstrapPolicy1.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """
        Sets the href of this BootstrapPolicy1.

        :param href: The href of this BootstrapPolicy1.
        :type: str
        """

        self._href = href

    @property
    def name(self):
        """
        Gets the name of this BootstrapPolicy1.

        :return: The name of this BootstrapPolicy1.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this BootstrapPolicy1.

        :param name: The name of this BootstrapPolicy1.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def description(self):
        """
        Gets the description of this BootstrapPolicy1.

        :return: The description of this BootstrapPolicy1.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this BootstrapPolicy1.

        :param description: The description of this BootstrapPolicy1.
        :type: str
        """

        self._description = description

    @property
    def is_active(self):
        """
        Gets the is_active of this BootstrapPolicy1.

        :return: The is_active of this BootstrapPolicy1.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """
        Sets the is_active of this BootstrapPolicy1.

        :param is_active: The is_active of this BootstrapPolicy1.
        :type: bool
        """

        self._is_active = is_active

    @property
    def applied_to_windows(self):
        """
        Gets the applied_to_windows of this BootstrapPolicy1.

        :return: The applied_to_windows of this BootstrapPolicy1.
        :rtype: bool
        """
        return self._applied_to_windows

    @applied_to_windows.setter
    def applied_to_windows(self, applied_to_windows):
        """
        Sets the applied_to_windows of this BootstrapPolicy1.

        :param applied_to_windows: The applied_to_windows of this BootstrapPolicy1.
        :type: bool
        """
        if applied_to_windows is None:
            raise ValueError("Invalid value for `applied_to_windows`, must not be `None`")

        self._applied_to_windows = applied_to_windows

    @property
    def applied_to_linux(self):
        """
        Gets the applied_to_linux of this BootstrapPolicy1.

        :return: The applied_to_linux of this BootstrapPolicy1.
        :rtype: bool
        """
        return self._applied_to_linux

    @applied_to_linux.setter
    def applied_to_linux(self, applied_to_linux):
        """
        Sets the applied_to_linux of this BootstrapPolicy1.

        :param applied_to_linux: The applied_to_linux of this BootstrapPolicy1.
        :type: bool
        """
        if applied_to_linux is None:
            raise ValueError("Invalid value for `applied_to_linux`, must not be `None`")

        self._applied_to_linux = applied_to_linux

    @property
    def is_always_applied(self):
        """
        Gets the is_always_applied of this BootstrapPolicy1.

        :return: The is_always_applied of this BootstrapPolicy1.
        :rtype: str
        """
        return self._is_always_applied

    @is_always_applied.setter
    def is_always_applied(self, is_always_applied):
        """
        Sets the is_always_applied of this BootstrapPolicy1.

        :param is_always_applied: The is_always_applied of this BootstrapPolicy1.
        :type: str
        """
        if is_always_applied is None:
            raise ValueError("Invalid value for `is_always_applied`, must not be `None`")

        self._is_always_applied = is_always_applied

    @property
    def applied_to_sandbox_stage(self):
        """
        Gets the applied_to_sandbox_stage of this BootstrapPolicy1.

        :return: The applied_to_sandbox_stage of this BootstrapPolicy1.
        :rtype: bool
        """
        return self._applied_to_sandbox_stage

    @applied_to_sandbox_stage.setter
    def applied_to_sandbox_stage(self, applied_to_sandbox_stage):
        """
        Sets the applied_to_sandbox_stage of this BootstrapPolicy1.

        :param applied_to_sandbox_stage: The applied_to_sandbox_stage of this BootstrapPolicy1.
        :type: bool
        """
        if applied_to_sandbox_stage is None:
            raise ValueError("Invalid value for `applied_to_sandbox_stage`, must not be `None`")

        self._applied_to_sandbox_stage = applied_to_sandbox_stage

    @property
    def applied_to_published_stage(self):
        """
        Gets the applied_to_published_stage of this BootstrapPolicy1.

        :return: The applied_to_published_stage of this BootstrapPolicy1.
        :rtype: bool
        """
        return self._applied_to_published_stage

    @applied_to_published_stage.setter
    def applied_to_published_stage(self, applied_to_published_stage):
        """
        Sets the applied_to_published_stage of this BootstrapPolicy1.

        :param applied_to_published_stage: The applied_to_published_stage of this BootstrapPolicy1.
        :type: bool
        """
        if applied_to_published_stage is None:
            raise ValueError("Invalid value for `applied_to_published_stage`, must not be `None`")

        self._applied_to_published_stage = applied_to_published_stage

    @property
    def custom_property_name(self):
        """
        Gets the custom_property_name of this BootstrapPolicy1.

        :return: The custom_property_name of this BootstrapPolicy1.
        :rtype: str
        """
        return self._custom_property_name

    @custom_property_name.setter
    def custom_property_name(self, custom_property_name):
        """
        Sets the custom_property_name of this BootstrapPolicy1.

        :param custom_property_name: The custom_property_name of this BootstrapPolicy1.
        :type: str
        """

        self._custom_property_name = custom_property_name

    @property
    def component_type(self):
        """
        Gets the component_type of this BootstrapPolicy1.

        :return: The component_type of this BootstrapPolicy1.
        :rtype: str
        """
        return self._component_type

    @component_type.setter
    def component_type(self, component_type):
        """
        Sets the component_type of this BootstrapPolicy1.

        :param component_type: The component_type of this BootstrapPolicy1.
        :type: str
        """
        allowed_values = ["ResourcePolicies", "Applications", "LinuxServices", "JavaWebApplications", "UserInterfaces", "WindowsServices"]
        if component_type not in allowed_values:
            raise ValueError(
                "Invalid value for `component_type` ({0}), must be one of {1}"
                .format(component_type, allowed_values)
            )

        self._component_type = component_type

    @property
    def comparison(self):
        """
        Gets the comparison of this BootstrapPolicy1.

        :return: The comparison of this BootstrapPolicy1.
        :rtype: str
        """
        return self._comparison

    @comparison.setter
    def comparison(self, comparison):
        """
        Sets the comparison of this BootstrapPolicy1.

        :param comparison: The comparison of this BootstrapPolicy1.
        :type: str
        """
        allowed_values = ["ContainsAll", "DoesNotContainAll", "ContainsAny", "IsEmpty", "IsNotEmpty", "DoesNotContainAny"]
        if comparison not in allowed_values:
            raise ValueError(
                "Invalid value for `comparison` ({0}), must be one of {1}"
                .format(comparison, allowed_values)
            )

        self._comparison = comparison

    @property
    def values(self):
        """
        Gets the values of this BootstrapPolicy1.

        :return: The values of this BootstrapPolicy1.
        :rtype: list[str]
        """
        return self._values

    @values.setter
    def values(self, values):
        """
        Sets the values of this BootstrapPolicy1.

        :param values: The values of this BootstrapPolicy1.
        :type: list[str]
        """

        self._values = values

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, BootstrapPolicy1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
