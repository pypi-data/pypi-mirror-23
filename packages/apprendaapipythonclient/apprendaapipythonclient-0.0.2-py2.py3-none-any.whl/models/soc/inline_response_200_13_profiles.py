# coding: utf-8

"""
    Platform Operations Rest API

    The Platform Operations REST API can be leveraged to customize the Platform Operator experience of managing infrastructure and applications for the Apprenda Platform. This allows some of the functionality of the Platform's System Operations Center (SOC) to be accomplished through a variety of means such as custom-built UX or command-line interfaces.   For more information about the abilities of Platform Operators, see our documentation on the [SOC](/current/SOC).   ##Authentication   Before making a request, you must be authenticated. Learn how to [get authenticated](/restapi/platformops/v1/authentication).   ##Making a Request   ###Prerequisites   * Installed Platform of version 6.5.1 or later (Note that most endpoints are only available in version 6.7.0 and later)    * Authentication token   * If SOC authorization is enabled on your Platform, you must be assigned as an active Platform Operator   ###Request URL   All requests must use **https**.   The URL for every request you make is the Cloud URI of your Platform followed by \"/soc\" and the path structure of the endpoint. For example, if your Cloud URI is apps.apprenda.harp and you want to get the Add-ons for your Platform, the request URI will be **apps.apprenda.harp/soc/api/v1/addons**.   For more information, see our documentation on [using API resources](/restapi/platformops/v1/using-resources) and [finding your Cloud URI](/current/clouduri).   ###Request Headers   Your authenication token must be passed in the header of all requests using the key **ApprendaSessionToken** (not case sensitive).  

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class InlineResponse20013Profiles(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, node_type=None, database_provider=None, is_load_manager=None, is_off_platform=None, can_host_ui_manager=None, can_host_storage_manager=None, hosts_soc=None):
        """
        InlineResponse20013Profiles - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'node_type': 'str',
            'database_provider': 'str',
            'is_load_manager': 'bool',
            'is_off_platform': 'bool',
            'can_host_ui_manager': 'bool',
            'can_host_storage_manager': 'bool',
            'hosts_soc': 'bool'
        }

        self.attribute_map = {
            'node_type': 'nodeType',
            'database_provider': 'databaseProvider',
            'is_load_manager': 'isLoadManager',
            'is_off_platform': 'isOffPlatform',
            'can_host_ui_manager': 'canHostUIManager',
            'can_host_storage_manager': 'canHostStorageManager',
            'hosts_soc': 'hostsSOC'
        }

        self._node_type = node_type
        self._database_provider = database_provider
        self._is_load_manager = is_load_manager
        self._is_off_platform = is_off_platform
        self._can_host_ui_manager = can_host_ui_manager
        self._can_host_storage_manager = can_host_storage_manager
        self._hosts_soc = hosts_soc

    @property
    def node_type(self):
        """
        Gets the node_type of this InlineResponse20013Profiles.

        :return: The node_type of this InlineResponse20013Profiles.
        :rtype: str
        """
        return self._node_type

    @node_type.setter
    def node_type(self, node_type):
        """
        Sets the node_type of this InlineResponse20013Profiles.

        :param node_type: The node_type of this InlineResponse20013Profiles.
        :type: str
        """
        allowed_values = ["Windows", "Linux", "Database", "LoadManager", "Cache", "ZooKeeper"]
        if node_type not in allowed_values:
            raise ValueError(
                "Invalid value for `node_type` ({0}), must be one of {1}"
                .format(node_type, allowed_values)
            )

        self._node_type = node_type

    @property
    def database_provider(self):
        """
        Gets the database_provider of this InlineResponse20013Profiles.

        :return: The database_provider of this InlineResponse20013Profiles.
        :rtype: str
        """
        return self._database_provider

    @database_provider.setter
    def database_provider(self, database_provider):
        """
        Sets the database_provider of this InlineResponse20013Profiles.

        :param database_provider: The database_provider of this InlineResponse20013Profiles.
        :type: str
        """
        allowed_values = ["None", "SqlServer", "Oracle11G", "Oracle12c"]
        if database_provider not in allowed_values:
            raise ValueError(
                "Invalid value for `database_provider` ({0}), must be one of {1}"
                .format(database_provider, allowed_values)
            )

        self._database_provider = database_provider

    @property
    def is_load_manager(self):
        """
        Gets the is_load_manager of this InlineResponse20013Profiles.

        :return: The is_load_manager of this InlineResponse20013Profiles.
        :rtype: bool
        """
        return self._is_load_manager

    @is_load_manager.setter
    def is_load_manager(self, is_load_manager):
        """
        Sets the is_load_manager of this InlineResponse20013Profiles.

        :param is_load_manager: The is_load_manager of this InlineResponse20013Profiles.
        :type: bool
        """

        self._is_load_manager = is_load_manager

    @property
    def is_off_platform(self):
        """
        Gets the is_off_platform of this InlineResponse20013Profiles.

        :return: The is_off_platform of this InlineResponse20013Profiles.
        :rtype: bool
        """
        return self._is_off_platform

    @is_off_platform.setter
    def is_off_platform(self, is_off_platform):
        """
        Sets the is_off_platform of this InlineResponse20013Profiles.

        :param is_off_platform: The is_off_platform of this InlineResponse20013Profiles.
        :type: bool
        """

        self._is_off_platform = is_off_platform

    @property
    def can_host_ui_manager(self):
        """
        Gets the can_host_ui_manager of this InlineResponse20013Profiles.

        :return: The can_host_ui_manager of this InlineResponse20013Profiles.
        :rtype: bool
        """
        return self._can_host_ui_manager

    @can_host_ui_manager.setter
    def can_host_ui_manager(self, can_host_ui_manager):
        """
        Sets the can_host_ui_manager of this InlineResponse20013Profiles.

        :param can_host_ui_manager: The can_host_ui_manager of this InlineResponse20013Profiles.
        :type: bool
        """

        self._can_host_ui_manager = can_host_ui_manager

    @property
    def can_host_storage_manager(self):
        """
        Gets the can_host_storage_manager of this InlineResponse20013Profiles.

        :return: The can_host_storage_manager of this InlineResponse20013Profiles.
        :rtype: bool
        """
        return self._can_host_storage_manager

    @can_host_storage_manager.setter
    def can_host_storage_manager(self, can_host_storage_manager):
        """
        Sets the can_host_storage_manager of this InlineResponse20013Profiles.

        :param can_host_storage_manager: The can_host_storage_manager of this InlineResponse20013Profiles.
        :type: bool
        """

        self._can_host_storage_manager = can_host_storage_manager

    @property
    def hosts_soc(self):
        """
        Gets the hosts_soc of this InlineResponse20013Profiles.

        :return: The hosts_soc of this InlineResponse20013Profiles.
        :rtype: bool
        """
        return self._hosts_soc

    @hosts_soc.setter
    def hosts_soc(self, hosts_soc):
        """
        Sets the hosts_soc of this InlineResponse20013Profiles.

        :param hosts_soc: The hosts_soc of this InlineResponse20013Profiles.
        :type: bool
        """

        self._hosts_soc = hosts_soc

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, InlineResponse20013Profiles):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
