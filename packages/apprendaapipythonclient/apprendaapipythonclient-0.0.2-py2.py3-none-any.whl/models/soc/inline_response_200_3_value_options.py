# coding: utf-8

"""
    Platform Operations Rest API

    The Platform Operations REST API can be leveraged to customize the Platform Operator experience of managing infrastructure and applications for the Apprenda Platform. This allows some of the functionality of the Platform's System Operations Center (SOC) to be accomplished through a variety of means such as custom-built UX or command-line interfaces.   For more information about the abilities of Platform Operators, see our documentation on the [SOC](/current/SOC).   ##Authentication   Before making a request, you must be authenticated. Learn how to [get authenticated](/restapi/platformops/v1/authentication).   ##Making a Request   ###Prerequisites   * Installed Platform of version 6.5.1 or later (Note that most endpoints are only available in version 6.7.0 and later)    * Authentication token   * If SOC authorization is enabled on your Platform, you must be assigned as an active Platform Operator   ###Request URL   All requests must use **https**.   The URL for every request you make is the Cloud URI of your Platform followed by \"/soc\" and the path structure of the endpoint. For example, if your Cloud URI is apps.apprenda.harp and you want to get the Add-ons for your Platform, the request URI will be **apps.apprenda.harp/soc/api/v1/addons**.   For more information, see our documentation on [using API resources](/restapi/platformops/v1/using-resources) and [finding your Cloud URI](/current/clouduri).   ###Request Headers   Your authenication token must be passed in the header of all requests using the key **ApprendaSessionToken** (not case sensitive).  

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class InlineResponse2003ValueOptions(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, possible_values=None, default_values=None, allow_custom_values=None):
        """
        InlineResponse2003ValueOptions - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'possible_values': 'list[str]',
            'default_values': 'list[str]',
            'allow_custom_values': 'bool'
        }

        self.attribute_map = {
            'possible_values': 'possibleValues',
            'default_values': 'defaultValues',
            'allow_custom_values': 'allowCustomValues'
        }

        self._possible_values = possible_values
        self._default_values = default_values
        self._allow_custom_values = allow_custom_values

    @property
    def possible_values(self):
        """
        Gets the possible_values of this InlineResponse2003ValueOptions.

        :return: The possible_values of this InlineResponse2003ValueOptions.
        :rtype: list[str]
        """
        return self._possible_values

    @possible_values.setter
    def possible_values(self, possible_values):
        """
        Sets the possible_values of this InlineResponse2003ValueOptions.

        :param possible_values: The possible_values of this InlineResponse2003ValueOptions.
        :type: list[str]
        """

        self._possible_values = possible_values

    @property
    def default_values(self):
        """
        Gets the default_values of this InlineResponse2003ValueOptions.

        :return: The default_values of this InlineResponse2003ValueOptions.
        :rtype: list[str]
        """
        return self._default_values

    @default_values.setter
    def default_values(self, default_values):
        """
        Sets the default_values of this InlineResponse2003ValueOptions.

        :param default_values: The default_values of this InlineResponse2003ValueOptions.
        :type: list[str]
        """

        self._default_values = default_values

    @property
    def allow_custom_values(self):
        """
        Gets the allow_custom_values of this InlineResponse2003ValueOptions.

        :return: The allow_custom_values of this InlineResponse2003ValueOptions.
        :rtype: bool
        """
        return self._allow_custom_values

    @allow_custom_values.setter
    def allow_custom_values(self, allow_custom_values):
        """
        Sets the allow_custom_values of this InlineResponse2003ValueOptions.

        :param allow_custom_values: The allow_custom_values of this InlineResponse2003ValueOptions.
        :type: bool
        """

        self._allow_custom_values = allow_custom_values

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, InlineResponse2003ValueOptions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
