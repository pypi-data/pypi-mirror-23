# coding: utf-8

"""
    Account Management REST API

    The Account Management REST API can be used to manage user accounts, roles, and securables for applications on the Platform. The endpoints of this API allow you to perform the same the functionality of the Platform's Account Portal for your Tenant's applications.   For more information, see our documentation on the [Account Portal](/current/account).     ## Authentication    Before making a request, you must be authenticated. Follow these instuctions [to get authenticated](/restapi/accountmanagement/v1/authentication). ## Making a Request   ### Prerequisites    * Installed Platform of version 6.6.0 or later    * An active user account assigned to an active Tenant Account or Developer Team    * Authentication token   ### Request URL    All requests must use **https**.       The URL for every request you make is the URL of your Platform followed by \"/account\" and the path structure of the endpoint. For example, if your Platform URL is https://apps.apprenda.harp and you want to get a list of all user accounts for your Tenant, the request URL will be https://apps.apprenda.harp/account/api/v1/users.     For more information, see our documentation on [using api resources](/restapi/accountmanagement/v1/using-resources) and [finding your Cloud URI](/current/clouduri).    ### Request Headers  Your authenication token must be passed in the header of all requests using the key **ApprendaSessionToken** (not case sensitive).    

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class InlineResponse2003Items(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, description=None, href=None, name=None, roles=None, securables=None, users=None):
        """
        InlineResponse2003Items - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'description': 'str',
            'href': 'str',
            'name': 'str',
            'roles': 'InlineResponse200Plans',
            'securables': 'InlineResponse200Plans',
            'users': 'InlineResponse200Plans'
        }

        self.attribute_map = {
            'id': 'id',
            'description': 'description',
            'href': 'href',
            'name': 'name',
            'roles': 'roles',
            'securables': 'securables',
            'users': 'users'
        }

        self._id = id
        self._description = description
        self._href = href
        self._name = name
        self._roles = roles
        self._securables = securables
        self._users = users

    @property
    def id(self):
        """
        Gets the id of this InlineResponse2003Items.

        :return: The id of this InlineResponse2003Items.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this InlineResponse2003Items.

        :param id: The id of this InlineResponse2003Items.
        :type: str
        """

        self._id = id

    @property
    def description(self):
        """
        Gets the description of this InlineResponse2003Items.

        :return: The description of this InlineResponse2003Items.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this InlineResponse2003Items.

        :param description: The description of this InlineResponse2003Items.
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def href(self):
        """
        Gets the href of this InlineResponse2003Items.

        :return: The href of this InlineResponse2003Items.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """
        Sets the href of this InlineResponse2003Items.

        :param href: The href of this InlineResponse2003Items.
        :type: str
        """

        self._href = href

    @property
    def name(self):
        """
        Gets the name of this InlineResponse2003Items.

        :return: The name of this InlineResponse2003Items.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this InlineResponse2003Items.

        :param name: The name of this InlineResponse2003Items.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def roles(self):
        """
        Gets the roles of this InlineResponse2003Items.

        :return: The roles of this InlineResponse2003Items.
        :rtype: InlineResponse200Plans
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """
        Sets the roles of this InlineResponse2003Items.

        :param roles: The roles of this InlineResponse2003Items.
        :type: InlineResponse200Plans
        """

        self._roles = roles

    @property
    def securables(self):
        """
        Gets the securables of this InlineResponse2003Items.

        :return: The securables of this InlineResponse2003Items.
        :rtype: InlineResponse200Plans
        """
        return self._securables

    @securables.setter
    def securables(self, securables):
        """
        Sets the securables of this InlineResponse2003Items.

        :param securables: The securables of this InlineResponse2003Items.
        :type: InlineResponse200Plans
        """

        self._securables = securables

    @property
    def users(self):
        """
        Gets the users of this InlineResponse2003Items.

        :return: The users of this InlineResponse2003Items.
        :rtype: InlineResponse200Plans
        """
        return self._users

    @users.setter
    def users(self, users):
        """
        Sets the users of this InlineResponse2003Items.

        :param users: The users of this InlineResponse2003Items.
        :type: InlineResponse200Plans
        """

        self._users = users

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, InlineResponse2003Items):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
