# coding: utf-8

"""
    Account Management REST API

    The Account Management REST API can be used to manage user accounts, roles, and securables for applications on the Platform. The endpoints of this API allow you to perform the same the functionality of the Platform's Account Portal for your Tenant's applications.   For more information, see our documentation on the [Account Portal](/current/account).     ## Authentication    Before making a request, you must be authenticated. Follow these instuctions [to get authenticated](/restapi/accountmanagement/v1/authentication). ## Making a Request   ### Prerequisites    * Installed Platform of version 6.6.0 or later    * An active user account assigned to an active Tenant Account or Developer Team    * Authentication token   ### Request URL    All requests must use **https**.       The URL for every request you make is the URL of your Platform followed by \"/account\" and the path structure of the endpoint. For example, if your Platform URL is https://apps.apprenda.harp and you want to get a list of all user accounts for your Tenant, the request URL will be https://apps.apprenda.harp/account/api/v1/users.     For more information, see our documentation on [using api resources](/restapi/accountmanagement/v1/using-resources) and [finding your Cloud URI](/current/clouduri).    ### Request Headers  Your authenication token must be passed in the header of all requests using the key **ApprendaSessionToken** (not case sensitive).    

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class InlineResponse2004AssignedTo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, description=None, email=None, first_name=None, href=None, identifier=None, is_enabled=False, last_name=None, middle_name=None, name=None, prefix=None, roles=None, subscriptions=None, suffix=None):
        """
        InlineResponse2004AssignedTo - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'description': 'str',
            'email': 'str',
            'first_name': 'str',
            'href': 'str',
            'identifier': 'str',
            'is_enabled': 'bool',
            'last_name': 'str',
            'middle_name': 'str',
            'name': 'str',
            'prefix': 'str',
            'roles': 'InlineResponse200Plans',
            'subscriptions': 'InlineResponse200Plans',
            'suffix': 'str'
        }

        self.attribute_map = {
            'description': 'description',
            'email': 'email',
            'first_name': 'firstName',
            'href': 'href',
            'identifier': 'identifier',
            'is_enabled': 'isEnabled',
            'last_name': 'lastName',
            'middle_name': 'middleName',
            'name': 'name',
            'prefix': 'prefix',
            'roles': 'roles',
            'subscriptions': 'subscriptions',
            'suffix': 'suffix'
        }

        self._description = description
        self._email = email
        self._first_name = first_name
        self._href = href
        self._identifier = identifier
        self._is_enabled = is_enabled
        self._last_name = last_name
        self._middle_name = middle_name
        self._name = name
        self._prefix = prefix
        self._roles = roles
        self._subscriptions = subscriptions
        self._suffix = suffix

    @property
    def description(self):
        """
        Gets the description of this InlineResponse2004AssignedTo.

        :return: The description of this InlineResponse2004AssignedTo.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this InlineResponse2004AssignedTo.

        :param description: The description of this InlineResponse2004AssignedTo.
        :type: str
        """

        self._description = description

    @property
    def email(self):
        """
        Gets the email of this InlineResponse2004AssignedTo.

        :return: The email of this InlineResponse2004AssignedTo.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this InlineResponse2004AssignedTo.

        :param email: The email of this InlineResponse2004AssignedTo.
        :type: str
        """

        self._email = email

    @property
    def first_name(self):
        """
        Gets the first_name of this InlineResponse2004AssignedTo.

        :return: The first_name of this InlineResponse2004AssignedTo.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """
        Sets the first_name of this InlineResponse2004AssignedTo.

        :param first_name: The first_name of this InlineResponse2004AssignedTo.
        :type: str
        """

        self._first_name = first_name

    @property
    def href(self):
        """
        Gets the href of this InlineResponse2004AssignedTo.

        :return: The href of this InlineResponse2004AssignedTo.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """
        Sets the href of this InlineResponse2004AssignedTo.

        :param href: The href of this InlineResponse2004AssignedTo.
        :type: str
        """

        self._href = href

    @property
    def identifier(self):
        """
        Gets the identifier of this InlineResponse2004AssignedTo.

        :return: The identifier of this InlineResponse2004AssignedTo.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """
        Sets the identifier of this InlineResponse2004AssignedTo.

        :param identifier: The identifier of this InlineResponse2004AssignedTo.
        :type: str
        """

        self._identifier = identifier

    @property
    def is_enabled(self):
        """
        Gets the is_enabled of this InlineResponse2004AssignedTo.

        :return: The is_enabled of this InlineResponse2004AssignedTo.
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """
        Sets the is_enabled of this InlineResponse2004AssignedTo.

        :param is_enabled: The is_enabled of this InlineResponse2004AssignedTo.
        :type: bool
        """

        self._is_enabled = is_enabled

    @property
    def last_name(self):
        """
        Gets the last_name of this InlineResponse2004AssignedTo.

        :return: The last_name of this InlineResponse2004AssignedTo.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """
        Sets the last_name of this InlineResponse2004AssignedTo.

        :param last_name: The last_name of this InlineResponse2004AssignedTo.
        :type: str
        """

        self._last_name = last_name

    @property
    def middle_name(self):
        """
        Gets the middle_name of this InlineResponse2004AssignedTo.

        :return: The middle_name of this InlineResponse2004AssignedTo.
        :rtype: str
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name):
        """
        Sets the middle_name of this InlineResponse2004AssignedTo.

        :param middle_name: The middle_name of this InlineResponse2004AssignedTo.
        :type: str
        """

        self._middle_name = middle_name

    @property
    def name(self):
        """
        Gets the name of this InlineResponse2004AssignedTo.

        :return: The name of this InlineResponse2004AssignedTo.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this InlineResponse2004AssignedTo.

        :param name: The name of this InlineResponse2004AssignedTo.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def prefix(self):
        """
        Gets the prefix of this InlineResponse2004AssignedTo.

        :return: The prefix of this InlineResponse2004AssignedTo.
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """
        Sets the prefix of this InlineResponse2004AssignedTo.

        :param prefix: The prefix of this InlineResponse2004AssignedTo.
        :type: str
        """

        self._prefix = prefix

    @property
    def roles(self):
        """
        Gets the roles of this InlineResponse2004AssignedTo.

        :return: The roles of this InlineResponse2004AssignedTo.
        :rtype: InlineResponse200Plans
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """
        Sets the roles of this InlineResponse2004AssignedTo.

        :param roles: The roles of this InlineResponse2004AssignedTo.
        :type: InlineResponse200Plans
        """

        self._roles = roles

    @property
    def subscriptions(self):
        """
        Gets the subscriptions of this InlineResponse2004AssignedTo.

        :return: The subscriptions of this InlineResponse2004AssignedTo.
        :rtype: InlineResponse200Plans
        """
        return self._subscriptions

    @subscriptions.setter
    def subscriptions(self, subscriptions):
        """
        Sets the subscriptions of this InlineResponse2004AssignedTo.

        :param subscriptions: The subscriptions of this InlineResponse2004AssignedTo.
        :type: InlineResponse200Plans
        """

        self._subscriptions = subscriptions

    @property
    def suffix(self):
        """
        Gets the suffix of this InlineResponse2004AssignedTo.

        :return: The suffix of this InlineResponse2004AssignedTo.
        :rtype: str
        """
        return self._suffix

    @suffix.setter
    def suffix(self, suffix):
        """
        Sets the suffix of this InlineResponse2004AssignedTo.

        :param suffix: The suffix of this InlineResponse2004AssignedTo.
        :type: str
        """

        self._suffix = suffix

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, InlineResponse2004AssignedTo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
