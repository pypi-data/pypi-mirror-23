# coding: utf-8

"""
    Account Management REST API

    The Account Management REST API can be used to manage user accounts, roles, and securables for applications on the Platform. The endpoints of this API allow you to perform the same the functionality of the Platform's Account Portal for your Tenant's applications.   For more information, see our documentation on the [Account Portal](/current/account).     ## Authentication    Before making a request, you must be authenticated. Follow these instuctions [to get authenticated](/restapi/accountmanagement/v1/authentication). ## Making a Request   ### Prerequisites    * Installed Platform of version 6.6.0 or later    * An active user account assigned to an active Tenant Account or Developer Team    * Authentication token   ### Request URL    All requests must use **https**.       The URL for every request you make is the URL of your Platform followed by \"/account\" and the path structure of the endpoint. For example, if your Platform URL is https://apps.apprenda.harp and you want to get a list of all user accounts for your Tenant, the request URL will be https://apps.apprenda.harp/account/api/v1/users.     For more information, see our documentation on [using api resources](/restapi/accountmanagement/v1/using-resources) and [finding your Cloud URI](/current/clouduri).    ### Request Headers  Your authenication token must be passed in the header of all requests using the key **ApprendaSessionToken** (not case sensitive).    

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class InlineResponse2004Items(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, app_version=None, group=None, assigned_to=None, auto_renew=False, created_date=None, description=None, last_renewal_date=None, locator=None, label=None, next_renewal_date=None, provider_id=None, edition_name=None, plan=None, status=None, termination_date=None, href=None):
        """
        InlineResponse2004Items - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'app_version': 'InlineResponse200Plans',
            'group': 'str',
            'assigned_to': 'InlineResponse2004AssignedTo',
            'auto_renew': 'bool',
            'created_date': 'datetime',
            'description': 'str',
            'last_renewal_date': 'datetime',
            'locator': 'str',
            'label': 'str',
            'next_renewal_date': 'datetime',
            'provider_id': 'str',
            'edition_name': 'str',
            'plan': 'InlineResponse200Plans',
            'status': 'str',
            'termination_date': 'datetime',
            'href': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'app_version': 'appVersion',
            'group': 'group',
            'assigned_to': 'assignedTo',
            'auto_renew': 'autoRenew',
            'created_date': 'createdDate',
            'description': 'description',
            'last_renewal_date': 'lastRenewalDate',
            'locator': 'locator',
            'label': 'label',
            'next_renewal_date': 'nextRenewalDate',
            'provider_id': 'providerId',
            'edition_name': 'editionName',
            'plan': 'plan',
            'status': 'status',
            'termination_date': 'terminationDate',
            'href': 'href'
        }

        self._id = id
        self._app_version = app_version
        self._group = group
        self._assigned_to = assigned_to
        self._auto_renew = auto_renew
        self._created_date = created_date
        self._description = description
        self._last_renewal_date = last_renewal_date
        self._locator = locator
        self._label = label
        self._next_renewal_date = next_renewal_date
        self._provider_id = provider_id
        self._edition_name = edition_name
        self._plan = plan
        self._status = status
        self._termination_date = termination_date
        self._href = href

    @property
    def id(self):
        """
        Gets the id of this InlineResponse2004Items.

        :return: The id of this InlineResponse2004Items.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this InlineResponse2004Items.

        :param id: The id of this InlineResponse2004Items.
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def app_version(self):
        """
        Gets the app_version of this InlineResponse2004Items.

        :return: The app_version of this InlineResponse2004Items.
        :rtype: InlineResponse200Plans
        """
        return self._app_version

    @app_version.setter
    def app_version(self, app_version):
        """
        Sets the app_version of this InlineResponse2004Items.

        :param app_version: The app_version of this InlineResponse2004Items.
        :type: InlineResponse200Plans
        """

        self._app_version = app_version

    @property
    def group(self):
        """
        Gets the group of this InlineResponse2004Items.

        :return: The group of this InlineResponse2004Items.
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """
        Sets the group of this InlineResponse2004Items.

        :param group: The group of this InlineResponse2004Items.
        :type: str
        """

        self._group = group

    @property
    def assigned_to(self):
        """
        Gets the assigned_to of this InlineResponse2004Items.

        :return: The assigned_to of this InlineResponse2004Items.
        :rtype: InlineResponse2004AssignedTo
        """
        return self._assigned_to

    @assigned_to.setter
    def assigned_to(self, assigned_to):
        """
        Sets the assigned_to of this InlineResponse2004Items.

        :param assigned_to: The assigned_to of this InlineResponse2004Items.
        :type: InlineResponse2004AssignedTo
        """

        self._assigned_to = assigned_to

    @property
    def auto_renew(self):
        """
        Gets the auto_renew of this InlineResponse2004Items.

        :return: The auto_renew of this InlineResponse2004Items.
        :rtype: bool
        """
        return self._auto_renew

    @auto_renew.setter
    def auto_renew(self, auto_renew):
        """
        Sets the auto_renew of this InlineResponse2004Items.

        :param auto_renew: The auto_renew of this InlineResponse2004Items.
        :type: bool
        """
        if auto_renew is None:
            raise ValueError("Invalid value for `auto_renew`, must not be `None`")

        self._auto_renew = auto_renew

    @property
    def created_date(self):
        """
        Gets the created_date of this InlineResponse2004Items.

        :return: The created_date of this InlineResponse2004Items.
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """
        Sets the created_date of this InlineResponse2004Items.

        :param created_date: The created_date of this InlineResponse2004Items.
        :type: datetime
        """
        if created_date is None:
            raise ValueError("Invalid value for `created_date`, must not be `None`")

        self._created_date = created_date

    @property
    def description(self):
        """
        Gets the description of this InlineResponse2004Items.

        :return: The description of this InlineResponse2004Items.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this InlineResponse2004Items.

        :param description: The description of this InlineResponse2004Items.
        :type: str
        """

        self._description = description

    @property
    def last_renewal_date(self):
        """
        Gets the last_renewal_date of this InlineResponse2004Items.

        :return: The last_renewal_date of this InlineResponse2004Items.
        :rtype: datetime
        """
        return self._last_renewal_date

    @last_renewal_date.setter
    def last_renewal_date(self, last_renewal_date):
        """
        Sets the last_renewal_date of this InlineResponse2004Items.

        :param last_renewal_date: The last_renewal_date of this InlineResponse2004Items.
        :type: datetime
        """

        self._last_renewal_date = last_renewal_date

    @property
    def locator(self):
        """
        Gets the locator of this InlineResponse2004Items.

        :return: The locator of this InlineResponse2004Items.
        :rtype: str
        """
        return self._locator

    @locator.setter
    def locator(self, locator):
        """
        Sets the locator of this InlineResponse2004Items.

        :param locator: The locator of this InlineResponse2004Items.
        :type: str
        """

        self._locator = locator

    @property
    def label(self):
        """
        Gets the label of this InlineResponse2004Items.

        :return: The label of this InlineResponse2004Items.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """
        Sets the label of this InlineResponse2004Items.

        :param label: The label of this InlineResponse2004Items.
        :type: str
        """

        self._label = label

    @property
    def next_renewal_date(self):
        """
        Gets the next_renewal_date of this InlineResponse2004Items.

        :return: The next_renewal_date of this InlineResponse2004Items.
        :rtype: datetime
        """
        return self._next_renewal_date

    @next_renewal_date.setter
    def next_renewal_date(self, next_renewal_date):
        """
        Sets the next_renewal_date of this InlineResponse2004Items.

        :param next_renewal_date: The next_renewal_date of this InlineResponse2004Items.
        :type: datetime
        """

        self._next_renewal_date = next_renewal_date

    @property
    def provider_id(self):
        """
        Gets the provider_id of this InlineResponse2004Items.

        :return: The provider_id of this InlineResponse2004Items.
        :rtype: str
        """
        return self._provider_id

    @provider_id.setter
    def provider_id(self, provider_id):
        """
        Sets the provider_id of this InlineResponse2004Items.

        :param provider_id: The provider_id of this InlineResponse2004Items.
        :type: str
        """

        self._provider_id = provider_id

    @property
    def edition_name(self):
        """
        Gets the edition_name of this InlineResponse2004Items.

        :return: The edition_name of this InlineResponse2004Items.
        :rtype: str
        """
        return self._edition_name

    @edition_name.setter
    def edition_name(self, edition_name):
        """
        Sets the edition_name of this InlineResponse2004Items.

        :param edition_name: The edition_name of this InlineResponse2004Items.
        :type: str
        """

        self._edition_name = edition_name

    @property
    def plan(self):
        """
        Gets the plan of this InlineResponse2004Items.

        :return: The plan of this InlineResponse2004Items.
        :rtype: InlineResponse200Plans
        """
        return self._plan

    @plan.setter
    def plan(self, plan):
        """
        Sets the plan of this InlineResponse2004Items.

        :param plan: The plan of this InlineResponse2004Items.
        :type: InlineResponse200Plans
        """

        self._plan = plan

    @property
    def status(self):
        """
        Gets the status of this InlineResponse2004Items.

        :return: The status of this InlineResponse2004Items.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this InlineResponse2004Items.

        :param status: The status of this InlineResponse2004Items.
        :type: str
        """

        self._status = status

    @property
    def termination_date(self):
        """
        Gets the termination_date of this InlineResponse2004Items.

        :return: The termination_date of this InlineResponse2004Items.
        :rtype: datetime
        """
        return self._termination_date

    @termination_date.setter
    def termination_date(self, termination_date):
        """
        Sets the termination_date of this InlineResponse2004Items.

        :param termination_date: The termination_date of this InlineResponse2004Items.
        :type: datetime
        """

        self._termination_date = termination_date

    @property
    def href(self):
        """
        Gets the href of this InlineResponse2004Items.

        :return: The href of this InlineResponse2004Items.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """
        Sets the href of this InlineResponse2004Items.

        :param href: The href of this InlineResponse2004Items.
        :type: str
        """

        self._href = href

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, InlineResponse2004Items):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
