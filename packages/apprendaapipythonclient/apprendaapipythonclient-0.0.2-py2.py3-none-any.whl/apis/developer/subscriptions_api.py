# coding: utf-8

"""
    Apprenda.DeveloperPortal.Web

    The Application Management REST API can be leveraged to customize the Developer experience of deploying and managing applications  on the Apprenda Platform. This allows some of the functionality of the Platform's [Developer Portal](/current/developer-portal)to be accomplished through a variety of means such as custom-built UX or command-line interfaces.     ##Authentication    Before making a request, you must be authenticated. Learn how to [get authenticated](/restapi/appmanagement/v1/authentication).    ##Making a Request    ###Prerequisites    * Installed Platform of version 4.5.0 or later     * Authentication token     * To use this API you must be part of a [Development Team or Tenant](/current/create-users) and have an [active subscription](/current/dev-portal-setup#create) to Developer Portal    ###Request URL    All requests must use **https**.    The URL for every request you make is the Cloud URI of your Platform followed by \"/developer\" and the path structure of the endpoint. For example, if your Cloud URI is apps.apprenda.harp and you want to get the Add-ons for your Platform, the request URI will be **apps.apprenda.harp/developer/api/v1/addons**.      For more information, see our documentation on [using API resources](/restapi/appmanagement/v1/resources) and [finding your Cloud URI](/current/clouduri).

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from configuration import Configuration
from api_client import ApiClient


class SubscriptionsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def delete_api_v1_apps_app_alias_versions_version_alias_tenants_tenant_alias_subscriptions_locator(self, app_alias, version_alias, tenant_alias, locator, **kwargs):
        """
        Delete a subscription
        Delete a subscription by locator
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_api_v1_apps_app_alias_versions_version_alias_tenants_tenant_alias_subscriptions_locator(app_alias, version_alias, tenant_alias, locator, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str app_alias: (required)
        :param str version_alias: (required)
        :param str tenant_alias: (required)
        :param str locator: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_api_v1_apps_app_alias_versions_version_alias_tenants_tenant_alias_subscriptions_locator_with_http_info(app_alias, version_alias, tenant_alias, locator, **kwargs)
        else:
            (data) = self.delete_api_v1_apps_app_alias_versions_version_alias_tenants_tenant_alias_subscriptions_locator_with_http_info(app_alias, version_alias, tenant_alias, locator, **kwargs)
            return data

    def delete_api_v1_apps_app_alias_versions_version_alias_tenants_tenant_alias_subscriptions_locator_with_http_info(self, app_alias, version_alias, tenant_alias, locator, **kwargs):
        """
        Delete a subscription
        Delete a subscription by locator
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_api_v1_apps_app_alias_versions_version_alias_tenants_tenant_alias_subscriptions_locator_with_http_info(app_alias, version_alias, tenant_alias, locator, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str app_alias: (required)
        :param str version_alias: (required)
        :param str tenant_alias: (required)
        :param str locator: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_alias', 'version_alias', 'tenant_alias', 'locator']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_api_v1_apps_app_alias_versions_version_alias_tenants_tenant_alias_subscriptions_locator" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_alias' is set
        if ('app_alias' not in params) or (params['app_alias'] is None):
            raise ValueError("Missing the required parameter `app_alias` when calling `delete_api_v1_apps_app_alias_versions_version_alias_tenants_tenant_alias_subscriptions_locator`")
        # verify the required parameter 'version_alias' is set
        if ('version_alias' not in params) or (params['version_alias'] is None):
            raise ValueError("Missing the required parameter `version_alias` when calling `delete_api_v1_apps_app_alias_versions_version_alias_tenants_tenant_alias_subscriptions_locator`")
        # verify the required parameter 'tenant_alias' is set
        if ('tenant_alias' not in params) or (params['tenant_alias'] is None):
            raise ValueError("Missing the required parameter `tenant_alias` when calling `delete_api_v1_apps_app_alias_versions_version_alias_tenants_tenant_alias_subscriptions_locator`")
        # verify the required parameter 'locator' is set
        if ('locator' not in params) or (params['locator'] is None):
            raise ValueError("Missing the required parameter `locator` when calling `delete_api_v1_apps_app_alias_versions_version_alias_tenants_tenant_alias_subscriptions_locator`")


        collection_formats = {}

        resource_path = '/api/v1/apps/{appAlias}/versions/{versionAlias}/tenants/{tenantAlias}/subscriptions/{locator}'.replace('{format}', 'json')
        path_params = {}
        if 'app_alias' in params:
            path_params['appAlias'] = params['app_alias']
        if 'version_alias' in params:
            path_params['versionAlias'] = params['version_alias']
        if 'tenant_alias' in params:
            path_params['tenantAlias'] = params['tenant_alias']
        if 'locator' in params:
            path_params['locator'] = params['locator']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_api_v1_apps_app_alias_versions_version_alias_tenants_tenant_alias_subscriptions(self, app_alias, version_alias, tenant_alias, **kwargs):
        """
        Get all subscriptions of an application version
        Return all subscriptions associated with an application version.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_api_v1_apps_app_alias_versions_version_alias_tenants_tenant_alias_subscriptions(app_alias, version_alias, tenant_alias, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str app_alias: (required)
        :param str version_alias: (required)
        :param str tenant_alias: (required)
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_api_v1_apps_app_alias_versions_version_alias_tenants_tenant_alias_subscriptions_with_http_info(app_alias, version_alias, tenant_alias, **kwargs)
        else:
            (data) = self.get_api_v1_apps_app_alias_versions_version_alias_tenants_tenant_alias_subscriptions_with_http_info(app_alias, version_alias, tenant_alias, **kwargs)
            return data

    def get_api_v1_apps_app_alias_versions_version_alias_tenants_tenant_alias_subscriptions_with_http_info(self, app_alias, version_alias, tenant_alias, **kwargs):
        """
        Get all subscriptions of an application version
        Return all subscriptions associated with an application version.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_api_v1_apps_app_alias_versions_version_alias_tenants_tenant_alias_subscriptions_with_http_info(app_alias, version_alias, tenant_alias, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str app_alias: (required)
        :param str version_alias: (required)
        :param str tenant_alias: (required)
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_alias', 'version_alias', 'tenant_alias']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_api_v1_apps_app_alias_versions_version_alias_tenants_tenant_alias_subscriptions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_alias' is set
        if ('app_alias' not in params) or (params['app_alias'] is None):
            raise ValueError("Missing the required parameter `app_alias` when calling `get_api_v1_apps_app_alias_versions_version_alias_tenants_tenant_alias_subscriptions`")
        # verify the required parameter 'version_alias' is set
        if ('version_alias' not in params) or (params['version_alias'] is None):
            raise ValueError("Missing the required parameter `version_alias` when calling `get_api_v1_apps_app_alias_versions_version_alias_tenants_tenant_alias_subscriptions`")
        # verify the required parameter 'tenant_alias' is set
        if ('tenant_alias' not in params) or (params['tenant_alias'] is None):
            raise ValueError("Missing the required parameter `tenant_alias` when calling `get_api_v1_apps_app_alias_versions_version_alias_tenants_tenant_alias_subscriptions`")


        collection_formats = {}

        resource_path = '/api/v1/apps/{appAlias}/versions/{versionAlias}/tenants/{tenantAlias}/subscriptions'.replace('{format}', 'json')
        path_params = {}
        if 'app_alias' in params:
            path_params['appAlias'] = params['app_alias']
        if 'version_alias' in params:
            path_params['versionAlias'] = params['version_alias']
        if 'tenant_alias' in params:
            path_params['tenantAlias'] = params['tenant_alias']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2002',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_api_v1_apps_app_alias_versions_version_alias_tenants_tenant_alias_subscriptions_locator(self, app_alias, version_alias, tenant_alias, locator, **kwargs):
        """
        Get single subscription by locator
        Return subscription by locator
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_api_v1_apps_app_alias_versions_version_alias_tenants_tenant_alias_subscriptions_locator(app_alias, version_alias, tenant_alias, locator, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str app_alias: (required)
        :param str version_alias: (required)
        :param str tenant_alias: (required)
        :param str locator: (required)
        :return: InlineResponse2002Items
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_api_v1_apps_app_alias_versions_version_alias_tenants_tenant_alias_subscriptions_locator_with_http_info(app_alias, version_alias, tenant_alias, locator, **kwargs)
        else:
            (data) = self.get_api_v1_apps_app_alias_versions_version_alias_tenants_tenant_alias_subscriptions_locator_with_http_info(app_alias, version_alias, tenant_alias, locator, **kwargs)
            return data

    def get_api_v1_apps_app_alias_versions_version_alias_tenants_tenant_alias_subscriptions_locator_with_http_info(self, app_alias, version_alias, tenant_alias, locator, **kwargs):
        """
        Get single subscription by locator
        Return subscription by locator
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_api_v1_apps_app_alias_versions_version_alias_tenants_tenant_alias_subscriptions_locator_with_http_info(app_alias, version_alias, tenant_alias, locator, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str app_alias: (required)
        :param str version_alias: (required)
        :param str tenant_alias: (required)
        :param str locator: (required)
        :return: InlineResponse2002Items
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_alias', 'version_alias', 'tenant_alias', 'locator']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_api_v1_apps_app_alias_versions_version_alias_tenants_tenant_alias_subscriptions_locator" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_alias' is set
        if ('app_alias' not in params) or (params['app_alias'] is None):
            raise ValueError("Missing the required parameter `app_alias` when calling `get_api_v1_apps_app_alias_versions_version_alias_tenants_tenant_alias_subscriptions_locator`")
        # verify the required parameter 'version_alias' is set
        if ('version_alias' not in params) or (params['version_alias'] is None):
            raise ValueError("Missing the required parameter `version_alias` when calling `get_api_v1_apps_app_alias_versions_version_alias_tenants_tenant_alias_subscriptions_locator`")
        # verify the required parameter 'tenant_alias' is set
        if ('tenant_alias' not in params) or (params['tenant_alias'] is None):
            raise ValueError("Missing the required parameter `tenant_alias` when calling `get_api_v1_apps_app_alias_versions_version_alias_tenants_tenant_alias_subscriptions_locator`")
        # verify the required parameter 'locator' is set
        if ('locator' not in params) or (params['locator'] is None):
            raise ValueError("Missing the required parameter `locator` when calling `get_api_v1_apps_app_alias_versions_version_alias_tenants_tenant_alias_subscriptions_locator`")


        collection_formats = {}

        resource_path = '/api/v1/apps/{appAlias}/versions/{versionAlias}/tenants/{tenantAlias}/subscriptions/{locator}'.replace('{format}', 'json')
        path_params = {}
        if 'app_alias' in params:
            path_params['appAlias'] = params['app_alias']
        if 'version_alias' in params:
            path_params['versionAlias'] = params['version_alias']
        if 'tenant_alias' in params:
            path_params['tenantAlias'] = params['tenant_alias']
        if 'locator' in params:
            path_params['locator'] = params['locator']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2002Items',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def post_api_v1_apps_app_alias_versions_version_alias_tenants_tenant_alias_subscriptions(self, app_alias, version_alias, tenant_alias, **kwargs):
        """
        Create a new subscription
        Create new subscritpions for an application and version
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_api_v1_apps_app_alias_versions_version_alias_tenants_tenant_alias_subscriptions(app_alias, version_alias, tenant_alias, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str app_alias: (required)
        :param str version_alias: (required)
        :param str tenant_alias: (required)
        :param Body body: Collection of information to make a new subscription
        :return: InlineResponse2002Items
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.post_api_v1_apps_app_alias_versions_version_alias_tenants_tenant_alias_subscriptions_with_http_info(app_alias, version_alias, tenant_alias, **kwargs)
        else:
            (data) = self.post_api_v1_apps_app_alias_versions_version_alias_tenants_tenant_alias_subscriptions_with_http_info(app_alias, version_alias, tenant_alias, **kwargs)
            return data

    def post_api_v1_apps_app_alias_versions_version_alias_tenants_tenant_alias_subscriptions_with_http_info(self, app_alias, version_alias, tenant_alias, **kwargs):
        """
        Create a new subscription
        Create new subscritpions for an application and version
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_api_v1_apps_app_alias_versions_version_alias_tenants_tenant_alias_subscriptions_with_http_info(app_alias, version_alias, tenant_alias, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str app_alias: (required)
        :param str version_alias: (required)
        :param str tenant_alias: (required)
        :param Body body: Collection of information to make a new subscription
        :return: InlineResponse2002Items
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_alias', 'version_alias', 'tenant_alias', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_api_v1_apps_app_alias_versions_version_alias_tenants_tenant_alias_subscriptions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_alias' is set
        if ('app_alias' not in params) or (params['app_alias'] is None):
            raise ValueError("Missing the required parameter `app_alias` when calling `post_api_v1_apps_app_alias_versions_version_alias_tenants_tenant_alias_subscriptions`")
        # verify the required parameter 'version_alias' is set
        if ('version_alias' not in params) or (params['version_alias'] is None):
            raise ValueError("Missing the required parameter `version_alias` when calling `post_api_v1_apps_app_alias_versions_version_alias_tenants_tenant_alias_subscriptions`")
        # verify the required parameter 'tenant_alias' is set
        if ('tenant_alias' not in params) or (params['tenant_alias'] is None):
            raise ValueError("Missing the required parameter `tenant_alias` when calling `post_api_v1_apps_app_alias_versions_version_alias_tenants_tenant_alias_subscriptions`")


        collection_formats = {}

        resource_path = '/api/v1/apps/{appAlias}/versions/{versionAlias}/tenants/{tenantAlias}/subscriptions'.replace('{format}', 'json')
        path_params = {}
        if 'app_alias' in params:
            path_params['appAlias'] = params['app_alias']
        if 'version_alias' in params:
            path_params['versionAlias'] = params['version_alias']
        if 'tenant_alias' in params:
            path_params['tenantAlias'] = params['tenant_alias']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2002Items',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
