# coding: utf-8

"""
    Account Management REST API

    The Account Management REST API can be used to manage user accounts, roles, and securables for applications on the Platform. The endpoints of this API allow you to perform the same the functionality of the Platform's Account Portal for your Tenant's applications.   For more information, see our documentation on the [Account Portal](/current/account).     ## Authentication    Before making a request, you must be authenticated. Follow these instuctions [to get authenticated](/restapi/accountmanagement/v1/authentication). ## Making a Request   ### Prerequisites    * Installed Platform of version 6.6.0 or later    * An active user account assigned to an active Tenant Account or Developer Team    * Authentication token   ### Request URL    All requests must use **https**.       The URL for every request you make is the URL of your Platform followed by \"/account\" and the path structure of the endpoint. For example, if your Platform URL is https://apps.apprenda.harp and you want to get a list of all user accounts for your Tenant, the request URL will be https://apps.apprenda.harp/account/api/v1/users.     For more information, see our documentation on [using api resources](/restapi/accountmanagement/v1/using-resources) and [finding your Cloud URI](/current/clouduri).    ### Request Headers  Your authenication token must be passed in the header of all requests using the key **ApprendaSessionToken** (not case sensitive).    

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from configuration import Configuration
from api_client import ApiClient


class RolesApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def api_v1_application_versions_application_version_key_securables_securable_id_roles_delete(self, application_version_key, securable_id, **kwargs):
        """
        Remove role from a securable
        Remove the specified role(s) from a securable.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_application_versions_application_version_key_securables_securable_id_roles_delete(application_version_key, securable_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str application_version_key: Required. Concatenation of application alias and version alias as 'AppAlias-VersionAlias' (required)
        :param str securable_id: Required. Unique Platform assigned id of a securable (required)
        :param list[str] body: Array of role names to be removed from the securable
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.api_v1_application_versions_application_version_key_securables_securable_id_roles_delete_with_http_info(application_version_key, securable_id, **kwargs)
        else:
            (data) = self.api_v1_application_versions_application_version_key_securables_securable_id_roles_delete_with_http_info(application_version_key, securable_id, **kwargs)
            return data

    def api_v1_application_versions_application_version_key_securables_securable_id_roles_delete_with_http_info(self, application_version_key, securable_id, **kwargs):
        """
        Remove role from a securable
        Remove the specified role(s) from a securable.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_application_versions_application_version_key_securables_securable_id_roles_delete_with_http_info(application_version_key, securable_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str application_version_key: Required. Concatenation of application alias and version alias as 'AppAlias-VersionAlias' (required)
        :param str securable_id: Required. Unique Platform assigned id of a securable (required)
        :param list[str] body: Array of role names to be removed from the securable
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['application_version_key', 'securable_id', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_application_versions_application_version_key_securables_securable_id_roles_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'application_version_key' is set
        if ('application_version_key' not in params) or (params['application_version_key'] is None):
            raise ValueError("Missing the required parameter `application_version_key` when calling `api_v1_application_versions_application_version_key_securables_securable_id_roles_delete`")
        # verify the required parameter 'securable_id' is set
        if ('securable_id' not in params) or (params['securable_id'] is None):
            raise ValueError("Missing the required parameter `securable_id` when calling `api_v1_application_versions_application_version_key_securables_securable_id_roles_delete`")


        collection_formats = {}

        resource_path = '/api/v1/applicationVersions/{applicationVersionKey}/securables/{securableId}/roles'.replace('{format}', 'json')
        path_params = {}
        if 'application_version_key' in params:
            path_params['applicationVersionKey'] = params['application_version_key']
        if 'securable_id' in params:
            path_params['securableId'] = params['securable_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def api_v1_application_versions_application_version_key_securables_securable_id_roles_get(self, application_version_key, securable_id, **kwargs):
        """
        Get all roles using a securable
        Returns the roles associated with the securable.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_application_versions_application_version_key_securables_securable_id_roles_get(application_version_key, securable_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str application_version_key: Required. Concatenation of application alias and version alias as 'AppAlias-VersionAlias' (required)
        :param str securable_id: Required. Unique Platform assigned id of a securable (required)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.api_v1_application_versions_application_version_key_securables_securable_id_roles_get_with_http_info(application_version_key, securable_id, **kwargs)
        else:
            (data) = self.api_v1_application_versions_application_version_key_securables_securable_id_roles_get_with_http_info(application_version_key, securable_id, **kwargs)
            return data

    def api_v1_application_versions_application_version_key_securables_securable_id_roles_get_with_http_info(self, application_version_key, securable_id, **kwargs):
        """
        Get all roles using a securable
        Returns the roles associated with the securable.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_application_versions_application_version_key_securables_securable_id_roles_get_with_http_info(application_version_key, securable_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str application_version_key: Required. Concatenation of application alias and version alias as 'AppAlias-VersionAlias' (required)
        :param str securable_id: Required. Unique Platform assigned id of a securable (required)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['application_version_key', 'securable_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_application_versions_application_version_key_securables_securable_id_roles_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'application_version_key' is set
        if ('application_version_key' not in params) or (params['application_version_key'] is None):
            raise ValueError("Missing the required parameter `application_version_key` when calling `api_v1_application_versions_application_version_key_securables_securable_id_roles_get`")
        # verify the required parameter 'securable_id' is set
        if ('securable_id' not in params) or (params['securable_id'] is None):
            raise ValueError("Missing the required parameter `securable_id` when calling `api_v1_application_versions_application_version_key_securables_securable_id_roles_get`")


        collection_formats = {}

        resource_path = '/api/v1/applicationVersions/{applicationVersionKey}/securables/{securableId}/roles'.replace('{format}', 'json')
        path_params = {}
        if 'application_version_key' in params:
            path_params['applicationVersionKey'] = params['application_version_key']
        if 'securable_id' in params:
            path_params['securableId'] = params['securable_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2003',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def api_v1_application_versions_application_version_key_securables_securable_id_roles_post(self, application_version_key, securable_id, **kwargs):
        """
        Assign role(s) to a securable
        Assign role(s) to a securable.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_application_versions_application_version_key_securables_securable_id_roles_post(application_version_key, securable_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str application_version_key: Required. Concatenation of application alias and version alias as 'AppAlias-VersionAlias' (required)
        :param str securable_id: Required. Unique Platform assigned id of a securable (required)
        :param list[str] body: Array of role names that should be associated with this securable
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.api_v1_application_versions_application_version_key_securables_securable_id_roles_post_with_http_info(application_version_key, securable_id, **kwargs)
        else:
            (data) = self.api_v1_application_versions_application_version_key_securables_securable_id_roles_post_with_http_info(application_version_key, securable_id, **kwargs)
            return data

    def api_v1_application_versions_application_version_key_securables_securable_id_roles_post_with_http_info(self, application_version_key, securable_id, **kwargs):
        """
        Assign role(s) to a securable
        Assign role(s) to a securable.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_application_versions_application_version_key_securables_securable_id_roles_post_with_http_info(application_version_key, securable_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str application_version_key: Required. Concatenation of application alias and version alias as 'AppAlias-VersionAlias' (required)
        :param str securable_id: Required. Unique Platform assigned id of a securable (required)
        :param list[str] body: Array of role names that should be associated with this securable
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['application_version_key', 'securable_id', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_application_versions_application_version_key_securables_securable_id_roles_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'application_version_key' is set
        if ('application_version_key' not in params) or (params['application_version_key'] is None):
            raise ValueError("Missing the required parameter `application_version_key` when calling `api_v1_application_versions_application_version_key_securables_securable_id_roles_post`")
        # verify the required parameter 'securable_id' is set
        if ('securable_id' not in params) or (params['securable_id'] is None):
            raise ValueError("Missing the required parameter `securable_id` when calling `api_v1_application_versions_application_version_key_securables_securable_id_roles_post`")


        collection_formats = {}

        resource_path = '/api/v1/applicationVersions/{applicationVersionKey}/securables/{securableId}/roles'.replace('{format}', 'json')
        path_params = {}
        if 'application_version_key' in params:
            path_params['applicationVersionKey'] = params['application_version_key']
        if 'securable_id' in params:
            path_params['securableId'] = params['securable_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def api_v1_roles_get(self, **kwargs):
        """
        Get all roles
        Returns all roles for your Tenant Account or Development Team.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_roles_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.api_v1_roles_get_with_http_info(**kwargs)
        else:
            (data) = self.api_v1_roles_get_with_http_info(**kwargs)
            return data

    def api_v1_roles_get_with_http_info(self, **kwargs):
        """
        Get all roles
        Returns all roles for your Tenant Account or Development Team.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_roles_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_roles_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        resource_path = '/api/v1/roles'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2003',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def api_v1_roles_post(self, **kwargs):
        """
        Create role
        Create new roles for your Tenant Account or Development Team.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_roles_post(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Body1 body: Array of role definitions to add
        :return: InlineResponse2003Items
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.api_v1_roles_post_with_http_info(**kwargs)
        else:
            (data) = self.api_v1_roles_post_with_http_info(**kwargs)
            return data

    def api_v1_roles_post_with_http_info(self, **kwargs):
        """
        Create role
        Create new roles for your Tenant Account or Development Team.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_roles_post_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Body1 body: Array of role definitions to add
        :return: InlineResponse2003Items
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_roles_post" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        resource_path = '/api/v1/roles'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2003Items',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def api_v1_roles_role_id_delete(self, role_id, **kwargs):
        """
        Remove role
        Remove a role from the Tenant Account.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_roles_role_id_delete(role_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str role_id: Required. Unique Platform assigned id of a role (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.api_v1_roles_role_id_delete_with_http_info(role_id, **kwargs)
        else:
            (data) = self.api_v1_roles_role_id_delete_with_http_info(role_id, **kwargs)
            return data

    def api_v1_roles_role_id_delete_with_http_info(self, role_id, **kwargs):
        """
        Remove role
        Remove a role from the Tenant Account.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_roles_role_id_delete_with_http_info(role_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str role_id: Required. Unique Platform assigned id of a role (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['role_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_roles_role_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'role_id' is set
        if ('role_id' not in params) or (params['role_id'] is None):
            raise ValueError("Missing the required parameter `role_id` when calling `api_v1_roles_role_id_delete`")


        collection_formats = {}

        resource_path = '/api/v1/roles/{roleId}'.replace('{format}', 'json')
        path_params = {}
        if 'role_id' in params:
            path_params['roleId'] = params['role_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def api_v1_roles_role_id_get(self, role_id, **kwargs):
        """
        Get role
        Returns imformation for a role for the given id.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_roles_role_id_get(role_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str role_id: Required. Unique Platform assigned id of a role (required)
        :return: InlineResponse2003Items
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.api_v1_roles_role_id_get_with_http_info(role_id, **kwargs)
        else:
            (data) = self.api_v1_roles_role_id_get_with_http_info(role_id, **kwargs)
            return data

    def api_v1_roles_role_id_get_with_http_info(self, role_id, **kwargs):
        """
        Get role
        Returns imformation for a role for the given id.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_roles_role_id_get_with_http_info(role_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str role_id: Required. Unique Platform assigned id of a role (required)
        :return: InlineResponse2003Items
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['role_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_roles_role_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'role_id' is set
        if ('role_id' not in params) or (params['role_id'] is None):
            raise ValueError("Missing the required parameter `role_id` when calling `api_v1_roles_role_id_get`")


        collection_formats = {}

        resource_path = '/api/v1/roles/{roleId}'.replace('{format}', 'json')
        path_params = {}
        if 'role_id' in params:
            path_params['roleId'] = params['role_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2003Items',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def api_v1_roles_role_id_put(self, role_id, **kwargs):
        """
        Update role
        Make updates to a role with the given role id. Making a request to this endpoint will update all fields for a role. You should always pass all input values in the body of the request, because any value that is not provided will be updated to the default value.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_roles_role_id_put(role_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str role_id: Required. Unique Platform assigned id of a role (required)
        :param Body2 body: Array of role definitions to update. All fields should be passed in every request.
        :return: InlineResponse2003Items
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.api_v1_roles_role_id_put_with_http_info(role_id, **kwargs)
        else:
            (data) = self.api_v1_roles_role_id_put_with_http_info(role_id, **kwargs)
            return data

    def api_v1_roles_role_id_put_with_http_info(self, role_id, **kwargs):
        """
        Update role
        Make updates to a role with the given role id. Making a request to this endpoint will update all fields for a role. You should always pass all input values in the body of the request, because any value that is not provided will be updated to the default value.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_roles_role_id_put_with_http_info(role_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str role_id: Required. Unique Platform assigned id of a role (required)
        :param Body2 body: Array of role definitions to update. All fields should be passed in every request.
        :return: InlineResponse2003Items
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['role_id', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_roles_role_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'role_id' is set
        if ('role_id' not in params) or (params['role_id'] is None):
            raise ValueError("Missing the required parameter `role_id` when calling `api_v1_roles_role_id_put`")


        collection_formats = {}

        resource_path = '/api/v1/roles/{roleId}'.replace('{format}', 'json')
        path_params = {}
        if 'role_id' in params:
            path_params['roleId'] = params['role_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2003Items',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def api_v1_roles_role_id_roles_delete(self, role_id, **kwargs):
        """
        Remove a sub-role from a role
        Remove a sub role from a role. Users assigned to the removed sub-role will no longer inherit securables from the parent role.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_roles_role_id_roles_delete(role_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str role_id: Required. Unique Platform assigned id of a role (required)
        :param list[str] body: Array of role ids to remove from the role
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.api_v1_roles_role_id_roles_delete_with_http_info(role_id, **kwargs)
        else:
            (data) = self.api_v1_roles_role_id_roles_delete_with_http_info(role_id, **kwargs)
            return data

    def api_v1_roles_role_id_roles_delete_with_http_info(self, role_id, **kwargs):
        """
        Remove a sub-role from a role
        Remove a sub role from a role. Users assigned to the removed sub-role will no longer inherit securables from the parent role.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_roles_role_id_roles_delete_with_http_info(role_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str role_id: Required. Unique Platform assigned id of a role (required)
        :param list[str] body: Array of role ids to remove from the role
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['role_id', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_roles_role_id_roles_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'role_id' is set
        if ('role_id' not in params) or (params['role_id'] is None):
            raise ValueError("Missing the required parameter `role_id` when calling `api_v1_roles_role_id_roles_delete`")


        collection_formats = {}

        resource_path = '/api/v1/roles/{roleId}/roles'.replace('{format}', 'json')
        path_params = {}
        if 'role_id' in params:
            path_params['roleId'] = params['role_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def api_v1_roles_role_id_roles_get(self, role_id, **kwargs):
        """
        Get all sub-roles assigned to a role
        Returns all roles assigned to a given role.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_roles_role_id_roles_get(role_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str role_id: Required. Unique Platform assigned id of a role (required)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.api_v1_roles_role_id_roles_get_with_http_info(role_id, **kwargs)
        else:
            (data) = self.api_v1_roles_role_id_roles_get_with_http_info(role_id, **kwargs)
            return data

    def api_v1_roles_role_id_roles_get_with_http_info(self, role_id, **kwargs):
        """
        Get all sub-roles assigned to a role
        Returns all roles assigned to a given role.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_roles_role_id_roles_get_with_http_info(role_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str role_id: Required. Unique Platform assigned id of a role (required)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['role_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_roles_role_id_roles_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'role_id' is set
        if ('role_id' not in params) or (params['role_id'] is None):
            raise ValueError("Missing the required parameter `role_id` when calling `api_v1_roles_role_id_roles_get`")


        collection_formats = {}

        resource_path = '/api/v1/roles/{roleId}/roles'.replace('{format}', 'json')
        path_params = {}
        if 'role_id' in params:
            path_params['roleId'] = params['role_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2003',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def api_v1_roles_role_id_roles_post(self, role_id, **kwargs):
        """
        Make role a sub-role of another role
        Add a role as a sub-role to another role. Users assigned to the sub-role will inherit securables assigned to the parent role.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_roles_role_id_roles_post(role_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str role_id: Required. Unique Platform assigned id of a role (required)
        :param list[str] role_ids: Array of role ids to add to the role
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.api_v1_roles_role_id_roles_post_with_http_info(role_id, **kwargs)
        else:
            (data) = self.api_v1_roles_role_id_roles_post_with_http_info(role_id, **kwargs)
            return data

    def api_v1_roles_role_id_roles_post_with_http_info(self, role_id, **kwargs):
        """
        Make role a sub-role of another role
        Add a role as a sub-role to another role. Users assigned to the sub-role will inherit securables assigned to the parent role.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_roles_role_id_roles_post_with_http_info(role_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str role_id: Required. Unique Platform assigned id of a role (required)
        :param list[str] role_ids: Array of role ids to add to the role
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['role_id', 'role_ids']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_roles_role_id_roles_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'role_id' is set
        if ('role_id' not in params) or (params['role_id'] is None):
            raise ValueError("Missing the required parameter `role_id` when calling `api_v1_roles_role_id_roles_post`")


        collection_formats = {}

        resource_path = '/api/v1/roles/{roleId}/roles'.replace('{format}', 'json')
        path_params = {}
        if 'role_id' in params:
            path_params['roleId'] = params['role_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'role_ids' in params:
            body_params = params['role_ids']
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def api_v1_roles_role_id_securables_get(self, role_id, **kwargs):
        """
        Get all securables for a role
        Returns a list of all securables associated with a given role.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_roles_role_id_securables_get(role_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str role_id: Required. Unique Platform assigned id of a role (required)
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.api_v1_roles_role_id_securables_get_with_http_info(role_id, **kwargs)
        else:
            (data) = self.api_v1_roles_role_id_securables_get_with_http_info(role_id, **kwargs)
            return data

    def api_v1_roles_role_id_securables_get_with_http_info(self, role_id, **kwargs):
        """
        Get all securables for a role
        Returns a list of all securables associated with a given role.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_roles_role_id_securables_get_with_http_info(role_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str role_id: Required. Unique Platform assigned id of a role (required)
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['role_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_roles_role_id_securables_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'role_id' is set
        if ('role_id' not in params) or (params['role_id'] is None):
            raise ValueError("Missing the required parameter `role_id` when calling `api_v1_roles_role_id_securables_get`")


        collection_formats = {}

        resource_path = '/api/v1/roles/{roleId}/securables'.replace('{format}', 'json')
        path_params = {}
        if 'role_id' in params:
            path_params['roleId'] = params['role_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2002',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def api_v1_roles_role_id_users_delete(self, role_id, **kwargs):
        """
        Remove a user from role
        Remove a user from a role.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_roles_role_id_users_delete(role_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str role_id: Required. Unique Platform assigned id of a role (required)
        :param list[str] body: Array of user ids to remove from the role
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.api_v1_roles_role_id_users_delete_with_http_info(role_id, **kwargs)
        else:
            (data) = self.api_v1_roles_role_id_users_delete_with_http_info(role_id, **kwargs)
            return data

    def api_v1_roles_role_id_users_delete_with_http_info(self, role_id, **kwargs):
        """
        Remove a user from role
        Remove a user from a role.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_roles_role_id_users_delete_with_http_info(role_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str role_id: Required. Unique Platform assigned id of a role (required)
        :param list[str] body: Array of user ids to remove from the role
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['role_id', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_roles_role_id_users_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'role_id' is set
        if ('role_id' not in params) or (params['role_id'] is None):
            raise ValueError("Missing the required parameter `role_id` when calling `api_v1_roles_role_id_users_delete`")


        collection_formats = {}

        resource_path = '/api/v1/roles/{roleId}/users'.replace('{format}', 'json')
        path_params = {}
        if 'role_id' in params:
            path_params['roleId'] = params['role_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def api_v1_roles_role_id_users_get(self, role_id, **kwargs):
        """
        Get users of a role
        Get all users assigned to a role.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_roles_role_id_users_get(role_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str role_id: Required. Unique Platform assigned id of a role (required)
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.api_v1_roles_role_id_users_get_with_http_info(role_id, **kwargs)
        else:
            (data) = self.api_v1_roles_role_id_users_get_with_http_info(role_id, **kwargs)
            return data

    def api_v1_roles_role_id_users_get_with_http_info(self, role_id, **kwargs):
        """
        Get users of a role
        Get all users assigned to a role.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_roles_role_id_users_get_with_http_info(role_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str role_id: Required. Unique Platform assigned id of a role (required)
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['role_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_roles_role_id_users_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'role_id' is set
        if ('role_id' not in params) or (params['role_id'] is None):
            raise ValueError("Missing the required parameter `role_id` when calling `api_v1_roles_role_id_users_get`")


        collection_formats = {}

        resource_path = '/api/v1/roles/{roleId}/users'.replace('{format}', 'json')
        path_params = {}
        if 'role_id' in params:
            path_params['roleId'] = params['role_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2006',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def api_v1_roles_role_id_users_post(self, role_id, **kwargs):
        """
        Add users to a role
        Add the user with the given id to a role.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_roles_role_id_users_post(role_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str role_id: Required. Unique Platform assigned id of a role (required)
        :param list[str] body: Array of user ids to add to the role
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.api_v1_roles_role_id_users_post_with_http_info(role_id, **kwargs)
        else:
            (data) = self.api_v1_roles_role_id_users_post_with_http_info(role_id, **kwargs)
            return data

    def api_v1_roles_role_id_users_post_with_http_info(self, role_id, **kwargs):
        """
        Add users to a role
        Add the user with the given id to a role.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_roles_role_id_users_post_with_http_info(role_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str role_id: Required. Unique Platform assigned id of a role (required)
        :param list[str] body: Array of user ids to add to the role
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['role_id', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_roles_role_id_users_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'role_id' is set
        if ('role_id' not in params) or (params['role_id'] is None):
            raise ValueError("Missing the required parameter `role_id` when calling `api_v1_roles_role_id_users_post`")


        collection_formats = {}

        resource_path = '/api/v1/roles/{roleId}/users'.replace('{format}', 'json')
        path_params = {}
        if 'role_id' in params:
            path_params['roleId'] = params['role_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def api_v1_user_roles_delete(self, user_id, **kwargs):
        """
        Remove a user from a role
        Remove a user from a role.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_user_roles_delete(user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: Required. Unique id of the user (required)
        :param list[str] body: Array of role ids to remove the user from
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.api_v1_user_roles_delete_with_http_info(user_id, **kwargs)
        else:
            (data) = self.api_v1_user_roles_delete_with_http_info(user_id, **kwargs)
            return data

    def api_v1_user_roles_delete_with_http_info(self, user_id, **kwargs):
        """
        Remove a user from a role
        Remove a user from a role.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_user_roles_delete_with_http_info(user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: Required. Unique id of the user (required)
        :param list[str] body: Array of role ids to remove the user from
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_user_roles_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `api_v1_user_roles_delete`")


        collection_formats = {}

        resource_path = '/api/v1/userRoles'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'user_id' in params:
            query_params['userId'] = params['user_id']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def api_v1_user_roles_get(self, user_id, **kwargs):
        """
        Get the roles of a user
        Returns a list of all roles a user is assigned to.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_user_roles_get(user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: Required. Unique id of the user (required)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.api_v1_user_roles_get_with_http_info(user_id, **kwargs)
        else:
            (data) = self.api_v1_user_roles_get_with_http_info(user_id, **kwargs)
            return data

    def api_v1_user_roles_get_with_http_info(self, user_id, **kwargs):
        """
        Get the roles of a user
        Returns a list of all roles a user is assigned to.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_user_roles_get_with_http_info(user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: Required. Unique id of the user (required)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_user_roles_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `api_v1_user_roles_get`")


        collection_formats = {}

        resource_path = '/api/v1/userRoles'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'user_id' in params:
            query_params['userId'] = params['user_id']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2003',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def api_v1_user_roles_post(self, user_id, **kwargs):
        """
        Assign a user to a role
        Assign a user to 1 or more roles.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_user_roles_post(user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: Required. Unique id of the user (required)
        :param list[str] body: Array of role ids to add the user to
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.api_v1_user_roles_post_with_http_info(user_id, **kwargs)
        else:
            (data) = self.api_v1_user_roles_post_with_http_info(user_id, **kwargs)
            return data

    def api_v1_user_roles_post_with_http_info(self, user_id, **kwargs):
        """
        Assign a user to a role
        Assign a user to 1 or more roles.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_user_roles_post_with_http_info(user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: Required. Unique id of the user (required)
        :param list[str] body: Array of role ids to add the user to
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_user_roles_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `api_v1_user_roles_post`")


        collection_formats = {}

        resource_path = '/api/v1/userRoles'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'user_id' in params:
            query_params['userId'] = params['user_id']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
