# coding: utf-8

"""
    Platform Operations Rest API

    The Platform Operations REST API can be leveraged to customize the Platform Operator experience of managing infrastructure and applications for the Apprenda Platform. This allows some of the functionality of the Platform's System Operations Center (SOC) to be accomplished through a variety of means such as custom-built UX or command-line interfaces.   For more information about the abilities of Platform Operators, see our documentation on the [SOC](/current/SOC).   ##Authentication   Before making a request, you must be authenticated. Learn how to [get authenticated](/restapi/platformops/v1/authentication).   ##Making a Request   ###Prerequisites   * Installed Platform of version 6.5.1 or later (Note that most endpoints are only available in version 6.7.0 and later)    * Authentication token   * If SOC authorization is enabled on your Platform, you must be assigned as an active Platform Operator   ###Request URL   All requests must use **https**.   The URL for every request you make is the Cloud URI of your Platform followed by \"/soc\" and the path structure of the endpoint. For example, if your Cloud URI is apps.apprenda.harp and you want to get the Add-ons for your Platform, the request URI will be **apps.apprenda.harp/soc/api/v1/addons**.   For more information, see our documentation on [using API resources](/restapi/platformops/v1/using-resources) and [finding your Cloud URI](/current/clouduri).   ###Request Headers   Your authenication token must be passed in the header of all requests using the key **ApprendaSessionToken** (not case sensitive).  

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from configuration import Configuration
from api_client import ApiClient


class HostsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def get_api_v1_hosts_host_name_is_transitioning(self, host_name, **kwargs):
        """
        Check server transition
        **Requires Platform version 6.5.1 or later**   Returns true if a sever is transitioning between states or false if the server is not transitioning   Learn more about [server states transitions](/current/Managing-Apprenda-Infrastructure#maintenancereserved). 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_api_v1_hosts_host_name_is_transitioning(host_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str host_name: Host name of the server (required)
        :return: InlineResponse20012
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_api_v1_hosts_host_name_is_transitioning_with_http_info(host_name, **kwargs)
        else:
            (data) = self.get_api_v1_hosts_host_name_is_transitioning_with_http_info(host_name, **kwargs)
            return data

    def get_api_v1_hosts_host_name_is_transitioning_with_http_info(self, host_name, **kwargs):
        """
        Check server transition
        **Requires Platform version 6.5.1 or later**   Returns true if a sever is transitioning between states or false if the server is not transitioning   Learn more about [server states transitions](/current/Managing-Apprenda-Infrastructure#maintenancereserved). 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_api_v1_hosts_host_name_is_transitioning_with_http_info(host_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str host_name: Host name of the server (required)
        :return: InlineResponse20012
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['host_name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_api_v1_hosts_host_name_is_transitioning" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'host_name' is set
        if ('host_name' not in params) or (params['host_name'] is None):
            raise ValueError("Missing the required parameter `host_name` when calling `get_api_v1_hosts_host_name_is_transitioning`")


        collection_formats = {}

        resource_path = '/api/v1/hosts/{HostName}/isTransitioning'.replace('{format}', 'json')
        path_params = {}
        if 'host_name' in params:
            path_params['HostName'] = params['host_name']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20012',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_api_v1_hosts_host_name_state(self, host_name, **kwargs):
        """
        Get server state
        **Requires Platform version 6.5.1 or later**   Returns the current state of the server and a reason the server has been placed into a state.   Learn more about [server states transitions](/current/Managing-Apprenda-Infrastructure#maintenancereserved). 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_api_v1_hosts_host_name_state(host_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str host_name: Host name of the server (required)
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_api_v1_hosts_host_name_state_with_http_info(host_name, **kwargs)
        else:
            (data) = self.get_api_v1_hosts_host_name_state_with_http_info(host_name, **kwargs)
            return data

    def get_api_v1_hosts_host_name_state_with_http_info(self, host_name, **kwargs):
        """
        Get server state
        **Requires Platform version 6.5.1 or later**   Returns the current state of the server and a reason the server has been placed into a state.   Learn more about [server states transitions](/current/Managing-Apprenda-Infrastructure#maintenancereserved). 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_api_v1_hosts_host_name_state_with_http_info(host_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str host_name: Host name of the server (required)
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['host_name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_api_v1_hosts_host_name_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'host_name' is set
        if ('host_name' not in params) or (params['host_name'] is None):
            raise ValueError("Missing the required parameter `host_name` when calling `get_api_v1_hosts_host_name_state`")


        collection_formats = {}

        resource_path = '/api/v1/hosts/{HostName}/state'.replace('{format}', 'json')
        path_params = {}
        if 'host_name' in params:
            path_params['HostName'] = params['host_name']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20011',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def put_api_v1_hosts_host_name_state(self, host_name, node_state, **kwargs):
        """
        Update server state
        **Requires Platform version 6.5.1 or later**   Updates a server's state and initiates a state transition.   In the request body, send the state the server will be transitioned to and a reason the server is being transitioned. A server can be placed into the Online, Reserved, or Maintenance states and all state transitions will take affect imediately after a sucessfull request.    Learn more about [server states transitions](/current/Managing-Apprenda-Infrastructure#maintenancereserved). 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.put_api_v1_hosts_host_name_state(host_name, node_state, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str host_name: Host name of the server (required)
        :param NodeState node_state: State the server should be transitioned to. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.put_api_v1_hosts_host_name_state_with_http_info(host_name, node_state, **kwargs)
        else:
            (data) = self.put_api_v1_hosts_host_name_state_with_http_info(host_name, node_state, **kwargs)
            return data

    def put_api_v1_hosts_host_name_state_with_http_info(self, host_name, node_state, **kwargs):
        """
        Update server state
        **Requires Platform version 6.5.1 or later**   Updates a server's state and initiates a state transition.   In the request body, send the state the server will be transitioned to and a reason the server is being transitioned. A server can be placed into the Online, Reserved, or Maintenance states and all state transitions will take affect imediately after a sucessfull request.    Learn more about [server states transitions](/current/Managing-Apprenda-Infrastructure#maintenancereserved). 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.put_api_v1_hosts_host_name_state_with_http_info(host_name, node_state, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str host_name: Host name of the server (required)
        :param NodeState node_state: State the server should be transitioned to. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['host_name', 'node_state']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_api_v1_hosts_host_name_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'host_name' is set
        if ('host_name' not in params) or (params['host_name'] is None):
            raise ValueError("Missing the required parameter `host_name` when calling `put_api_v1_hosts_host_name_state`")
        # verify the required parameter 'node_state' is set
        if ('node_state' not in params) or (params['node_state'] is None):
            raise ValueError("Missing the required parameter `node_state` when calling `put_api_v1_hosts_host_name_state`")


        collection_formats = {}

        resource_path = '/api/v1/hosts/{HostName}/state'.replace('{format}', 'json')
        path_params = {}
        if 'host_name' in params:
            path_params['HostName'] = params['host_name']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'node_state' in params:
            body_params = params['node_state']
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
