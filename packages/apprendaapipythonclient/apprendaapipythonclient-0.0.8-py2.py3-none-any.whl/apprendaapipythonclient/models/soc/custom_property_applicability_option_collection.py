# coding: utf-8

"""
    Platform Operations Rest API

    The Platform Operations REST API can be leveraged to customize the Platform Operator experience of managing infrastructure and applications for the Apprenda Platform. This allows some of the functionality of the Platform's System Operations Center (SOC) to be accomplished through a variety of means such as custom-built UX or command-line interfaces.   For more information about the abilities of Platform Operators, see our documentation on the [SOC](/current/SOC).   ##Authentication   Before making a request, you must be authenticated. Learn how to [get authenticated](/restapi/platformops/v1/authentication).   ##Making a Request   ###Prerequisites   * Installed Platform of version 6.5.1 or later (Note that most endpoints are only available in version 6.7.0 and later)    * Authentication token   * If SOC authorization is enabled on your Platform, you must be assigned as an active Platform Operator   ###Request URL   All requests must use **https**.   The URL for every request you make is the Cloud URI of your Platform followed by \"/soc\" and the path structure of the endpoint. For example, if your Cloud URI is apps.apprenda.harp and you want to get the Add-ons for your Platform, the request URI will be **apps.apprenda.harp/soc/api/v1/addons**.   For more information, see our documentation on [using API resources](/restapi/platformops/v1/using-resources) and [finding your Cloud URI](/current/clouduri).   ###Request Headers   Your authenication token must be passed in the header of all requests using the key **ApprendaSessionToken** (not case sensitive).  

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CustomPropertyApplicabilityOptionCollection(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, applications=None, compute_servers=None, database_servers=None, resource_policies=None, storage_quotas=None):
        """
        CustomPropertyApplicabilityOptionCollection - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'applications': 'CustomPropertyApplicationOptions',
            'compute_servers': 'CustomPropertyApplicabilityOption',
            'database_servers': 'CustomPropertyApplicabilityOption',
            'resource_policies': 'CustomPropertyApplicabilityOption',
            'storage_quotas': 'CustomPropertyApplicabilityOption'
        }

        self.attribute_map = {
            'applications': 'applications',
            'compute_servers': 'computeServers',
            'database_servers': 'databaseServers',
            'resource_policies': 'resourcePolicies',
            'storage_quotas': 'storageQuotas'
        }

        self._applications = applications
        self._compute_servers = compute_servers
        self._database_servers = database_servers
        self._resource_policies = resource_policies
        self._storage_quotas = storage_quotas

    @property
    def applications(self):
        """
        Gets the applications of this CustomPropertyApplicabilityOptionCollection.

        :return: The applications of this CustomPropertyApplicabilityOptionCollection.
        :rtype: CustomPropertyApplicationOptions
        """
        return self._applications

    @applications.setter
    def applications(self, applications):
        """
        Sets the applications of this CustomPropertyApplicabilityOptionCollection.

        :param applications: The applications of this CustomPropertyApplicabilityOptionCollection.
        :type: CustomPropertyApplicationOptions
        """

        self._applications = applications

    @property
    def compute_servers(self):
        """
        Gets the compute_servers of this CustomPropertyApplicabilityOptionCollection.

        :return: The compute_servers of this CustomPropertyApplicabilityOptionCollection.
        :rtype: CustomPropertyApplicabilityOption
        """
        return self._compute_servers

    @compute_servers.setter
    def compute_servers(self, compute_servers):
        """
        Sets the compute_servers of this CustomPropertyApplicabilityOptionCollection.

        :param compute_servers: The compute_servers of this CustomPropertyApplicabilityOptionCollection.
        :type: CustomPropertyApplicabilityOption
        """

        self._compute_servers = compute_servers

    @property
    def database_servers(self):
        """
        Gets the database_servers of this CustomPropertyApplicabilityOptionCollection.

        :return: The database_servers of this CustomPropertyApplicabilityOptionCollection.
        :rtype: CustomPropertyApplicabilityOption
        """
        return self._database_servers

    @database_servers.setter
    def database_servers(self, database_servers):
        """
        Sets the database_servers of this CustomPropertyApplicabilityOptionCollection.

        :param database_servers: The database_servers of this CustomPropertyApplicabilityOptionCollection.
        :type: CustomPropertyApplicabilityOption
        """

        self._database_servers = database_servers

    @property
    def resource_policies(self):
        """
        Gets the resource_policies of this CustomPropertyApplicabilityOptionCollection.

        :return: The resource_policies of this CustomPropertyApplicabilityOptionCollection.
        :rtype: CustomPropertyApplicabilityOption
        """
        return self._resource_policies

    @resource_policies.setter
    def resource_policies(self, resource_policies):
        """
        Sets the resource_policies of this CustomPropertyApplicabilityOptionCollection.

        :param resource_policies: The resource_policies of this CustomPropertyApplicabilityOptionCollection.
        :type: CustomPropertyApplicabilityOption
        """

        self._resource_policies = resource_policies

    @property
    def storage_quotas(self):
        """
        Gets the storage_quotas of this CustomPropertyApplicabilityOptionCollection.

        :return: The storage_quotas of this CustomPropertyApplicabilityOptionCollection.
        :rtype: CustomPropertyApplicabilityOption
        """
        return self._storage_quotas

    @storage_quotas.setter
    def storage_quotas(self, storage_quotas):
        """
        Sets the storage_quotas of this CustomPropertyApplicabilityOptionCollection.

        :param storage_quotas: The storage_quotas of this CustomPropertyApplicabilityOptionCollection.
        :type: CustomPropertyApplicabilityOption
        """

        self._storage_quotas = storage_quotas

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CustomPropertyApplicabilityOptionCollection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
