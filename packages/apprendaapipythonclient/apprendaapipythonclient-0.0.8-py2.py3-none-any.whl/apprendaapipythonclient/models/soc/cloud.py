# coding: utf-8

"""
    Platform Operations Rest API

    The Platform Operations REST API can be leveraged to customize the Platform Operator experience of managing infrastructure and applications for the Apprenda Platform. This allows some of the functionality of the Platform's System Operations Center (SOC) to be accomplished through a variety of means such as custom-built UX or command-line interfaces.   For more information about the abilities of Platform Operators, see our documentation on the [SOC](/current/SOC).   ##Authentication   Before making a request, you must be authenticated. Learn how to [get authenticated](/restapi/platformops/v1/authentication).   ##Making a Request   ###Prerequisites   * Installed Platform of version 6.5.1 or later (Note that most endpoints are only available in version 6.7.0 and later)    * Authentication token   * If SOC authorization is enabled on your Platform, you must be assigned as an active Platform Operator   ###Request URL   All requests must use **https**.   The URL for every request you make is the Cloud URI of your Platform followed by \"/soc\" and the path structure of the endpoint. For example, if your Cloud URI is apps.apprenda.harp and you want to get the Add-ons for your Platform, the request URI will be **apps.apprenda.harp/soc/api/v1/addons**.   For more information, see our documentation on [using API resources](/restapi/platformops/v1/using-resources) and [finding your Cloud URI](/current/clouduri).   ###Request Headers   Your authenication token must be passed in the header of all requests using the key **ApprendaSessionToken** (not case sensitive).  

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Cloud(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, name=None, root_url=None, description=None, infrastructure_provider=None, cloud_type=None, state=None, cache_size=None, href=None):
        """
        Cloud - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'name': 'str',
            'root_url': 'str',
            'description': 'str',
            'infrastructure_provider': 'str',
            'cloud_type': 'str',
            'state': 'str',
            'cache_size': 'int',
            'href': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'root_url': 'rootUrl',
            'description': 'description',
            'infrastructure_provider': 'infrastructureProvider',
            'cloud_type': 'cloudType',
            'state': 'state',
            'cache_size': 'cacheSize',
            'href': 'href'
        }

        self._id = id
        self._name = name
        self._root_url = root_url
        self._description = description
        self._infrastructure_provider = infrastructure_provider
        self._cloud_type = cloud_type
        self._state = state
        self._cache_size = cache_size
        self._href = href

    @property
    def id(self):
        """
        Gets the id of this Cloud.

        :return: The id of this Cloud.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Cloud.

        :param id: The id of this Cloud.
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this Cloud.

        :return: The name of this Cloud.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Cloud.

        :param name: The name of this Cloud.
        :type: str
        """

        self._name = name

    @property
    def root_url(self):
        """
        Gets the root_url of this Cloud.

        :return: The root_url of this Cloud.
        :rtype: str
        """
        return self._root_url

    @root_url.setter
    def root_url(self, root_url):
        """
        Sets the root_url of this Cloud.

        :param root_url: The root_url of this Cloud.
        :type: str
        """

        self._root_url = root_url

    @property
    def description(self):
        """
        Gets the description of this Cloud.

        :return: The description of this Cloud.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Cloud.

        :param description: The description of this Cloud.
        :type: str
        """

        self._description = description

    @property
    def infrastructure_provider(self):
        """
        Gets the infrastructure_provider of this Cloud.

        :return: The infrastructure_provider of this Cloud.
        :rtype: str
        """
        return self._infrastructure_provider

    @infrastructure_provider.setter
    def infrastructure_provider(self, infrastructure_provider):
        """
        Sets the infrastructure_provider of this Cloud.

        :param infrastructure_provider: The infrastructure_provider of this Cloud.
        :type: str
        """

        self._infrastructure_provider = infrastructure_provider

    @property
    def cloud_type(self):
        """
        Gets the cloud_type of this Cloud.

        :return: The cloud_type of this Cloud.
        :rtype: str
        """
        return self._cloud_type

    @cloud_type.setter
    def cloud_type(self, cloud_type):
        """
        Sets the cloud_type of this Cloud.

        :param cloud_type: The cloud_type of this Cloud.
        :type: str
        """
        allowed_values = ["Private", "Public", "Hosted"]
        if cloud_type not in allowed_values:
            raise ValueError(
                "Invalid value for `cloud_type` ({0}), must be one of {1}"
                .format(cloud_type, allowed_values)
            )

        self._cloud_type = cloud_type

    @property
    def state(self):
        """
        Gets the state of this Cloud.

        :return: The state of this Cloud.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this Cloud.

        :param state: The state of this Cloud.
        :type: str
        """
        allowed_values = ["Online", "Removed", "PendingAdd"]
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def cache_size(self):
        """
        Gets the cache_size of this Cloud.

        :return: The cache_size of this Cloud.
        :rtype: int
        """
        return self._cache_size

    @cache_size.setter
    def cache_size(self, cache_size):
        """
        Sets the cache_size of this Cloud.

        :param cache_size: The cache_size of this Cloud.
        :type: int
        """

        self._cache_size = cache_size

    @property
    def href(self):
        """
        Gets the href of this Cloud.

        :return: The href of this Cloud.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """
        Sets the href of this Cloud.

        :param href: The href of this Cloud.
        :type: str
        """

        self._href = href

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Cloud):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
