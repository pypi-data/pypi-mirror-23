# coding: utf-8

"""
    Apprenda.DeveloperPortal.Web

    The Application Management REST API can be leveraged to customize the Developer experience of deploying and managing applications  on the Apprenda Platform. This allows some of the functionality of the Platform's [Developer Portal](/current/developer-portal)to be accomplished through a variety of means such as custom-built UX or command-line interfaces.     ##Authentication    Before making a request, you must be authenticated. Learn how to [get authenticated](/restapi/appmanagement/v1/authentication).    ##Making a Request    ###Prerequisites    * Installed Platform of version 4.5.0 or later     * Authentication token     * To use this API you must be part of a [Development Team or Tenant](/current/create-users) and have an [active subscription](/current/dev-portal-setup#create) to Developer Portal    ###Request URL    All requests must use **https**.    The URL for every request you make is the Cloud URI of your Platform followed by \"/developer\" and the path structure of the endpoint. For example, if your Cloud URI is apps.apprenda.harp and you want to get the Add-ons for your Platform, the request URI will be **apps.apprenda.harp/developer/api/v1/addons**.      For more information, see our documentation on [using API resources](/restapi/appmanagement/v1/resources) and [finding your Cloud URI](/current/clouduri).

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class PlatformLogOverrideDTO(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, app_alias=None, app_version=None, dev_team_alias=None, user=None, tenant=None, log_override=None):
        """
        PlatformLogOverrideDTO - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'app_alias': 'str',
            'app_version': 'str',
            'dev_team_alias': 'str',
            'user': 'OverrideUserInfoDTO',
            'tenant': 'OverrideTenantInfoDTO',
            'log_override': 'LogOverrideDTO'
        }

        self.attribute_map = {
            'app_alias': 'appAlias',
            'app_version': 'appVersion',
            'dev_team_alias': 'devTeamAlias',
            'user': 'user',
            'tenant': 'tenant',
            'log_override': 'logOverride'
        }

        self._app_alias = app_alias
        self._app_version = app_version
        self._dev_team_alias = dev_team_alias
        self._user = user
        self._tenant = tenant
        self._log_override = log_override

    @property
    def app_alias(self):
        """
        Gets the app_alias of this PlatformLogOverrideDTO.

        :return: The app_alias of this PlatformLogOverrideDTO.
        :rtype: str
        """
        return self._app_alias

    @app_alias.setter
    def app_alias(self, app_alias):
        """
        Sets the app_alias of this PlatformLogOverrideDTO.

        :param app_alias: The app_alias of this PlatformLogOverrideDTO.
        :type: str
        """

        self._app_alias = app_alias

    @property
    def app_version(self):
        """
        Gets the app_version of this PlatformLogOverrideDTO.

        :return: The app_version of this PlatformLogOverrideDTO.
        :rtype: str
        """
        return self._app_version

    @app_version.setter
    def app_version(self, app_version):
        """
        Sets the app_version of this PlatformLogOverrideDTO.

        :param app_version: The app_version of this PlatformLogOverrideDTO.
        :type: str
        """

        self._app_version = app_version

    @property
    def dev_team_alias(self):
        """
        Gets the dev_team_alias of this PlatformLogOverrideDTO.

        :return: The dev_team_alias of this PlatformLogOverrideDTO.
        :rtype: str
        """
        return self._dev_team_alias

    @dev_team_alias.setter
    def dev_team_alias(self, dev_team_alias):
        """
        Sets the dev_team_alias of this PlatformLogOverrideDTO.

        :param dev_team_alias: The dev_team_alias of this PlatformLogOverrideDTO.
        :type: str
        """

        self._dev_team_alias = dev_team_alias

    @property
    def user(self):
        """
        Gets the user of this PlatformLogOverrideDTO.

        :return: The user of this PlatformLogOverrideDTO.
        :rtype: OverrideUserInfoDTO
        """
        return self._user

    @user.setter
    def user(self, user):
        """
        Sets the user of this PlatformLogOverrideDTO.

        :param user: The user of this PlatformLogOverrideDTO.
        :type: OverrideUserInfoDTO
        """

        self._user = user

    @property
    def tenant(self):
        """
        Gets the tenant of this PlatformLogOverrideDTO.

        :return: The tenant of this PlatformLogOverrideDTO.
        :rtype: OverrideTenantInfoDTO
        """
        return self._tenant

    @tenant.setter
    def tenant(self, tenant):
        """
        Sets the tenant of this PlatformLogOverrideDTO.

        :param tenant: The tenant of this PlatformLogOverrideDTO.
        :type: OverrideTenantInfoDTO
        """

        self._tenant = tenant

    @property
    def log_override(self):
        """
        Gets the log_override of this PlatformLogOverrideDTO.

        :return: The log_override of this PlatformLogOverrideDTO.
        :rtype: LogOverrideDTO
        """
        return self._log_override

    @log_override.setter
    def log_override(self, log_override):
        """
        Sets the log_override of this PlatformLogOverrideDTO.

        :param log_override: The log_override of this PlatformLogOverrideDTO.
        :type: LogOverrideDTO
        """

        self._log_override = log_override

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PlatformLogOverrideDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
