# coding: utf-8

"""
    Apprenda.DeveloperPortal.Web

    The Application Management REST API can be leveraged to customize the Developer experience of deploying and managing applications  on the Apprenda Platform. This allows some of the functionality of the Platform's [Developer Portal](/current/developer-portal)to be accomplished through a variety of means such as custom-built UX or command-line interfaces.     ##Authentication    Before making a request, you must be authenticated. Learn how to [get authenticated](/restapi/appmanagement/v1/authentication).    ##Making a Request    ###Prerequisites    * Installed Platform of version 4.5.0 or later     * Authentication token     * To use this API you must be part of a [Development Team or Tenant](/current/create-users) and have an [active subscription](/current/dev-portal-setup#create) to Developer Portal    ###Request URL    All requests must use **https**.    The URL for every request you make is the Cloud URI of your Platform followed by \"/developer\" and the path structure of the endpoint. For example, if your Cloud URI is apps.apprenda.harp and you want to get the Add-ons for your Platform, the request URI will be **apps.apprenda.harp/developer/api/v1/addons**.      For more information, see our documentation on [using API resources](/restapi/appmanagement/v1/resources) and [finding your Cloud URI](/current/clouduri).

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class EnrichedVersion(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, url=None, last_hour_uptime=None, last_day_uptime=None, last_month_uptime=None, previous_version=None, components=None, workloads=None, custom_properties=None, archive_download=None, files_download=None, manifest_download=None, tenants=None, name=None, alias=None, description=None, stage=None, state=None, application=None, enable_sticky_sessions=None, enable_session_replication=None, enable_ssl_enforcement=None, load_balancer_url_configuration=None, in_maintenance=None, href=None):
        """
        EnrichedVersion - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'url': 'str',
            'last_hour_uptime': 'float',
            'last_day_uptime': 'float',
            'last_month_uptime': 'float',
            'previous_version': 'ResourceBase',
            'components': 'ResourceBase',
            'workloads': 'ResourceBase',
            'custom_properties': 'ResourceBase',
            'archive_download': 'ResourceBase',
            'files_download': 'ResourceBase',
            'manifest_download': 'ResourceBase',
            'tenants': 'ResourceBase',
            'name': 'str',
            'alias': 'str',
            'description': 'str',
            'stage': 'str',
            'state': 'str',
            'application': 'ResourceBase',
            'enable_sticky_sessions': 'bool',
            'enable_session_replication': 'bool',
            'enable_ssl_enforcement': 'bool',
            'load_balancer_url_configuration': 'str',
            'in_maintenance': 'bool',
            'href': 'str'
        }

        self.attribute_map = {
            'url': 'url',
            'last_hour_uptime': 'lastHourUptime',
            'last_day_uptime': 'lastDayUptime',
            'last_month_uptime': 'lastMonthUptime',
            'previous_version': 'previousVersion',
            'components': 'components',
            'workloads': 'workloads',
            'custom_properties': 'customProperties',
            'archive_download': 'archiveDownload',
            'files_download': 'filesDownload',
            'manifest_download': 'manifestDownload',
            'tenants': 'tenants',
            'name': 'name',
            'alias': 'alias',
            'description': 'description',
            'stage': 'stage',
            'state': 'state',
            'application': 'application',
            'enable_sticky_sessions': 'enableStickySessions',
            'enable_session_replication': 'enableSessionReplication',
            'enable_ssl_enforcement': 'enableSslEnforcement',
            'load_balancer_url_configuration': 'loadBalancerUrlConfiguration',
            'in_maintenance': 'inMaintenance',
            'href': 'href'
        }

        self._url = url
        self._last_hour_uptime = last_hour_uptime
        self._last_day_uptime = last_day_uptime
        self._last_month_uptime = last_month_uptime
        self._previous_version = previous_version
        self._components = components
        self._workloads = workloads
        self._custom_properties = custom_properties
        self._archive_download = archive_download
        self._files_download = files_download
        self._manifest_download = manifest_download
        self._tenants = tenants
        self._name = name
        self._alias = alias
        self._description = description
        self._stage = stage
        self._state = state
        self._application = application
        self._enable_sticky_sessions = enable_sticky_sessions
        self._enable_session_replication = enable_session_replication
        self._enable_ssl_enforcement = enable_ssl_enforcement
        self._load_balancer_url_configuration = load_balancer_url_configuration
        self._in_maintenance = in_maintenance
        self._href = href

    @property
    def url(self):
        """
        Gets the url of this EnrichedVersion.

        :return: The url of this EnrichedVersion.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """
        Sets the url of this EnrichedVersion.

        :param url: The url of this EnrichedVersion.
        :type: str
        """

        self._url = url

    @property
    def last_hour_uptime(self):
        """
        Gets the last_hour_uptime of this EnrichedVersion.

        :return: The last_hour_uptime of this EnrichedVersion.
        :rtype: float
        """
        return self._last_hour_uptime

    @last_hour_uptime.setter
    def last_hour_uptime(self, last_hour_uptime):
        """
        Sets the last_hour_uptime of this EnrichedVersion.

        :param last_hour_uptime: The last_hour_uptime of this EnrichedVersion.
        :type: float
        """

        self._last_hour_uptime = last_hour_uptime

    @property
    def last_day_uptime(self):
        """
        Gets the last_day_uptime of this EnrichedVersion.

        :return: The last_day_uptime of this EnrichedVersion.
        :rtype: float
        """
        return self._last_day_uptime

    @last_day_uptime.setter
    def last_day_uptime(self, last_day_uptime):
        """
        Sets the last_day_uptime of this EnrichedVersion.

        :param last_day_uptime: The last_day_uptime of this EnrichedVersion.
        :type: float
        """

        self._last_day_uptime = last_day_uptime

    @property
    def last_month_uptime(self):
        """
        Gets the last_month_uptime of this EnrichedVersion.

        :return: The last_month_uptime of this EnrichedVersion.
        :rtype: float
        """
        return self._last_month_uptime

    @last_month_uptime.setter
    def last_month_uptime(self, last_month_uptime):
        """
        Sets the last_month_uptime of this EnrichedVersion.

        :param last_month_uptime: The last_month_uptime of this EnrichedVersion.
        :type: float
        """

        self._last_month_uptime = last_month_uptime

    @property
    def previous_version(self):
        """
        Gets the previous_version of this EnrichedVersion.

        :return: The previous_version of this EnrichedVersion.
        :rtype: ResourceBase
        """
        return self._previous_version

    @previous_version.setter
    def previous_version(self, previous_version):
        """
        Sets the previous_version of this EnrichedVersion.

        :param previous_version: The previous_version of this EnrichedVersion.
        :type: ResourceBase
        """

        self._previous_version = previous_version

    @property
    def components(self):
        """
        Gets the components of this EnrichedVersion.

        :return: The components of this EnrichedVersion.
        :rtype: ResourceBase
        """
        return self._components

    @components.setter
    def components(self, components):
        """
        Sets the components of this EnrichedVersion.

        :param components: The components of this EnrichedVersion.
        :type: ResourceBase
        """

        self._components = components

    @property
    def workloads(self):
        """
        Gets the workloads of this EnrichedVersion.

        :return: The workloads of this EnrichedVersion.
        :rtype: ResourceBase
        """
        return self._workloads

    @workloads.setter
    def workloads(self, workloads):
        """
        Sets the workloads of this EnrichedVersion.

        :param workloads: The workloads of this EnrichedVersion.
        :type: ResourceBase
        """

        self._workloads = workloads

    @property
    def custom_properties(self):
        """
        Gets the custom_properties of this EnrichedVersion.

        :return: The custom_properties of this EnrichedVersion.
        :rtype: ResourceBase
        """
        return self._custom_properties

    @custom_properties.setter
    def custom_properties(self, custom_properties):
        """
        Sets the custom_properties of this EnrichedVersion.

        :param custom_properties: The custom_properties of this EnrichedVersion.
        :type: ResourceBase
        """

        self._custom_properties = custom_properties

    @property
    def archive_download(self):
        """
        Gets the archive_download of this EnrichedVersion.

        :return: The archive_download of this EnrichedVersion.
        :rtype: ResourceBase
        """
        return self._archive_download

    @archive_download.setter
    def archive_download(self, archive_download):
        """
        Sets the archive_download of this EnrichedVersion.

        :param archive_download: The archive_download of this EnrichedVersion.
        :type: ResourceBase
        """

        self._archive_download = archive_download

    @property
    def files_download(self):
        """
        Gets the files_download of this EnrichedVersion.

        :return: The files_download of this EnrichedVersion.
        :rtype: ResourceBase
        """
        return self._files_download

    @files_download.setter
    def files_download(self, files_download):
        """
        Sets the files_download of this EnrichedVersion.

        :param files_download: The files_download of this EnrichedVersion.
        :type: ResourceBase
        """

        self._files_download = files_download

    @property
    def manifest_download(self):
        """
        Gets the manifest_download of this EnrichedVersion.

        :return: The manifest_download of this EnrichedVersion.
        :rtype: ResourceBase
        """
        return self._manifest_download

    @manifest_download.setter
    def manifest_download(self, manifest_download):
        """
        Sets the manifest_download of this EnrichedVersion.

        :param manifest_download: The manifest_download of this EnrichedVersion.
        :type: ResourceBase
        """

        self._manifest_download = manifest_download

    @property
    def tenants(self):
        """
        Gets the tenants of this EnrichedVersion.

        :return: The tenants of this EnrichedVersion.
        :rtype: ResourceBase
        """
        return self._tenants

    @tenants.setter
    def tenants(self, tenants):
        """
        Sets the tenants of this EnrichedVersion.

        :param tenants: The tenants of this EnrichedVersion.
        :type: ResourceBase
        """

        self._tenants = tenants

    @property
    def name(self):
        """
        Gets the name of this EnrichedVersion.

        :return: The name of this EnrichedVersion.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this EnrichedVersion.

        :param name: The name of this EnrichedVersion.
        :type: str
        """

        self._name = name

    @property
    def alias(self):
        """
        Gets the alias of this EnrichedVersion.

        :return: The alias of this EnrichedVersion.
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """
        Sets the alias of this EnrichedVersion.

        :param alias: The alias of this EnrichedVersion.
        :type: str
        """

        self._alias = alias

    @property
    def description(self):
        """
        Gets the description of this EnrichedVersion.

        :return: The description of this EnrichedVersion.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this EnrichedVersion.

        :param description: The description of this EnrichedVersion.
        :type: str
        """

        self._description = description

    @property
    def stage(self):
        """
        Gets the stage of this EnrichedVersion.

        :return: The stage of this EnrichedVersion.
        :rtype: str
        """
        return self._stage

    @stage.setter
    def stage(self, stage):
        """
        Sets the stage of this EnrichedVersion.

        :param stage: The stage of this EnrichedVersion.
        :type: str
        """

        self._stage = stage

    @property
    def state(self):
        """
        Gets the state of this EnrichedVersion.

        :return: The state of this EnrichedVersion.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this EnrichedVersion.

        :param state: The state of this EnrichedVersion.
        :type: str
        """

        self._state = state

    @property
    def application(self):
        """
        Gets the application of this EnrichedVersion.

        :return: The application of this EnrichedVersion.
        :rtype: ResourceBase
        """
        return self._application

    @application.setter
    def application(self, application):
        """
        Sets the application of this EnrichedVersion.

        :param application: The application of this EnrichedVersion.
        :type: ResourceBase
        """

        self._application = application

    @property
    def enable_sticky_sessions(self):
        """
        Gets the enable_sticky_sessions of this EnrichedVersion.

        :return: The enable_sticky_sessions of this EnrichedVersion.
        :rtype: bool
        """
        return self._enable_sticky_sessions

    @enable_sticky_sessions.setter
    def enable_sticky_sessions(self, enable_sticky_sessions):
        """
        Sets the enable_sticky_sessions of this EnrichedVersion.

        :param enable_sticky_sessions: The enable_sticky_sessions of this EnrichedVersion.
        :type: bool
        """

        self._enable_sticky_sessions = enable_sticky_sessions

    @property
    def enable_session_replication(self):
        """
        Gets the enable_session_replication of this EnrichedVersion.

        :return: The enable_session_replication of this EnrichedVersion.
        :rtype: bool
        """
        return self._enable_session_replication

    @enable_session_replication.setter
    def enable_session_replication(self, enable_session_replication):
        """
        Sets the enable_session_replication of this EnrichedVersion.

        :param enable_session_replication: The enable_session_replication of this EnrichedVersion.
        :type: bool
        """

        self._enable_session_replication = enable_session_replication

    @property
    def enable_ssl_enforcement(self):
        """
        Gets the enable_ssl_enforcement of this EnrichedVersion.

        :return: The enable_ssl_enforcement of this EnrichedVersion.
        :rtype: bool
        """
        return self._enable_ssl_enforcement

    @enable_ssl_enforcement.setter
    def enable_ssl_enforcement(self, enable_ssl_enforcement):
        """
        Sets the enable_ssl_enforcement of this EnrichedVersion.

        :param enable_ssl_enforcement: The enable_ssl_enforcement of this EnrichedVersion.
        :type: bool
        """

        self._enable_ssl_enforcement = enable_ssl_enforcement

    @property
    def load_balancer_url_configuration(self):
        """
        Gets the load_balancer_url_configuration of this EnrichedVersion.

        :return: The load_balancer_url_configuration of this EnrichedVersion.
        :rtype: str
        """
        return self._load_balancer_url_configuration

    @load_balancer_url_configuration.setter
    def load_balancer_url_configuration(self, load_balancer_url_configuration):
        """
        Sets the load_balancer_url_configuration of this EnrichedVersion.

        :param load_balancer_url_configuration: The load_balancer_url_configuration of this EnrichedVersion.
        :type: str
        """
        allowed_values = ["Preserve", "Redirect"]
        if load_balancer_url_configuration not in allowed_values:
            raise ValueError(
                "Invalid value for `load_balancer_url_configuration` ({0}), must be one of {1}"
                .format(load_balancer_url_configuration, allowed_values)
            )

        self._load_balancer_url_configuration = load_balancer_url_configuration

    @property
    def in_maintenance(self):
        """
        Gets the in_maintenance of this EnrichedVersion.

        :return: The in_maintenance of this EnrichedVersion.
        :rtype: bool
        """
        return self._in_maintenance

    @in_maintenance.setter
    def in_maintenance(self, in_maintenance):
        """
        Sets the in_maintenance of this EnrichedVersion.

        :param in_maintenance: The in_maintenance of this EnrichedVersion.
        :type: bool
        """

        self._in_maintenance = in_maintenance

    @property
    def href(self):
        """
        Gets the href of this EnrichedVersion.

        :return: The href of this EnrichedVersion.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """
        Sets the href of this EnrichedVersion.

        :param href: The href of this EnrichedVersion.
        :type: str
        """

        self._href = href

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, EnrichedVersion):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
