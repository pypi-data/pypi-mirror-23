# coding: utf-8

"""
    Apprenda.DeveloperPortal.Web

    The Application Management REST API can be leveraged to customize the Developer experience of deploying and managing applications  on the Apprenda Platform. This allows some of the functionality of the Platform's [Developer Portal](/current/developer-portal)to be accomplished through a variety of means such as custom-built UX or command-line interfaces.     ##Authentication    Before making a request, you must be authenticated. Learn how to [get authenticated](/restapi/appmanagement/v1/authentication).    ##Making a Request    ###Prerequisites    * Installed Platform of version 4.5.0 or later     * Authentication token     * To use this API you must be part of a [Development Team or Tenant](/current/create-users) and have an [active subscription](/current/dev-portal-setup#create) to Developer Portal    ###Request URL    All requests must use **https**.    The URL for every request you make is the Cloud URI of your Platform followed by \"/developer\" and the path structure of the endpoint. For example, if your Cloud URI is apps.apprenda.harp and you want to get the Add-ons for your Platform, the request URI will be **apps.apprenda.harp/developer/api/v1/addons**.      For more information, see our documentation on [using API resources](/restapi/appmanagement/v1/resources) and [finding your Cloud URI](/current/clouduri).

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CustomPropertyModel(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name=None, display_name=None, description=None, arbitrary_values_allowed=None, multi_select_allowed=None, editable=None, values=None, default_values=None, href=None):
        """
        CustomPropertyModel - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'display_name': 'str',
            'description': 'str',
            'arbitrary_values_allowed': 'bool',
            'multi_select_allowed': 'bool',
            'editable': 'bool',
            'values': 'list[str]',
            'default_values': 'list[str]',
            'href': 'str'
        }

        self.attribute_map = {
            'name': 'name',
            'display_name': 'displayName',
            'description': 'description',
            'arbitrary_values_allowed': 'arbitraryValuesAllowed',
            'multi_select_allowed': 'multiSelectAllowed',
            'editable': 'editable',
            'values': 'values',
            'default_values': 'defaultValues',
            'href': 'href'
        }

        self._name = name
        self._display_name = display_name
        self._description = description
        self._arbitrary_values_allowed = arbitrary_values_allowed
        self._multi_select_allowed = multi_select_allowed
        self._editable = editable
        self._values = values
        self._default_values = default_values
        self._href = href

    @property
    def name(self):
        """
        Gets the name of this CustomPropertyModel.

        :return: The name of this CustomPropertyModel.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this CustomPropertyModel.

        :param name: The name of this CustomPropertyModel.
        :type: str
        """

        self._name = name

    @property
    def display_name(self):
        """
        Gets the display_name of this CustomPropertyModel.

        :return: The display_name of this CustomPropertyModel.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """
        Sets the display_name of this CustomPropertyModel.

        :param display_name: The display_name of this CustomPropertyModel.
        :type: str
        """

        self._display_name = display_name

    @property
    def description(self):
        """
        Gets the description of this CustomPropertyModel.

        :return: The description of this CustomPropertyModel.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this CustomPropertyModel.

        :param description: The description of this CustomPropertyModel.
        :type: str
        """

        self._description = description

    @property
    def arbitrary_values_allowed(self):
        """
        Gets the arbitrary_values_allowed of this CustomPropertyModel.

        :return: The arbitrary_values_allowed of this CustomPropertyModel.
        :rtype: bool
        """
        return self._arbitrary_values_allowed

    @arbitrary_values_allowed.setter
    def arbitrary_values_allowed(self, arbitrary_values_allowed):
        """
        Sets the arbitrary_values_allowed of this CustomPropertyModel.

        :param arbitrary_values_allowed: The arbitrary_values_allowed of this CustomPropertyModel.
        :type: bool
        """

        self._arbitrary_values_allowed = arbitrary_values_allowed

    @property
    def multi_select_allowed(self):
        """
        Gets the multi_select_allowed of this CustomPropertyModel.

        :return: The multi_select_allowed of this CustomPropertyModel.
        :rtype: bool
        """
        return self._multi_select_allowed

    @multi_select_allowed.setter
    def multi_select_allowed(self, multi_select_allowed):
        """
        Sets the multi_select_allowed of this CustomPropertyModel.

        :param multi_select_allowed: The multi_select_allowed of this CustomPropertyModel.
        :type: bool
        """

        self._multi_select_allowed = multi_select_allowed

    @property
    def editable(self):
        """
        Gets the editable of this CustomPropertyModel.

        :return: The editable of this CustomPropertyModel.
        :rtype: bool
        """
        return self._editable

    @editable.setter
    def editable(self, editable):
        """
        Sets the editable of this CustomPropertyModel.

        :param editable: The editable of this CustomPropertyModel.
        :type: bool
        """

        self._editable = editable

    @property
    def values(self):
        """
        Gets the values of this CustomPropertyModel.

        :return: The values of this CustomPropertyModel.
        :rtype: list[str]
        """
        return self._values

    @values.setter
    def values(self, values):
        """
        Sets the values of this CustomPropertyModel.

        :param values: The values of this CustomPropertyModel.
        :type: list[str]
        """

        self._values = values

    @property
    def default_values(self):
        """
        Gets the default_values of this CustomPropertyModel.

        :return: The default_values of this CustomPropertyModel.
        :rtype: list[str]
        """
        return self._default_values

    @default_values.setter
    def default_values(self, default_values):
        """
        Sets the default_values of this CustomPropertyModel.

        :param default_values: The default_values of this CustomPropertyModel.
        :type: list[str]
        """

        self._default_values = default_values

    @property
    def href(self):
        """
        Gets the href of this CustomPropertyModel.

        :return: The href of this CustomPropertyModel.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """
        Sets the href of this CustomPropertyModel.

        :param href: The href of this CustomPropertyModel.
        :type: str
        """

        self._href = href

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CustomPropertyModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
