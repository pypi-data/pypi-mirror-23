# coding: utf-8

"""
    Apprenda.DeveloperPortal.Web

    The Application Management REST API can be leveraged to customize the Developer experience of deploying and managing applications  on the Apprenda Platform. This allows some of the functionality of the Platform's [Developer Portal](/current/developer-portal)to be accomplished through a variety of means such as custom-built UX or command-line interfaces.     ##Authentication    Before making a request, you must be authenticated. Learn how to [get authenticated](/restapi/appmanagement/v1/authentication).    ##Making a Request    ###Prerequisites    * Installed Platform of version 4.5.0 or later     * Authentication token     * To use this API you must be part of a [Development Team or Tenant](/current/create-users) and have an [active subscription](/current/dev-portal-setup#create) to Developer Portal    ###Request URL    All requests must use **https**.    The URL for every request you make is the Cloud URI of your Platform followed by \"/developer\" and the path structure of the endpoint. For example, if your Cloud URI is apps.apprenda.harp and you want to get the Add-ons for your Platform, the request URI will be **apps.apprenda.harp/developer/api/v1/addons**.      For more information, see our documentation on [using API resources](/restapi/appmanagement/v1/resources) and [finding your Cloud URI](/current/clouduri).

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class EnhancedAddOn(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, deployed_instances=None, manifest_version=None, name=None, alias=None, description=None, version=None, author=None, vendor=None, developer_help=None, deployment_notes=None, max_instances_per_dev_team=None, allow_user_defined_parameters=None, parameters=None, instances=None, icon=None, href=None):
        """
        EnhancedAddOn - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'deployed_instances': 'list[DeployedAddOnReference]',
            'manifest_version': 'int',
            'name': 'str',
            'alias': 'str',
            'description': 'str',
            'version': 'str',
            'author': 'str',
            'vendor': 'str',
            'developer_help': 'str',
            'deployment_notes': 'str',
            'max_instances_per_dev_team': 'int',
            'allow_user_defined_parameters': 'bool',
            'parameters': 'list[AddOnParameterDefinition]',
            'instances': 'AddOnInstancesContainer',
            'icon': 'ResourceBase',
            'href': 'str'
        }

        self.attribute_map = {
            'deployed_instances': 'deployedInstances',
            'manifest_version': 'manifestVersion',
            'name': 'name',
            'alias': 'alias',
            'description': 'description',
            'version': 'version',
            'author': 'author',
            'vendor': 'vendor',
            'developer_help': 'developerHelp',
            'deployment_notes': 'deploymentNotes',
            'max_instances_per_dev_team': 'maxInstancesPerDevTeam',
            'allow_user_defined_parameters': 'allowUserDefinedParameters',
            'parameters': 'parameters',
            'instances': 'instances',
            'icon': 'icon',
            'href': 'href'
        }

        self._deployed_instances = deployed_instances
        self._manifest_version = manifest_version
        self._name = name
        self._alias = alias
        self._description = description
        self._version = version
        self._author = author
        self._vendor = vendor
        self._developer_help = developer_help
        self._deployment_notes = deployment_notes
        self._max_instances_per_dev_team = max_instances_per_dev_team
        self._allow_user_defined_parameters = allow_user_defined_parameters
        self._parameters = parameters
        self._instances = instances
        self._icon = icon
        self._href = href

    @property
    def deployed_instances(self):
        """
        Gets the deployed_instances of this EnhancedAddOn.

        :return: The deployed_instances of this EnhancedAddOn.
        :rtype: list[DeployedAddOnReference]
        """
        return self._deployed_instances

    @deployed_instances.setter
    def deployed_instances(self, deployed_instances):
        """
        Sets the deployed_instances of this EnhancedAddOn.

        :param deployed_instances: The deployed_instances of this EnhancedAddOn.
        :type: list[DeployedAddOnReference]
        """

        self._deployed_instances = deployed_instances

    @property
    def manifest_version(self):
        """
        Gets the manifest_version of this EnhancedAddOn.

        :return: The manifest_version of this EnhancedAddOn.
        :rtype: int
        """
        return self._manifest_version

    @manifest_version.setter
    def manifest_version(self, manifest_version):
        """
        Sets the manifest_version of this EnhancedAddOn.

        :param manifest_version: The manifest_version of this EnhancedAddOn.
        :type: int
        """

        self._manifest_version = manifest_version

    @property
    def name(self):
        """
        Gets the name of this EnhancedAddOn.

        :return: The name of this EnhancedAddOn.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this EnhancedAddOn.

        :param name: The name of this EnhancedAddOn.
        :type: str
        """

        self._name = name

    @property
    def alias(self):
        """
        Gets the alias of this EnhancedAddOn.

        :return: The alias of this EnhancedAddOn.
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """
        Sets the alias of this EnhancedAddOn.

        :param alias: The alias of this EnhancedAddOn.
        :type: str
        """

        self._alias = alias

    @property
    def description(self):
        """
        Gets the description of this EnhancedAddOn.

        :return: The description of this EnhancedAddOn.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this EnhancedAddOn.

        :param description: The description of this EnhancedAddOn.
        :type: str
        """

        self._description = description

    @property
    def version(self):
        """
        Gets the version of this EnhancedAddOn.

        :return: The version of this EnhancedAddOn.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this EnhancedAddOn.

        :param version: The version of this EnhancedAddOn.
        :type: str
        """

        self._version = version

    @property
    def author(self):
        """
        Gets the author of this EnhancedAddOn.

        :return: The author of this EnhancedAddOn.
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):
        """
        Sets the author of this EnhancedAddOn.

        :param author: The author of this EnhancedAddOn.
        :type: str
        """

        self._author = author

    @property
    def vendor(self):
        """
        Gets the vendor of this EnhancedAddOn.

        :return: The vendor of this EnhancedAddOn.
        :rtype: str
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """
        Sets the vendor of this EnhancedAddOn.

        :param vendor: The vendor of this EnhancedAddOn.
        :type: str
        """

        self._vendor = vendor

    @property
    def developer_help(self):
        """
        Gets the developer_help of this EnhancedAddOn.

        :return: The developer_help of this EnhancedAddOn.
        :rtype: str
        """
        return self._developer_help

    @developer_help.setter
    def developer_help(self, developer_help):
        """
        Sets the developer_help of this EnhancedAddOn.

        :param developer_help: The developer_help of this EnhancedAddOn.
        :type: str
        """

        self._developer_help = developer_help

    @property
    def deployment_notes(self):
        """
        Gets the deployment_notes of this EnhancedAddOn.

        :return: The deployment_notes of this EnhancedAddOn.
        :rtype: str
        """
        return self._deployment_notes

    @deployment_notes.setter
    def deployment_notes(self, deployment_notes):
        """
        Sets the deployment_notes of this EnhancedAddOn.

        :param deployment_notes: The deployment_notes of this EnhancedAddOn.
        :type: str
        """

        self._deployment_notes = deployment_notes

    @property
    def max_instances_per_dev_team(self):
        """
        Gets the max_instances_per_dev_team of this EnhancedAddOn.

        :return: The max_instances_per_dev_team of this EnhancedAddOn.
        :rtype: int
        """
        return self._max_instances_per_dev_team

    @max_instances_per_dev_team.setter
    def max_instances_per_dev_team(self, max_instances_per_dev_team):
        """
        Sets the max_instances_per_dev_team of this EnhancedAddOn.

        :param max_instances_per_dev_team: The max_instances_per_dev_team of this EnhancedAddOn.
        :type: int
        """

        self._max_instances_per_dev_team = max_instances_per_dev_team

    @property
    def allow_user_defined_parameters(self):
        """
        Gets the allow_user_defined_parameters of this EnhancedAddOn.

        :return: The allow_user_defined_parameters of this EnhancedAddOn.
        :rtype: bool
        """
        return self._allow_user_defined_parameters

    @allow_user_defined_parameters.setter
    def allow_user_defined_parameters(self, allow_user_defined_parameters):
        """
        Sets the allow_user_defined_parameters of this EnhancedAddOn.

        :param allow_user_defined_parameters: The allow_user_defined_parameters of this EnhancedAddOn.
        :type: bool
        """

        self._allow_user_defined_parameters = allow_user_defined_parameters

    @property
    def parameters(self):
        """
        Gets the parameters of this EnhancedAddOn.

        :return: The parameters of this EnhancedAddOn.
        :rtype: list[AddOnParameterDefinition]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """
        Sets the parameters of this EnhancedAddOn.

        :param parameters: The parameters of this EnhancedAddOn.
        :type: list[AddOnParameterDefinition]
        """

        self._parameters = parameters

    @property
    def instances(self):
        """
        Gets the instances of this EnhancedAddOn.

        :return: The instances of this EnhancedAddOn.
        :rtype: AddOnInstancesContainer
        """
        return self._instances

    @instances.setter
    def instances(self, instances):
        """
        Sets the instances of this EnhancedAddOn.

        :param instances: The instances of this EnhancedAddOn.
        :type: AddOnInstancesContainer
        """

        self._instances = instances

    @property
    def icon(self):
        """
        Gets the icon of this EnhancedAddOn.

        :return: The icon of this EnhancedAddOn.
        :rtype: ResourceBase
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """
        Sets the icon of this EnhancedAddOn.

        :param icon: The icon of this EnhancedAddOn.
        :type: ResourceBase
        """

        self._icon = icon

    @property
    def href(self):
        """
        Gets the href of this EnhancedAddOn.

        :return: The href of this EnhancedAddOn.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """
        Sets the href of this EnhancedAddOn.

        :param href: The href of this EnhancedAddOn.
        :type: str
        """

        self._href = href

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, EnhancedAddOn):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
