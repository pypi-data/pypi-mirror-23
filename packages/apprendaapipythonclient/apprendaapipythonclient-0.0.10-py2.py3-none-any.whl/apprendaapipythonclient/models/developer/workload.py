# coding: utf-8

"""
    Apprenda.DeveloperPortal.Web

    The Application Management REST API can be leveraged to customize the Developer experience of deploying and managing applications  on the Apprenda Platform. This allows some of the functionality of the Platform's [Developer Portal](/current/developer-portal)to be accomplished through a variety of means such as custom-built UX or command-line interfaces.     ##Authentication    Before making a request, you must be authenticated. Learn how to [get authenticated](/restapi/appmanagement/v1/authentication).    ##Making a Request    ###Prerequisites    * Installed Platform of version 4.5.0 or later     * Authentication token     * To use this API you must be part of a [Development Team or Tenant](/current/create-users) and have an [active subscription](/current/dev-portal-setup#create) to Developer Portal    ###Request URL    All requests must use **https**.    The URL for every request you make is the Cloud URI of your Platform followed by \"/developer\" and the path structure of the endpoint. For example, if your Cloud URI is apps.apprenda.harp and you want to get the Add-ons for your Platform, the request URI will be **apps.apprenda.harp/developer/api/v1/addons**.      For more information, see our documentation on [using API resources](/restapi/appmanagement/v1/resources) and [finding your Cloud URI](/current/clouduri).

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Workload(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name=None, server=None, component=None, resource_policy=None, storage_quota=None, storage_blocks=None, tenant_count=None, utilization=None, allocated_ports=None, debug_connection=None, instance_id=None, jmx_connection=None, href=None):
        """
        Workload - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'server': 'str',
            'component': 'ComponentReference',
            'resource_policy': 'ResourceAllocationPolicyReference',
            'storage_quota': 'StorageQuotaReference',
            'storage_blocks': 'int',
            'tenant_count': 'int',
            'utilization': 'ResourceBase',
            'allocated_ports': 'list[int]',
            'debug_connection': 'DebugConnection',
            'instance_id': 'str',
            'jmx_connection': 'JMXConnection',
            'href': 'str'
        }

        self.attribute_map = {
            'name': 'name',
            'server': 'server',
            'component': 'component',
            'resource_policy': 'resourcePolicy',
            'storage_quota': 'storageQuota',
            'storage_blocks': 'storageBlocks',
            'tenant_count': 'tenantCount',
            'utilization': 'utilization',
            'allocated_ports': 'allocatedPorts',
            'debug_connection': 'debugConnection',
            'instance_id': 'instanceId',
            'jmx_connection': 'jmxConnection',
            'href': 'href'
        }

        self._name = name
        self._server = server
        self._component = component
        self._resource_policy = resource_policy
        self._storage_quota = storage_quota
        self._storage_blocks = storage_blocks
        self._tenant_count = tenant_count
        self._utilization = utilization
        self._allocated_ports = allocated_ports
        self._debug_connection = debug_connection
        self._instance_id = instance_id
        self._jmx_connection = jmx_connection
        self._href = href

    @property
    def name(self):
        """
        Gets the name of this Workload.

        :return: The name of this Workload.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Workload.

        :param name: The name of this Workload.
        :type: str
        """

        self._name = name

    @property
    def server(self):
        """
        Gets the server of this Workload.

        :return: The server of this Workload.
        :rtype: str
        """
        return self._server

    @server.setter
    def server(self, server):
        """
        Sets the server of this Workload.

        :param server: The server of this Workload.
        :type: str
        """

        self._server = server

    @property
    def component(self):
        """
        Gets the component of this Workload.

        :return: The component of this Workload.
        :rtype: ComponentReference
        """
        return self._component

    @component.setter
    def component(self, component):
        """
        Sets the component of this Workload.

        :param component: The component of this Workload.
        :type: ComponentReference
        """

        self._component = component

    @property
    def resource_policy(self):
        """
        Gets the resource_policy of this Workload.

        :return: The resource_policy of this Workload.
        :rtype: ResourceAllocationPolicyReference
        """
        return self._resource_policy

    @resource_policy.setter
    def resource_policy(self, resource_policy):
        """
        Sets the resource_policy of this Workload.

        :param resource_policy: The resource_policy of this Workload.
        :type: ResourceAllocationPolicyReference
        """

        self._resource_policy = resource_policy

    @property
    def storage_quota(self):
        """
        Gets the storage_quota of this Workload.

        :return: The storage_quota of this Workload.
        :rtype: StorageQuotaReference
        """
        return self._storage_quota

    @storage_quota.setter
    def storage_quota(self, storage_quota):
        """
        Sets the storage_quota of this Workload.

        :param storage_quota: The storage_quota of this Workload.
        :type: StorageQuotaReference
        """

        self._storage_quota = storage_quota

    @property
    def storage_blocks(self):
        """
        Gets the storage_blocks of this Workload.

        :return: The storage_blocks of this Workload.
        :rtype: int
        """
        return self._storage_blocks

    @storage_blocks.setter
    def storage_blocks(self, storage_blocks):
        """
        Sets the storage_blocks of this Workload.

        :param storage_blocks: The storage_blocks of this Workload.
        :type: int
        """

        self._storage_blocks = storage_blocks

    @property
    def tenant_count(self):
        """
        Gets the tenant_count of this Workload.

        :return: The tenant_count of this Workload.
        :rtype: int
        """
        return self._tenant_count

    @tenant_count.setter
    def tenant_count(self, tenant_count):
        """
        Sets the tenant_count of this Workload.

        :param tenant_count: The tenant_count of this Workload.
        :type: int
        """

        self._tenant_count = tenant_count

    @property
    def utilization(self):
        """
        Gets the utilization of this Workload.

        :return: The utilization of this Workload.
        :rtype: ResourceBase
        """
        return self._utilization

    @utilization.setter
    def utilization(self, utilization):
        """
        Sets the utilization of this Workload.

        :param utilization: The utilization of this Workload.
        :type: ResourceBase
        """

        self._utilization = utilization

    @property
    def allocated_ports(self):
        """
        Gets the allocated_ports of this Workload.

        :return: The allocated_ports of this Workload.
        :rtype: list[int]
        """
        return self._allocated_ports

    @allocated_ports.setter
    def allocated_ports(self, allocated_ports):
        """
        Sets the allocated_ports of this Workload.

        :param allocated_ports: The allocated_ports of this Workload.
        :type: list[int]
        """

        self._allocated_ports = allocated_ports

    @property
    def debug_connection(self):
        """
        Gets the debug_connection of this Workload.

        :return: The debug_connection of this Workload.
        :rtype: DebugConnection
        """
        return self._debug_connection

    @debug_connection.setter
    def debug_connection(self, debug_connection):
        """
        Sets the debug_connection of this Workload.

        :param debug_connection: The debug_connection of this Workload.
        :type: DebugConnection
        """

        self._debug_connection = debug_connection

    @property
    def instance_id(self):
        """
        Gets the instance_id of this Workload.

        :return: The instance_id of this Workload.
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """
        Sets the instance_id of this Workload.

        :param instance_id: The instance_id of this Workload.
        :type: str
        """

        self._instance_id = instance_id

    @property
    def jmx_connection(self):
        """
        Gets the jmx_connection of this Workload.

        :return: The jmx_connection of this Workload.
        :rtype: JMXConnection
        """
        return self._jmx_connection

    @jmx_connection.setter
    def jmx_connection(self, jmx_connection):
        """
        Sets the jmx_connection of this Workload.

        :param jmx_connection: The jmx_connection of this Workload.
        :type: JMXConnection
        """

        self._jmx_connection = jmx_connection

    @property
    def href(self):
        """
        Gets the href of this Workload.

        :return: The href of this Workload.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """
        Sets the href of this Workload.

        :param href: The href of this Workload.
        :type: str
        """

        self._href = href

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Workload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
