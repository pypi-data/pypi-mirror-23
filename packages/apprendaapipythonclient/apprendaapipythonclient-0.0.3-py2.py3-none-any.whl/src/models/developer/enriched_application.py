# coding: utf-8

"""
    Apprenda.DeveloperPortal.Web

    The Application Management REST API can be leveraged to customize the Developer experience of deploying and managing applications  on the Apprenda Platform. This allows some of the functionality of the Platform's [Developer Portal](/current/developer-portal)to be accomplished through a variety of means such as custom-built UX or command-line interfaces.     ##Authentication    Before making a request, you must be authenticated. Learn how to [get authenticated](/restapi/appmanagement/v1/authentication).    ##Making a Request    ###Prerequisites    * Installed Platform of version 4.5.0 or later     * Authentication token     * To use this API you must be part of a [Development Team or Tenant](/current/create-users) and have an [active subscription](/current/dev-portal-setup#create) to Developer Portal    ###Request URL    All requests must use **https**.    The URL for every request you make is the Cloud URI of your Platform followed by \"/developer\" and the path structure of the endpoint. For example, if your Cloud URI is apps.apprenda.harp and you want to get the Add-ons for your Platform, the request URI will be **apps.apprenda.harp/developer/api/v1/addons**.      For more information, see our documentation on [using API resources](/restapi/appmanagement/v1/resources) and [finding your Cloud URI](/current/clouduri).

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class EnrichedApplication(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, versions=None, database_provider=None, database_model_type=None, user_interface_type=None, payment_options=None, application_services=None, custom_authentication_style_url=None, custom_invoice_style_url=None, custom_url=None, custom_url_certificate=None, cloud=None, has_database_model=None, name=None, alias=None, description=None, current_version=None, transitioning_version=None, ui_allocated_cpu_mhz=None, db_allocated_cpu_mhz=None, svc_allocated_cpu_mhz=None, war_allocated_cpu_mhz=None, linux_service_allocated_cpu_mhz=None, ui_allocated_memory_mb=None, db_allocated_memory_mb=None, svc_allocated_memory_mb=None, war_allocated_memory_mb=None, linux_service_allocated_memory_mb=None, allocated_storage_mb=None, href=None):
        """
        EnrichedApplication - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'versions': 'ResourceBase',
            'database_provider': 'str',
            'database_model_type': 'str',
            'user_interface_type': 'str',
            'payment_options': 'str',
            'application_services': 'str',
            'custom_authentication_style_url': 'str',
            'custom_invoice_style_url': 'str',
            'custom_url': 'str',
            'custom_url_certificate': 'MinimalCustomUrlCertificate',
            'cloud': 'CloudReference',
            'has_database_model': 'bool',
            'name': 'str',
            'alias': 'str',
            'description': 'str',
            'current_version': 'Version',
            'transitioning_version': 'Version',
            'ui_allocated_cpu_mhz': 'int',
            'db_allocated_cpu_mhz': 'int',
            'svc_allocated_cpu_mhz': 'int',
            'war_allocated_cpu_mhz': 'int',
            'linux_service_allocated_cpu_mhz': 'int',
            'ui_allocated_memory_mb': 'int',
            'db_allocated_memory_mb': 'int',
            'svc_allocated_memory_mb': 'int',
            'war_allocated_memory_mb': 'int',
            'linux_service_allocated_memory_mb': 'int',
            'allocated_storage_mb': 'int',
            'href': 'str'
        }

        self.attribute_map = {
            'versions': 'versions',
            'database_provider': 'databaseProvider',
            'database_model_type': 'databaseModelType',
            'user_interface_type': 'userInterfaceType',
            'payment_options': 'paymentOptions',
            'application_services': 'applicationServices',
            'custom_authentication_style_url': 'customAuthenticationStyleUrl',
            'custom_invoice_style_url': 'customInvoiceStyleUrl',
            'custom_url': 'customUrl',
            'custom_url_certificate': 'customUrlCertificate',
            'cloud': 'cloud',
            'has_database_model': 'hasDatabaseModel',
            'name': 'name',
            'alias': 'alias',
            'description': 'description',
            'current_version': 'currentVersion',
            'transitioning_version': 'transitioningVersion',
            'ui_allocated_cpu_mhz': 'uiAllocatedCpuMhz',
            'db_allocated_cpu_mhz': 'dbAllocatedCpuMhz',
            'svc_allocated_cpu_mhz': 'svcAllocatedCpuMhz',
            'war_allocated_cpu_mhz': 'warAllocatedCpuMhz',
            'linux_service_allocated_cpu_mhz': 'linuxServiceAllocatedCpuMhz',
            'ui_allocated_memory_mb': 'uiAllocatedMemoryMb',
            'db_allocated_memory_mb': 'dbAllocatedMemoryMb',
            'svc_allocated_memory_mb': 'svcAllocatedMemoryMb',
            'war_allocated_memory_mb': 'warAllocatedMemoryMb',
            'linux_service_allocated_memory_mb': 'linuxServiceAllocatedMemoryMb',
            'allocated_storage_mb': 'allocatedStorageMb',
            'href': 'href'
        }

        self._versions = versions
        self._database_provider = database_provider
        self._database_model_type = database_model_type
        self._user_interface_type = user_interface_type
        self._payment_options = payment_options
        self._application_services = application_services
        self._custom_authentication_style_url = custom_authentication_style_url
        self._custom_invoice_style_url = custom_invoice_style_url
        self._custom_url = custom_url
        self._custom_url_certificate = custom_url_certificate
        self._cloud = cloud
        self._has_database_model = has_database_model
        self._name = name
        self._alias = alias
        self._description = description
        self._current_version = current_version
        self._transitioning_version = transitioning_version
        self._ui_allocated_cpu_mhz = ui_allocated_cpu_mhz
        self._db_allocated_cpu_mhz = db_allocated_cpu_mhz
        self._svc_allocated_cpu_mhz = svc_allocated_cpu_mhz
        self._war_allocated_cpu_mhz = war_allocated_cpu_mhz
        self._linux_service_allocated_cpu_mhz = linux_service_allocated_cpu_mhz
        self._ui_allocated_memory_mb = ui_allocated_memory_mb
        self._db_allocated_memory_mb = db_allocated_memory_mb
        self._svc_allocated_memory_mb = svc_allocated_memory_mb
        self._war_allocated_memory_mb = war_allocated_memory_mb
        self._linux_service_allocated_memory_mb = linux_service_allocated_memory_mb
        self._allocated_storage_mb = allocated_storage_mb
        self._href = href

    @property
    def versions(self):
        """
        Gets the versions of this EnrichedApplication.

        :return: The versions of this EnrichedApplication.
        :rtype: ResourceBase
        """
        return self._versions

    @versions.setter
    def versions(self, versions):
        """
        Sets the versions of this EnrichedApplication.

        :param versions: The versions of this EnrichedApplication.
        :type: ResourceBase
        """

        self._versions = versions

    @property
    def database_provider(self):
        """
        Gets the database_provider of this EnrichedApplication.

        :return: The database_provider of this EnrichedApplication.
        :rtype: str
        """
        return self._database_provider

    @database_provider.setter
    def database_provider(self, database_provider):
        """
        Sets the database_provider of this EnrichedApplication.

        :param database_provider: The database_provider of this EnrichedApplication.
        :type: str
        """
        allowed_values = ["SqlServer", "Oracle11G", "Oracle12C"]
        if database_provider not in allowed_values:
            raise ValueError(
                "Invalid value for `database_provider` ({0}), must be one of {1}"
                .format(database_provider, allowed_values)
            )

        self._database_provider = database_provider

    @property
    def database_model_type(self):
        """
        Gets the database_model_type of this EnrichedApplication.

        :return: The database_model_type of this EnrichedApplication.
        :rtype: str
        """
        return self._database_model_type

    @database_model_type.setter
    def database_model_type(self, database_model_type):
        """
        Sets the database_model_type of this EnrichedApplication.

        :param database_model_type: The database_model_type of this EnrichedApplication.
        :type: str
        """
        allowed_values = ["Commingled", "Isolated"]
        if database_model_type not in allowed_values:
            raise ValueError(
                "Invalid value for `database_model_type` ({0}), must be one of {1}"
                .format(database_model_type, allowed_values)
            )

        self._database_model_type = database_model_type

    @property
    def user_interface_type(self):
        """
        Gets the user_interface_type of this EnrichedApplication.

        :return: The user_interface_type of this EnrichedApplication.
        :rtype: str
        """
        return self._user_interface_type

    @user_interface_type.setter
    def user_interface_type(self, user_interface_type):
        """
        Sets the user_interface_type of this EnrichedApplication.

        :param user_interface_type: The user_interface_type of this EnrichedApplication.
        :type: str
        """
        allowed_values = ["CommingledRootApp", "CommingledAppRoot"]
        if user_interface_type not in allowed_values:
            raise ValueError(
                "Invalid value for `user_interface_type` ({0}), must be one of {1}"
                .format(user_interface_type, allowed_values)
            )

        self._user_interface_type = user_interface_type

    @property
    def payment_options(self):
        """
        Gets the payment_options of this EnrichedApplication.

        :return: The payment_options of this EnrichedApplication.
        :rtype: str
        """
        return self._payment_options

    @payment_options.setter
    def payment_options(self, payment_options):
        """
        Sets the payment_options of this EnrichedApplication.

        :param payment_options: The payment_options of this EnrichedApplication.
        :type: str
        """
        allowed_values = ["Automatic", "Manual", "Both"]
        if payment_options not in allowed_values:
            raise ValueError(
                "Invalid value for `payment_options` ({0}), must be one of {1}"
                .format(payment_options, allowed_values)
            )

        self._payment_options = payment_options

    @property
    def application_services(self):
        """
        Gets the application_services of this EnrichedApplication.

        :return: The application_services of this EnrichedApplication.
        :rtype: str
        """
        return self._application_services

    @application_services.setter
    def application_services(self, application_services):
        """
        Sets the application_services of this EnrichedApplication.

        :param application_services: The application_services of this EnrichedApplication.
        :type: str
        """
        allowed_values = ["None", "Authentication", "Authorization", "Multitenancy", "Billing"]
        if application_services not in allowed_values:
            raise ValueError(
                "Invalid value for `application_services` ({0}), must be one of {1}"
                .format(application_services, allowed_values)
            )

        self._application_services = application_services

    @property
    def custom_authentication_style_url(self):
        """
        Gets the custom_authentication_style_url of this EnrichedApplication.

        :return: The custom_authentication_style_url of this EnrichedApplication.
        :rtype: str
        """
        return self._custom_authentication_style_url

    @custom_authentication_style_url.setter
    def custom_authentication_style_url(self, custom_authentication_style_url):
        """
        Sets the custom_authentication_style_url of this EnrichedApplication.

        :param custom_authentication_style_url: The custom_authentication_style_url of this EnrichedApplication.
        :type: str
        """

        self._custom_authentication_style_url = custom_authentication_style_url

    @property
    def custom_invoice_style_url(self):
        """
        Gets the custom_invoice_style_url of this EnrichedApplication.

        :return: The custom_invoice_style_url of this EnrichedApplication.
        :rtype: str
        """
        return self._custom_invoice_style_url

    @custom_invoice_style_url.setter
    def custom_invoice_style_url(self, custom_invoice_style_url):
        """
        Sets the custom_invoice_style_url of this EnrichedApplication.

        :param custom_invoice_style_url: The custom_invoice_style_url of this EnrichedApplication.
        :type: str
        """

        self._custom_invoice_style_url = custom_invoice_style_url

    @property
    def custom_url(self):
        """
        Gets the custom_url of this EnrichedApplication.

        :return: The custom_url of this EnrichedApplication.
        :rtype: str
        """
        return self._custom_url

    @custom_url.setter
    def custom_url(self, custom_url):
        """
        Sets the custom_url of this EnrichedApplication.

        :param custom_url: The custom_url of this EnrichedApplication.
        :type: str
        """

        self._custom_url = custom_url

    @property
    def custom_url_certificate(self):
        """
        Gets the custom_url_certificate of this EnrichedApplication.

        :return: The custom_url_certificate of this EnrichedApplication.
        :rtype: MinimalCustomUrlCertificate
        """
        return self._custom_url_certificate

    @custom_url_certificate.setter
    def custom_url_certificate(self, custom_url_certificate):
        """
        Sets the custom_url_certificate of this EnrichedApplication.

        :param custom_url_certificate: The custom_url_certificate of this EnrichedApplication.
        :type: MinimalCustomUrlCertificate
        """

        self._custom_url_certificate = custom_url_certificate

    @property
    def cloud(self):
        """
        Gets the cloud of this EnrichedApplication.

        :return: The cloud of this EnrichedApplication.
        :rtype: CloudReference
        """
        return self._cloud

    @cloud.setter
    def cloud(self, cloud):
        """
        Sets the cloud of this EnrichedApplication.

        :param cloud: The cloud of this EnrichedApplication.
        :type: CloudReference
        """

        self._cloud = cloud

    @property
    def has_database_model(self):
        """
        Gets the has_database_model of this EnrichedApplication.

        :return: The has_database_model of this EnrichedApplication.
        :rtype: bool
        """
        return self._has_database_model

    @has_database_model.setter
    def has_database_model(self, has_database_model):
        """
        Sets the has_database_model of this EnrichedApplication.

        :param has_database_model: The has_database_model of this EnrichedApplication.
        :type: bool
        """

        self._has_database_model = has_database_model

    @property
    def name(self):
        """
        Gets the name of this EnrichedApplication.

        :return: The name of this EnrichedApplication.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this EnrichedApplication.

        :param name: The name of this EnrichedApplication.
        :type: str
        """

        self._name = name

    @property
    def alias(self):
        """
        Gets the alias of this EnrichedApplication.

        :return: The alias of this EnrichedApplication.
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """
        Sets the alias of this EnrichedApplication.

        :param alias: The alias of this EnrichedApplication.
        :type: str
        """

        self._alias = alias

    @property
    def description(self):
        """
        Gets the description of this EnrichedApplication.

        :return: The description of this EnrichedApplication.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this EnrichedApplication.

        :param description: The description of this EnrichedApplication.
        :type: str
        """

        self._description = description

    @property
    def current_version(self):
        """
        Gets the current_version of this EnrichedApplication.

        :return: The current_version of this EnrichedApplication.
        :rtype: Version
        """
        return self._current_version

    @current_version.setter
    def current_version(self, current_version):
        """
        Sets the current_version of this EnrichedApplication.

        :param current_version: The current_version of this EnrichedApplication.
        :type: Version
        """

        self._current_version = current_version

    @property
    def transitioning_version(self):
        """
        Gets the transitioning_version of this EnrichedApplication.

        :return: The transitioning_version of this EnrichedApplication.
        :rtype: Version
        """
        return self._transitioning_version

    @transitioning_version.setter
    def transitioning_version(self, transitioning_version):
        """
        Sets the transitioning_version of this EnrichedApplication.

        :param transitioning_version: The transitioning_version of this EnrichedApplication.
        :type: Version
        """

        self._transitioning_version = transitioning_version

    @property
    def ui_allocated_cpu_mhz(self):
        """
        Gets the ui_allocated_cpu_mhz of this EnrichedApplication.

        :return: The ui_allocated_cpu_mhz of this EnrichedApplication.
        :rtype: int
        """
        return self._ui_allocated_cpu_mhz

    @ui_allocated_cpu_mhz.setter
    def ui_allocated_cpu_mhz(self, ui_allocated_cpu_mhz):
        """
        Sets the ui_allocated_cpu_mhz of this EnrichedApplication.

        :param ui_allocated_cpu_mhz: The ui_allocated_cpu_mhz of this EnrichedApplication.
        :type: int
        """

        self._ui_allocated_cpu_mhz = ui_allocated_cpu_mhz

    @property
    def db_allocated_cpu_mhz(self):
        """
        Gets the db_allocated_cpu_mhz of this EnrichedApplication.

        :return: The db_allocated_cpu_mhz of this EnrichedApplication.
        :rtype: int
        """
        return self._db_allocated_cpu_mhz

    @db_allocated_cpu_mhz.setter
    def db_allocated_cpu_mhz(self, db_allocated_cpu_mhz):
        """
        Sets the db_allocated_cpu_mhz of this EnrichedApplication.

        :param db_allocated_cpu_mhz: The db_allocated_cpu_mhz of this EnrichedApplication.
        :type: int
        """

        self._db_allocated_cpu_mhz = db_allocated_cpu_mhz

    @property
    def svc_allocated_cpu_mhz(self):
        """
        Gets the svc_allocated_cpu_mhz of this EnrichedApplication.

        :return: The svc_allocated_cpu_mhz of this EnrichedApplication.
        :rtype: int
        """
        return self._svc_allocated_cpu_mhz

    @svc_allocated_cpu_mhz.setter
    def svc_allocated_cpu_mhz(self, svc_allocated_cpu_mhz):
        """
        Sets the svc_allocated_cpu_mhz of this EnrichedApplication.

        :param svc_allocated_cpu_mhz: The svc_allocated_cpu_mhz of this EnrichedApplication.
        :type: int
        """

        self._svc_allocated_cpu_mhz = svc_allocated_cpu_mhz

    @property
    def war_allocated_cpu_mhz(self):
        """
        Gets the war_allocated_cpu_mhz of this EnrichedApplication.

        :return: The war_allocated_cpu_mhz of this EnrichedApplication.
        :rtype: int
        """
        return self._war_allocated_cpu_mhz

    @war_allocated_cpu_mhz.setter
    def war_allocated_cpu_mhz(self, war_allocated_cpu_mhz):
        """
        Sets the war_allocated_cpu_mhz of this EnrichedApplication.

        :param war_allocated_cpu_mhz: The war_allocated_cpu_mhz of this EnrichedApplication.
        :type: int
        """

        self._war_allocated_cpu_mhz = war_allocated_cpu_mhz

    @property
    def linux_service_allocated_cpu_mhz(self):
        """
        Gets the linux_service_allocated_cpu_mhz of this EnrichedApplication.

        :return: The linux_service_allocated_cpu_mhz of this EnrichedApplication.
        :rtype: int
        """
        return self._linux_service_allocated_cpu_mhz

    @linux_service_allocated_cpu_mhz.setter
    def linux_service_allocated_cpu_mhz(self, linux_service_allocated_cpu_mhz):
        """
        Sets the linux_service_allocated_cpu_mhz of this EnrichedApplication.

        :param linux_service_allocated_cpu_mhz: The linux_service_allocated_cpu_mhz of this EnrichedApplication.
        :type: int
        """

        self._linux_service_allocated_cpu_mhz = linux_service_allocated_cpu_mhz

    @property
    def ui_allocated_memory_mb(self):
        """
        Gets the ui_allocated_memory_mb of this EnrichedApplication.

        :return: The ui_allocated_memory_mb of this EnrichedApplication.
        :rtype: int
        """
        return self._ui_allocated_memory_mb

    @ui_allocated_memory_mb.setter
    def ui_allocated_memory_mb(self, ui_allocated_memory_mb):
        """
        Sets the ui_allocated_memory_mb of this EnrichedApplication.

        :param ui_allocated_memory_mb: The ui_allocated_memory_mb of this EnrichedApplication.
        :type: int
        """

        self._ui_allocated_memory_mb = ui_allocated_memory_mb

    @property
    def db_allocated_memory_mb(self):
        """
        Gets the db_allocated_memory_mb of this EnrichedApplication.

        :return: The db_allocated_memory_mb of this EnrichedApplication.
        :rtype: int
        """
        return self._db_allocated_memory_mb

    @db_allocated_memory_mb.setter
    def db_allocated_memory_mb(self, db_allocated_memory_mb):
        """
        Sets the db_allocated_memory_mb of this EnrichedApplication.

        :param db_allocated_memory_mb: The db_allocated_memory_mb of this EnrichedApplication.
        :type: int
        """

        self._db_allocated_memory_mb = db_allocated_memory_mb

    @property
    def svc_allocated_memory_mb(self):
        """
        Gets the svc_allocated_memory_mb of this EnrichedApplication.

        :return: The svc_allocated_memory_mb of this EnrichedApplication.
        :rtype: int
        """
        return self._svc_allocated_memory_mb

    @svc_allocated_memory_mb.setter
    def svc_allocated_memory_mb(self, svc_allocated_memory_mb):
        """
        Sets the svc_allocated_memory_mb of this EnrichedApplication.

        :param svc_allocated_memory_mb: The svc_allocated_memory_mb of this EnrichedApplication.
        :type: int
        """

        self._svc_allocated_memory_mb = svc_allocated_memory_mb

    @property
    def war_allocated_memory_mb(self):
        """
        Gets the war_allocated_memory_mb of this EnrichedApplication.

        :return: The war_allocated_memory_mb of this EnrichedApplication.
        :rtype: int
        """
        return self._war_allocated_memory_mb

    @war_allocated_memory_mb.setter
    def war_allocated_memory_mb(self, war_allocated_memory_mb):
        """
        Sets the war_allocated_memory_mb of this EnrichedApplication.

        :param war_allocated_memory_mb: The war_allocated_memory_mb of this EnrichedApplication.
        :type: int
        """

        self._war_allocated_memory_mb = war_allocated_memory_mb

    @property
    def linux_service_allocated_memory_mb(self):
        """
        Gets the linux_service_allocated_memory_mb of this EnrichedApplication.

        :return: The linux_service_allocated_memory_mb of this EnrichedApplication.
        :rtype: int
        """
        return self._linux_service_allocated_memory_mb

    @linux_service_allocated_memory_mb.setter
    def linux_service_allocated_memory_mb(self, linux_service_allocated_memory_mb):
        """
        Sets the linux_service_allocated_memory_mb of this EnrichedApplication.

        :param linux_service_allocated_memory_mb: The linux_service_allocated_memory_mb of this EnrichedApplication.
        :type: int
        """

        self._linux_service_allocated_memory_mb = linux_service_allocated_memory_mb

    @property
    def allocated_storage_mb(self):
        """
        Gets the allocated_storage_mb of this EnrichedApplication.

        :return: The allocated_storage_mb of this EnrichedApplication.
        :rtype: int
        """
        return self._allocated_storage_mb

    @allocated_storage_mb.setter
    def allocated_storage_mb(self, allocated_storage_mb):
        """
        Sets the allocated_storage_mb of this EnrichedApplication.

        :param allocated_storage_mb: The allocated_storage_mb of this EnrichedApplication.
        :type: int
        """

        self._allocated_storage_mb = allocated_storage_mb

    @property
    def href(self):
        """
        Gets the href of this EnrichedApplication.

        :return: The href of this EnrichedApplication.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """
        Sets the href of this EnrichedApplication.

        :param href: The href of this EnrichedApplication.
        :type: str
        """

        self._href = href

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, EnrichedApplication):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
