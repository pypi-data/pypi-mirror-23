# coding: utf-8

"""
    Apprenda.DeveloperPortal.Web

    The Application Management REST API can be leveraged to customize the Developer experience of deploying and managing applications  on the Apprenda Platform. This allows some of the functionality of the Platform's [Developer Portal](/current/developer-portal)to be accomplished through a variety of means such as custom-built UX or command-line interfaces.     ##Authentication    Before making a request, you must be authenticated. Learn how to [get authenticated](/restapi/appmanagement/v1/authentication).    ##Making a Request    ###Prerequisites    * Installed Platform of version 4.5.0 or later     * Authentication token     * To use this API you must be part of a [Development Team or Tenant](/current/create-users) and have an [active subscription](/current/dev-portal-setup#create) to Developer Portal    ###Request URL    All requests must use **https**.    The URL for every request you make is the Cloud URI of your Platform followed by \"/developer\" and the path structure of the endpoint. For example, if your Cloud URI is apps.apprenda.harp and you want to get the Add-ons for your Platform, the request URI will be **apps.apprenda.harp/developer/api/v1/addons**.      For more information, see our documentation on [using API resources](/restapi/appmanagement/v1/resources) and [finding your Cloud URI](/current/clouduri).

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class PagedResourceBaseSubscribedUser(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, current_page=None, page_size=None, total_pages=None, total_items=None, items=None, next_page=None, previous_page=None, href=None):
        """
        PagedResourceBaseSubscribedUser - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'current_page': 'int',
            'page_size': 'int',
            'total_pages': 'int',
            'total_items': 'int',
            'items': 'list[SubscribedUser]',
            'next_page': 'ResourceBase',
            'previous_page': 'ResourceBase',
            'href': 'str'
        }

        self.attribute_map = {
            'current_page': 'currentPage',
            'page_size': 'pageSize',
            'total_pages': 'totalPages',
            'total_items': 'totalItems',
            'items': 'items',
            'next_page': 'nextPage',
            'previous_page': 'previousPage',
            'href': 'href'
        }

        self._current_page = current_page
        self._page_size = page_size
        self._total_pages = total_pages
        self._total_items = total_items
        self._items = items
        self._next_page = next_page
        self._previous_page = previous_page
        self._href = href

    @property
    def current_page(self):
        """
        Gets the current_page of this PagedResourceBaseSubscribedUser.

        :return: The current_page of this PagedResourceBaseSubscribedUser.
        :rtype: int
        """
        return self._current_page

    @current_page.setter
    def current_page(self, current_page):
        """
        Sets the current_page of this PagedResourceBaseSubscribedUser.

        :param current_page: The current_page of this PagedResourceBaseSubscribedUser.
        :type: int
        """

        self._current_page = current_page

    @property
    def page_size(self):
        """
        Gets the page_size of this PagedResourceBaseSubscribedUser.

        :return: The page_size of this PagedResourceBaseSubscribedUser.
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """
        Sets the page_size of this PagedResourceBaseSubscribedUser.

        :param page_size: The page_size of this PagedResourceBaseSubscribedUser.
        :type: int
        """

        self._page_size = page_size

    @property
    def total_pages(self):
        """
        Gets the total_pages of this PagedResourceBaseSubscribedUser.

        :return: The total_pages of this PagedResourceBaseSubscribedUser.
        :rtype: int
        """
        return self._total_pages

    @total_pages.setter
    def total_pages(self, total_pages):
        """
        Sets the total_pages of this PagedResourceBaseSubscribedUser.

        :param total_pages: The total_pages of this PagedResourceBaseSubscribedUser.
        :type: int
        """

        self._total_pages = total_pages

    @property
    def total_items(self):
        """
        Gets the total_items of this PagedResourceBaseSubscribedUser.

        :return: The total_items of this PagedResourceBaseSubscribedUser.
        :rtype: int
        """
        return self._total_items

    @total_items.setter
    def total_items(self, total_items):
        """
        Sets the total_items of this PagedResourceBaseSubscribedUser.

        :param total_items: The total_items of this PagedResourceBaseSubscribedUser.
        :type: int
        """

        self._total_items = total_items

    @property
    def items(self):
        """
        Gets the items of this PagedResourceBaseSubscribedUser.

        :return: The items of this PagedResourceBaseSubscribedUser.
        :rtype: list[SubscribedUser]
        """
        return self._items

    @items.setter
    def items(self, items):
        """
        Sets the items of this PagedResourceBaseSubscribedUser.

        :param items: The items of this PagedResourceBaseSubscribedUser.
        :type: list[SubscribedUser]
        """

        self._items = items

    @property
    def next_page(self):
        """
        Gets the next_page of this PagedResourceBaseSubscribedUser.

        :return: The next_page of this PagedResourceBaseSubscribedUser.
        :rtype: ResourceBase
        """
        return self._next_page

    @next_page.setter
    def next_page(self, next_page):
        """
        Sets the next_page of this PagedResourceBaseSubscribedUser.

        :param next_page: The next_page of this PagedResourceBaseSubscribedUser.
        :type: ResourceBase
        """

        self._next_page = next_page

    @property
    def previous_page(self):
        """
        Gets the previous_page of this PagedResourceBaseSubscribedUser.

        :return: The previous_page of this PagedResourceBaseSubscribedUser.
        :rtype: ResourceBase
        """
        return self._previous_page

    @previous_page.setter
    def previous_page(self, previous_page):
        """
        Sets the previous_page of this PagedResourceBaseSubscribedUser.

        :param previous_page: The previous_page of this PagedResourceBaseSubscribedUser.
        :type: ResourceBase
        """

        self._previous_page = previous_page

    @property
    def href(self):
        """
        Gets the href of this PagedResourceBaseSubscribedUser.

        :return: The href of this PagedResourceBaseSubscribedUser.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """
        Sets the href of this PagedResourceBaseSubscribedUser.

        :param href: The href of this PagedResourceBaseSubscribedUser.
        :type: str
        """

        self._href = href

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PagedResourceBaseSubscribedUser):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
