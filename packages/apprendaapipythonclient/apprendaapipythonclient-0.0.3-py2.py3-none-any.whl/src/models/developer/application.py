# coding: utf-8

"""
    Apprenda.DeveloperPortal.Web

    The Application Management REST API can be leveraged to customize the Developer experience of deploying and managing applications  on the Apprenda Platform. This allows some of the functionality of the Platform's [Developer Portal](/current/developer-portal)to be accomplished through a variety of means such as custom-built UX or command-line interfaces.     ##Authentication    Before making a request, you must be authenticated. Learn how to [get authenticated](/restapi/appmanagement/v1/authentication).    ##Making a Request    ###Prerequisites    * Installed Platform of version 4.5.0 or later     * Authentication token     * To use this API you must be part of a [Development Team or Tenant](/current/create-users) and have an [active subscription](/current/dev-portal-setup#create) to Developer Portal    ###Request URL    All requests must use **https**.    The URL for every request you make is the Cloud URI of your Platform followed by \"/developer\" and the path structure of the endpoint. For example, if your Cloud URI is apps.apprenda.harp and you want to get the Add-ons for your Platform, the request URI will be **apps.apprenda.harp/developer/api/v1/addons**.      For more information, see our documentation on [using API resources](/restapi/appmanagement/v1/resources) and [finding your Cloud URI](/current/clouduri).

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Application(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name=None, alias=None, description=None, current_version=None, transitioning_version=None, ui_allocated_cpu_mhz=None, db_allocated_cpu_mhz=None, svc_allocated_cpu_mhz=None, war_allocated_cpu_mhz=None, linux_service_allocated_cpu_mhz=None, ui_allocated_memory_mb=None, db_allocated_memory_mb=None, svc_allocated_memory_mb=None, war_allocated_memory_mb=None, linux_service_allocated_memory_mb=None, allocated_storage_mb=None, href=None):
        """
        Application - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'alias': 'str',
            'description': 'str',
            'current_version': 'Version',
            'transitioning_version': 'Version',
            'ui_allocated_cpu_mhz': 'int',
            'db_allocated_cpu_mhz': 'int',
            'svc_allocated_cpu_mhz': 'int',
            'war_allocated_cpu_mhz': 'int',
            'linux_service_allocated_cpu_mhz': 'int',
            'ui_allocated_memory_mb': 'int',
            'db_allocated_memory_mb': 'int',
            'svc_allocated_memory_mb': 'int',
            'war_allocated_memory_mb': 'int',
            'linux_service_allocated_memory_mb': 'int',
            'allocated_storage_mb': 'int',
            'href': 'str'
        }

        self.attribute_map = {
            'name': 'name',
            'alias': 'alias',
            'description': 'description',
            'current_version': 'currentVersion',
            'transitioning_version': 'transitioningVersion',
            'ui_allocated_cpu_mhz': 'uiAllocatedCpuMhz',
            'db_allocated_cpu_mhz': 'dbAllocatedCpuMhz',
            'svc_allocated_cpu_mhz': 'svcAllocatedCpuMhz',
            'war_allocated_cpu_mhz': 'warAllocatedCpuMhz',
            'linux_service_allocated_cpu_mhz': 'linuxServiceAllocatedCpuMhz',
            'ui_allocated_memory_mb': 'uiAllocatedMemoryMb',
            'db_allocated_memory_mb': 'dbAllocatedMemoryMb',
            'svc_allocated_memory_mb': 'svcAllocatedMemoryMb',
            'war_allocated_memory_mb': 'warAllocatedMemoryMb',
            'linux_service_allocated_memory_mb': 'linuxServiceAllocatedMemoryMb',
            'allocated_storage_mb': 'allocatedStorageMb',
            'href': 'href'
        }

        self._name = name
        self._alias = alias
        self._description = description
        self._current_version = current_version
        self._transitioning_version = transitioning_version
        self._ui_allocated_cpu_mhz = ui_allocated_cpu_mhz
        self._db_allocated_cpu_mhz = db_allocated_cpu_mhz
        self._svc_allocated_cpu_mhz = svc_allocated_cpu_mhz
        self._war_allocated_cpu_mhz = war_allocated_cpu_mhz
        self._linux_service_allocated_cpu_mhz = linux_service_allocated_cpu_mhz
        self._ui_allocated_memory_mb = ui_allocated_memory_mb
        self._db_allocated_memory_mb = db_allocated_memory_mb
        self._svc_allocated_memory_mb = svc_allocated_memory_mb
        self._war_allocated_memory_mb = war_allocated_memory_mb
        self._linux_service_allocated_memory_mb = linux_service_allocated_memory_mb
        self._allocated_storage_mb = allocated_storage_mb
        self._href = href

    @property
    def name(self):
        """
        Gets the name of this Application.

        :return: The name of this Application.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Application.

        :param name: The name of this Application.
        :type: str
        """

        self._name = name

    @property
    def alias(self):
        """
        Gets the alias of this Application.

        :return: The alias of this Application.
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """
        Sets the alias of this Application.

        :param alias: The alias of this Application.
        :type: str
        """

        self._alias = alias

    @property
    def description(self):
        """
        Gets the description of this Application.

        :return: The description of this Application.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Application.

        :param description: The description of this Application.
        :type: str
        """

        self._description = description

    @property
    def current_version(self):
        """
        Gets the current_version of this Application.

        :return: The current_version of this Application.
        :rtype: Version
        """
        return self._current_version

    @current_version.setter
    def current_version(self, current_version):
        """
        Sets the current_version of this Application.

        :param current_version: The current_version of this Application.
        :type: Version
        """

        self._current_version = current_version

    @property
    def transitioning_version(self):
        """
        Gets the transitioning_version of this Application.

        :return: The transitioning_version of this Application.
        :rtype: Version
        """
        return self._transitioning_version

    @transitioning_version.setter
    def transitioning_version(self, transitioning_version):
        """
        Sets the transitioning_version of this Application.

        :param transitioning_version: The transitioning_version of this Application.
        :type: Version
        """

        self._transitioning_version = transitioning_version

    @property
    def ui_allocated_cpu_mhz(self):
        """
        Gets the ui_allocated_cpu_mhz of this Application.

        :return: The ui_allocated_cpu_mhz of this Application.
        :rtype: int
        """
        return self._ui_allocated_cpu_mhz

    @ui_allocated_cpu_mhz.setter
    def ui_allocated_cpu_mhz(self, ui_allocated_cpu_mhz):
        """
        Sets the ui_allocated_cpu_mhz of this Application.

        :param ui_allocated_cpu_mhz: The ui_allocated_cpu_mhz of this Application.
        :type: int
        """

        self._ui_allocated_cpu_mhz = ui_allocated_cpu_mhz

    @property
    def db_allocated_cpu_mhz(self):
        """
        Gets the db_allocated_cpu_mhz of this Application.

        :return: The db_allocated_cpu_mhz of this Application.
        :rtype: int
        """
        return self._db_allocated_cpu_mhz

    @db_allocated_cpu_mhz.setter
    def db_allocated_cpu_mhz(self, db_allocated_cpu_mhz):
        """
        Sets the db_allocated_cpu_mhz of this Application.

        :param db_allocated_cpu_mhz: The db_allocated_cpu_mhz of this Application.
        :type: int
        """

        self._db_allocated_cpu_mhz = db_allocated_cpu_mhz

    @property
    def svc_allocated_cpu_mhz(self):
        """
        Gets the svc_allocated_cpu_mhz of this Application.

        :return: The svc_allocated_cpu_mhz of this Application.
        :rtype: int
        """
        return self._svc_allocated_cpu_mhz

    @svc_allocated_cpu_mhz.setter
    def svc_allocated_cpu_mhz(self, svc_allocated_cpu_mhz):
        """
        Sets the svc_allocated_cpu_mhz of this Application.

        :param svc_allocated_cpu_mhz: The svc_allocated_cpu_mhz of this Application.
        :type: int
        """

        self._svc_allocated_cpu_mhz = svc_allocated_cpu_mhz

    @property
    def war_allocated_cpu_mhz(self):
        """
        Gets the war_allocated_cpu_mhz of this Application.

        :return: The war_allocated_cpu_mhz of this Application.
        :rtype: int
        """
        return self._war_allocated_cpu_mhz

    @war_allocated_cpu_mhz.setter
    def war_allocated_cpu_mhz(self, war_allocated_cpu_mhz):
        """
        Sets the war_allocated_cpu_mhz of this Application.

        :param war_allocated_cpu_mhz: The war_allocated_cpu_mhz of this Application.
        :type: int
        """

        self._war_allocated_cpu_mhz = war_allocated_cpu_mhz

    @property
    def linux_service_allocated_cpu_mhz(self):
        """
        Gets the linux_service_allocated_cpu_mhz of this Application.

        :return: The linux_service_allocated_cpu_mhz of this Application.
        :rtype: int
        """
        return self._linux_service_allocated_cpu_mhz

    @linux_service_allocated_cpu_mhz.setter
    def linux_service_allocated_cpu_mhz(self, linux_service_allocated_cpu_mhz):
        """
        Sets the linux_service_allocated_cpu_mhz of this Application.

        :param linux_service_allocated_cpu_mhz: The linux_service_allocated_cpu_mhz of this Application.
        :type: int
        """

        self._linux_service_allocated_cpu_mhz = linux_service_allocated_cpu_mhz

    @property
    def ui_allocated_memory_mb(self):
        """
        Gets the ui_allocated_memory_mb of this Application.

        :return: The ui_allocated_memory_mb of this Application.
        :rtype: int
        """
        return self._ui_allocated_memory_mb

    @ui_allocated_memory_mb.setter
    def ui_allocated_memory_mb(self, ui_allocated_memory_mb):
        """
        Sets the ui_allocated_memory_mb of this Application.

        :param ui_allocated_memory_mb: The ui_allocated_memory_mb of this Application.
        :type: int
        """

        self._ui_allocated_memory_mb = ui_allocated_memory_mb

    @property
    def db_allocated_memory_mb(self):
        """
        Gets the db_allocated_memory_mb of this Application.

        :return: The db_allocated_memory_mb of this Application.
        :rtype: int
        """
        return self._db_allocated_memory_mb

    @db_allocated_memory_mb.setter
    def db_allocated_memory_mb(self, db_allocated_memory_mb):
        """
        Sets the db_allocated_memory_mb of this Application.

        :param db_allocated_memory_mb: The db_allocated_memory_mb of this Application.
        :type: int
        """

        self._db_allocated_memory_mb = db_allocated_memory_mb

    @property
    def svc_allocated_memory_mb(self):
        """
        Gets the svc_allocated_memory_mb of this Application.

        :return: The svc_allocated_memory_mb of this Application.
        :rtype: int
        """
        return self._svc_allocated_memory_mb

    @svc_allocated_memory_mb.setter
    def svc_allocated_memory_mb(self, svc_allocated_memory_mb):
        """
        Sets the svc_allocated_memory_mb of this Application.

        :param svc_allocated_memory_mb: The svc_allocated_memory_mb of this Application.
        :type: int
        """

        self._svc_allocated_memory_mb = svc_allocated_memory_mb

    @property
    def war_allocated_memory_mb(self):
        """
        Gets the war_allocated_memory_mb of this Application.

        :return: The war_allocated_memory_mb of this Application.
        :rtype: int
        """
        return self._war_allocated_memory_mb

    @war_allocated_memory_mb.setter
    def war_allocated_memory_mb(self, war_allocated_memory_mb):
        """
        Sets the war_allocated_memory_mb of this Application.

        :param war_allocated_memory_mb: The war_allocated_memory_mb of this Application.
        :type: int
        """

        self._war_allocated_memory_mb = war_allocated_memory_mb

    @property
    def linux_service_allocated_memory_mb(self):
        """
        Gets the linux_service_allocated_memory_mb of this Application.

        :return: The linux_service_allocated_memory_mb of this Application.
        :rtype: int
        """
        return self._linux_service_allocated_memory_mb

    @linux_service_allocated_memory_mb.setter
    def linux_service_allocated_memory_mb(self, linux_service_allocated_memory_mb):
        """
        Sets the linux_service_allocated_memory_mb of this Application.

        :param linux_service_allocated_memory_mb: The linux_service_allocated_memory_mb of this Application.
        :type: int
        """

        self._linux_service_allocated_memory_mb = linux_service_allocated_memory_mb

    @property
    def allocated_storage_mb(self):
        """
        Gets the allocated_storage_mb of this Application.

        :return: The allocated_storage_mb of this Application.
        :rtype: int
        """
        return self._allocated_storage_mb

    @allocated_storage_mb.setter
    def allocated_storage_mb(self, allocated_storage_mb):
        """
        Sets the allocated_storage_mb of this Application.

        :param allocated_storage_mb: The allocated_storage_mb of this Application.
        :type: int
        """

        self._allocated_storage_mb = allocated_storage_mb

    @property
    def href(self):
        """
        Gets the href of this Application.

        :return: The href of this Application.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """
        Sets the href of this Application.

        :param href: The href of this Application.
        :type: str
        """

        self._href = href

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Application):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
