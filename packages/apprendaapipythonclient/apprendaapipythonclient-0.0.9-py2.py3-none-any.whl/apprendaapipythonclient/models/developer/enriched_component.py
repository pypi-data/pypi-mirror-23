# coding: utf-8

"""
    Apprenda.DeveloperPortal.Web

    The Application Management REST API can be leveraged to customize the Developer experience of deploying and managing applications  on the Apprenda Platform. This allows some of the functionality of the Platform's [Developer Portal](/current/developer-portal)to be accomplished through a variety of means such as custom-built UX or command-line interfaces.     ##Authentication    Before making a request, you must be authenticated. Learn how to [get authenticated](/restapi/appmanagement/v1/authentication).    ##Making a Request    ###Prerequisites    * Installed Platform of version 4.5.0 or later     * Authentication token     * To use this API you must be part of a [Development Team or Tenant](/current/create-users) and have an [active subscription](/current/dev-portal-setup#create) to Developer Portal    ###Request URL    All requests must use **https**.    The URL for every request you make is the Cloud URI of your Platform followed by \"/developer\" and the path structure of the endpoint. For example, if your Cloud URI is apps.apprenda.harp and you want to get the Add-ons for your Platform, the request URI will be **apps.apprenda.harp/developer/api/v1/addons**.      For more information, see our documentation on [using API resources](/restapi/appmanagement/v1/resources) and [finding your Cloud URI](/current/clouduri).

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class EnrichedComponent(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, instances=None, storage_blocks=None, minimum_instance_count=None, maximum_instance_count=None, http_mapped=None, files=None, scaling_type=None, is_operator_override=None, monitoring_connection_details=None, scaling_schedule=None, domain=None, username=None, password=None, version=None, storage_quota=None, resource_policy=None, custom_properties=None, name=None, type=None, alias=None, href=None):
        """
        EnrichedComponent - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'instances': 'ComponentInstanceHolder',
            'storage_blocks': 'int',
            'minimum_instance_count': 'int',
            'maximum_instance_count': 'int',
            'http_mapped': 'bool',
            'files': 'ResourceBase',
            'scaling_type': 'str',
            'is_operator_override': 'bool',
            'monitoring_connection_details': 'list[MonitoringConnectionDetailsDTO]',
            'scaling_schedule': 'list[ScheduledScalingEvent]',
            'domain': 'str',
            'username': 'str',
            'password': 'str',
            'version': 'ResourceBase',
            'storage_quota': 'StorageQuotaReference',
            'resource_policy': 'ResourceAllocationPolicyReference',
            'custom_properties': 'ResourceBase',
            'name': 'str',
            'type': 'str',
            'alias': 'str',
            'href': 'str'
        }

        self.attribute_map = {
            'instances': 'instances',
            'storage_blocks': 'storageBlocks',
            'minimum_instance_count': 'minimumInstanceCount',
            'maximum_instance_count': 'maximumInstanceCount',
            'http_mapped': 'httpMapped',
            'files': 'files',
            'scaling_type': 'scalingType',
            'is_operator_override': 'isOperatorOverride',
            'monitoring_connection_details': 'monitoringConnectionDetails',
            'scaling_schedule': 'scalingSchedule',
            'domain': 'domain',
            'username': 'username',
            'password': 'password',
            'version': 'version',
            'storage_quota': 'storageQuota',
            'resource_policy': 'resourcePolicy',
            'custom_properties': 'customProperties',
            'name': 'name',
            'type': 'type',
            'alias': 'alias',
            'href': 'href'
        }

        self._instances = instances
        self._storage_blocks = storage_blocks
        self._minimum_instance_count = minimum_instance_count
        self._maximum_instance_count = maximum_instance_count
        self._http_mapped = http_mapped
        self._files = files
        self._scaling_type = scaling_type
        self._is_operator_override = is_operator_override
        self._monitoring_connection_details = monitoring_connection_details
        self._scaling_schedule = scaling_schedule
        self._domain = domain
        self._username = username
        self._password = password
        self._version = version
        self._storage_quota = storage_quota
        self._resource_policy = resource_policy
        self._custom_properties = custom_properties
        self._name = name
        self._type = type
        self._alias = alias
        self._href = href

    @property
    def instances(self):
        """
        Gets the instances of this EnrichedComponent.

        :return: The instances of this EnrichedComponent.
        :rtype: ComponentInstanceHolder
        """
        return self._instances

    @instances.setter
    def instances(self, instances):
        """
        Sets the instances of this EnrichedComponent.

        :param instances: The instances of this EnrichedComponent.
        :type: ComponentInstanceHolder
        """

        self._instances = instances

    @property
    def storage_blocks(self):
        """
        Gets the storage_blocks of this EnrichedComponent.

        :return: The storage_blocks of this EnrichedComponent.
        :rtype: int
        """
        return self._storage_blocks

    @storage_blocks.setter
    def storage_blocks(self, storage_blocks):
        """
        Sets the storage_blocks of this EnrichedComponent.

        :param storage_blocks: The storage_blocks of this EnrichedComponent.
        :type: int
        """

        self._storage_blocks = storage_blocks

    @property
    def minimum_instance_count(self):
        """
        Gets the minimum_instance_count of this EnrichedComponent.

        :return: The minimum_instance_count of this EnrichedComponent.
        :rtype: int
        """
        return self._minimum_instance_count

    @minimum_instance_count.setter
    def minimum_instance_count(self, minimum_instance_count):
        """
        Sets the minimum_instance_count of this EnrichedComponent.

        :param minimum_instance_count: The minimum_instance_count of this EnrichedComponent.
        :type: int
        """

        self._minimum_instance_count = minimum_instance_count

    @property
    def maximum_instance_count(self):
        """
        Gets the maximum_instance_count of this EnrichedComponent.

        :return: The maximum_instance_count of this EnrichedComponent.
        :rtype: int
        """
        return self._maximum_instance_count

    @maximum_instance_count.setter
    def maximum_instance_count(self, maximum_instance_count):
        """
        Sets the maximum_instance_count of this EnrichedComponent.

        :param maximum_instance_count: The maximum_instance_count of this EnrichedComponent.
        :type: int
        """

        self._maximum_instance_count = maximum_instance_count

    @property
    def http_mapped(self):
        """
        Gets the http_mapped of this EnrichedComponent.

        :return: The http_mapped of this EnrichedComponent.
        :rtype: bool
        """
        return self._http_mapped

    @http_mapped.setter
    def http_mapped(self, http_mapped):
        """
        Sets the http_mapped of this EnrichedComponent.

        :param http_mapped: The http_mapped of this EnrichedComponent.
        :type: bool
        """

        self._http_mapped = http_mapped

    @property
    def files(self):
        """
        Gets the files of this EnrichedComponent.

        :return: The files of this EnrichedComponent.
        :rtype: ResourceBase
        """
        return self._files

    @files.setter
    def files(self, files):
        """
        Sets the files of this EnrichedComponent.

        :param files: The files of this EnrichedComponent.
        :type: ResourceBase
        """

        self._files = files

    @property
    def scaling_type(self):
        """
        Gets the scaling_type of this EnrichedComponent.

        :return: The scaling_type of this EnrichedComponent.
        :rtype: str
        """
        return self._scaling_type

    @scaling_type.setter
    def scaling_type(self, scaling_type):
        """
        Sets the scaling_type of this EnrichedComponent.

        :param scaling_type: The scaling_type of this EnrichedComponent.
        :type: str
        """
        allowed_values = ["Manual", "Scheduled", "Automatic"]
        if scaling_type not in allowed_values:
            raise ValueError(
                "Invalid value for `scaling_type` ({0}), must be one of {1}"
                .format(scaling_type, allowed_values)
            )

        self._scaling_type = scaling_type

    @property
    def is_operator_override(self):
        """
        Gets the is_operator_override of this EnrichedComponent.

        :return: The is_operator_override of this EnrichedComponent.
        :rtype: bool
        """
        return self._is_operator_override

    @is_operator_override.setter
    def is_operator_override(self, is_operator_override):
        """
        Sets the is_operator_override of this EnrichedComponent.

        :param is_operator_override: The is_operator_override of this EnrichedComponent.
        :type: bool
        """

        self._is_operator_override = is_operator_override

    @property
    def monitoring_connection_details(self):
        """
        Gets the monitoring_connection_details of this EnrichedComponent.

        :return: The monitoring_connection_details of this EnrichedComponent.
        :rtype: list[MonitoringConnectionDetailsDTO]
        """
        return self._monitoring_connection_details

    @monitoring_connection_details.setter
    def monitoring_connection_details(self, monitoring_connection_details):
        """
        Sets the monitoring_connection_details of this EnrichedComponent.

        :param monitoring_connection_details: The monitoring_connection_details of this EnrichedComponent.
        :type: list[MonitoringConnectionDetailsDTO]
        """

        self._monitoring_connection_details = monitoring_connection_details

    @property
    def scaling_schedule(self):
        """
        Gets the scaling_schedule of this EnrichedComponent.

        :return: The scaling_schedule of this EnrichedComponent.
        :rtype: list[ScheduledScalingEvent]
        """
        return self._scaling_schedule

    @scaling_schedule.setter
    def scaling_schedule(self, scaling_schedule):
        """
        Sets the scaling_schedule of this EnrichedComponent.

        :param scaling_schedule: The scaling_schedule of this EnrichedComponent.
        :type: list[ScheduledScalingEvent]
        """

        self._scaling_schedule = scaling_schedule

    @property
    def domain(self):
        """
        Gets the domain of this EnrichedComponent.

        :return: The domain of this EnrichedComponent.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """
        Sets the domain of this EnrichedComponent.

        :param domain: The domain of this EnrichedComponent.
        :type: str
        """

        self._domain = domain

    @property
    def username(self):
        """
        Gets the username of this EnrichedComponent.

        :return: The username of this EnrichedComponent.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """
        Sets the username of this EnrichedComponent.

        :param username: The username of this EnrichedComponent.
        :type: str
        """

        self._username = username

    @property
    def password(self):
        """
        Gets the password of this EnrichedComponent.

        :return: The password of this EnrichedComponent.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """
        Sets the password of this EnrichedComponent.

        :param password: The password of this EnrichedComponent.
        :type: str
        """

        self._password = password

    @property
    def version(self):
        """
        Gets the version of this EnrichedComponent.

        :return: The version of this EnrichedComponent.
        :rtype: ResourceBase
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this EnrichedComponent.

        :param version: The version of this EnrichedComponent.
        :type: ResourceBase
        """

        self._version = version

    @property
    def storage_quota(self):
        """
        Gets the storage_quota of this EnrichedComponent.

        :return: The storage_quota of this EnrichedComponent.
        :rtype: StorageQuotaReference
        """
        return self._storage_quota

    @storage_quota.setter
    def storage_quota(self, storage_quota):
        """
        Sets the storage_quota of this EnrichedComponent.

        :param storage_quota: The storage_quota of this EnrichedComponent.
        :type: StorageQuotaReference
        """

        self._storage_quota = storage_quota

    @property
    def resource_policy(self):
        """
        Gets the resource_policy of this EnrichedComponent.

        :return: The resource_policy of this EnrichedComponent.
        :rtype: ResourceAllocationPolicyReference
        """
        return self._resource_policy

    @resource_policy.setter
    def resource_policy(self, resource_policy):
        """
        Sets the resource_policy of this EnrichedComponent.

        :param resource_policy: The resource_policy of this EnrichedComponent.
        :type: ResourceAllocationPolicyReference
        """

        self._resource_policy = resource_policy

    @property
    def custom_properties(self):
        """
        Gets the custom_properties of this EnrichedComponent.

        :return: The custom_properties of this EnrichedComponent.
        :rtype: ResourceBase
        """
        return self._custom_properties

    @custom_properties.setter
    def custom_properties(self, custom_properties):
        """
        Sets the custom_properties of this EnrichedComponent.

        :param custom_properties: The custom_properties of this EnrichedComponent.
        :type: ResourceBase
        """

        self._custom_properties = custom_properties

    @property
    def name(self):
        """
        Gets the name of this EnrichedComponent.

        :return: The name of this EnrichedComponent.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this EnrichedComponent.

        :param name: The name of this EnrichedComponent.
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """
        Gets the type of this EnrichedComponent.

        :return: The type of this EnrichedComponent.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this EnrichedComponent.

        :param type: The type of this EnrichedComponent.
        :type: str
        """

        self._type = type

    @property
    def alias(self):
        """
        Gets the alias of this EnrichedComponent.

        :return: The alias of this EnrichedComponent.
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """
        Sets the alias of this EnrichedComponent.

        :param alias: The alias of this EnrichedComponent.
        :type: str
        """

        self._alias = alias

    @property
    def href(self):
        """
        Gets the href of this EnrichedComponent.

        :return: The href of this EnrichedComponent.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """
        Sets the href of this EnrichedComponent.

        :param href: The href of this EnrichedComponent.
        :type: str
        """

        self._href = href

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, EnrichedComponent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
