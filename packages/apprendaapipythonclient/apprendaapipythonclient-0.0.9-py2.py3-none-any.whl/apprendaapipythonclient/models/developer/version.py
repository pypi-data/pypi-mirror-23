# coding: utf-8

"""
    Apprenda.DeveloperPortal.Web

    The Application Management REST API can be leveraged to customize the Developer experience of deploying and managing applications  on the Apprenda Platform. This allows some of the functionality of the Platform's [Developer Portal](/current/developer-portal)to be accomplished through a variety of means such as custom-built UX or command-line interfaces.     ##Authentication    Before making a request, you must be authenticated. Learn how to [get authenticated](/restapi/appmanagement/v1/authentication).    ##Making a Request    ###Prerequisites    * Installed Platform of version 4.5.0 or later     * Authentication token     * To use this API you must be part of a [Development Team or Tenant](/current/create-users) and have an [active subscription](/current/dev-portal-setup#create) to Developer Portal    ###Request URL    All requests must use **https**.    The URL for every request you make is the Cloud URI of your Platform followed by \"/developer\" and the path structure of the endpoint. For example, if your Cloud URI is apps.apprenda.harp and you want to get the Add-ons for your Platform, the request URI will be **apps.apprenda.harp/developer/api/v1/addons**.      For more information, see our documentation on [using API resources](/restapi/appmanagement/v1/resources) and [finding your Cloud URI](/current/clouduri).

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Version(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name=None, alias=None, description=None, stage=None, state=None, application=None, enable_sticky_sessions=None, enable_session_replication=None, enable_ssl_enforcement=None, load_balancer_url_configuration=None, in_maintenance=None, href=None):
        """
        Version - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'alias': 'str',
            'description': 'str',
            'stage': 'str',
            'state': 'str',
            'application': 'ResourceBase',
            'enable_sticky_sessions': 'bool',
            'enable_session_replication': 'bool',
            'enable_ssl_enforcement': 'bool',
            'load_balancer_url_configuration': 'str',
            'in_maintenance': 'bool',
            'href': 'str'
        }

        self.attribute_map = {
            'name': 'name',
            'alias': 'alias',
            'description': 'description',
            'stage': 'stage',
            'state': 'state',
            'application': 'application',
            'enable_sticky_sessions': 'enableStickySessions',
            'enable_session_replication': 'enableSessionReplication',
            'enable_ssl_enforcement': 'enableSslEnforcement',
            'load_balancer_url_configuration': 'loadBalancerUrlConfiguration',
            'in_maintenance': 'inMaintenance',
            'href': 'href'
        }

        self._name = name
        self._alias = alias
        self._description = description
        self._stage = stage
        self._state = state
        self._application = application
        self._enable_sticky_sessions = enable_sticky_sessions
        self._enable_session_replication = enable_session_replication
        self._enable_ssl_enforcement = enable_ssl_enforcement
        self._load_balancer_url_configuration = load_balancer_url_configuration
        self._in_maintenance = in_maintenance
        self._href = href

    @property
    def name(self):
        """
        Gets the name of this Version.

        :return: The name of this Version.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Version.

        :param name: The name of this Version.
        :type: str
        """

        self._name = name

    @property
    def alias(self):
        """
        Gets the alias of this Version.

        :return: The alias of this Version.
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """
        Sets the alias of this Version.

        :param alias: The alias of this Version.
        :type: str
        """

        self._alias = alias

    @property
    def description(self):
        """
        Gets the description of this Version.

        :return: The description of this Version.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Version.

        :param description: The description of this Version.
        :type: str
        """

        self._description = description

    @property
    def stage(self):
        """
        Gets the stage of this Version.

        :return: The stage of this Version.
        :rtype: str
        """
        return self._stage

    @stage.setter
    def stage(self, stage):
        """
        Sets the stage of this Version.

        :param stage: The stage of this Version.
        :type: str
        """

        self._stage = stage

    @property
    def state(self):
        """
        Gets the state of this Version.

        :return: The state of this Version.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this Version.

        :param state: The state of this Version.
        :type: str
        """

        self._state = state

    @property
    def application(self):
        """
        Gets the application of this Version.

        :return: The application of this Version.
        :rtype: ResourceBase
        """
        return self._application

    @application.setter
    def application(self, application):
        """
        Sets the application of this Version.

        :param application: The application of this Version.
        :type: ResourceBase
        """

        self._application = application

    @property
    def enable_sticky_sessions(self):
        """
        Gets the enable_sticky_sessions of this Version.

        :return: The enable_sticky_sessions of this Version.
        :rtype: bool
        """
        return self._enable_sticky_sessions

    @enable_sticky_sessions.setter
    def enable_sticky_sessions(self, enable_sticky_sessions):
        """
        Sets the enable_sticky_sessions of this Version.

        :param enable_sticky_sessions: The enable_sticky_sessions of this Version.
        :type: bool
        """

        self._enable_sticky_sessions = enable_sticky_sessions

    @property
    def enable_session_replication(self):
        """
        Gets the enable_session_replication of this Version.

        :return: The enable_session_replication of this Version.
        :rtype: bool
        """
        return self._enable_session_replication

    @enable_session_replication.setter
    def enable_session_replication(self, enable_session_replication):
        """
        Sets the enable_session_replication of this Version.

        :param enable_session_replication: The enable_session_replication of this Version.
        :type: bool
        """

        self._enable_session_replication = enable_session_replication

    @property
    def enable_ssl_enforcement(self):
        """
        Gets the enable_ssl_enforcement of this Version.

        :return: The enable_ssl_enforcement of this Version.
        :rtype: bool
        """
        return self._enable_ssl_enforcement

    @enable_ssl_enforcement.setter
    def enable_ssl_enforcement(self, enable_ssl_enforcement):
        """
        Sets the enable_ssl_enforcement of this Version.

        :param enable_ssl_enforcement: The enable_ssl_enforcement of this Version.
        :type: bool
        """

        self._enable_ssl_enforcement = enable_ssl_enforcement

    @property
    def load_balancer_url_configuration(self):
        """
        Gets the load_balancer_url_configuration of this Version.

        :return: The load_balancer_url_configuration of this Version.
        :rtype: str
        """
        return self._load_balancer_url_configuration

    @load_balancer_url_configuration.setter
    def load_balancer_url_configuration(self, load_balancer_url_configuration):
        """
        Sets the load_balancer_url_configuration of this Version.

        :param load_balancer_url_configuration: The load_balancer_url_configuration of this Version.
        :type: str
        """
        allowed_values = ["Preserve", "Redirect"]
        if load_balancer_url_configuration not in allowed_values:
            raise ValueError(
                "Invalid value for `load_balancer_url_configuration` ({0}), must be one of {1}"
                .format(load_balancer_url_configuration, allowed_values)
            )

        self._load_balancer_url_configuration = load_balancer_url_configuration

    @property
    def in_maintenance(self):
        """
        Gets the in_maintenance of this Version.

        :return: The in_maintenance of this Version.
        :rtype: bool
        """
        return self._in_maintenance

    @in_maintenance.setter
    def in_maintenance(self, in_maintenance):
        """
        Sets the in_maintenance of this Version.

        :param in_maintenance: The in_maintenance of this Version.
        :type: bool
        """

        self._in_maintenance = in_maintenance

    @property
    def href(self):
        """
        Gets the href of this Version.

        :return: The href of this Version.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """
        Sets the href of this Version.

        :param href: The href of this Version.
        :type: str
        """

        self._href = href

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Version):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
