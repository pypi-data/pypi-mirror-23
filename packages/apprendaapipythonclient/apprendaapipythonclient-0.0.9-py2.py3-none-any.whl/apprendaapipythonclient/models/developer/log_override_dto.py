# coding: utf-8

"""
    Apprenda.DeveloperPortal.Web

    The Application Management REST API can be leveraged to customize the Developer experience of deploying and managing applications  on the Apprenda Platform. This allows some of the functionality of the Platform's [Developer Portal](/current/developer-portal)to be accomplished through a variety of means such as custom-built UX or command-line interfaces.     ##Authentication    Before making a request, you must be authenticated. Learn how to [get authenticated](/restapi/appmanagement/v1/authentication).    ##Making a Request    ###Prerequisites    * Installed Platform of version 4.5.0 or later     * Authentication token     * To use this API you must be part of a [Development Team or Tenant](/current/create-users) and have an [active subscription](/current/dev-portal-setup#create) to Developer Portal    ###Request URL    All requests must use **https**.    The URL for every request you make is the Cloud URI of your Platform followed by \"/developer\" and the path structure of the endpoint. For example, if your Cloud URI is apps.apprenda.harp and you want to get the Add-ons for your Platform, the request URI will be **apps.apprenda.harp/developer/api/v1/addons**.      For more information, see our documentation on [using API resources](/restapi/appmanagement/v1/resources) and [finding your Cloud URI](/current/clouduri).

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class LogOverrideDTO(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, log_level=None, version_id=None, aggregate_repeated_logs=None, repeated_log_notification_frequency=None, override_email_recipients=None):
        """
        LogOverrideDTO - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'log_level': 'int',
            'version_id': 'str',
            'aggregate_repeated_logs': 'bool',
            'repeated_log_notification_frequency': 'int',
            'override_email_recipients': 'list[LogOverrideEmailRecipientDTO]'
        }

        self.attribute_map = {
            'id': 'id',
            'log_level': 'logLevel',
            'version_id': 'versionId',
            'aggregate_repeated_logs': 'aggregateRepeatedLogs',
            'repeated_log_notification_frequency': 'repeatedLogNotificationFrequency',
            'override_email_recipients': 'overrideEmailRecipients'
        }

        self._id = id
        self._log_level = log_level
        self._version_id = version_id
        self._aggregate_repeated_logs = aggregate_repeated_logs
        self._repeated_log_notification_frequency = repeated_log_notification_frequency
        self._override_email_recipients = override_email_recipients

    @property
    def id(self):
        """
        Gets the id of this LogOverrideDTO.

        :return: The id of this LogOverrideDTO.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this LogOverrideDTO.

        :param id: The id of this LogOverrideDTO.
        :type: str
        """

        self._id = id

    @property
    def log_level(self):
        """
        Gets the log_level of this LogOverrideDTO.

        :return: The log_level of this LogOverrideDTO.
        :rtype: int
        """
        return self._log_level

    @log_level.setter
    def log_level(self, log_level):
        """
        Sets the log_level of this LogOverrideDTO.

        :param log_level: The log_level of this LogOverrideDTO.
        :type: int
        """

        self._log_level = log_level

    @property
    def version_id(self):
        """
        Gets the version_id of this LogOverrideDTO.

        :return: The version_id of this LogOverrideDTO.
        :rtype: str
        """
        return self._version_id

    @version_id.setter
    def version_id(self, version_id):
        """
        Sets the version_id of this LogOverrideDTO.

        :param version_id: The version_id of this LogOverrideDTO.
        :type: str
        """

        self._version_id = version_id

    @property
    def aggregate_repeated_logs(self):
        """
        Gets the aggregate_repeated_logs of this LogOverrideDTO.

        :return: The aggregate_repeated_logs of this LogOverrideDTO.
        :rtype: bool
        """
        return self._aggregate_repeated_logs

    @aggregate_repeated_logs.setter
    def aggregate_repeated_logs(self, aggregate_repeated_logs):
        """
        Sets the aggregate_repeated_logs of this LogOverrideDTO.

        :param aggregate_repeated_logs: The aggregate_repeated_logs of this LogOverrideDTO.
        :type: bool
        """

        self._aggregate_repeated_logs = aggregate_repeated_logs

    @property
    def repeated_log_notification_frequency(self):
        """
        Gets the repeated_log_notification_frequency of this LogOverrideDTO.

        :return: The repeated_log_notification_frequency of this LogOverrideDTO.
        :rtype: int
        """
        return self._repeated_log_notification_frequency

    @repeated_log_notification_frequency.setter
    def repeated_log_notification_frequency(self, repeated_log_notification_frequency):
        """
        Sets the repeated_log_notification_frequency of this LogOverrideDTO.

        :param repeated_log_notification_frequency: The repeated_log_notification_frequency of this LogOverrideDTO.
        :type: int
        """

        self._repeated_log_notification_frequency = repeated_log_notification_frequency

    @property
    def override_email_recipients(self):
        """
        Gets the override_email_recipients of this LogOverrideDTO.

        :return: The override_email_recipients of this LogOverrideDTO.
        :rtype: list[LogOverrideEmailRecipientDTO]
        """
        return self._override_email_recipients

    @override_email_recipients.setter
    def override_email_recipients(self, override_email_recipients):
        """
        Sets the override_email_recipients of this LogOverrideDTO.

        :param override_email_recipients: The override_email_recipients of this LogOverrideDTO.
        :type: list[LogOverrideEmailRecipientDTO]
        """

        self._override_email_recipients = override_email_recipients

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, LogOverrideDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
