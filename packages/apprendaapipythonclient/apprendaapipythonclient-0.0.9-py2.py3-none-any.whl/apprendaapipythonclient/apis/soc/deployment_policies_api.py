# coding: utf-8

"""
    Platform Operations Rest API

    The Platform Operations REST API can be leveraged to customize the Platform Operator experience of managing infrastructure and applications for the Apprenda Platform. This allows some of the functionality of the Platform's System Operations Center (SOC) to be accomplished through a variety of means such as custom-built UX or command-line interfaces.   For more information about the abilities of Platform Operators, see our documentation on the [SOC](/current/SOC).   ##Authentication   Before making a request, you must be authenticated. Learn how to [get authenticated](/restapi/platformops/v1/authentication).   ##Making a Request   ###Prerequisites   * Installed Platform of version 6.5.1 or later (Note that most endpoints are only available in version 6.7.0 and later)    * Authentication token   * If SOC authorization is enabled on your Platform, you must be assigned as an active Platform Operator   ###Request URL   All requests must use **https**.   The URL for every request you make is the Cloud URI of your Platform followed by \"/soc\" and the path structure of the endpoint. For example, if your Cloud URI is apps.apprenda.harp and you want to get the Add-ons for your Platform, the request URI will be **apps.apprenda.harp/soc/api/v1/addons**.   For more information, see our documentation on [using API resources](/restapi/platformops/v1/using-resources) and [finding your Cloud URI](/current/clouduri).   ###Request Headers   Your authenication token must be passed in the header of all requests using the key **ApprendaSessionToken** (not case sensitive).  

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

# python 2 and python 3 compatibility library
from six import iteritems

from apprendaapipythonclient.configuration import Configuration
from apprendaapipythonclient.api_client import ApiClient


class DeploymentPoliciesApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def api_v1_deploymentpolicies_get(self, **kwargs):
        """
        Get all Deployment Policies
        **Required Platform version 6.7.0 or later.**   Returns all Deployment Policies on the Platform. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_deploymentpolicies_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: UnpagedResourceBaseDeploymentPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.api_v1_deploymentpolicies_get_with_http_info(**kwargs)
        else:
            (data) = self.api_v1_deploymentpolicies_get_with_http_info(**kwargs)
            return data

    def api_v1_deploymentpolicies_get_with_http_info(self, **kwargs):
        """
        Get all Deployment Policies
        **Required Platform version 6.7.0 or later.**   Returns all Deployment Policies on the Platform. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_deploymentpolicies_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: UnpagedResourceBaseDeploymentPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_deploymentpolicies_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        resource_path = '/api/v1/deploymentpolicies'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='UnpagedResourceBaseDeploymentPolicy',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def api_v1_deploymentpolicies_id_delete(self, id, **kwargs):
        """
        Delete Deployment Policy
        **Required Platform version 6.7.0 or later.**   Deletes a Deployment Policy. Learn more about [Application Deployment Policies](/current/app-deployment-policies). 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_deploymentpolicies_id_delete(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: Required. Platform assigned id of Deployment Policy (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.api_v1_deploymentpolicies_id_delete_with_http_info(id, **kwargs)
        else:
            (data) = self.api_v1_deploymentpolicies_id_delete_with_http_info(id, **kwargs)
            return data

    def api_v1_deploymentpolicies_id_delete_with_http_info(self, id, **kwargs):
        """
        Delete Deployment Policy
        **Required Platform version 6.7.0 or later.**   Deletes a Deployment Policy. Learn more about [Application Deployment Policies](/current/app-deployment-policies). 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_deploymentpolicies_id_delete_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: Required. Platform assigned id of Deployment Policy (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_deploymentpolicies_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_v1_deploymentpolicies_id_delete`")


        collection_formats = {}

        resource_path = '/api/v1/deploymentpolicies/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def api_v1_deploymentpolicies_id_get(self, id, **kwargs):
        """
        Get Deployment Policy
        **Required Platform version 6.7.0 or later.**   Returns a Deployment Policy. Learn more about [Application Deployment Policies](/current/app-deployment-policies). 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_deploymentpolicies_id_get(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: Platform assigned id of Deployment Policy (required)
        :return: DeploymentPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.api_v1_deploymentpolicies_id_get_with_http_info(id, **kwargs)
        else:
            (data) = self.api_v1_deploymentpolicies_id_get_with_http_info(id, **kwargs)
            return data

    def api_v1_deploymentpolicies_id_get_with_http_info(self, id, **kwargs):
        """
        Get Deployment Policy
        **Required Platform version 6.7.0 or later.**   Returns a Deployment Policy. Learn more about [Application Deployment Policies](/current/app-deployment-policies). 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_deploymentpolicies_id_get_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: Platform assigned id of Deployment Policy (required)
        :return: DeploymentPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_deploymentpolicies_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_v1_deploymentpolicies_id_get`")


        collection_formats = {}

        resource_path = '/api/v1/deploymentpolicies/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='DeploymentPolicy',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def api_v1_deploymentpolicies_id_put(self, id, deployment_policy, **kwargs):
        """
        Update deployment Policy
        **Required Platform version 6.7.0 or later.**   Updates a Deployment Policy. Updates made to Deployment Policies will affect all furture deployments that match the policy. Currently deployed workloads will not be affected.    Additionally, making a request to this endpoint will update all fields for an Application Deployment Policy. You should always pass all input values in the body of the request, because any value that is not provided will be updated to the default value.    Learn more about [Application Deployment Policies](/current/app-deployment-policies). 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_deploymentpolicies_id_put(id, deployment_policy, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: Required. Platform assigned id of Deployment Policy (required)
        :param DeploymentPolicy deployment_policy: Required. Deployment Policy to update (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.api_v1_deploymentpolicies_id_put_with_http_info(id, deployment_policy, **kwargs)
        else:
            (data) = self.api_v1_deploymentpolicies_id_put_with_http_info(id, deployment_policy, **kwargs)
            return data

    def api_v1_deploymentpolicies_id_put_with_http_info(self, id, deployment_policy, **kwargs):
        """
        Update deployment Policy
        **Required Platform version 6.7.0 or later.**   Updates a Deployment Policy. Updates made to Deployment Policies will affect all furture deployments that match the policy. Currently deployed workloads will not be affected.    Additionally, making a request to this endpoint will update all fields for an Application Deployment Policy. You should always pass all input values in the body of the request, because any value that is not provided will be updated to the default value.    Learn more about [Application Deployment Policies](/current/app-deployment-policies). 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_deploymentpolicies_id_put_with_http_info(id, deployment_policy, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: Required. Platform assigned id of Deployment Policy (required)
        :param DeploymentPolicy deployment_policy: Required. Deployment Policy to update (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'deployment_policy']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_deploymentpolicies_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_v1_deploymentpolicies_id_put`")
        # verify the required parameter 'deployment_policy' is set
        if ('deployment_policy' not in params) or (params['deployment_policy'] is None):
            raise ValueError("Missing the required parameter `deployment_policy` when calling `api_v1_deploymentpolicies_id_put`")


        collection_formats = {}

        resource_path = '/api/v1/deploymentpolicies/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'deployment_policy' in params:
            body_params = params['deployment_policy']
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def api_v1_deploymentpolicies_post(self, deployment_policy, **kwargs):
        """
        Create Deployment Policy
        **Required Platform version 6.7.0 or later.**   Creates a new Deployment Policy on the Platform.    Learn more about [Application Deployment Policies](/current/app-deployment-policies). 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_deploymentpolicies_post(deployment_policy, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param DeploymentPolicy deployment_policy: Required. Deployment Policy to add (required)
        :return: DeploymentPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.api_v1_deploymentpolicies_post_with_http_info(deployment_policy, **kwargs)
        else:
            (data) = self.api_v1_deploymentpolicies_post_with_http_info(deployment_policy, **kwargs)
            return data

    def api_v1_deploymentpolicies_post_with_http_info(self, deployment_policy, **kwargs):
        """
        Create Deployment Policy
        **Required Platform version 6.7.0 or later.**   Creates a new Deployment Policy on the Platform.    Learn more about [Application Deployment Policies](/current/app-deployment-policies). 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_deploymentpolicies_post_with_http_info(deployment_policy, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param DeploymentPolicy deployment_policy: Required. Deployment Policy to add (required)
        :return: DeploymentPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['deployment_policy']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_deploymentpolicies_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'deployment_policy' is set
        if ('deployment_policy' not in params) or (params['deployment_policy'] is None):
            raise ValueError("Missing the required parameter `deployment_policy` when calling `api_v1_deploymentpolicies_post`")


        collection_formats = {}

        resource_path = '/api/v1/deploymentpolicies'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'deployment_policy' in params:
            body_params = params['deployment_policy']
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='DeploymentPolicy',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
