# coding: utf-8

"""
    Account Management REST API

    The Account Management REST API can be used to manage user accounts, roles, and securables for applications on the Platform. The endpoints of this API allow you to perform the same the functionality of the Platform's Account Portal for your Tenant's applications.   For more information, see our documentation on the [Account Portal](/current/account).     ## Authentication    Before making a request, you must be authenticated. Follow these instuctions [to get authenticated](/restapi/accountmanagement/v1/authentication). ## Making a Request   ### Prerequisites    * Installed Platform of version 6.6.0 or later    * An active user account assigned to an active Tenant Account or Developer Team    * Authentication token   ### Request URL    All requests must use **https**.       The URL for every request you make is the URL of your Platform followed by \"/account\" and the path structure of the endpoint. For example, if your Platform URL is https://apps.apprenda.harp and you want to get a list of all user accounts for your Tenant, the request URL will be https://apps.apprenda.harp/account/api/v1/users.     For more information, see our documentation on [using api resources](/restapi/accountmanagement/v1/using-resources) and [finding your Cloud URI](/current/clouduri).    ### Request Headers  Your authenication token must be passed in the header of all requests using the key **ApprendaSessionToken** (not case sensitive).    

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class PagedResourceBaseUser(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, current_page=None, href=None, items=None, next_page=None, page_size=None, previous_page=None, total_items=None, total_pages=None):
        """
        PagedResourceBaseUser - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'current_page': 'int',
            'href': 'str',
            'items': 'list[User]',
            'next_page': 'ResourceBase',
            'page_size': 'int',
            'previous_page': 'ResourceBase',
            'total_items': 'int',
            'total_pages': 'int'
        }

        self.attribute_map = {
            'current_page': 'currentPage',
            'href': 'href',
            'items': 'items',
            'next_page': 'nextPage',
            'page_size': 'pageSize',
            'previous_page': 'previousPage',
            'total_items': 'totalItems',
            'total_pages': 'totalPages'
        }

        self._current_page = current_page
        self._href = href
        self._items = items
        self._next_page = next_page
        self._page_size = page_size
        self._previous_page = previous_page
        self._total_items = total_items
        self._total_pages = total_pages

    @property
    def current_page(self):
        """
        Gets the current_page of this PagedResourceBaseUser.

        :return: The current_page of this PagedResourceBaseUser.
        :rtype: int
        """
        return self._current_page

    @current_page.setter
    def current_page(self, current_page):
        """
        Sets the current_page of this PagedResourceBaseUser.

        :param current_page: The current_page of this PagedResourceBaseUser.
        :type: int
        """

        self._current_page = current_page

    @property
    def href(self):
        """
        Gets the href of this PagedResourceBaseUser.

        :return: The href of this PagedResourceBaseUser.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """
        Sets the href of this PagedResourceBaseUser.

        :param href: The href of this PagedResourceBaseUser.
        :type: str
        """

        self._href = href

    @property
    def items(self):
        """
        Gets the items of this PagedResourceBaseUser.

        :return: The items of this PagedResourceBaseUser.
        :rtype: list[User]
        """
        return self._items

    @items.setter
    def items(self, items):
        """
        Sets the items of this PagedResourceBaseUser.

        :param items: The items of this PagedResourceBaseUser.
        :type: list[User]
        """
        if items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")

        self._items = items

    @property
    def next_page(self):
        """
        Gets the next_page of this PagedResourceBaseUser.

        :return: The next_page of this PagedResourceBaseUser.
        :rtype: ResourceBase
        """
        return self._next_page

    @next_page.setter
    def next_page(self, next_page):
        """
        Sets the next_page of this PagedResourceBaseUser.

        :param next_page: The next_page of this PagedResourceBaseUser.
        :type: ResourceBase
        """

        self._next_page = next_page

    @property
    def page_size(self):
        """
        Gets the page_size of this PagedResourceBaseUser.

        :return: The page_size of this PagedResourceBaseUser.
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """
        Sets the page_size of this PagedResourceBaseUser.

        :param page_size: The page_size of this PagedResourceBaseUser.
        :type: int
        """

        self._page_size = page_size

    @property
    def previous_page(self):
        """
        Gets the previous_page of this PagedResourceBaseUser.

        :return: The previous_page of this PagedResourceBaseUser.
        :rtype: ResourceBase
        """
        return self._previous_page

    @previous_page.setter
    def previous_page(self, previous_page):
        """
        Sets the previous_page of this PagedResourceBaseUser.

        :param previous_page: The previous_page of this PagedResourceBaseUser.
        :type: ResourceBase
        """

        self._previous_page = previous_page

    @property
    def total_items(self):
        """
        Gets the total_items of this PagedResourceBaseUser.

        :return: The total_items of this PagedResourceBaseUser.
        :rtype: int
        """
        return self._total_items

    @total_items.setter
    def total_items(self, total_items):
        """
        Sets the total_items of this PagedResourceBaseUser.

        :param total_items: The total_items of this PagedResourceBaseUser.
        :type: int
        """

        self._total_items = total_items

    @property
    def total_pages(self):
        """
        Gets the total_pages of this PagedResourceBaseUser.

        :return: The total_pages of this PagedResourceBaseUser.
        :rtype: int
        """
        return self._total_pages

    @total_pages.setter
    def total_pages(self, total_pages):
        """
        Sets the total_pages of this PagedResourceBaseUser.

        :param total_pages: The total_pages of this PagedResourceBaseUser.
        :type: int
        """

        self._total_pages = total_pages

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PagedResourceBaseUser):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
