# coding: utf-8

"""
    Apprenda.DeveloperPortal.Web

    The Application Management REST API can be leveraged to customize the Developer experience of deploying and managing applications  on the Apprenda Platform. This allows some of the functionality of the Platform's [Developer Portal](/current/developer-portal)to be accomplished through a variety of means such as custom-built UX or command-line interfaces.     ##Authentication    Before making a request, you must be authenticated. Learn how to [get authenticated](/restapi/appmanagement/v1/authentication).    ##Making a Request    ###Prerequisites    * Installed Platform of version 4.5.0 or later     * Authentication token     * To use this API you must be part of a [Development Team or Tenant](/current/create-users) and have an [active subscription](/current/dev-portal-setup#create) to Developer Portal    ###Request URL    All requests must use **https**.    The URL for every request you make is the Cloud URI of your Platform followed by \"/developer\" and the path structure of the endpoint. For example, if your Cloud URI is apps.apprenda.harp and you want to get the Add-ons for your Platform, the request URI will be **apps.apprenda.harp/developer/api/v1/addons**.      For more information, see our documentation on [using API resources](/restapi/appmanagement/v1/resources) and [finding your Cloud URI](/current/clouduri).

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class JavaContainerDTO(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, name=None, container_type=None, path=None, is_enabled=None, is_default=None, is_system=None):
        """
        JavaContainerDTO - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'name': 'str',
            'container_type': 'str',
            'path': 'str',
            'is_enabled': 'bool',
            'is_default': 'bool',
            'is_system': 'bool'
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'container_type': 'containerType',
            'path': 'path',
            'is_enabled': 'isEnabled',
            'is_default': 'isDefault',
            'is_system': 'isSystem'
        }

        self._id = id
        self._name = name
        self._container_type = container_type
        self._path = path
        self._is_enabled = is_enabled
        self._is_default = is_default
        self._is_system = is_system

    @property
    def id(self):
        """
        Gets the id of this JavaContainerDTO.

        :return: The id of this JavaContainerDTO.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this JavaContainerDTO.

        :param id: The id of this JavaContainerDTO.
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this JavaContainerDTO.

        :return: The name of this JavaContainerDTO.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this JavaContainerDTO.

        :param name: The name of this JavaContainerDTO.
        :type: str
        """

        self._name = name

    @property
    def container_type(self):
        """
        Gets the container_type of this JavaContainerDTO.

        :return: The container_type of this JavaContainerDTO.
        :rtype: str
        """
        return self._container_type

    @container_type.setter
    def container_type(self, container_type):
        """
        Sets the container_type of this JavaContainerDTO.

        :param container_type: The container_type of this JavaContainerDTO.
        :type: str
        """
        allowed_values = ["Tomcat6", "Tomcat7", "JBossEAP6"]
        if container_type not in allowed_values:
            raise ValueError(
                "Invalid value for `container_type` ({0}), must be one of {1}"
                .format(container_type, allowed_values)
            )

        self._container_type = container_type

    @property
    def path(self):
        """
        Gets the path of this JavaContainerDTO.

        :return: The path of this JavaContainerDTO.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """
        Sets the path of this JavaContainerDTO.

        :param path: The path of this JavaContainerDTO.
        :type: str
        """

        self._path = path

    @property
    def is_enabled(self):
        """
        Gets the is_enabled of this JavaContainerDTO.

        :return: The is_enabled of this JavaContainerDTO.
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """
        Sets the is_enabled of this JavaContainerDTO.

        :param is_enabled: The is_enabled of this JavaContainerDTO.
        :type: bool
        """

        self._is_enabled = is_enabled

    @property
    def is_default(self):
        """
        Gets the is_default of this JavaContainerDTO.

        :return: The is_default of this JavaContainerDTO.
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """
        Sets the is_default of this JavaContainerDTO.

        :param is_default: The is_default of this JavaContainerDTO.
        :type: bool
        """

        self._is_default = is_default

    @property
    def is_system(self):
        """
        Gets the is_system of this JavaContainerDTO.

        :return: The is_system of this JavaContainerDTO.
        :rtype: bool
        """
        return self._is_system

    @is_system.setter
    def is_system(self, is_system):
        """
        Sets the is_system of this JavaContainerDTO.

        :param is_system: The is_system of this JavaContainerDTO.
        :type: bool
        """

        self._is_system = is_system

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, JavaContainerDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
