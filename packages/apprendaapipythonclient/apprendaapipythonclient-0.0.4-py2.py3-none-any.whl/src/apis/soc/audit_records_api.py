# coding: utf-8

"""
    Platform Operations Rest API

    The Platform Operations REST API can be leveraged to customize the Platform Operator experience of managing infrastructure and applications for the Apprenda Platform. This allows some of the functionality of the Platform's System Operations Center (SOC) to be accomplished through a variety of means such as custom-built UX or command-line interfaces.   For more information about the abilities of Platform Operators, see our documentation on the [SOC](/current/SOC).   ##Authentication   Before making a request, you must be authenticated. Learn how to [get authenticated](/restapi/platformops/v1/authentication).   ##Making a Request   ###Prerequisites   * Installed Platform of version 6.5.1 or later (Note that most endpoints are only available in version 6.7.0 and later)    * Authentication token   * If SOC authorization is enabled on your Platform, you must be assigned as an active Platform Operator   ###Request URL   All requests must use **https**.   The URL for every request you make is the Cloud URI of your Platform followed by \"/soc\" and the path structure of the endpoint. For example, if your Cloud URI is apps.apprenda.harp and you want to get the Add-ons for your Platform, the request URI will be **apps.apprenda.harp/soc/api/v1/addons**.   For more information, see our documentation on [using API resources](/restapi/platformops/v1/using-resources) and [finding your Cloud URI](/current/clouduri).   ###Request Headers   Your authenication token must be passed in the header of all requests using the key **ApprendaSessionToken** (not case sensitive).  

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

# python 2 and python 3 compatibility library
from six import iteritems

from configuration import Configuration
from src.api_client import ApiClient


class AuditRecordsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def audit_records_export(self, **kwargs):
        """
        Get audit logs
        **Requires Platform version 6.8.0 or later**   Returns all audit logs. Use the query paramters to search and sort for your the audit logs you are looking for. Note, you must have audit logs enabled on your Platform.   See more about [audit logs on the Platform](/current/managing-event-logs#Audit Logs).  
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.audit_records_export(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str search: Key word to return matching logs
        :param datetime start_time: Return logs after this date
        :param datetime end_time: Return logs before this date
        :param int page_size: Number of results to return in a single request. All results will be grouped into pages of this size. Default: 20
        :param int page_number: The page of results to return. Defaults to 1, the first page
        :param str sort_order: Determines how results will be sorted. Allowed values: ascending, descending. Default: ascending
        :param str sort_by: Field name to use to sort results. Allowed values: UserId, Resource, SourceIP, TenantId, Operation
        :return: PagedResourceBaseAuditRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.audit_records_export_with_http_info(**kwargs)
        else:
            (data) = self.audit_records_export_with_http_info(**kwargs)
            return data

    def audit_records_export_with_http_info(self, **kwargs):
        """
        Get audit logs
        **Requires Platform version 6.8.0 or later**   Returns all audit logs. Use the query paramters to search and sort for your the audit logs you are looking for. Note, you must have audit logs enabled on your Platform.   See more about [audit logs on the Platform](/current/managing-event-logs#Audit Logs).  
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.audit_records_export_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str search: Key word to return matching logs
        :param datetime start_time: Return logs after this date
        :param datetime end_time: Return logs before this date
        :param int page_size: Number of results to return in a single request. All results will be grouped into pages of this size. Default: 20
        :param int page_number: The page of results to return. Defaults to 1, the first page
        :param str sort_order: Determines how results will be sorted. Allowed values: ascending, descending. Default: ascending
        :param str sort_by: Field name to use to sort results. Allowed values: UserId, Resource, SourceIP, TenantId, Operation
        :return: PagedResourceBaseAuditRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['search', 'start_time', 'end_time', 'page_size', 'page_number', 'sort_order', 'sort_by']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method audit_records_export" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        resource_path = '/api/v1/auditrecords'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'search' in params:
            query_params['search'] = params['search']
        if 'start_time' in params:
            query_params['startTime'] = params['start_time']
        if 'end_time' in params:
            query_params['endTime'] = params['end_time']
        if 'page_size' in params:
            query_params['pageSize'] = params['page_size']
        if 'page_number' in params:
            query_params['pageNumber'] = params['page_number']
        if 'sort_order' in params:
            query_params['sortOrder'] = params['sort_order']
        if 'sort_by' in params:
            query_params['sortBy'] = params['sort_by']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='PagedResourceBaseAuditRecord',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
