# coding: utf-8

"""
    Account Management REST API

    The Account Management REST API can be used to manage user accounts, roles, and securables for applications on the Platform. The endpoints of this API allow you to perform the same the functionality of the Platform's Account Portal for your Tenant's applications.   For more information, see our documentation on the [Account Portal](/current/account).     ## Authentication    Before making a request, you must be authenticated. Follow these instuctions [to get authenticated](/restapi/accountmanagement/v1/authentication). ## Making a Request   ### Prerequisites    * Installed Platform of version 6.6.0 or later    * An active user account assigned to an active Tenant Account or Developer Team    * Authentication token   ### Request URL    All requests must use **https**.       The URL for every request you make is the URL of your Platform followed by \"/account\" and the path structure of the endpoint. For example, if your Platform URL is https://apps.apprenda.harp and you want to get a list of all user accounts for your Tenant, the request URL will be https://apps.apprenda.harp/account/api/v1/users.     For more information, see our documentation on [using api resources](/restapi/accountmanagement/v1/using-resources) and [finding your Cloud URI](/current/clouduri).    ### Request Headers  Your authenication token must be passed in the header of all requests using the key **ApprendaSessionToken** (not case sensitive).    

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

# python 2 and python 3 compatibility library
from six import iteritems

from configuration import Configuration
from src.api_client import ApiClient


class SecurablesApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def api_v1_application_versions_application_version_key_securables_get(self, application_version_key, **kwargs):
        """
        Get all securables for an application version
        Returns a list of securables associated with an application version.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_application_versions_application_version_key_securables_get(application_version_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str application_version_key: Required. Concatenation of application alias and version alias as 'AppAlias-VersionAlias' (required)
        :return: UnpagedResourceBaseSecurable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.api_v1_application_versions_application_version_key_securables_get_with_http_info(application_version_key, **kwargs)
        else:
            (data) = self.api_v1_application_versions_application_version_key_securables_get_with_http_info(application_version_key, **kwargs)
            return data

    def api_v1_application_versions_application_version_key_securables_get_with_http_info(self, application_version_key, **kwargs):
        """
        Get all securables for an application version
        Returns a list of securables associated with an application version.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_application_versions_application_version_key_securables_get_with_http_info(application_version_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str application_version_key: Required. Concatenation of application alias and version alias as 'AppAlias-VersionAlias' (required)
        :return: UnpagedResourceBaseSecurable
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['application_version_key']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_application_versions_application_version_key_securables_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'application_version_key' is set
        if ('application_version_key' not in params) or (params['application_version_key'] is None):
            raise ValueError("Missing the required parameter `application_version_key` when calling `api_v1_application_versions_application_version_key_securables_get`")


        collection_formats = {}

        resource_path = '/api/v1/applicationVersions/{applicationVersionKey}/securables'.replace('{format}', 'json')
        path_params = {}
        if 'application_version_key' in params:
            path_params['applicationVersionKey'] = params['application_version_key']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='UnpagedResourceBaseSecurable',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def api_v1_application_versions_application_version_key_securables_securable_id_get(self, application_version_key, securable_id, **kwargs):
        """
        Get a securable for an application version
        Returns a securable for the application version and securable id.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_application_versions_application_version_key_securables_securable_id_get(application_version_key, securable_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str application_version_key: Required. Concatenation of application alias and version alias as 'AppAlias-VersionAlias' (required)
        :param str securable_id: Required. Unique Platform assigned id of a securable (required)
        :return: Securable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.api_v1_application_versions_application_version_key_securables_securable_id_get_with_http_info(application_version_key, securable_id, **kwargs)
        else:
            (data) = self.api_v1_application_versions_application_version_key_securables_securable_id_get_with_http_info(application_version_key, securable_id, **kwargs)
            return data

    def api_v1_application_versions_application_version_key_securables_securable_id_get_with_http_info(self, application_version_key, securable_id, **kwargs):
        """
        Get a securable for an application version
        Returns a securable for the application version and securable id.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_application_versions_application_version_key_securables_securable_id_get_with_http_info(application_version_key, securable_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str application_version_key: Required. Concatenation of application alias and version alias as 'AppAlias-VersionAlias' (required)
        :param str securable_id: Required. Unique Platform assigned id of a securable (required)
        :return: Securable
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['application_version_key', 'securable_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_application_versions_application_version_key_securables_securable_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'application_version_key' is set
        if ('application_version_key' not in params) or (params['application_version_key'] is None):
            raise ValueError("Missing the required parameter `application_version_key` when calling `api_v1_application_versions_application_version_key_securables_securable_id_get`")
        # verify the required parameter 'securable_id' is set
        if ('securable_id' not in params) or (params['securable_id'] is None):
            raise ValueError("Missing the required parameter `securable_id` when calling `api_v1_application_versions_application_version_key_securables_securable_id_get`")


        collection_formats = {}

        resource_path = '/api/v1/applicationVersions/{applicationVersionKey}/securables/{securableId}'.replace('{format}', 'json')
        path_params = {}
        if 'application_version_key' in params:
            path_params['applicationVersionKey'] = params['application_version_key']
        if 'securable_id' in params:
            path_params['securableId'] = params['securable_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Securable',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def api_v1_application_versions_application_version_key_securables_securable_id_roles_delete(self, application_version_key, securable_id, **kwargs):
        """
        Remove role from a securable
        Remove the specified role(s) from a securable.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_application_versions_application_version_key_securables_securable_id_roles_delete(application_version_key, securable_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str application_version_key: Required. Concatenation of application alias and version alias as 'AppAlias-VersionAlias' (required)
        :param str securable_id: Required. Unique Platform assigned id of a securable (required)
        :param list[str] body: Array of role names to be removed from the securable
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.api_v1_application_versions_application_version_key_securables_securable_id_roles_delete_with_http_info(application_version_key, securable_id, **kwargs)
        else:
            (data) = self.api_v1_application_versions_application_version_key_securables_securable_id_roles_delete_with_http_info(application_version_key, securable_id, **kwargs)
            return data

    def api_v1_application_versions_application_version_key_securables_securable_id_roles_delete_with_http_info(self, application_version_key, securable_id, **kwargs):
        """
        Remove role from a securable
        Remove the specified role(s) from a securable.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_application_versions_application_version_key_securables_securable_id_roles_delete_with_http_info(application_version_key, securable_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str application_version_key: Required. Concatenation of application alias and version alias as 'AppAlias-VersionAlias' (required)
        :param str securable_id: Required. Unique Platform assigned id of a securable (required)
        :param list[str] body: Array of role names to be removed from the securable
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['application_version_key', 'securable_id', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_application_versions_application_version_key_securables_securable_id_roles_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'application_version_key' is set
        if ('application_version_key' not in params) or (params['application_version_key'] is None):
            raise ValueError("Missing the required parameter `application_version_key` when calling `api_v1_application_versions_application_version_key_securables_securable_id_roles_delete`")
        # verify the required parameter 'securable_id' is set
        if ('securable_id' not in params) or (params['securable_id'] is None):
            raise ValueError("Missing the required parameter `securable_id` when calling `api_v1_application_versions_application_version_key_securables_securable_id_roles_delete`")


        collection_formats = {}

        resource_path = '/api/v1/applicationVersions/{applicationVersionKey}/securables/{securableId}/roles'.replace('{format}', 'json')
        path_params = {}
        if 'application_version_key' in params:
            path_params['applicationVersionKey'] = params['application_version_key']
        if 'securable_id' in params:
            path_params['securableId'] = params['securable_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def api_v1_application_versions_application_version_key_securables_securable_id_roles_get(self, application_version_key, securable_id, **kwargs):
        """
        Get all roles using a securable
        Returns the roles associated with the securable.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_application_versions_application_version_key_securables_securable_id_roles_get(application_version_key, securable_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str application_version_key: Required. Concatenation of application alias and version alias as 'AppAlias-VersionAlias' (required)
        :param str securable_id: Required. Unique Platform assigned id of a securable (required)
        :return: UnpagedResourceBaseRole
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.api_v1_application_versions_application_version_key_securables_securable_id_roles_get_with_http_info(application_version_key, securable_id, **kwargs)
        else:
            (data) = self.api_v1_application_versions_application_version_key_securables_securable_id_roles_get_with_http_info(application_version_key, securable_id, **kwargs)
            return data

    def api_v1_application_versions_application_version_key_securables_securable_id_roles_get_with_http_info(self, application_version_key, securable_id, **kwargs):
        """
        Get all roles using a securable
        Returns the roles associated with the securable.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_application_versions_application_version_key_securables_securable_id_roles_get_with_http_info(application_version_key, securable_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str application_version_key: Required. Concatenation of application alias and version alias as 'AppAlias-VersionAlias' (required)
        :param str securable_id: Required. Unique Platform assigned id of a securable (required)
        :return: UnpagedResourceBaseRole
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['application_version_key', 'securable_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_application_versions_application_version_key_securables_securable_id_roles_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'application_version_key' is set
        if ('application_version_key' not in params) or (params['application_version_key'] is None):
            raise ValueError("Missing the required parameter `application_version_key` when calling `api_v1_application_versions_application_version_key_securables_securable_id_roles_get`")
        # verify the required parameter 'securable_id' is set
        if ('securable_id' not in params) or (params['securable_id'] is None):
            raise ValueError("Missing the required parameter `securable_id` when calling `api_v1_application_versions_application_version_key_securables_securable_id_roles_get`")


        collection_formats = {}

        resource_path = '/api/v1/applicationVersions/{applicationVersionKey}/securables/{securableId}/roles'.replace('{format}', 'json')
        path_params = {}
        if 'application_version_key' in params:
            path_params['applicationVersionKey'] = params['application_version_key']
        if 'securable_id' in params:
            path_params['securableId'] = params['securable_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='UnpagedResourceBaseRole',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def api_v1_application_versions_application_version_key_securables_securable_id_roles_post(self, application_version_key, securable_id, **kwargs):
        """
        Assign role(s) to a securable
        Assign role(s) to a securable.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_application_versions_application_version_key_securables_securable_id_roles_post(application_version_key, securable_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str application_version_key: Required. Concatenation of application alias and version alias as 'AppAlias-VersionAlias' (required)
        :param str securable_id: Required. Unique Platform assigned id of a securable (required)
        :param list[str] body: Array of role names that should be associated with this securable
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.api_v1_application_versions_application_version_key_securables_securable_id_roles_post_with_http_info(application_version_key, securable_id, **kwargs)
        else:
            (data) = self.api_v1_application_versions_application_version_key_securables_securable_id_roles_post_with_http_info(application_version_key, securable_id, **kwargs)
            return data

    def api_v1_application_versions_application_version_key_securables_securable_id_roles_post_with_http_info(self, application_version_key, securable_id, **kwargs):
        """
        Assign role(s) to a securable
        Assign role(s) to a securable.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_application_versions_application_version_key_securables_securable_id_roles_post_with_http_info(application_version_key, securable_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str application_version_key: Required. Concatenation of application alias and version alias as 'AppAlias-VersionAlias' (required)
        :param str securable_id: Required. Unique Platform assigned id of a securable (required)
        :param list[str] body: Array of role names that should be associated with this securable
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['application_version_key', 'securable_id', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_application_versions_application_version_key_securables_securable_id_roles_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'application_version_key' is set
        if ('application_version_key' not in params) or (params['application_version_key'] is None):
            raise ValueError("Missing the required parameter `application_version_key` when calling `api_v1_application_versions_application_version_key_securables_securable_id_roles_post`")
        # verify the required parameter 'securable_id' is set
        if ('securable_id' not in params) or (params['securable_id'] is None):
            raise ValueError("Missing the required parameter `securable_id` when calling `api_v1_application_versions_application_version_key_securables_securable_id_roles_post`")


        collection_formats = {}

        resource_path = '/api/v1/applicationVersions/{applicationVersionKey}/securables/{securableId}/roles'.replace('{format}', 'json')
        path_params = {}
        if 'application_version_key' in params:
            path_params['applicationVersionKey'] = params['application_version_key']
        if 'securable_id' in params:
            path_params['securableId'] = params['securable_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def api_v1_roles_role_id_securables_get(self, role_id, **kwargs):
        """
        Get all securables for a role
        Returns a list of all securables associated with a given role.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_roles_role_id_securables_get(role_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str role_id: Required. Unique Platform assigned id of a role (required)
        :return: UnpagedResourceBaseSecurable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.api_v1_roles_role_id_securables_get_with_http_info(role_id, **kwargs)
        else:
            (data) = self.api_v1_roles_role_id_securables_get_with_http_info(role_id, **kwargs)
            return data

    def api_v1_roles_role_id_securables_get_with_http_info(self, role_id, **kwargs):
        """
        Get all securables for a role
        Returns a list of all securables associated with a given role.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.api_v1_roles_role_id_securables_get_with_http_info(role_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str role_id: Required. Unique Platform assigned id of a role (required)
        :return: UnpagedResourceBaseSecurable
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['role_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_roles_role_id_securables_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'role_id' is set
        if ('role_id' not in params) or (params['role_id'] is None):
            raise ValueError("Missing the required parameter `role_id` when calling `api_v1_roles_role_id_securables_get`")


        collection_formats = {}

        resource_path = '/api/v1/roles/{roleId}/securables'.replace('{format}', 'json')
        path_params = {}
        if 'role_id' in params:
            path_params['roleId'] = params['role_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='UnpagedResourceBaseSecurable',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
