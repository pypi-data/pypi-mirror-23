# coding: utf-8

"""
    Apprenda.DeveloperPortal.Web

    The Application Management REST API can be leveraged to customize the Developer experience of deploying and managing applications  on the Apprenda Platform. This allows some of the functionality of the Platform's [Developer Portal](/current/developer-portal)to be accomplished through a variety of means such as custom-built UX or command-line interfaces.     ##Authentication    Before making a request, you must be authenticated. Learn how to [get authenticated](/restapi/appmanagement/v1/authentication).    ##Making a Request    ###Prerequisites    * Installed Platform of version 4.5.0 or later     * Authentication token     * To use this API you must be part of a [Development Team or Tenant](/current/create-users) and have an [active subscription](/current/dev-portal-setup#create) to Developer Portal    ###Request URL    All requests must use **https**.    The URL for every request you make is the Cloud URI of your Platform followed by \"/developer\" and the path structure of the endpoint. For example, if your Cloud URI is apps.apprenda.harp and you want to get the Add-ons for your Platform, the request URI will be **apps.apprenda.harp/developer/api/v1/addons**.      For more information, see our documentation on [using API resources](/restapi/appmanagement/v1/resources) and [finding your Cloud URI](/current/clouduri).

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Component(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, version=None, storage_quota=None, resource_policy=None, custom_properties=None, name=None, type=None, alias=None, href=None):
        """
        Component - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'version': 'ResourceBase',
            'storage_quota': 'StorageQuotaReference',
            'resource_policy': 'ResourceAllocationPolicyReference',
            'custom_properties': 'ResourceBase',
            'name': 'str',
            'type': 'str',
            'alias': 'str',
            'href': 'str'
        }

        self.attribute_map = {
            'version': 'version',
            'storage_quota': 'storageQuota',
            'resource_policy': 'resourcePolicy',
            'custom_properties': 'customProperties',
            'name': 'name',
            'type': 'type',
            'alias': 'alias',
            'href': 'href'
        }

        self._version = version
        self._storage_quota = storage_quota
        self._resource_policy = resource_policy
        self._custom_properties = custom_properties
        self._name = name
        self._type = type
        self._alias = alias
        self._href = href

    @property
    def version(self):
        """
        Gets the version of this Component.

        :return: The version of this Component.
        :rtype: ResourceBase
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this Component.

        :param version: The version of this Component.
        :type: ResourceBase
        """

        self._version = version

    @property
    def storage_quota(self):
        """
        Gets the storage_quota of this Component.

        :return: The storage_quota of this Component.
        :rtype: StorageQuotaReference
        """
        return self._storage_quota

    @storage_quota.setter
    def storage_quota(self, storage_quota):
        """
        Sets the storage_quota of this Component.

        :param storage_quota: The storage_quota of this Component.
        :type: StorageQuotaReference
        """

        self._storage_quota = storage_quota

    @property
    def resource_policy(self):
        """
        Gets the resource_policy of this Component.

        :return: The resource_policy of this Component.
        :rtype: ResourceAllocationPolicyReference
        """
        return self._resource_policy

    @resource_policy.setter
    def resource_policy(self, resource_policy):
        """
        Sets the resource_policy of this Component.

        :param resource_policy: The resource_policy of this Component.
        :type: ResourceAllocationPolicyReference
        """

        self._resource_policy = resource_policy

    @property
    def custom_properties(self):
        """
        Gets the custom_properties of this Component.

        :return: The custom_properties of this Component.
        :rtype: ResourceBase
        """
        return self._custom_properties

    @custom_properties.setter
    def custom_properties(self, custom_properties):
        """
        Sets the custom_properties of this Component.

        :param custom_properties: The custom_properties of this Component.
        :type: ResourceBase
        """

        self._custom_properties = custom_properties

    @property
    def name(self):
        """
        Gets the name of this Component.

        :return: The name of this Component.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Component.

        :param name: The name of this Component.
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """
        Gets the type of this Component.

        :return: The type of this Component.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this Component.

        :param type: The type of this Component.
        :type: str
        """

        self._type = type

    @property
    def alias(self):
        """
        Gets the alias of this Component.

        :return: The alias of this Component.
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """
        Sets the alias of this Component.

        :param alias: The alias of this Component.
        :type: str
        """

        self._alias = alias

    @property
    def href(self):
        """
        Gets the href of this Component.

        :return: The href of this Component.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """
        Sets the href of this Component.

        :param href: The href of this Component.
        :type: str
        """

        self._href = href

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Component):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
