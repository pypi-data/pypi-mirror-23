# coding: utf-8

"""
    Apprenda.DeveloperPortal.Web

    The Application Management REST API can be leveraged to customize the Developer experience of deploying and managing applications  on the Apprenda Platform. This allows some of the functionality of the Platform's [Developer Portal](/current/developer-portal)to be accomplished through a variety of means such as custom-built UX or command-line interfaces.     ##Authentication    Before making a request, you must be authenticated. Learn how to [get authenticated](/restapi/appmanagement/v1/authentication).    ##Making a Request    ###Prerequisites    * Installed Platform of version 4.5.0 or later     * Authentication token     * To use this API you must be part of a [Development Team or Tenant](/current/create-users) and have an [active subscription](/current/dev-portal-setup#create) to Developer Portal    ###Request URL    All requests must use **https**.    The URL for every request you make is the Cloud URI of your Platform followed by \"/developer\" and the path structure of the endpoint. For example, if your Cloud URI is apps.apprenda.harp and you want to get the Add-ons for your Platform, the request URI will be **apps.apprenda.harp/developer/api/v1/addons**.      For more information, see our documentation on [using API resources](/restapi/appmanagement/v1/resources) and [finding your Cloud URI](/current/clouduri).

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class AggregateLogData(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, total_count=None, debug_count=None, info_count=None, warning_count=None, error_count=None, fatal_count=None, href=None):
        """
        AggregateLogData - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'total_count': 'int',
            'debug_count': 'int',
            'info_count': 'int',
            'warning_count': 'int',
            'error_count': 'int',
            'fatal_count': 'int',
            'href': 'str'
        }

        self.attribute_map = {
            'total_count': 'totalCount',
            'debug_count': 'debugCount',
            'info_count': 'infoCount',
            'warning_count': 'warningCount',
            'error_count': 'errorCount',
            'fatal_count': 'fatalCount',
            'href': 'href'
        }

        self._total_count = total_count
        self._debug_count = debug_count
        self._info_count = info_count
        self._warning_count = warning_count
        self._error_count = error_count
        self._fatal_count = fatal_count
        self._href = href

    @property
    def total_count(self):
        """
        Gets the total_count of this AggregateLogData.

        :return: The total_count of this AggregateLogData.
        :rtype: int
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """
        Sets the total_count of this AggregateLogData.

        :param total_count: The total_count of this AggregateLogData.
        :type: int
        """

        self._total_count = total_count

    @property
    def debug_count(self):
        """
        Gets the debug_count of this AggregateLogData.

        :return: The debug_count of this AggregateLogData.
        :rtype: int
        """
        return self._debug_count

    @debug_count.setter
    def debug_count(self, debug_count):
        """
        Sets the debug_count of this AggregateLogData.

        :param debug_count: The debug_count of this AggregateLogData.
        :type: int
        """

        self._debug_count = debug_count

    @property
    def info_count(self):
        """
        Gets the info_count of this AggregateLogData.

        :return: The info_count of this AggregateLogData.
        :rtype: int
        """
        return self._info_count

    @info_count.setter
    def info_count(self, info_count):
        """
        Sets the info_count of this AggregateLogData.

        :param info_count: The info_count of this AggregateLogData.
        :type: int
        """

        self._info_count = info_count

    @property
    def warning_count(self):
        """
        Gets the warning_count of this AggregateLogData.

        :return: The warning_count of this AggregateLogData.
        :rtype: int
        """
        return self._warning_count

    @warning_count.setter
    def warning_count(self, warning_count):
        """
        Sets the warning_count of this AggregateLogData.

        :param warning_count: The warning_count of this AggregateLogData.
        :type: int
        """

        self._warning_count = warning_count

    @property
    def error_count(self):
        """
        Gets the error_count of this AggregateLogData.

        :return: The error_count of this AggregateLogData.
        :rtype: int
        """
        return self._error_count

    @error_count.setter
    def error_count(self, error_count):
        """
        Sets the error_count of this AggregateLogData.

        :param error_count: The error_count of this AggregateLogData.
        :type: int
        """

        self._error_count = error_count

    @property
    def fatal_count(self):
        """
        Gets the fatal_count of this AggregateLogData.

        :return: The fatal_count of this AggregateLogData.
        :rtype: int
        """
        return self._fatal_count

    @fatal_count.setter
    def fatal_count(self, fatal_count):
        """
        Sets the fatal_count of this AggregateLogData.

        :param fatal_count: The fatal_count of this AggregateLogData.
        :type: int
        """

        self._fatal_count = fatal_count

    @property
    def href(self):
        """
        Gets the href of this AggregateLogData.

        :return: The href of this AggregateLogData.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """
        Sets the href of this AggregateLogData.

        :param href: The href of this AggregateLogData.
        :type: str
        """

        self._href = href

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AggregateLogData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
