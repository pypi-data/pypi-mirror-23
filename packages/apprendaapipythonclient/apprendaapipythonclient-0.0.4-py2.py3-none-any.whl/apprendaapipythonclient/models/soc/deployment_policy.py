# coding: utf-8

"""
    Platform Operations Rest API

    The Platform Operations REST API can be leveraged to customize the Platform Operator experience of managing infrastructure and applications for the Apprenda Platform. This allows some of the functionality of the Platform's System Operations Center (SOC) to be accomplished through a variety of means such as custom-built UX or command-line interfaces.   For more information about the abilities of Platform Operators, see our documentation on the [SOC](/current/SOC).   ##Authentication   Before making a request, you must be authenticated. Learn how to [get authenticated](/restapi/platformops/v1/authentication).   ##Making a Request   ###Prerequisites   * Installed Platform of version 6.5.1 or later (Note that most endpoints are only available in version 6.7.0 and later)    * Authentication token   * If SOC authorization is enabled on your Platform, you must be assigned as an active Platform Operator   ###Request URL   All requests must use **https**.   The URL for every request you make is the Cloud URI of your Platform followed by \"/soc\" and the path structure of the endpoint. For example, if your Cloud URI is apps.apprenda.harp and you want to get the Add-ons for your Platform, the request URI will be **apps.apprenda.harp/soc/api/v1/addons**.   For more information, see our documentation on [using API resources](/restapi/platformops/v1/using-resources) and [finding your Cloud URI](/current/clouduri).   ###Request Headers   Your authenication token must be passed in the header of all requests using the key **ApprendaSessionToken** (not case sensitive).  

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DeploymentPolicy(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, name=None, description=None, active=None, applies_to_sandbox=None, applies_to_published=None, source_object_type=None, property_name=None, property_display_name=None, policy_applicability=None, policy_condition=None, priority=None, href=None):
        """
        DeploymentPolicy - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'name': 'str',
            'description': 'str',
            'active': 'bool',
            'applies_to_sandbox': 'bool',
            'applies_to_published': 'bool',
            'source_object_type': 'str',
            'property_name': 'str',
            'property_display_name': 'str',
            'policy_applicability': 'str',
            'policy_condition': 'str',
            'priority': 'int',
            'href': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'description': 'description',
            'active': 'active',
            'applies_to_sandbox': 'appliesToSandbox',
            'applies_to_published': 'appliesToPublished',
            'source_object_type': 'sourceObjectType',
            'property_name': 'propertyName',
            'property_display_name': 'propertyDisplayName',
            'policy_applicability': 'policyApplicability',
            'policy_condition': 'policyCondition',
            'priority': 'priority',
            'href': 'href'
        }

        self._id = id
        self._name = name
        self._description = description
        self._active = active
        self._applies_to_sandbox = applies_to_sandbox
        self._applies_to_published = applies_to_published
        self._source_object_type = source_object_type
        self._property_name = property_name
        self._property_display_name = property_display_name
        self._policy_applicability = policy_applicability
        self._policy_condition = policy_condition
        self._priority = priority
        self._href = href

    @property
    def id(self):
        """
        Gets the id of this DeploymentPolicy.

        :return: The id of this DeploymentPolicy.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this DeploymentPolicy.

        :param id: The id of this DeploymentPolicy.
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this DeploymentPolicy.

        :return: The name of this DeploymentPolicy.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this DeploymentPolicy.

        :param name: The name of this DeploymentPolicy.
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """
        Gets the description of this DeploymentPolicy.

        :return: The description of this DeploymentPolicy.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this DeploymentPolicy.

        :param description: The description of this DeploymentPolicy.
        :type: str
        """

        self._description = description

    @property
    def active(self):
        """
        Gets the active of this DeploymentPolicy.

        :return: The active of this DeploymentPolicy.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """
        Sets the active of this DeploymentPolicy.

        :param active: The active of this DeploymentPolicy.
        :type: bool
        """

        self._active = active

    @property
    def applies_to_sandbox(self):
        """
        Gets the applies_to_sandbox of this DeploymentPolicy.

        :return: The applies_to_sandbox of this DeploymentPolicy.
        :rtype: bool
        """
        return self._applies_to_sandbox

    @applies_to_sandbox.setter
    def applies_to_sandbox(self, applies_to_sandbox):
        """
        Sets the applies_to_sandbox of this DeploymentPolicy.

        :param applies_to_sandbox: The applies_to_sandbox of this DeploymentPolicy.
        :type: bool
        """

        self._applies_to_sandbox = applies_to_sandbox

    @property
    def applies_to_published(self):
        """
        Gets the applies_to_published of this DeploymentPolicy.

        :return: The applies_to_published of this DeploymentPolicy.
        :rtype: bool
        """
        return self._applies_to_published

    @applies_to_published.setter
    def applies_to_published(self, applies_to_published):
        """
        Sets the applies_to_published of this DeploymentPolicy.

        :param applies_to_published: The applies_to_published of this DeploymentPolicy.
        :type: bool
        """

        self._applies_to_published = applies_to_published

    @property
    def source_object_type(self):
        """
        Gets the source_object_type of this DeploymentPolicy.

        :return: The source_object_type of this DeploymentPolicy.
        :rtype: str
        """
        return self._source_object_type

    @source_object_type.setter
    def source_object_type(self, source_object_type):
        """
        Sets the source_object_type of this DeploymentPolicy.

        :param source_object_type: The source_object_type of this DeploymentPolicy.
        :type: str
        """
        allowed_values = ["Applications", "UserInterfaces", "WindowsServices", "JavaWebApplications", "LinuxServices", "Databases", "ResourcePolicies", "StorageQuotas"]
        if source_object_type not in allowed_values:
            raise ValueError(
                "Invalid value for `source_object_type` ({0}), must be one of {1}"
                .format(source_object_type, allowed_values)
            )

        self._source_object_type = source_object_type

    @property
    def property_name(self):
        """
        Gets the property_name of this DeploymentPolicy.

        :return: The property_name of this DeploymentPolicy.
        :rtype: str
        """
        return self._property_name

    @property_name.setter
    def property_name(self, property_name):
        """
        Sets the property_name of this DeploymentPolicy.

        :param property_name: The property_name of this DeploymentPolicy.
        :type: str
        """

        self._property_name = property_name

    @property
    def property_display_name(self):
        """
        Gets the property_display_name of this DeploymentPolicy.

        :return: The property_display_name of this DeploymentPolicy.
        :rtype: str
        """
        return self._property_display_name

    @property_display_name.setter
    def property_display_name(self, property_display_name):
        """
        Sets the property_display_name of this DeploymentPolicy.

        :param property_display_name: The property_display_name of this DeploymentPolicy.
        :type: str
        """

        self._property_display_name = property_display_name

    @property
    def policy_applicability(self):
        """
        Gets the policy_applicability of this DeploymentPolicy.

        :return: The policy_applicability of this DeploymentPolicy.
        :rtype: str
        """
        return self._policy_applicability

    @policy_applicability.setter
    def policy_applicability(self, policy_applicability):
        """
        Sets the policy_applicability of this DeploymentPolicy.

        :param policy_applicability: The policy_applicability of this DeploymentPolicy.
        :type: str
        """
        allowed_values = ["Must", "Should"]
        if policy_applicability not in allowed_values:
            raise ValueError(
                "Invalid value for `policy_applicability` ({0}), must be one of {1}"
                .format(policy_applicability, allowed_values)
            )

        self._policy_applicability = policy_applicability

    @property
    def policy_condition(self):
        """
        Gets the policy_condition of this DeploymentPolicy.

        :return: The policy_condition of this DeploymentPolicy.
        :rtype: str
        """
        return self._policy_condition

    @policy_condition.setter
    def policy_condition(self, policy_condition):
        """
        Sets the policy_condition of this DeploymentPolicy.

        :param policy_condition: The policy_condition of this DeploymentPolicy.
        :type: str
        """
        allowed_values = ["ContainsAny", "DoesNotContainAny", "ContainsAll", "DoesNotContainAll"]
        if policy_condition not in allowed_values:
            raise ValueError(
                "Invalid value for `policy_condition` ({0}), must be one of {1}"
                .format(policy_condition, allowed_values)
            )

        self._policy_condition = policy_condition

    @property
    def priority(self):
        """
        Gets the priority of this DeploymentPolicy.

        :return: The priority of this DeploymentPolicy.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """
        Sets the priority of this DeploymentPolicy.

        :param priority: The priority of this DeploymentPolicy.
        :type: int
        """

        self._priority = priority

    @property
    def href(self):
        """
        Gets the href of this DeploymentPolicy.

        :return: The href of this DeploymentPolicy.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """
        Sets the href of this DeploymentPolicy.

        :param href: The href of this DeploymentPolicy.
        :type: str
        """

        self._href = href

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DeploymentPolicy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
