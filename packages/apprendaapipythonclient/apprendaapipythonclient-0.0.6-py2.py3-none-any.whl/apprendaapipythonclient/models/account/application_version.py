# coding: utf-8

"""
    Account Management REST API

    The Account Management REST API can be used to manage user accounts, roles, and securables for applications on the Platform. The endpoints of this API allow you to perform the same the functionality of the Platform's Account Portal for your Tenant's applications.   For more information, see our documentation on the [Account Portal](/current/account).     ## Authentication    Before making a request, you must be authenticated. Follow these instuctions [to get authenticated](/restapi/accountmanagement/v1/authentication). ## Making a Request   ### Prerequisites    * Installed Platform of version 6.6.0 or later    * An active user account assigned to an active Tenant Account or Developer Team    * Authentication token   ### Request URL    All requests must use **https**.       The URL for every request you make is the URL of your Platform followed by \"/account\" and the path structure of the endpoint. For example, if your Platform URL is https://apps.apprenda.harp and you want to get a list of all user accounts for your Tenant, the request URL will be https://apps.apprenda.harp/account/api/v1/users.     For more information, see our documentation on [using api resources](/restapi/accountmanagement/v1/using-resources) and [finding your Cloud URI](/current/clouduri).    ### Request Headers  Your authenication token must be passed in the header of all requests using the key **ApprendaSessionToken** (not case sensitive).    

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ApplicationVersion(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, provider_name=None, application_alias=None, application_description=None, application_name=None, version_alias=None, stage=None, plans=None, securables=None, href=None):
        """
        ApplicationVersion - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'provider_name': 'str',
            'application_alias': 'str',
            'application_description': 'str',
            'application_name': 'str',
            'version_alias': 'str',
            'stage': 'str',
            'plans': 'ResourceBase',
            'securables': 'ResourceBase',
            'href': 'str'
        }

        self.attribute_map = {
            'provider_name': 'providerName',
            'application_alias': 'applicationAlias',
            'application_description': 'applicationDescription',
            'application_name': 'applicationName',
            'version_alias': 'versionAlias',
            'stage': 'stage',
            'plans': 'plans',
            'securables': 'securables',
            'href': 'href'
        }

        self._provider_name = provider_name
        self._application_alias = application_alias
        self._application_description = application_description
        self._application_name = application_name
        self._version_alias = version_alias
        self._stage = stage
        self._plans = plans
        self._securables = securables
        self._href = href

    @property
    def provider_name(self):
        """
        Gets the provider_name of this ApplicationVersion.

        :return: The provider_name of this ApplicationVersion.
        :rtype: str
        """
        return self._provider_name

    @provider_name.setter
    def provider_name(self, provider_name):
        """
        Sets the provider_name of this ApplicationVersion.

        :param provider_name: The provider_name of this ApplicationVersion.
        :type: str
        """

        self._provider_name = provider_name

    @property
    def application_alias(self):
        """
        Gets the application_alias of this ApplicationVersion.

        :return: The application_alias of this ApplicationVersion.
        :rtype: str
        """
        return self._application_alias

    @application_alias.setter
    def application_alias(self, application_alias):
        """
        Sets the application_alias of this ApplicationVersion.

        :param application_alias: The application_alias of this ApplicationVersion.
        :type: str
        """

        self._application_alias = application_alias

    @property
    def application_description(self):
        """
        Gets the application_description of this ApplicationVersion.

        :return: The application_description of this ApplicationVersion.
        :rtype: str
        """
        return self._application_description

    @application_description.setter
    def application_description(self, application_description):
        """
        Sets the application_description of this ApplicationVersion.

        :param application_description: The application_description of this ApplicationVersion.
        :type: str
        """

        self._application_description = application_description

    @property
    def application_name(self):
        """
        Gets the application_name of this ApplicationVersion.

        :return: The application_name of this ApplicationVersion.
        :rtype: str
        """
        return self._application_name

    @application_name.setter
    def application_name(self, application_name):
        """
        Sets the application_name of this ApplicationVersion.

        :param application_name: The application_name of this ApplicationVersion.
        :type: str
        """

        self._application_name = application_name

    @property
    def version_alias(self):
        """
        Gets the version_alias of this ApplicationVersion.

        :return: The version_alias of this ApplicationVersion.
        :rtype: str
        """
        return self._version_alias

    @version_alias.setter
    def version_alias(self, version_alias):
        """
        Sets the version_alias of this ApplicationVersion.

        :param version_alias: The version_alias of this ApplicationVersion.
        :type: str
        """

        self._version_alias = version_alias

    @property
    def stage(self):
        """
        Gets the stage of this ApplicationVersion.

        :return: The stage of this ApplicationVersion.
        :rtype: str
        """
        return self._stage

    @stage.setter
    def stage(self, stage):
        """
        Sets the stage of this ApplicationVersion.

        :param stage: The stage of this ApplicationVersion.
        :type: str
        """
        allowed_values = ["Published", "Sandbox"]
        if stage not in allowed_values:
            raise ValueError(
                "Invalid value for `stage` ({0}), must be one of {1}"
                .format(stage, allowed_values)
            )

        self._stage = stage

    @property
    def plans(self):
        """
        Gets the plans of this ApplicationVersion.

        :return: The plans of this ApplicationVersion.
        :rtype: ResourceBase
        """
        return self._plans

    @plans.setter
    def plans(self, plans):
        """
        Sets the plans of this ApplicationVersion.

        :param plans: The plans of this ApplicationVersion.
        :type: ResourceBase
        """

        self._plans = plans

    @property
    def securables(self):
        """
        Gets the securables of this ApplicationVersion.

        :return: The securables of this ApplicationVersion.
        :rtype: ResourceBase
        """
        return self._securables

    @securables.setter
    def securables(self, securables):
        """
        Sets the securables of this ApplicationVersion.

        :param securables: The securables of this ApplicationVersion.
        :type: ResourceBase
        """

        self._securables = securables

    @property
    def href(self):
        """
        Gets the href of this ApplicationVersion.

        :return: The href of this ApplicationVersion.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """
        Sets the href of this ApplicationVersion.

        :param href: The href of this ApplicationVersion.
        :type: str
        """

        self._href = href

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ApplicationVersion):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
