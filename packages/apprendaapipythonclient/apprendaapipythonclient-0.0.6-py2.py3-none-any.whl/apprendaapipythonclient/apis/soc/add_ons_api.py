# coding: utf-8

"""
    Platform Operations Rest API

    The Platform Operations REST API can be leveraged to customize the Platform Operator experience of managing infrastructure and applications for the Apprenda Platform. This allows some of the functionality of the Platform's System Operations Center (SOC) to be accomplished through a variety of means such as custom-built UX or command-line interfaces.   For more information about the abilities of Platform Operators, see our documentation on the [SOC](/current/SOC).   ##Authentication   Before making a request, you must be authenticated. Learn how to [get authenticated](/restapi/platformops/v1/authentication).   ##Making a Request   ###Prerequisites   * Installed Platform of version 6.5.1 or later (Note that most endpoints are only available in version 6.7.0 and later)    * Authentication token   * If SOC authorization is enabled on your Platform, you must be assigned as an active Platform Operator   ###Request URL   All requests must use **https**.   The URL for every request you make is the Cloud URI of your Platform followed by \"/soc\" and the path structure of the endpoint. For example, if your Cloud URI is apps.apprenda.harp and you want to get the Add-ons for your Platform, the request URI will be **apps.apprenda.harp/soc/api/v1/addons**.   For more information, see our documentation on [using API resources](/restapi/platformops/v1/using-resources) and [finding your Cloud URI](/current/clouduri).   ###Request Headers   Your authenication token must be passed in the header of all requests using the key **ApprendaSessionToken** (not case sensitive).  

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

# python 2 and python 3 compatibility library
from six import iteritems

from configuration import Configuration
from src.api_client import ApiClient


class AddOnsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def add_add_on(self, addon, **kwargs):
        """
        Create Add-On
        **Requires Platform version 6.7.0 or later.**   Create a new Add-On for the Platform. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_add_on(addon, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param AddOnCreationRequest addon: Required. Add-On to add to the collection (required)
        :return: AddOn
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.add_add_on_with_http_info(addon, **kwargs)
        else:
            (data) = self.add_add_on_with_http_info(addon, **kwargs)
            return data

    def add_add_on_with_http_info(self, addon, **kwargs):
        """
        Create Add-On
        **Requires Platform version 6.7.0 or later.**   Create a new Add-On for the Platform. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_add_on_with_http_info(addon, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param AddOnCreationRequest addon: Required. Add-On to add to the collection (required)
        :return: AddOn
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['addon']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_add_on" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'addon' is set
        if ('addon' not in params) or (params['addon'] is None):
            raise ValueError("Missing the required parameter `addon` when calling `add_add_on`")


        collection_formats = {}

        resource_path = '/api/v1/addons'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'addon' in params:
            body_params = params['addon']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='AddOn',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def add_on_get(self, **kwargs):
        """
        Get all Add-Ons
        **Requires Platform version 6.7.0 or later.**   Returns a list of all Add-Ons for the Platform. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_on_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: UnpagedResourceBaseAddOn
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.add_on_get_with_http_info(**kwargs)
        else:
            (data) = self.add_on_get_with_http_info(**kwargs)
            return data

    def add_on_get_with_http_info(self, **kwargs):
        """
        Get all Add-Ons
        **Requires Platform version 6.7.0 or later.**   Returns a list of all Add-Ons for the Platform. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_on_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: UnpagedResourceBaseAddOn
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_on_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        resource_path = '/api/v1/addons'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='UnpagedResourceBaseAddOn',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def add_on_get_by_name(self, addon_alias, **kwargs):
        """
        Get Add-On
        **Requires Platform version 6.7.0 or later.**   Returns the given Add-On.  
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_on_get_by_name(addon_alias, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str addon_alias: Required. Alias of the Add-On to retrieve (required)
        :return: AddOn
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.add_on_get_by_name_with_http_info(addon_alias, **kwargs)
        else:
            (data) = self.add_on_get_by_name_with_http_info(addon_alias, **kwargs)
            return data

    def add_on_get_by_name_with_http_info(self, addon_alias, **kwargs):
        """
        Get Add-On
        **Requires Platform version 6.7.0 or later.**   Returns the given Add-On.  
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_on_get_by_name_with_http_info(addon_alias, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str addon_alias: Required. Alias of the Add-On to retrieve (required)
        :return: AddOn
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['addon_alias']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_on_get_by_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'addon_alias' is set
        if ('addon_alias' not in params) or (params['addon_alias'] is None):
            raise ValueError("Missing the required parameter `addon_alias` when calling `add_on_get_by_name`")


        collection_formats = {}

        resource_path = '/api/v1/addons/{addonAlias}'.replace('{format}', 'json')
        path_params = {}
        if 'addon_alias' in params:
            path_params['addonAlias'] = params['addon_alias']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='AddOn',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def remove_add_on(self, addon_alias, **kwargs):
        """
        Delete Add-On
        **Requires Platform verison 6.7.0 or later.**   Deletes the given Add-On from the Platform. Note that you can't delete an Add-On if there are provisioned instances belonging to one or more Development Teams.   Learn more about [removing an Add-On from your Platform](/current/addons#delete). 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.remove_add_on(addon_alias, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str addon_alias: Required. Alias of the Add-On to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.remove_add_on_with_http_info(addon_alias, **kwargs)
        else:
            (data) = self.remove_add_on_with_http_info(addon_alias, **kwargs)
            return data

    def remove_add_on_with_http_info(self, addon_alias, **kwargs):
        """
        Delete Add-On
        **Requires Platform verison 6.7.0 or later.**   Deletes the given Add-On from the Platform. Note that you can't delete an Add-On if there are provisioned instances belonging to one or more Development Teams.   Learn more about [removing an Add-On from your Platform](/current/addons#delete). 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.remove_add_on_with_http_info(addon_alias, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str addon_alias: Required. Alias of the Add-On to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['addon_alias']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_add_on" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'addon_alias' is set
        if ('addon_alias' not in params) or (params['addon_alias'] is None):
            raise ValueError("Missing the required parameter `addon_alias` when calling `remove_add_on`")


        collection_formats = {}

        resource_path = '/api/v1/addons/{addonAlias}'.replace('{format}', 'json')
        path_params = {}
        if 'addon_alias' in params:
            path_params['addonAlias'] = params['addon_alias']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
