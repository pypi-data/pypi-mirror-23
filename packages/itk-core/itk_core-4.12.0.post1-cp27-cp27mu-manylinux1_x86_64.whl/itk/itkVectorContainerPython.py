# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkVectorContainerPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_itkVectorContainerPython')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_itkVectorContainerPython')
    _itkVectorContainerPython = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkVectorContainerPython', [dirname(__file__)])
        except ImportError:
            import _itkVectorContainerPython
            return _itkVectorContainerPython
        try:
            _mod = imp.load_module('_itkVectorContainerPython', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _itkVectorContainerPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkVectorContainerPython
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkVectorPython
import vnl_vectorPython
import stdcomplexPython
import pyBasePython
import vnl_matrixPython
import vnl_vector_refPython
import itkFixedArrayPython
import itkMatrixPython
import itkCovariantVectorPython
import vnl_matrix_fixedPython
import itkPointPython
import itkContinuousIndexPython
import itkIndexPython
import itkOffsetPython
import itkSizePython
import ITKCommonBasePython

def itkDataObjectDecoratorVCUCD_New():
  return itkDataObjectDecoratorVCUCD.New()


def itkVectorContainerUCUC_New():
  return itkVectorContainerUCUC.New()


def itkVectorContainerUCUI_New():
  return itkVectorContainerUCUI.New()


def itkVectorContainerUCUL_New():
  return itkVectorContainerUCUL.New()


def itkVectorContainerUIUC_New():
  return itkVectorContainerUIUC.New()


def itkVectorContainerUIUI_New():
  return itkVectorContainerUIUI.New()


def itkVectorContainerUIUL_New():
  return itkVectorContainerUIUL.New()


def itkVectorContainerULUC_New():
  return itkVectorContainerULUC.New()


def itkVectorContainerULUI_New():
  return itkVectorContainerULUI.New()


def itkVectorContainerULUL_New():
  return itkVectorContainerULUL.New()


def itkVectorContainerULSUL_New():
  return itkVectorContainerULSUL.New()


def itkVectorContainerUIVUC1_New():
  return itkVectorContainerUIVUC1.New()


def itkVectorContainerUCSS_New():
  return itkVectorContainerUCSS.New()


def itkVectorContainerUICID3_New():
  return itkVectorContainerUICID3.New()


def itkVectorContainerUCO3_New():
  return itkVectorContainerUCO3.New()


def itkVectorContainerUICID2_New():
  return itkVectorContainerUICID2.New()


def itkVectorContainerUCO2_New():
  return itkVectorContainerUCO2.New()


def itkVectorContainerULMD33_New():
  return itkVectorContainerULMD33.New()


def itkVectorContainerULPD3_New():
  return itkVectorContainerULPD3.New()


def itkVectorContainerULVD3_New():
  return itkVectorContainerULVD3.New()


def itkVectorContainerULMF33_New():
  return itkVectorContainerULMF33.New()


def itkVectorContainerULPF3_New():
  return itkVectorContainerULPF3.New()


def itkVectorContainerULVF3_New():
  return itkVectorContainerULVF3.New()


def itkVectorContainerULMD22_New():
  return itkVectorContainerULMD22.New()


def itkVectorContainerULPD2_New():
  return itkVectorContainerULPD2.New()


def itkVectorContainerULVD2_New():
  return itkVectorContainerULVD2.New()


def itkVectorContainerULMF22_New():
  return itkVectorContainerULMF22.New()


def itkVectorContainerULPF2_New():
  return itkVectorContainerULPF2.New()


def itkVectorContainerULVF2_New():
  return itkVectorContainerULVF2.New()


def itkVectorContainerUCD_New():
  return itkVectorContainerUCD.New()


def itkVectorContainerULD_New():
  return itkVectorContainerULD.New()


def itkVectorContainerUCF_New():
  return itkVectorContainerUCF.New()


def itkVectorContainerULF_New():
  return itkVectorContainerULF.New()

class itkDataObjectDecoratorVCUCD(ITKCommonBasePython.itkDataObject):
    """Proxy of C++ itkDataObjectDecoratorVCUCD class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkDataObjectDecoratorVCUCD_Pointer"""
        return _itkVectorContainerPython.itkDataObjectDecoratorVCUCD___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkDataObjectDecoratorVCUCD self) -> itkDataObjectDecoratorVCUCD_Pointer"""
        return _itkVectorContainerPython.itkDataObjectDecoratorVCUCD_Clone(self)


    def Set(self, val):
        """Set(itkDataObjectDecoratorVCUCD self, itkVectorContainerUCD val)"""
        return _itkVectorContainerPython.itkDataObjectDecoratorVCUCD_Set(self, val)


    def Get(self):
        """Get(itkDataObjectDecoratorVCUCD self) -> itkVectorContainerUCD"""
        return _itkVectorContainerPython.itkDataObjectDecoratorVCUCD_Get(self)


    def GetModifiable(self):
        """GetModifiable(itkDataObjectDecoratorVCUCD self) -> itkVectorContainerUCD"""
        return _itkVectorContainerPython.itkDataObjectDecoratorVCUCD_GetModifiable(self)


    def Graft(self, *args):
        """
        Graft(itkDataObjectDecoratorVCUCD self, itkDataObject arg0)
        Graft(itkDataObjectDecoratorVCUCD self, itkDataObjectDecoratorVCUCD decorator)
        """
        return _itkVectorContainerPython.itkDataObjectDecoratorVCUCD_Graft(self, *args)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkDataObjectDecoratorVCUCD

    def cast(obj):
        """cast(itkLightObject obj) -> itkDataObjectDecoratorVCUCD"""
        return _itkVectorContainerPython.itkDataObjectDecoratorVCUCD_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkDataObjectDecoratorVCUCD self) -> itkDataObjectDecoratorVCUCD"""
        return _itkVectorContainerPython.itkDataObjectDecoratorVCUCD_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkDataObjectDecoratorVCUCD

        Create a new object of the class itkDataObjectDecoratorVCUCD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDataObjectDecoratorVCUCD.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDataObjectDecoratorVCUCD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDataObjectDecoratorVCUCD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDataObjectDecoratorVCUCD.Clone = new_instancemethod(_itkVectorContainerPython.itkDataObjectDecoratorVCUCD_Clone, None, itkDataObjectDecoratorVCUCD)
itkDataObjectDecoratorVCUCD.Set = new_instancemethod(_itkVectorContainerPython.itkDataObjectDecoratorVCUCD_Set, None, itkDataObjectDecoratorVCUCD)
itkDataObjectDecoratorVCUCD.Get = new_instancemethod(_itkVectorContainerPython.itkDataObjectDecoratorVCUCD_Get, None, itkDataObjectDecoratorVCUCD)
itkDataObjectDecoratorVCUCD.GetModifiable = new_instancemethod(_itkVectorContainerPython.itkDataObjectDecoratorVCUCD_GetModifiable, None, itkDataObjectDecoratorVCUCD)
itkDataObjectDecoratorVCUCD.Graft = new_instancemethod(_itkVectorContainerPython.itkDataObjectDecoratorVCUCD_Graft, None, itkDataObjectDecoratorVCUCD)
itkDataObjectDecoratorVCUCD.GetPointer = new_instancemethod(_itkVectorContainerPython.itkDataObjectDecoratorVCUCD_GetPointer, None, itkDataObjectDecoratorVCUCD)
itkDataObjectDecoratorVCUCD_swigregister = _itkVectorContainerPython.itkDataObjectDecoratorVCUCD_swigregister
itkDataObjectDecoratorVCUCD_swigregister(itkDataObjectDecoratorVCUCD)

def itkDataObjectDecoratorVCUCD___New_orig__():
    """itkDataObjectDecoratorVCUCD___New_orig__() -> itkDataObjectDecoratorVCUCD_Pointer"""
    return _itkVectorContainerPython.itkDataObjectDecoratorVCUCD___New_orig__()

def itkDataObjectDecoratorVCUCD_cast(obj):
    """itkDataObjectDecoratorVCUCD_cast(itkLightObject obj) -> itkDataObjectDecoratorVCUCD"""
    return _itkVectorContainerPython.itkDataObjectDecoratorVCUCD_cast(obj)

class itkVectorContainerUCD(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkVectorContainerUCD class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVectorContainerUCD_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUCD___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVectorContainerUCD self) -> itkVectorContainerUCD_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUCD_Clone(self)


    def CastToSTLContainer(self):
        """CastToSTLContainer(itkVectorContainerUCD self) -> vectorD"""
        return _itkVectorContainerPython.itkVectorContainerUCD_CastToSTLContainer(self)


    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(itkVectorContainerUCD self) -> vectorD"""
        return _itkVectorContainerPython.itkVectorContainerUCD_CastToSTLConstContainer(self)


    def ElementAt(self, *args):
        """
        ElementAt(itkVectorContainerUCD self, unsigned char arg0) -> double
        ElementAt(itkVectorContainerUCD self, unsigned char arg0) -> double const &
        """
        return _itkVectorContainerPython.itkVectorContainerUCD_ElementAt(self, *args)


    def CreateElementAt(self, arg0):
        """CreateElementAt(itkVectorContainerUCD self, unsigned char arg0) -> double &"""
        return _itkVectorContainerPython.itkVectorContainerUCD_CreateElementAt(self, arg0)


    def GetElement(self, arg0):
        """GetElement(itkVectorContainerUCD self, unsigned char arg0) -> double"""
        return _itkVectorContainerPython.itkVectorContainerUCD_GetElement(self, arg0)


    def SetElement(self, arg0, arg1):
        """SetElement(itkVectorContainerUCD self, unsigned char arg0, double arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUCD_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0, arg1):
        """InsertElement(itkVectorContainerUCD self, unsigned char arg0, double arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUCD_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0):
        """IndexExists(itkVectorContainerUCD self, unsigned char arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUCD_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0, arg1):
        """GetElementIfIndexExists(itkVectorContainerUCD self, unsigned char arg0, double * arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUCD_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0):
        """CreateIndex(itkVectorContainerUCD self, unsigned char arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUCD_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0):
        """DeleteIndex(itkVectorContainerUCD self, unsigned char arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUCD_DeleteIndex(self, arg0)


    def Size(self):
        """Size(itkVectorContainerUCD self) -> unsigned char"""
        return _itkVectorContainerPython.itkVectorContainerUCD_Size(self)


    def Reserve(self, arg0):
        """Reserve(itkVectorContainerUCD self, unsigned char arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUCD_Reserve(self, arg0)


    def Squeeze(self):
        """Squeeze(itkVectorContainerUCD self)"""
        return _itkVectorContainerPython.itkVectorContainerUCD_Squeeze(self)


    def Initialize(self):
        """Initialize(itkVectorContainerUCD self)"""
        return _itkVectorContainerPython.itkVectorContainerUCD_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerUCD

    def cast(obj):
        """cast(itkLightObject obj) -> itkVectorContainerUCD"""
        return _itkVectorContainerPython.itkVectorContainerUCD_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkVectorContainerUCD self) -> itkVectorContainerUCD"""
        return _itkVectorContainerPython.itkVectorContainerUCD_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkVectorContainerUCD

        Create a new object of the class itkVectorContainerUCD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerUCD.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorContainerUCD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerUCD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerUCD.Clone = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCD_Clone, None, itkVectorContainerUCD)
itkVectorContainerUCD.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCD_CastToSTLContainer, None, itkVectorContainerUCD)
itkVectorContainerUCD.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCD_CastToSTLConstContainer, None, itkVectorContainerUCD)
itkVectorContainerUCD.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCD_ElementAt, None, itkVectorContainerUCD)
itkVectorContainerUCD.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCD_CreateElementAt, None, itkVectorContainerUCD)
itkVectorContainerUCD.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCD_GetElement, None, itkVectorContainerUCD)
itkVectorContainerUCD.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCD_SetElement, None, itkVectorContainerUCD)
itkVectorContainerUCD.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCD_InsertElement, None, itkVectorContainerUCD)
itkVectorContainerUCD.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCD_IndexExists, None, itkVectorContainerUCD)
itkVectorContainerUCD.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCD_GetElementIfIndexExists, None, itkVectorContainerUCD)
itkVectorContainerUCD.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCD_CreateIndex, None, itkVectorContainerUCD)
itkVectorContainerUCD.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCD_DeleteIndex, None, itkVectorContainerUCD)
itkVectorContainerUCD.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCD_Size, None, itkVectorContainerUCD)
itkVectorContainerUCD.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCD_Reserve, None, itkVectorContainerUCD)
itkVectorContainerUCD.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCD_Squeeze, None, itkVectorContainerUCD)
itkVectorContainerUCD.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCD_Initialize, None, itkVectorContainerUCD)
itkVectorContainerUCD.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCD_GetPointer, None, itkVectorContainerUCD)
itkVectorContainerUCD_swigregister = _itkVectorContainerPython.itkVectorContainerUCD_swigregister
itkVectorContainerUCD_swigregister(itkVectorContainerUCD)

def itkVectorContainerUCD___New_orig__():
    """itkVectorContainerUCD___New_orig__() -> itkVectorContainerUCD_Pointer"""
    return _itkVectorContainerPython.itkVectorContainerUCD___New_orig__()

def itkVectorContainerUCD_cast(obj):
    """itkVectorContainerUCD_cast(itkLightObject obj) -> itkVectorContainerUCD"""
    return _itkVectorContainerPython.itkVectorContainerUCD_cast(obj)

class itkVectorContainerUCF(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkVectorContainerUCF class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVectorContainerUCF_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUCF___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVectorContainerUCF self) -> itkVectorContainerUCF_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUCF_Clone(self)


    def CastToSTLContainer(self):
        """CastToSTLContainer(itkVectorContainerUCF self) -> vectorF"""
        return _itkVectorContainerPython.itkVectorContainerUCF_CastToSTLContainer(self)


    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(itkVectorContainerUCF self) -> vectorF"""
        return _itkVectorContainerPython.itkVectorContainerUCF_CastToSTLConstContainer(self)


    def ElementAt(self, *args):
        """
        ElementAt(itkVectorContainerUCF self, unsigned char arg0) -> float
        ElementAt(itkVectorContainerUCF self, unsigned char arg0) -> float const &
        """
        return _itkVectorContainerPython.itkVectorContainerUCF_ElementAt(self, *args)


    def CreateElementAt(self, arg0):
        """CreateElementAt(itkVectorContainerUCF self, unsigned char arg0) -> float &"""
        return _itkVectorContainerPython.itkVectorContainerUCF_CreateElementAt(self, arg0)


    def GetElement(self, arg0):
        """GetElement(itkVectorContainerUCF self, unsigned char arg0) -> float"""
        return _itkVectorContainerPython.itkVectorContainerUCF_GetElement(self, arg0)


    def SetElement(self, arg0, arg1):
        """SetElement(itkVectorContainerUCF self, unsigned char arg0, float arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUCF_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0, arg1):
        """InsertElement(itkVectorContainerUCF self, unsigned char arg0, float arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUCF_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0):
        """IndexExists(itkVectorContainerUCF self, unsigned char arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUCF_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0, arg1):
        """GetElementIfIndexExists(itkVectorContainerUCF self, unsigned char arg0, float * arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUCF_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0):
        """CreateIndex(itkVectorContainerUCF self, unsigned char arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUCF_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0):
        """DeleteIndex(itkVectorContainerUCF self, unsigned char arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUCF_DeleteIndex(self, arg0)


    def Size(self):
        """Size(itkVectorContainerUCF self) -> unsigned char"""
        return _itkVectorContainerPython.itkVectorContainerUCF_Size(self)


    def Reserve(self, arg0):
        """Reserve(itkVectorContainerUCF self, unsigned char arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUCF_Reserve(self, arg0)


    def Squeeze(self):
        """Squeeze(itkVectorContainerUCF self)"""
        return _itkVectorContainerPython.itkVectorContainerUCF_Squeeze(self)


    def Initialize(self):
        """Initialize(itkVectorContainerUCF self)"""
        return _itkVectorContainerPython.itkVectorContainerUCF_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerUCF

    def cast(obj):
        """cast(itkLightObject obj) -> itkVectorContainerUCF"""
        return _itkVectorContainerPython.itkVectorContainerUCF_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkVectorContainerUCF self) -> itkVectorContainerUCF"""
        return _itkVectorContainerPython.itkVectorContainerUCF_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkVectorContainerUCF

        Create a new object of the class itkVectorContainerUCF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerUCF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorContainerUCF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerUCF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerUCF.Clone = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCF_Clone, None, itkVectorContainerUCF)
itkVectorContainerUCF.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCF_CastToSTLContainer, None, itkVectorContainerUCF)
itkVectorContainerUCF.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCF_CastToSTLConstContainer, None, itkVectorContainerUCF)
itkVectorContainerUCF.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCF_ElementAt, None, itkVectorContainerUCF)
itkVectorContainerUCF.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCF_CreateElementAt, None, itkVectorContainerUCF)
itkVectorContainerUCF.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCF_GetElement, None, itkVectorContainerUCF)
itkVectorContainerUCF.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCF_SetElement, None, itkVectorContainerUCF)
itkVectorContainerUCF.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCF_InsertElement, None, itkVectorContainerUCF)
itkVectorContainerUCF.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCF_IndexExists, None, itkVectorContainerUCF)
itkVectorContainerUCF.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCF_GetElementIfIndexExists, None, itkVectorContainerUCF)
itkVectorContainerUCF.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCF_CreateIndex, None, itkVectorContainerUCF)
itkVectorContainerUCF.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCF_DeleteIndex, None, itkVectorContainerUCF)
itkVectorContainerUCF.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCF_Size, None, itkVectorContainerUCF)
itkVectorContainerUCF.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCF_Reserve, None, itkVectorContainerUCF)
itkVectorContainerUCF.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCF_Squeeze, None, itkVectorContainerUCF)
itkVectorContainerUCF.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCF_Initialize, None, itkVectorContainerUCF)
itkVectorContainerUCF.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCF_GetPointer, None, itkVectorContainerUCF)
itkVectorContainerUCF_swigregister = _itkVectorContainerPython.itkVectorContainerUCF_swigregister
itkVectorContainerUCF_swigregister(itkVectorContainerUCF)

def itkVectorContainerUCF___New_orig__():
    """itkVectorContainerUCF___New_orig__() -> itkVectorContainerUCF_Pointer"""
    return _itkVectorContainerPython.itkVectorContainerUCF___New_orig__()

def itkVectorContainerUCF_cast(obj):
    """itkVectorContainerUCF_cast(itkLightObject obj) -> itkVectorContainerUCF"""
    return _itkVectorContainerPython.itkVectorContainerUCF_cast(obj)

class itkVectorContainerUCO2(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkVectorContainerUCO2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVectorContainerUCO2_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUCO2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVectorContainerUCO2 self) -> itkVectorContainerUCO2_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUCO2_Clone(self)


    def CastToSTLContainer(self):
        """CastToSTLContainer(itkVectorContainerUCO2 self) -> std::vector< itkOffset2,std::allocator< itkOffset2 > > &"""
        return _itkVectorContainerPython.itkVectorContainerUCO2_CastToSTLContainer(self)


    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(itkVectorContainerUCO2 self) -> std::vector< itkOffset2,std::allocator< itkOffset2 > > const &"""
        return _itkVectorContainerPython.itkVectorContainerUCO2_CastToSTLConstContainer(self)


    def ElementAt(self, *args):
        """
        ElementAt(itkVectorContainerUCO2 self, unsigned char arg0) -> itkOffset2
        ElementAt(itkVectorContainerUCO2 self, unsigned char arg0) -> itkOffset2
        """
        return _itkVectorContainerPython.itkVectorContainerUCO2_ElementAt(self, *args)


    def CreateElementAt(self, arg0):
        """CreateElementAt(itkVectorContainerUCO2 self, unsigned char arg0) -> itkOffset2"""
        return _itkVectorContainerPython.itkVectorContainerUCO2_CreateElementAt(self, arg0)


    def GetElement(self, arg0):
        """GetElement(itkVectorContainerUCO2 self, unsigned char arg0) -> itkOffset2"""
        return _itkVectorContainerPython.itkVectorContainerUCO2_GetElement(self, arg0)


    def SetElement(self, arg0, arg1):
        """SetElement(itkVectorContainerUCO2 self, unsigned char arg0, itkOffset2 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUCO2_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0, arg1):
        """InsertElement(itkVectorContainerUCO2 self, unsigned char arg0, itkOffset2 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUCO2_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0):
        """IndexExists(itkVectorContainerUCO2 self, unsigned char arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUCO2_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0, arg1):
        """GetElementIfIndexExists(itkVectorContainerUCO2 self, unsigned char arg0, itkOffset2 arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUCO2_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0):
        """CreateIndex(itkVectorContainerUCO2 self, unsigned char arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUCO2_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0):
        """DeleteIndex(itkVectorContainerUCO2 self, unsigned char arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUCO2_DeleteIndex(self, arg0)


    def Size(self):
        """Size(itkVectorContainerUCO2 self) -> unsigned char"""
        return _itkVectorContainerPython.itkVectorContainerUCO2_Size(self)


    def Reserve(self, arg0):
        """Reserve(itkVectorContainerUCO2 self, unsigned char arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUCO2_Reserve(self, arg0)


    def Squeeze(self):
        """Squeeze(itkVectorContainerUCO2 self)"""
        return _itkVectorContainerPython.itkVectorContainerUCO2_Squeeze(self)


    def Initialize(self):
        """Initialize(itkVectorContainerUCO2 self)"""
        return _itkVectorContainerPython.itkVectorContainerUCO2_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerUCO2

    def cast(obj):
        """cast(itkLightObject obj) -> itkVectorContainerUCO2"""
        return _itkVectorContainerPython.itkVectorContainerUCO2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkVectorContainerUCO2 self) -> itkVectorContainerUCO2"""
        return _itkVectorContainerPython.itkVectorContainerUCO2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkVectorContainerUCO2

        Create a new object of the class itkVectorContainerUCO2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerUCO2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorContainerUCO2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerUCO2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerUCO2.Clone = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO2_Clone, None, itkVectorContainerUCO2)
itkVectorContainerUCO2.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO2_CastToSTLContainer, None, itkVectorContainerUCO2)
itkVectorContainerUCO2.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO2_CastToSTLConstContainer, None, itkVectorContainerUCO2)
itkVectorContainerUCO2.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO2_ElementAt, None, itkVectorContainerUCO2)
itkVectorContainerUCO2.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO2_CreateElementAt, None, itkVectorContainerUCO2)
itkVectorContainerUCO2.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO2_GetElement, None, itkVectorContainerUCO2)
itkVectorContainerUCO2.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO2_SetElement, None, itkVectorContainerUCO2)
itkVectorContainerUCO2.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO2_InsertElement, None, itkVectorContainerUCO2)
itkVectorContainerUCO2.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO2_IndexExists, None, itkVectorContainerUCO2)
itkVectorContainerUCO2.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO2_GetElementIfIndexExists, None, itkVectorContainerUCO2)
itkVectorContainerUCO2.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO2_CreateIndex, None, itkVectorContainerUCO2)
itkVectorContainerUCO2.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO2_DeleteIndex, None, itkVectorContainerUCO2)
itkVectorContainerUCO2.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO2_Size, None, itkVectorContainerUCO2)
itkVectorContainerUCO2.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO2_Reserve, None, itkVectorContainerUCO2)
itkVectorContainerUCO2.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO2_Squeeze, None, itkVectorContainerUCO2)
itkVectorContainerUCO2.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO2_Initialize, None, itkVectorContainerUCO2)
itkVectorContainerUCO2.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO2_GetPointer, None, itkVectorContainerUCO2)
itkVectorContainerUCO2_swigregister = _itkVectorContainerPython.itkVectorContainerUCO2_swigregister
itkVectorContainerUCO2_swigregister(itkVectorContainerUCO2)

def itkVectorContainerUCO2___New_orig__():
    """itkVectorContainerUCO2___New_orig__() -> itkVectorContainerUCO2_Pointer"""
    return _itkVectorContainerPython.itkVectorContainerUCO2___New_orig__()

def itkVectorContainerUCO2_cast(obj):
    """itkVectorContainerUCO2_cast(itkLightObject obj) -> itkVectorContainerUCO2"""
    return _itkVectorContainerPython.itkVectorContainerUCO2_cast(obj)

class itkVectorContainerUCO3(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkVectorContainerUCO3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVectorContainerUCO3_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUCO3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVectorContainerUCO3 self) -> itkVectorContainerUCO3_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUCO3_Clone(self)


    def CastToSTLContainer(self):
        """CastToSTLContainer(itkVectorContainerUCO3 self) -> std::vector< itkOffset3,std::allocator< itkOffset3 > > &"""
        return _itkVectorContainerPython.itkVectorContainerUCO3_CastToSTLContainer(self)


    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(itkVectorContainerUCO3 self) -> std::vector< itkOffset3,std::allocator< itkOffset3 > > const &"""
        return _itkVectorContainerPython.itkVectorContainerUCO3_CastToSTLConstContainer(self)


    def ElementAt(self, *args):
        """
        ElementAt(itkVectorContainerUCO3 self, unsigned char arg0) -> itkOffset3
        ElementAt(itkVectorContainerUCO3 self, unsigned char arg0) -> itkOffset3
        """
        return _itkVectorContainerPython.itkVectorContainerUCO3_ElementAt(self, *args)


    def CreateElementAt(self, arg0):
        """CreateElementAt(itkVectorContainerUCO3 self, unsigned char arg0) -> itkOffset3"""
        return _itkVectorContainerPython.itkVectorContainerUCO3_CreateElementAt(self, arg0)


    def GetElement(self, arg0):
        """GetElement(itkVectorContainerUCO3 self, unsigned char arg0) -> itkOffset3"""
        return _itkVectorContainerPython.itkVectorContainerUCO3_GetElement(self, arg0)


    def SetElement(self, arg0, arg1):
        """SetElement(itkVectorContainerUCO3 self, unsigned char arg0, itkOffset3 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUCO3_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0, arg1):
        """InsertElement(itkVectorContainerUCO3 self, unsigned char arg0, itkOffset3 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUCO3_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0):
        """IndexExists(itkVectorContainerUCO3 self, unsigned char arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUCO3_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0, arg1):
        """GetElementIfIndexExists(itkVectorContainerUCO3 self, unsigned char arg0, itkOffset3 arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUCO3_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0):
        """CreateIndex(itkVectorContainerUCO3 self, unsigned char arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUCO3_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0):
        """DeleteIndex(itkVectorContainerUCO3 self, unsigned char arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUCO3_DeleteIndex(self, arg0)


    def Size(self):
        """Size(itkVectorContainerUCO3 self) -> unsigned char"""
        return _itkVectorContainerPython.itkVectorContainerUCO3_Size(self)


    def Reserve(self, arg0):
        """Reserve(itkVectorContainerUCO3 self, unsigned char arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUCO3_Reserve(self, arg0)


    def Squeeze(self):
        """Squeeze(itkVectorContainerUCO3 self)"""
        return _itkVectorContainerPython.itkVectorContainerUCO3_Squeeze(self)


    def Initialize(self):
        """Initialize(itkVectorContainerUCO3 self)"""
        return _itkVectorContainerPython.itkVectorContainerUCO3_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerUCO3

    def cast(obj):
        """cast(itkLightObject obj) -> itkVectorContainerUCO3"""
        return _itkVectorContainerPython.itkVectorContainerUCO3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkVectorContainerUCO3 self) -> itkVectorContainerUCO3"""
        return _itkVectorContainerPython.itkVectorContainerUCO3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkVectorContainerUCO3

        Create a new object of the class itkVectorContainerUCO3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerUCO3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorContainerUCO3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerUCO3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerUCO3.Clone = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO3_Clone, None, itkVectorContainerUCO3)
itkVectorContainerUCO3.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO3_CastToSTLContainer, None, itkVectorContainerUCO3)
itkVectorContainerUCO3.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO3_CastToSTLConstContainer, None, itkVectorContainerUCO3)
itkVectorContainerUCO3.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO3_ElementAt, None, itkVectorContainerUCO3)
itkVectorContainerUCO3.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO3_CreateElementAt, None, itkVectorContainerUCO3)
itkVectorContainerUCO3.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO3_GetElement, None, itkVectorContainerUCO3)
itkVectorContainerUCO3.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO3_SetElement, None, itkVectorContainerUCO3)
itkVectorContainerUCO3.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO3_InsertElement, None, itkVectorContainerUCO3)
itkVectorContainerUCO3.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO3_IndexExists, None, itkVectorContainerUCO3)
itkVectorContainerUCO3.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO3_GetElementIfIndexExists, None, itkVectorContainerUCO3)
itkVectorContainerUCO3.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO3_CreateIndex, None, itkVectorContainerUCO3)
itkVectorContainerUCO3.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO3_DeleteIndex, None, itkVectorContainerUCO3)
itkVectorContainerUCO3.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO3_Size, None, itkVectorContainerUCO3)
itkVectorContainerUCO3.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO3_Reserve, None, itkVectorContainerUCO3)
itkVectorContainerUCO3.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO3_Squeeze, None, itkVectorContainerUCO3)
itkVectorContainerUCO3.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO3_Initialize, None, itkVectorContainerUCO3)
itkVectorContainerUCO3.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO3_GetPointer, None, itkVectorContainerUCO3)
itkVectorContainerUCO3_swigregister = _itkVectorContainerPython.itkVectorContainerUCO3_swigregister
itkVectorContainerUCO3_swigregister(itkVectorContainerUCO3)

def itkVectorContainerUCO3___New_orig__():
    """itkVectorContainerUCO3___New_orig__() -> itkVectorContainerUCO3_Pointer"""
    return _itkVectorContainerPython.itkVectorContainerUCO3___New_orig__()

def itkVectorContainerUCO3_cast(obj):
    """itkVectorContainerUCO3_cast(itkLightObject obj) -> itkVectorContainerUCO3"""
    return _itkVectorContainerPython.itkVectorContainerUCO3_cast(obj)

class itkVectorContainerUCSS(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkVectorContainerUCSS class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVectorContainerUCSS_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUCSS___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVectorContainerUCSS self) -> itkVectorContainerUCSS_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUCSS_Clone(self)


    def CastToSTLContainer(self):
        """CastToSTLContainer(itkVectorContainerUCSS self) -> vectorSS"""
        return _itkVectorContainerPython.itkVectorContainerUCSS_CastToSTLContainer(self)


    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(itkVectorContainerUCSS self) -> vectorSS"""
        return _itkVectorContainerPython.itkVectorContainerUCSS_CastToSTLConstContainer(self)


    def ElementAt(self, *args):
        """
        ElementAt(itkVectorContainerUCSS self, unsigned char arg0) -> short
        ElementAt(itkVectorContainerUCSS self, unsigned char arg0) -> short const &
        """
        return _itkVectorContainerPython.itkVectorContainerUCSS_ElementAt(self, *args)


    def CreateElementAt(self, arg0):
        """CreateElementAt(itkVectorContainerUCSS self, unsigned char arg0) -> short &"""
        return _itkVectorContainerPython.itkVectorContainerUCSS_CreateElementAt(self, arg0)


    def GetElement(self, arg0):
        """GetElement(itkVectorContainerUCSS self, unsigned char arg0) -> short"""
        return _itkVectorContainerPython.itkVectorContainerUCSS_GetElement(self, arg0)


    def SetElement(self, arg0, arg1):
        """SetElement(itkVectorContainerUCSS self, unsigned char arg0, short arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUCSS_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0, arg1):
        """InsertElement(itkVectorContainerUCSS self, unsigned char arg0, short arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUCSS_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0):
        """IndexExists(itkVectorContainerUCSS self, unsigned char arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUCSS_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0, arg1):
        """GetElementIfIndexExists(itkVectorContainerUCSS self, unsigned char arg0, short * arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUCSS_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0):
        """CreateIndex(itkVectorContainerUCSS self, unsigned char arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUCSS_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0):
        """DeleteIndex(itkVectorContainerUCSS self, unsigned char arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUCSS_DeleteIndex(self, arg0)


    def Size(self):
        """Size(itkVectorContainerUCSS self) -> unsigned char"""
        return _itkVectorContainerPython.itkVectorContainerUCSS_Size(self)


    def Reserve(self, arg0):
        """Reserve(itkVectorContainerUCSS self, unsigned char arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUCSS_Reserve(self, arg0)


    def Squeeze(self):
        """Squeeze(itkVectorContainerUCSS self)"""
        return _itkVectorContainerPython.itkVectorContainerUCSS_Squeeze(self)


    def Initialize(self):
        """Initialize(itkVectorContainerUCSS self)"""
        return _itkVectorContainerPython.itkVectorContainerUCSS_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerUCSS

    def cast(obj):
        """cast(itkLightObject obj) -> itkVectorContainerUCSS"""
        return _itkVectorContainerPython.itkVectorContainerUCSS_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkVectorContainerUCSS self) -> itkVectorContainerUCSS"""
        return _itkVectorContainerPython.itkVectorContainerUCSS_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkVectorContainerUCSS

        Create a new object of the class itkVectorContainerUCSS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerUCSS.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorContainerUCSS.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerUCSS.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerUCSS.Clone = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCSS_Clone, None, itkVectorContainerUCSS)
itkVectorContainerUCSS.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCSS_CastToSTLContainer, None, itkVectorContainerUCSS)
itkVectorContainerUCSS.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCSS_CastToSTLConstContainer, None, itkVectorContainerUCSS)
itkVectorContainerUCSS.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCSS_ElementAt, None, itkVectorContainerUCSS)
itkVectorContainerUCSS.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCSS_CreateElementAt, None, itkVectorContainerUCSS)
itkVectorContainerUCSS.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCSS_GetElement, None, itkVectorContainerUCSS)
itkVectorContainerUCSS.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCSS_SetElement, None, itkVectorContainerUCSS)
itkVectorContainerUCSS.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCSS_InsertElement, None, itkVectorContainerUCSS)
itkVectorContainerUCSS.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCSS_IndexExists, None, itkVectorContainerUCSS)
itkVectorContainerUCSS.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCSS_GetElementIfIndexExists, None, itkVectorContainerUCSS)
itkVectorContainerUCSS.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCSS_CreateIndex, None, itkVectorContainerUCSS)
itkVectorContainerUCSS.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCSS_DeleteIndex, None, itkVectorContainerUCSS)
itkVectorContainerUCSS.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCSS_Size, None, itkVectorContainerUCSS)
itkVectorContainerUCSS.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCSS_Reserve, None, itkVectorContainerUCSS)
itkVectorContainerUCSS.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCSS_Squeeze, None, itkVectorContainerUCSS)
itkVectorContainerUCSS.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCSS_Initialize, None, itkVectorContainerUCSS)
itkVectorContainerUCSS.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCSS_GetPointer, None, itkVectorContainerUCSS)
itkVectorContainerUCSS_swigregister = _itkVectorContainerPython.itkVectorContainerUCSS_swigregister
itkVectorContainerUCSS_swigregister(itkVectorContainerUCSS)

def itkVectorContainerUCSS___New_orig__():
    """itkVectorContainerUCSS___New_orig__() -> itkVectorContainerUCSS_Pointer"""
    return _itkVectorContainerPython.itkVectorContainerUCSS___New_orig__()

def itkVectorContainerUCSS_cast(obj):
    """itkVectorContainerUCSS_cast(itkLightObject obj) -> itkVectorContainerUCSS"""
    return _itkVectorContainerPython.itkVectorContainerUCSS_cast(obj)

class itkVectorContainerUCUC(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkVectorContainerUCUC class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVectorContainerUCUC_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUCUC___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVectorContainerUCUC self) -> itkVectorContainerUCUC_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUCUC_Clone(self)


    def CastToSTLContainer(self):
        """CastToSTLContainer(itkVectorContainerUCUC self) -> vectorUC"""
        return _itkVectorContainerPython.itkVectorContainerUCUC_CastToSTLContainer(self)


    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(itkVectorContainerUCUC self) -> vectorUC"""
        return _itkVectorContainerPython.itkVectorContainerUCUC_CastToSTLConstContainer(self)


    def ElementAt(self, *args):
        """
        ElementAt(itkVectorContainerUCUC self, unsigned char arg0) -> unsigned char
        ElementAt(itkVectorContainerUCUC self, unsigned char arg0) -> unsigned char const &
        """
        return _itkVectorContainerPython.itkVectorContainerUCUC_ElementAt(self, *args)


    def CreateElementAt(self, arg0):
        """CreateElementAt(itkVectorContainerUCUC self, unsigned char arg0) -> unsigned char &"""
        return _itkVectorContainerPython.itkVectorContainerUCUC_CreateElementAt(self, arg0)


    def GetElement(self, arg0):
        """GetElement(itkVectorContainerUCUC self, unsigned char arg0) -> unsigned char"""
        return _itkVectorContainerPython.itkVectorContainerUCUC_GetElement(self, arg0)


    def SetElement(self, arg0, arg1):
        """SetElement(itkVectorContainerUCUC self, unsigned char arg0, unsigned char arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUCUC_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0, arg1):
        """InsertElement(itkVectorContainerUCUC self, unsigned char arg0, unsigned char arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUCUC_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0):
        """IndexExists(itkVectorContainerUCUC self, unsigned char arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUCUC_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0, arg1):
        """GetElementIfIndexExists(itkVectorContainerUCUC self, unsigned char arg0, unsigned char * arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUCUC_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0):
        """CreateIndex(itkVectorContainerUCUC self, unsigned char arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUCUC_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0):
        """DeleteIndex(itkVectorContainerUCUC self, unsigned char arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUCUC_DeleteIndex(self, arg0)


    def Size(self):
        """Size(itkVectorContainerUCUC self) -> unsigned char"""
        return _itkVectorContainerPython.itkVectorContainerUCUC_Size(self)


    def Reserve(self, arg0):
        """Reserve(itkVectorContainerUCUC self, unsigned char arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUCUC_Reserve(self, arg0)


    def Squeeze(self):
        """Squeeze(itkVectorContainerUCUC self)"""
        return _itkVectorContainerPython.itkVectorContainerUCUC_Squeeze(self)


    def Initialize(self):
        """Initialize(itkVectorContainerUCUC self)"""
        return _itkVectorContainerPython.itkVectorContainerUCUC_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerUCUC

    def cast(obj):
        """cast(itkLightObject obj) -> itkVectorContainerUCUC"""
        return _itkVectorContainerPython.itkVectorContainerUCUC_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkVectorContainerUCUC self) -> itkVectorContainerUCUC"""
        return _itkVectorContainerPython.itkVectorContainerUCUC_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkVectorContainerUCUC

        Create a new object of the class itkVectorContainerUCUC and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerUCUC.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorContainerUCUC.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerUCUC.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerUCUC.Clone = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUC_Clone, None, itkVectorContainerUCUC)
itkVectorContainerUCUC.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUC_CastToSTLContainer, None, itkVectorContainerUCUC)
itkVectorContainerUCUC.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUC_CastToSTLConstContainer, None, itkVectorContainerUCUC)
itkVectorContainerUCUC.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUC_ElementAt, None, itkVectorContainerUCUC)
itkVectorContainerUCUC.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUC_CreateElementAt, None, itkVectorContainerUCUC)
itkVectorContainerUCUC.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUC_GetElement, None, itkVectorContainerUCUC)
itkVectorContainerUCUC.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUC_SetElement, None, itkVectorContainerUCUC)
itkVectorContainerUCUC.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUC_InsertElement, None, itkVectorContainerUCUC)
itkVectorContainerUCUC.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUC_IndexExists, None, itkVectorContainerUCUC)
itkVectorContainerUCUC.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUC_GetElementIfIndexExists, None, itkVectorContainerUCUC)
itkVectorContainerUCUC.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUC_CreateIndex, None, itkVectorContainerUCUC)
itkVectorContainerUCUC.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUC_DeleteIndex, None, itkVectorContainerUCUC)
itkVectorContainerUCUC.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUC_Size, None, itkVectorContainerUCUC)
itkVectorContainerUCUC.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUC_Reserve, None, itkVectorContainerUCUC)
itkVectorContainerUCUC.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUC_Squeeze, None, itkVectorContainerUCUC)
itkVectorContainerUCUC.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUC_Initialize, None, itkVectorContainerUCUC)
itkVectorContainerUCUC.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUC_GetPointer, None, itkVectorContainerUCUC)
itkVectorContainerUCUC_swigregister = _itkVectorContainerPython.itkVectorContainerUCUC_swigregister
itkVectorContainerUCUC_swigregister(itkVectorContainerUCUC)

def itkVectorContainerUCUC___New_orig__():
    """itkVectorContainerUCUC___New_orig__() -> itkVectorContainerUCUC_Pointer"""
    return _itkVectorContainerPython.itkVectorContainerUCUC___New_orig__()

def itkVectorContainerUCUC_cast(obj):
    """itkVectorContainerUCUC_cast(itkLightObject obj) -> itkVectorContainerUCUC"""
    return _itkVectorContainerPython.itkVectorContainerUCUC_cast(obj)

class itkVectorContainerUCUI(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkVectorContainerUCUI class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVectorContainerUCUI_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUCUI___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVectorContainerUCUI self) -> itkVectorContainerUCUI_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUCUI_Clone(self)


    def CastToSTLContainer(self):
        """CastToSTLContainer(itkVectorContainerUCUI self) -> std::vector< unsigned int,std::allocator< unsigned int > > &"""
        return _itkVectorContainerPython.itkVectorContainerUCUI_CastToSTLContainer(self)


    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(itkVectorContainerUCUI self) -> std::vector< unsigned int,std::allocator< unsigned int > > const &"""
        return _itkVectorContainerPython.itkVectorContainerUCUI_CastToSTLConstContainer(self)


    def ElementAt(self, *args):
        """
        ElementAt(itkVectorContainerUCUI self, unsigned char arg0) -> unsigned int
        ElementAt(itkVectorContainerUCUI self, unsigned char arg0) -> unsigned int const &
        """
        return _itkVectorContainerPython.itkVectorContainerUCUI_ElementAt(self, *args)


    def CreateElementAt(self, arg0):
        """CreateElementAt(itkVectorContainerUCUI self, unsigned char arg0) -> unsigned int &"""
        return _itkVectorContainerPython.itkVectorContainerUCUI_CreateElementAt(self, arg0)


    def GetElement(self, arg0):
        """GetElement(itkVectorContainerUCUI self, unsigned char arg0) -> unsigned int"""
        return _itkVectorContainerPython.itkVectorContainerUCUI_GetElement(self, arg0)


    def SetElement(self, arg0, arg1):
        """SetElement(itkVectorContainerUCUI self, unsigned char arg0, unsigned int arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUCUI_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0, arg1):
        """InsertElement(itkVectorContainerUCUI self, unsigned char arg0, unsigned int arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUCUI_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0):
        """IndexExists(itkVectorContainerUCUI self, unsigned char arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUCUI_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0, arg1):
        """GetElementIfIndexExists(itkVectorContainerUCUI self, unsigned char arg0, unsigned int * arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUCUI_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0):
        """CreateIndex(itkVectorContainerUCUI self, unsigned char arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUCUI_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0):
        """DeleteIndex(itkVectorContainerUCUI self, unsigned char arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUCUI_DeleteIndex(self, arg0)


    def Size(self):
        """Size(itkVectorContainerUCUI self) -> unsigned char"""
        return _itkVectorContainerPython.itkVectorContainerUCUI_Size(self)


    def Reserve(self, arg0):
        """Reserve(itkVectorContainerUCUI self, unsigned char arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUCUI_Reserve(self, arg0)


    def Squeeze(self):
        """Squeeze(itkVectorContainerUCUI self)"""
        return _itkVectorContainerPython.itkVectorContainerUCUI_Squeeze(self)


    def Initialize(self):
        """Initialize(itkVectorContainerUCUI self)"""
        return _itkVectorContainerPython.itkVectorContainerUCUI_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerUCUI

    def cast(obj):
        """cast(itkLightObject obj) -> itkVectorContainerUCUI"""
        return _itkVectorContainerPython.itkVectorContainerUCUI_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkVectorContainerUCUI self) -> itkVectorContainerUCUI"""
        return _itkVectorContainerPython.itkVectorContainerUCUI_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkVectorContainerUCUI

        Create a new object of the class itkVectorContainerUCUI and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerUCUI.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorContainerUCUI.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerUCUI.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerUCUI.Clone = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUI_Clone, None, itkVectorContainerUCUI)
itkVectorContainerUCUI.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUI_CastToSTLContainer, None, itkVectorContainerUCUI)
itkVectorContainerUCUI.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUI_CastToSTLConstContainer, None, itkVectorContainerUCUI)
itkVectorContainerUCUI.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUI_ElementAt, None, itkVectorContainerUCUI)
itkVectorContainerUCUI.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUI_CreateElementAt, None, itkVectorContainerUCUI)
itkVectorContainerUCUI.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUI_GetElement, None, itkVectorContainerUCUI)
itkVectorContainerUCUI.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUI_SetElement, None, itkVectorContainerUCUI)
itkVectorContainerUCUI.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUI_InsertElement, None, itkVectorContainerUCUI)
itkVectorContainerUCUI.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUI_IndexExists, None, itkVectorContainerUCUI)
itkVectorContainerUCUI.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUI_GetElementIfIndexExists, None, itkVectorContainerUCUI)
itkVectorContainerUCUI.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUI_CreateIndex, None, itkVectorContainerUCUI)
itkVectorContainerUCUI.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUI_DeleteIndex, None, itkVectorContainerUCUI)
itkVectorContainerUCUI.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUI_Size, None, itkVectorContainerUCUI)
itkVectorContainerUCUI.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUI_Reserve, None, itkVectorContainerUCUI)
itkVectorContainerUCUI.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUI_Squeeze, None, itkVectorContainerUCUI)
itkVectorContainerUCUI.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUI_Initialize, None, itkVectorContainerUCUI)
itkVectorContainerUCUI.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUI_GetPointer, None, itkVectorContainerUCUI)
itkVectorContainerUCUI_swigregister = _itkVectorContainerPython.itkVectorContainerUCUI_swigregister
itkVectorContainerUCUI_swigregister(itkVectorContainerUCUI)

def itkVectorContainerUCUI___New_orig__():
    """itkVectorContainerUCUI___New_orig__() -> itkVectorContainerUCUI_Pointer"""
    return _itkVectorContainerPython.itkVectorContainerUCUI___New_orig__()

def itkVectorContainerUCUI_cast(obj):
    """itkVectorContainerUCUI_cast(itkLightObject obj) -> itkVectorContainerUCUI"""
    return _itkVectorContainerPython.itkVectorContainerUCUI_cast(obj)

class itkVectorContainerUCUL(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkVectorContainerUCUL class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVectorContainerUCUL_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUCUL___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVectorContainerUCUL self) -> itkVectorContainerUCUL_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUCUL_Clone(self)


    def CastToSTLContainer(self):
        """CastToSTLContainer(itkVectorContainerUCUL self) -> vectorUL"""
        return _itkVectorContainerPython.itkVectorContainerUCUL_CastToSTLContainer(self)


    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(itkVectorContainerUCUL self) -> vectorUL"""
        return _itkVectorContainerPython.itkVectorContainerUCUL_CastToSTLConstContainer(self)


    def ElementAt(self, *args):
        """
        ElementAt(itkVectorContainerUCUL self, unsigned char arg0) -> unsigned long
        ElementAt(itkVectorContainerUCUL self, unsigned char arg0) -> unsigned long const &
        """
        return _itkVectorContainerPython.itkVectorContainerUCUL_ElementAt(self, *args)


    def CreateElementAt(self, arg0):
        """CreateElementAt(itkVectorContainerUCUL self, unsigned char arg0) -> unsigned long &"""
        return _itkVectorContainerPython.itkVectorContainerUCUL_CreateElementAt(self, arg0)


    def GetElement(self, arg0):
        """GetElement(itkVectorContainerUCUL self, unsigned char arg0) -> unsigned long"""
        return _itkVectorContainerPython.itkVectorContainerUCUL_GetElement(self, arg0)


    def SetElement(self, arg0, arg1):
        """SetElement(itkVectorContainerUCUL self, unsigned char arg0, unsigned long arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUCUL_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0, arg1):
        """InsertElement(itkVectorContainerUCUL self, unsigned char arg0, unsigned long arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUCUL_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0):
        """IndexExists(itkVectorContainerUCUL self, unsigned char arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUCUL_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0, arg1):
        """GetElementIfIndexExists(itkVectorContainerUCUL self, unsigned char arg0, unsigned long * arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUCUL_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0):
        """CreateIndex(itkVectorContainerUCUL self, unsigned char arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUCUL_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0):
        """DeleteIndex(itkVectorContainerUCUL self, unsigned char arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUCUL_DeleteIndex(self, arg0)


    def Size(self):
        """Size(itkVectorContainerUCUL self) -> unsigned char"""
        return _itkVectorContainerPython.itkVectorContainerUCUL_Size(self)


    def Reserve(self, arg0):
        """Reserve(itkVectorContainerUCUL self, unsigned char arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUCUL_Reserve(self, arg0)


    def Squeeze(self):
        """Squeeze(itkVectorContainerUCUL self)"""
        return _itkVectorContainerPython.itkVectorContainerUCUL_Squeeze(self)


    def Initialize(self):
        """Initialize(itkVectorContainerUCUL self)"""
        return _itkVectorContainerPython.itkVectorContainerUCUL_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerUCUL

    def cast(obj):
        """cast(itkLightObject obj) -> itkVectorContainerUCUL"""
        return _itkVectorContainerPython.itkVectorContainerUCUL_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkVectorContainerUCUL self) -> itkVectorContainerUCUL"""
        return _itkVectorContainerPython.itkVectorContainerUCUL_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkVectorContainerUCUL

        Create a new object of the class itkVectorContainerUCUL and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerUCUL.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorContainerUCUL.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerUCUL.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerUCUL.Clone = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUL_Clone, None, itkVectorContainerUCUL)
itkVectorContainerUCUL.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUL_CastToSTLContainer, None, itkVectorContainerUCUL)
itkVectorContainerUCUL.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUL_CastToSTLConstContainer, None, itkVectorContainerUCUL)
itkVectorContainerUCUL.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUL_ElementAt, None, itkVectorContainerUCUL)
itkVectorContainerUCUL.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUL_CreateElementAt, None, itkVectorContainerUCUL)
itkVectorContainerUCUL.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUL_GetElement, None, itkVectorContainerUCUL)
itkVectorContainerUCUL.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUL_SetElement, None, itkVectorContainerUCUL)
itkVectorContainerUCUL.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUL_InsertElement, None, itkVectorContainerUCUL)
itkVectorContainerUCUL.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUL_IndexExists, None, itkVectorContainerUCUL)
itkVectorContainerUCUL.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUL_GetElementIfIndexExists, None, itkVectorContainerUCUL)
itkVectorContainerUCUL.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUL_CreateIndex, None, itkVectorContainerUCUL)
itkVectorContainerUCUL.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUL_DeleteIndex, None, itkVectorContainerUCUL)
itkVectorContainerUCUL.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUL_Size, None, itkVectorContainerUCUL)
itkVectorContainerUCUL.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUL_Reserve, None, itkVectorContainerUCUL)
itkVectorContainerUCUL.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUL_Squeeze, None, itkVectorContainerUCUL)
itkVectorContainerUCUL.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUL_Initialize, None, itkVectorContainerUCUL)
itkVectorContainerUCUL.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCUL_GetPointer, None, itkVectorContainerUCUL)
itkVectorContainerUCUL_swigregister = _itkVectorContainerPython.itkVectorContainerUCUL_swigregister
itkVectorContainerUCUL_swigregister(itkVectorContainerUCUL)

def itkVectorContainerUCUL___New_orig__():
    """itkVectorContainerUCUL___New_orig__() -> itkVectorContainerUCUL_Pointer"""
    return _itkVectorContainerPython.itkVectorContainerUCUL___New_orig__()

def itkVectorContainerUCUL_cast(obj):
    """itkVectorContainerUCUL_cast(itkLightObject obj) -> itkVectorContainerUCUL"""
    return _itkVectorContainerPython.itkVectorContainerUCUL_cast(obj)

class itkVectorContainerUICID2(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkVectorContainerUICID2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVectorContainerUICID2_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUICID2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVectorContainerUICID2 self) -> itkVectorContainerUICID2_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUICID2_Clone(self)


    def CastToSTLContainer(self):
        """CastToSTLContainer(itkVectorContainerUICID2 self) -> std::vector< itkContinuousIndexD2,std::allocator< itkContinuousIndexD2 > > &"""
        return _itkVectorContainerPython.itkVectorContainerUICID2_CastToSTLContainer(self)


    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(itkVectorContainerUICID2 self) -> std::vector< itkContinuousIndexD2,std::allocator< itkContinuousIndexD2 > > const &"""
        return _itkVectorContainerPython.itkVectorContainerUICID2_CastToSTLConstContainer(self)


    def ElementAt(self, *args):
        """
        ElementAt(itkVectorContainerUICID2 self, unsigned int arg0) -> itkContinuousIndexD2
        ElementAt(itkVectorContainerUICID2 self, unsigned int arg0) -> itkContinuousIndexD2
        """
        return _itkVectorContainerPython.itkVectorContainerUICID2_ElementAt(self, *args)


    def CreateElementAt(self, arg0):
        """CreateElementAt(itkVectorContainerUICID2 self, unsigned int arg0) -> itkContinuousIndexD2"""
        return _itkVectorContainerPython.itkVectorContainerUICID2_CreateElementAt(self, arg0)


    def GetElement(self, arg0):
        """GetElement(itkVectorContainerUICID2 self, unsigned int arg0) -> itkContinuousIndexD2"""
        return _itkVectorContainerPython.itkVectorContainerUICID2_GetElement(self, arg0)


    def SetElement(self, arg0, arg1):
        """SetElement(itkVectorContainerUICID2 self, unsigned int arg0, itkContinuousIndexD2 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUICID2_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0, arg1):
        """InsertElement(itkVectorContainerUICID2 self, unsigned int arg0, itkContinuousIndexD2 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUICID2_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0):
        """IndexExists(itkVectorContainerUICID2 self, unsigned int arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUICID2_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0, arg1):
        """GetElementIfIndexExists(itkVectorContainerUICID2 self, unsigned int arg0, itkContinuousIndexD2 arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUICID2_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0):
        """CreateIndex(itkVectorContainerUICID2 self, unsigned int arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUICID2_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0):
        """DeleteIndex(itkVectorContainerUICID2 self, unsigned int arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUICID2_DeleteIndex(self, arg0)


    def Size(self):
        """Size(itkVectorContainerUICID2 self) -> unsigned int"""
        return _itkVectorContainerPython.itkVectorContainerUICID2_Size(self)


    def Reserve(self, arg0):
        """Reserve(itkVectorContainerUICID2 self, unsigned int arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUICID2_Reserve(self, arg0)


    def Squeeze(self):
        """Squeeze(itkVectorContainerUICID2 self)"""
        return _itkVectorContainerPython.itkVectorContainerUICID2_Squeeze(self)


    def Initialize(self):
        """Initialize(itkVectorContainerUICID2 self)"""
        return _itkVectorContainerPython.itkVectorContainerUICID2_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerUICID2

    def cast(obj):
        """cast(itkLightObject obj) -> itkVectorContainerUICID2"""
        return _itkVectorContainerPython.itkVectorContainerUICID2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkVectorContainerUICID2 self) -> itkVectorContainerUICID2"""
        return _itkVectorContainerPython.itkVectorContainerUICID2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkVectorContainerUICID2

        Create a new object of the class itkVectorContainerUICID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerUICID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorContainerUICID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerUICID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerUICID2.Clone = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID2_Clone, None, itkVectorContainerUICID2)
itkVectorContainerUICID2.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID2_CastToSTLContainer, None, itkVectorContainerUICID2)
itkVectorContainerUICID2.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID2_CastToSTLConstContainer, None, itkVectorContainerUICID2)
itkVectorContainerUICID2.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID2_ElementAt, None, itkVectorContainerUICID2)
itkVectorContainerUICID2.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID2_CreateElementAt, None, itkVectorContainerUICID2)
itkVectorContainerUICID2.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID2_GetElement, None, itkVectorContainerUICID2)
itkVectorContainerUICID2.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID2_SetElement, None, itkVectorContainerUICID2)
itkVectorContainerUICID2.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID2_InsertElement, None, itkVectorContainerUICID2)
itkVectorContainerUICID2.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID2_IndexExists, None, itkVectorContainerUICID2)
itkVectorContainerUICID2.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID2_GetElementIfIndexExists, None, itkVectorContainerUICID2)
itkVectorContainerUICID2.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID2_CreateIndex, None, itkVectorContainerUICID2)
itkVectorContainerUICID2.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID2_DeleteIndex, None, itkVectorContainerUICID2)
itkVectorContainerUICID2.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID2_Size, None, itkVectorContainerUICID2)
itkVectorContainerUICID2.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID2_Reserve, None, itkVectorContainerUICID2)
itkVectorContainerUICID2.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID2_Squeeze, None, itkVectorContainerUICID2)
itkVectorContainerUICID2.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID2_Initialize, None, itkVectorContainerUICID2)
itkVectorContainerUICID2.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID2_GetPointer, None, itkVectorContainerUICID2)
itkVectorContainerUICID2_swigregister = _itkVectorContainerPython.itkVectorContainerUICID2_swigregister
itkVectorContainerUICID2_swigregister(itkVectorContainerUICID2)

def itkVectorContainerUICID2___New_orig__():
    """itkVectorContainerUICID2___New_orig__() -> itkVectorContainerUICID2_Pointer"""
    return _itkVectorContainerPython.itkVectorContainerUICID2___New_orig__()

def itkVectorContainerUICID2_cast(obj):
    """itkVectorContainerUICID2_cast(itkLightObject obj) -> itkVectorContainerUICID2"""
    return _itkVectorContainerPython.itkVectorContainerUICID2_cast(obj)

class itkVectorContainerUICID3(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkVectorContainerUICID3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVectorContainerUICID3_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUICID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVectorContainerUICID3 self) -> itkVectorContainerUICID3_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUICID3_Clone(self)


    def CastToSTLContainer(self):
        """CastToSTLContainer(itkVectorContainerUICID3 self) -> std::vector< itkContinuousIndexD3,std::allocator< itkContinuousIndexD3 > > &"""
        return _itkVectorContainerPython.itkVectorContainerUICID3_CastToSTLContainer(self)


    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(itkVectorContainerUICID3 self) -> std::vector< itkContinuousIndexD3,std::allocator< itkContinuousIndexD3 > > const &"""
        return _itkVectorContainerPython.itkVectorContainerUICID3_CastToSTLConstContainer(self)


    def ElementAt(self, *args):
        """
        ElementAt(itkVectorContainerUICID3 self, unsigned int arg0) -> itkContinuousIndexD3
        ElementAt(itkVectorContainerUICID3 self, unsigned int arg0) -> itkContinuousIndexD3
        """
        return _itkVectorContainerPython.itkVectorContainerUICID3_ElementAt(self, *args)


    def CreateElementAt(self, arg0):
        """CreateElementAt(itkVectorContainerUICID3 self, unsigned int arg0) -> itkContinuousIndexD3"""
        return _itkVectorContainerPython.itkVectorContainerUICID3_CreateElementAt(self, arg0)


    def GetElement(self, arg0):
        """GetElement(itkVectorContainerUICID3 self, unsigned int arg0) -> itkContinuousIndexD3"""
        return _itkVectorContainerPython.itkVectorContainerUICID3_GetElement(self, arg0)


    def SetElement(self, arg0, arg1):
        """SetElement(itkVectorContainerUICID3 self, unsigned int arg0, itkContinuousIndexD3 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUICID3_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0, arg1):
        """InsertElement(itkVectorContainerUICID3 self, unsigned int arg0, itkContinuousIndexD3 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUICID3_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0):
        """IndexExists(itkVectorContainerUICID3 self, unsigned int arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUICID3_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0, arg1):
        """GetElementIfIndexExists(itkVectorContainerUICID3 self, unsigned int arg0, itkContinuousIndexD3 arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUICID3_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0):
        """CreateIndex(itkVectorContainerUICID3 self, unsigned int arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUICID3_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0):
        """DeleteIndex(itkVectorContainerUICID3 self, unsigned int arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUICID3_DeleteIndex(self, arg0)


    def Size(self):
        """Size(itkVectorContainerUICID3 self) -> unsigned int"""
        return _itkVectorContainerPython.itkVectorContainerUICID3_Size(self)


    def Reserve(self, arg0):
        """Reserve(itkVectorContainerUICID3 self, unsigned int arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUICID3_Reserve(self, arg0)


    def Squeeze(self):
        """Squeeze(itkVectorContainerUICID3 self)"""
        return _itkVectorContainerPython.itkVectorContainerUICID3_Squeeze(self)


    def Initialize(self):
        """Initialize(itkVectorContainerUICID3 self)"""
        return _itkVectorContainerPython.itkVectorContainerUICID3_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerUICID3

    def cast(obj):
        """cast(itkLightObject obj) -> itkVectorContainerUICID3"""
        return _itkVectorContainerPython.itkVectorContainerUICID3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkVectorContainerUICID3 self) -> itkVectorContainerUICID3"""
        return _itkVectorContainerPython.itkVectorContainerUICID3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkVectorContainerUICID3

        Create a new object of the class itkVectorContainerUICID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerUICID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorContainerUICID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerUICID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerUICID3.Clone = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID3_Clone, None, itkVectorContainerUICID3)
itkVectorContainerUICID3.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID3_CastToSTLContainer, None, itkVectorContainerUICID3)
itkVectorContainerUICID3.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID3_CastToSTLConstContainer, None, itkVectorContainerUICID3)
itkVectorContainerUICID3.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID3_ElementAt, None, itkVectorContainerUICID3)
itkVectorContainerUICID3.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID3_CreateElementAt, None, itkVectorContainerUICID3)
itkVectorContainerUICID3.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID3_GetElement, None, itkVectorContainerUICID3)
itkVectorContainerUICID3.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID3_SetElement, None, itkVectorContainerUICID3)
itkVectorContainerUICID3.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID3_InsertElement, None, itkVectorContainerUICID3)
itkVectorContainerUICID3.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID3_IndexExists, None, itkVectorContainerUICID3)
itkVectorContainerUICID3.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID3_GetElementIfIndexExists, None, itkVectorContainerUICID3)
itkVectorContainerUICID3.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID3_CreateIndex, None, itkVectorContainerUICID3)
itkVectorContainerUICID3.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID3_DeleteIndex, None, itkVectorContainerUICID3)
itkVectorContainerUICID3.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID3_Size, None, itkVectorContainerUICID3)
itkVectorContainerUICID3.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID3_Reserve, None, itkVectorContainerUICID3)
itkVectorContainerUICID3.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID3_Squeeze, None, itkVectorContainerUICID3)
itkVectorContainerUICID3.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID3_Initialize, None, itkVectorContainerUICID3)
itkVectorContainerUICID3.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID3_GetPointer, None, itkVectorContainerUICID3)
itkVectorContainerUICID3_swigregister = _itkVectorContainerPython.itkVectorContainerUICID3_swigregister
itkVectorContainerUICID3_swigregister(itkVectorContainerUICID3)

def itkVectorContainerUICID3___New_orig__():
    """itkVectorContainerUICID3___New_orig__() -> itkVectorContainerUICID3_Pointer"""
    return _itkVectorContainerPython.itkVectorContainerUICID3___New_orig__()

def itkVectorContainerUICID3_cast(obj):
    """itkVectorContainerUICID3_cast(itkLightObject obj) -> itkVectorContainerUICID3"""
    return _itkVectorContainerPython.itkVectorContainerUICID3_cast(obj)

class itkVectorContainerUIUC(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkVectorContainerUIUC class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVectorContainerUIUC_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUIUC___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVectorContainerUIUC self) -> itkVectorContainerUIUC_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUIUC_Clone(self)


    def CastToSTLContainer(self):
        """CastToSTLContainer(itkVectorContainerUIUC self) -> vectorUC"""
        return _itkVectorContainerPython.itkVectorContainerUIUC_CastToSTLContainer(self)


    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(itkVectorContainerUIUC self) -> vectorUC"""
        return _itkVectorContainerPython.itkVectorContainerUIUC_CastToSTLConstContainer(self)


    def ElementAt(self, *args):
        """
        ElementAt(itkVectorContainerUIUC self, unsigned int arg0) -> unsigned char
        ElementAt(itkVectorContainerUIUC self, unsigned int arg0) -> unsigned char const &
        """
        return _itkVectorContainerPython.itkVectorContainerUIUC_ElementAt(self, *args)


    def CreateElementAt(self, arg0):
        """CreateElementAt(itkVectorContainerUIUC self, unsigned int arg0) -> unsigned char &"""
        return _itkVectorContainerPython.itkVectorContainerUIUC_CreateElementAt(self, arg0)


    def GetElement(self, arg0):
        """GetElement(itkVectorContainerUIUC self, unsigned int arg0) -> unsigned char"""
        return _itkVectorContainerPython.itkVectorContainerUIUC_GetElement(self, arg0)


    def SetElement(self, arg0, arg1):
        """SetElement(itkVectorContainerUIUC self, unsigned int arg0, unsigned char arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUIUC_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0, arg1):
        """InsertElement(itkVectorContainerUIUC self, unsigned int arg0, unsigned char arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUIUC_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0):
        """IndexExists(itkVectorContainerUIUC self, unsigned int arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUIUC_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0, arg1):
        """GetElementIfIndexExists(itkVectorContainerUIUC self, unsigned int arg0, unsigned char * arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUIUC_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0):
        """CreateIndex(itkVectorContainerUIUC self, unsigned int arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUIUC_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0):
        """DeleteIndex(itkVectorContainerUIUC self, unsigned int arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUIUC_DeleteIndex(self, arg0)


    def Size(self):
        """Size(itkVectorContainerUIUC self) -> unsigned int"""
        return _itkVectorContainerPython.itkVectorContainerUIUC_Size(self)


    def Reserve(self, arg0):
        """Reserve(itkVectorContainerUIUC self, unsigned int arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUIUC_Reserve(self, arg0)


    def Squeeze(self):
        """Squeeze(itkVectorContainerUIUC self)"""
        return _itkVectorContainerPython.itkVectorContainerUIUC_Squeeze(self)


    def Initialize(self):
        """Initialize(itkVectorContainerUIUC self)"""
        return _itkVectorContainerPython.itkVectorContainerUIUC_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerUIUC

    def cast(obj):
        """cast(itkLightObject obj) -> itkVectorContainerUIUC"""
        return _itkVectorContainerPython.itkVectorContainerUIUC_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkVectorContainerUIUC self) -> itkVectorContainerUIUC"""
        return _itkVectorContainerPython.itkVectorContainerUIUC_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkVectorContainerUIUC

        Create a new object of the class itkVectorContainerUIUC and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerUIUC.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorContainerUIUC.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerUIUC.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerUIUC.Clone = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUC_Clone, None, itkVectorContainerUIUC)
itkVectorContainerUIUC.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUC_CastToSTLContainer, None, itkVectorContainerUIUC)
itkVectorContainerUIUC.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUC_CastToSTLConstContainer, None, itkVectorContainerUIUC)
itkVectorContainerUIUC.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUC_ElementAt, None, itkVectorContainerUIUC)
itkVectorContainerUIUC.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUC_CreateElementAt, None, itkVectorContainerUIUC)
itkVectorContainerUIUC.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUC_GetElement, None, itkVectorContainerUIUC)
itkVectorContainerUIUC.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUC_SetElement, None, itkVectorContainerUIUC)
itkVectorContainerUIUC.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUC_InsertElement, None, itkVectorContainerUIUC)
itkVectorContainerUIUC.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUC_IndexExists, None, itkVectorContainerUIUC)
itkVectorContainerUIUC.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUC_GetElementIfIndexExists, None, itkVectorContainerUIUC)
itkVectorContainerUIUC.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUC_CreateIndex, None, itkVectorContainerUIUC)
itkVectorContainerUIUC.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUC_DeleteIndex, None, itkVectorContainerUIUC)
itkVectorContainerUIUC.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUC_Size, None, itkVectorContainerUIUC)
itkVectorContainerUIUC.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUC_Reserve, None, itkVectorContainerUIUC)
itkVectorContainerUIUC.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUC_Squeeze, None, itkVectorContainerUIUC)
itkVectorContainerUIUC.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUC_Initialize, None, itkVectorContainerUIUC)
itkVectorContainerUIUC.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUC_GetPointer, None, itkVectorContainerUIUC)
itkVectorContainerUIUC_swigregister = _itkVectorContainerPython.itkVectorContainerUIUC_swigregister
itkVectorContainerUIUC_swigregister(itkVectorContainerUIUC)

def itkVectorContainerUIUC___New_orig__():
    """itkVectorContainerUIUC___New_orig__() -> itkVectorContainerUIUC_Pointer"""
    return _itkVectorContainerPython.itkVectorContainerUIUC___New_orig__()

def itkVectorContainerUIUC_cast(obj):
    """itkVectorContainerUIUC_cast(itkLightObject obj) -> itkVectorContainerUIUC"""
    return _itkVectorContainerPython.itkVectorContainerUIUC_cast(obj)

class itkVectorContainerUIUI(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkVectorContainerUIUI class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVectorContainerUIUI_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUIUI___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVectorContainerUIUI self) -> itkVectorContainerUIUI_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUIUI_Clone(self)


    def CastToSTLContainer(self):
        """CastToSTLContainer(itkVectorContainerUIUI self) -> std::vector< unsigned int,std::allocator< unsigned int > > &"""
        return _itkVectorContainerPython.itkVectorContainerUIUI_CastToSTLContainer(self)


    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(itkVectorContainerUIUI self) -> std::vector< unsigned int,std::allocator< unsigned int > > const &"""
        return _itkVectorContainerPython.itkVectorContainerUIUI_CastToSTLConstContainer(self)


    def ElementAt(self, *args):
        """
        ElementAt(itkVectorContainerUIUI self, unsigned int arg0) -> unsigned int
        ElementAt(itkVectorContainerUIUI self, unsigned int arg0) -> unsigned int const &
        """
        return _itkVectorContainerPython.itkVectorContainerUIUI_ElementAt(self, *args)


    def CreateElementAt(self, arg0):
        """CreateElementAt(itkVectorContainerUIUI self, unsigned int arg0) -> unsigned int &"""
        return _itkVectorContainerPython.itkVectorContainerUIUI_CreateElementAt(self, arg0)


    def GetElement(self, arg0):
        """GetElement(itkVectorContainerUIUI self, unsigned int arg0) -> unsigned int"""
        return _itkVectorContainerPython.itkVectorContainerUIUI_GetElement(self, arg0)


    def SetElement(self, arg0, arg1):
        """SetElement(itkVectorContainerUIUI self, unsigned int arg0, unsigned int arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUIUI_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0, arg1):
        """InsertElement(itkVectorContainerUIUI self, unsigned int arg0, unsigned int arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUIUI_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0):
        """IndexExists(itkVectorContainerUIUI self, unsigned int arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUIUI_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0, arg1):
        """GetElementIfIndexExists(itkVectorContainerUIUI self, unsigned int arg0, unsigned int * arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUIUI_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0):
        """CreateIndex(itkVectorContainerUIUI self, unsigned int arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUIUI_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0):
        """DeleteIndex(itkVectorContainerUIUI self, unsigned int arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUIUI_DeleteIndex(self, arg0)


    def Size(self):
        """Size(itkVectorContainerUIUI self) -> unsigned int"""
        return _itkVectorContainerPython.itkVectorContainerUIUI_Size(self)


    def Reserve(self, arg0):
        """Reserve(itkVectorContainerUIUI self, unsigned int arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUIUI_Reserve(self, arg0)


    def Squeeze(self):
        """Squeeze(itkVectorContainerUIUI self)"""
        return _itkVectorContainerPython.itkVectorContainerUIUI_Squeeze(self)


    def Initialize(self):
        """Initialize(itkVectorContainerUIUI self)"""
        return _itkVectorContainerPython.itkVectorContainerUIUI_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerUIUI

    def cast(obj):
        """cast(itkLightObject obj) -> itkVectorContainerUIUI"""
        return _itkVectorContainerPython.itkVectorContainerUIUI_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkVectorContainerUIUI self) -> itkVectorContainerUIUI"""
        return _itkVectorContainerPython.itkVectorContainerUIUI_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkVectorContainerUIUI

        Create a new object of the class itkVectorContainerUIUI and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerUIUI.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorContainerUIUI.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerUIUI.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerUIUI.Clone = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUI_Clone, None, itkVectorContainerUIUI)
itkVectorContainerUIUI.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUI_CastToSTLContainer, None, itkVectorContainerUIUI)
itkVectorContainerUIUI.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUI_CastToSTLConstContainer, None, itkVectorContainerUIUI)
itkVectorContainerUIUI.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUI_ElementAt, None, itkVectorContainerUIUI)
itkVectorContainerUIUI.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUI_CreateElementAt, None, itkVectorContainerUIUI)
itkVectorContainerUIUI.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUI_GetElement, None, itkVectorContainerUIUI)
itkVectorContainerUIUI.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUI_SetElement, None, itkVectorContainerUIUI)
itkVectorContainerUIUI.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUI_InsertElement, None, itkVectorContainerUIUI)
itkVectorContainerUIUI.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUI_IndexExists, None, itkVectorContainerUIUI)
itkVectorContainerUIUI.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUI_GetElementIfIndexExists, None, itkVectorContainerUIUI)
itkVectorContainerUIUI.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUI_CreateIndex, None, itkVectorContainerUIUI)
itkVectorContainerUIUI.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUI_DeleteIndex, None, itkVectorContainerUIUI)
itkVectorContainerUIUI.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUI_Size, None, itkVectorContainerUIUI)
itkVectorContainerUIUI.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUI_Reserve, None, itkVectorContainerUIUI)
itkVectorContainerUIUI.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUI_Squeeze, None, itkVectorContainerUIUI)
itkVectorContainerUIUI.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUI_Initialize, None, itkVectorContainerUIUI)
itkVectorContainerUIUI.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUI_GetPointer, None, itkVectorContainerUIUI)
itkVectorContainerUIUI_swigregister = _itkVectorContainerPython.itkVectorContainerUIUI_swigregister
itkVectorContainerUIUI_swigregister(itkVectorContainerUIUI)

def itkVectorContainerUIUI___New_orig__():
    """itkVectorContainerUIUI___New_orig__() -> itkVectorContainerUIUI_Pointer"""
    return _itkVectorContainerPython.itkVectorContainerUIUI___New_orig__()

def itkVectorContainerUIUI_cast(obj):
    """itkVectorContainerUIUI_cast(itkLightObject obj) -> itkVectorContainerUIUI"""
    return _itkVectorContainerPython.itkVectorContainerUIUI_cast(obj)

class itkVectorContainerUIUL(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkVectorContainerUIUL class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVectorContainerUIUL_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUIUL___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVectorContainerUIUL self) -> itkVectorContainerUIUL_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUIUL_Clone(self)


    def CastToSTLContainer(self):
        """CastToSTLContainer(itkVectorContainerUIUL self) -> vectorUL"""
        return _itkVectorContainerPython.itkVectorContainerUIUL_CastToSTLContainer(self)


    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(itkVectorContainerUIUL self) -> vectorUL"""
        return _itkVectorContainerPython.itkVectorContainerUIUL_CastToSTLConstContainer(self)


    def ElementAt(self, *args):
        """
        ElementAt(itkVectorContainerUIUL self, unsigned int arg0) -> unsigned long
        ElementAt(itkVectorContainerUIUL self, unsigned int arg0) -> unsigned long const &
        """
        return _itkVectorContainerPython.itkVectorContainerUIUL_ElementAt(self, *args)


    def CreateElementAt(self, arg0):
        """CreateElementAt(itkVectorContainerUIUL self, unsigned int arg0) -> unsigned long &"""
        return _itkVectorContainerPython.itkVectorContainerUIUL_CreateElementAt(self, arg0)


    def GetElement(self, arg0):
        """GetElement(itkVectorContainerUIUL self, unsigned int arg0) -> unsigned long"""
        return _itkVectorContainerPython.itkVectorContainerUIUL_GetElement(self, arg0)


    def SetElement(self, arg0, arg1):
        """SetElement(itkVectorContainerUIUL self, unsigned int arg0, unsigned long arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUIUL_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0, arg1):
        """InsertElement(itkVectorContainerUIUL self, unsigned int arg0, unsigned long arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUIUL_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0):
        """IndexExists(itkVectorContainerUIUL self, unsigned int arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUIUL_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0, arg1):
        """GetElementIfIndexExists(itkVectorContainerUIUL self, unsigned int arg0, unsigned long * arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUIUL_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0):
        """CreateIndex(itkVectorContainerUIUL self, unsigned int arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUIUL_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0):
        """DeleteIndex(itkVectorContainerUIUL self, unsigned int arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUIUL_DeleteIndex(self, arg0)


    def Size(self):
        """Size(itkVectorContainerUIUL self) -> unsigned int"""
        return _itkVectorContainerPython.itkVectorContainerUIUL_Size(self)


    def Reserve(self, arg0):
        """Reserve(itkVectorContainerUIUL self, unsigned int arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUIUL_Reserve(self, arg0)


    def Squeeze(self):
        """Squeeze(itkVectorContainerUIUL self)"""
        return _itkVectorContainerPython.itkVectorContainerUIUL_Squeeze(self)


    def Initialize(self):
        """Initialize(itkVectorContainerUIUL self)"""
        return _itkVectorContainerPython.itkVectorContainerUIUL_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerUIUL

    def cast(obj):
        """cast(itkLightObject obj) -> itkVectorContainerUIUL"""
        return _itkVectorContainerPython.itkVectorContainerUIUL_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkVectorContainerUIUL self) -> itkVectorContainerUIUL"""
        return _itkVectorContainerPython.itkVectorContainerUIUL_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkVectorContainerUIUL

        Create a new object of the class itkVectorContainerUIUL and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerUIUL.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorContainerUIUL.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerUIUL.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerUIUL.Clone = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUL_Clone, None, itkVectorContainerUIUL)
itkVectorContainerUIUL.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUL_CastToSTLContainer, None, itkVectorContainerUIUL)
itkVectorContainerUIUL.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUL_CastToSTLConstContainer, None, itkVectorContainerUIUL)
itkVectorContainerUIUL.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUL_ElementAt, None, itkVectorContainerUIUL)
itkVectorContainerUIUL.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUL_CreateElementAt, None, itkVectorContainerUIUL)
itkVectorContainerUIUL.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUL_GetElement, None, itkVectorContainerUIUL)
itkVectorContainerUIUL.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUL_SetElement, None, itkVectorContainerUIUL)
itkVectorContainerUIUL.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUL_InsertElement, None, itkVectorContainerUIUL)
itkVectorContainerUIUL.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUL_IndexExists, None, itkVectorContainerUIUL)
itkVectorContainerUIUL.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUL_GetElementIfIndexExists, None, itkVectorContainerUIUL)
itkVectorContainerUIUL.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUL_CreateIndex, None, itkVectorContainerUIUL)
itkVectorContainerUIUL.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUL_DeleteIndex, None, itkVectorContainerUIUL)
itkVectorContainerUIUL.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUL_Size, None, itkVectorContainerUIUL)
itkVectorContainerUIUL.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUL_Reserve, None, itkVectorContainerUIUL)
itkVectorContainerUIUL.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUL_Squeeze, None, itkVectorContainerUIUL)
itkVectorContainerUIUL.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUL_Initialize, None, itkVectorContainerUIUL)
itkVectorContainerUIUL.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIUL_GetPointer, None, itkVectorContainerUIUL)
itkVectorContainerUIUL_swigregister = _itkVectorContainerPython.itkVectorContainerUIUL_swigregister
itkVectorContainerUIUL_swigregister(itkVectorContainerUIUL)

def itkVectorContainerUIUL___New_orig__():
    """itkVectorContainerUIUL___New_orig__() -> itkVectorContainerUIUL_Pointer"""
    return _itkVectorContainerPython.itkVectorContainerUIUL___New_orig__()

def itkVectorContainerUIUL_cast(obj):
    """itkVectorContainerUIUL_cast(itkLightObject obj) -> itkVectorContainerUIUL"""
    return _itkVectorContainerPython.itkVectorContainerUIUL_cast(obj)

class itkVectorContainerUIVUC1(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkVectorContainerUIVUC1 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVectorContainerUIVUC1_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUIVUC1___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVectorContainerUIVUC1 self) -> itkVectorContainerUIVUC1_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerUIVUC1_Clone(self)


    def CastToSTLContainer(self):
        """CastToSTLContainer(itkVectorContainerUIVUC1 self) -> std::vector< itkVectorUC1,std::allocator< itkVectorUC1 > > &"""
        return _itkVectorContainerPython.itkVectorContainerUIVUC1_CastToSTLContainer(self)


    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(itkVectorContainerUIVUC1 self) -> std::vector< itkVectorUC1,std::allocator< itkVectorUC1 > > const &"""
        return _itkVectorContainerPython.itkVectorContainerUIVUC1_CastToSTLConstContainer(self)


    def ElementAt(self, *args):
        """
        ElementAt(itkVectorContainerUIVUC1 self, unsigned int arg0) -> itkVectorUC1
        ElementAt(itkVectorContainerUIVUC1 self, unsigned int arg0) -> itkVectorUC1
        """
        return _itkVectorContainerPython.itkVectorContainerUIVUC1_ElementAt(self, *args)


    def CreateElementAt(self, arg0):
        """CreateElementAt(itkVectorContainerUIVUC1 self, unsigned int arg0) -> itkVectorUC1"""
        return _itkVectorContainerPython.itkVectorContainerUIVUC1_CreateElementAt(self, arg0)


    def GetElement(self, arg0):
        """GetElement(itkVectorContainerUIVUC1 self, unsigned int arg0) -> itkVectorUC1"""
        return _itkVectorContainerPython.itkVectorContainerUIVUC1_GetElement(self, arg0)


    def SetElement(self, arg0, arg1):
        """SetElement(itkVectorContainerUIVUC1 self, unsigned int arg0, itkVectorUC1 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUIVUC1_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0, arg1):
        """InsertElement(itkVectorContainerUIVUC1 self, unsigned int arg0, itkVectorUC1 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUIVUC1_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0):
        """IndexExists(itkVectorContainerUIVUC1 self, unsigned int arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUIVUC1_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0, arg1):
        """GetElementIfIndexExists(itkVectorContainerUIVUC1 self, unsigned int arg0, itkVectorUC1 arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUIVUC1_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0):
        """CreateIndex(itkVectorContainerUIVUC1 self, unsigned int arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUIVUC1_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0):
        """DeleteIndex(itkVectorContainerUIVUC1 self, unsigned int arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUIVUC1_DeleteIndex(self, arg0)


    def Size(self):
        """Size(itkVectorContainerUIVUC1 self) -> unsigned int"""
        return _itkVectorContainerPython.itkVectorContainerUIVUC1_Size(self)


    def Reserve(self, arg0):
        """Reserve(itkVectorContainerUIVUC1 self, unsigned int arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUIVUC1_Reserve(self, arg0)


    def Squeeze(self):
        """Squeeze(itkVectorContainerUIVUC1 self)"""
        return _itkVectorContainerPython.itkVectorContainerUIVUC1_Squeeze(self)


    def Initialize(self):
        """Initialize(itkVectorContainerUIVUC1 self)"""
        return _itkVectorContainerPython.itkVectorContainerUIVUC1_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerUIVUC1

    def cast(obj):
        """cast(itkLightObject obj) -> itkVectorContainerUIVUC1"""
        return _itkVectorContainerPython.itkVectorContainerUIVUC1_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkVectorContainerUIVUC1 self) -> itkVectorContainerUIVUC1"""
        return _itkVectorContainerPython.itkVectorContainerUIVUC1_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkVectorContainerUIVUC1

        Create a new object of the class itkVectorContainerUIVUC1 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerUIVUC1.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorContainerUIVUC1.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerUIVUC1.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerUIVUC1.Clone = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIVUC1_Clone, None, itkVectorContainerUIVUC1)
itkVectorContainerUIVUC1.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIVUC1_CastToSTLContainer, None, itkVectorContainerUIVUC1)
itkVectorContainerUIVUC1.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIVUC1_CastToSTLConstContainer, None, itkVectorContainerUIVUC1)
itkVectorContainerUIVUC1.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIVUC1_ElementAt, None, itkVectorContainerUIVUC1)
itkVectorContainerUIVUC1.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIVUC1_CreateElementAt, None, itkVectorContainerUIVUC1)
itkVectorContainerUIVUC1.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIVUC1_GetElement, None, itkVectorContainerUIVUC1)
itkVectorContainerUIVUC1.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIVUC1_SetElement, None, itkVectorContainerUIVUC1)
itkVectorContainerUIVUC1.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIVUC1_InsertElement, None, itkVectorContainerUIVUC1)
itkVectorContainerUIVUC1.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIVUC1_IndexExists, None, itkVectorContainerUIVUC1)
itkVectorContainerUIVUC1.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIVUC1_GetElementIfIndexExists, None, itkVectorContainerUIVUC1)
itkVectorContainerUIVUC1.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIVUC1_CreateIndex, None, itkVectorContainerUIVUC1)
itkVectorContainerUIVUC1.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIVUC1_DeleteIndex, None, itkVectorContainerUIVUC1)
itkVectorContainerUIVUC1.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIVUC1_Size, None, itkVectorContainerUIVUC1)
itkVectorContainerUIVUC1.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIVUC1_Reserve, None, itkVectorContainerUIVUC1)
itkVectorContainerUIVUC1.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIVUC1_Squeeze, None, itkVectorContainerUIVUC1)
itkVectorContainerUIVUC1.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIVUC1_Initialize, None, itkVectorContainerUIVUC1)
itkVectorContainerUIVUC1.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIVUC1_GetPointer, None, itkVectorContainerUIVUC1)
itkVectorContainerUIVUC1_swigregister = _itkVectorContainerPython.itkVectorContainerUIVUC1_swigregister
itkVectorContainerUIVUC1_swigregister(itkVectorContainerUIVUC1)

def itkVectorContainerUIVUC1___New_orig__():
    """itkVectorContainerUIVUC1___New_orig__() -> itkVectorContainerUIVUC1_Pointer"""
    return _itkVectorContainerPython.itkVectorContainerUIVUC1___New_orig__()

def itkVectorContainerUIVUC1_cast(obj):
    """itkVectorContainerUIVUC1_cast(itkLightObject obj) -> itkVectorContainerUIVUC1"""
    return _itkVectorContainerPython.itkVectorContainerUIVUC1_cast(obj)

class itkVectorContainerULD(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkVectorContainerULD class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVectorContainerULD_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULD___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVectorContainerULD self) -> itkVectorContainerULD_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULD_Clone(self)


    def CastToSTLContainer(self):
        """CastToSTLContainer(itkVectorContainerULD self) -> vectorD"""
        return _itkVectorContainerPython.itkVectorContainerULD_CastToSTLContainer(self)


    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(itkVectorContainerULD self) -> vectorD"""
        return _itkVectorContainerPython.itkVectorContainerULD_CastToSTLConstContainer(self)


    def ElementAt(self, *args):
        """
        ElementAt(itkVectorContainerULD self, unsigned long arg0) -> double
        ElementAt(itkVectorContainerULD self, unsigned long arg0) -> double const &
        """
        return _itkVectorContainerPython.itkVectorContainerULD_ElementAt(self, *args)


    def CreateElementAt(self, arg0):
        """CreateElementAt(itkVectorContainerULD self, unsigned long arg0) -> double &"""
        return _itkVectorContainerPython.itkVectorContainerULD_CreateElementAt(self, arg0)


    def GetElement(self, arg0):
        """GetElement(itkVectorContainerULD self, unsigned long arg0) -> double"""
        return _itkVectorContainerPython.itkVectorContainerULD_GetElement(self, arg0)


    def SetElement(self, arg0, arg1):
        """SetElement(itkVectorContainerULD self, unsigned long arg0, double arg1)"""
        return _itkVectorContainerPython.itkVectorContainerULD_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0, arg1):
        """InsertElement(itkVectorContainerULD self, unsigned long arg0, double arg1)"""
        return _itkVectorContainerPython.itkVectorContainerULD_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0):
        """IndexExists(itkVectorContainerULD self, unsigned long arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerULD_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0, arg1):
        """GetElementIfIndexExists(itkVectorContainerULD self, unsigned long arg0, double * arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerULD_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0):
        """CreateIndex(itkVectorContainerULD self, unsigned long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULD_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0):
        """DeleteIndex(itkVectorContainerULD self, unsigned long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULD_DeleteIndex(self, arg0)


    def Size(self):
        """Size(itkVectorContainerULD self) -> unsigned long"""
        return _itkVectorContainerPython.itkVectorContainerULD_Size(self)


    def Reserve(self, arg0):
        """Reserve(itkVectorContainerULD self, unsigned long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULD_Reserve(self, arg0)


    def Squeeze(self):
        """Squeeze(itkVectorContainerULD self)"""
        return _itkVectorContainerPython.itkVectorContainerULD_Squeeze(self)


    def Initialize(self):
        """Initialize(itkVectorContainerULD self)"""
        return _itkVectorContainerPython.itkVectorContainerULD_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerULD

    def cast(obj):
        """cast(itkLightObject obj) -> itkVectorContainerULD"""
        return _itkVectorContainerPython.itkVectorContainerULD_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkVectorContainerULD self) -> itkVectorContainerULD"""
        return _itkVectorContainerPython.itkVectorContainerULD_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkVectorContainerULD

        Create a new object of the class itkVectorContainerULD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULD.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorContainerULD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerULD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerULD.Clone = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULD_Clone, None, itkVectorContainerULD)
itkVectorContainerULD.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULD_CastToSTLContainer, None, itkVectorContainerULD)
itkVectorContainerULD.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULD_CastToSTLConstContainer, None, itkVectorContainerULD)
itkVectorContainerULD.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULD_ElementAt, None, itkVectorContainerULD)
itkVectorContainerULD.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULD_CreateElementAt, None, itkVectorContainerULD)
itkVectorContainerULD.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULD_GetElement, None, itkVectorContainerULD)
itkVectorContainerULD.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULD_SetElement, None, itkVectorContainerULD)
itkVectorContainerULD.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULD_InsertElement, None, itkVectorContainerULD)
itkVectorContainerULD.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULD_IndexExists, None, itkVectorContainerULD)
itkVectorContainerULD.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULD_GetElementIfIndexExists, None, itkVectorContainerULD)
itkVectorContainerULD.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULD_CreateIndex, None, itkVectorContainerULD)
itkVectorContainerULD.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULD_DeleteIndex, None, itkVectorContainerULD)
itkVectorContainerULD.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULD_Size, None, itkVectorContainerULD)
itkVectorContainerULD.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULD_Reserve, None, itkVectorContainerULD)
itkVectorContainerULD.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULD_Squeeze, None, itkVectorContainerULD)
itkVectorContainerULD.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULD_Initialize, None, itkVectorContainerULD)
itkVectorContainerULD.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULD_GetPointer, None, itkVectorContainerULD)
itkVectorContainerULD_swigregister = _itkVectorContainerPython.itkVectorContainerULD_swigregister
itkVectorContainerULD_swigregister(itkVectorContainerULD)

def itkVectorContainerULD___New_orig__():
    """itkVectorContainerULD___New_orig__() -> itkVectorContainerULD_Pointer"""
    return _itkVectorContainerPython.itkVectorContainerULD___New_orig__()

def itkVectorContainerULD_cast(obj):
    """itkVectorContainerULD_cast(itkLightObject obj) -> itkVectorContainerULD"""
    return _itkVectorContainerPython.itkVectorContainerULD_cast(obj)

class itkVectorContainerULF(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkVectorContainerULF class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVectorContainerULF_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULF___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVectorContainerULF self) -> itkVectorContainerULF_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULF_Clone(self)


    def CastToSTLContainer(self):
        """CastToSTLContainer(itkVectorContainerULF self) -> vectorF"""
        return _itkVectorContainerPython.itkVectorContainerULF_CastToSTLContainer(self)


    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(itkVectorContainerULF self) -> vectorF"""
        return _itkVectorContainerPython.itkVectorContainerULF_CastToSTLConstContainer(self)


    def ElementAt(self, *args):
        """
        ElementAt(itkVectorContainerULF self, unsigned long arg0) -> float
        ElementAt(itkVectorContainerULF self, unsigned long arg0) -> float const &
        """
        return _itkVectorContainerPython.itkVectorContainerULF_ElementAt(self, *args)


    def CreateElementAt(self, arg0):
        """CreateElementAt(itkVectorContainerULF self, unsigned long arg0) -> float &"""
        return _itkVectorContainerPython.itkVectorContainerULF_CreateElementAt(self, arg0)


    def GetElement(self, arg0):
        """GetElement(itkVectorContainerULF self, unsigned long arg0) -> float"""
        return _itkVectorContainerPython.itkVectorContainerULF_GetElement(self, arg0)


    def SetElement(self, arg0, arg1):
        """SetElement(itkVectorContainerULF self, unsigned long arg0, float arg1)"""
        return _itkVectorContainerPython.itkVectorContainerULF_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0, arg1):
        """InsertElement(itkVectorContainerULF self, unsigned long arg0, float arg1)"""
        return _itkVectorContainerPython.itkVectorContainerULF_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0):
        """IndexExists(itkVectorContainerULF self, unsigned long arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerULF_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0, arg1):
        """GetElementIfIndexExists(itkVectorContainerULF self, unsigned long arg0, float * arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerULF_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0):
        """CreateIndex(itkVectorContainerULF self, unsigned long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULF_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0):
        """DeleteIndex(itkVectorContainerULF self, unsigned long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULF_DeleteIndex(self, arg0)


    def Size(self):
        """Size(itkVectorContainerULF self) -> unsigned long"""
        return _itkVectorContainerPython.itkVectorContainerULF_Size(self)


    def Reserve(self, arg0):
        """Reserve(itkVectorContainerULF self, unsigned long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULF_Reserve(self, arg0)


    def Squeeze(self):
        """Squeeze(itkVectorContainerULF self)"""
        return _itkVectorContainerPython.itkVectorContainerULF_Squeeze(self)


    def Initialize(self):
        """Initialize(itkVectorContainerULF self)"""
        return _itkVectorContainerPython.itkVectorContainerULF_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerULF

    def cast(obj):
        """cast(itkLightObject obj) -> itkVectorContainerULF"""
        return _itkVectorContainerPython.itkVectorContainerULF_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkVectorContainerULF self) -> itkVectorContainerULF"""
        return _itkVectorContainerPython.itkVectorContainerULF_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkVectorContainerULF

        Create a new object of the class itkVectorContainerULF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorContainerULF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerULF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerULF.Clone = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULF_Clone, None, itkVectorContainerULF)
itkVectorContainerULF.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULF_CastToSTLContainer, None, itkVectorContainerULF)
itkVectorContainerULF.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULF_CastToSTLConstContainer, None, itkVectorContainerULF)
itkVectorContainerULF.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULF_ElementAt, None, itkVectorContainerULF)
itkVectorContainerULF.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULF_CreateElementAt, None, itkVectorContainerULF)
itkVectorContainerULF.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULF_GetElement, None, itkVectorContainerULF)
itkVectorContainerULF.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULF_SetElement, None, itkVectorContainerULF)
itkVectorContainerULF.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULF_InsertElement, None, itkVectorContainerULF)
itkVectorContainerULF.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULF_IndexExists, None, itkVectorContainerULF)
itkVectorContainerULF.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULF_GetElementIfIndexExists, None, itkVectorContainerULF)
itkVectorContainerULF.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULF_CreateIndex, None, itkVectorContainerULF)
itkVectorContainerULF.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULF_DeleteIndex, None, itkVectorContainerULF)
itkVectorContainerULF.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULF_Size, None, itkVectorContainerULF)
itkVectorContainerULF.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULF_Reserve, None, itkVectorContainerULF)
itkVectorContainerULF.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULF_Squeeze, None, itkVectorContainerULF)
itkVectorContainerULF.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULF_Initialize, None, itkVectorContainerULF)
itkVectorContainerULF.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULF_GetPointer, None, itkVectorContainerULF)
itkVectorContainerULF_swigregister = _itkVectorContainerPython.itkVectorContainerULF_swigregister
itkVectorContainerULF_swigregister(itkVectorContainerULF)

def itkVectorContainerULF___New_orig__():
    """itkVectorContainerULF___New_orig__() -> itkVectorContainerULF_Pointer"""
    return _itkVectorContainerPython.itkVectorContainerULF___New_orig__()

def itkVectorContainerULF_cast(obj):
    """itkVectorContainerULF_cast(itkLightObject obj) -> itkVectorContainerULF"""
    return _itkVectorContainerPython.itkVectorContainerULF_cast(obj)

class itkVectorContainerULMD22(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkVectorContainerULMD22 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVectorContainerULMD22_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULMD22___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVectorContainerULMD22 self) -> itkVectorContainerULMD22_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULMD22_Clone(self)


    def CastToSTLContainer(self):
        """CastToSTLContainer(itkVectorContainerULMD22 self) -> std::vector< itkMatrixD22,std::allocator< itkMatrixD22 > > &"""
        return _itkVectorContainerPython.itkVectorContainerULMD22_CastToSTLContainer(self)


    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(itkVectorContainerULMD22 self) -> std::vector< itkMatrixD22,std::allocator< itkMatrixD22 > > const &"""
        return _itkVectorContainerPython.itkVectorContainerULMD22_CastToSTLConstContainer(self)


    def ElementAt(self, *args):
        """
        ElementAt(itkVectorContainerULMD22 self, unsigned long arg0) -> itkMatrixD22
        ElementAt(itkVectorContainerULMD22 self, unsigned long arg0) -> itkMatrixD22
        """
        return _itkVectorContainerPython.itkVectorContainerULMD22_ElementAt(self, *args)


    def CreateElementAt(self, arg0):
        """CreateElementAt(itkVectorContainerULMD22 self, unsigned long arg0) -> itkMatrixD22"""
        return _itkVectorContainerPython.itkVectorContainerULMD22_CreateElementAt(self, arg0)


    def GetElement(self, arg0):
        """GetElement(itkVectorContainerULMD22 self, unsigned long arg0) -> itkMatrixD22"""
        return _itkVectorContainerPython.itkVectorContainerULMD22_GetElement(self, arg0)


    def SetElement(self, arg0, arg1):
        """SetElement(itkVectorContainerULMD22 self, unsigned long arg0, itkMatrixD22 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerULMD22_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0, arg1):
        """InsertElement(itkVectorContainerULMD22 self, unsigned long arg0, itkMatrixD22 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerULMD22_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0):
        """IndexExists(itkVectorContainerULMD22 self, unsigned long arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerULMD22_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0, arg1):
        """GetElementIfIndexExists(itkVectorContainerULMD22 self, unsigned long arg0, itkMatrixD22 arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerULMD22_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0):
        """CreateIndex(itkVectorContainerULMD22 self, unsigned long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULMD22_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0):
        """DeleteIndex(itkVectorContainerULMD22 self, unsigned long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULMD22_DeleteIndex(self, arg0)


    def Size(self):
        """Size(itkVectorContainerULMD22 self) -> unsigned long"""
        return _itkVectorContainerPython.itkVectorContainerULMD22_Size(self)


    def Reserve(self, arg0):
        """Reserve(itkVectorContainerULMD22 self, unsigned long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULMD22_Reserve(self, arg0)


    def Squeeze(self):
        """Squeeze(itkVectorContainerULMD22 self)"""
        return _itkVectorContainerPython.itkVectorContainerULMD22_Squeeze(self)


    def Initialize(self):
        """Initialize(itkVectorContainerULMD22 self)"""
        return _itkVectorContainerPython.itkVectorContainerULMD22_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerULMD22

    def cast(obj):
        """cast(itkLightObject obj) -> itkVectorContainerULMD22"""
        return _itkVectorContainerPython.itkVectorContainerULMD22_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkVectorContainerULMD22 self) -> itkVectorContainerULMD22"""
        return _itkVectorContainerPython.itkVectorContainerULMD22_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkVectorContainerULMD22

        Create a new object of the class itkVectorContainerULMD22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULMD22.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorContainerULMD22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerULMD22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerULMD22.Clone = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULMD22_Clone, None, itkVectorContainerULMD22)
itkVectorContainerULMD22.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULMD22_CastToSTLContainer, None, itkVectorContainerULMD22)
itkVectorContainerULMD22.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULMD22_CastToSTLConstContainer, None, itkVectorContainerULMD22)
itkVectorContainerULMD22.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULMD22_ElementAt, None, itkVectorContainerULMD22)
itkVectorContainerULMD22.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULMD22_CreateElementAt, None, itkVectorContainerULMD22)
itkVectorContainerULMD22.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULMD22_GetElement, None, itkVectorContainerULMD22)
itkVectorContainerULMD22.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULMD22_SetElement, None, itkVectorContainerULMD22)
itkVectorContainerULMD22.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULMD22_InsertElement, None, itkVectorContainerULMD22)
itkVectorContainerULMD22.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULMD22_IndexExists, None, itkVectorContainerULMD22)
itkVectorContainerULMD22.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULMD22_GetElementIfIndexExists, None, itkVectorContainerULMD22)
itkVectorContainerULMD22.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULMD22_CreateIndex, None, itkVectorContainerULMD22)
itkVectorContainerULMD22.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULMD22_DeleteIndex, None, itkVectorContainerULMD22)
itkVectorContainerULMD22.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULMD22_Size, None, itkVectorContainerULMD22)
itkVectorContainerULMD22.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULMD22_Reserve, None, itkVectorContainerULMD22)
itkVectorContainerULMD22.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULMD22_Squeeze, None, itkVectorContainerULMD22)
itkVectorContainerULMD22.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULMD22_Initialize, None, itkVectorContainerULMD22)
itkVectorContainerULMD22.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULMD22_GetPointer, None, itkVectorContainerULMD22)
itkVectorContainerULMD22_swigregister = _itkVectorContainerPython.itkVectorContainerULMD22_swigregister
itkVectorContainerULMD22_swigregister(itkVectorContainerULMD22)

def itkVectorContainerULMD22___New_orig__():
    """itkVectorContainerULMD22___New_orig__() -> itkVectorContainerULMD22_Pointer"""
    return _itkVectorContainerPython.itkVectorContainerULMD22___New_orig__()

def itkVectorContainerULMD22_cast(obj):
    """itkVectorContainerULMD22_cast(itkLightObject obj) -> itkVectorContainerULMD22"""
    return _itkVectorContainerPython.itkVectorContainerULMD22_cast(obj)

class itkVectorContainerULMD33(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkVectorContainerULMD33 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVectorContainerULMD33_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULMD33___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVectorContainerULMD33 self) -> itkVectorContainerULMD33_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULMD33_Clone(self)


    def CastToSTLContainer(self):
        """CastToSTLContainer(itkVectorContainerULMD33 self) -> std::vector< itkMatrixD33,std::allocator< itkMatrixD33 > > &"""
        return _itkVectorContainerPython.itkVectorContainerULMD33_CastToSTLContainer(self)


    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(itkVectorContainerULMD33 self) -> std::vector< itkMatrixD33,std::allocator< itkMatrixD33 > > const &"""
        return _itkVectorContainerPython.itkVectorContainerULMD33_CastToSTLConstContainer(self)


    def ElementAt(self, *args):
        """
        ElementAt(itkVectorContainerULMD33 self, unsigned long arg0) -> itkMatrixD33
        ElementAt(itkVectorContainerULMD33 self, unsigned long arg0) -> itkMatrixD33
        """
        return _itkVectorContainerPython.itkVectorContainerULMD33_ElementAt(self, *args)


    def CreateElementAt(self, arg0):
        """CreateElementAt(itkVectorContainerULMD33 self, unsigned long arg0) -> itkMatrixD33"""
        return _itkVectorContainerPython.itkVectorContainerULMD33_CreateElementAt(self, arg0)


    def GetElement(self, arg0):
        """GetElement(itkVectorContainerULMD33 self, unsigned long arg0) -> itkMatrixD33"""
        return _itkVectorContainerPython.itkVectorContainerULMD33_GetElement(self, arg0)


    def SetElement(self, arg0, arg1):
        """SetElement(itkVectorContainerULMD33 self, unsigned long arg0, itkMatrixD33 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerULMD33_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0, arg1):
        """InsertElement(itkVectorContainerULMD33 self, unsigned long arg0, itkMatrixD33 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerULMD33_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0):
        """IndexExists(itkVectorContainerULMD33 self, unsigned long arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerULMD33_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0, arg1):
        """GetElementIfIndexExists(itkVectorContainerULMD33 self, unsigned long arg0, itkMatrixD33 arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerULMD33_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0):
        """CreateIndex(itkVectorContainerULMD33 self, unsigned long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULMD33_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0):
        """DeleteIndex(itkVectorContainerULMD33 self, unsigned long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULMD33_DeleteIndex(self, arg0)


    def Size(self):
        """Size(itkVectorContainerULMD33 self) -> unsigned long"""
        return _itkVectorContainerPython.itkVectorContainerULMD33_Size(self)


    def Reserve(self, arg0):
        """Reserve(itkVectorContainerULMD33 self, unsigned long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULMD33_Reserve(self, arg0)


    def Squeeze(self):
        """Squeeze(itkVectorContainerULMD33 self)"""
        return _itkVectorContainerPython.itkVectorContainerULMD33_Squeeze(self)


    def Initialize(self):
        """Initialize(itkVectorContainerULMD33 self)"""
        return _itkVectorContainerPython.itkVectorContainerULMD33_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerULMD33

    def cast(obj):
        """cast(itkLightObject obj) -> itkVectorContainerULMD33"""
        return _itkVectorContainerPython.itkVectorContainerULMD33_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkVectorContainerULMD33 self) -> itkVectorContainerULMD33"""
        return _itkVectorContainerPython.itkVectorContainerULMD33_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkVectorContainerULMD33

        Create a new object of the class itkVectorContainerULMD33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULMD33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorContainerULMD33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerULMD33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerULMD33.Clone = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULMD33_Clone, None, itkVectorContainerULMD33)
itkVectorContainerULMD33.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULMD33_CastToSTLContainer, None, itkVectorContainerULMD33)
itkVectorContainerULMD33.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULMD33_CastToSTLConstContainer, None, itkVectorContainerULMD33)
itkVectorContainerULMD33.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULMD33_ElementAt, None, itkVectorContainerULMD33)
itkVectorContainerULMD33.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULMD33_CreateElementAt, None, itkVectorContainerULMD33)
itkVectorContainerULMD33.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULMD33_GetElement, None, itkVectorContainerULMD33)
itkVectorContainerULMD33.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULMD33_SetElement, None, itkVectorContainerULMD33)
itkVectorContainerULMD33.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULMD33_InsertElement, None, itkVectorContainerULMD33)
itkVectorContainerULMD33.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULMD33_IndexExists, None, itkVectorContainerULMD33)
itkVectorContainerULMD33.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULMD33_GetElementIfIndexExists, None, itkVectorContainerULMD33)
itkVectorContainerULMD33.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULMD33_CreateIndex, None, itkVectorContainerULMD33)
itkVectorContainerULMD33.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULMD33_DeleteIndex, None, itkVectorContainerULMD33)
itkVectorContainerULMD33.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULMD33_Size, None, itkVectorContainerULMD33)
itkVectorContainerULMD33.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULMD33_Reserve, None, itkVectorContainerULMD33)
itkVectorContainerULMD33.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULMD33_Squeeze, None, itkVectorContainerULMD33)
itkVectorContainerULMD33.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULMD33_Initialize, None, itkVectorContainerULMD33)
itkVectorContainerULMD33.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULMD33_GetPointer, None, itkVectorContainerULMD33)
itkVectorContainerULMD33_swigregister = _itkVectorContainerPython.itkVectorContainerULMD33_swigregister
itkVectorContainerULMD33_swigregister(itkVectorContainerULMD33)

def itkVectorContainerULMD33___New_orig__():
    """itkVectorContainerULMD33___New_orig__() -> itkVectorContainerULMD33_Pointer"""
    return _itkVectorContainerPython.itkVectorContainerULMD33___New_orig__()

def itkVectorContainerULMD33_cast(obj):
    """itkVectorContainerULMD33_cast(itkLightObject obj) -> itkVectorContainerULMD33"""
    return _itkVectorContainerPython.itkVectorContainerULMD33_cast(obj)

class itkVectorContainerULMF22(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkVectorContainerULMF22 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVectorContainerULMF22_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULMF22___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVectorContainerULMF22 self) -> itkVectorContainerULMF22_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULMF22_Clone(self)


    def CastToSTLContainer(self):
        """CastToSTLContainer(itkVectorContainerULMF22 self) -> std::vector< itkMatrixF22,std::allocator< itkMatrixF22 > > &"""
        return _itkVectorContainerPython.itkVectorContainerULMF22_CastToSTLContainer(self)


    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(itkVectorContainerULMF22 self) -> std::vector< itkMatrixF22,std::allocator< itkMatrixF22 > > const &"""
        return _itkVectorContainerPython.itkVectorContainerULMF22_CastToSTLConstContainer(self)


    def ElementAt(self, *args):
        """
        ElementAt(itkVectorContainerULMF22 self, unsigned long arg0) -> itkMatrixF22
        ElementAt(itkVectorContainerULMF22 self, unsigned long arg0) -> itkMatrixF22
        """
        return _itkVectorContainerPython.itkVectorContainerULMF22_ElementAt(self, *args)


    def CreateElementAt(self, arg0):
        """CreateElementAt(itkVectorContainerULMF22 self, unsigned long arg0) -> itkMatrixF22"""
        return _itkVectorContainerPython.itkVectorContainerULMF22_CreateElementAt(self, arg0)


    def GetElement(self, arg0):
        """GetElement(itkVectorContainerULMF22 self, unsigned long arg0) -> itkMatrixF22"""
        return _itkVectorContainerPython.itkVectorContainerULMF22_GetElement(self, arg0)


    def SetElement(self, arg0, arg1):
        """SetElement(itkVectorContainerULMF22 self, unsigned long arg0, itkMatrixF22 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerULMF22_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0, arg1):
        """InsertElement(itkVectorContainerULMF22 self, unsigned long arg0, itkMatrixF22 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerULMF22_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0):
        """IndexExists(itkVectorContainerULMF22 self, unsigned long arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerULMF22_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0, arg1):
        """GetElementIfIndexExists(itkVectorContainerULMF22 self, unsigned long arg0, itkMatrixF22 arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerULMF22_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0):
        """CreateIndex(itkVectorContainerULMF22 self, unsigned long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULMF22_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0):
        """DeleteIndex(itkVectorContainerULMF22 self, unsigned long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULMF22_DeleteIndex(self, arg0)


    def Size(self):
        """Size(itkVectorContainerULMF22 self) -> unsigned long"""
        return _itkVectorContainerPython.itkVectorContainerULMF22_Size(self)


    def Reserve(self, arg0):
        """Reserve(itkVectorContainerULMF22 self, unsigned long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULMF22_Reserve(self, arg0)


    def Squeeze(self):
        """Squeeze(itkVectorContainerULMF22 self)"""
        return _itkVectorContainerPython.itkVectorContainerULMF22_Squeeze(self)


    def Initialize(self):
        """Initialize(itkVectorContainerULMF22 self)"""
        return _itkVectorContainerPython.itkVectorContainerULMF22_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerULMF22

    def cast(obj):
        """cast(itkLightObject obj) -> itkVectorContainerULMF22"""
        return _itkVectorContainerPython.itkVectorContainerULMF22_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkVectorContainerULMF22 self) -> itkVectorContainerULMF22"""
        return _itkVectorContainerPython.itkVectorContainerULMF22_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkVectorContainerULMF22

        Create a new object of the class itkVectorContainerULMF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULMF22.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorContainerULMF22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerULMF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerULMF22.Clone = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULMF22_Clone, None, itkVectorContainerULMF22)
itkVectorContainerULMF22.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULMF22_CastToSTLContainer, None, itkVectorContainerULMF22)
itkVectorContainerULMF22.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULMF22_CastToSTLConstContainer, None, itkVectorContainerULMF22)
itkVectorContainerULMF22.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULMF22_ElementAt, None, itkVectorContainerULMF22)
itkVectorContainerULMF22.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULMF22_CreateElementAt, None, itkVectorContainerULMF22)
itkVectorContainerULMF22.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULMF22_GetElement, None, itkVectorContainerULMF22)
itkVectorContainerULMF22.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULMF22_SetElement, None, itkVectorContainerULMF22)
itkVectorContainerULMF22.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULMF22_InsertElement, None, itkVectorContainerULMF22)
itkVectorContainerULMF22.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULMF22_IndexExists, None, itkVectorContainerULMF22)
itkVectorContainerULMF22.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULMF22_GetElementIfIndexExists, None, itkVectorContainerULMF22)
itkVectorContainerULMF22.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULMF22_CreateIndex, None, itkVectorContainerULMF22)
itkVectorContainerULMF22.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULMF22_DeleteIndex, None, itkVectorContainerULMF22)
itkVectorContainerULMF22.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULMF22_Size, None, itkVectorContainerULMF22)
itkVectorContainerULMF22.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULMF22_Reserve, None, itkVectorContainerULMF22)
itkVectorContainerULMF22.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULMF22_Squeeze, None, itkVectorContainerULMF22)
itkVectorContainerULMF22.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULMF22_Initialize, None, itkVectorContainerULMF22)
itkVectorContainerULMF22.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULMF22_GetPointer, None, itkVectorContainerULMF22)
itkVectorContainerULMF22_swigregister = _itkVectorContainerPython.itkVectorContainerULMF22_swigregister
itkVectorContainerULMF22_swigregister(itkVectorContainerULMF22)

def itkVectorContainerULMF22___New_orig__():
    """itkVectorContainerULMF22___New_orig__() -> itkVectorContainerULMF22_Pointer"""
    return _itkVectorContainerPython.itkVectorContainerULMF22___New_orig__()

def itkVectorContainerULMF22_cast(obj):
    """itkVectorContainerULMF22_cast(itkLightObject obj) -> itkVectorContainerULMF22"""
    return _itkVectorContainerPython.itkVectorContainerULMF22_cast(obj)

class itkVectorContainerULMF33(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkVectorContainerULMF33 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVectorContainerULMF33_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULMF33___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVectorContainerULMF33 self) -> itkVectorContainerULMF33_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULMF33_Clone(self)


    def CastToSTLContainer(self):
        """CastToSTLContainer(itkVectorContainerULMF33 self) -> std::vector< itkMatrixF33,std::allocator< itkMatrixF33 > > &"""
        return _itkVectorContainerPython.itkVectorContainerULMF33_CastToSTLContainer(self)


    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(itkVectorContainerULMF33 self) -> std::vector< itkMatrixF33,std::allocator< itkMatrixF33 > > const &"""
        return _itkVectorContainerPython.itkVectorContainerULMF33_CastToSTLConstContainer(self)


    def ElementAt(self, *args):
        """
        ElementAt(itkVectorContainerULMF33 self, unsigned long arg0) -> itkMatrixF33
        ElementAt(itkVectorContainerULMF33 self, unsigned long arg0) -> itkMatrixF33
        """
        return _itkVectorContainerPython.itkVectorContainerULMF33_ElementAt(self, *args)


    def CreateElementAt(self, arg0):
        """CreateElementAt(itkVectorContainerULMF33 self, unsigned long arg0) -> itkMatrixF33"""
        return _itkVectorContainerPython.itkVectorContainerULMF33_CreateElementAt(self, arg0)


    def GetElement(self, arg0):
        """GetElement(itkVectorContainerULMF33 self, unsigned long arg0) -> itkMatrixF33"""
        return _itkVectorContainerPython.itkVectorContainerULMF33_GetElement(self, arg0)


    def SetElement(self, arg0, arg1):
        """SetElement(itkVectorContainerULMF33 self, unsigned long arg0, itkMatrixF33 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerULMF33_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0, arg1):
        """InsertElement(itkVectorContainerULMF33 self, unsigned long arg0, itkMatrixF33 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerULMF33_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0):
        """IndexExists(itkVectorContainerULMF33 self, unsigned long arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerULMF33_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0, arg1):
        """GetElementIfIndexExists(itkVectorContainerULMF33 self, unsigned long arg0, itkMatrixF33 arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerULMF33_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0):
        """CreateIndex(itkVectorContainerULMF33 self, unsigned long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULMF33_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0):
        """DeleteIndex(itkVectorContainerULMF33 self, unsigned long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULMF33_DeleteIndex(self, arg0)


    def Size(self):
        """Size(itkVectorContainerULMF33 self) -> unsigned long"""
        return _itkVectorContainerPython.itkVectorContainerULMF33_Size(self)


    def Reserve(self, arg0):
        """Reserve(itkVectorContainerULMF33 self, unsigned long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULMF33_Reserve(self, arg0)


    def Squeeze(self):
        """Squeeze(itkVectorContainerULMF33 self)"""
        return _itkVectorContainerPython.itkVectorContainerULMF33_Squeeze(self)


    def Initialize(self):
        """Initialize(itkVectorContainerULMF33 self)"""
        return _itkVectorContainerPython.itkVectorContainerULMF33_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerULMF33

    def cast(obj):
        """cast(itkLightObject obj) -> itkVectorContainerULMF33"""
        return _itkVectorContainerPython.itkVectorContainerULMF33_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkVectorContainerULMF33 self) -> itkVectorContainerULMF33"""
        return _itkVectorContainerPython.itkVectorContainerULMF33_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkVectorContainerULMF33

        Create a new object of the class itkVectorContainerULMF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULMF33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorContainerULMF33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerULMF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerULMF33.Clone = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULMF33_Clone, None, itkVectorContainerULMF33)
itkVectorContainerULMF33.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULMF33_CastToSTLContainer, None, itkVectorContainerULMF33)
itkVectorContainerULMF33.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULMF33_CastToSTLConstContainer, None, itkVectorContainerULMF33)
itkVectorContainerULMF33.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULMF33_ElementAt, None, itkVectorContainerULMF33)
itkVectorContainerULMF33.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULMF33_CreateElementAt, None, itkVectorContainerULMF33)
itkVectorContainerULMF33.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULMF33_GetElement, None, itkVectorContainerULMF33)
itkVectorContainerULMF33.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULMF33_SetElement, None, itkVectorContainerULMF33)
itkVectorContainerULMF33.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULMF33_InsertElement, None, itkVectorContainerULMF33)
itkVectorContainerULMF33.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULMF33_IndexExists, None, itkVectorContainerULMF33)
itkVectorContainerULMF33.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULMF33_GetElementIfIndexExists, None, itkVectorContainerULMF33)
itkVectorContainerULMF33.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULMF33_CreateIndex, None, itkVectorContainerULMF33)
itkVectorContainerULMF33.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULMF33_DeleteIndex, None, itkVectorContainerULMF33)
itkVectorContainerULMF33.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULMF33_Size, None, itkVectorContainerULMF33)
itkVectorContainerULMF33.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULMF33_Reserve, None, itkVectorContainerULMF33)
itkVectorContainerULMF33.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULMF33_Squeeze, None, itkVectorContainerULMF33)
itkVectorContainerULMF33.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULMF33_Initialize, None, itkVectorContainerULMF33)
itkVectorContainerULMF33.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULMF33_GetPointer, None, itkVectorContainerULMF33)
itkVectorContainerULMF33_swigregister = _itkVectorContainerPython.itkVectorContainerULMF33_swigregister
itkVectorContainerULMF33_swigregister(itkVectorContainerULMF33)

def itkVectorContainerULMF33___New_orig__():
    """itkVectorContainerULMF33___New_orig__() -> itkVectorContainerULMF33_Pointer"""
    return _itkVectorContainerPython.itkVectorContainerULMF33___New_orig__()

def itkVectorContainerULMF33_cast(obj):
    """itkVectorContainerULMF33_cast(itkLightObject obj) -> itkVectorContainerULMF33"""
    return _itkVectorContainerPython.itkVectorContainerULMF33_cast(obj)

class itkVectorContainerULPD2(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkVectorContainerULPD2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVectorContainerULPD2_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULPD2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVectorContainerULPD2 self) -> itkVectorContainerULPD2_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULPD2_Clone(self)


    def CastToSTLContainer(self):
        """CastToSTLContainer(itkVectorContainerULPD2 self) -> vectoritkPointD2"""
        return _itkVectorContainerPython.itkVectorContainerULPD2_CastToSTLContainer(self)


    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(itkVectorContainerULPD2 self) -> vectoritkPointD2"""
        return _itkVectorContainerPython.itkVectorContainerULPD2_CastToSTLConstContainer(self)


    def ElementAt(self, *args):
        """
        ElementAt(itkVectorContainerULPD2 self, unsigned long arg0) -> itkPointD2
        ElementAt(itkVectorContainerULPD2 self, unsigned long arg0) -> itkPointD2
        """
        return _itkVectorContainerPython.itkVectorContainerULPD2_ElementAt(self, *args)


    def CreateElementAt(self, arg0):
        """CreateElementAt(itkVectorContainerULPD2 self, unsigned long arg0) -> itkPointD2"""
        return _itkVectorContainerPython.itkVectorContainerULPD2_CreateElementAt(self, arg0)


    def GetElement(self, arg0):
        """GetElement(itkVectorContainerULPD2 self, unsigned long arg0) -> itkPointD2"""
        return _itkVectorContainerPython.itkVectorContainerULPD2_GetElement(self, arg0)


    def SetElement(self, arg0, arg1):
        """SetElement(itkVectorContainerULPD2 self, unsigned long arg0, itkPointD2 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerULPD2_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0, arg1):
        """InsertElement(itkVectorContainerULPD2 self, unsigned long arg0, itkPointD2 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerULPD2_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0):
        """IndexExists(itkVectorContainerULPD2 self, unsigned long arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerULPD2_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0, arg1):
        """GetElementIfIndexExists(itkVectorContainerULPD2 self, unsigned long arg0, itkPointD2 arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerULPD2_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0):
        """CreateIndex(itkVectorContainerULPD2 self, unsigned long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULPD2_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0):
        """DeleteIndex(itkVectorContainerULPD2 self, unsigned long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULPD2_DeleteIndex(self, arg0)


    def Size(self):
        """Size(itkVectorContainerULPD2 self) -> unsigned long"""
        return _itkVectorContainerPython.itkVectorContainerULPD2_Size(self)


    def Reserve(self, arg0):
        """Reserve(itkVectorContainerULPD2 self, unsigned long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULPD2_Reserve(self, arg0)


    def Squeeze(self):
        """Squeeze(itkVectorContainerULPD2 self)"""
        return _itkVectorContainerPython.itkVectorContainerULPD2_Squeeze(self)


    def Initialize(self):
        """Initialize(itkVectorContainerULPD2 self)"""
        return _itkVectorContainerPython.itkVectorContainerULPD2_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerULPD2

    def cast(obj):
        """cast(itkLightObject obj) -> itkVectorContainerULPD2"""
        return _itkVectorContainerPython.itkVectorContainerULPD2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkVectorContainerULPD2 self) -> itkVectorContainerULPD2"""
        return _itkVectorContainerPython.itkVectorContainerULPD2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkVectorContainerULPD2

        Create a new object of the class itkVectorContainerULPD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULPD2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorContainerULPD2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerULPD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerULPD2.Clone = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPD2_Clone, None, itkVectorContainerULPD2)
itkVectorContainerULPD2.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPD2_CastToSTLContainer, None, itkVectorContainerULPD2)
itkVectorContainerULPD2.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPD2_CastToSTLConstContainer, None, itkVectorContainerULPD2)
itkVectorContainerULPD2.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPD2_ElementAt, None, itkVectorContainerULPD2)
itkVectorContainerULPD2.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPD2_CreateElementAt, None, itkVectorContainerULPD2)
itkVectorContainerULPD2.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPD2_GetElement, None, itkVectorContainerULPD2)
itkVectorContainerULPD2.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPD2_SetElement, None, itkVectorContainerULPD2)
itkVectorContainerULPD2.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPD2_InsertElement, None, itkVectorContainerULPD2)
itkVectorContainerULPD2.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPD2_IndexExists, None, itkVectorContainerULPD2)
itkVectorContainerULPD2.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPD2_GetElementIfIndexExists, None, itkVectorContainerULPD2)
itkVectorContainerULPD2.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPD2_CreateIndex, None, itkVectorContainerULPD2)
itkVectorContainerULPD2.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPD2_DeleteIndex, None, itkVectorContainerULPD2)
itkVectorContainerULPD2.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPD2_Size, None, itkVectorContainerULPD2)
itkVectorContainerULPD2.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPD2_Reserve, None, itkVectorContainerULPD2)
itkVectorContainerULPD2.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPD2_Squeeze, None, itkVectorContainerULPD2)
itkVectorContainerULPD2.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPD2_Initialize, None, itkVectorContainerULPD2)
itkVectorContainerULPD2.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPD2_GetPointer, None, itkVectorContainerULPD2)
itkVectorContainerULPD2_swigregister = _itkVectorContainerPython.itkVectorContainerULPD2_swigregister
itkVectorContainerULPD2_swigregister(itkVectorContainerULPD2)

def itkVectorContainerULPD2___New_orig__():
    """itkVectorContainerULPD2___New_orig__() -> itkVectorContainerULPD2_Pointer"""
    return _itkVectorContainerPython.itkVectorContainerULPD2___New_orig__()

def itkVectorContainerULPD2_cast(obj):
    """itkVectorContainerULPD2_cast(itkLightObject obj) -> itkVectorContainerULPD2"""
    return _itkVectorContainerPython.itkVectorContainerULPD2_cast(obj)

class itkVectorContainerULPD3(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkVectorContainerULPD3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVectorContainerULPD3_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULPD3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVectorContainerULPD3 self) -> itkVectorContainerULPD3_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULPD3_Clone(self)


    def CastToSTLContainer(self):
        """CastToSTLContainer(itkVectorContainerULPD3 self) -> vectoritkPointD3"""
        return _itkVectorContainerPython.itkVectorContainerULPD3_CastToSTLContainer(self)


    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(itkVectorContainerULPD3 self) -> vectoritkPointD3"""
        return _itkVectorContainerPython.itkVectorContainerULPD3_CastToSTLConstContainer(self)


    def ElementAt(self, *args):
        """
        ElementAt(itkVectorContainerULPD3 self, unsigned long arg0) -> itkPointD3
        ElementAt(itkVectorContainerULPD3 self, unsigned long arg0) -> itkPointD3
        """
        return _itkVectorContainerPython.itkVectorContainerULPD3_ElementAt(self, *args)


    def CreateElementAt(self, arg0):
        """CreateElementAt(itkVectorContainerULPD3 self, unsigned long arg0) -> itkPointD3"""
        return _itkVectorContainerPython.itkVectorContainerULPD3_CreateElementAt(self, arg0)


    def GetElement(self, arg0):
        """GetElement(itkVectorContainerULPD3 self, unsigned long arg0) -> itkPointD3"""
        return _itkVectorContainerPython.itkVectorContainerULPD3_GetElement(self, arg0)


    def SetElement(self, arg0, arg1):
        """SetElement(itkVectorContainerULPD3 self, unsigned long arg0, itkPointD3 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerULPD3_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0, arg1):
        """InsertElement(itkVectorContainerULPD3 self, unsigned long arg0, itkPointD3 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerULPD3_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0):
        """IndexExists(itkVectorContainerULPD3 self, unsigned long arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerULPD3_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0, arg1):
        """GetElementIfIndexExists(itkVectorContainerULPD3 self, unsigned long arg0, itkPointD3 arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerULPD3_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0):
        """CreateIndex(itkVectorContainerULPD3 self, unsigned long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULPD3_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0):
        """DeleteIndex(itkVectorContainerULPD3 self, unsigned long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULPD3_DeleteIndex(self, arg0)


    def Size(self):
        """Size(itkVectorContainerULPD3 self) -> unsigned long"""
        return _itkVectorContainerPython.itkVectorContainerULPD3_Size(self)


    def Reserve(self, arg0):
        """Reserve(itkVectorContainerULPD3 self, unsigned long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULPD3_Reserve(self, arg0)


    def Squeeze(self):
        """Squeeze(itkVectorContainerULPD3 self)"""
        return _itkVectorContainerPython.itkVectorContainerULPD3_Squeeze(self)


    def Initialize(self):
        """Initialize(itkVectorContainerULPD3 self)"""
        return _itkVectorContainerPython.itkVectorContainerULPD3_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerULPD3

    def cast(obj):
        """cast(itkLightObject obj) -> itkVectorContainerULPD3"""
        return _itkVectorContainerPython.itkVectorContainerULPD3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkVectorContainerULPD3 self) -> itkVectorContainerULPD3"""
        return _itkVectorContainerPython.itkVectorContainerULPD3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkVectorContainerULPD3

        Create a new object of the class itkVectorContainerULPD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULPD3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorContainerULPD3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerULPD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerULPD3.Clone = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPD3_Clone, None, itkVectorContainerULPD3)
itkVectorContainerULPD3.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPD3_CastToSTLContainer, None, itkVectorContainerULPD3)
itkVectorContainerULPD3.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPD3_CastToSTLConstContainer, None, itkVectorContainerULPD3)
itkVectorContainerULPD3.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPD3_ElementAt, None, itkVectorContainerULPD3)
itkVectorContainerULPD3.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPD3_CreateElementAt, None, itkVectorContainerULPD3)
itkVectorContainerULPD3.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPD3_GetElement, None, itkVectorContainerULPD3)
itkVectorContainerULPD3.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPD3_SetElement, None, itkVectorContainerULPD3)
itkVectorContainerULPD3.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPD3_InsertElement, None, itkVectorContainerULPD3)
itkVectorContainerULPD3.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPD3_IndexExists, None, itkVectorContainerULPD3)
itkVectorContainerULPD3.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPD3_GetElementIfIndexExists, None, itkVectorContainerULPD3)
itkVectorContainerULPD3.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPD3_CreateIndex, None, itkVectorContainerULPD3)
itkVectorContainerULPD3.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPD3_DeleteIndex, None, itkVectorContainerULPD3)
itkVectorContainerULPD3.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPD3_Size, None, itkVectorContainerULPD3)
itkVectorContainerULPD3.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPD3_Reserve, None, itkVectorContainerULPD3)
itkVectorContainerULPD3.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPD3_Squeeze, None, itkVectorContainerULPD3)
itkVectorContainerULPD3.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPD3_Initialize, None, itkVectorContainerULPD3)
itkVectorContainerULPD3.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPD3_GetPointer, None, itkVectorContainerULPD3)
itkVectorContainerULPD3_swigregister = _itkVectorContainerPython.itkVectorContainerULPD3_swigregister
itkVectorContainerULPD3_swigregister(itkVectorContainerULPD3)

def itkVectorContainerULPD3___New_orig__():
    """itkVectorContainerULPD3___New_orig__() -> itkVectorContainerULPD3_Pointer"""
    return _itkVectorContainerPython.itkVectorContainerULPD3___New_orig__()

def itkVectorContainerULPD3_cast(obj):
    """itkVectorContainerULPD3_cast(itkLightObject obj) -> itkVectorContainerULPD3"""
    return _itkVectorContainerPython.itkVectorContainerULPD3_cast(obj)

class itkVectorContainerULPF2(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkVectorContainerULPF2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVectorContainerULPF2_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULPF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVectorContainerULPF2 self) -> itkVectorContainerULPF2_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULPF2_Clone(self)


    def CastToSTLContainer(self):
        """CastToSTLContainer(itkVectorContainerULPF2 self) -> vectoritkPointF2"""
        return _itkVectorContainerPython.itkVectorContainerULPF2_CastToSTLContainer(self)


    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(itkVectorContainerULPF2 self) -> vectoritkPointF2"""
        return _itkVectorContainerPython.itkVectorContainerULPF2_CastToSTLConstContainer(self)


    def ElementAt(self, *args):
        """
        ElementAt(itkVectorContainerULPF2 self, unsigned long arg0) -> itkPointF2
        ElementAt(itkVectorContainerULPF2 self, unsigned long arg0) -> itkPointF2
        """
        return _itkVectorContainerPython.itkVectorContainerULPF2_ElementAt(self, *args)


    def CreateElementAt(self, arg0):
        """CreateElementAt(itkVectorContainerULPF2 self, unsigned long arg0) -> itkPointF2"""
        return _itkVectorContainerPython.itkVectorContainerULPF2_CreateElementAt(self, arg0)


    def GetElement(self, arg0):
        """GetElement(itkVectorContainerULPF2 self, unsigned long arg0) -> itkPointF2"""
        return _itkVectorContainerPython.itkVectorContainerULPF2_GetElement(self, arg0)


    def SetElement(self, arg0, arg1):
        """SetElement(itkVectorContainerULPF2 self, unsigned long arg0, itkPointF2 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerULPF2_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0, arg1):
        """InsertElement(itkVectorContainerULPF2 self, unsigned long arg0, itkPointF2 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerULPF2_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0):
        """IndexExists(itkVectorContainerULPF2 self, unsigned long arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerULPF2_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0, arg1):
        """GetElementIfIndexExists(itkVectorContainerULPF2 self, unsigned long arg0, itkPointF2 arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerULPF2_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0):
        """CreateIndex(itkVectorContainerULPF2 self, unsigned long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULPF2_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0):
        """DeleteIndex(itkVectorContainerULPF2 self, unsigned long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULPF2_DeleteIndex(self, arg0)


    def Size(self):
        """Size(itkVectorContainerULPF2 self) -> unsigned long"""
        return _itkVectorContainerPython.itkVectorContainerULPF2_Size(self)


    def Reserve(self, arg0):
        """Reserve(itkVectorContainerULPF2 self, unsigned long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULPF2_Reserve(self, arg0)


    def Squeeze(self):
        """Squeeze(itkVectorContainerULPF2 self)"""
        return _itkVectorContainerPython.itkVectorContainerULPF2_Squeeze(self)


    def Initialize(self):
        """Initialize(itkVectorContainerULPF2 self)"""
        return _itkVectorContainerPython.itkVectorContainerULPF2_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerULPF2

    def cast(obj):
        """cast(itkLightObject obj) -> itkVectorContainerULPF2"""
        return _itkVectorContainerPython.itkVectorContainerULPF2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkVectorContainerULPF2 self) -> itkVectorContainerULPF2"""
        return _itkVectorContainerPython.itkVectorContainerULPF2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkVectorContainerULPF2

        Create a new object of the class itkVectorContainerULPF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULPF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorContainerULPF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerULPF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerULPF2.Clone = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPF2_Clone, None, itkVectorContainerULPF2)
itkVectorContainerULPF2.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPF2_CastToSTLContainer, None, itkVectorContainerULPF2)
itkVectorContainerULPF2.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPF2_CastToSTLConstContainer, None, itkVectorContainerULPF2)
itkVectorContainerULPF2.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPF2_ElementAt, None, itkVectorContainerULPF2)
itkVectorContainerULPF2.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPF2_CreateElementAt, None, itkVectorContainerULPF2)
itkVectorContainerULPF2.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPF2_GetElement, None, itkVectorContainerULPF2)
itkVectorContainerULPF2.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPF2_SetElement, None, itkVectorContainerULPF2)
itkVectorContainerULPF2.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPF2_InsertElement, None, itkVectorContainerULPF2)
itkVectorContainerULPF2.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPF2_IndexExists, None, itkVectorContainerULPF2)
itkVectorContainerULPF2.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPF2_GetElementIfIndexExists, None, itkVectorContainerULPF2)
itkVectorContainerULPF2.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPF2_CreateIndex, None, itkVectorContainerULPF2)
itkVectorContainerULPF2.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPF2_DeleteIndex, None, itkVectorContainerULPF2)
itkVectorContainerULPF2.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPF2_Size, None, itkVectorContainerULPF2)
itkVectorContainerULPF2.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPF2_Reserve, None, itkVectorContainerULPF2)
itkVectorContainerULPF2.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPF2_Squeeze, None, itkVectorContainerULPF2)
itkVectorContainerULPF2.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPF2_Initialize, None, itkVectorContainerULPF2)
itkVectorContainerULPF2.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPF2_GetPointer, None, itkVectorContainerULPF2)
itkVectorContainerULPF2_swigregister = _itkVectorContainerPython.itkVectorContainerULPF2_swigregister
itkVectorContainerULPF2_swigregister(itkVectorContainerULPF2)

def itkVectorContainerULPF2___New_orig__():
    """itkVectorContainerULPF2___New_orig__() -> itkVectorContainerULPF2_Pointer"""
    return _itkVectorContainerPython.itkVectorContainerULPF2___New_orig__()

def itkVectorContainerULPF2_cast(obj):
    """itkVectorContainerULPF2_cast(itkLightObject obj) -> itkVectorContainerULPF2"""
    return _itkVectorContainerPython.itkVectorContainerULPF2_cast(obj)

class itkVectorContainerULPF3(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkVectorContainerULPF3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVectorContainerULPF3_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULPF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVectorContainerULPF3 self) -> itkVectorContainerULPF3_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULPF3_Clone(self)


    def CastToSTLContainer(self):
        """CastToSTLContainer(itkVectorContainerULPF3 self) -> vectoritkPointF3"""
        return _itkVectorContainerPython.itkVectorContainerULPF3_CastToSTLContainer(self)


    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(itkVectorContainerULPF3 self) -> vectoritkPointF3"""
        return _itkVectorContainerPython.itkVectorContainerULPF3_CastToSTLConstContainer(self)


    def ElementAt(self, *args):
        """
        ElementAt(itkVectorContainerULPF3 self, unsigned long arg0) -> itkPointF3
        ElementAt(itkVectorContainerULPF3 self, unsigned long arg0) -> itkPointF3
        """
        return _itkVectorContainerPython.itkVectorContainerULPF3_ElementAt(self, *args)


    def CreateElementAt(self, arg0):
        """CreateElementAt(itkVectorContainerULPF3 self, unsigned long arg0) -> itkPointF3"""
        return _itkVectorContainerPython.itkVectorContainerULPF3_CreateElementAt(self, arg0)


    def GetElement(self, arg0):
        """GetElement(itkVectorContainerULPF3 self, unsigned long arg0) -> itkPointF3"""
        return _itkVectorContainerPython.itkVectorContainerULPF3_GetElement(self, arg0)


    def SetElement(self, arg0, arg1):
        """SetElement(itkVectorContainerULPF3 self, unsigned long arg0, itkPointF3 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerULPF3_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0, arg1):
        """InsertElement(itkVectorContainerULPF3 self, unsigned long arg0, itkPointF3 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerULPF3_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0):
        """IndexExists(itkVectorContainerULPF3 self, unsigned long arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerULPF3_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0, arg1):
        """GetElementIfIndexExists(itkVectorContainerULPF3 self, unsigned long arg0, itkPointF3 arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerULPF3_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0):
        """CreateIndex(itkVectorContainerULPF3 self, unsigned long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULPF3_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0):
        """DeleteIndex(itkVectorContainerULPF3 self, unsigned long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULPF3_DeleteIndex(self, arg0)


    def Size(self):
        """Size(itkVectorContainerULPF3 self) -> unsigned long"""
        return _itkVectorContainerPython.itkVectorContainerULPF3_Size(self)


    def Reserve(self, arg0):
        """Reserve(itkVectorContainerULPF3 self, unsigned long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULPF3_Reserve(self, arg0)


    def Squeeze(self):
        """Squeeze(itkVectorContainerULPF3 self)"""
        return _itkVectorContainerPython.itkVectorContainerULPF3_Squeeze(self)


    def Initialize(self):
        """Initialize(itkVectorContainerULPF3 self)"""
        return _itkVectorContainerPython.itkVectorContainerULPF3_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerULPF3

    def cast(obj):
        """cast(itkLightObject obj) -> itkVectorContainerULPF3"""
        return _itkVectorContainerPython.itkVectorContainerULPF3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkVectorContainerULPF3 self) -> itkVectorContainerULPF3"""
        return _itkVectorContainerPython.itkVectorContainerULPF3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkVectorContainerULPF3

        Create a new object of the class itkVectorContainerULPF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULPF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorContainerULPF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerULPF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerULPF3.Clone = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPF3_Clone, None, itkVectorContainerULPF3)
itkVectorContainerULPF3.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPF3_CastToSTLContainer, None, itkVectorContainerULPF3)
itkVectorContainerULPF3.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPF3_CastToSTLConstContainer, None, itkVectorContainerULPF3)
itkVectorContainerULPF3.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPF3_ElementAt, None, itkVectorContainerULPF3)
itkVectorContainerULPF3.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPF3_CreateElementAt, None, itkVectorContainerULPF3)
itkVectorContainerULPF3.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPF3_GetElement, None, itkVectorContainerULPF3)
itkVectorContainerULPF3.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPF3_SetElement, None, itkVectorContainerULPF3)
itkVectorContainerULPF3.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPF3_InsertElement, None, itkVectorContainerULPF3)
itkVectorContainerULPF3.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPF3_IndexExists, None, itkVectorContainerULPF3)
itkVectorContainerULPF3.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPF3_GetElementIfIndexExists, None, itkVectorContainerULPF3)
itkVectorContainerULPF3.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPF3_CreateIndex, None, itkVectorContainerULPF3)
itkVectorContainerULPF3.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPF3_DeleteIndex, None, itkVectorContainerULPF3)
itkVectorContainerULPF3.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPF3_Size, None, itkVectorContainerULPF3)
itkVectorContainerULPF3.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPF3_Reserve, None, itkVectorContainerULPF3)
itkVectorContainerULPF3.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPF3_Squeeze, None, itkVectorContainerULPF3)
itkVectorContainerULPF3.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPF3_Initialize, None, itkVectorContainerULPF3)
itkVectorContainerULPF3.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPF3_GetPointer, None, itkVectorContainerULPF3)
itkVectorContainerULPF3_swigregister = _itkVectorContainerPython.itkVectorContainerULPF3_swigregister
itkVectorContainerULPF3_swigregister(itkVectorContainerULPF3)

def itkVectorContainerULPF3___New_orig__():
    """itkVectorContainerULPF3___New_orig__() -> itkVectorContainerULPF3_Pointer"""
    return _itkVectorContainerPython.itkVectorContainerULPF3___New_orig__()

def itkVectorContainerULPF3_cast(obj):
    """itkVectorContainerULPF3_cast(itkLightObject obj) -> itkVectorContainerULPF3"""
    return _itkVectorContainerPython.itkVectorContainerULPF3_cast(obj)

class itkVectorContainerULSUL(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkVectorContainerULSUL class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVectorContainerULSUL_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULSUL___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVectorContainerULSUL self) -> itkVectorContainerULSUL_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULSUL_Clone(self)


    def CastToSTLContainer(self):
        """CastToSTLContainer(itkVectorContainerULSUL self) -> vectorsetUL"""
        return _itkVectorContainerPython.itkVectorContainerULSUL_CastToSTLContainer(self)


    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(itkVectorContainerULSUL self) -> vectorsetUL"""
        return _itkVectorContainerPython.itkVectorContainerULSUL_CastToSTLConstContainer(self)


    def ElementAt(self, *args):
        """
        ElementAt(itkVectorContainerULSUL self, unsigned long arg0) -> setUL
        ElementAt(itkVectorContainerULSUL self, unsigned long arg0) -> setUL
        """
        return _itkVectorContainerPython.itkVectorContainerULSUL_ElementAt(self, *args)


    def CreateElementAt(self, arg0):
        """CreateElementAt(itkVectorContainerULSUL self, unsigned long arg0) -> setUL"""
        return _itkVectorContainerPython.itkVectorContainerULSUL_CreateElementAt(self, arg0)


    def GetElement(self, arg0):
        """GetElement(itkVectorContainerULSUL self, unsigned long arg0) -> setUL"""
        return _itkVectorContainerPython.itkVectorContainerULSUL_GetElement(self, arg0)


    def SetElement(self, arg0, arg1):
        """SetElement(itkVectorContainerULSUL self, unsigned long arg0, setUL arg1)"""
        return _itkVectorContainerPython.itkVectorContainerULSUL_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0, arg1):
        """InsertElement(itkVectorContainerULSUL self, unsigned long arg0, setUL arg1)"""
        return _itkVectorContainerPython.itkVectorContainerULSUL_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0):
        """IndexExists(itkVectorContainerULSUL self, unsigned long arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerULSUL_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0, arg1):
        """GetElementIfIndexExists(itkVectorContainerULSUL self, unsigned long arg0, setUL arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerULSUL_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0):
        """CreateIndex(itkVectorContainerULSUL self, unsigned long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULSUL_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0):
        """DeleteIndex(itkVectorContainerULSUL self, unsigned long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULSUL_DeleteIndex(self, arg0)


    def Size(self):
        """Size(itkVectorContainerULSUL self) -> unsigned long"""
        return _itkVectorContainerPython.itkVectorContainerULSUL_Size(self)


    def Reserve(self, arg0):
        """Reserve(itkVectorContainerULSUL self, unsigned long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULSUL_Reserve(self, arg0)


    def Squeeze(self):
        """Squeeze(itkVectorContainerULSUL self)"""
        return _itkVectorContainerPython.itkVectorContainerULSUL_Squeeze(self)


    def Initialize(self):
        """Initialize(itkVectorContainerULSUL self)"""
        return _itkVectorContainerPython.itkVectorContainerULSUL_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerULSUL

    def cast(obj):
        """cast(itkLightObject obj) -> itkVectorContainerULSUL"""
        return _itkVectorContainerPython.itkVectorContainerULSUL_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkVectorContainerULSUL self) -> itkVectorContainerULSUL"""
        return _itkVectorContainerPython.itkVectorContainerULSUL_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkVectorContainerULSUL

        Create a new object of the class itkVectorContainerULSUL and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULSUL.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorContainerULSUL.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerULSUL.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerULSUL.Clone = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULSUL_Clone, None, itkVectorContainerULSUL)
itkVectorContainerULSUL.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULSUL_CastToSTLContainer, None, itkVectorContainerULSUL)
itkVectorContainerULSUL.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULSUL_CastToSTLConstContainer, None, itkVectorContainerULSUL)
itkVectorContainerULSUL.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULSUL_ElementAt, None, itkVectorContainerULSUL)
itkVectorContainerULSUL.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULSUL_CreateElementAt, None, itkVectorContainerULSUL)
itkVectorContainerULSUL.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULSUL_GetElement, None, itkVectorContainerULSUL)
itkVectorContainerULSUL.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULSUL_SetElement, None, itkVectorContainerULSUL)
itkVectorContainerULSUL.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULSUL_InsertElement, None, itkVectorContainerULSUL)
itkVectorContainerULSUL.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULSUL_IndexExists, None, itkVectorContainerULSUL)
itkVectorContainerULSUL.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULSUL_GetElementIfIndexExists, None, itkVectorContainerULSUL)
itkVectorContainerULSUL.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULSUL_CreateIndex, None, itkVectorContainerULSUL)
itkVectorContainerULSUL.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULSUL_DeleteIndex, None, itkVectorContainerULSUL)
itkVectorContainerULSUL.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULSUL_Size, None, itkVectorContainerULSUL)
itkVectorContainerULSUL.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULSUL_Reserve, None, itkVectorContainerULSUL)
itkVectorContainerULSUL.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULSUL_Squeeze, None, itkVectorContainerULSUL)
itkVectorContainerULSUL.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULSUL_Initialize, None, itkVectorContainerULSUL)
itkVectorContainerULSUL.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULSUL_GetPointer, None, itkVectorContainerULSUL)
itkVectorContainerULSUL_swigregister = _itkVectorContainerPython.itkVectorContainerULSUL_swigregister
itkVectorContainerULSUL_swigregister(itkVectorContainerULSUL)

def itkVectorContainerULSUL___New_orig__():
    """itkVectorContainerULSUL___New_orig__() -> itkVectorContainerULSUL_Pointer"""
    return _itkVectorContainerPython.itkVectorContainerULSUL___New_orig__()

def itkVectorContainerULSUL_cast(obj):
    """itkVectorContainerULSUL_cast(itkLightObject obj) -> itkVectorContainerULSUL"""
    return _itkVectorContainerPython.itkVectorContainerULSUL_cast(obj)

class itkVectorContainerULUC(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkVectorContainerULUC class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVectorContainerULUC_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULUC___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVectorContainerULUC self) -> itkVectorContainerULUC_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULUC_Clone(self)


    def CastToSTLContainer(self):
        """CastToSTLContainer(itkVectorContainerULUC self) -> vectorUC"""
        return _itkVectorContainerPython.itkVectorContainerULUC_CastToSTLContainer(self)


    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(itkVectorContainerULUC self) -> vectorUC"""
        return _itkVectorContainerPython.itkVectorContainerULUC_CastToSTLConstContainer(self)


    def ElementAt(self, *args):
        """
        ElementAt(itkVectorContainerULUC self, unsigned long arg0) -> unsigned char
        ElementAt(itkVectorContainerULUC self, unsigned long arg0) -> unsigned char const &
        """
        return _itkVectorContainerPython.itkVectorContainerULUC_ElementAt(self, *args)


    def CreateElementAt(self, arg0):
        """CreateElementAt(itkVectorContainerULUC self, unsigned long arg0) -> unsigned char &"""
        return _itkVectorContainerPython.itkVectorContainerULUC_CreateElementAt(self, arg0)


    def GetElement(self, arg0):
        """GetElement(itkVectorContainerULUC self, unsigned long arg0) -> unsigned char"""
        return _itkVectorContainerPython.itkVectorContainerULUC_GetElement(self, arg0)


    def SetElement(self, arg0, arg1):
        """SetElement(itkVectorContainerULUC self, unsigned long arg0, unsigned char arg1)"""
        return _itkVectorContainerPython.itkVectorContainerULUC_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0, arg1):
        """InsertElement(itkVectorContainerULUC self, unsigned long arg0, unsigned char arg1)"""
        return _itkVectorContainerPython.itkVectorContainerULUC_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0):
        """IndexExists(itkVectorContainerULUC self, unsigned long arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerULUC_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0, arg1):
        """GetElementIfIndexExists(itkVectorContainerULUC self, unsigned long arg0, unsigned char * arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerULUC_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0):
        """CreateIndex(itkVectorContainerULUC self, unsigned long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULUC_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0):
        """DeleteIndex(itkVectorContainerULUC self, unsigned long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULUC_DeleteIndex(self, arg0)


    def Size(self):
        """Size(itkVectorContainerULUC self) -> unsigned long"""
        return _itkVectorContainerPython.itkVectorContainerULUC_Size(self)


    def Reserve(self, arg0):
        """Reserve(itkVectorContainerULUC self, unsigned long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULUC_Reserve(self, arg0)


    def Squeeze(self):
        """Squeeze(itkVectorContainerULUC self)"""
        return _itkVectorContainerPython.itkVectorContainerULUC_Squeeze(self)


    def Initialize(self):
        """Initialize(itkVectorContainerULUC self)"""
        return _itkVectorContainerPython.itkVectorContainerULUC_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerULUC

    def cast(obj):
        """cast(itkLightObject obj) -> itkVectorContainerULUC"""
        return _itkVectorContainerPython.itkVectorContainerULUC_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkVectorContainerULUC self) -> itkVectorContainerULUC"""
        return _itkVectorContainerPython.itkVectorContainerULUC_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkVectorContainerULUC

        Create a new object of the class itkVectorContainerULUC and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULUC.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorContainerULUC.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerULUC.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerULUC.Clone = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULUC_Clone, None, itkVectorContainerULUC)
itkVectorContainerULUC.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULUC_CastToSTLContainer, None, itkVectorContainerULUC)
itkVectorContainerULUC.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULUC_CastToSTLConstContainer, None, itkVectorContainerULUC)
itkVectorContainerULUC.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULUC_ElementAt, None, itkVectorContainerULUC)
itkVectorContainerULUC.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULUC_CreateElementAt, None, itkVectorContainerULUC)
itkVectorContainerULUC.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULUC_GetElement, None, itkVectorContainerULUC)
itkVectorContainerULUC.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULUC_SetElement, None, itkVectorContainerULUC)
itkVectorContainerULUC.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULUC_InsertElement, None, itkVectorContainerULUC)
itkVectorContainerULUC.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULUC_IndexExists, None, itkVectorContainerULUC)
itkVectorContainerULUC.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULUC_GetElementIfIndexExists, None, itkVectorContainerULUC)
itkVectorContainerULUC.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULUC_CreateIndex, None, itkVectorContainerULUC)
itkVectorContainerULUC.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULUC_DeleteIndex, None, itkVectorContainerULUC)
itkVectorContainerULUC.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULUC_Size, None, itkVectorContainerULUC)
itkVectorContainerULUC.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULUC_Reserve, None, itkVectorContainerULUC)
itkVectorContainerULUC.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULUC_Squeeze, None, itkVectorContainerULUC)
itkVectorContainerULUC.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULUC_Initialize, None, itkVectorContainerULUC)
itkVectorContainerULUC.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULUC_GetPointer, None, itkVectorContainerULUC)
itkVectorContainerULUC_swigregister = _itkVectorContainerPython.itkVectorContainerULUC_swigregister
itkVectorContainerULUC_swigregister(itkVectorContainerULUC)

def itkVectorContainerULUC___New_orig__():
    """itkVectorContainerULUC___New_orig__() -> itkVectorContainerULUC_Pointer"""
    return _itkVectorContainerPython.itkVectorContainerULUC___New_orig__()

def itkVectorContainerULUC_cast(obj):
    """itkVectorContainerULUC_cast(itkLightObject obj) -> itkVectorContainerULUC"""
    return _itkVectorContainerPython.itkVectorContainerULUC_cast(obj)

class itkVectorContainerULUI(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkVectorContainerULUI class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVectorContainerULUI_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULUI___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVectorContainerULUI self) -> itkVectorContainerULUI_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULUI_Clone(self)


    def CastToSTLContainer(self):
        """CastToSTLContainer(itkVectorContainerULUI self) -> std::vector< unsigned int,std::allocator< unsigned int > > &"""
        return _itkVectorContainerPython.itkVectorContainerULUI_CastToSTLContainer(self)


    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(itkVectorContainerULUI self) -> std::vector< unsigned int,std::allocator< unsigned int > > const &"""
        return _itkVectorContainerPython.itkVectorContainerULUI_CastToSTLConstContainer(self)


    def ElementAt(self, *args):
        """
        ElementAt(itkVectorContainerULUI self, unsigned long arg0) -> unsigned int
        ElementAt(itkVectorContainerULUI self, unsigned long arg0) -> unsigned int const &
        """
        return _itkVectorContainerPython.itkVectorContainerULUI_ElementAt(self, *args)


    def CreateElementAt(self, arg0):
        """CreateElementAt(itkVectorContainerULUI self, unsigned long arg0) -> unsigned int &"""
        return _itkVectorContainerPython.itkVectorContainerULUI_CreateElementAt(self, arg0)


    def GetElement(self, arg0):
        """GetElement(itkVectorContainerULUI self, unsigned long arg0) -> unsigned int"""
        return _itkVectorContainerPython.itkVectorContainerULUI_GetElement(self, arg0)


    def SetElement(self, arg0, arg1):
        """SetElement(itkVectorContainerULUI self, unsigned long arg0, unsigned int arg1)"""
        return _itkVectorContainerPython.itkVectorContainerULUI_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0, arg1):
        """InsertElement(itkVectorContainerULUI self, unsigned long arg0, unsigned int arg1)"""
        return _itkVectorContainerPython.itkVectorContainerULUI_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0):
        """IndexExists(itkVectorContainerULUI self, unsigned long arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerULUI_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0, arg1):
        """GetElementIfIndexExists(itkVectorContainerULUI self, unsigned long arg0, unsigned int * arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerULUI_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0):
        """CreateIndex(itkVectorContainerULUI self, unsigned long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULUI_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0):
        """DeleteIndex(itkVectorContainerULUI self, unsigned long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULUI_DeleteIndex(self, arg0)


    def Size(self):
        """Size(itkVectorContainerULUI self) -> unsigned long"""
        return _itkVectorContainerPython.itkVectorContainerULUI_Size(self)


    def Reserve(self, arg0):
        """Reserve(itkVectorContainerULUI self, unsigned long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULUI_Reserve(self, arg0)


    def Squeeze(self):
        """Squeeze(itkVectorContainerULUI self)"""
        return _itkVectorContainerPython.itkVectorContainerULUI_Squeeze(self)


    def Initialize(self):
        """Initialize(itkVectorContainerULUI self)"""
        return _itkVectorContainerPython.itkVectorContainerULUI_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerULUI

    def cast(obj):
        """cast(itkLightObject obj) -> itkVectorContainerULUI"""
        return _itkVectorContainerPython.itkVectorContainerULUI_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkVectorContainerULUI self) -> itkVectorContainerULUI"""
        return _itkVectorContainerPython.itkVectorContainerULUI_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkVectorContainerULUI

        Create a new object of the class itkVectorContainerULUI and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULUI.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorContainerULUI.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerULUI.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerULUI.Clone = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULUI_Clone, None, itkVectorContainerULUI)
itkVectorContainerULUI.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULUI_CastToSTLContainer, None, itkVectorContainerULUI)
itkVectorContainerULUI.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULUI_CastToSTLConstContainer, None, itkVectorContainerULUI)
itkVectorContainerULUI.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULUI_ElementAt, None, itkVectorContainerULUI)
itkVectorContainerULUI.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULUI_CreateElementAt, None, itkVectorContainerULUI)
itkVectorContainerULUI.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULUI_GetElement, None, itkVectorContainerULUI)
itkVectorContainerULUI.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULUI_SetElement, None, itkVectorContainerULUI)
itkVectorContainerULUI.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULUI_InsertElement, None, itkVectorContainerULUI)
itkVectorContainerULUI.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULUI_IndexExists, None, itkVectorContainerULUI)
itkVectorContainerULUI.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULUI_GetElementIfIndexExists, None, itkVectorContainerULUI)
itkVectorContainerULUI.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULUI_CreateIndex, None, itkVectorContainerULUI)
itkVectorContainerULUI.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULUI_DeleteIndex, None, itkVectorContainerULUI)
itkVectorContainerULUI.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULUI_Size, None, itkVectorContainerULUI)
itkVectorContainerULUI.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULUI_Reserve, None, itkVectorContainerULUI)
itkVectorContainerULUI.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULUI_Squeeze, None, itkVectorContainerULUI)
itkVectorContainerULUI.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULUI_Initialize, None, itkVectorContainerULUI)
itkVectorContainerULUI.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULUI_GetPointer, None, itkVectorContainerULUI)
itkVectorContainerULUI_swigregister = _itkVectorContainerPython.itkVectorContainerULUI_swigregister
itkVectorContainerULUI_swigregister(itkVectorContainerULUI)

def itkVectorContainerULUI___New_orig__():
    """itkVectorContainerULUI___New_orig__() -> itkVectorContainerULUI_Pointer"""
    return _itkVectorContainerPython.itkVectorContainerULUI___New_orig__()

def itkVectorContainerULUI_cast(obj):
    """itkVectorContainerULUI_cast(itkLightObject obj) -> itkVectorContainerULUI"""
    return _itkVectorContainerPython.itkVectorContainerULUI_cast(obj)

class itkVectorContainerULUL(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkVectorContainerULUL class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVectorContainerULUL_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULUL___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVectorContainerULUL self) -> itkVectorContainerULUL_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULUL_Clone(self)


    def CastToSTLContainer(self):
        """CastToSTLContainer(itkVectorContainerULUL self) -> vectorUL"""
        return _itkVectorContainerPython.itkVectorContainerULUL_CastToSTLContainer(self)


    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(itkVectorContainerULUL self) -> vectorUL"""
        return _itkVectorContainerPython.itkVectorContainerULUL_CastToSTLConstContainer(self)


    def ElementAt(self, *args):
        """
        ElementAt(itkVectorContainerULUL self, unsigned long arg0) -> unsigned long
        ElementAt(itkVectorContainerULUL self, unsigned long arg0) -> unsigned long const &
        """
        return _itkVectorContainerPython.itkVectorContainerULUL_ElementAt(self, *args)


    def CreateElementAt(self, arg0):
        """CreateElementAt(itkVectorContainerULUL self, unsigned long arg0) -> unsigned long &"""
        return _itkVectorContainerPython.itkVectorContainerULUL_CreateElementAt(self, arg0)


    def GetElement(self, arg0):
        """GetElement(itkVectorContainerULUL self, unsigned long arg0) -> unsigned long"""
        return _itkVectorContainerPython.itkVectorContainerULUL_GetElement(self, arg0)


    def SetElement(self, arg0, arg1):
        """SetElement(itkVectorContainerULUL self, unsigned long arg0, unsigned long arg1)"""
        return _itkVectorContainerPython.itkVectorContainerULUL_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0, arg1):
        """InsertElement(itkVectorContainerULUL self, unsigned long arg0, unsigned long arg1)"""
        return _itkVectorContainerPython.itkVectorContainerULUL_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0):
        """IndexExists(itkVectorContainerULUL self, unsigned long arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerULUL_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0, arg1):
        """GetElementIfIndexExists(itkVectorContainerULUL self, unsigned long arg0, unsigned long * arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerULUL_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0):
        """CreateIndex(itkVectorContainerULUL self, unsigned long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULUL_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0):
        """DeleteIndex(itkVectorContainerULUL self, unsigned long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULUL_DeleteIndex(self, arg0)


    def Size(self):
        """Size(itkVectorContainerULUL self) -> unsigned long"""
        return _itkVectorContainerPython.itkVectorContainerULUL_Size(self)


    def Reserve(self, arg0):
        """Reserve(itkVectorContainerULUL self, unsigned long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULUL_Reserve(self, arg0)


    def Squeeze(self):
        """Squeeze(itkVectorContainerULUL self)"""
        return _itkVectorContainerPython.itkVectorContainerULUL_Squeeze(self)


    def Initialize(self):
        """Initialize(itkVectorContainerULUL self)"""
        return _itkVectorContainerPython.itkVectorContainerULUL_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerULUL

    def cast(obj):
        """cast(itkLightObject obj) -> itkVectorContainerULUL"""
        return _itkVectorContainerPython.itkVectorContainerULUL_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkVectorContainerULUL self) -> itkVectorContainerULUL"""
        return _itkVectorContainerPython.itkVectorContainerULUL_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkVectorContainerULUL

        Create a new object of the class itkVectorContainerULUL and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULUL.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorContainerULUL.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerULUL.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerULUL.Clone = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULUL_Clone, None, itkVectorContainerULUL)
itkVectorContainerULUL.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULUL_CastToSTLContainer, None, itkVectorContainerULUL)
itkVectorContainerULUL.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULUL_CastToSTLConstContainer, None, itkVectorContainerULUL)
itkVectorContainerULUL.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULUL_ElementAt, None, itkVectorContainerULUL)
itkVectorContainerULUL.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULUL_CreateElementAt, None, itkVectorContainerULUL)
itkVectorContainerULUL.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULUL_GetElement, None, itkVectorContainerULUL)
itkVectorContainerULUL.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULUL_SetElement, None, itkVectorContainerULUL)
itkVectorContainerULUL.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULUL_InsertElement, None, itkVectorContainerULUL)
itkVectorContainerULUL.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULUL_IndexExists, None, itkVectorContainerULUL)
itkVectorContainerULUL.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULUL_GetElementIfIndexExists, None, itkVectorContainerULUL)
itkVectorContainerULUL.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULUL_CreateIndex, None, itkVectorContainerULUL)
itkVectorContainerULUL.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULUL_DeleteIndex, None, itkVectorContainerULUL)
itkVectorContainerULUL.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULUL_Size, None, itkVectorContainerULUL)
itkVectorContainerULUL.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULUL_Reserve, None, itkVectorContainerULUL)
itkVectorContainerULUL.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULUL_Squeeze, None, itkVectorContainerULUL)
itkVectorContainerULUL.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULUL_Initialize, None, itkVectorContainerULUL)
itkVectorContainerULUL.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULUL_GetPointer, None, itkVectorContainerULUL)
itkVectorContainerULUL_swigregister = _itkVectorContainerPython.itkVectorContainerULUL_swigregister
itkVectorContainerULUL_swigregister(itkVectorContainerULUL)

def itkVectorContainerULUL___New_orig__():
    """itkVectorContainerULUL___New_orig__() -> itkVectorContainerULUL_Pointer"""
    return _itkVectorContainerPython.itkVectorContainerULUL___New_orig__()

def itkVectorContainerULUL_cast(obj):
    """itkVectorContainerULUL_cast(itkLightObject obj) -> itkVectorContainerULUL"""
    return _itkVectorContainerPython.itkVectorContainerULUL_cast(obj)

class itkVectorContainerULVD2(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkVectorContainerULVD2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVectorContainerULVD2_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULVD2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVectorContainerULVD2 self) -> itkVectorContainerULVD2_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULVD2_Clone(self)


    def CastToSTLContainer(self):
        """CastToSTLContainer(itkVectorContainerULVD2 self) -> std::vector< itkVectorD2,std::allocator< itkVectorD2 > > &"""
        return _itkVectorContainerPython.itkVectorContainerULVD2_CastToSTLContainer(self)


    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(itkVectorContainerULVD2 self) -> std::vector< itkVectorD2,std::allocator< itkVectorD2 > > const &"""
        return _itkVectorContainerPython.itkVectorContainerULVD2_CastToSTLConstContainer(self)


    def ElementAt(self, *args):
        """
        ElementAt(itkVectorContainerULVD2 self, unsigned long arg0) -> itkVectorD2
        ElementAt(itkVectorContainerULVD2 self, unsigned long arg0) -> itkVectorD2
        """
        return _itkVectorContainerPython.itkVectorContainerULVD2_ElementAt(self, *args)


    def CreateElementAt(self, arg0):
        """CreateElementAt(itkVectorContainerULVD2 self, unsigned long arg0) -> itkVectorD2"""
        return _itkVectorContainerPython.itkVectorContainerULVD2_CreateElementAt(self, arg0)


    def GetElement(self, arg0):
        """GetElement(itkVectorContainerULVD2 self, unsigned long arg0) -> itkVectorD2"""
        return _itkVectorContainerPython.itkVectorContainerULVD2_GetElement(self, arg0)


    def SetElement(self, arg0, arg1):
        """SetElement(itkVectorContainerULVD2 self, unsigned long arg0, itkVectorD2 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerULVD2_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0, arg1):
        """InsertElement(itkVectorContainerULVD2 self, unsigned long arg0, itkVectorD2 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerULVD2_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0):
        """IndexExists(itkVectorContainerULVD2 self, unsigned long arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerULVD2_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0, arg1):
        """GetElementIfIndexExists(itkVectorContainerULVD2 self, unsigned long arg0, itkVectorD2 arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerULVD2_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0):
        """CreateIndex(itkVectorContainerULVD2 self, unsigned long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULVD2_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0):
        """DeleteIndex(itkVectorContainerULVD2 self, unsigned long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULVD2_DeleteIndex(self, arg0)


    def Size(self):
        """Size(itkVectorContainerULVD2 self) -> unsigned long"""
        return _itkVectorContainerPython.itkVectorContainerULVD2_Size(self)


    def Reserve(self, arg0):
        """Reserve(itkVectorContainerULVD2 self, unsigned long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULVD2_Reserve(self, arg0)


    def Squeeze(self):
        """Squeeze(itkVectorContainerULVD2 self)"""
        return _itkVectorContainerPython.itkVectorContainerULVD2_Squeeze(self)


    def Initialize(self):
        """Initialize(itkVectorContainerULVD2 self)"""
        return _itkVectorContainerPython.itkVectorContainerULVD2_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerULVD2

    def cast(obj):
        """cast(itkLightObject obj) -> itkVectorContainerULVD2"""
        return _itkVectorContainerPython.itkVectorContainerULVD2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkVectorContainerULVD2 self) -> itkVectorContainerULVD2"""
        return _itkVectorContainerPython.itkVectorContainerULVD2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkVectorContainerULVD2

        Create a new object of the class itkVectorContainerULVD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULVD2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorContainerULVD2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerULVD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerULVD2.Clone = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVD2_Clone, None, itkVectorContainerULVD2)
itkVectorContainerULVD2.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVD2_CastToSTLContainer, None, itkVectorContainerULVD2)
itkVectorContainerULVD2.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVD2_CastToSTLConstContainer, None, itkVectorContainerULVD2)
itkVectorContainerULVD2.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVD2_ElementAt, None, itkVectorContainerULVD2)
itkVectorContainerULVD2.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVD2_CreateElementAt, None, itkVectorContainerULVD2)
itkVectorContainerULVD2.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVD2_GetElement, None, itkVectorContainerULVD2)
itkVectorContainerULVD2.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVD2_SetElement, None, itkVectorContainerULVD2)
itkVectorContainerULVD2.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVD2_InsertElement, None, itkVectorContainerULVD2)
itkVectorContainerULVD2.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVD2_IndexExists, None, itkVectorContainerULVD2)
itkVectorContainerULVD2.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVD2_GetElementIfIndexExists, None, itkVectorContainerULVD2)
itkVectorContainerULVD2.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVD2_CreateIndex, None, itkVectorContainerULVD2)
itkVectorContainerULVD2.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVD2_DeleteIndex, None, itkVectorContainerULVD2)
itkVectorContainerULVD2.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVD2_Size, None, itkVectorContainerULVD2)
itkVectorContainerULVD2.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVD2_Reserve, None, itkVectorContainerULVD2)
itkVectorContainerULVD2.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVD2_Squeeze, None, itkVectorContainerULVD2)
itkVectorContainerULVD2.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVD2_Initialize, None, itkVectorContainerULVD2)
itkVectorContainerULVD2.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVD2_GetPointer, None, itkVectorContainerULVD2)
itkVectorContainerULVD2_swigregister = _itkVectorContainerPython.itkVectorContainerULVD2_swigregister
itkVectorContainerULVD2_swigregister(itkVectorContainerULVD2)

def itkVectorContainerULVD2___New_orig__():
    """itkVectorContainerULVD2___New_orig__() -> itkVectorContainerULVD2_Pointer"""
    return _itkVectorContainerPython.itkVectorContainerULVD2___New_orig__()

def itkVectorContainerULVD2_cast(obj):
    """itkVectorContainerULVD2_cast(itkLightObject obj) -> itkVectorContainerULVD2"""
    return _itkVectorContainerPython.itkVectorContainerULVD2_cast(obj)

class itkVectorContainerULVD3(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkVectorContainerULVD3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVectorContainerULVD3_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULVD3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVectorContainerULVD3 self) -> itkVectorContainerULVD3_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULVD3_Clone(self)


    def CastToSTLContainer(self):
        """CastToSTLContainer(itkVectorContainerULVD3 self) -> std::vector< itkVectorD3,std::allocator< itkVectorD3 > > &"""
        return _itkVectorContainerPython.itkVectorContainerULVD3_CastToSTLContainer(self)


    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(itkVectorContainerULVD3 self) -> std::vector< itkVectorD3,std::allocator< itkVectorD3 > > const &"""
        return _itkVectorContainerPython.itkVectorContainerULVD3_CastToSTLConstContainer(self)


    def ElementAt(self, *args):
        """
        ElementAt(itkVectorContainerULVD3 self, unsigned long arg0) -> itkVectorD3
        ElementAt(itkVectorContainerULVD3 self, unsigned long arg0) -> itkVectorD3
        """
        return _itkVectorContainerPython.itkVectorContainerULVD3_ElementAt(self, *args)


    def CreateElementAt(self, arg0):
        """CreateElementAt(itkVectorContainerULVD3 self, unsigned long arg0) -> itkVectorD3"""
        return _itkVectorContainerPython.itkVectorContainerULVD3_CreateElementAt(self, arg0)


    def GetElement(self, arg0):
        """GetElement(itkVectorContainerULVD3 self, unsigned long arg0) -> itkVectorD3"""
        return _itkVectorContainerPython.itkVectorContainerULVD3_GetElement(self, arg0)


    def SetElement(self, arg0, arg1):
        """SetElement(itkVectorContainerULVD3 self, unsigned long arg0, itkVectorD3 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerULVD3_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0, arg1):
        """InsertElement(itkVectorContainerULVD3 self, unsigned long arg0, itkVectorD3 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerULVD3_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0):
        """IndexExists(itkVectorContainerULVD3 self, unsigned long arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerULVD3_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0, arg1):
        """GetElementIfIndexExists(itkVectorContainerULVD3 self, unsigned long arg0, itkVectorD3 arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerULVD3_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0):
        """CreateIndex(itkVectorContainerULVD3 self, unsigned long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULVD3_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0):
        """DeleteIndex(itkVectorContainerULVD3 self, unsigned long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULVD3_DeleteIndex(self, arg0)


    def Size(self):
        """Size(itkVectorContainerULVD3 self) -> unsigned long"""
        return _itkVectorContainerPython.itkVectorContainerULVD3_Size(self)


    def Reserve(self, arg0):
        """Reserve(itkVectorContainerULVD3 self, unsigned long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULVD3_Reserve(self, arg0)


    def Squeeze(self):
        """Squeeze(itkVectorContainerULVD3 self)"""
        return _itkVectorContainerPython.itkVectorContainerULVD3_Squeeze(self)


    def Initialize(self):
        """Initialize(itkVectorContainerULVD3 self)"""
        return _itkVectorContainerPython.itkVectorContainerULVD3_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerULVD3

    def cast(obj):
        """cast(itkLightObject obj) -> itkVectorContainerULVD3"""
        return _itkVectorContainerPython.itkVectorContainerULVD3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkVectorContainerULVD3 self) -> itkVectorContainerULVD3"""
        return _itkVectorContainerPython.itkVectorContainerULVD3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkVectorContainerULVD3

        Create a new object of the class itkVectorContainerULVD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULVD3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorContainerULVD3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerULVD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerULVD3.Clone = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVD3_Clone, None, itkVectorContainerULVD3)
itkVectorContainerULVD3.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVD3_CastToSTLContainer, None, itkVectorContainerULVD3)
itkVectorContainerULVD3.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVD3_CastToSTLConstContainer, None, itkVectorContainerULVD3)
itkVectorContainerULVD3.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVD3_ElementAt, None, itkVectorContainerULVD3)
itkVectorContainerULVD3.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVD3_CreateElementAt, None, itkVectorContainerULVD3)
itkVectorContainerULVD3.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVD3_GetElement, None, itkVectorContainerULVD3)
itkVectorContainerULVD3.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVD3_SetElement, None, itkVectorContainerULVD3)
itkVectorContainerULVD3.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVD3_InsertElement, None, itkVectorContainerULVD3)
itkVectorContainerULVD3.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVD3_IndexExists, None, itkVectorContainerULVD3)
itkVectorContainerULVD3.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVD3_GetElementIfIndexExists, None, itkVectorContainerULVD3)
itkVectorContainerULVD3.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVD3_CreateIndex, None, itkVectorContainerULVD3)
itkVectorContainerULVD3.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVD3_DeleteIndex, None, itkVectorContainerULVD3)
itkVectorContainerULVD3.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVD3_Size, None, itkVectorContainerULVD3)
itkVectorContainerULVD3.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVD3_Reserve, None, itkVectorContainerULVD3)
itkVectorContainerULVD3.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVD3_Squeeze, None, itkVectorContainerULVD3)
itkVectorContainerULVD3.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVD3_Initialize, None, itkVectorContainerULVD3)
itkVectorContainerULVD3.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVD3_GetPointer, None, itkVectorContainerULVD3)
itkVectorContainerULVD3_swigregister = _itkVectorContainerPython.itkVectorContainerULVD3_swigregister
itkVectorContainerULVD3_swigregister(itkVectorContainerULVD3)

def itkVectorContainerULVD3___New_orig__():
    """itkVectorContainerULVD3___New_orig__() -> itkVectorContainerULVD3_Pointer"""
    return _itkVectorContainerPython.itkVectorContainerULVD3___New_orig__()

def itkVectorContainerULVD3_cast(obj):
    """itkVectorContainerULVD3_cast(itkLightObject obj) -> itkVectorContainerULVD3"""
    return _itkVectorContainerPython.itkVectorContainerULVD3_cast(obj)

class itkVectorContainerULVF2(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkVectorContainerULVF2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVectorContainerULVF2_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULVF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVectorContainerULVF2 self) -> itkVectorContainerULVF2_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULVF2_Clone(self)


    def CastToSTLContainer(self):
        """CastToSTLContainer(itkVectorContainerULVF2 self) -> std::vector< itkVectorF2,std::allocator< itkVectorF2 > > &"""
        return _itkVectorContainerPython.itkVectorContainerULVF2_CastToSTLContainer(self)


    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(itkVectorContainerULVF2 self) -> std::vector< itkVectorF2,std::allocator< itkVectorF2 > > const &"""
        return _itkVectorContainerPython.itkVectorContainerULVF2_CastToSTLConstContainer(self)


    def ElementAt(self, *args):
        """
        ElementAt(itkVectorContainerULVF2 self, unsigned long arg0) -> itkVectorF2
        ElementAt(itkVectorContainerULVF2 self, unsigned long arg0) -> itkVectorF2
        """
        return _itkVectorContainerPython.itkVectorContainerULVF2_ElementAt(self, *args)


    def CreateElementAt(self, arg0):
        """CreateElementAt(itkVectorContainerULVF2 self, unsigned long arg0) -> itkVectorF2"""
        return _itkVectorContainerPython.itkVectorContainerULVF2_CreateElementAt(self, arg0)


    def GetElement(self, arg0):
        """GetElement(itkVectorContainerULVF2 self, unsigned long arg0) -> itkVectorF2"""
        return _itkVectorContainerPython.itkVectorContainerULVF2_GetElement(self, arg0)


    def SetElement(self, arg0, arg1):
        """SetElement(itkVectorContainerULVF2 self, unsigned long arg0, itkVectorF2 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerULVF2_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0, arg1):
        """InsertElement(itkVectorContainerULVF2 self, unsigned long arg0, itkVectorF2 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerULVF2_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0):
        """IndexExists(itkVectorContainerULVF2 self, unsigned long arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerULVF2_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0, arg1):
        """GetElementIfIndexExists(itkVectorContainerULVF2 self, unsigned long arg0, itkVectorF2 arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerULVF2_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0):
        """CreateIndex(itkVectorContainerULVF2 self, unsigned long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULVF2_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0):
        """DeleteIndex(itkVectorContainerULVF2 self, unsigned long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULVF2_DeleteIndex(self, arg0)


    def Size(self):
        """Size(itkVectorContainerULVF2 self) -> unsigned long"""
        return _itkVectorContainerPython.itkVectorContainerULVF2_Size(self)


    def Reserve(self, arg0):
        """Reserve(itkVectorContainerULVF2 self, unsigned long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULVF2_Reserve(self, arg0)


    def Squeeze(self):
        """Squeeze(itkVectorContainerULVF2 self)"""
        return _itkVectorContainerPython.itkVectorContainerULVF2_Squeeze(self)


    def Initialize(self):
        """Initialize(itkVectorContainerULVF2 self)"""
        return _itkVectorContainerPython.itkVectorContainerULVF2_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerULVF2

    def cast(obj):
        """cast(itkLightObject obj) -> itkVectorContainerULVF2"""
        return _itkVectorContainerPython.itkVectorContainerULVF2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkVectorContainerULVF2 self) -> itkVectorContainerULVF2"""
        return _itkVectorContainerPython.itkVectorContainerULVF2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkVectorContainerULVF2

        Create a new object of the class itkVectorContainerULVF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULVF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorContainerULVF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerULVF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerULVF2.Clone = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVF2_Clone, None, itkVectorContainerULVF2)
itkVectorContainerULVF2.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVF2_CastToSTLContainer, None, itkVectorContainerULVF2)
itkVectorContainerULVF2.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVF2_CastToSTLConstContainer, None, itkVectorContainerULVF2)
itkVectorContainerULVF2.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVF2_ElementAt, None, itkVectorContainerULVF2)
itkVectorContainerULVF2.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVF2_CreateElementAt, None, itkVectorContainerULVF2)
itkVectorContainerULVF2.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVF2_GetElement, None, itkVectorContainerULVF2)
itkVectorContainerULVF2.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVF2_SetElement, None, itkVectorContainerULVF2)
itkVectorContainerULVF2.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVF2_InsertElement, None, itkVectorContainerULVF2)
itkVectorContainerULVF2.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVF2_IndexExists, None, itkVectorContainerULVF2)
itkVectorContainerULVF2.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVF2_GetElementIfIndexExists, None, itkVectorContainerULVF2)
itkVectorContainerULVF2.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVF2_CreateIndex, None, itkVectorContainerULVF2)
itkVectorContainerULVF2.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVF2_DeleteIndex, None, itkVectorContainerULVF2)
itkVectorContainerULVF2.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVF2_Size, None, itkVectorContainerULVF2)
itkVectorContainerULVF2.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVF2_Reserve, None, itkVectorContainerULVF2)
itkVectorContainerULVF2.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVF2_Squeeze, None, itkVectorContainerULVF2)
itkVectorContainerULVF2.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVF2_Initialize, None, itkVectorContainerULVF2)
itkVectorContainerULVF2.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVF2_GetPointer, None, itkVectorContainerULVF2)
itkVectorContainerULVF2_swigregister = _itkVectorContainerPython.itkVectorContainerULVF2_swigregister
itkVectorContainerULVF2_swigregister(itkVectorContainerULVF2)

def itkVectorContainerULVF2___New_orig__():
    """itkVectorContainerULVF2___New_orig__() -> itkVectorContainerULVF2_Pointer"""
    return _itkVectorContainerPython.itkVectorContainerULVF2___New_orig__()

def itkVectorContainerULVF2_cast(obj):
    """itkVectorContainerULVF2_cast(itkLightObject obj) -> itkVectorContainerULVF2"""
    return _itkVectorContainerPython.itkVectorContainerULVF2_cast(obj)

class itkVectorContainerULVF3(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkVectorContainerULVF3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkVectorContainerULVF3_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULVF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkVectorContainerULVF3 self) -> itkVectorContainerULVF3_Pointer"""
        return _itkVectorContainerPython.itkVectorContainerULVF3_Clone(self)


    def CastToSTLContainer(self):
        """CastToSTLContainer(itkVectorContainerULVF3 self) -> std::vector< itkVectorF3,std::allocator< itkVectorF3 > > &"""
        return _itkVectorContainerPython.itkVectorContainerULVF3_CastToSTLContainer(self)


    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(itkVectorContainerULVF3 self) -> std::vector< itkVectorF3,std::allocator< itkVectorF3 > > const &"""
        return _itkVectorContainerPython.itkVectorContainerULVF3_CastToSTLConstContainer(self)


    def ElementAt(self, *args):
        """
        ElementAt(itkVectorContainerULVF3 self, unsigned long arg0) -> itkVectorF3
        ElementAt(itkVectorContainerULVF3 self, unsigned long arg0) -> itkVectorF3
        """
        return _itkVectorContainerPython.itkVectorContainerULVF3_ElementAt(self, *args)


    def CreateElementAt(self, arg0):
        """CreateElementAt(itkVectorContainerULVF3 self, unsigned long arg0) -> itkVectorF3"""
        return _itkVectorContainerPython.itkVectorContainerULVF3_CreateElementAt(self, arg0)


    def GetElement(self, arg0):
        """GetElement(itkVectorContainerULVF3 self, unsigned long arg0) -> itkVectorF3"""
        return _itkVectorContainerPython.itkVectorContainerULVF3_GetElement(self, arg0)


    def SetElement(self, arg0, arg1):
        """SetElement(itkVectorContainerULVF3 self, unsigned long arg0, itkVectorF3 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerULVF3_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0, arg1):
        """InsertElement(itkVectorContainerULVF3 self, unsigned long arg0, itkVectorF3 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerULVF3_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0):
        """IndexExists(itkVectorContainerULVF3 self, unsigned long arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerULVF3_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0, arg1):
        """GetElementIfIndexExists(itkVectorContainerULVF3 self, unsigned long arg0, itkVectorF3 arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerULVF3_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0):
        """CreateIndex(itkVectorContainerULVF3 self, unsigned long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULVF3_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0):
        """DeleteIndex(itkVectorContainerULVF3 self, unsigned long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULVF3_DeleteIndex(self, arg0)


    def Size(self):
        """Size(itkVectorContainerULVF3 self) -> unsigned long"""
        return _itkVectorContainerPython.itkVectorContainerULVF3_Size(self)


    def Reserve(self, arg0):
        """Reserve(itkVectorContainerULVF3 self, unsigned long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULVF3_Reserve(self, arg0)


    def Squeeze(self):
        """Squeeze(itkVectorContainerULVF3 self)"""
        return _itkVectorContainerPython.itkVectorContainerULVF3_Squeeze(self)


    def Initialize(self):
        """Initialize(itkVectorContainerULVF3 self)"""
        return _itkVectorContainerPython.itkVectorContainerULVF3_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerULVF3

    def cast(obj):
        """cast(itkLightObject obj) -> itkVectorContainerULVF3"""
        return _itkVectorContainerPython.itkVectorContainerULVF3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkVectorContainerULVF3 self) -> itkVectorContainerULVF3"""
        return _itkVectorContainerPython.itkVectorContainerULVF3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkVectorContainerULVF3

        Create a new object of the class itkVectorContainerULVF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULVF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorContainerULVF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerULVF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerULVF3.Clone = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVF3_Clone, None, itkVectorContainerULVF3)
itkVectorContainerULVF3.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVF3_CastToSTLContainer, None, itkVectorContainerULVF3)
itkVectorContainerULVF3.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVF3_CastToSTLConstContainer, None, itkVectorContainerULVF3)
itkVectorContainerULVF3.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVF3_ElementAt, None, itkVectorContainerULVF3)
itkVectorContainerULVF3.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVF3_CreateElementAt, None, itkVectorContainerULVF3)
itkVectorContainerULVF3.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVF3_GetElement, None, itkVectorContainerULVF3)
itkVectorContainerULVF3.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVF3_SetElement, None, itkVectorContainerULVF3)
itkVectorContainerULVF3.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVF3_InsertElement, None, itkVectorContainerULVF3)
itkVectorContainerULVF3.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVF3_IndexExists, None, itkVectorContainerULVF3)
itkVectorContainerULVF3.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVF3_GetElementIfIndexExists, None, itkVectorContainerULVF3)
itkVectorContainerULVF3.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVF3_CreateIndex, None, itkVectorContainerULVF3)
itkVectorContainerULVF3.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVF3_DeleteIndex, None, itkVectorContainerULVF3)
itkVectorContainerULVF3.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVF3_Size, None, itkVectorContainerULVF3)
itkVectorContainerULVF3.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVF3_Reserve, None, itkVectorContainerULVF3)
itkVectorContainerULVF3.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVF3_Squeeze, None, itkVectorContainerULVF3)
itkVectorContainerULVF3.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVF3_Initialize, None, itkVectorContainerULVF3)
itkVectorContainerULVF3.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVF3_GetPointer, None, itkVectorContainerULVF3)
itkVectorContainerULVF3_swigregister = _itkVectorContainerPython.itkVectorContainerULVF3_swigregister
itkVectorContainerULVF3_swigregister(itkVectorContainerULVF3)

def itkVectorContainerULVF3___New_orig__():
    """itkVectorContainerULVF3___New_orig__() -> itkVectorContainerULVF3_Pointer"""
    return _itkVectorContainerPython.itkVectorContainerULVF3___New_orig__()

def itkVectorContainerULVF3_cast(obj):
    """itkVectorContainerULVF3_cast(itkLightObject obj) -> itkVectorContainerULVF3"""
    return _itkVectorContainerPython.itkVectorContainerULVF3_cast(obj)



