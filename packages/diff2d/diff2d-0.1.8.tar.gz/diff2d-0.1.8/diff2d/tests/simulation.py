import unittest
import numpy as np
from numpy.testing import assert_allclose

from diff2d.core import simulation

_10r_01dt_1D = np.array([[0.01534538, 0.029055, 0.039454, 0.029055, 0.01534538],
                         [0.029055, 0.050246, 0.06570431, 0.050246, 0.029055],
                         [0.039454, 0.06570431, 0.08456125, 0.06570431, 0.039454],
                         [0.029055, 0.050246, 0.06570431, 0.050246, 0.029055],
                         [0.01534538, 0.029055, 0.039454, 0.029055, 0.01534538]])

_15r_01dt_1D = np.array([[0.02696794, 0.0353467, 0.04075251, 0.0353467, 0.02696794],
                         [0.0353467, 0.04527485, 0.05165189, 0.04527485, 0.0353467],
                         [0.04075251, 0.05165189, 0.05863761, 0.05165189, 0.04075251],
                         [0.0353467, 0.04527485, 0.05165189, 0.04527485, 0.0353467],
                         [0.02696794, 0.0353467, 0.04075251, 0.0353467, 0.02696794]])

_10r_01dt_01D = np.array([[1.02991975e-05, 2.78143181e-04, 3.36328181e-03, 2.78143181e-04, 1.02991975e-05],
                          [2.78143181e-04, 6.53221653e-03, 7.00686714e-02, 6.53221653e-03, 2.78143181e-04],
                          [3.36328181e-03, 7.00686714e-02, 6.77876979e-01, 7.00686714e-02, 3.36328181e-03],
                          [2.78143181e-04, 6.53221653e-03, 7.00686714e-02, 6.53221653e-03, 2.78143181e-04],
                          [1.02991975e-05, 2.78143181e-04, 3.36328181e-03, 2.78143181e-04, 1.02991975e-05]])

_10r_02dt_1D = np.array([[0.034944, 0.0384, 0.040576, 0.0384, 0.034944],
                         [0.0384, 0.041984, 0.044096, 0.041984, 0.0384],
                         [0.040576, 0.044096, 0.0464, 0.044096, 0.040576],
                         [0.0384, 0.041984, 0.044096, 0.041984, 0.0384],
                         [0.034944, 0.0384, 0.040576, 0.0384, 0.034944]])

_u_10r_01dt_1D = np.array([[0.08456125, 0.06570431, 0.039454, 0.039454, 0.06570431],
                           [0.06570431, 0.050246, 0.029055, 0.029055, 0.050246],
                           [0.039454, 0.029055, 0.01534538, 0.01534538, 0.029055],
                           [0.039454, 0.029055, 0.01534538, 0.01534538, 0.029055],
                           [0.06570431, 0.050246, 0.029055, 0.029055, 0.050246]])


class SimulationTest(unittest.TestCase):

    def setUp(self):
        self.initial = np.zeros((5,5))
        self.initial[2,2] = 1

    def test_default(self):
        """
        Test the default simulation configuration.

        :return:
        """
        assert_allclose(simulation(self.initial, 10, 0.1, 1), _10r_01dt_1D, atol=1e-07)

    def test_run(self):
        """
        Test the run parameter
        """
        assert_allclose(simulation(self.initial, 15, 0.1, 1), _15r_01dt_1D, atol=1e-07)

    def test_D(self):
        """
        Test the diffusion (D) parameter
        """
        # D = 0.1
        assert_allclose(simulation(self.initial, 10, 0.1, 0.1), _10r_01dt_01D, atol=1e-07)

    def test_step(self):
        """
        Test the step (dt) paramter
        """
        assert_allclose(simulation(self.initial, 10, 0.2, 1), _10r_02dt_1D, atol=1e-07)

    def test_u(self):
        """
        Test different set of initial values.
        """
        u = np.zeros((5,5))
        u[0,0] = 1
        assert_allclose(simulation(u, 10, 0.1, 1), _u_10r_01dt_1D, atol=1e-07)


if __name__ == '__main__':
    unittest.main()
