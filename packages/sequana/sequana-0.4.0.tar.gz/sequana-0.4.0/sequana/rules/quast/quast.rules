rule quast:
    """ Quast calculates metrics to evaluate and to compare different de novo
    assembly. It provides a HTML file.

    Required input:
        - __quast__input: list of fasta files
        - __quast__reference: Reference genome file (optional)
        - __quast__genes: Gene positions in the reference genome.

    Required output:
        - __quast__json: json file to create quast link in sequana_report.

    Required parameters:
        - __quast__outdir: output directory

    Logs:
        - __quast__log
    """
    input:
        assembly = __quast__input,
        reference = __quast__reference,
        genes = __quast__genes
    output:
        json = __quast__json
    log:
        l = __quast__log
    params:
        directory = __quast__outdir,
        gene_finding = config["quast"]["gene_finding"],
        options = config["quast"]["options"]
    threads:
        config["quast"]["threads"]
    run:
        import json
        import os

        cmd = "quast.py -t %i -o %s %s" % (threads, params.directory,
                                           params.options)
        if input.reference:
            cmd += " -R " + input.reference
            if input.genes:
                cmd += " -G " + input.genes
        if params.gene_finding:
            cmd += " -f"
        if isinstance(input.assembly, list):
            fasta = " ".join([f for f in input.assembly])
        else:
            fasta = input.a
        shell("%s %s" % (cmd, fasta))
        quast_json = {'tool': 'quast',
                      'directory': os.path.realpath(params.directory)}
        quast_json = json.dumps(quast_json)
        with open(output.json, 'w') as fp:
            print(quast_json, file=fp)
