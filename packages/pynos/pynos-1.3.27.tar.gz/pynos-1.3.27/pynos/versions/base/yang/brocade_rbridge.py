#!/usr/bin/env python
import xml.etree.ElementTree as ET


class brocade_rbridge(object):
    """Auto generated class.
    """
    def __init__(self, **kwargs):
        self._callback = kwargs.pop('callback')

            
    def rbridge_id_rbridge_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id.text = kwargs.pop('rbridge_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_swbd_number(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        swbd_number = ET.SubElement(rbridge_id, "swbd-number")
        swbd_number.text = kwargs.pop('swbd_number')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_nodespecific_ns_vlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface_nodespecific = ET.SubElement(rbridge_id, "interface-nodespecific")
        ns_vlan = ET.SubElement(interface_nodespecific, "ns-vlan")
        ns_vlan.text = kwargs.pop('ns_vlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_nodespecific_ns_ethernet(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface_nodespecific = ET.SubElement(rbridge_id, "interface-nodespecific")
        ns_ethernet = ET.SubElement(interface_nodespecific, "ns-ethernet")
        ns_ethernet.text = kwargs.pop('ns_ethernet')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ip_prefix_list_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ip = ET.SubElement(rbridge_id, "ip")
        prefix_list = ET.SubElement(ip, "prefix-list", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        seq_keyword_key = ET.SubElement(prefix_list, "seq-keyword")
        seq_keyword_key.text = kwargs.pop('seq_keyword')
        instance_key = ET.SubElement(prefix_list, "instance")
        instance_key.text = kwargs.pop('instance')
        name = ET.SubElement(prefix_list, "name")
        name.text = kwargs.pop('name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ip_prefix_list_seq_keyword(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ip = ET.SubElement(rbridge_id, "ip")
        prefix_list = ET.SubElement(ip, "prefix-list", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(prefix_list, "name")
        name_key.text = kwargs.pop('name')
        instance_key = ET.SubElement(prefix_list, "instance")
        instance_key.text = kwargs.pop('instance')
        seq_keyword = ET.SubElement(prefix_list, "seq-keyword")
        seq_keyword.text = kwargs.pop('seq_keyword')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ip_prefix_list_instance(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ip = ET.SubElement(rbridge_id, "ip")
        prefix_list = ET.SubElement(ip, "prefix-list", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(prefix_list, "name")
        name_key.text = kwargs.pop('name')
        seq_keyword_key = ET.SubElement(prefix_list, "seq-keyword")
        seq_keyword_key.text = kwargs.pop('seq_keyword')
        instance = ET.SubElement(prefix_list, "instance")
        instance.text = kwargs.pop('instance')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ip_prefix_list_action_ipp(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ip = ET.SubElement(rbridge_id, "ip")
        prefix_list = ET.SubElement(ip, "prefix-list", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(prefix_list, "name")
        name_key.text = kwargs.pop('name')
        seq_keyword_key = ET.SubElement(prefix_list, "seq-keyword")
        seq_keyword_key.text = kwargs.pop('seq_keyword')
        instance_key = ET.SubElement(prefix_list, "instance")
        instance_key.text = kwargs.pop('instance')
        action_ipp = ET.SubElement(prefix_list, "action-ipp")
        action_ipp.text = kwargs.pop('action_ipp')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ip_prefix_list_prefix_ipp(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ip = ET.SubElement(rbridge_id, "ip")
        prefix_list = ET.SubElement(ip, "prefix-list", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(prefix_list, "name")
        name_key.text = kwargs.pop('name')
        seq_keyword_key = ET.SubElement(prefix_list, "seq-keyword")
        seq_keyword_key.text = kwargs.pop('seq_keyword')
        instance_key = ET.SubElement(prefix_list, "instance")
        instance_key.text = kwargs.pop('instance')
        prefix_ipp = ET.SubElement(prefix_list, "prefix-ipp")
        prefix_ipp.text = kwargs.pop('prefix_ipp')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ip_prefix_list_ge_ipp(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ip = ET.SubElement(rbridge_id, "ip")
        prefix_list = ET.SubElement(ip, "prefix-list", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(prefix_list, "name")
        name_key.text = kwargs.pop('name')
        seq_keyword_key = ET.SubElement(prefix_list, "seq-keyword")
        seq_keyword_key.text = kwargs.pop('seq_keyword')
        instance_key = ET.SubElement(prefix_list, "instance")
        instance_key.text = kwargs.pop('instance')
        ge_ipp = ET.SubElement(prefix_list, "ge-ipp")
        ge_ipp.text = kwargs.pop('ge_ipp')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ip_prefix_list_le_ipp(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ip = ET.SubElement(rbridge_id, "ip")
        prefix_list = ET.SubElement(ip, "prefix-list", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(prefix_list, "name")
        name_key.text = kwargs.pop('name')
        seq_keyword_key = ET.SubElement(prefix_list, "seq-keyword")
        seq_keyword_key.text = kwargs.pop('seq_keyword')
        instance_key = ET.SubElement(prefix_list, "instance")
        instance_key.text = kwargs.pop('instance')
        le_ipp = ET.SubElement(prefix_list, "le-ipp")
        le_ipp.text = kwargs.pop('le_ipp')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ip_as_path_access_list_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ip = ET.SubElement(rbridge_id, "ip")
        as_path = ET.SubElement(ip, "as-path", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        access_list = ET.SubElement(as_path, "access-list")
        seq_keyword_key = ET.SubElement(access_list, "seq-keyword")
        seq_keyword_key.text = kwargs.pop('seq_keyword')
        instance_key = ET.SubElement(access_list, "instance")
        instance_key.text = kwargs.pop('instance')
        name = ET.SubElement(access_list, "name")
        name.text = kwargs.pop('name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ip_as_path_access_list_seq_keyword(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ip = ET.SubElement(rbridge_id, "ip")
        as_path = ET.SubElement(ip, "as-path", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        access_list = ET.SubElement(as_path, "access-list")
        name_key = ET.SubElement(access_list, "name")
        name_key.text = kwargs.pop('name')
        instance_key = ET.SubElement(access_list, "instance")
        instance_key.text = kwargs.pop('instance')
        seq_keyword = ET.SubElement(access_list, "seq-keyword")
        seq_keyword.text = kwargs.pop('seq_keyword')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ip_as_path_access_list_instance(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ip = ET.SubElement(rbridge_id, "ip")
        as_path = ET.SubElement(ip, "as-path", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        access_list = ET.SubElement(as_path, "access-list")
        name_key = ET.SubElement(access_list, "name")
        name_key.text = kwargs.pop('name')
        seq_keyword_key = ET.SubElement(access_list, "seq-keyword")
        seq_keyword_key.text = kwargs.pop('seq_keyword')
        instance = ET.SubElement(access_list, "instance")
        instance.text = kwargs.pop('instance')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ip_as_path_access_list_ip_action(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ip = ET.SubElement(rbridge_id, "ip")
        as_path = ET.SubElement(ip, "as-path", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        access_list = ET.SubElement(as_path, "access-list")
        name_key = ET.SubElement(access_list, "name")
        name_key.text = kwargs.pop('name')
        seq_keyword_key = ET.SubElement(access_list, "seq-keyword")
        seq_keyword_key.text = kwargs.pop('seq_keyword')
        instance_key = ET.SubElement(access_list, "instance")
        instance_key.text = kwargs.pop('instance')
        ip_action = ET.SubElement(access_list, "ip-action")
        ip_action.text = kwargs.pop('ip_action')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ip_as_path_access_list_ip_reg_expr(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ip = ET.SubElement(rbridge_id, "ip")
        as_path = ET.SubElement(ip, "as-path", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        access_list = ET.SubElement(as_path, "access-list")
        name_key = ET.SubElement(access_list, "name")
        name_key.text = kwargs.pop('name')
        seq_keyword_key = ET.SubElement(access_list, "seq-keyword")
        seq_keyword_key.text = kwargs.pop('seq_keyword')
        instance_key = ET.SubElement(access_list, "instance")
        instance_key.text = kwargs.pop('instance')
        ip_reg_expr = ET.SubElement(access_list, "ip-reg-expr")
        ip_reg_expr.text = kwargs.pop('ip_reg_expr')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ip_community_list_standard_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ip = ET.SubElement(rbridge_id, "ip")
        community_list = ET.SubElement(ip, "community-list", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        standard = ET.SubElement(community_list, "standard")
        seq_keyword_key = ET.SubElement(standard, "seq-keyword")
        seq_keyword_key.text = kwargs.pop('seq_keyword')
        instance_key = ET.SubElement(standard, "instance")
        instance_key.text = kwargs.pop('instance')
        name = ET.SubElement(standard, "name")
        name.text = kwargs.pop('name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ip_community_list_standard_seq_keyword(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ip = ET.SubElement(rbridge_id, "ip")
        community_list = ET.SubElement(ip, "community-list", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        standard = ET.SubElement(community_list, "standard")
        name_key = ET.SubElement(standard, "name")
        name_key.text = kwargs.pop('name')
        instance_key = ET.SubElement(standard, "instance")
        instance_key.text = kwargs.pop('instance')
        seq_keyword = ET.SubElement(standard, "seq-keyword")
        seq_keyword.text = kwargs.pop('seq_keyword')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ip_community_list_standard_instance(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ip = ET.SubElement(rbridge_id, "ip")
        community_list = ET.SubElement(ip, "community-list", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        standard = ET.SubElement(community_list, "standard")
        name_key = ET.SubElement(standard, "name")
        name_key.text = kwargs.pop('name')
        seq_keyword_key = ET.SubElement(standard, "seq-keyword")
        seq_keyword_key.text = kwargs.pop('seq_keyword')
        instance = ET.SubElement(standard, "instance")
        instance.text = kwargs.pop('instance')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ip_community_list_standard_ip_action(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ip = ET.SubElement(rbridge_id, "ip")
        community_list = ET.SubElement(ip, "community-list", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        standard = ET.SubElement(community_list, "standard")
        name_key = ET.SubElement(standard, "name")
        name_key.text = kwargs.pop('name')
        seq_keyword_key = ET.SubElement(standard, "seq-keyword")
        seq_keyword_key.text = kwargs.pop('seq_keyword')
        instance_key = ET.SubElement(standard, "instance")
        instance_key.text = kwargs.pop('instance')
        ip_action = ET.SubElement(standard, "ip-action")
        ip_action.text = kwargs.pop('ip_action')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ip_community_list_standard_std_community_expr(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ip = ET.SubElement(rbridge_id, "ip")
        community_list = ET.SubElement(ip, "community-list", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        standard = ET.SubElement(community_list, "standard")
        name_key = ET.SubElement(standard, "name")
        name_key.text = kwargs.pop('name')
        seq_keyword_key = ET.SubElement(standard, "seq-keyword")
        seq_keyword_key.text = kwargs.pop('seq_keyword')
        instance_key = ET.SubElement(standard, "instance")
        instance_key.text = kwargs.pop('instance')
        std_community_expr = ET.SubElement(standard, "std-community-expr")
        std_community_expr.text = kwargs.pop('std_community_expr')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ip_community_list_extended_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ip = ET.SubElement(rbridge_id, "ip")
        community_list = ET.SubElement(ip, "community-list", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        extended = ET.SubElement(community_list, "extended")
        seq_keyword_key = ET.SubElement(extended, "seq-keyword")
        seq_keyword_key.text = kwargs.pop('seq_keyword')
        instance_key = ET.SubElement(extended, "instance")
        instance_key.text = kwargs.pop('instance')
        name = ET.SubElement(extended, "name")
        name.text = kwargs.pop('name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ip_community_list_extended_seq_keyword(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ip = ET.SubElement(rbridge_id, "ip")
        community_list = ET.SubElement(ip, "community-list", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        extended = ET.SubElement(community_list, "extended")
        name_key = ET.SubElement(extended, "name")
        name_key.text = kwargs.pop('name')
        instance_key = ET.SubElement(extended, "instance")
        instance_key.text = kwargs.pop('instance')
        seq_keyword = ET.SubElement(extended, "seq-keyword")
        seq_keyword.text = kwargs.pop('seq_keyword')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ip_community_list_extended_instance(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ip = ET.SubElement(rbridge_id, "ip")
        community_list = ET.SubElement(ip, "community-list", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        extended = ET.SubElement(community_list, "extended")
        name_key = ET.SubElement(extended, "name")
        name_key.text = kwargs.pop('name')
        seq_keyword_key = ET.SubElement(extended, "seq-keyword")
        seq_keyword_key.text = kwargs.pop('seq_keyword')
        instance = ET.SubElement(extended, "instance")
        instance.text = kwargs.pop('instance')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ip_community_list_extended_ip_action(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ip = ET.SubElement(rbridge_id, "ip")
        community_list = ET.SubElement(ip, "community-list", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        extended = ET.SubElement(community_list, "extended")
        name_key = ET.SubElement(extended, "name")
        name_key.text = kwargs.pop('name')
        seq_keyword_key = ET.SubElement(extended, "seq-keyword")
        seq_keyword_key.text = kwargs.pop('seq_keyword')
        instance_key = ET.SubElement(extended, "instance")
        instance_key.text = kwargs.pop('instance')
        ip_action = ET.SubElement(extended, "ip-action")
        ip_action.text = kwargs.pop('ip_action')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ip_community_list_extended_ip_community_reg_expr(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ip = ET.SubElement(rbridge_id, "ip")
        community_list = ET.SubElement(ip, "community-list", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        extended = ET.SubElement(community_list, "extended")
        name_key = ET.SubElement(extended, "name")
        name_key.text = kwargs.pop('name')
        seq_keyword_key = ET.SubElement(extended, "seq-keyword")
        seq_keyword_key.text = kwargs.pop('seq_keyword')
        instance_key = ET.SubElement(extended, "instance")
        instance_key.text = kwargs.pop('instance')
        ip_community_reg_expr = ET.SubElement(extended, "ip-community-reg-expr")
        ip_community_reg_expr.text = kwargs.pop('ip_community_reg_expr')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ip_extcommunity_list_extcommunity_list_num(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ip = ET.SubElement(rbridge_id, "ip")
        extcommunity_list = ET.SubElement(ip, "extcommunity-list", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        extcommunity_list_num = ET.SubElement(extcommunity_list, "extcommunity-list-num")
        extcommunity_list_num.text = kwargs.pop('extcommunity_list_num')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ip_extcommunity_list_ext_community_action(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ip = ET.SubElement(rbridge_id, "ip")
        extcommunity_list = ET.SubElement(ip, "extcommunity-list", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        extcommunity_list_num_key = ET.SubElement(extcommunity_list, "extcommunity-list-num")
        extcommunity_list_num_key.text = kwargs.pop('extcommunity_list_num')
        ext_community_action = ET.SubElement(extcommunity_list, "ext-community-action")
        ext_community_action.text = kwargs.pop('ext_community_action')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ip_extcommunity_list_ext_community_expr(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ip = ET.SubElement(rbridge_id, "ip")
        extcommunity_list = ET.SubElement(ip, "extcommunity-list", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        extcommunity_list_num_key = ET.SubElement(extcommunity_list, "extcommunity-list-num")
        extcommunity_list_num_key.text = kwargs.pop('extcommunity_list_num')
        ext_community_expr = ET.SubElement(extcommunity_list, "ext-community-expr")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ip_rtm_config_router_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ip = ET.SubElement(rbridge_id, "ip")
        rtm_config = ET.SubElement(ip, "rtm-config", xmlns="urn:brocade.com:mgmt:brocade-rtm")
        router_id = ET.SubElement(rtm_config, "router-id")
        router_id.text = kwargs.pop('router_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ip_rtm_config_load_sharing(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ip = ET.SubElement(rbridge_id, "ip")
        rtm_config = ET.SubElement(ip, "rtm-config", xmlns="urn:brocade.com:mgmt:brocade-rtm")
        load_sharing = ET.SubElement(rtm_config, "load-sharing")
        load_sharing.text = kwargs.pop('load_sharing')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ip_rtm_config_route_static_route_nh_static_route_dest(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ip = ET.SubElement(rbridge_id, "ip")
        rtm_config = ET.SubElement(ip, "rtm-config", xmlns="urn:brocade.com:mgmt:brocade-rtm")
        route = ET.SubElement(rtm_config, "route")
        static_route_nh = ET.SubElement(route, "static-route-nh")
        static_route_next_hop_key = ET.SubElement(static_route_nh, "static-route-next-hop")
        static_route_next_hop_key.text = kwargs.pop('static_route_next_hop')
        static_route_dest = ET.SubElement(static_route_nh, "static-route-dest")
        static_route_dest.text = kwargs.pop('static_route_dest')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ip_rtm_config_route_static_route_nh_static_route_next_hop(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ip = ET.SubElement(rbridge_id, "ip")
        rtm_config = ET.SubElement(ip, "rtm-config", xmlns="urn:brocade.com:mgmt:brocade-rtm")
        route = ET.SubElement(rtm_config, "route")
        static_route_nh = ET.SubElement(route, "static-route-nh")
        static_route_dest_key = ET.SubElement(static_route_nh, "static-route-dest")
        static_route_dest_key.text = kwargs.pop('static_route_dest')
        static_route_next_hop = ET.SubElement(static_route_nh, "static-route-next-hop")
        static_route_next_hop.text = kwargs.pop('static_route_next_hop')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ip_rtm_config_route_static_route_nh_route_attributes_metric(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ip = ET.SubElement(rbridge_id, "ip")
        rtm_config = ET.SubElement(ip, "rtm-config", xmlns="urn:brocade.com:mgmt:brocade-rtm")
        route = ET.SubElement(rtm_config, "route")
        static_route_nh = ET.SubElement(route, "static-route-nh")
        static_route_dest_key = ET.SubElement(static_route_nh, "static-route-dest")
        static_route_dest_key.text = kwargs.pop('static_route_dest')
        static_route_next_hop_key = ET.SubElement(static_route_nh, "static-route-next-hop")
        static_route_next_hop_key.text = kwargs.pop('static_route_next_hop')
        route_attributes = ET.SubElement(static_route_nh, "route-attributes")
        metric = ET.SubElement(route_attributes, "metric")
        metric.text = kwargs.pop('metric')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ip_rtm_config_route_static_route_nh_route_attributes_distance(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ip = ET.SubElement(rbridge_id, "ip")
        rtm_config = ET.SubElement(ip, "rtm-config", xmlns="urn:brocade.com:mgmt:brocade-rtm")
        route = ET.SubElement(rtm_config, "route")
        static_route_nh = ET.SubElement(route, "static-route-nh")
        static_route_dest_key = ET.SubElement(static_route_nh, "static-route-dest")
        static_route_dest_key.text = kwargs.pop('static_route_dest')
        static_route_next_hop_key = ET.SubElement(static_route_nh, "static-route-next-hop")
        static_route_next_hop_key.text = kwargs.pop('static_route_next_hop')
        route_attributes = ET.SubElement(static_route_nh, "route-attributes")
        distance = ET.SubElement(route_attributes, "distance")
        distance.text = kwargs.pop('distance')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ip_rtm_config_route_static_route_nh_route_attributes_tag(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ip = ET.SubElement(rbridge_id, "ip")
        rtm_config = ET.SubElement(ip, "rtm-config", xmlns="urn:brocade.com:mgmt:brocade-rtm")
        route = ET.SubElement(rtm_config, "route")
        static_route_nh = ET.SubElement(route, "static-route-nh")
        static_route_dest_key = ET.SubElement(static_route_nh, "static-route-dest")
        static_route_dest_key.text = kwargs.pop('static_route_dest')
        static_route_next_hop_key = ET.SubElement(static_route_nh, "static-route-next-hop")
        static_route_next_hop_key.text = kwargs.pop('static_route_next_hop')
        route_attributes = ET.SubElement(static_route_nh, "route-attributes")
        tag = ET.SubElement(route_attributes, "tag")
        tag.text = kwargs.pop('tag')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ip_rtm_config_route_static_route_nh_vrf_static_route_next_vrf_dest(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ip = ET.SubElement(rbridge_id, "ip")
        rtm_config = ET.SubElement(ip, "rtm-config", xmlns="urn:brocade.com:mgmt:brocade-rtm")
        route = ET.SubElement(rtm_config, "route")
        static_route_nh_vrf = ET.SubElement(route, "static-route-nh-vrf")
        next_hop_vrf_key = ET.SubElement(static_route_nh_vrf, "next-hop-vrf")
        next_hop_vrf_key.text = kwargs.pop('next_hop_vrf')
        static_route_next_hop_key = ET.SubElement(static_route_nh_vrf, "static-route-next-hop")
        static_route_next_hop_key.text = kwargs.pop('static_route_next_hop')
        static_route_next_vrf_dest = ET.SubElement(static_route_nh_vrf, "static-route-next-vrf-dest")
        static_route_next_vrf_dest.text = kwargs.pop('static_route_next_vrf_dest')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ip_rtm_config_route_static_route_nh_vrf_next_hop_vrf(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ip = ET.SubElement(rbridge_id, "ip")
        rtm_config = ET.SubElement(ip, "rtm-config", xmlns="urn:brocade.com:mgmt:brocade-rtm")
        route = ET.SubElement(rtm_config, "route")
        static_route_nh_vrf = ET.SubElement(route, "static-route-nh-vrf")
        static_route_next_vrf_dest_key = ET.SubElement(static_route_nh_vrf, "static-route-next-vrf-dest")
        static_route_next_vrf_dest_key.text = kwargs.pop('static_route_next_vrf_dest')
        static_route_next_hop_key = ET.SubElement(static_route_nh_vrf, "static-route-next-hop")
        static_route_next_hop_key.text = kwargs.pop('static_route_next_hop')
        next_hop_vrf = ET.SubElement(static_route_nh_vrf, "next-hop-vrf")
        next_hop_vrf.text = kwargs.pop('next_hop_vrf')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ip_rtm_config_route_static_route_nh_vrf_static_route_next_hop(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ip = ET.SubElement(rbridge_id, "ip")
        rtm_config = ET.SubElement(ip, "rtm-config", xmlns="urn:brocade.com:mgmt:brocade-rtm")
        route = ET.SubElement(rtm_config, "route")
        static_route_nh_vrf = ET.SubElement(route, "static-route-nh-vrf")
        static_route_next_vrf_dest_key = ET.SubElement(static_route_nh_vrf, "static-route-next-vrf-dest")
        static_route_next_vrf_dest_key.text = kwargs.pop('static_route_next_vrf_dest')
        next_hop_vrf_key = ET.SubElement(static_route_nh_vrf, "next-hop-vrf")
        next_hop_vrf_key.text = kwargs.pop('next_hop_vrf')
        static_route_next_hop = ET.SubElement(static_route_nh_vrf, "static-route-next-hop")
        static_route_next_hop.text = kwargs.pop('static_route_next_hop')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ip_rtm_config_route_static_route_oif_static_route_dest(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ip = ET.SubElement(rbridge_id, "ip")
        rtm_config = ET.SubElement(ip, "rtm-config", xmlns="urn:brocade.com:mgmt:brocade-rtm")
        route = ET.SubElement(rtm_config, "route")
        static_route_oif = ET.SubElement(route, "static-route-oif")
        static_route_oif_type_key = ET.SubElement(static_route_oif, "static-route-oif-type")
        static_route_oif_type_key.text = kwargs.pop('static_route_oif_type')
        static_route_oif_name_key = ET.SubElement(static_route_oif, "static-route-oif-name")
        static_route_oif_name_key.text = kwargs.pop('static_route_oif_name')
        static_route_dest = ET.SubElement(static_route_oif, "static-route-dest")
        static_route_dest.text = kwargs.pop('static_route_dest')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ip_rtm_config_route_static_route_oif_static_route_oif_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ip = ET.SubElement(rbridge_id, "ip")
        rtm_config = ET.SubElement(ip, "rtm-config", xmlns="urn:brocade.com:mgmt:brocade-rtm")
        route = ET.SubElement(rtm_config, "route")
        static_route_oif = ET.SubElement(route, "static-route-oif")
        static_route_dest_key = ET.SubElement(static_route_oif, "static-route-dest")
        static_route_dest_key.text = kwargs.pop('static_route_dest')
        static_route_oif_name_key = ET.SubElement(static_route_oif, "static-route-oif-name")
        static_route_oif_name_key.text = kwargs.pop('static_route_oif_name')
        static_route_oif_type = ET.SubElement(static_route_oif, "static-route-oif-type")
        static_route_oif_type.text = kwargs.pop('static_route_oif_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ip_rtm_config_route_static_route_oif_static_route_oif_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ip = ET.SubElement(rbridge_id, "ip")
        rtm_config = ET.SubElement(ip, "rtm-config", xmlns="urn:brocade.com:mgmt:brocade-rtm")
        route = ET.SubElement(rtm_config, "route")
        static_route_oif = ET.SubElement(route, "static-route-oif")
        static_route_dest_key = ET.SubElement(static_route_oif, "static-route-dest")
        static_route_dest_key.text = kwargs.pop('static_route_dest')
        static_route_oif_type_key = ET.SubElement(static_route_oif, "static-route-oif-type")
        static_route_oif_type_key.text = kwargs.pop('static_route_oif_type')
        static_route_oif_name = ET.SubElement(static_route_oif, "static-route-oif-name")
        static_route_oif_name.text = kwargs.pop('static_route_oif_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ip_rtm_config_route_static_route_oif_route_attributes_metric(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ip = ET.SubElement(rbridge_id, "ip")
        rtm_config = ET.SubElement(ip, "rtm-config", xmlns="urn:brocade.com:mgmt:brocade-rtm")
        route = ET.SubElement(rtm_config, "route")
        static_route_oif = ET.SubElement(route, "static-route-oif")
        static_route_dest_key = ET.SubElement(static_route_oif, "static-route-dest")
        static_route_dest_key.text = kwargs.pop('static_route_dest')
        static_route_oif_type_key = ET.SubElement(static_route_oif, "static-route-oif-type")
        static_route_oif_type_key.text = kwargs.pop('static_route_oif_type')
        static_route_oif_name_key = ET.SubElement(static_route_oif, "static-route-oif-name")
        static_route_oif_name_key.text = kwargs.pop('static_route_oif_name')
        route_attributes = ET.SubElement(static_route_oif, "route-attributes")
        metric = ET.SubElement(route_attributes, "metric")
        metric.text = kwargs.pop('metric')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ip_rtm_config_route_static_route_oif_route_attributes_distance(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ip = ET.SubElement(rbridge_id, "ip")
        rtm_config = ET.SubElement(ip, "rtm-config", xmlns="urn:brocade.com:mgmt:brocade-rtm")
        route = ET.SubElement(rtm_config, "route")
        static_route_oif = ET.SubElement(route, "static-route-oif")
        static_route_dest_key = ET.SubElement(static_route_oif, "static-route-dest")
        static_route_dest_key.text = kwargs.pop('static_route_dest')
        static_route_oif_type_key = ET.SubElement(static_route_oif, "static-route-oif-type")
        static_route_oif_type_key.text = kwargs.pop('static_route_oif_type')
        static_route_oif_name_key = ET.SubElement(static_route_oif, "static-route-oif-name")
        static_route_oif_name_key.text = kwargs.pop('static_route_oif_name')
        route_attributes = ET.SubElement(static_route_oif, "route-attributes")
        distance = ET.SubElement(route_attributes, "distance")
        distance.text = kwargs.pop('distance')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ip_rtm_config_route_static_route_oif_route_attributes_tag(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ip = ET.SubElement(rbridge_id, "ip")
        rtm_config = ET.SubElement(ip, "rtm-config", xmlns="urn:brocade.com:mgmt:brocade-rtm")
        route = ET.SubElement(rtm_config, "route")
        static_route_oif = ET.SubElement(route, "static-route-oif")
        static_route_dest_key = ET.SubElement(static_route_oif, "static-route-dest")
        static_route_dest_key.text = kwargs.pop('static_route_dest')
        static_route_oif_type_key = ET.SubElement(static_route_oif, "static-route-oif-type")
        static_route_oif_type_key.text = kwargs.pop('static_route_oif_type')
        static_route_oif_name_key = ET.SubElement(static_route_oif, "static-route-oif-name")
        static_route_oif_name_key.text = kwargs.pop('static_route_oif_name')
        route_attributes = ET.SubElement(static_route_oif, "route-attributes")
        tag = ET.SubElement(route_attributes, "tag")
        tag.text = kwargs.pop('tag')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ip_imprt_routes_src_vrf(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ip = ET.SubElement(rbridge_id, "ip")
        imprt = ET.SubElement(ip, "import", xmlns="urn:brocade.com:mgmt:brocade-rtm")
        routes = ET.SubElement(imprt, "routes")
        route_map_key = ET.SubElement(routes, "route-map")
        route_map_key.text = kwargs.pop('route_map')
        src_vrf = ET.SubElement(routes, "src-vrf")
        src_vrf.text = kwargs.pop('src_vrf')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ip_imprt_routes_route_map(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ip = ET.SubElement(rbridge_id, "ip")
        imprt = ET.SubElement(ip, "import", xmlns="urn:brocade.com:mgmt:brocade-rtm")
        routes = ET.SubElement(imprt, "routes")
        src_vrf_key = ET.SubElement(routes, "src-vrf")
        src_vrf_key.text = kwargs.pop('src_vrf')
        route_map = ET.SubElement(routes, "route-map")
        route_map.text = kwargs.pop('route_map')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_vrf(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf = ET.SubElement(ospf, "vrf")
        vrf.text = kwargs.pop('vrf')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_area_area_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id = ET.SubElement(area, "area-id")
        area_id.text = kwargs.pop('area_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_area_normal(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        normal = ET.SubElement(area, "normal")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_area_nssa_metric_nssa_area_metric(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        nssa = ET.SubElement(area, "nssa")
        metric = ET.SubElement(nssa, "metric")
        nssa_area_metric = ET.SubElement(metric, "nssa-area-metric")
        nssa_area_metric.text = kwargs.pop('nssa_area_metric')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_area_nssa_area_default_information_originate_area_default_information_originate_metric(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        nssa = ET.SubElement(area, "nssa")
        area_default_information_originate = ET.SubElement(nssa, "area-default-information-originate")
        area_default_information_originate_metric = ET.SubElement(area_default_information_originate, "area-default-information-originate-metric")
        area_default_information_originate_metric.text = kwargs.pop('area_default_information_originate_metric')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_area_nssa_area_default_information_originate_area_default_information_originate_metric_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        nssa = ET.SubElement(area, "nssa")
        area_default_information_originate = ET.SubElement(nssa, "area-default-information-originate")
        area_default_information_originate_metric_type = ET.SubElement(area_default_information_originate, "area-default-information-originate-metric-type")
        area_default_information_originate_metric_type.text = kwargs.pop('area_default_information_originate_metric_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_area_nssa_no_redistribution(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        nssa = ET.SubElement(area, "nssa")
        no_redistribution = ET.SubElement(nssa, "no-redistribution")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_area_nssa_nssa_area_no_summary(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        nssa = ET.SubElement(area, "nssa")
        nssa_area_no_summary = ET.SubElement(nssa, "nssa-area-no-summary")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_area_nssa_translator_always(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        nssa = ET.SubElement(area, "nssa")
        translator_always = ET.SubElement(nssa, "translator-always")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_area_nssa_translator_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        nssa = ET.SubElement(area, "nssa")
        translator_interval = ET.SubElement(nssa, "translator-interval")
        translator_interval.text = kwargs.pop('translator_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_area_stub_stub_area_no_summary(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        stub = ET.SubElement(area, "stub")
        stub_area_no_summary = ET.SubElement(stub, "stub-area-no-summary")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_area_stub_stub_area_metric(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        stub = ET.SubElement(area, "stub")
        stub_area_metric = ET.SubElement(stub, "stub-area-metric")
        stub_area_metric.text = kwargs.pop('stub_area_metric')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_area_authentication_ipsec_auth_key_config_spi(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        authentication = ET.SubElement(area, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        spi = ET.SubElement(ipsec_auth_key_config, "spi")
        spi.text = kwargs.pop('spi')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_area_authentication_ipsec_auth_key_config_ch_algorithm_ca_ah_algorithm_ah(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        authentication = ET.SubElement(area, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_ah_algorithm = ET.SubElement(ch_algorithm, "ca-ah-algorithm")
        ah = ET.SubElement(ca_ah_algorithm, "ah")
        ah.text = kwargs.pop('ah')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_area_authentication_ipsec_auth_key_config_ch_algorithm_ca_ah_algorithm_ah_no_encrypt(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        authentication = ET.SubElement(area, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_ah_algorithm = ET.SubElement(ch_algorithm, "ca-ah-algorithm")
        ah_no_encrypt = ET.SubElement(ca_ah_algorithm, "ah-no-encrypt")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_area_authentication_ipsec_auth_key_config_ch_algorithm_ca_ah_algorithm_ah_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        authentication = ET.SubElement(area, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_ah_algorithm = ET.SubElement(ch_algorithm, "ca-ah-algorithm")
        ah_key = ET.SubElement(ca_ah_algorithm, "ah-key")
        ah_key.text = kwargs.pop('ah_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_area_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        authentication = ET.SubElement(area, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp = ET.SubElement(ca_esp_algorithm, "esp")
        esp.text = kwargs.pop('esp')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_area_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp_no_encrypt(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        authentication = ET.SubElement(area, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp_no_encrypt = ET.SubElement(ca_esp_algorithm, "esp-no-encrypt")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_area_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        authentication = ET.SubElement(area, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp_key = ET.SubElement(ca_esp_algorithm, "esp-key")
        esp_key.text = kwargs.pop('esp_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_area_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp_auth(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        authentication = ET.SubElement(area, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp_auth = ET.SubElement(ca_esp_algorithm, "esp-auth")
        esp_auth.text = kwargs.pop('esp_auth')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_area_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp_auth_no_encrypt(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        authentication = ET.SubElement(area, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp_auth_no_encrypt = ET.SubElement(ca_esp_algorithm, "esp-auth-no-encrypt")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_area_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp_auth_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        authentication = ET.SubElement(area, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp_auth_key = ET.SubElement(ca_esp_algorithm, "esp-auth-key")
        esp_auth_key.text = kwargs.pop('esp_auth_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_area_virtual_link_virtual_link_neighbor(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        virtual_link = ET.SubElement(area, "virtual-link")
        virtual_link_neighbor = ET.SubElement(virtual_link, "virtual-link-neighbor")
        virtual_link_neighbor.text = kwargs.pop('virtual_link_neighbor')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_area_virtual_link_link_properties_link_interval_properties_hello_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        virtual_link = ET.SubElement(area, "virtual-link")
        virtual_link_neighbor_key = ET.SubElement(virtual_link, "virtual-link-neighbor")
        virtual_link_neighbor_key.text = kwargs.pop('virtual_link_neighbor')
        link_properties = ET.SubElement(virtual_link, "link-properties")
        link_interval_properties = ET.SubElement(link_properties, "link-interval-properties")
        hello_interval = ET.SubElement(link_interval_properties, "hello-interval")
        hello_interval.text = kwargs.pop('hello_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_area_virtual_link_link_properties_link_interval_properties_dead_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        virtual_link = ET.SubElement(area, "virtual-link")
        virtual_link_neighbor_key = ET.SubElement(virtual_link, "virtual-link-neighbor")
        virtual_link_neighbor_key.text = kwargs.pop('virtual_link_neighbor')
        link_properties = ET.SubElement(virtual_link, "link-properties")
        link_interval_properties = ET.SubElement(link_properties, "link-interval-properties")
        dead_interval = ET.SubElement(link_interval_properties, "dead-interval")
        dead_interval.text = kwargs.pop('dead_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_area_virtual_link_link_properties_link_interval_properties_hello_jitter(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        virtual_link = ET.SubElement(area, "virtual-link")
        virtual_link_neighbor_key = ET.SubElement(virtual_link, "virtual-link-neighbor")
        virtual_link_neighbor_key.text = kwargs.pop('virtual_link_neighbor')
        link_properties = ET.SubElement(virtual_link, "link-properties")
        link_interval_properties = ET.SubElement(link_properties, "link-interval-properties")
        hello_jitter = ET.SubElement(link_interval_properties, "hello-jitter")
        hello_jitter.text = kwargs.pop('hello_jitter')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_area_virtual_link_link_properties_link_interval_properties_retransmit_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        virtual_link = ET.SubElement(area, "virtual-link")
        virtual_link_neighbor_key = ET.SubElement(virtual_link, "virtual-link-neighbor")
        virtual_link_neighbor_key.text = kwargs.pop('virtual_link_neighbor')
        link_properties = ET.SubElement(virtual_link, "link-properties")
        link_interval_properties = ET.SubElement(link_properties, "link-interval-properties")
        retransmit_interval = ET.SubElement(link_interval_properties, "retransmit-interval")
        retransmit_interval.text = kwargs.pop('retransmit_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_area_virtual_link_link_properties_link_interval_properties_transmit_delay(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        virtual_link = ET.SubElement(area, "virtual-link")
        virtual_link_neighbor_key = ET.SubElement(virtual_link, "virtual-link-neighbor")
        virtual_link_neighbor_key.text = kwargs.pop('virtual_link_neighbor')
        link_properties = ET.SubElement(virtual_link, "link-properties")
        link_interval_properties = ET.SubElement(link_properties, "link-interval-properties")
        transmit_delay = ET.SubElement(link_interval_properties, "transmit-delay")
        transmit_delay.text = kwargs.pop('transmit_delay')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_area_virtual_link_link_properties_authentication_ipsec_auth_key_config_spi(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        virtual_link = ET.SubElement(area, "virtual-link")
        virtual_link_neighbor_key = ET.SubElement(virtual_link, "virtual-link-neighbor")
        virtual_link_neighbor_key.text = kwargs.pop('virtual_link_neighbor')
        link_properties = ET.SubElement(virtual_link, "link-properties")
        authentication = ET.SubElement(link_properties, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        spi = ET.SubElement(ipsec_auth_key_config, "spi")
        spi.text = kwargs.pop('spi')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_area_virtual_link_link_properties_authentication_ipsec_auth_key_config_ch_algorithm_ca_ah_algorithm_ah(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        virtual_link = ET.SubElement(area, "virtual-link")
        virtual_link_neighbor_key = ET.SubElement(virtual_link, "virtual-link-neighbor")
        virtual_link_neighbor_key.text = kwargs.pop('virtual_link_neighbor')
        link_properties = ET.SubElement(virtual_link, "link-properties")
        authentication = ET.SubElement(link_properties, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_ah_algorithm = ET.SubElement(ch_algorithm, "ca-ah-algorithm")
        ah = ET.SubElement(ca_ah_algorithm, "ah")
        ah.text = kwargs.pop('ah')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_area_virtual_link_link_properties_authentication_ipsec_auth_key_config_ch_algorithm_ca_ah_algorithm_ah_no_encrypt(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        virtual_link = ET.SubElement(area, "virtual-link")
        virtual_link_neighbor_key = ET.SubElement(virtual_link, "virtual-link-neighbor")
        virtual_link_neighbor_key.text = kwargs.pop('virtual_link_neighbor')
        link_properties = ET.SubElement(virtual_link, "link-properties")
        authentication = ET.SubElement(link_properties, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_ah_algorithm = ET.SubElement(ch_algorithm, "ca-ah-algorithm")
        ah_no_encrypt = ET.SubElement(ca_ah_algorithm, "ah-no-encrypt")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_area_virtual_link_link_properties_authentication_ipsec_auth_key_config_ch_algorithm_ca_ah_algorithm_ah_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        virtual_link = ET.SubElement(area, "virtual-link")
        virtual_link_neighbor_key = ET.SubElement(virtual_link, "virtual-link-neighbor")
        virtual_link_neighbor_key.text = kwargs.pop('virtual_link_neighbor')
        link_properties = ET.SubElement(virtual_link, "link-properties")
        authentication = ET.SubElement(link_properties, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_ah_algorithm = ET.SubElement(ch_algorithm, "ca-ah-algorithm")
        ah_key = ET.SubElement(ca_ah_algorithm, "ah-key")
        ah_key.text = kwargs.pop('ah_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_area_virtual_link_link_properties_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        virtual_link = ET.SubElement(area, "virtual-link")
        virtual_link_neighbor_key = ET.SubElement(virtual_link, "virtual-link-neighbor")
        virtual_link_neighbor_key.text = kwargs.pop('virtual_link_neighbor')
        link_properties = ET.SubElement(virtual_link, "link-properties")
        authentication = ET.SubElement(link_properties, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp = ET.SubElement(ca_esp_algorithm, "esp")
        esp.text = kwargs.pop('esp')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_area_virtual_link_link_properties_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp_no_encrypt(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        virtual_link = ET.SubElement(area, "virtual-link")
        virtual_link_neighbor_key = ET.SubElement(virtual_link, "virtual-link-neighbor")
        virtual_link_neighbor_key.text = kwargs.pop('virtual_link_neighbor')
        link_properties = ET.SubElement(virtual_link, "link-properties")
        authentication = ET.SubElement(link_properties, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp_no_encrypt = ET.SubElement(ca_esp_algorithm, "esp-no-encrypt")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_area_virtual_link_link_properties_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        virtual_link = ET.SubElement(area, "virtual-link")
        virtual_link_neighbor_key = ET.SubElement(virtual_link, "virtual-link-neighbor")
        virtual_link_neighbor_key.text = kwargs.pop('virtual_link_neighbor')
        link_properties = ET.SubElement(virtual_link, "link-properties")
        authentication = ET.SubElement(link_properties, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp_key = ET.SubElement(ca_esp_algorithm, "esp-key")
        esp_key.text = kwargs.pop('esp_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_area_virtual_link_link_properties_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp_auth(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        virtual_link = ET.SubElement(area, "virtual-link")
        virtual_link_neighbor_key = ET.SubElement(virtual_link, "virtual-link-neighbor")
        virtual_link_neighbor_key.text = kwargs.pop('virtual_link_neighbor')
        link_properties = ET.SubElement(virtual_link, "link-properties")
        authentication = ET.SubElement(link_properties, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp_auth = ET.SubElement(ca_esp_algorithm, "esp-auth")
        esp_auth.text = kwargs.pop('esp_auth')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_area_virtual_link_link_properties_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp_auth_no_encrypt(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        virtual_link = ET.SubElement(area, "virtual-link")
        virtual_link_neighbor_key = ET.SubElement(virtual_link, "virtual-link-neighbor")
        virtual_link_neighbor_key.text = kwargs.pop('virtual_link_neighbor')
        link_properties = ET.SubElement(virtual_link, "link-properties")
        authentication = ET.SubElement(link_properties, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp_auth_no_encrypt = ET.SubElement(ca_esp_algorithm, "esp-auth-no-encrypt")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_area_virtual_link_link_properties_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp_auth_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        virtual_link = ET.SubElement(area, "virtual-link")
        virtual_link_neighbor_key = ET.SubElement(virtual_link, "virtual-link-neighbor")
        virtual_link_neighbor_key.text = kwargs.pop('virtual_link_neighbor')
        link_properties = ET.SubElement(virtual_link, "link-properties")
        authentication = ET.SubElement(link_properties, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp_auth_key = ET.SubElement(ca_esp_algorithm, "esp-auth-key")
        esp_auth_key.text = kwargs.pop('esp_auth_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_area_area_range_range_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        area_range = ET.SubElement(area, "area-range")
        range_address = ET.SubElement(area_range, "range-address")
        range_address.text = kwargs.pop('range_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_area_area_range_range_effect(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        area_range = ET.SubElement(area, "area-range")
        range_address_key = ET.SubElement(area_range, "range-address")
        range_address_key.text = kwargs.pop('range_address')
        range_effect = ET.SubElement(area_range, "range-effect")
        range_effect.text = kwargs.pop('range_effect')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_area_area_range_range_cost(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        area_range = ET.SubElement(area, "area-range")
        range_address_key = ET.SubElement(area_range, "range-address")
        range_address_key.text = kwargs.pop('range_address')
        range_cost = ET.SubElement(area_range, "range-cost")
        range_cost.text = kwargs.pop('range_cost')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_auto_cost_reference_bandwidth(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        auto_cost = ET.SubElement(ospf, "auto-cost")
        reference_bandwidth = ET.SubElement(auto_cost, "reference-bandwidth")
        reference_bandwidth.text = kwargs.pop('reference_bandwidth')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_database_overflow_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        database_overflow_interval = ET.SubElement(ospf, "database-overflow-interval")
        database_overflow_interval.text = kwargs.pop('database_overflow_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_global_default_information_originate_global_default_information_originate_always(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        global_default_information_originate = ET.SubElement(ospf, "global-default-information-originate")
        global_default_information_originate_always = ET.SubElement(global_default_information_originate, "global-default-information-originate-always")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_global_default_information_originate_global_default_information_originate_metric(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        global_default_information_originate = ET.SubElement(ospf, "global-default-information-originate")
        global_default_information_originate_metric = ET.SubElement(global_default_information_originate, "global-default-information-originate-metric")
        global_default_information_originate_metric.text = kwargs.pop('global_default_information_originate_metric')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_global_default_information_originate_global_default_information_originate_metric_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        global_default_information_originate = ET.SubElement(ospf, "global-default-information-originate")
        global_default_information_originate_metric_type = ET.SubElement(global_default_information_originate, "global-default-information-originate-metric-type")
        global_default_information_originate_metric_type.text = kwargs.pop('global_default_information_originate_metric_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_default_metric(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        default_metric = ET.SubElement(ospf, "default-metric")
        default_metric.text = kwargs.pop('default_metric')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_default_passive_interface(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        default_passive_interface = ET.SubElement(ospf, "default-passive-interface")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_distance_route_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        distance = ET.SubElement(ospf, "distance")
        route_type = ET.SubElement(distance, "route-type")
        route_type.text = kwargs.pop('route_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_distance_distance_value(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        distance = ET.SubElement(ospf, "distance")
        route_type_key = ET.SubElement(distance, "route-type")
        route_type_key.text = kwargs.pop('route_type')
        distance_value = ET.SubElement(distance, "distance-value")
        distance_value.text = kwargs.pop('distance_value')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_distribute_list_route_map_distribute_list_route_map_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        distribute_list = ET.SubElement(ospf, "distribute-list")
        route_map = ET.SubElement(distribute_list, "route-map")
        distribute_list_route_map_name = ET.SubElement(route_map, "distribute-list-route-map-name")
        distribute_list_route_map_name.text = kwargs.pop('distribute_list_route_map_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_distribute_list_route_map_distribute_list_route_map_in(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        distribute_list = ET.SubElement(ospf, "distribute-list")
        route_map = ET.SubElement(distribute_list, "route-map")
        distribute_list_route_map_in = ET.SubElement(route_map, "distribute-list-route-map-in")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_distribute_list_prefix_list_distribute_list_prefix_list_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        distribute_list = ET.SubElement(ospf, "distribute-list")
        prefix_list = ET.SubElement(distribute_list, "prefix-list")
        distribute_list_prefix_list_name = ET.SubElement(prefix_list, "distribute-list-prefix-list-name")
        distribute_list_prefix_list_name.text = kwargs.pop('distribute_list_prefix_list_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_distribute_list_prefix_list_distribute_list_prefix_list_in(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        distribute_list = ET.SubElement(ospf, "distribute-list")
        prefix_list = ET.SubElement(distribute_list, "prefix-list")
        distribute_list_prefix_list_in = ET.SubElement(prefix_list, "distribute-list-prefix-list-in")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_external_lsdb_limit(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        external_lsdb_limit = ET.SubElement(ospf, "external-lsdb-limit")
        external_lsdb_limit.text = kwargs.pop('external_lsdb_limit')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_graceful_restart_helper_graceful_restart_helper_disable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        graceful_restart = ET.SubElement(ospf, "graceful-restart")
        helper = ET.SubElement(graceful_restart, "helper")
        graceful_restart_helper_disable = ET.SubElement(helper, "graceful-restart-helper-disable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_graceful_restart_helper_graceful_restart_helper_strict_lsa_checking(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        graceful_restart = ET.SubElement(ospf, "graceful-restart")
        helper = ET.SubElement(graceful_restart, "helper")
        graceful_restart_helper_strict_lsa_checking = ET.SubElement(helper, "graceful-restart-helper-strict-lsa-checking")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_key_add_remove_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        key_add_remove_interval = ET.SubElement(ospf, "key-add-remove-interval")
        key_add_remove_interval.text = kwargs.pop('key_add_remove_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_key_rollover_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        key_rollover_interval = ET.SubElement(ospf, "key-rollover-interval")
        key_rollover_interval.text = kwargs.pop('key_rollover_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_log_status_change(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        log_status_change = ET.SubElement(ospf, "log-status-change")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_global_metric_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        global_metric_type = ET.SubElement(ospf, "global-metric-type")
        global_metric_type.text = kwargs.pop('global_metric_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_redistribute_redistribute_connected_connected_route_map(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        redistribute = ET.SubElement(ospf, "redistribute")
        redistribute_connected = ET.SubElement(redistribute, "redistribute-connected")
        connected_route_map = ET.SubElement(redistribute_connected, "connected-route-map")
        connected_route_map.text = kwargs.pop('connected_route_map')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_redistribute_redistribute_connected_redistribute_connected_metric(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        redistribute = ET.SubElement(ospf, "redistribute")
        redistribute_connected = ET.SubElement(redistribute, "redistribute-connected")
        redistribute_connected_metric = ET.SubElement(redistribute_connected, "redistribute-connected-metric")
        redistribute_connected_metric.text = kwargs.pop('redistribute_connected_metric')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_redistribute_redistribute_connected_redistribute_connected_metric_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        redistribute = ET.SubElement(ospf, "redistribute")
        redistribute_connected = ET.SubElement(redistribute, "redistribute-connected")
        redistribute_connected_metric_type = ET.SubElement(redistribute_connected, "redistribute-connected-metric-type")
        redistribute_connected_metric_type.text = kwargs.pop('redistribute_connected_metric_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_redistribute_redistribute_static_static_route_map(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        redistribute = ET.SubElement(ospf, "redistribute")
        redistribute_static = ET.SubElement(redistribute, "redistribute-static")
        static_route_map = ET.SubElement(redistribute_static, "static-route-map")
        static_route_map.text = kwargs.pop('static_route_map')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_redistribute_redistribute_static_redistribute_static_metric(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        redistribute = ET.SubElement(ospf, "redistribute")
        redistribute_static = ET.SubElement(redistribute, "redistribute-static")
        redistribute_static_metric = ET.SubElement(redistribute_static, "redistribute-static-metric")
        redistribute_static_metric.text = kwargs.pop('redistribute_static_metric')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_redistribute_redistribute_static_redistribute_static_metric_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        redistribute = ET.SubElement(ospf, "redistribute")
        redistribute_static = ET.SubElement(redistribute, "redistribute-static")
        redistribute_static_metric_type = ET.SubElement(redistribute_static, "redistribute-static-metric-type")
        redistribute_static_metric_type.text = kwargs.pop('redistribute_static_metric_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_redistribute_redistribute_bgp_bgp_route_map(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        redistribute = ET.SubElement(ospf, "redistribute")
        redistribute_bgp = ET.SubElement(redistribute, "redistribute-bgp")
        bgp_route_map = ET.SubElement(redistribute_bgp, "bgp-route-map")
        bgp_route_map.text = kwargs.pop('bgp_route_map')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_redistribute_redistribute_bgp_redistribute_bgp_metric(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        redistribute = ET.SubElement(ospf, "redistribute")
        redistribute_bgp = ET.SubElement(redistribute, "redistribute-bgp")
        redistribute_bgp_metric = ET.SubElement(redistribute_bgp, "redistribute-bgp-metric")
        redistribute_bgp_metric.text = kwargs.pop('redistribute_bgp_metric')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_redistribute_redistribute_bgp_redistribute_bgp_metric_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        redistribute = ET.SubElement(ospf, "redistribute")
        redistribute_bgp = ET.SubElement(redistribute, "redistribute-bgp")
        redistribute_bgp_metric_type = ET.SubElement(redistribute_bgp, "redistribute-bgp-metric-type")
        redistribute_bgp_metric_type.text = kwargs.pop('redistribute_bgp_metric_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_redistribute_redistribute_ospf_ospf_route_map(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        redistribute = ET.SubElement(ospf, "redistribute")
        redistribute_ospf = ET.SubElement(redistribute, "redistribute-ospf")
        ospf_route_map = ET.SubElement(redistribute_ospf, "ospf-route-map")
        ospf_route_map.text = kwargs.pop('ospf_route_map')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_redistribute_redistribute_ospf_redistribute_ospf_metric(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        redistribute = ET.SubElement(ospf, "redistribute")
        redistribute_ospf = ET.SubElement(redistribute, "redistribute-ospf")
        redistribute_ospf_metric = ET.SubElement(redistribute_ospf, "redistribute-ospf-metric")
        redistribute_ospf_metric.text = kwargs.pop('redistribute_ospf_metric')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_redistribute_redistribute_ospf_redistribute_ospf_metric_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        redistribute = ET.SubElement(ospf, "redistribute")
        redistribute_ospf = ET.SubElement(redistribute, "redistribute-ospf")
        redistribute_ospf_metric_type = ET.SubElement(redistribute_ospf, "redistribute-ospf-metric-type")
        redistribute_ospf_metric_type.text = kwargs.pop('redistribute_ospf_metric_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_summary_address_summary_address_value(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        summary_address = ET.SubElement(ospf, "summary-address")
        summary_address_value = ET.SubElement(summary_address, "summary-address-value")
        summary_address_value.text = kwargs.pop('summary_address_value')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_timers_lsa_group_pacing(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        timers = ET.SubElement(ospf, "timers")
        lsa_group_pacing = ET.SubElement(timers, "lsa-group-pacing")
        lsa_group_pacing.text = kwargs.pop('lsa_group_pacing')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_timers_spf_spf_delay(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        timers = ET.SubElement(ospf, "timers")
        spf = ET.SubElement(timers, "spf")
        spf_delay = ET.SubElement(spf, "spf-delay")
        spf_delay.text = kwargs.pop('spf_delay')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_timers_spf_spf_hold_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        timers = ET.SubElement(ospf, "timers")
        spf = ET.SubElement(timers, "spf")
        spf_hold_time = ET.SubElement(spf, "spf-hold-time")
        spf_hold_time.text = kwargs.pop('spf_hold_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_nonstop_routing(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        nonstop_routing = ET.SubElement(ospf, "nonstop-routing")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_maximum_paths(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        maximum_paths = ET.SubElement(ospf, "maximum-paths")
        maximum_paths.text = kwargs.pop('maximum_paths')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_ipv6route_route_dest(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        ipv6route = ET.SubElement(ipv6, "ipv6route", xmlns="urn:brocade.com:mgmt:brocade-ip-forward")
        route = ET.SubElement(ipv6route, "route")
        dest = ET.SubElement(route, "dest")
        dest.text = kwargs.pop('dest')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_ipv6route_route_next_ipv6_hop_next_hop(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        ipv6route = ET.SubElement(ipv6, "ipv6route", xmlns="urn:brocade.com:mgmt:brocade-ip-forward")
        route = ET.SubElement(ipv6route, "route")
        dest_key = ET.SubElement(route, "dest")
        dest_key.text = kwargs.pop('dest')
        next = ET.SubElement(route, "next")
        ipv6_hop = ET.SubElement(next, "ipv6-hop")
        next_hop = ET.SubElement(ipv6_hop, "next-hop")
        next_hop.text = kwargs.pop('next_hop')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_prefix_list_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        prefix_list = ET.SubElement(ipv6, "prefix-list", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        seq_keyword_key = ET.SubElement(prefix_list, "seq-keyword")
        seq_keyword_key.text = kwargs.pop('seq_keyword')
        instance_key = ET.SubElement(prefix_list, "instance")
        instance_key.text = kwargs.pop('instance')
        name = ET.SubElement(prefix_list, "name")
        name.text = kwargs.pop('name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_prefix_list_seq_keyword(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        prefix_list = ET.SubElement(ipv6, "prefix-list", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(prefix_list, "name")
        name_key.text = kwargs.pop('name')
        instance_key = ET.SubElement(prefix_list, "instance")
        instance_key.text = kwargs.pop('instance')
        seq_keyword = ET.SubElement(prefix_list, "seq-keyword")
        seq_keyword.text = kwargs.pop('seq_keyword')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_prefix_list_instance(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        prefix_list = ET.SubElement(ipv6, "prefix-list", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(prefix_list, "name")
        name_key.text = kwargs.pop('name')
        seq_keyword_key = ET.SubElement(prefix_list, "seq-keyword")
        seq_keyword_key.text = kwargs.pop('seq_keyword')
        instance = ET.SubElement(prefix_list, "instance")
        instance.text = kwargs.pop('instance')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_prefix_list_action_ipp(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        prefix_list = ET.SubElement(ipv6, "prefix-list", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(prefix_list, "name")
        name_key.text = kwargs.pop('name')
        seq_keyword_key = ET.SubElement(prefix_list, "seq-keyword")
        seq_keyword_key.text = kwargs.pop('seq_keyword')
        instance_key = ET.SubElement(prefix_list, "instance")
        instance_key.text = kwargs.pop('instance')
        action_ipp = ET.SubElement(prefix_list, "action-ipp")
        action_ipp.text = kwargs.pop('action_ipp')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_prefix_list_ipv6_prefix_ipp(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        prefix_list = ET.SubElement(ipv6, "prefix-list", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(prefix_list, "name")
        name_key.text = kwargs.pop('name')
        seq_keyword_key = ET.SubElement(prefix_list, "seq-keyword")
        seq_keyword_key.text = kwargs.pop('seq_keyword')
        instance_key = ET.SubElement(prefix_list, "instance")
        instance_key.text = kwargs.pop('instance')
        ipv6_prefix_ipp = ET.SubElement(prefix_list, "ipv6-prefix-ipp")
        ipv6_prefix_ipp.text = kwargs.pop('ipv6_prefix_ipp')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_prefix_list_ge_ipp(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        prefix_list = ET.SubElement(ipv6, "prefix-list", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(prefix_list, "name")
        name_key.text = kwargs.pop('name')
        seq_keyword_key = ET.SubElement(prefix_list, "seq-keyword")
        seq_keyword_key.text = kwargs.pop('seq_keyword')
        instance_key = ET.SubElement(prefix_list, "instance")
        instance_key.text = kwargs.pop('instance')
        ge_ipp = ET.SubElement(prefix_list, "ge-ipp")
        ge_ipp.text = kwargs.pop('ge_ipp')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_prefix_list_le_ipp(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        prefix_list = ET.SubElement(ipv6, "prefix-list", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(prefix_list, "name")
        name_key.text = kwargs.pop('name')
        seq_keyword_key = ET.SubElement(prefix_list, "seq-keyword")
        seq_keyword_key.text = kwargs.pop('seq_keyword')
        instance_key = ET.SubElement(prefix_list, "instance")
        instance_key.text = kwargs.pop('instance')
        le_ipp = ET.SubElement(prefix_list, "le-ipp")
        le_ipp.text = kwargs.pop('le_ipp')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_ipv6_global_cmds_nd_global_dad_global_dad_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        ipv6_global_cmds = ET.SubElement(ipv6, "ipv6-global-cmds", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        nd_global = ET.SubElement(ipv6_global_cmds, "nd-global")
        dad = ET.SubElement(nd_global, "dad")
        global_dad_time = ET.SubElement(dad, "global-dad-time")
        global_dad_time.text = kwargs.pop('global_dad_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_route_static_route_nh_static_route_dest(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        route = ET.SubElement(ipv6, "route", xmlns="urn:brocade.com:mgmt:brocade-ipv6-rtm")
        static_route_nh = ET.SubElement(route, "static-route-nh")
        static_route_next_hop_key = ET.SubElement(static_route_nh, "static-route-next-hop")
        static_route_next_hop_key.text = kwargs.pop('static_route_next_hop')
        static_route_dest = ET.SubElement(static_route_nh, "static-route-dest")
        static_route_dest.text = kwargs.pop('static_route_dest')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_route_static_route_nh_static_route_next_hop(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        route = ET.SubElement(ipv6, "route", xmlns="urn:brocade.com:mgmt:brocade-ipv6-rtm")
        static_route_nh = ET.SubElement(route, "static-route-nh")
        static_route_dest_key = ET.SubElement(static_route_nh, "static-route-dest")
        static_route_dest_key.text = kwargs.pop('static_route_dest')
        static_route_next_hop = ET.SubElement(static_route_nh, "static-route-next-hop")
        static_route_next_hop.text = kwargs.pop('static_route_next_hop')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_route_static_route_nh_route_attributes_metric(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        route = ET.SubElement(ipv6, "route", xmlns="urn:brocade.com:mgmt:brocade-ipv6-rtm")
        static_route_nh = ET.SubElement(route, "static-route-nh")
        static_route_dest_key = ET.SubElement(static_route_nh, "static-route-dest")
        static_route_dest_key.text = kwargs.pop('static_route_dest')
        static_route_next_hop_key = ET.SubElement(static_route_nh, "static-route-next-hop")
        static_route_next_hop_key.text = kwargs.pop('static_route_next_hop')
        route_attributes = ET.SubElement(static_route_nh, "route-attributes")
        metric = ET.SubElement(route_attributes, "metric")
        metric.text = kwargs.pop('metric')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_route_static_route_nh_route_attributes_distance(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        route = ET.SubElement(ipv6, "route", xmlns="urn:brocade.com:mgmt:brocade-ipv6-rtm")
        static_route_nh = ET.SubElement(route, "static-route-nh")
        static_route_dest_key = ET.SubElement(static_route_nh, "static-route-dest")
        static_route_dest_key.text = kwargs.pop('static_route_dest')
        static_route_next_hop_key = ET.SubElement(static_route_nh, "static-route-next-hop")
        static_route_next_hop_key.text = kwargs.pop('static_route_next_hop')
        route_attributes = ET.SubElement(static_route_nh, "route-attributes")
        distance = ET.SubElement(route_attributes, "distance")
        distance.text = kwargs.pop('distance')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_route_static_route_nh_route_attributes_tag(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        route = ET.SubElement(ipv6, "route", xmlns="urn:brocade.com:mgmt:brocade-ipv6-rtm")
        static_route_nh = ET.SubElement(route, "static-route-nh")
        static_route_dest_key = ET.SubElement(static_route_nh, "static-route-dest")
        static_route_dest_key.text = kwargs.pop('static_route_dest')
        static_route_next_hop_key = ET.SubElement(static_route_nh, "static-route-next-hop")
        static_route_next_hop_key.text = kwargs.pop('static_route_next_hop')
        route_attributes = ET.SubElement(static_route_nh, "route-attributes")
        tag = ET.SubElement(route_attributes, "tag")
        tag.text = kwargs.pop('tag')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_route_static_route_oif_static_route_dest(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        route = ET.SubElement(ipv6, "route", xmlns="urn:brocade.com:mgmt:brocade-ipv6-rtm")
        static_route_oif = ET.SubElement(route, "static-route-oif")
        static_route_oif_type_key = ET.SubElement(static_route_oif, "static-route-oif-type")
        static_route_oif_type_key.text = kwargs.pop('static_route_oif_type')
        static_route_oif_name_key = ET.SubElement(static_route_oif, "static-route-oif-name")
        static_route_oif_name_key.text = kwargs.pop('static_route_oif_name')
        static_route_dest = ET.SubElement(static_route_oif, "static-route-dest")
        static_route_dest.text = kwargs.pop('static_route_dest')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_route_static_route_oif_static_route_oif_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        route = ET.SubElement(ipv6, "route", xmlns="urn:brocade.com:mgmt:brocade-ipv6-rtm")
        static_route_oif = ET.SubElement(route, "static-route-oif")
        static_route_dest_key = ET.SubElement(static_route_oif, "static-route-dest")
        static_route_dest_key.text = kwargs.pop('static_route_dest')
        static_route_oif_name_key = ET.SubElement(static_route_oif, "static-route-oif-name")
        static_route_oif_name_key.text = kwargs.pop('static_route_oif_name')
        static_route_oif_type = ET.SubElement(static_route_oif, "static-route-oif-type")
        static_route_oif_type.text = kwargs.pop('static_route_oif_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_route_static_route_oif_static_route_oif_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        route = ET.SubElement(ipv6, "route", xmlns="urn:brocade.com:mgmt:brocade-ipv6-rtm")
        static_route_oif = ET.SubElement(route, "static-route-oif")
        static_route_dest_key = ET.SubElement(static_route_oif, "static-route-dest")
        static_route_dest_key.text = kwargs.pop('static_route_dest')
        static_route_oif_type_key = ET.SubElement(static_route_oif, "static-route-oif-type")
        static_route_oif_type_key.text = kwargs.pop('static_route_oif_type')
        static_route_oif_name = ET.SubElement(static_route_oif, "static-route-oif-name")
        static_route_oif_name.text = kwargs.pop('static_route_oif_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_route_static_route_oif_route_attributes_metric(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        route = ET.SubElement(ipv6, "route", xmlns="urn:brocade.com:mgmt:brocade-ipv6-rtm")
        static_route_oif = ET.SubElement(route, "static-route-oif")
        static_route_dest_key = ET.SubElement(static_route_oif, "static-route-dest")
        static_route_dest_key.text = kwargs.pop('static_route_dest')
        static_route_oif_type_key = ET.SubElement(static_route_oif, "static-route-oif-type")
        static_route_oif_type_key.text = kwargs.pop('static_route_oif_type')
        static_route_oif_name_key = ET.SubElement(static_route_oif, "static-route-oif-name")
        static_route_oif_name_key.text = kwargs.pop('static_route_oif_name')
        route_attributes = ET.SubElement(static_route_oif, "route-attributes")
        metric = ET.SubElement(route_attributes, "metric")
        metric.text = kwargs.pop('metric')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_route_static_route_oif_route_attributes_distance(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        route = ET.SubElement(ipv6, "route", xmlns="urn:brocade.com:mgmt:brocade-ipv6-rtm")
        static_route_oif = ET.SubElement(route, "static-route-oif")
        static_route_dest_key = ET.SubElement(static_route_oif, "static-route-dest")
        static_route_dest_key.text = kwargs.pop('static_route_dest')
        static_route_oif_type_key = ET.SubElement(static_route_oif, "static-route-oif-type")
        static_route_oif_type_key.text = kwargs.pop('static_route_oif_type')
        static_route_oif_name_key = ET.SubElement(static_route_oif, "static-route-oif-name")
        static_route_oif_name_key.text = kwargs.pop('static_route_oif_name')
        route_attributes = ET.SubElement(static_route_oif, "route-attributes")
        distance = ET.SubElement(route_attributes, "distance")
        distance.text = kwargs.pop('distance')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_route_static_route_oif_route_attributes_tag(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        route = ET.SubElement(ipv6, "route", xmlns="urn:brocade.com:mgmt:brocade-ipv6-rtm")
        static_route_oif = ET.SubElement(route, "static-route-oif")
        static_route_dest_key = ET.SubElement(static_route_oif, "static-route-dest")
        static_route_dest_key.text = kwargs.pop('static_route_dest')
        static_route_oif_type_key = ET.SubElement(static_route_oif, "static-route-oif-type")
        static_route_oif_type_key.text = kwargs.pop('static_route_oif_type')
        static_route_oif_name_key = ET.SubElement(static_route_oif, "static-route-oif-name")
        static_route_oif_name_key.text = kwargs.pop('static_route_oif_name')
        route_attributes = ET.SubElement(static_route_oif, "route-attributes")
        tag = ET.SubElement(route_attributes, "tag")
        tag.text = kwargs.pop('tag')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_route_link_local_static_route_nh_link_local_static_route_dest(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        route = ET.SubElement(ipv6, "route", xmlns="urn:brocade.com:mgmt:brocade-ipv6-rtm")
        link_local_static_route_nh = ET.SubElement(route, "link-local-static-route-nh")
        link_local_nexthop_key = ET.SubElement(link_local_static_route_nh, "link-local-nexthop")
        link_local_nexthop_key.text = kwargs.pop('link_local_nexthop')
        link_local_route_oif_type_key = ET.SubElement(link_local_static_route_nh, "link-local-route-oif-type")
        link_local_route_oif_type_key.text = kwargs.pop('link_local_route_oif_type')
        link_local_route_oif_name_key = ET.SubElement(link_local_static_route_nh, "link-local-route-oif-name")
        link_local_route_oif_name_key.text = kwargs.pop('link_local_route_oif_name')
        link_local_static_route_dest = ET.SubElement(link_local_static_route_nh, "link-local-static-route-dest")
        link_local_static_route_dest.text = kwargs.pop('link_local_static_route_dest')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_route_link_local_static_route_nh_link_local_nexthop(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        route = ET.SubElement(ipv6, "route", xmlns="urn:brocade.com:mgmt:brocade-ipv6-rtm")
        link_local_static_route_nh = ET.SubElement(route, "link-local-static-route-nh")
        link_local_static_route_dest_key = ET.SubElement(link_local_static_route_nh, "link-local-static-route-dest")
        link_local_static_route_dest_key.text = kwargs.pop('link_local_static_route_dest')
        link_local_route_oif_type_key = ET.SubElement(link_local_static_route_nh, "link-local-route-oif-type")
        link_local_route_oif_type_key.text = kwargs.pop('link_local_route_oif_type')
        link_local_route_oif_name_key = ET.SubElement(link_local_static_route_nh, "link-local-route-oif-name")
        link_local_route_oif_name_key.text = kwargs.pop('link_local_route_oif_name')
        link_local_nexthop = ET.SubElement(link_local_static_route_nh, "link-local-nexthop")
        link_local_nexthop.text = kwargs.pop('link_local_nexthop')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_route_link_local_static_route_nh_link_local_route_oif_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        route = ET.SubElement(ipv6, "route", xmlns="urn:brocade.com:mgmt:brocade-ipv6-rtm")
        link_local_static_route_nh = ET.SubElement(route, "link-local-static-route-nh")
        link_local_static_route_dest_key = ET.SubElement(link_local_static_route_nh, "link-local-static-route-dest")
        link_local_static_route_dest_key.text = kwargs.pop('link_local_static_route_dest')
        link_local_nexthop_key = ET.SubElement(link_local_static_route_nh, "link-local-nexthop")
        link_local_nexthop_key.text = kwargs.pop('link_local_nexthop')
        link_local_route_oif_name_key = ET.SubElement(link_local_static_route_nh, "link-local-route-oif-name")
        link_local_route_oif_name_key.text = kwargs.pop('link_local_route_oif_name')
        link_local_route_oif_type = ET.SubElement(link_local_static_route_nh, "link-local-route-oif-type")
        link_local_route_oif_type.text = kwargs.pop('link_local_route_oif_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_route_link_local_static_route_nh_link_local_route_oif_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        route = ET.SubElement(ipv6, "route", xmlns="urn:brocade.com:mgmt:brocade-ipv6-rtm")
        link_local_static_route_nh = ET.SubElement(route, "link-local-static-route-nh")
        link_local_static_route_dest_key = ET.SubElement(link_local_static_route_nh, "link-local-static-route-dest")
        link_local_static_route_dest_key.text = kwargs.pop('link_local_static_route_dest')
        link_local_nexthop_key = ET.SubElement(link_local_static_route_nh, "link-local-nexthop")
        link_local_nexthop_key.text = kwargs.pop('link_local_nexthop')
        link_local_route_oif_type_key = ET.SubElement(link_local_static_route_nh, "link-local-route-oif-type")
        link_local_route_oif_type_key.text = kwargs.pop('link_local_route_oif_type')
        link_local_route_oif_name = ET.SubElement(link_local_static_route_nh, "link-local-route-oif-name")
        link_local_route_oif_name.text = kwargs.pop('link_local_route_oif_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_route_link_local_static_route_nh_route_attributes_metric(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        route = ET.SubElement(ipv6, "route", xmlns="urn:brocade.com:mgmt:brocade-ipv6-rtm")
        link_local_static_route_nh = ET.SubElement(route, "link-local-static-route-nh")
        link_local_static_route_dest_key = ET.SubElement(link_local_static_route_nh, "link-local-static-route-dest")
        link_local_static_route_dest_key.text = kwargs.pop('link_local_static_route_dest')
        link_local_nexthop_key = ET.SubElement(link_local_static_route_nh, "link-local-nexthop")
        link_local_nexthop_key.text = kwargs.pop('link_local_nexthop')
        link_local_route_oif_type_key = ET.SubElement(link_local_static_route_nh, "link-local-route-oif-type")
        link_local_route_oif_type_key.text = kwargs.pop('link_local_route_oif_type')
        link_local_route_oif_name_key = ET.SubElement(link_local_static_route_nh, "link-local-route-oif-name")
        link_local_route_oif_name_key.text = kwargs.pop('link_local_route_oif_name')
        route_attributes = ET.SubElement(link_local_static_route_nh, "route-attributes")
        metric = ET.SubElement(route_attributes, "metric")
        metric.text = kwargs.pop('metric')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_route_link_local_static_route_nh_route_attributes_distance(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        route = ET.SubElement(ipv6, "route", xmlns="urn:brocade.com:mgmt:brocade-ipv6-rtm")
        link_local_static_route_nh = ET.SubElement(route, "link-local-static-route-nh")
        link_local_static_route_dest_key = ET.SubElement(link_local_static_route_nh, "link-local-static-route-dest")
        link_local_static_route_dest_key.text = kwargs.pop('link_local_static_route_dest')
        link_local_nexthop_key = ET.SubElement(link_local_static_route_nh, "link-local-nexthop")
        link_local_nexthop_key.text = kwargs.pop('link_local_nexthop')
        link_local_route_oif_type_key = ET.SubElement(link_local_static_route_nh, "link-local-route-oif-type")
        link_local_route_oif_type_key.text = kwargs.pop('link_local_route_oif_type')
        link_local_route_oif_name_key = ET.SubElement(link_local_static_route_nh, "link-local-route-oif-name")
        link_local_route_oif_name_key.text = kwargs.pop('link_local_route_oif_name')
        route_attributes = ET.SubElement(link_local_static_route_nh, "route-attributes")
        distance = ET.SubElement(route_attributes, "distance")
        distance.text = kwargs.pop('distance')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_route_link_local_static_route_nh_route_attributes_tag(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        route = ET.SubElement(ipv6, "route", xmlns="urn:brocade.com:mgmt:brocade-ipv6-rtm")
        link_local_static_route_nh = ET.SubElement(route, "link-local-static-route-nh")
        link_local_static_route_dest_key = ET.SubElement(link_local_static_route_nh, "link-local-static-route-dest")
        link_local_static_route_dest_key.text = kwargs.pop('link_local_static_route_dest')
        link_local_nexthop_key = ET.SubElement(link_local_static_route_nh, "link-local-nexthop")
        link_local_nexthop_key.text = kwargs.pop('link_local_nexthop')
        link_local_route_oif_type_key = ET.SubElement(link_local_static_route_nh, "link-local-route-oif-type")
        link_local_route_oif_type_key.text = kwargs.pop('link_local_route_oif_type')
        link_local_route_oif_name_key = ET.SubElement(link_local_static_route_nh, "link-local-route-oif-name")
        link_local_route_oif_name_key.text = kwargs.pop('link_local_route_oif_name')
        route_attributes = ET.SubElement(link_local_static_route_nh, "route-attributes")
        tag = ET.SubElement(route_attributes, "tag")
        tag.text = kwargs.pop('tag')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_route_static_route_nh_vrf_static_route_next_vrf_dest(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        route = ET.SubElement(ipv6, "route", xmlns="urn:brocade.com:mgmt:brocade-ipv6-rtm")
        static_route_nh_vrf = ET.SubElement(route, "static-route-nh-vrf")
        next_hop_vrf_key = ET.SubElement(static_route_nh_vrf, "next-hop-vrf")
        next_hop_vrf_key.text = kwargs.pop('next_hop_vrf')
        static_route_next_hop_key = ET.SubElement(static_route_nh_vrf, "static-route-next-hop")
        static_route_next_hop_key.text = kwargs.pop('static_route_next_hop')
        static_route_next_vrf_dest = ET.SubElement(static_route_nh_vrf, "static-route-next-vrf-dest")
        static_route_next_vrf_dest.text = kwargs.pop('static_route_next_vrf_dest')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_route_static_route_nh_vrf_next_hop_vrf(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        route = ET.SubElement(ipv6, "route", xmlns="urn:brocade.com:mgmt:brocade-ipv6-rtm")
        static_route_nh_vrf = ET.SubElement(route, "static-route-nh-vrf")
        static_route_next_vrf_dest_key = ET.SubElement(static_route_nh_vrf, "static-route-next-vrf-dest")
        static_route_next_vrf_dest_key.text = kwargs.pop('static_route_next_vrf_dest')
        static_route_next_hop_key = ET.SubElement(static_route_nh_vrf, "static-route-next-hop")
        static_route_next_hop_key.text = kwargs.pop('static_route_next_hop')
        next_hop_vrf = ET.SubElement(static_route_nh_vrf, "next-hop-vrf")
        next_hop_vrf.text = kwargs.pop('next_hop_vrf')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_route_static_route_nh_vrf_static_route_next_hop(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        route = ET.SubElement(ipv6, "route", xmlns="urn:brocade.com:mgmt:brocade-ipv6-rtm")
        static_route_nh_vrf = ET.SubElement(route, "static-route-nh-vrf")
        static_route_next_vrf_dest_key = ET.SubElement(static_route_nh_vrf, "static-route-next-vrf-dest")
        static_route_next_vrf_dest_key.text = kwargs.pop('static_route_next_vrf_dest')
        next_hop_vrf_key = ET.SubElement(static_route_nh_vrf, "next-hop-vrf")
        next_hop_vrf_key.text = kwargs.pop('next_hop_vrf')
        static_route_next_hop = ET.SubElement(static_route_nh_vrf, "static-route-next-hop")
        static_route_next_hop.text = kwargs.pop('static_route_next_hop')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_imprt_routes_src_vrf(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        imprt = ET.SubElement(ipv6, "import", xmlns="urn:brocade.com:mgmt:brocade-ipv6-rtm")
        routes = ET.SubElement(imprt, "routes")
        route_map_key = ET.SubElement(routes, "route-map")
        route_map_key.text = kwargs.pop('route_map')
        src_vrf = ET.SubElement(routes, "src-vrf")
        src_vrf.text = kwargs.pop('src_vrf')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_imprt_routes_route_map(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        imprt = ET.SubElement(ipv6, "import", xmlns="urn:brocade.com:mgmt:brocade-ipv6-rtm")
        routes = ET.SubElement(imprt, "routes")
        src_vrf_key = ET.SubElement(routes, "src-vrf")
        src_vrf_key.text = kwargs.pop('src_vrf')
        route_map = ET.SubElement(routes, "route-map")
        route_map.text = kwargs.pop('route_map')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_proto_vrrpv3_vrrp(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        proto_vrrpv3 = ET.SubElement(ipv6, "proto-vrrpv3", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrrp = ET.SubElement(proto_vrrpv3, "vrrp")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_proto_vrrpv3_vrrp_extended(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        proto_vrrpv3 = ET.SubElement(ipv6, "proto-vrrpv3", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrrp_extended = ET.SubElement(proto_vrrpv3, "vrrp-extended")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_vrf_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name = ET.SubElement(bgp, "vrf-name")
        vrf_name.text = kwargs.pop('vrf_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_local_as(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        local_as = ET.SubElement(router_bgp_attributes, "local-as")
        local_as.text = kwargs.pop('local_as')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_always_compare_med(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        always_compare_med = ET.SubElement(router_bgp_attributes, "always-compare-med")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_compare_med_empty_aspath(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        compare_med_empty_aspath = ET.SubElement(router_bgp_attributes, "compare-med-empty-aspath")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_med_missing_as_worst(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        med_missing_as_worst = ET.SubElement(router_bgp_attributes, "med-missing-as-worst")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_as_path_ignore(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        as_path_ignore = ET.SubElement(router_bgp_attributes, "as-path-ignore")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_compare_routerid(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        compare_routerid = ET.SubElement(router_bgp_attributes, "compare-routerid")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_install_igp_cost(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        install_igp_cost = ET.SubElement(router_bgp_attributes, "install-igp-cost")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_cluster_id_ch_cluster_id_ca_cluster_id_cluster_id_value(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        cluster_id = ET.SubElement(router_bgp_attributes, "cluster-id")
        ch_cluster_id = ET.SubElement(cluster_id, "ch-cluster-id")
        ca_cluster_id = ET.SubElement(ch_cluster_id, "ca-cluster-id")
        cluster_id_value = ET.SubElement(ca_cluster_id, "cluster-id-value")
        cluster_id_value.text = kwargs.pop('cluster_id_value')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_cluster_id_ch_cluster_id_ca_cluster_id_ipv4_address_cluster_id_ipv4_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        cluster_id = ET.SubElement(router_bgp_attributes, "cluster-id")
        ch_cluster_id = ET.SubElement(cluster_id, "ch-cluster-id")
        ca_cluster_id_ipv4_address = ET.SubElement(ch_cluster_id, "ca-cluster-id-ipv4-address")
        cluster_id_ipv4_address = ET.SubElement(ca_cluster_id_ipv4_address, "cluster-id-ipv4-address")
        cluster_id_ipv4_address.text = kwargs.pop('cluster_id_ipv4_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_default_local_preference(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        default_local_preference = ET.SubElement(router_bgp_attributes, "default-local-preference")
        default_local_preference.text = kwargs.pop('default_local_preference')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_distance_ext_route_distance(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        distance = ET.SubElement(router_bgp_attributes, "distance")
        ext_route_distance = ET.SubElement(distance, "ext-route-distance")
        ext_route_distance.text = kwargs.pop('ext_route_distance')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_distance_int_route_distance(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        distance = ET.SubElement(router_bgp_attributes, "distance")
        int_route_distance = ET.SubElement(distance, "int-route-distance")
        int_route_distance.text = kwargs.pop('int_route_distance')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_distance_lcl_route_distance(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        distance = ET.SubElement(router_bgp_attributes, "distance")
        lcl_route_distance = ET.SubElement(distance, "lcl-route-distance")
        lcl_route_distance.text = kwargs.pop('lcl_route_distance')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_capability_as4_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        capability = ET.SubElement(router_bgp_attributes, "capability")
        as4_enable = ET.SubElement(capability, "as4-enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_maxas_limit_in_cg_num_as_in_path(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        maxas_limit = ET.SubElement(router_bgp_attributes, "maxas-limit")
        in_cg = ET.SubElement(maxas_limit, "in")
        num_as_in_path = ET.SubElement(in_cg, "num-as-in-path")
        num_as_in_path.text = kwargs.pop('num_as_in_path')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_enforce_first_as(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        enforce_first_as = ET.SubElement(router_bgp_attributes, "enforce-first-as")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_fast_external_fallover(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        fast_external_fallover = ET.SubElement(router_bgp_attributes, "fast-external-fallover")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_timers_keep_alive(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        timers = ET.SubElement(router_bgp_attributes, "timers")
        keep_alive = ET.SubElement(timers, "keep-alive")
        keep_alive.text = kwargs.pop('keep_alive')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_timers_hold_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        timers = ET.SubElement(router_bgp_attributes, "timers")
        hold_time = ET.SubElement(timers, "hold-time")
        hold_time.text = kwargs.pop('hold_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_log_dampening_debug(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        log_dampening_debug = ET.SubElement(router_bgp_attributes, "log-dampening-debug")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_confederation_identifier(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        confederation = ET.SubElement(router_bgp_attributes, "confederation")
        identifier = ET.SubElement(confederation, "identifier")
        identifier.text = kwargs.pop('identifier')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_peer_grps_neighbor_peer_grp_router_bgp_neighbor_peer_grp(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        peer_grps = ET.SubElement(router_bgp_attributes, "peer-grps")
        neighbor_peer_grp = ET.SubElement(peer_grps, "neighbor-peer-grp")
        router_bgp_neighbor_peer_grp = ET.SubElement(neighbor_peer_grp, "router-bgp-neighbor-peer-grp")
        router_bgp_neighbor_peer_grp.text = kwargs.pop('router_bgp_neighbor_peer_grp')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_peer_grps_neighbor_peer_grp_peer_group_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        peer_grps = ET.SubElement(router_bgp_attributes, "peer-grps")
        neighbor_peer_grp = ET.SubElement(peer_grps, "neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key = ET.SubElement(neighbor_peer_grp, "router-bgp-neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key.text = kwargs.pop('router_bgp_neighbor_peer_grp')
        peer_group_name = ET.SubElement(neighbor_peer_grp, "peer-group-name")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_peer_grps_neighbor_peer_grp_remote_as(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        peer_grps = ET.SubElement(router_bgp_attributes, "peer-grps")
        neighbor_peer_grp = ET.SubElement(peer_grps, "neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key = ET.SubElement(neighbor_peer_grp, "router-bgp-neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key.text = kwargs.pop('router_bgp_neighbor_peer_grp')
        remote_as = ET.SubElement(neighbor_peer_grp, "remote-as")
        remote_as.text = kwargs.pop('remote_as')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_peer_grps_neighbor_peer_grp_update_source_ch_update_source_ca_ipv4_sip_ipv4_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        peer_grps = ET.SubElement(router_bgp_attributes, "peer-grps")
        neighbor_peer_grp = ET.SubElement(peer_grps, "neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key = ET.SubElement(neighbor_peer_grp, "router-bgp-neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key.text = kwargs.pop('router_bgp_neighbor_peer_grp')
        update_source = ET.SubElement(neighbor_peer_grp, "update-source")
        ch_update_source = ET.SubElement(update_source, "ch-update-source")
        ca_ipv4 = ET.SubElement(ch_update_source, "ca-ipv4")
        sip_ipv4_address = ET.SubElement(ca_ipv4, "sip-ipv4-address")
        sip_ipv4_address.text = kwargs.pop('sip_ipv4_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_peer_grps_neighbor_peer_grp_update_source_ch_update_source_ca_eth_ethernet_interface_interface_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        peer_grps = ET.SubElement(router_bgp_attributes, "peer-grps")
        neighbor_peer_grp = ET.SubElement(peer_grps, "neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key = ET.SubElement(neighbor_peer_grp, "router-bgp-neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key.text = kwargs.pop('router_bgp_neighbor_peer_grp')
        update_source = ET.SubElement(neighbor_peer_grp, "update-source")
        ch_update_source = ET.SubElement(update_source, "ch-update-source")
        ca_eth = ET.SubElement(ch_update_source, "ca-eth")
        ethernet_interface = ET.SubElement(ca_eth, "ethernet-interface")
        interface_type = ET.SubElement(ethernet_interface, "interface-type")
        interface_type.text = kwargs.pop('interface_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_peer_grps_neighbor_peer_grp_update_source_ch_update_source_ca_eth_ethernet_interface_ethernet(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        peer_grps = ET.SubElement(router_bgp_attributes, "peer-grps")
        neighbor_peer_grp = ET.SubElement(peer_grps, "neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key = ET.SubElement(neighbor_peer_grp, "router-bgp-neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key.text = kwargs.pop('router_bgp_neighbor_peer_grp')
        update_source = ET.SubElement(neighbor_peer_grp, "update-source")
        ch_update_source = ET.SubElement(update_source, "ch-update-source")
        ca_eth = ET.SubElement(ch_update_source, "ca-eth")
        ethernet_interface = ET.SubElement(ca_eth, "ethernet-interface")
        ethernet = ET.SubElement(ethernet_interface, "ethernet")
        ethernet.text = kwargs.pop('ethernet')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_peer_grps_neighbor_peer_grp_update_source_ch_update_source_ca_loopback_loopback(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        peer_grps = ET.SubElement(router_bgp_attributes, "peer-grps")
        neighbor_peer_grp = ET.SubElement(peer_grps, "neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key = ET.SubElement(neighbor_peer_grp, "router-bgp-neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key.text = kwargs.pop('router_bgp_neighbor_peer_grp')
        update_source = ET.SubElement(neighbor_peer_grp, "update-source")
        ch_update_source = ET.SubElement(update_source, "ch-update-source")
        ca_loopback = ET.SubElement(ch_update_source, "ca-loopback")
        loopback = ET.SubElement(ca_loopback, "loopback")
        loopback.text = kwargs.pop('loopback')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_peer_grps_neighbor_peer_grp_update_source_ch_update_source_ca_ve_ve_interface(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        peer_grps = ET.SubElement(router_bgp_attributes, "peer-grps")
        neighbor_peer_grp = ET.SubElement(peer_grps, "neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key = ET.SubElement(neighbor_peer_grp, "router-bgp-neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key.text = kwargs.pop('router_bgp_neighbor_peer_grp')
        update_source = ET.SubElement(neighbor_peer_grp, "update-source")
        ch_update_source = ET.SubElement(update_source, "ch-update-source")
        ca_ve = ET.SubElement(ch_update_source, "ca-ve")
        ve_interface = ET.SubElement(ca_ve, "ve-interface")
        ve_interface.text = kwargs.pop('ve_interface')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_peer_grps_neighbor_peer_grp_description(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        peer_grps = ET.SubElement(router_bgp_attributes, "peer-grps")
        neighbor_peer_grp = ET.SubElement(peer_grps, "neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key = ET.SubElement(neighbor_peer_grp, "router-bgp-neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key.text = kwargs.pop('router_bgp_neighbor_peer_grp')
        description = ET.SubElement(neighbor_peer_grp, "description")
        description.text = kwargs.pop('description')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_peer_grps_neighbor_peer_grp_local_as_local_as_value(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        peer_grps = ET.SubElement(router_bgp_attributes, "peer-grps")
        neighbor_peer_grp = ET.SubElement(peer_grps, "neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key = ET.SubElement(neighbor_peer_grp, "router-bgp-neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key.text = kwargs.pop('router_bgp_neighbor_peer_grp')
        local_as = ET.SubElement(neighbor_peer_grp, "local-as")
        local_as_value = ET.SubElement(local_as, "local-as-value")
        local_as_value.text = kwargs.pop('local_as_value')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_peer_grps_neighbor_peer_grp_local_as_no_prepend(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        peer_grps = ET.SubElement(router_bgp_attributes, "peer-grps")
        neighbor_peer_grp = ET.SubElement(peer_grps, "neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key = ET.SubElement(neighbor_peer_grp, "router-bgp-neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key.text = kwargs.pop('router_bgp_neighbor_peer_grp')
        local_as = ET.SubElement(neighbor_peer_grp, "local-as")
        no_prepend = ET.SubElement(local_as, "no-prepend")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_peer_grps_neighbor_peer_grp_next_hop_self_ch_next_hop_self_type_ca_next_hop_self_always_next_hop_self_always(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        peer_grps = ET.SubElement(router_bgp_attributes, "peer-grps")
        neighbor_peer_grp = ET.SubElement(peer_grps, "neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key = ET.SubElement(neighbor_peer_grp, "router-bgp-neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key.text = kwargs.pop('router_bgp_neighbor_peer_grp')
        next_hop_self = ET.SubElement(neighbor_peer_grp, "next-hop-self")
        ch_next_hop_self_type = ET.SubElement(next_hop_self, "ch-next-hop-self-type")
        ca_next_hop_self_always = ET.SubElement(ch_next_hop_self_type, "ca-next-hop-self-always")
        next_hop_self_always = ET.SubElement(ca_next_hop_self_always, "next-hop-self-always")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_peer_grps_neighbor_peer_grp_next_hop_self_ch_next_hop_self_type_ca_next_hop_self_status_next_hop_self_status(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        peer_grps = ET.SubElement(router_bgp_attributes, "peer-grps")
        neighbor_peer_grp = ET.SubElement(peer_grps, "neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key = ET.SubElement(neighbor_peer_grp, "router-bgp-neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key.text = kwargs.pop('router_bgp_neighbor_peer_grp')
        next_hop_self = ET.SubElement(neighbor_peer_grp, "next-hop-self")
        ch_next_hop_self_type = ET.SubElement(next_hop_self, "ch-next-hop-self-type")
        ca_next_hop_self_status = ET.SubElement(ch_next_hop_self_type, "ca-next-hop-self-status")
        next_hop_self_status = ET.SubElement(ca_next_hop_self_status, "next-hop-self-status")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_peer_grps_neighbor_peer_grp_advertisement_interval_value(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        peer_grps = ET.SubElement(router_bgp_attributes, "peer-grps")
        neighbor_peer_grp = ET.SubElement(peer_grps, "neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key = ET.SubElement(neighbor_peer_grp, "router-bgp-neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key.text = kwargs.pop('router_bgp_neighbor_peer_grp')
        advertisement_interval = ET.SubElement(neighbor_peer_grp, "advertisement-interval")
        value = ET.SubElement(advertisement_interval, "value")
        value.text = kwargs.pop('value')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_peer_grps_neighbor_peer_grp_ebgp_btsh(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        peer_grps = ET.SubElement(router_bgp_attributes, "peer-grps")
        neighbor_peer_grp = ET.SubElement(peer_grps, "neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key = ET.SubElement(neighbor_peer_grp, "router-bgp-neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key.text = kwargs.pop('router_bgp_neighbor_peer_grp')
        ebgp_btsh = ET.SubElement(neighbor_peer_grp, "ebgp-btsh")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_peer_grps_neighbor_peer_grp_ebgp_multihop_ch_ebgp_multihop_type_ca_ebgp_multihop_flag_ebgp_multihop_flag(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        peer_grps = ET.SubElement(router_bgp_attributes, "peer-grps")
        neighbor_peer_grp = ET.SubElement(peer_grps, "neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key = ET.SubElement(neighbor_peer_grp, "router-bgp-neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key.text = kwargs.pop('router_bgp_neighbor_peer_grp')
        ebgp_multihop = ET.SubElement(neighbor_peer_grp, "ebgp-multihop")
        ch_ebgp_multihop_type = ET.SubElement(ebgp_multihop, "ch-ebgp-multihop-type")
        ca_ebgp_multihop_flag = ET.SubElement(ch_ebgp_multihop_type, "ca-ebgp-multihop-flag")
        ebgp_multihop_flag = ET.SubElement(ca_ebgp_multihop_flag, "ebgp-multihop-flag")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_peer_grps_neighbor_peer_grp_ebgp_multihop_ch_ebgp_multihop_type_ca_ebgp_multihop_count_ebgp_multihop_count(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        peer_grps = ET.SubElement(router_bgp_attributes, "peer-grps")
        neighbor_peer_grp = ET.SubElement(peer_grps, "neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key = ET.SubElement(neighbor_peer_grp, "router-bgp-neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key.text = kwargs.pop('router_bgp_neighbor_peer_grp')
        ebgp_multihop = ET.SubElement(neighbor_peer_grp, "ebgp-multihop")
        ch_ebgp_multihop_type = ET.SubElement(ebgp_multihop, "ch-ebgp-multihop-type")
        ca_ebgp_multihop_count = ET.SubElement(ch_ebgp_multihop_type, "ca-ebgp-multihop-count")
        ebgp_multihop_count = ET.SubElement(ca_ebgp_multihop_count, "ebgp-multihop-count")
        ebgp_multihop_count.text = kwargs.pop('ebgp_multihop_count')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_peer_grps_neighbor_peer_grp_maxas_limit_in_cg_ch_maxas_limit_ca_maxas_limit_enable_num_as_in_as_path(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        peer_grps = ET.SubElement(router_bgp_attributes, "peer-grps")
        neighbor_peer_grp = ET.SubElement(peer_grps, "neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key = ET.SubElement(neighbor_peer_grp, "router-bgp-neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key.text = kwargs.pop('router_bgp_neighbor_peer_grp')
        maxas_limit = ET.SubElement(neighbor_peer_grp, "maxas-limit")
        in_cg = ET.SubElement(maxas_limit, "in")
        ch_maxas_limit = ET.SubElement(in_cg, "ch-maxas-limit")
        ca_maxas_limit_enable = ET.SubElement(ch_maxas_limit, "ca-maxas-limit-enable")
        num_as_in_as_path = ET.SubElement(ca_maxas_limit_enable, "num-as-in-as-path")
        num_as_in_as_path.text = kwargs.pop('num_as_in_as_path')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_peer_grps_neighbor_peer_grp_maxas_limit_in_cg_ch_maxas_limit_ca_maxas_limit_disable_maxas_limit_disable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        peer_grps = ET.SubElement(router_bgp_attributes, "peer-grps")
        neighbor_peer_grp = ET.SubElement(peer_grps, "neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key = ET.SubElement(neighbor_peer_grp, "router-bgp-neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key.text = kwargs.pop('router_bgp_neighbor_peer_grp')
        maxas_limit = ET.SubElement(neighbor_peer_grp, "maxas-limit")
        in_cg = ET.SubElement(maxas_limit, "in")
        ch_maxas_limit = ET.SubElement(in_cg, "ch-maxas-limit")
        ca_maxas_limit_disable = ET.SubElement(ch_maxas_limit, "ca-maxas-limit-disable")
        maxas_limit_disable = ET.SubElement(ca_maxas_limit_disable, "maxas-limit-disable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_peer_grps_neighbor_peer_grp_password(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        peer_grps = ET.SubElement(router_bgp_attributes, "peer-grps")
        neighbor_peer_grp = ET.SubElement(peer_grps, "neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key = ET.SubElement(neighbor_peer_grp, "router-bgp-neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key.text = kwargs.pop('router_bgp_neighbor_peer_grp')
        password = ET.SubElement(neighbor_peer_grp, "password")
        password.text = kwargs.pop('password')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_peer_grps_neighbor_peer_grp_enforce_first_as_nei_enforce_first_as(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        peer_grps = ET.SubElement(router_bgp_attributes, "peer-grps")
        neighbor_peer_grp = ET.SubElement(peer_grps, "neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key = ET.SubElement(neighbor_peer_grp, "router-bgp-neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key.text = kwargs.pop('router_bgp_neighbor_peer_grp')
        enforce_first_as = ET.SubElement(neighbor_peer_grp, "enforce-first-as")
        nei_enforce_first_as = ET.SubElement(enforce_first_as, "nei-enforce-first-as")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_peer_grps_neighbor_peer_grp_enforce_first_as_nei_enforce_first_as_disable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        peer_grps = ET.SubElement(router_bgp_attributes, "peer-grps")
        neighbor_peer_grp = ET.SubElement(peer_grps, "neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key = ET.SubElement(neighbor_peer_grp, "router-bgp-neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key.text = kwargs.pop('router_bgp_neighbor_peer_grp')
        enforce_first_as = ET.SubElement(neighbor_peer_grp, "enforce-first-as")
        nei_enforce_first_as_disable = ET.SubElement(enforce_first_as, "nei-enforce-first-as-disable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_peer_grps_neighbor_peer_grp_neighbor_capability_as4_neighbor_as4_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        peer_grps = ET.SubElement(router_bgp_attributes, "peer-grps")
        neighbor_peer_grp = ET.SubElement(peer_grps, "neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key = ET.SubElement(neighbor_peer_grp, "router-bgp-neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key.text = kwargs.pop('router_bgp_neighbor_peer_grp')
        neighbor_capability = ET.SubElement(neighbor_peer_grp, "neighbor-capability")
        as4 = ET.SubElement(neighbor_capability, "as4")
        neighbor_as4_enable = ET.SubElement(as4, "neighbor-as4-enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_peer_grps_neighbor_peer_grp_neighbor_capability_as4_neighbor_as4_disable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        peer_grps = ET.SubElement(router_bgp_attributes, "peer-grps")
        neighbor_peer_grp = ET.SubElement(peer_grps, "neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key = ET.SubElement(neighbor_peer_grp, "router-bgp-neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key.text = kwargs.pop('router_bgp_neighbor_peer_grp')
        neighbor_capability = ET.SubElement(neighbor_peer_grp, "neighbor-capability")
        as4 = ET.SubElement(neighbor_capability, "as4")
        neighbor_as4_disable = ET.SubElement(as4, "neighbor-as4-disable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_peer_grps_neighbor_peer_grp_timers_nei_keep_alive(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        peer_grps = ET.SubElement(router_bgp_attributes, "peer-grps")
        neighbor_peer_grp = ET.SubElement(peer_grps, "neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key = ET.SubElement(neighbor_peer_grp, "router-bgp-neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key.text = kwargs.pop('router_bgp_neighbor_peer_grp')
        timers = ET.SubElement(neighbor_peer_grp, "timers")
        nei_keep_alive = ET.SubElement(timers, "nei-keep-alive")
        nei_keep_alive.text = kwargs.pop('nei_keep_alive')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_peer_grps_neighbor_peer_grp_timers_nei_hold_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        peer_grps = ET.SubElement(router_bgp_attributes, "peer-grps")
        neighbor_peer_grp = ET.SubElement(peer_grps, "neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key = ET.SubElement(neighbor_peer_grp, "router-bgp-neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key.text = kwargs.pop('router_bgp_neighbor_peer_grp')
        timers = ET.SubElement(neighbor_peer_grp, "timers")
        nei_hold_time = ET.SubElement(timers, "nei-hold-time")
        nei_hold_time.text = kwargs.pop('nei_hold_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_peer_grps_neighbor_peer_grp_remove_private_as(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        peer_grps = ET.SubElement(router_bgp_attributes, "peer-grps")
        neighbor_peer_grp = ET.SubElement(peer_grps, "neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key = ET.SubElement(neighbor_peer_grp, "router-bgp-neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key.text = kwargs.pop('router_bgp_neighbor_peer_grp')
        remove_private_as = ET.SubElement(neighbor_peer_grp, "remove-private-as")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_peer_grps_neighbor_peer_grp_as_override(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        peer_grps = ET.SubElement(router_bgp_attributes, "peer-grps")
        neighbor_peer_grp = ET.SubElement(peer_grps, "neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key = ET.SubElement(neighbor_peer_grp, "router-bgp-neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key.text = kwargs.pop('router_bgp_neighbor_peer_grp')
        as_override = ET.SubElement(neighbor_peer_grp, "as-override")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_peer_grps_neighbor_peer_grp_soft_reconfiguration_inbound(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        peer_grps = ET.SubElement(router_bgp_attributes, "peer-grps")
        neighbor_peer_grp = ET.SubElement(peer_grps, "neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key = ET.SubElement(neighbor_peer_grp, "router-bgp-neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key.text = kwargs.pop('router_bgp_neighbor_peer_grp')
        soft_reconfiguration = ET.SubElement(neighbor_peer_grp, "soft-reconfiguration")
        inbound = ET.SubElement(soft_reconfiguration, "inbound")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_peer_grps_neighbor_peer_grp_static_network_edge(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        peer_grps = ET.SubElement(router_bgp_attributes, "peer-grps")
        neighbor_peer_grp = ET.SubElement(peer_grps, "neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key = ET.SubElement(neighbor_peer_grp, "router-bgp-neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key.text = kwargs.pop('router_bgp_neighbor_peer_grp')
        static_network_edge = ET.SubElement(neighbor_peer_grp, "static-network-edge")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_peer_grps_neighbor_peer_grp_shutdown_shutdown_status(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        peer_grps = ET.SubElement(router_bgp_attributes, "peer-grps")
        neighbor_peer_grp = ET.SubElement(peer_grps, "neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key = ET.SubElement(neighbor_peer_grp, "router-bgp-neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key.text = kwargs.pop('router_bgp_neighbor_peer_grp')
        shutdown = ET.SubElement(neighbor_peer_grp, "shutdown")
        shutdown_status = ET.SubElement(shutdown, "shutdown-status")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ipv6s_neighbor_ipv6_addr_router_bgp_neighbor_ipv6_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ipv6s = ET.SubElement(router_bgp_attributes, "neighbor-ipv6s")
        neighbor_ipv6_addr = ET.SubElement(neighbor_ipv6s, "neighbor-ipv6-addr")
        router_bgp_neighbor_ipv6_address = ET.SubElement(neighbor_ipv6_addr, "router-bgp-neighbor-ipv6-address")
        router_bgp_neighbor_ipv6_address.text = kwargs.pop('router_bgp_neighbor_ipv6_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ipv6s_neighbor_ipv6_addr_remote_as(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ipv6s = ET.SubElement(router_bgp_attributes, "neighbor-ipv6s")
        neighbor_ipv6_addr = ET.SubElement(neighbor_ipv6s, "neighbor-ipv6-addr")
        router_bgp_neighbor_ipv6_address_key = ET.SubElement(neighbor_ipv6_addr, "router-bgp-neighbor-ipv6-address")
        router_bgp_neighbor_ipv6_address_key.text = kwargs.pop('router_bgp_neighbor_ipv6_address')
        remote_as = ET.SubElement(neighbor_ipv6_addr, "remote-as")
        remote_as.text = kwargs.pop('remote_as')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ipv6s_neighbor_ipv6_addr_associate_peer_group(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ipv6s = ET.SubElement(router_bgp_attributes, "neighbor-ipv6s")
        neighbor_ipv6_addr = ET.SubElement(neighbor_ipv6s, "neighbor-ipv6-addr")
        router_bgp_neighbor_ipv6_address_key = ET.SubElement(neighbor_ipv6_addr, "router-bgp-neighbor-ipv6-address")
        router_bgp_neighbor_ipv6_address_key.text = kwargs.pop('router_bgp_neighbor_ipv6_address')
        associate_peer_group = ET.SubElement(neighbor_ipv6_addr, "associate-peer-group")
        associate_peer_group.text = kwargs.pop('associate_peer_group')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ipv6s_neighbor_ipv6_addr_update_source_ch_update_source_ca_ipv6_sip_ipv6_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ipv6s = ET.SubElement(router_bgp_attributes, "neighbor-ipv6s")
        neighbor_ipv6_addr = ET.SubElement(neighbor_ipv6s, "neighbor-ipv6-addr")
        router_bgp_neighbor_ipv6_address_key = ET.SubElement(neighbor_ipv6_addr, "router-bgp-neighbor-ipv6-address")
        router_bgp_neighbor_ipv6_address_key.text = kwargs.pop('router_bgp_neighbor_ipv6_address')
        update_source = ET.SubElement(neighbor_ipv6_addr, "update-source")
        ch_update_source = ET.SubElement(update_source, "ch-update-source")
        ca_ipv6 = ET.SubElement(ch_update_source, "ca-ipv6")
        sip_ipv6_address = ET.SubElement(ca_ipv6, "sip-ipv6-address")
        sip_ipv6_address.text = kwargs.pop('sip_ipv6_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ipv6s_neighbor_ipv6_addr_update_source_ch_update_source_ca_eth_ethernet_interface_interface_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ipv6s = ET.SubElement(router_bgp_attributes, "neighbor-ipv6s")
        neighbor_ipv6_addr = ET.SubElement(neighbor_ipv6s, "neighbor-ipv6-addr")
        router_bgp_neighbor_ipv6_address_key = ET.SubElement(neighbor_ipv6_addr, "router-bgp-neighbor-ipv6-address")
        router_bgp_neighbor_ipv6_address_key.text = kwargs.pop('router_bgp_neighbor_ipv6_address')
        update_source = ET.SubElement(neighbor_ipv6_addr, "update-source")
        ch_update_source = ET.SubElement(update_source, "ch-update-source")
        ca_eth = ET.SubElement(ch_update_source, "ca-eth")
        ethernet_interface = ET.SubElement(ca_eth, "ethernet-interface")
        interface_type = ET.SubElement(ethernet_interface, "interface-type")
        interface_type.text = kwargs.pop('interface_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ipv6s_neighbor_ipv6_addr_update_source_ch_update_source_ca_eth_ethernet_interface_ethernet(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ipv6s = ET.SubElement(router_bgp_attributes, "neighbor-ipv6s")
        neighbor_ipv6_addr = ET.SubElement(neighbor_ipv6s, "neighbor-ipv6-addr")
        router_bgp_neighbor_ipv6_address_key = ET.SubElement(neighbor_ipv6_addr, "router-bgp-neighbor-ipv6-address")
        router_bgp_neighbor_ipv6_address_key.text = kwargs.pop('router_bgp_neighbor_ipv6_address')
        update_source = ET.SubElement(neighbor_ipv6_addr, "update-source")
        ch_update_source = ET.SubElement(update_source, "ch-update-source")
        ca_eth = ET.SubElement(ch_update_source, "ca-eth")
        ethernet_interface = ET.SubElement(ca_eth, "ethernet-interface")
        ethernet = ET.SubElement(ethernet_interface, "ethernet")
        ethernet.text = kwargs.pop('ethernet')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ipv6s_neighbor_ipv6_addr_update_source_ch_update_source_ca_loopback_loopback(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ipv6s = ET.SubElement(router_bgp_attributes, "neighbor-ipv6s")
        neighbor_ipv6_addr = ET.SubElement(neighbor_ipv6s, "neighbor-ipv6-addr")
        router_bgp_neighbor_ipv6_address_key = ET.SubElement(neighbor_ipv6_addr, "router-bgp-neighbor-ipv6-address")
        router_bgp_neighbor_ipv6_address_key.text = kwargs.pop('router_bgp_neighbor_ipv6_address')
        update_source = ET.SubElement(neighbor_ipv6_addr, "update-source")
        ch_update_source = ET.SubElement(update_source, "ch-update-source")
        ca_loopback = ET.SubElement(ch_update_source, "ca-loopback")
        loopback = ET.SubElement(ca_loopback, "loopback")
        loopback.text = kwargs.pop('loopback')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ipv6s_neighbor_ipv6_addr_update_source_ch_update_source_ca_ve_ve_interface(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ipv6s = ET.SubElement(router_bgp_attributes, "neighbor-ipv6s")
        neighbor_ipv6_addr = ET.SubElement(neighbor_ipv6s, "neighbor-ipv6-addr")
        router_bgp_neighbor_ipv6_address_key = ET.SubElement(neighbor_ipv6_addr, "router-bgp-neighbor-ipv6-address")
        router_bgp_neighbor_ipv6_address_key.text = kwargs.pop('router_bgp_neighbor_ipv6_address')
        update_source = ET.SubElement(neighbor_ipv6_addr, "update-source")
        ch_update_source = ET.SubElement(update_source, "ch-update-source")
        ca_ve = ET.SubElement(ch_update_source, "ca-ve")
        ve_interface = ET.SubElement(ca_ve, "ve-interface")
        ve_interface.text = kwargs.pop('ve_interface')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ipv6s_neighbor_ipv6_addr_description(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ipv6s = ET.SubElement(router_bgp_attributes, "neighbor-ipv6s")
        neighbor_ipv6_addr = ET.SubElement(neighbor_ipv6s, "neighbor-ipv6-addr")
        router_bgp_neighbor_ipv6_address_key = ET.SubElement(neighbor_ipv6_addr, "router-bgp-neighbor-ipv6-address")
        router_bgp_neighbor_ipv6_address_key.text = kwargs.pop('router_bgp_neighbor_ipv6_address')
        description = ET.SubElement(neighbor_ipv6_addr, "description")
        description.text = kwargs.pop('description')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ipv6s_neighbor_ipv6_addr_local_as_local_as_value(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ipv6s = ET.SubElement(router_bgp_attributes, "neighbor-ipv6s")
        neighbor_ipv6_addr = ET.SubElement(neighbor_ipv6s, "neighbor-ipv6-addr")
        router_bgp_neighbor_ipv6_address_key = ET.SubElement(neighbor_ipv6_addr, "router-bgp-neighbor-ipv6-address")
        router_bgp_neighbor_ipv6_address_key.text = kwargs.pop('router_bgp_neighbor_ipv6_address')
        local_as = ET.SubElement(neighbor_ipv6_addr, "local-as")
        local_as_value = ET.SubElement(local_as, "local-as-value")
        local_as_value.text = kwargs.pop('local_as_value')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ipv6s_neighbor_ipv6_addr_local_as_no_prepend(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ipv6s = ET.SubElement(router_bgp_attributes, "neighbor-ipv6s")
        neighbor_ipv6_addr = ET.SubElement(neighbor_ipv6s, "neighbor-ipv6-addr")
        router_bgp_neighbor_ipv6_address_key = ET.SubElement(neighbor_ipv6_addr, "router-bgp-neighbor-ipv6-address")
        router_bgp_neighbor_ipv6_address_key.text = kwargs.pop('router_bgp_neighbor_ipv6_address')
        local_as = ET.SubElement(neighbor_ipv6_addr, "local-as")
        no_prepend = ET.SubElement(local_as, "no-prepend")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ipv6s_neighbor_ipv6_addr_next_hop_self_ch_next_hop_self_type_ca_next_hop_self_always_next_hop_self_always(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ipv6s = ET.SubElement(router_bgp_attributes, "neighbor-ipv6s")
        neighbor_ipv6_addr = ET.SubElement(neighbor_ipv6s, "neighbor-ipv6-addr")
        router_bgp_neighbor_ipv6_address_key = ET.SubElement(neighbor_ipv6_addr, "router-bgp-neighbor-ipv6-address")
        router_bgp_neighbor_ipv6_address_key.text = kwargs.pop('router_bgp_neighbor_ipv6_address')
        next_hop_self = ET.SubElement(neighbor_ipv6_addr, "next-hop-self")
        ch_next_hop_self_type = ET.SubElement(next_hop_self, "ch-next-hop-self-type")
        ca_next_hop_self_always = ET.SubElement(ch_next_hop_self_type, "ca-next-hop-self-always")
        next_hop_self_always = ET.SubElement(ca_next_hop_self_always, "next-hop-self-always")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ipv6s_neighbor_ipv6_addr_next_hop_self_ch_next_hop_self_type_ca_next_hop_self_status_next_hop_self_status(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ipv6s = ET.SubElement(router_bgp_attributes, "neighbor-ipv6s")
        neighbor_ipv6_addr = ET.SubElement(neighbor_ipv6s, "neighbor-ipv6-addr")
        router_bgp_neighbor_ipv6_address_key = ET.SubElement(neighbor_ipv6_addr, "router-bgp-neighbor-ipv6-address")
        router_bgp_neighbor_ipv6_address_key.text = kwargs.pop('router_bgp_neighbor_ipv6_address')
        next_hop_self = ET.SubElement(neighbor_ipv6_addr, "next-hop-self")
        ch_next_hop_self_type = ET.SubElement(next_hop_self, "ch-next-hop-self-type")
        ca_next_hop_self_status = ET.SubElement(ch_next_hop_self_type, "ca-next-hop-self-status")
        next_hop_self_status = ET.SubElement(ca_next_hop_self_status, "next-hop-self-status")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ipv6s_neighbor_ipv6_addr_advertisement_interval_value(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ipv6s = ET.SubElement(router_bgp_attributes, "neighbor-ipv6s")
        neighbor_ipv6_addr = ET.SubElement(neighbor_ipv6s, "neighbor-ipv6-addr")
        router_bgp_neighbor_ipv6_address_key = ET.SubElement(neighbor_ipv6_addr, "router-bgp-neighbor-ipv6-address")
        router_bgp_neighbor_ipv6_address_key.text = kwargs.pop('router_bgp_neighbor_ipv6_address')
        advertisement_interval = ET.SubElement(neighbor_ipv6_addr, "advertisement-interval")
        value = ET.SubElement(advertisement_interval, "value")
        value.text = kwargs.pop('value')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ipv6s_neighbor_ipv6_addr_ebgp_btsh(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ipv6s = ET.SubElement(router_bgp_attributes, "neighbor-ipv6s")
        neighbor_ipv6_addr = ET.SubElement(neighbor_ipv6s, "neighbor-ipv6-addr")
        router_bgp_neighbor_ipv6_address_key = ET.SubElement(neighbor_ipv6_addr, "router-bgp-neighbor-ipv6-address")
        router_bgp_neighbor_ipv6_address_key.text = kwargs.pop('router_bgp_neighbor_ipv6_address')
        ebgp_btsh = ET.SubElement(neighbor_ipv6_addr, "ebgp-btsh")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ipv6s_neighbor_ipv6_addr_ebgp_multihop_ch_ebgp_multihop_type_ca_ebgp_multihop_flag_ebgp_multihop_flag(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ipv6s = ET.SubElement(router_bgp_attributes, "neighbor-ipv6s")
        neighbor_ipv6_addr = ET.SubElement(neighbor_ipv6s, "neighbor-ipv6-addr")
        router_bgp_neighbor_ipv6_address_key = ET.SubElement(neighbor_ipv6_addr, "router-bgp-neighbor-ipv6-address")
        router_bgp_neighbor_ipv6_address_key.text = kwargs.pop('router_bgp_neighbor_ipv6_address')
        ebgp_multihop = ET.SubElement(neighbor_ipv6_addr, "ebgp-multihop")
        ch_ebgp_multihop_type = ET.SubElement(ebgp_multihop, "ch-ebgp-multihop-type")
        ca_ebgp_multihop_flag = ET.SubElement(ch_ebgp_multihop_type, "ca-ebgp-multihop-flag")
        ebgp_multihop_flag = ET.SubElement(ca_ebgp_multihop_flag, "ebgp-multihop-flag")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ipv6s_neighbor_ipv6_addr_ebgp_multihop_ch_ebgp_multihop_type_ca_ebgp_multihop_count_ebgp_multihop_count(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ipv6s = ET.SubElement(router_bgp_attributes, "neighbor-ipv6s")
        neighbor_ipv6_addr = ET.SubElement(neighbor_ipv6s, "neighbor-ipv6-addr")
        router_bgp_neighbor_ipv6_address_key = ET.SubElement(neighbor_ipv6_addr, "router-bgp-neighbor-ipv6-address")
        router_bgp_neighbor_ipv6_address_key.text = kwargs.pop('router_bgp_neighbor_ipv6_address')
        ebgp_multihop = ET.SubElement(neighbor_ipv6_addr, "ebgp-multihop")
        ch_ebgp_multihop_type = ET.SubElement(ebgp_multihop, "ch-ebgp-multihop-type")
        ca_ebgp_multihop_count = ET.SubElement(ch_ebgp_multihop_type, "ca-ebgp-multihop-count")
        ebgp_multihop_count = ET.SubElement(ca_ebgp_multihop_count, "ebgp-multihop-count")
        ebgp_multihop_count.text = kwargs.pop('ebgp_multihop_count')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ipv6s_neighbor_ipv6_addr_maxas_limit_in_cg_ch_maxas_limit_ca_maxas_limit_enable_num_as_in_as_path(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ipv6s = ET.SubElement(router_bgp_attributes, "neighbor-ipv6s")
        neighbor_ipv6_addr = ET.SubElement(neighbor_ipv6s, "neighbor-ipv6-addr")
        router_bgp_neighbor_ipv6_address_key = ET.SubElement(neighbor_ipv6_addr, "router-bgp-neighbor-ipv6-address")
        router_bgp_neighbor_ipv6_address_key.text = kwargs.pop('router_bgp_neighbor_ipv6_address')
        maxas_limit = ET.SubElement(neighbor_ipv6_addr, "maxas-limit")
        in_cg = ET.SubElement(maxas_limit, "in")
        ch_maxas_limit = ET.SubElement(in_cg, "ch-maxas-limit")
        ca_maxas_limit_enable = ET.SubElement(ch_maxas_limit, "ca-maxas-limit-enable")
        num_as_in_as_path = ET.SubElement(ca_maxas_limit_enable, "num-as-in-as-path")
        num_as_in_as_path.text = kwargs.pop('num_as_in_as_path')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ipv6s_neighbor_ipv6_addr_maxas_limit_in_cg_ch_maxas_limit_ca_maxas_limit_disable_maxas_limit_disable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ipv6s = ET.SubElement(router_bgp_attributes, "neighbor-ipv6s")
        neighbor_ipv6_addr = ET.SubElement(neighbor_ipv6s, "neighbor-ipv6-addr")
        router_bgp_neighbor_ipv6_address_key = ET.SubElement(neighbor_ipv6_addr, "router-bgp-neighbor-ipv6-address")
        router_bgp_neighbor_ipv6_address_key.text = kwargs.pop('router_bgp_neighbor_ipv6_address')
        maxas_limit = ET.SubElement(neighbor_ipv6_addr, "maxas-limit")
        in_cg = ET.SubElement(maxas_limit, "in")
        ch_maxas_limit = ET.SubElement(in_cg, "ch-maxas-limit")
        ca_maxas_limit_disable = ET.SubElement(ch_maxas_limit, "ca-maxas-limit-disable")
        maxas_limit_disable = ET.SubElement(ca_maxas_limit_disable, "maxas-limit-disable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ipv6s_neighbor_ipv6_addr_password(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ipv6s = ET.SubElement(router_bgp_attributes, "neighbor-ipv6s")
        neighbor_ipv6_addr = ET.SubElement(neighbor_ipv6s, "neighbor-ipv6-addr")
        router_bgp_neighbor_ipv6_address_key = ET.SubElement(neighbor_ipv6_addr, "router-bgp-neighbor-ipv6-address")
        router_bgp_neighbor_ipv6_address_key.text = kwargs.pop('router_bgp_neighbor_ipv6_address')
        password = ET.SubElement(neighbor_ipv6_addr, "password")
        password.text = kwargs.pop('password')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ipv6s_neighbor_ipv6_addr_enforce_first_as_nei_enforce_first_as(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ipv6s = ET.SubElement(router_bgp_attributes, "neighbor-ipv6s")
        neighbor_ipv6_addr = ET.SubElement(neighbor_ipv6s, "neighbor-ipv6-addr")
        router_bgp_neighbor_ipv6_address_key = ET.SubElement(neighbor_ipv6_addr, "router-bgp-neighbor-ipv6-address")
        router_bgp_neighbor_ipv6_address_key.text = kwargs.pop('router_bgp_neighbor_ipv6_address')
        enforce_first_as = ET.SubElement(neighbor_ipv6_addr, "enforce-first-as")
        nei_enforce_first_as = ET.SubElement(enforce_first_as, "nei-enforce-first-as")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ipv6s_neighbor_ipv6_addr_enforce_first_as_nei_enforce_first_as_disable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ipv6s = ET.SubElement(router_bgp_attributes, "neighbor-ipv6s")
        neighbor_ipv6_addr = ET.SubElement(neighbor_ipv6s, "neighbor-ipv6-addr")
        router_bgp_neighbor_ipv6_address_key = ET.SubElement(neighbor_ipv6_addr, "router-bgp-neighbor-ipv6-address")
        router_bgp_neighbor_ipv6_address_key.text = kwargs.pop('router_bgp_neighbor_ipv6_address')
        enforce_first_as = ET.SubElement(neighbor_ipv6_addr, "enforce-first-as")
        nei_enforce_first_as_disable = ET.SubElement(enforce_first_as, "nei-enforce-first-as-disable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ipv6s_neighbor_ipv6_addr_neighbor_capability_as4_neighbor_as4_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ipv6s = ET.SubElement(router_bgp_attributes, "neighbor-ipv6s")
        neighbor_ipv6_addr = ET.SubElement(neighbor_ipv6s, "neighbor-ipv6-addr")
        router_bgp_neighbor_ipv6_address_key = ET.SubElement(neighbor_ipv6_addr, "router-bgp-neighbor-ipv6-address")
        router_bgp_neighbor_ipv6_address_key.text = kwargs.pop('router_bgp_neighbor_ipv6_address')
        neighbor_capability = ET.SubElement(neighbor_ipv6_addr, "neighbor-capability")
        as4 = ET.SubElement(neighbor_capability, "as4")
        neighbor_as4_enable = ET.SubElement(as4, "neighbor-as4-enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ipv6s_neighbor_ipv6_addr_neighbor_capability_as4_neighbor_as4_disable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ipv6s = ET.SubElement(router_bgp_attributes, "neighbor-ipv6s")
        neighbor_ipv6_addr = ET.SubElement(neighbor_ipv6s, "neighbor-ipv6-addr")
        router_bgp_neighbor_ipv6_address_key = ET.SubElement(neighbor_ipv6_addr, "router-bgp-neighbor-ipv6-address")
        router_bgp_neighbor_ipv6_address_key.text = kwargs.pop('router_bgp_neighbor_ipv6_address')
        neighbor_capability = ET.SubElement(neighbor_ipv6_addr, "neighbor-capability")
        as4 = ET.SubElement(neighbor_capability, "as4")
        neighbor_as4_disable = ET.SubElement(as4, "neighbor-as4-disable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ipv6s_neighbor_ipv6_addr_timers_nei_keep_alive(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ipv6s = ET.SubElement(router_bgp_attributes, "neighbor-ipv6s")
        neighbor_ipv6_addr = ET.SubElement(neighbor_ipv6s, "neighbor-ipv6-addr")
        router_bgp_neighbor_ipv6_address_key = ET.SubElement(neighbor_ipv6_addr, "router-bgp-neighbor-ipv6-address")
        router_bgp_neighbor_ipv6_address_key.text = kwargs.pop('router_bgp_neighbor_ipv6_address')
        timers = ET.SubElement(neighbor_ipv6_addr, "timers")
        nei_keep_alive = ET.SubElement(timers, "nei-keep-alive")
        nei_keep_alive.text = kwargs.pop('nei_keep_alive')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ipv6s_neighbor_ipv6_addr_timers_nei_hold_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ipv6s = ET.SubElement(router_bgp_attributes, "neighbor-ipv6s")
        neighbor_ipv6_addr = ET.SubElement(neighbor_ipv6s, "neighbor-ipv6-addr")
        router_bgp_neighbor_ipv6_address_key = ET.SubElement(neighbor_ipv6_addr, "router-bgp-neighbor-ipv6-address")
        router_bgp_neighbor_ipv6_address_key.text = kwargs.pop('router_bgp_neighbor_ipv6_address')
        timers = ET.SubElement(neighbor_ipv6_addr, "timers")
        nei_hold_time = ET.SubElement(timers, "nei-hold-time")
        nei_hold_time.text = kwargs.pop('nei_hold_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ipv6s_neighbor_ipv6_addr_remove_private_as(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ipv6s = ET.SubElement(router_bgp_attributes, "neighbor-ipv6s")
        neighbor_ipv6_addr = ET.SubElement(neighbor_ipv6s, "neighbor-ipv6-addr")
        router_bgp_neighbor_ipv6_address_key = ET.SubElement(neighbor_ipv6_addr, "router-bgp-neighbor-ipv6-address")
        router_bgp_neighbor_ipv6_address_key.text = kwargs.pop('router_bgp_neighbor_ipv6_address')
        remove_private_as = ET.SubElement(neighbor_ipv6_addr, "remove-private-as")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ipv6s_neighbor_ipv6_addr_as_override(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ipv6s = ET.SubElement(router_bgp_attributes, "neighbor-ipv6s")
        neighbor_ipv6_addr = ET.SubElement(neighbor_ipv6s, "neighbor-ipv6-addr")
        router_bgp_neighbor_ipv6_address_key = ET.SubElement(neighbor_ipv6_addr, "router-bgp-neighbor-ipv6-address")
        router_bgp_neighbor_ipv6_address_key.text = kwargs.pop('router_bgp_neighbor_ipv6_address')
        as_override = ET.SubElement(neighbor_ipv6_addr, "as-override")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ipv6s_neighbor_ipv6_addr_soft_reconfiguration_inbound(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ipv6s = ET.SubElement(router_bgp_attributes, "neighbor-ipv6s")
        neighbor_ipv6_addr = ET.SubElement(neighbor_ipv6s, "neighbor-ipv6-addr")
        router_bgp_neighbor_ipv6_address_key = ET.SubElement(neighbor_ipv6_addr, "router-bgp-neighbor-ipv6-address")
        router_bgp_neighbor_ipv6_address_key.text = kwargs.pop('router_bgp_neighbor_ipv6_address')
        soft_reconfiguration = ET.SubElement(neighbor_ipv6_addr, "soft-reconfiguration")
        inbound = ET.SubElement(soft_reconfiguration, "inbound")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ipv6s_neighbor_ipv6_addr_static_network_edge(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ipv6s = ET.SubElement(router_bgp_attributes, "neighbor-ipv6s")
        neighbor_ipv6_addr = ET.SubElement(neighbor_ipv6s, "neighbor-ipv6-addr")
        router_bgp_neighbor_ipv6_address_key = ET.SubElement(neighbor_ipv6_addr, "router-bgp-neighbor-ipv6-address")
        router_bgp_neighbor_ipv6_address_key.text = kwargs.pop('router_bgp_neighbor_ipv6_address')
        static_network_edge = ET.SubElement(neighbor_ipv6_addr, "static-network-edge")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ipv6s_neighbor_ipv6_addr_shutdown_shutdown_status(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ipv6s = ET.SubElement(router_bgp_attributes, "neighbor-ipv6s")
        neighbor_ipv6_addr = ET.SubElement(neighbor_ipv6s, "neighbor-ipv6-addr")
        router_bgp_neighbor_ipv6_address_key = ET.SubElement(neighbor_ipv6_addr, "router-bgp-neighbor-ipv6-address")
        router_bgp_neighbor_ipv6_address_key.text = kwargs.pop('router_bgp_neighbor_ipv6_address')
        shutdown = ET.SubElement(neighbor_ipv6_addr, "shutdown")
        shutdown_status = ET.SubElement(shutdown, "shutdown-status")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ipv6s_neighbor_ipv6_addr_shutdown_generate_rib_out(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ipv6s = ET.SubElement(router_bgp_attributes, "neighbor-ipv6s")
        neighbor_ipv6_addr = ET.SubElement(neighbor_ipv6s, "neighbor-ipv6-addr")
        router_bgp_neighbor_ipv6_address_key = ET.SubElement(neighbor_ipv6_addr, "router-bgp-neighbor-ipv6-address")
        router_bgp_neighbor_ipv6_address_key.text = kwargs.pop('router_bgp_neighbor_ipv6_address')
        shutdown = ET.SubElement(neighbor_ipv6_addr, "shutdown")
        generate_rib_out = ET.SubElement(shutdown, "generate-rib-out")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ips_neighbor_addr_router_bgp_neighbor_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ips = ET.SubElement(router_bgp_attributes, "neighbor-ips")
        neighbor_addr = ET.SubElement(neighbor_ips, "neighbor-addr")
        router_bgp_neighbor_address = ET.SubElement(neighbor_addr, "router-bgp-neighbor-address")
        router_bgp_neighbor_address.text = kwargs.pop('router_bgp_neighbor_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ips_neighbor_addr_remote_as(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ips = ET.SubElement(router_bgp_attributes, "neighbor-ips")
        neighbor_addr = ET.SubElement(neighbor_ips, "neighbor-addr")
        router_bgp_neighbor_address_key = ET.SubElement(neighbor_addr, "router-bgp-neighbor-address")
        router_bgp_neighbor_address_key.text = kwargs.pop('router_bgp_neighbor_address')
        remote_as = ET.SubElement(neighbor_addr, "remote-as")
        remote_as.text = kwargs.pop('remote_as')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ips_neighbor_addr_associate_peer_group(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ips = ET.SubElement(router_bgp_attributes, "neighbor-ips")
        neighbor_addr = ET.SubElement(neighbor_ips, "neighbor-addr")
        router_bgp_neighbor_address_key = ET.SubElement(neighbor_addr, "router-bgp-neighbor-address")
        router_bgp_neighbor_address_key.text = kwargs.pop('router_bgp_neighbor_address')
        associate_peer_group = ET.SubElement(neighbor_addr, "associate-peer-group")
        associate_peer_group.text = kwargs.pop('associate_peer_group')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ips_neighbor_addr_update_source_ch_update_source_ca_ipv4_sip_ipv4_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ips = ET.SubElement(router_bgp_attributes, "neighbor-ips")
        neighbor_addr = ET.SubElement(neighbor_ips, "neighbor-addr")
        router_bgp_neighbor_address_key = ET.SubElement(neighbor_addr, "router-bgp-neighbor-address")
        router_bgp_neighbor_address_key.text = kwargs.pop('router_bgp_neighbor_address')
        update_source = ET.SubElement(neighbor_addr, "update-source")
        ch_update_source = ET.SubElement(update_source, "ch-update-source")
        ca_ipv4 = ET.SubElement(ch_update_source, "ca-ipv4")
        sip_ipv4_address = ET.SubElement(ca_ipv4, "sip-ipv4-address")
        sip_ipv4_address.text = kwargs.pop('sip_ipv4_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ips_neighbor_addr_update_source_ch_update_source_ca_eth_ethernet_interface_interface_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ips = ET.SubElement(router_bgp_attributes, "neighbor-ips")
        neighbor_addr = ET.SubElement(neighbor_ips, "neighbor-addr")
        router_bgp_neighbor_address_key = ET.SubElement(neighbor_addr, "router-bgp-neighbor-address")
        router_bgp_neighbor_address_key.text = kwargs.pop('router_bgp_neighbor_address')
        update_source = ET.SubElement(neighbor_addr, "update-source")
        ch_update_source = ET.SubElement(update_source, "ch-update-source")
        ca_eth = ET.SubElement(ch_update_source, "ca-eth")
        ethernet_interface = ET.SubElement(ca_eth, "ethernet-interface")
        interface_type = ET.SubElement(ethernet_interface, "interface-type")
        interface_type.text = kwargs.pop('interface_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ips_neighbor_addr_update_source_ch_update_source_ca_eth_ethernet_interface_ethernet(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ips = ET.SubElement(router_bgp_attributes, "neighbor-ips")
        neighbor_addr = ET.SubElement(neighbor_ips, "neighbor-addr")
        router_bgp_neighbor_address_key = ET.SubElement(neighbor_addr, "router-bgp-neighbor-address")
        router_bgp_neighbor_address_key.text = kwargs.pop('router_bgp_neighbor_address')
        update_source = ET.SubElement(neighbor_addr, "update-source")
        ch_update_source = ET.SubElement(update_source, "ch-update-source")
        ca_eth = ET.SubElement(ch_update_source, "ca-eth")
        ethernet_interface = ET.SubElement(ca_eth, "ethernet-interface")
        ethernet = ET.SubElement(ethernet_interface, "ethernet")
        ethernet.text = kwargs.pop('ethernet')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ips_neighbor_addr_update_source_ch_update_source_ca_loopback_loopback(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ips = ET.SubElement(router_bgp_attributes, "neighbor-ips")
        neighbor_addr = ET.SubElement(neighbor_ips, "neighbor-addr")
        router_bgp_neighbor_address_key = ET.SubElement(neighbor_addr, "router-bgp-neighbor-address")
        router_bgp_neighbor_address_key.text = kwargs.pop('router_bgp_neighbor_address')
        update_source = ET.SubElement(neighbor_addr, "update-source")
        ch_update_source = ET.SubElement(update_source, "ch-update-source")
        ca_loopback = ET.SubElement(ch_update_source, "ca-loopback")
        loopback = ET.SubElement(ca_loopback, "loopback")
        loopback.text = kwargs.pop('loopback')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ips_neighbor_addr_update_source_ch_update_source_ca_ve_ve_interface(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ips = ET.SubElement(router_bgp_attributes, "neighbor-ips")
        neighbor_addr = ET.SubElement(neighbor_ips, "neighbor-addr")
        router_bgp_neighbor_address_key = ET.SubElement(neighbor_addr, "router-bgp-neighbor-address")
        router_bgp_neighbor_address_key.text = kwargs.pop('router_bgp_neighbor_address')
        update_source = ET.SubElement(neighbor_addr, "update-source")
        ch_update_source = ET.SubElement(update_source, "ch-update-source")
        ca_ve = ET.SubElement(ch_update_source, "ca-ve")
        ve_interface = ET.SubElement(ca_ve, "ve-interface")
        ve_interface.text = kwargs.pop('ve_interface')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ips_neighbor_addr_description(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ips = ET.SubElement(router_bgp_attributes, "neighbor-ips")
        neighbor_addr = ET.SubElement(neighbor_ips, "neighbor-addr")
        router_bgp_neighbor_address_key = ET.SubElement(neighbor_addr, "router-bgp-neighbor-address")
        router_bgp_neighbor_address_key.text = kwargs.pop('router_bgp_neighbor_address')
        description = ET.SubElement(neighbor_addr, "description")
        description.text = kwargs.pop('description')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ips_neighbor_addr_local_as_local_as_value(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ips = ET.SubElement(router_bgp_attributes, "neighbor-ips")
        neighbor_addr = ET.SubElement(neighbor_ips, "neighbor-addr")
        router_bgp_neighbor_address_key = ET.SubElement(neighbor_addr, "router-bgp-neighbor-address")
        router_bgp_neighbor_address_key.text = kwargs.pop('router_bgp_neighbor_address')
        local_as = ET.SubElement(neighbor_addr, "local-as")
        local_as_value = ET.SubElement(local_as, "local-as-value")
        local_as_value.text = kwargs.pop('local_as_value')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ips_neighbor_addr_local_as_no_prepend(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ips = ET.SubElement(router_bgp_attributes, "neighbor-ips")
        neighbor_addr = ET.SubElement(neighbor_ips, "neighbor-addr")
        router_bgp_neighbor_address_key = ET.SubElement(neighbor_addr, "router-bgp-neighbor-address")
        router_bgp_neighbor_address_key.text = kwargs.pop('router_bgp_neighbor_address')
        local_as = ET.SubElement(neighbor_addr, "local-as")
        no_prepend = ET.SubElement(local_as, "no-prepend")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ips_neighbor_addr_next_hop_self_ch_next_hop_self_type_ca_next_hop_self_always_next_hop_self_always(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ips = ET.SubElement(router_bgp_attributes, "neighbor-ips")
        neighbor_addr = ET.SubElement(neighbor_ips, "neighbor-addr")
        router_bgp_neighbor_address_key = ET.SubElement(neighbor_addr, "router-bgp-neighbor-address")
        router_bgp_neighbor_address_key.text = kwargs.pop('router_bgp_neighbor_address')
        next_hop_self = ET.SubElement(neighbor_addr, "next-hop-self")
        ch_next_hop_self_type = ET.SubElement(next_hop_self, "ch-next-hop-self-type")
        ca_next_hop_self_always = ET.SubElement(ch_next_hop_self_type, "ca-next-hop-self-always")
        next_hop_self_always = ET.SubElement(ca_next_hop_self_always, "next-hop-self-always")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ips_neighbor_addr_next_hop_self_ch_next_hop_self_type_ca_next_hop_self_status_next_hop_self_status(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ips = ET.SubElement(router_bgp_attributes, "neighbor-ips")
        neighbor_addr = ET.SubElement(neighbor_ips, "neighbor-addr")
        router_bgp_neighbor_address_key = ET.SubElement(neighbor_addr, "router-bgp-neighbor-address")
        router_bgp_neighbor_address_key.text = kwargs.pop('router_bgp_neighbor_address')
        next_hop_self = ET.SubElement(neighbor_addr, "next-hop-self")
        ch_next_hop_self_type = ET.SubElement(next_hop_self, "ch-next-hop-self-type")
        ca_next_hop_self_status = ET.SubElement(ch_next_hop_self_type, "ca-next-hop-self-status")
        next_hop_self_status = ET.SubElement(ca_next_hop_self_status, "next-hop-self-status")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ips_neighbor_addr_advertisement_interval_value(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ips = ET.SubElement(router_bgp_attributes, "neighbor-ips")
        neighbor_addr = ET.SubElement(neighbor_ips, "neighbor-addr")
        router_bgp_neighbor_address_key = ET.SubElement(neighbor_addr, "router-bgp-neighbor-address")
        router_bgp_neighbor_address_key.text = kwargs.pop('router_bgp_neighbor_address')
        advertisement_interval = ET.SubElement(neighbor_addr, "advertisement-interval")
        value = ET.SubElement(advertisement_interval, "value")
        value.text = kwargs.pop('value')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ips_neighbor_addr_ebgp_btsh(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ips = ET.SubElement(router_bgp_attributes, "neighbor-ips")
        neighbor_addr = ET.SubElement(neighbor_ips, "neighbor-addr")
        router_bgp_neighbor_address_key = ET.SubElement(neighbor_addr, "router-bgp-neighbor-address")
        router_bgp_neighbor_address_key.text = kwargs.pop('router_bgp_neighbor_address')
        ebgp_btsh = ET.SubElement(neighbor_addr, "ebgp-btsh")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ips_neighbor_addr_ebgp_multihop_ch_ebgp_multihop_type_ca_ebgp_multihop_flag_ebgp_multihop_flag(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ips = ET.SubElement(router_bgp_attributes, "neighbor-ips")
        neighbor_addr = ET.SubElement(neighbor_ips, "neighbor-addr")
        router_bgp_neighbor_address_key = ET.SubElement(neighbor_addr, "router-bgp-neighbor-address")
        router_bgp_neighbor_address_key.text = kwargs.pop('router_bgp_neighbor_address')
        ebgp_multihop = ET.SubElement(neighbor_addr, "ebgp-multihop")
        ch_ebgp_multihop_type = ET.SubElement(ebgp_multihop, "ch-ebgp-multihop-type")
        ca_ebgp_multihop_flag = ET.SubElement(ch_ebgp_multihop_type, "ca-ebgp-multihop-flag")
        ebgp_multihop_flag = ET.SubElement(ca_ebgp_multihop_flag, "ebgp-multihop-flag")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ips_neighbor_addr_ebgp_multihop_ch_ebgp_multihop_type_ca_ebgp_multihop_count_ebgp_multihop_count(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ips = ET.SubElement(router_bgp_attributes, "neighbor-ips")
        neighbor_addr = ET.SubElement(neighbor_ips, "neighbor-addr")
        router_bgp_neighbor_address_key = ET.SubElement(neighbor_addr, "router-bgp-neighbor-address")
        router_bgp_neighbor_address_key.text = kwargs.pop('router_bgp_neighbor_address')
        ebgp_multihop = ET.SubElement(neighbor_addr, "ebgp-multihop")
        ch_ebgp_multihop_type = ET.SubElement(ebgp_multihop, "ch-ebgp-multihop-type")
        ca_ebgp_multihop_count = ET.SubElement(ch_ebgp_multihop_type, "ca-ebgp-multihop-count")
        ebgp_multihop_count = ET.SubElement(ca_ebgp_multihop_count, "ebgp-multihop-count")
        ebgp_multihop_count.text = kwargs.pop('ebgp_multihop_count')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ips_neighbor_addr_maxas_limit_in_cg_ch_maxas_limit_ca_maxas_limit_enable_num_as_in_as_path(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ips = ET.SubElement(router_bgp_attributes, "neighbor-ips")
        neighbor_addr = ET.SubElement(neighbor_ips, "neighbor-addr")
        router_bgp_neighbor_address_key = ET.SubElement(neighbor_addr, "router-bgp-neighbor-address")
        router_bgp_neighbor_address_key.text = kwargs.pop('router_bgp_neighbor_address')
        maxas_limit = ET.SubElement(neighbor_addr, "maxas-limit")
        in_cg = ET.SubElement(maxas_limit, "in")
        ch_maxas_limit = ET.SubElement(in_cg, "ch-maxas-limit")
        ca_maxas_limit_enable = ET.SubElement(ch_maxas_limit, "ca-maxas-limit-enable")
        num_as_in_as_path = ET.SubElement(ca_maxas_limit_enable, "num-as-in-as-path")
        num_as_in_as_path.text = kwargs.pop('num_as_in_as_path')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ips_neighbor_addr_maxas_limit_in_cg_ch_maxas_limit_ca_maxas_limit_disable_maxas_limit_disable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ips = ET.SubElement(router_bgp_attributes, "neighbor-ips")
        neighbor_addr = ET.SubElement(neighbor_ips, "neighbor-addr")
        router_bgp_neighbor_address_key = ET.SubElement(neighbor_addr, "router-bgp-neighbor-address")
        router_bgp_neighbor_address_key.text = kwargs.pop('router_bgp_neighbor_address')
        maxas_limit = ET.SubElement(neighbor_addr, "maxas-limit")
        in_cg = ET.SubElement(maxas_limit, "in")
        ch_maxas_limit = ET.SubElement(in_cg, "ch-maxas-limit")
        ca_maxas_limit_disable = ET.SubElement(ch_maxas_limit, "ca-maxas-limit-disable")
        maxas_limit_disable = ET.SubElement(ca_maxas_limit_disable, "maxas-limit-disable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ips_neighbor_addr_password(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ips = ET.SubElement(router_bgp_attributes, "neighbor-ips")
        neighbor_addr = ET.SubElement(neighbor_ips, "neighbor-addr")
        router_bgp_neighbor_address_key = ET.SubElement(neighbor_addr, "router-bgp-neighbor-address")
        router_bgp_neighbor_address_key.text = kwargs.pop('router_bgp_neighbor_address')
        password = ET.SubElement(neighbor_addr, "password")
        password.text = kwargs.pop('password')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ips_neighbor_addr_enforce_first_as_nei_enforce_first_as(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ips = ET.SubElement(router_bgp_attributes, "neighbor-ips")
        neighbor_addr = ET.SubElement(neighbor_ips, "neighbor-addr")
        router_bgp_neighbor_address_key = ET.SubElement(neighbor_addr, "router-bgp-neighbor-address")
        router_bgp_neighbor_address_key.text = kwargs.pop('router_bgp_neighbor_address')
        enforce_first_as = ET.SubElement(neighbor_addr, "enforce-first-as")
        nei_enforce_first_as = ET.SubElement(enforce_first_as, "nei-enforce-first-as")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ips_neighbor_addr_enforce_first_as_nei_enforce_first_as_disable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ips = ET.SubElement(router_bgp_attributes, "neighbor-ips")
        neighbor_addr = ET.SubElement(neighbor_ips, "neighbor-addr")
        router_bgp_neighbor_address_key = ET.SubElement(neighbor_addr, "router-bgp-neighbor-address")
        router_bgp_neighbor_address_key.text = kwargs.pop('router_bgp_neighbor_address')
        enforce_first_as = ET.SubElement(neighbor_addr, "enforce-first-as")
        nei_enforce_first_as_disable = ET.SubElement(enforce_first_as, "nei-enforce-first-as-disable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ips_neighbor_addr_neighbor_capability_as4_neighbor_as4_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ips = ET.SubElement(router_bgp_attributes, "neighbor-ips")
        neighbor_addr = ET.SubElement(neighbor_ips, "neighbor-addr")
        router_bgp_neighbor_address_key = ET.SubElement(neighbor_addr, "router-bgp-neighbor-address")
        router_bgp_neighbor_address_key.text = kwargs.pop('router_bgp_neighbor_address')
        neighbor_capability = ET.SubElement(neighbor_addr, "neighbor-capability")
        as4 = ET.SubElement(neighbor_capability, "as4")
        neighbor_as4_enable = ET.SubElement(as4, "neighbor-as4-enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ips_neighbor_addr_neighbor_capability_as4_neighbor_as4_disable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ips = ET.SubElement(router_bgp_attributes, "neighbor-ips")
        neighbor_addr = ET.SubElement(neighbor_ips, "neighbor-addr")
        router_bgp_neighbor_address_key = ET.SubElement(neighbor_addr, "router-bgp-neighbor-address")
        router_bgp_neighbor_address_key.text = kwargs.pop('router_bgp_neighbor_address')
        neighbor_capability = ET.SubElement(neighbor_addr, "neighbor-capability")
        as4 = ET.SubElement(neighbor_capability, "as4")
        neighbor_as4_disable = ET.SubElement(as4, "neighbor-as4-disable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ips_neighbor_addr_timers_nei_keep_alive(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ips = ET.SubElement(router_bgp_attributes, "neighbor-ips")
        neighbor_addr = ET.SubElement(neighbor_ips, "neighbor-addr")
        router_bgp_neighbor_address_key = ET.SubElement(neighbor_addr, "router-bgp-neighbor-address")
        router_bgp_neighbor_address_key.text = kwargs.pop('router_bgp_neighbor_address')
        timers = ET.SubElement(neighbor_addr, "timers")
        nei_keep_alive = ET.SubElement(timers, "nei-keep-alive")
        nei_keep_alive.text = kwargs.pop('nei_keep_alive')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ips_neighbor_addr_timers_nei_hold_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ips = ET.SubElement(router_bgp_attributes, "neighbor-ips")
        neighbor_addr = ET.SubElement(neighbor_ips, "neighbor-addr")
        router_bgp_neighbor_address_key = ET.SubElement(neighbor_addr, "router-bgp-neighbor-address")
        router_bgp_neighbor_address_key.text = kwargs.pop('router_bgp_neighbor_address')
        timers = ET.SubElement(neighbor_addr, "timers")
        nei_hold_time = ET.SubElement(timers, "nei-hold-time")
        nei_hold_time.text = kwargs.pop('nei_hold_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ips_neighbor_addr_remove_private_as(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ips = ET.SubElement(router_bgp_attributes, "neighbor-ips")
        neighbor_addr = ET.SubElement(neighbor_ips, "neighbor-addr")
        router_bgp_neighbor_address_key = ET.SubElement(neighbor_addr, "router-bgp-neighbor-address")
        router_bgp_neighbor_address_key.text = kwargs.pop('router_bgp_neighbor_address')
        remove_private_as = ET.SubElement(neighbor_addr, "remove-private-as")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ips_neighbor_addr_as_override(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ips = ET.SubElement(router_bgp_attributes, "neighbor-ips")
        neighbor_addr = ET.SubElement(neighbor_ips, "neighbor-addr")
        router_bgp_neighbor_address_key = ET.SubElement(neighbor_addr, "router-bgp-neighbor-address")
        router_bgp_neighbor_address_key.text = kwargs.pop('router_bgp_neighbor_address')
        as_override = ET.SubElement(neighbor_addr, "as-override")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ips_neighbor_addr_soft_reconfiguration_inbound(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ips = ET.SubElement(router_bgp_attributes, "neighbor-ips")
        neighbor_addr = ET.SubElement(neighbor_ips, "neighbor-addr")
        router_bgp_neighbor_address_key = ET.SubElement(neighbor_addr, "router-bgp-neighbor-address")
        router_bgp_neighbor_address_key.text = kwargs.pop('router_bgp_neighbor_address')
        soft_reconfiguration = ET.SubElement(neighbor_addr, "soft-reconfiguration")
        inbound = ET.SubElement(soft_reconfiguration, "inbound")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ips_neighbor_addr_static_network_edge(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ips = ET.SubElement(router_bgp_attributes, "neighbor-ips")
        neighbor_addr = ET.SubElement(neighbor_ips, "neighbor-addr")
        router_bgp_neighbor_address_key = ET.SubElement(neighbor_addr, "router-bgp-neighbor-address")
        router_bgp_neighbor_address_key.text = kwargs.pop('router_bgp_neighbor_address')
        static_network_edge = ET.SubElement(neighbor_addr, "static-network-edge")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ips_neighbor_addr_shutdown_shutdown_status(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ips = ET.SubElement(router_bgp_attributes, "neighbor-ips")
        neighbor_addr = ET.SubElement(neighbor_ips, "neighbor-addr")
        router_bgp_neighbor_address_key = ET.SubElement(neighbor_addr, "router-bgp-neighbor-address")
        router_bgp_neighbor_address_key.text = kwargs.pop('router_bgp_neighbor_address')
        shutdown = ET.SubElement(neighbor_addr, "shutdown")
        shutdown_status = ET.SubElement(shutdown, "shutdown-status")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ips_neighbor_addr_shutdown_generate_rib_out(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ips = ET.SubElement(router_bgp_attributes, "neighbor-ips")
        neighbor_addr = ET.SubElement(neighbor_ips, "neighbor-addr")
        router_bgp_neighbor_address_key = ET.SubElement(neighbor_addr, "router-bgp-neighbor-address")
        router_bgp_neighbor_address_key.text = kwargs.pop('router_bgp_neighbor_address')
        shutdown = ET.SubElement(neighbor_addr, "shutdown")
        generate_rib_out = ET.SubElement(shutdown, "generate-rib-out")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_uc_and_vrf_cmds_call_point_holder_bgp_redistribute_internal(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_uc_and_vrf_cmds_call_point_holder = ET.SubElement(ipv4_unicast, "af-ipv4-uc-and-vrf-cmds-call-point-holder")
        bgp_redistribute_internal = ET.SubElement(af_ipv4_uc_and_vrf_cmds_call_point_holder, "bgp-redistribute-internal")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_uc_and_vrf_cmds_call_point_holder_redistribute_connected_redistribute_connected(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_uc_and_vrf_cmds_call_point_holder = ET.SubElement(ipv4_unicast, "af-ipv4-uc-and-vrf-cmds-call-point-holder")
        redistribute = ET.SubElement(af_ipv4_uc_and_vrf_cmds_call_point_holder, "redistribute")
        connected = ET.SubElement(redistribute, "connected")
        redistribute_connected = ET.SubElement(connected, "redistribute-connected")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_uc_and_vrf_cmds_call_point_holder_redistribute_connected_unicast_metric(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_uc_and_vrf_cmds_call_point_holder = ET.SubElement(ipv4_unicast, "af-ipv4-uc-and-vrf-cmds-call-point-holder")
        redistribute = ET.SubElement(af_ipv4_uc_and_vrf_cmds_call_point_holder, "redistribute")
        connected = ET.SubElement(redistribute, "connected")
        unicast_metric = ET.SubElement(connected, "unicast-metric")
        unicast_metric.text = kwargs.pop('unicast_metric')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_uc_and_vrf_cmds_call_point_holder_redistribute_connected_redistribute_route_map(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_uc_and_vrf_cmds_call_point_holder = ET.SubElement(ipv4_unicast, "af-ipv4-uc-and-vrf-cmds-call-point-holder")
        redistribute = ET.SubElement(af_ipv4_uc_and_vrf_cmds_call_point_holder, "redistribute")
        connected = ET.SubElement(redistribute, "connected")
        redistribute_route_map = ET.SubElement(connected, "redistribute-route-map")
        redistribute_route_map.text = kwargs.pop('redistribute_route_map')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_uc_and_vrf_cmds_call_point_holder_redistribute_ospf_redistribute_ospf(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_uc_and_vrf_cmds_call_point_holder = ET.SubElement(ipv4_unicast, "af-ipv4-uc-and-vrf-cmds-call-point-holder")
        redistribute = ET.SubElement(af_ipv4_uc_and_vrf_cmds_call_point_holder, "redistribute")
        ospf = ET.SubElement(redistribute, "ospf")
        redistribute_ospf = ET.SubElement(ospf, "redistribute-ospf")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_uc_and_vrf_cmds_call_point_holder_redistribute_ospf_match_ospf_internal(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_uc_and_vrf_cmds_call_point_holder = ET.SubElement(ipv4_unicast, "af-ipv4-uc-and-vrf-cmds-call-point-holder")
        redistribute = ET.SubElement(af_ipv4_uc_and_vrf_cmds_call_point_holder, "redistribute")
        ospf = ET.SubElement(redistribute, "ospf")
        match = ET.SubElement(ospf, "match")
        ospf_internal = ET.SubElement(match, "ospf-internal")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_uc_and_vrf_cmds_call_point_holder_redistribute_ospf_match_ospf_external1(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_uc_and_vrf_cmds_call_point_holder = ET.SubElement(ipv4_unicast, "af-ipv4-uc-and-vrf-cmds-call-point-holder")
        redistribute = ET.SubElement(af_ipv4_uc_and_vrf_cmds_call_point_holder, "redistribute")
        ospf = ET.SubElement(redistribute, "ospf")
        match = ET.SubElement(ospf, "match")
        ospf_external1 = ET.SubElement(match, "ospf-external1")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_uc_and_vrf_cmds_call_point_holder_redistribute_ospf_match_ospf_external2(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_uc_and_vrf_cmds_call_point_holder = ET.SubElement(ipv4_unicast, "af-ipv4-uc-and-vrf-cmds-call-point-holder")
        redistribute = ET.SubElement(af_ipv4_uc_and_vrf_cmds_call_point_holder, "redistribute")
        ospf = ET.SubElement(redistribute, "ospf")
        match = ET.SubElement(ospf, "match")
        ospf_external2 = ET.SubElement(match, "ospf-external2")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_uc_and_vrf_cmds_call_point_holder_redistribute_ospf_ospf_metric(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_uc_and_vrf_cmds_call_point_holder = ET.SubElement(ipv4_unicast, "af-ipv4-uc-and-vrf-cmds-call-point-holder")
        redistribute = ET.SubElement(af_ipv4_uc_and_vrf_cmds_call_point_holder, "redistribute")
        ospf = ET.SubElement(redistribute, "ospf")
        ospf_metric = ET.SubElement(ospf, "ospf-metric")
        ospf_metric.text = kwargs.pop('ospf_metric')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_uc_and_vrf_cmds_call_point_holder_redistribute_ospf_ospf_route_map(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_uc_and_vrf_cmds_call_point_holder = ET.SubElement(ipv4_unicast, "af-ipv4-uc-and-vrf-cmds-call-point-holder")
        redistribute = ET.SubElement(af_ipv4_uc_and_vrf_cmds_call_point_holder, "redistribute")
        ospf = ET.SubElement(redistribute, "ospf")
        ospf_route_map = ET.SubElement(ospf, "ospf-route-map")
        ospf_route_map.text = kwargs.pop('ospf_route_map')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_uc_and_vrf_cmds_call_point_holder_redistribute_static_redistribute_static(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_uc_and_vrf_cmds_call_point_holder = ET.SubElement(ipv4_unicast, "af-ipv4-uc-and-vrf-cmds-call-point-holder")
        redistribute = ET.SubElement(af_ipv4_uc_and_vrf_cmds_call_point_holder, "redistribute")
        static = ET.SubElement(redistribute, "static")
        redistribute_static = ET.SubElement(static, "redistribute-static")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_uc_and_vrf_cmds_call_point_holder_redistribute_static_unicast_static_metric(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_uc_and_vrf_cmds_call_point_holder = ET.SubElement(ipv4_unicast, "af-ipv4-uc-and-vrf-cmds-call-point-holder")
        redistribute = ET.SubElement(af_ipv4_uc_and_vrf_cmds_call_point_holder, "redistribute")
        static = ET.SubElement(redistribute, "static")
        unicast_static_metric = ET.SubElement(static, "unicast-static-metric")
        unicast_static_metric.text = kwargs.pop('unicast_static_metric')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_uc_and_vrf_cmds_call_point_holder_redistribute_static_static_route_map(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_uc_and_vrf_cmds_call_point_holder = ET.SubElement(ipv4_unicast, "af-ipv4-uc-and-vrf-cmds-call-point-holder")
        redistribute = ET.SubElement(af_ipv4_uc_and_vrf_cmds_call_point_holder, "redistribute")
        static = ET.SubElement(redistribute, "static")
        static_route_map = ET.SubElement(static, "static-route-map")
        static_route_map.text = kwargs.pop('static_route_map')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_static_network_static_network_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        static_network = ET.SubElement(ipv4_unicast, "static-network")
        static_network_address = ET.SubElement(static_network, "static-network-address")
        static_network_address.text = kwargs.pop('static_network_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_static_network_static_network_distance(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        static_network = ET.SubElement(ipv4_unicast, "static-network")
        static_network_address_key = ET.SubElement(static_network, "static-network-address")
        static_network_address_key.text = kwargs.pop('static_network_address')
        static_network_distance = ET.SubElement(static_network, "static-network-distance")
        static_network_distance.text = kwargs.pop('static_network_distance')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_aggregate_address_aggregate_ip_prefix(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        aggregate_address = ET.SubElement(ipv4_unicast, "aggregate-address")
        aggregate_ip_prefix = ET.SubElement(aggregate_address, "aggregate-ip-prefix")
        aggregate_ip_prefix.text = kwargs.pop('aggregate_ip_prefix')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_aggregate_address_advertise_map(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        aggregate_address = ET.SubElement(ipv4_unicast, "aggregate-address")
        aggregate_ip_prefix_key = ET.SubElement(aggregate_address, "aggregate-ip-prefix")
        aggregate_ip_prefix_key.text = kwargs.pop('aggregate_ip_prefix')
        advertise_map = ET.SubElement(aggregate_address, "advertise-map")
        advertise_map.text = kwargs.pop('advertise_map')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_aggregate_address_as_set(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        aggregate_address = ET.SubElement(ipv4_unicast, "aggregate-address")
        aggregate_ip_prefix_key = ET.SubElement(aggregate_address, "aggregate-ip-prefix")
        aggregate_ip_prefix_key.text = kwargs.pop('aggregate_ip_prefix')
        as_set = ET.SubElement(aggregate_address, "as-set")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_aggregate_address_attribute_map(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        aggregate_address = ET.SubElement(ipv4_unicast, "aggregate-address")
        aggregate_ip_prefix_key = ET.SubElement(aggregate_address, "aggregate-ip-prefix")
        aggregate_ip_prefix_key.text = kwargs.pop('aggregate_ip_prefix')
        attribute_map = ET.SubElement(aggregate_address, "attribute-map")
        attribute_map.text = kwargs.pop('attribute_map')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_aggregate_address_summary_only(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        aggregate_address = ET.SubElement(ipv4_unicast, "aggregate-address")
        aggregate_ip_prefix_key = ET.SubElement(aggregate_address, "aggregate-ip-prefix")
        aggregate_ip_prefix_key.text = kwargs.pop('aggregate_ip_prefix')
        summary_only = ET.SubElement(aggregate_address, "summary-only")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_aggregate_address_suppress_map(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        aggregate_address = ET.SubElement(ipv4_unicast, "aggregate-address")
        aggregate_ip_prefix_key = ET.SubElement(aggregate_address, "aggregate-ip-prefix")
        aggregate_ip_prefix_key.text = kwargs.pop('aggregate_ip_prefix')
        suppress_map = ET.SubElement(aggregate_address, "suppress-map")
        suppress_map.text = kwargs.pop('suppress_map')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_network_network_ipv4_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        network = ET.SubElement(ipv4_unicast, "network")
        network_ipv4_address = ET.SubElement(network, "network-ipv4-address")
        network_ipv4_address.text = kwargs.pop('network_ipv4_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_network_network_weight(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        network = ET.SubElement(ipv4_unicast, "network")
        network_ipv4_address_key = ET.SubElement(network, "network-ipv4-address")
        network_ipv4_address_key.text = kwargs.pop('network_ipv4_address')
        network_weight = ET.SubElement(network, "network-weight")
        network_weight.text = kwargs.pop('network_weight')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_network_backdoor(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        network = ET.SubElement(ipv4_unicast, "network")
        network_ipv4_address_key = ET.SubElement(network, "network-ipv4-address")
        network_ipv4_address_key.text = kwargs.pop('network_ipv4_address')
        backdoor = ET.SubElement(network, "backdoor")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_network_network_route_map(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        network = ET.SubElement(ipv4_unicast, "network")
        network_ipv4_address_key = ET.SubElement(network, "network-ipv4-address")
        network_ipv4_address_key.text = kwargs.pop('network_ipv4_address')
        network_route_map = ET.SubElement(network, "network-route-map")
        network_route_map.text = kwargs.pop('network_route_map')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_peergroup_holder_af_ipv4_neighbor_peergroup_af_ipv4_neighbor_peergroup_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_peergroup_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-peergroup-holder")
        af_ipv4_neighbor_peergroup = ET.SubElement(af_ipv4_neighbor_peergroup_holder, "af-ipv4-neighbor-peergroup")
        af_ipv4_neighbor_peergroup_name = ET.SubElement(af_ipv4_neighbor_peergroup, "af-ipv4-neighbor-peergroup-name")
        af_ipv4_neighbor_peergroup_name.text = kwargs.pop('af_ipv4_neighbor_peergroup_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_peergroup_holder_af_ipv4_neighbor_peergroup_send_community_send_community_status(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_peergroup_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-peergroup-holder")
        af_ipv4_neighbor_peergroup = ET.SubElement(af_ipv4_neighbor_peergroup_holder, "af-ipv4-neighbor-peergroup")
        af_ipv4_neighbor_peergroup_name_key = ET.SubElement(af_ipv4_neighbor_peergroup, "af-ipv4-neighbor-peergroup-name")
        af_ipv4_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv4_neighbor_peergroup_name')
        send_community = ET.SubElement(af_ipv4_neighbor_peergroup, "send-community")
        send_community_status = ET.SubElement(send_community, "send-community-status")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_peergroup_holder_af_ipv4_neighbor_peergroup_send_community_both(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_peergroup_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-peergroup-holder")
        af_ipv4_neighbor_peergroup = ET.SubElement(af_ipv4_neighbor_peergroup_holder, "af-ipv4-neighbor-peergroup")
        af_ipv4_neighbor_peergroup_name_key = ET.SubElement(af_ipv4_neighbor_peergroup, "af-ipv4-neighbor-peergroup-name")
        af_ipv4_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv4_neighbor_peergroup_name')
        send_community = ET.SubElement(af_ipv4_neighbor_peergroup, "send-community")
        both = ET.SubElement(send_community, "both")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_peergroup_holder_af_ipv4_neighbor_peergroup_send_community_extended(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_peergroup_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-peergroup-holder")
        af_ipv4_neighbor_peergroup = ET.SubElement(af_ipv4_neighbor_peergroup_holder, "af-ipv4-neighbor-peergroup")
        af_ipv4_neighbor_peergroup_name_key = ET.SubElement(af_ipv4_neighbor_peergroup, "af-ipv4-neighbor-peergroup-name")
        af_ipv4_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv4_neighbor_peergroup_name')
        send_community = ET.SubElement(af_ipv4_neighbor_peergroup, "send-community")
        extended = ET.SubElement(send_community, "extended")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_peergroup_holder_af_ipv4_neighbor_peergroup_send_community_standard(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_peergroup_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-peergroup-holder")
        af_ipv4_neighbor_peergroup = ET.SubElement(af_ipv4_neighbor_peergroup_holder, "af-ipv4-neighbor-peergroup")
        af_ipv4_neighbor_peergroup_name_key = ET.SubElement(af_ipv4_neighbor_peergroup, "af-ipv4-neighbor-peergroup-name")
        af_ipv4_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv4_neighbor_peergroup_name')
        send_community = ET.SubElement(af_ipv4_neighbor_peergroup, "send-community")
        standard = ET.SubElement(send_community, "standard")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_peergroup_holder_af_ipv4_neighbor_peergroup_af_neighbor_capability_orf_prefixlist_prefixlist_status(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_peergroup_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-peergroup-holder")
        af_ipv4_neighbor_peergroup = ET.SubElement(af_ipv4_neighbor_peergroup_holder, "af-ipv4-neighbor-peergroup")
        af_ipv4_neighbor_peergroup_name_key = ET.SubElement(af_ipv4_neighbor_peergroup, "af-ipv4-neighbor-peergroup-name")
        af_ipv4_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv4_neighbor_peergroup_name')
        af_neighbor_capability = ET.SubElement(af_ipv4_neighbor_peergroup, "af-neighbor-capability")
        orf = ET.SubElement(af_neighbor_capability, "orf")
        prefixlist = ET.SubElement(orf, "prefixlist")
        prefixlist_status = ET.SubElement(prefixlist, "prefixlist-status")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_peergroup_holder_af_ipv4_neighbor_peergroup_af_neighbor_capability_orf_prefixlist_prefixlist_send(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_peergroup_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-peergroup-holder")
        af_ipv4_neighbor_peergroup = ET.SubElement(af_ipv4_neighbor_peergroup_holder, "af-ipv4-neighbor-peergroup")
        af_ipv4_neighbor_peergroup_name_key = ET.SubElement(af_ipv4_neighbor_peergroup, "af-ipv4-neighbor-peergroup-name")
        af_ipv4_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv4_neighbor_peergroup_name')
        af_neighbor_capability = ET.SubElement(af_ipv4_neighbor_peergroup, "af-neighbor-capability")
        orf = ET.SubElement(af_neighbor_capability, "orf")
        prefixlist = ET.SubElement(orf, "prefixlist")
        prefixlist_send = ET.SubElement(prefixlist, "prefixlist-send")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_peergroup_holder_af_ipv4_neighbor_peergroup_af_neighbor_capability_orf_prefixlist_prefixlist_receive(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_peergroup_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-peergroup-holder")
        af_ipv4_neighbor_peergroup = ET.SubElement(af_ipv4_neighbor_peergroup_holder, "af-ipv4-neighbor-peergroup")
        af_ipv4_neighbor_peergroup_name_key = ET.SubElement(af_ipv4_neighbor_peergroup, "af-ipv4-neighbor-peergroup-name")
        af_ipv4_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv4_neighbor_peergroup_name')
        af_neighbor_capability = ET.SubElement(af_ipv4_neighbor_peergroup, "af-neighbor-capability")
        orf = ET.SubElement(af_neighbor_capability, "orf")
        prefixlist = ET.SubElement(orf, "prefixlist")
        prefixlist_receive = ET.SubElement(prefixlist, "prefixlist-receive")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_peergroup_holder_af_ipv4_neighbor_peergroup_allowas_in(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_peergroup_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-peergroup-holder")
        af_ipv4_neighbor_peergroup = ET.SubElement(af_ipv4_neighbor_peergroup_holder, "af-ipv4-neighbor-peergroup")
        af_ipv4_neighbor_peergroup_name_key = ET.SubElement(af_ipv4_neighbor_peergroup, "af-ipv4-neighbor-peergroup-name")
        af_ipv4_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv4_neighbor_peergroup_name')
        allowas_in = ET.SubElement(af_ipv4_neighbor_peergroup, "allowas-in")
        allowas_in.text = kwargs.pop('allowas_in')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_peergroup_holder_af_ipv4_neighbor_peergroup_activate(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_peergroup_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-peergroup-holder")
        af_ipv4_neighbor_peergroup = ET.SubElement(af_ipv4_neighbor_peergroup_holder, "af-ipv4-neighbor-peergroup")
        af_ipv4_neighbor_peergroup_name_key = ET.SubElement(af_ipv4_neighbor_peergroup, "af-ipv4-neighbor-peergroup-name")
        af_ipv4_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv4_neighbor_peergroup_name')
        activate = ET.SubElement(af_ipv4_neighbor_peergroup, "activate")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_peergroup_holder_af_ipv4_neighbor_peergroup_filter_list_direction_in_filter_list_direction_in_acl_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_peergroup_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-peergroup-holder")
        af_ipv4_neighbor_peergroup = ET.SubElement(af_ipv4_neighbor_peergroup_holder, "af-ipv4-neighbor-peergroup")
        af_ipv4_neighbor_peergroup_name_key = ET.SubElement(af_ipv4_neighbor_peergroup, "af-ipv4-neighbor-peergroup-name")
        af_ipv4_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv4_neighbor_peergroup_name')
        filter_list = ET.SubElement(af_ipv4_neighbor_peergroup, "filter-list")
        direction_in = ET.SubElement(filter_list, "direction-in")
        filter_list_direction_in_acl_name = ET.SubElement(direction_in, "filter-list-direction-in-acl-name")
        filter_list_direction_in_acl_name.text = kwargs.pop('filter_list_direction_in_acl_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_peergroup_holder_af_ipv4_neighbor_peergroup_filter_list_direction_in_filter_list_name_direction_in(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_peergroup_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-peergroup-holder")
        af_ipv4_neighbor_peergroup = ET.SubElement(af_ipv4_neighbor_peergroup_holder, "af-ipv4-neighbor-peergroup")
        af_ipv4_neighbor_peergroup_name_key = ET.SubElement(af_ipv4_neighbor_peergroup, "af-ipv4-neighbor-peergroup-name")
        af_ipv4_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv4_neighbor_peergroup_name')
        filter_list = ET.SubElement(af_ipv4_neighbor_peergroup, "filter-list")
        direction_in = ET.SubElement(filter_list, "direction-in")
        filter_list_name_direction_in = ET.SubElement(direction_in, "filter-list-name-direction-in")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_peergroup_holder_af_ipv4_neighbor_peergroup_filter_list_direction_out_filter_list_direction_out_acl_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_peergroup_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-peergroup-holder")
        af_ipv4_neighbor_peergroup = ET.SubElement(af_ipv4_neighbor_peergroup_holder, "af-ipv4-neighbor-peergroup")
        af_ipv4_neighbor_peergroup_name_key = ET.SubElement(af_ipv4_neighbor_peergroup, "af-ipv4-neighbor-peergroup-name")
        af_ipv4_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv4_neighbor_peergroup_name')
        filter_list = ET.SubElement(af_ipv4_neighbor_peergroup, "filter-list")
        direction_out = ET.SubElement(filter_list, "direction-out")
        filter_list_direction_out_acl_name = ET.SubElement(direction_out, "filter-list-direction-out-acl-name")
        filter_list_direction_out_acl_name.text = kwargs.pop('filter_list_direction_out_acl_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_peergroup_holder_af_ipv4_neighbor_peergroup_filter_list_direction_out_filter_list_name_direction_out(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_peergroup_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-peergroup-holder")
        af_ipv4_neighbor_peergroup = ET.SubElement(af_ipv4_neighbor_peergroup_holder, "af-ipv4-neighbor-peergroup")
        af_ipv4_neighbor_peergroup_name_key = ET.SubElement(af_ipv4_neighbor_peergroup, "af-ipv4-neighbor-peergroup-name")
        af_ipv4_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv4_neighbor_peergroup_name')
        filter_list = ET.SubElement(af_ipv4_neighbor_peergroup, "filter-list")
        direction_out = ET.SubElement(filter_list, "direction-out")
        filter_list_name_direction_out = ET.SubElement(direction_out, "filter-list-name-direction-out")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_peergroup_holder_af_ipv4_neighbor_peergroup_maximum_prefix_max_prefix_limit(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_peergroup_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-peergroup-holder")
        af_ipv4_neighbor_peergroup = ET.SubElement(af_ipv4_neighbor_peergroup_holder, "af-ipv4-neighbor-peergroup")
        af_ipv4_neighbor_peergroup_name_key = ET.SubElement(af_ipv4_neighbor_peergroup, "af-ipv4-neighbor-peergroup-name")
        af_ipv4_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv4_neighbor_peergroup_name')
        maximum_prefix = ET.SubElement(af_ipv4_neighbor_peergroup, "maximum-prefix")
        max_prefix_limit = ET.SubElement(maximum_prefix, "max-prefix-limit")
        max_prefix_limit.text = kwargs.pop('max_prefix_limit')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_peergroup_holder_af_ipv4_neighbor_peergroup_maximum_prefix_threshold_holder_threshold(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_peergroup_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-peergroup-holder")
        af_ipv4_neighbor_peergroup = ET.SubElement(af_ipv4_neighbor_peergroup_holder, "af-ipv4-neighbor-peergroup")
        af_ipv4_neighbor_peergroup_name_key = ET.SubElement(af_ipv4_neighbor_peergroup, "af-ipv4-neighbor-peergroup-name")
        af_ipv4_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv4_neighbor_peergroup_name')
        maximum_prefix = ET.SubElement(af_ipv4_neighbor_peergroup, "maximum-prefix")
        threshold_holder = ET.SubElement(maximum_prefix, "threshold-holder")
        threshold = ET.SubElement(threshold_holder, "threshold")
        threshold.text = kwargs.pop('threshold')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_peergroup_holder_af_ipv4_neighbor_peergroup_maximum_prefix_threshold_holder_teardown(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_peergroup_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-peergroup-holder")
        af_ipv4_neighbor_peergroup = ET.SubElement(af_ipv4_neighbor_peergroup_holder, "af-ipv4-neighbor-peergroup")
        af_ipv4_neighbor_peergroup_name_key = ET.SubElement(af_ipv4_neighbor_peergroup, "af-ipv4-neighbor-peergroup-name")
        af_ipv4_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv4_neighbor_peergroup_name')
        maximum_prefix = ET.SubElement(af_ipv4_neighbor_peergroup, "maximum-prefix")
        threshold_holder = ET.SubElement(maximum_prefix, "threshold-holder")
        teardown = ET.SubElement(threshold_holder, "teardown")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_peergroup_holder_af_ipv4_neighbor_peergroup_default_originate_default_originate_status(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_peergroup_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-peergroup-holder")
        af_ipv4_neighbor_peergroup = ET.SubElement(af_ipv4_neighbor_peergroup_holder, "af-ipv4-neighbor-peergroup")
        af_ipv4_neighbor_peergroup_name_key = ET.SubElement(af_ipv4_neighbor_peergroup, "af-ipv4-neighbor-peergroup-name")
        af_ipv4_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv4_neighbor_peergroup_name')
        default_originate = ET.SubElement(af_ipv4_neighbor_peergroup, "default-originate")
        default_originate_status = ET.SubElement(default_originate, "default-originate-status")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_peergroup_holder_af_ipv4_neighbor_peergroup_default_originate_default_originate_route_map(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_peergroup_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-peergroup-holder")
        af_ipv4_neighbor_peergroup = ET.SubElement(af_ipv4_neighbor_peergroup_holder, "af-ipv4-neighbor-peergroup")
        af_ipv4_neighbor_peergroup_name_key = ET.SubElement(af_ipv4_neighbor_peergroup, "af-ipv4-neighbor-peergroup-name")
        af_ipv4_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv4_neighbor_peergroup_name')
        default_originate = ET.SubElement(af_ipv4_neighbor_peergroup, "default-originate")
        default_originate_route_map = ET.SubElement(default_originate, "default-originate-route-map")
        default_originate_route_map.text = kwargs.pop('default_originate_route_map')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_peergroup_holder_af_ipv4_neighbor_peergroup_prefix_list_direction_in_prefix_list_direction_in_prefix_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_peergroup_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-peergroup-holder")
        af_ipv4_neighbor_peergroup = ET.SubElement(af_ipv4_neighbor_peergroup_holder, "af-ipv4-neighbor-peergroup")
        af_ipv4_neighbor_peergroup_name_key = ET.SubElement(af_ipv4_neighbor_peergroup, "af-ipv4-neighbor-peergroup-name")
        af_ipv4_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv4_neighbor_peergroup_name')
        prefix_list = ET.SubElement(af_ipv4_neighbor_peergroup, "prefix-list")
        direction_in = ET.SubElement(prefix_list, "direction-in")
        prefix_list_direction_in_prefix_name = ET.SubElement(direction_in, "prefix-list-direction-in-prefix-name")
        prefix_list_direction_in_prefix_name.text = kwargs.pop('prefix_list_direction_in_prefix_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_peergroup_holder_af_ipv4_neighbor_peergroup_prefix_list_direction_in_prefix_list_direction_in(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_peergroup_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-peergroup-holder")
        af_ipv4_neighbor_peergroup = ET.SubElement(af_ipv4_neighbor_peergroup_holder, "af-ipv4-neighbor-peergroup")
        af_ipv4_neighbor_peergroup_name_key = ET.SubElement(af_ipv4_neighbor_peergroup, "af-ipv4-neighbor-peergroup-name")
        af_ipv4_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv4_neighbor_peergroup_name')
        prefix_list = ET.SubElement(af_ipv4_neighbor_peergroup, "prefix-list")
        direction_in = ET.SubElement(prefix_list, "direction-in")
        prefix_list_direction_in = ET.SubElement(direction_in, "prefix-list-direction-in")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_peergroup_holder_af_ipv4_neighbor_peergroup_prefix_list_direction_out_prefix_list_direction_out_prefix_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_peergroup_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-peergroup-holder")
        af_ipv4_neighbor_peergroup = ET.SubElement(af_ipv4_neighbor_peergroup_holder, "af-ipv4-neighbor-peergroup")
        af_ipv4_neighbor_peergroup_name_key = ET.SubElement(af_ipv4_neighbor_peergroup, "af-ipv4-neighbor-peergroup-name")
        af_ipv4_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv4_neighbor_peergroup_name')
        prefix_list = ET.SubElement(af_ipv4_neighbor_peergroup, "prefix-list")
        direction_out = ET.SubElement(prefix_list, "direction-out")
        prefix_list_direction_out_prefix_name = ET.SubElement(direction_out, "prefix-list-direction-out-prefix-name")
        prefix_list_direction_out_prefix_name.text = kwargs.pop('prefix_list_direction_out_prefix_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_peergroup_holder_af_ipv4_neighbor_peergroup_prefix_list_direction_out_prefix_list_direction_out(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_peergroup_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-peergroup-holder")
        af_ipv4_neighbor_peergroup = ET.SubElement(af_ipv4_neighbor_peergroup_holder, "af-ipv4-neighbor-peergroup")
        af_ipv4_neighbor_peergroup_name_key = ET.SubElement(af_ipv4_neighbor_peergroup, "af-ipv4-neighbor-peergroup-name")
        af_ipv4_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv4_neighbor_peergroup_name')
        prefix_list = ET.SubElement(af_ipv4_neighbor_peergroup, "prefix-list")
        direction_out = ET.SubElement(prefix_list, "direction-out")
        prefix_list_direction_out = ET.SubElement(direction_out, "prefix-list-direction-out")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_peergroup_holder_af_ipv4_neighbor_peergroup_neighbor_route_map_neighbor_route_map_direction_in_neighbor_route_map_name_direction_in(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_peergroup_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-peergroup-holder")
        af_ipv4_neighbor_peergroup = ET.SubElement(af_ipv4_neighbor_peergroup_holder, "af-ipv4-neighbor-peergroup")
        af_ipv4_neighbor_peergroup_name_key = ET.SubElement(af_ipv4_neighbor_peergroup, "af-ipv4-neighbor-peergroup-name")
        af_ipv4_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv4_neighbor_peergroup_name')
        neighbor_route_map = ET.SubElement(af_ipv4_neighbor_peergroup, "neighbor-route-map")
        neighbor_route_map_direction_in = ET.SubElement(neighbor_route_map, "neighbor-route-map-direction-in")
        neighbor_route_map_name_direction_in = ET.SubElement(neighbor_route_map_direction_in, "neighbor-route-map-name-direction-in")
        neighbor_route_map_name_direction_in.text = kwargs.pop('neighbor_route_map_name_direction_in')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_peergroup_holder_af_ipv4_neighbor_peergroup_neighbor_route_map_neighbor_route_map_direction_out_neighbor_route_map_name_direction_out(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_peergroup_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-peergroup-holder")
        af_ipv4_neighbor_peergroup = ET.SubElement(af_ipv4_neighbor_peergroup_holder, "af-ipv4-neighbor-peergroup")
        af_ipv4_neighbor_peergroup_name_key = ET.SubElement(af_ipv4_neighbor_peergroup, "af-ipv4-neighbor-peergroup-name")
        af_ipv4_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv4_neighbor_peergroup_name')
        neighbor_route_map = ET.SubElement(af_ipv4_neighbor_peergroup, "neighbor-route-map")
        neighbor_route_map_direction_out = ET.SubElement(neighbor_route_map, "neighbor-route-map-direction-out")
        neighbor_route_map_name_direction_out = ET.SubElement(neighbor_route_map_direction_out, "neighbor-route-map-name-direction-out")
        neighbor_route_map_name_direction_out.text = kwargs.pop('neighbor_route_map_name_direction_out')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_peergroup_holder_af_ipv4_neighbor_peergroup_route_reflector_client(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_peergroup_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-peergroup-holder")
        af_ipv4_neighbor_peergroup = ET.SubElement(af_ipv4_neighbor_peergroup_holder, "af-ipv4-neighbor-peergroup")
        af_ipv4_neighbor_peergroup_name_key = ET.SubElement(af_ipv4_neighbor_peergroup, "af-ipv4-neighbor-peergroup-name")
        af_ipv4_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv4_neighbor_peergroup_name')
        route_reflector_client = ET.SubElement(af_ipv4_neighbor_peergroup, "route-reflector-client")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_peergroup_holder_af_ipv4_neighbor_peergroup_unsuppress_map_map_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_peergroup_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-peergroup-holder")
        af_ipv4_neighbor_peergroup = ET.SubElement(af_ipv4_neighbor_peergroup_holder, "af-ipv4-neighbor-peergroup")
        af_ipv4_neighbor_peergroup_name_key = ET.SubElement(af_ipv4_neighbor_peergroup, "af-ipv4-neighbor-peergroup-name")
        af_ipv4_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv4_neighbor_peergroup_name')
        unsuppress_map = ET.SubElement(af_ipv4_neighbor_peergroup, "unsuppress-map")
        map_name = ET.SubElement(unsuppress_map, "map-name")
        map_name.text = kwargs.pop('map_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_peergroup_holder_af_ipv4_neighbor_peergroup_af_nei_weight(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_peergroup_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-peergroup-holder")
        af_ipv4_neighbor_peergroup = ET.SubElement(af_ipv4_neighbor_peergroup_holder, "af-ipv4-neighbor-peergroup")
        af_ipv4_neighbor_peergroup_name_key = ET.SubElement(af_ipv4_neighbor_peergroup, "af-ipv4-neighbor-peergroup-name")
        af_ipv4_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv4_neighbor_peergroup_name')
        af_nei_weight = ET.SubElement(af_ipv4_neighbor_peergroup, "af-nei-weight")
        af_nei_weight.text = kwargs.pop('af_nei_weight')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_address_holder_af_ipv4_neighbor_address_af_ipv4_neighbor_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_address_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-address-holder")
        af_ipv4_neighbor_address = ET.SubElement(af_ipv4_neighbor_address_holder, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address = ET.SubElement(af_ipv4_neighbor_address, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address.text = kwargs.pop('af_ipv4_neighbor_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_address_holder_af_ipv4_neighbor_address_send_community_send_community_status(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_address_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-address-holder")
        af_ipv4_neighbor_address = ET.SubElement(af_ipv4_neighbor_address_holder, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key = ET.SubElement(af_ipv4_neighbor_address, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key.text = kwargs.pop('af_ipv4_neighbor_address')
        send_community = ET.SubElement(af_ipv4_neighbor_address, "send-community")
        send_community_status = ET.SubElement(send_community, "send-community-status")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_address_holder_af_ipv4_neighbor_address_send_community_both(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_address_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-address-holder")
        af_ipv4_neighbor_address = ET.SubElement(af_ipv4_neighbor_address_holder, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key = ET.SubElement(af_ipv4_neighbor_address, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key.text = kwargs.pop('af_ipv4_neighbor_address')
        send_community = ET.SubElement(af_ipv4_neighbor_address, "send-community")
        both = ET.SubElement(send_community, "both")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_address_holder_af_ipv4_neighbor_address_send_community_extended(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_address_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-address-holder")
        af_ipv4_neighbor_address = ET.SubElement(af_ipv4_neighbor_address_holder, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key = ET.SubElement(af_ipv4_neighbor_address, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key.text = kwargs.pop('af_ipv4_neighbor_address')
        send_community = ET.SubElement(af_ipv4_neighbor_address, "send-community")
        extended = ET.SubElement(send_community, "extended")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_address_holder_af_ipv4_neighbor_address_send_community_standard(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_address_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-address-holder")
        af_ipv4_neighbor_address = ET.SubElement(af_ipv4_neighbor_address_holder, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key = ET.SubElement(af_ipv4_neighbor_address, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key.text = kwargs.pop('af_ipv4_neighbor_address')
        send_community = ET.SubElement(af_ipv4_neighbor_address, "send-community")
        standard = ET.SubElement(send_community, "standard")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_address_holder_af_ipv4_neighbor_address_af_neighbor_capability_orf_prefixlist_prefixlist_status(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_address_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-address-holder")
        af_ipv4_neighbor_address = ET.SubElement(af_ipv4_neighbor_address_holder, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key = ET.SubElement(af_ipv4_neighbor_address, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key.text = kwargs.pop('af_ipv4_neighbor_address')
        af_neighbor_capability = ET.SubElement(af_ipv4_neighbor_address, "af-neighbor-capability")
        orf = ET.SubElement(af_neighbor_capability, "orf")
        prefixlist = ET.SubElement(orf, "prefixlist")
        prefixlist_status = ET.SubElement(prefixlist, "prefixlist-status")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_address_holder_af_ipv4_neighbor_address_af_neighbor_capability_orf_prefixlist_prefixlist_send(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_address_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-address-holder")
        af_ipv4_neighbor_address = ET.SubElement(af_ipv4_neighbor_address_holder, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key = ET.SubElement(af_ipv4_neighbor_address, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key.text = kwargs.pop('af_ipv4_neighbor_address')
        af_neighbor_capability = ET.SubElement(af_ipv4_neighbor_address, "af-neighbor-capability")
        orf = ET.SubElement(af_neighbor_capability, "orf")
        prefixlist = ET.SubElement(orf, "prefixlist")
        prefixlist_send = ET.SubElement(prefixlist, "prefixlist-send")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_address_holder_af_ipv4_neighbor_address_af_neighbor_capability_orf_prefixlist_prefixlist_receive(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_address_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-address-holder")
        af_ipv4_neighbor_address = ET.SubElement(af_ipv4_neighbor_address_holder, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key = ET.SubElement(af_ipv4_neighbor_address, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key.text = kwargs.pop('af_ipv4_neighbor_address')
        af_neighbor_capability = ET.SubElement(af_ipv4_neighbor_address, "af-neighbor-capability")
        orf = ET.SubElement(af_neighbor_capability, "orf")
        prefixlist = ET.SubElement(orf, "prefixlist")
        prefixlist_receive = ET.SubElement(prefixlist, "prefixlist-receive")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_address_holder_af_ipv4_neighbor_address_allowas_in(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_address_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-address-holder")
        af_ipv4_neighbor_address = ET.SubElement(af_ipv4_neighbor_address_holder, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key = ET.SubElement(af_ipv4_neighbor_address, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key.text = kwargs.pop('af_ipv4_neighbor_address')
        allowas_in = ET.SubElement(af_ipv4_neighbor_address, "allowas-in")
        allowas_in.text = kwargs.pop('allowas_in')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_address_holder_af_ipv4_neighbor_address_activate(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_address_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-address-holder")
        af_ipv4_neighbor_address = ET.SubElement(af_ipv4_neighbor_address_holder, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key = ET.SubElement(af_ipv4_neighbor_address, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key.text = kwargs.pop('af_ipv4_neighbor_address')
        activate = ET.SubElement(af_ipv4_neighbor_address, "activate")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_address_holder_af_ipv4_neighbor_address_filter_list_direction_in_filter_list_direction_in_acl_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_address_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-address-holder")
        af_ipv4_neighbor_address = ET.SubElement(af_ipv4_neighbor_address_holder, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key = ET.SubElement(af_ipv4_neighbor_address, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key.text = kwargs.pop('af_ipv4_neighbor_address')
        filter_list = ET.SubElement(af_ipv4_neighbor_address, "filter-list")
        direction_in = ET.SubElement(filter_list, "direction-in")
        filter_list_direction_in_acl_name = ET.SubElement(direction_in, "filter-list-direction-in-acl-name")
        filter_list_direction_in_acl_name.text = kwargs.pop('filter_list_direction_in_acl_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_address_holder_af_ipv4_neighbor_address_filter_list_direction_in_filter_list_name_direction_in(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_address_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-address-holder")
        af_ipv4_neighbor_address = ET.SubElement(af_ipv4_neighbor_address_holder, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key = ET.SubElement(af_ipv4_neighbor_address, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key.text = kwargs.pop('af_ipv4_neighbor_address')
        filter_list = ET.SubElement(af_ipv4_neighbor_address, "filter-list")
        direction_in = ET.SubElement(filter_list, "direction-in")
        filter_list_name_direction_in = ET.SubElement(direction_in, "filter-list-name-direction-in")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_address_holder_af_ipv4_neighbor_address_filter_list_direction_out_filter_list_direction_out_acl_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_address_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-address-holder")
        af_ipv4_neighbor_address = ET.SubElement(af_ipv4_neighbor_address_holder, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key = ET.SubElement(af_ipv4_neighbor_address, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key.text = kwargs.pop('af_ipv4_neighbor_address')
        filter_list = ET.SubElement(af_ipv4_neighbor_address, "filter-list")
        direction_out = ET.SubElement(filter_list, "direction-out")
        filter_list_direction_out_acl_name = ET.SubElement(direction_out, "filter-list-direction-out-acl-name")
        filter_list_direction_out_acl_name.text = kwargs.pop('filter_list_direction_out_acl_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_address_holder_af_ipv4_neighbor_address_filter_list_direction_out_filter_list_name_direction_out(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_address_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-address-holder")
        af_ipv4_neighbor_address = ET.SubElement(af_ipv4_neighbor_address_holder, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key = ET.SubElement(af_ipv4_neighbor_address, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key.text = kwargs.pop('af_ipv4_neighbor_address')
        filter_list = ET.SubElement(af_ipv4_neighbor_address, "filter-list")
        direction_out = ET.SubElement(filter_list, "direction-out")
        filter_list_name_direction_out = ET.SubElement(direction_out, "filter-list-name-direction-out")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_address_holder_af_ipv4_neighbor_address_maximum_prefix_max_prefix_limit(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_address_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-address-holder")
        af_ipv4_neighbor_address = ET.SubElement(af_ipv4_neighbor_address_holder, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key = ET.SubElement(af_ipv4_neighbor_address, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key.text = kwargs.pop('af_ipv4_neighbor_address')
        maximum_prefix = ET.SubElement(af_ipv4_neighbor_address, "maximum-prefix")
        max_prefix_limit = ET.SubElement(maximum_prefix, "max-prefix-limit")
        max_prefix_limit.text = kwargs.pop('max_prefix_limit')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_address_holder_af_ipv4_neighbor_address_maximum_prefix_threshold_holder_threshold(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_address_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-address-holder")
        af_ipv4_neighbor_address = ET.SubElement(af_ipv4_neighbor_address_holder, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key = ET.SubElement(af_ipv4_neighbor_address, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key.text = kwargs.pop('af_ipv4_neighbor_address')
        maximum_prefix = ET.SubElement(af_ipv4_neighbor_address, "maximum-prefix")
        threshold_holder = ET.SubElement(maximum_prefix, "threshold-holder")
        threshold = ET.SubElement(threshold_holder, "threshold")
        threshold.text = kwargs.pop('threshold')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_address_holder_af_ipv4_neighbor_address_maximum_prefix_threshold_holder_teardown(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_address_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-address-holder")
        af_ipv4_neighbor_address = ET.SubElement(af_ipv4_neighbor_address_holder, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key = ET.SubElement(af_ipv4_neighbor_address, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key.text = kwargs.pop('af_ipv4_neighbor_address')
        maximum_prefix = ET.SubElement(af_ipv4_neighbor_address, "maximum-prefix")
        threshold_holder = ET.SubElement(maximum_prefix, "threshold-holder")
        teardown = ET.SubElement(threshold_holder, "teardown")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_address_holder_af_ipv4_neighbor_address_default_originate_default_originate_status(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_address_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-address-holder")
        af_ipv4_neighbor_address = ET.SubElement(af_ipv4_neighbor_address_holder, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key = ET.SubElement(af_ipv4_neighbor_address, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key.text = kwargs.pop('af_ipv4_neighbor_address')
        default_originate = ET.SubElement(af_ipv4_neighbor_address, "default-originate")
        default_originate_status = ET.SubElement(default_originate, "default-originate-status")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_address_holder_af_ipv4_neighbor_address_default_originate_default_originate_route_map(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_address_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-address-holder")
        af_ipv4_neighbor_address = ET.SubElement(af_ipv4_neighbor_address_holder, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key = ET.SubElement(af_ipv4_neighbor_address, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key.text = kwargs.pop('af_ipv4_neighbor_address')
        default_originate = ET.SubElement(af_ipv4_neighbor_address, "default-originate")
        default_originate_route_map = ET.SubElement(default_originate, "default-originate-route-map")
        default_originate_route_map.text = kwargs.pop('default_originate_route_map')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_address_holder_af_ipv4_neighbor_address_prefix_list_direction_in_prefix_list_direction_in_prefix_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_address_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-address-holder")
        af_ipv4_neighbor_address = ET.SubElement(af_ipv4_neighbor_address_holder, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key = ET.SubElement(af_ipv4_neighbor_address, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key.text = kwargs.pop('af_ipv4_neighbor_address')
        prefix_list = ET.SubElement(af_ipv4_neighbor_address, "prefix-list")
        direction_in = ET.SubElement(prefix_list, "direction-in")
        prefix_list_direction_in_prefix_name = ET.SubElement(direction_in, "prefix-list-direction-in-prefix-name")
        prefix_list_direction_in_prefix_name.text = kwargs.pop('prefix_list_direction_in_prefix_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_address_holder_af_ipv4_neighbor_address_prefix_list_direction_in_prefix_list_direction_in(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_address_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-address-holder")
        af_ipv4_neighbor_address = ET.SubElement(af_ipv4_neighbor_address_holder, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key = ET.SubElement(af_ipv4_neighbor_address, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key.text = kwargs.pop('af_ipv4_neighbor_address')
        prefix_list = ET.SubElement(af_ipv4_neighbor_address, "prefix-list")
        direction_in = ET.SubElement(prefix_list, "direction-in")
        prefix_list_direction_in = ET.SubElement(direction_in, "prefix-list-direction-in")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_address_holder_af_ipv4_neighbor_address_prefix_list_direction_out_prefix_list_direction_out_prefix_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_address_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-address-holder")
        af_ipv4_neighbor_address = ET.SubElement(af_ipv4_neighbor_address_holder, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key = ET.SubElement(af_ipv4_neighbor_address, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key.text = kwargs.pop('af_ipv4_neighbor_address')
        prefix_list = ET.SubElement(af_ipv4_neighbor_address, "prefix-list")
        direction_out = ET.SubElement(prefix_list, "direction-out")
        prefix_list_direction_out_prefix_name = ET.SubElement(direction_out, "prefix-list-direction-out-prefix-name")
        prefix_list_direction_out_prefix_name.text = kwargs.pop('prefix_list_direction_out_prefix_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_address_holder_af_ipv4_neighbor_address_prefix_list_direction_out_prefix_list_direction_out(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_address_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-address-holder")
        af_ipv4_neighbor_address = ET.SubElement(af_ipv4_neighbor_address_holder, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key = ET.SubElement(af_ipv4_neighbor_address, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key.text = kwargs.pop('af_ipv4_neighbor_address')
        prefix_list = ET.SubElement(af_ipv4_neighbor_address, "prefix-list")
        direction_out = ET.SubElement(prefix_list, "direction-out")
        prefix_list_direction_out = ET.SubElement(direction_out, "prefix-list-direction-out")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_address_holder_af_ipv4_neighbor_address_neighbor_route_map_neighbor_route_map_direction_in_neighbor_route_map_name_direction_in(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_address_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-address-holder")
        af_ipv4_neighbor_address = ET.SubElement(af_ipv4_neighbor_address_holder, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key = ET.SubElement(af_ipv4_neighbor_address, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key.text = kwargs.pop('af_ipv4_neighbor_address')
        neighbor_route_map = ET.SubElement(af_ipv4_neighbor_address, "neighbor-route-map")
        neighbor_route_map_direction_in = ET.SubElement(neighbor_route_map, "neighbor-route-map-direction-in")
        neighbor_route_map_name_direction_in = ET.SubElement(neighbor_route_map_direction_in, "neighbor-route-map-name-direction-in")
        neighbor_route_map_name_direction_in.text = kwargs.pop('neighbor_route_map_name_direction_in')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_address_holder_af_ipv4_neighbor_address_neighbor_route_map_neighbor_route_map_direction_out_neighbor_route_map_name_direction_out(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_address_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-address-holder")
        af_ipv4_neighbor_address = ET.SubElement(af_ipv4_neighbor_address_holder, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key = ET.SubElement(af_ipv4_neighbor_address, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key.text = kwargs.pop('af_ipv4_neighbor_address')
        neighbor_route_map = ET.SubElement(af_ipv4_neighbor_address, "neighbor-route-map")
        neighbor_route_map_direction_out = ET.SubElement(neighbor_route_map, "neighbor-route-map-direction-out")
        neighbor_route_map_name_direction_out = ET.SubElement(neighbor_route_map_direction_out, "neighbor-route-map-name-direction-out")
        neighbor_route_map_name_direction_out.text = kwargs.pop('neighbor_route_map_name_direction_out')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_address_holder_af_ipv4_neighbor_address_route_reflector_client(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_address_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-address-holder")
        af_ipv4_neighbor_address = ET.SubElement(af_ipv4_neighbor_address_holder, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key = ET.SubElement(af_ipv4_neighbor_address, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key.text = kwargs.pop('af_ipv4_neighbor_address')
        route_reflector_client = ET.SubElement(af_ipv4_neighbor_address, "route-reflector-client")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_address_holder_af_ipv4_neighbor_address_unsuppress_map_map_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_address_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-address-holder")
        af_ipv4_neighbor_address = ET.SubElement(af_ipv4_neighbor_address_holder, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key = ET.SubElement(af_ipv4_neighbor_address, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key.text = kwargs.pop('af_ipv4_neighbor_address')
        unsuppress_map = ET.SubElement(af_ipv4_neighbor_address, "unsuppress-map")
        map_name = ET.SubElement(unsuppress_map, "map-name")
        map_name.text = kwargs.pop('map_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_address_holder_af_ipv4_neighbor_address_af_nei_weight(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_address_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-address-holder")
        af_ipv4_neighbor_address = ET.SubElement(af_ipv4_neighbor_address_holder, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key = ET.SubElement(af_ipv4_neighbor_address, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key.text = kwargs.pop('af_ipv4_neighbor_address')
        af_nei_weight = ET.SubElement(af_ipv4_neighbor_address, "af-nei-weight")
        af_nei_weight.text = kwargs.pop('af_nei_weight')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_common_cmds_holder_maximum_paths_load_sharing_value(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_common_cmds_holder = ET.SubElement(ipv4_unicast, "af-common-cmds-holder")
        maximum_paths = ET.SubElement(af_common_cmds_holder, "maximum-paths")
        load_sharing_value = ET.SubElement(maximum_paths, "load-sharing-value")
        load_sharing_value.text = kwargs.pop('load_sharing_value')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_common_cmds_holder_maximum_paths_ebgp(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_common_cmds_holder = ET.SubElement(ipv4_unicast, "af-common-cmds-holder")
        maximum_paths = ET.SubElement(af_common_cmds_holder, "maximum-paths")
        ebgp = ET.SubElement(maximum_paths, "ebgp")
        ebgp.text = kwargs.pop('ebgp')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_common_cmds_holder_maximum_paths_ibgp(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_common_cmds_holder = ET.SubElement(ipv4_unicast, "af-common-cmds-holder")
        maximum_paths = ET.SubElement(af_common_cmds_holder, "maximum-paths")
        ibgp = ET.SubElement(maximum_paths, "ibgp")
        ibgp.text = kwargs.pop('ibgp')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_common_cmds_holder_maximum_paths_use_load_sharing(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_common_cmds_holder = ET.SubElement(ipv4_unicast, "af-common-cmds-holder")
        maximum_paths = ET.SubElement(af_common_cmds_holder, "maximum-paths")
        use_load_sharing = ET.SubElement(maximum_paths, "use-load-sharing")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_common_cmds_holder_multipath_multipath_ebgp(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_common_cmds_holder = ET.SubElement(ipv4_unicast, "af-common-cmds-holder")
        multipath = ET.SubElement(af_common_cmds_holder, "multipath")
        multipath_ebgp = ET.SubElement(multipath, "multipath_ebgp")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_common_cmds_holder_multipath_multipath_ibgp(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_common_cmds_holder = ET.SubElement(ipv4_unicast, "af-common-cmds-holder")
        multipath = ET.SubElement(af_common_cmds_holder, "multipath")
        multipath_ibgp = ET.SubElement(multipath, "multipath_ibgp")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_common_cmds_holder_multipath_multi_as(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_common_cmds_holder = ET.SubElement(ipv4_unicast, "af-common-cmds-holder")
        multipath = ET.SubElement(af_common_cmds_holder, "multipath")
        multi_as = ET.SubElement(multipath, "multi-as")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_common_cmds_holder_always_propagate(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_common_cmds_holder = ET.SubElement(ipv4_unicast, "af-common-cmds-holder")
        always_propagate = ET.SubElement(af_common_cmds_holder, "always-propagate")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_common_cmds_holder_default_information_originate(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_common_cmds_holder = ET.SubElement(ipv4_unicast, "af-common-cmds-holder")
        default_information_originate = ET.SubElement(af_common_cmds_holder, "default-information-originate")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_common_cmds_holder_rib_route_limit(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_common_cmds_holder = ET.SubElement(ipv4_unicast, "af-common-cmds-holder")
        rib_route_limit = ET.SubElement(af_common_cmds_holder, "rib-route-limit")
        rib_route_limit.text = kwargs.pop('rib_route_limit')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_common_cmds_holder_client_to_client_reflection(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_common_cmds_holder = ET.SubElement(ipv4_unicast, "af-common-cmds-holder")
        client_to_client_reflection = ET.SubElement(af_common_cmds_holder, "client-to-client-reflection")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_common_cmds_holder_dampening_ch_dampening_source_ca_dampening_flag_dampening_flag(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_common_cmds_holder = ET.SubElement(ipv4_unicast, "af-common-cmds-holder")
        dampening = ET.SubElement(af_common_cmds_holder, "dampening")
        ch_dampening_source = ET.SubElement(dampening, "ch-dampening-source")
        ca_dampening_flag = ET.SubElement(ch_dampening_source, "ca-dampening-flag")
        dampening_flag = ET.SubElement(ca_dampening_flag, "dampening-flag")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_common_cmds_holder_dampening_ch_dampening_source_ca_dampening_specify_values_values_half_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_common_cmds_holder = ET.SubElement(ipv4_unicast, "af-common-cmds-holder")
        dampening = ET.SubElement(af_common_cmds_holder, "dampening")
        ch_dampening_source = ET.SubElement(dampening, "ch-dampening-source")
        ca_dampening_specify_values = ET.SubElement(ch_dampening_source, "ca-dampening-specify-values")
        values = ET.SubElement(ca_dampening_specify_values, "values")
        half_time = ET.SubElement(values, "half-time")
        half_time.text = kwargs.pop('half_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_common_cmds_holder_dampening_ch_dampening_source_ca_dampening_specify_values_values_reuse_value(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_common_cmds_holder = ET.SubElement(ipv4_unicast, "af-common-cmds-holder")
        dampening = ET.SubElement(af_common_cmds_holder, "dampening")
        ch_dampening_source = ET.SubElement(dampening, "ch-dampening-source")
        ca_dampening_specify_values = ET.SubElement(ch_dampening_source, "ca-dampening-specify-values")
        values = ET.SubElement(ca_dampening_specify_values, "values")
        reuse_value = ET.SubElement(values, "reuse-value")
        reuse_value.text = kwargs.pop('reuse_value')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_common_cmds_holder_dampening_ch_dampening_source_ca_dampening_specify_values_values_start_suppress_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_common_cmds_holder = ET.SubElement(ipv4_unicast, "af-common-cmds-holder")
        dampening = ET.SubElement(af_common_cmds_holder, "dampening")
        ch_dampening_source = ET.SubElement(dampening, "ch-dampening-source")
        ca_dampening_specify_values = ET.SubElement(ch_dampening_source, "ca-dampening-specify-values")
        values = ET.SubElement(ca_dampening_specify_values, "values")
        start_suppress_time = ET.SubElement(values, "start-suppress-time")
        start_suppress_time.text = kwargs.pop('start_suppress_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_common_cmds_holder_dampening_ch_dampening_source_ca_dampening_specify_values_values_max_suppress_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_common_cmds_holder = ET.SubElement(ipv4_unicast, "af-common-cmds-holder")
        dampening = ET.SubElement(af_common_cmds_holder, "dampening")
        ch_dampening_source = ET.SubElement(dampening, "ch-dampening-source")
        ca_dampening_specify_values = ET.SubElement(ch_dampening_source, "ca-dampening-specify-values")
        values = ET.SubElement(ca_dampening_specify_values, "values")
        max_suppress_time = ET.SubElement(values, "max-suppress-time")
        max_suppress_time.text = kwargs.pop('max_suppress_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_common_cmds_holder_dampening_ch_dampening_source_ca_dampening_route_map_dampening_route_map(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_common_cmds_holder = ET.SubElement(ipv4_unicast, "af-common-cmds-holder")
        dampening = ET.SubElement(af_common_cmds_holder, "dampening")
        ch_dampening_source = ET.SubElement(dampening, "ch-dampening-source")
        ca_dampening_route_map = ET.SubElement(ch_dampening_source, "ca-dampening-route-map")
        dampening_route_map = ET.SubElement(ca_dampening_route_map, "dampening-route-map")
        dampening_route_map.text = kwargs.pop('dampening_route_map')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_common_cmds_holder_default_metric(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_common_cmds_holder = ET.SubElement(ipv4_unicast, "af-common-cmds-holder")
        default_metric = ET.SubElement(af_common_cmds_holder, "default-metric")
        default_metric.text = kwargs.pop('default_metric')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_common_cmds_holder_next_hop_enable_default(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_common_cmds_holder = ET.SubElement(ipv4_unicast, "af-common-cmds-holder")
        next_hop_enable_default = ET.SubElement(af_common_cmds_holder, "next-hop-enable-default")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_common_cmds_holder_table_map_table_map_route_map(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_common_cmds_holder = ET.SubElement(ipv4_unicast, "af-common-cmds-holder")
        table_map = ET.SubElement(af_common_cmds_holder, "table-map")
        table_map_route_map = ET.SubElement(table_map, "table-map-route-map")
        table_map_route_map.text = kwargs.pop('table_map_route_map')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_common_cmds_holder_update_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_common_cmds_holder = ET.SubElement(ipv4_unicast, "af-common-cmds-holder")
        update_time = ET.SubElement(af_common_cmds_holder, "update-time")
        update_time.text = kwargs.pop('update_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_common_cmds_holder_graceful_restart_graceful_restart_status(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_common_cmds_holder = ET.SubElement(ipv4_unicast, "af-common-cmds-holder")
        graceful_restart = ET.SubElement(af_common_cmds_holder, "graceful-restart")
        graceful_restart_status = ET.SubElement(graceful_restart, "graceful-restart-status")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_common_cmds_holder_graceful_restart_restart_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_common_cmds_holder = ET.SubElement(ipv4_unicast, "af-common-cmds-holder")
        graceful_restart = ET.SubElement(af_common_cmds_holder, "graceful-restart")
        restart_time = ET.SubElement(graceful_restart, "restart-time")
        restart_time.text = kwargs.pop('restart_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_common_cmds_holder_graceful_restart_purge_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_common_cmds_holder = ET.SubElement(ipv4_unicast, "af-common-cmds-holder")
        graceful_restart = ET.SubElement(af_common_cmds_holder, "graceful-restart")
        purge_time = ET.SubElement(graceful_restart, "purge-time")
        purge_time.text = kwargs.pop('purge_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_common_cmds_holder_graceful_restart_stale_routes_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_common_cmds_holder = ET.SubElement(ipv4_unicast, "af-common-cmds-holder")
        graceful_restart = ET.SubElement(af_common_cmds_holder, "graceful-restart")
        stale_routes_time = ET.SubElement(graceful_restart, "stale-routes-time")
        stale_routes_time.text = kwargs.pop('stale_routes_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_next_hop_recursion(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        next_hop_recursion = ET.SubElement(ipv4_unicast, "next-hop-recursion")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_uc_and_vrf_cmds_call_point_holder_bgp_redistribute_internal(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_uc_and_vrf_cmds_call_point_holder = ET.SubElement(ipv6_unicast, "af-ipv6-uc-and-vrf-cmds-call-point-holder")
        bgp_redistribute_internal = ET.SubElement(af_ipv6_uc_and_vrf_cmds_call_point_holder, "bgp-redistribute-internal")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_uc_and_vrf_cmds_call_point_holder_redistribute_connected_redistribute_connected(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_uc_and_vrf_cmds_call_point_holder = ET.SubElement(ipv6_unicast, "af-ipv6-uc-and-vrf-cmds-call-point-holder")
        redistribute = ET.SubElement(af_ipv6_uc_and_vrf_cmds_call_point_holder, "redistribute")
        connected = ET.SubElement(redistribute, "connected")
        redistribute_connected = ET.SubElement(connected, "redistribute-connected")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_uc_and_vrf_cmds_call_point_holder_redistribute_connected_unicast_metric(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_uc_and_vrf_cmds_call_point_holder = ET.SubElement(ipv6_unicast, "af-ipv6-uc-and-vrf-cmds-call-point-holder")
        redistribute = ET.SubElement(af_ipv6_uc_and_vrf_cmds_call_point_holder, "redistribute")
        connected = ET.SubElement(redistribute, "connected")
        unicast_metric = ET.SubElement(connected, "unicast-metric")
        unicast_metric.text = kwargs.pop('unicast_metric')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_uc_and_vrf_cmds_call_point_holder_redistribute_connected_redistribute_route_map(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_uc_and_vrf_cmds_call_point_holder = ET.SubElement(ipv6_unicast, "af-ipv6-uc-and-vrf-cmds-call-point-holder")
        redistribute = ET.SubElement(af_ipv6_uc_and_vrf_cmds_call_point_holder, "redistribute")
        connected = ET.SubElement(redistribute, "connected")
        redistribute_route_map = ET.SubElement(connected, "redistribute-route-map")
        redistribute_route_map.text = kwargs.pop('redistribute_route_map')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_uc_and_vrf_cmds_call_point_holder_redistribute_ospf_redistribute_ospf(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_uc_and_vrf_cmds_call_point_holder = ET.SubElement(ipv6_unicast, "af-ipv6-uc-and-vrf-cmds-call-point-holder")
        redistribute = ET.SubElement(af_ipv6_uc_and_vrf_cmds_call_point_holder, "redistribute")
        ospf = ET.SubElement(redistribute, "ospf")
        redistribute_ospf = ET.SubElement(ospf, "redistribute-ospf")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_uc_and_vrf_cmds_call_point_holder_redistribute_ospf_match_ospf_internal(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_uc_and_vrf_cmds_call_point_holder = ET.SubElement(ipv6_unicast, "af-ipv6-uc-and-vrf-cmds-call-point-holder")
        redistribute = ET.SubElement(af_ipv6_uc_and_vrf_cmds_call_point_holder, "redistribute")
        ospf = ET.SubElement(redistribute, "ospf")
        match = ET.SubElement(ospf, "match")
        ospf_internal = ET.SubElement(match, "ospf-internal")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_uc_and_vrf_cmds_call_point_holder_redistribute_ospf_match_ospf_external1(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_uc_and_vrf_cmds_call_point_holder = ET.SubElement(ipv6_unicast, "af-ipv6-uc-and-vrf-cmds-call-point-holder")
        redistribute = ET.SubElement(af_ipv6_uc_and_vrf_cmds_call_point_holder, "redistribute")
        ospf = ET.SubElement(redistribute, "ospf")
        match = ET.SubElement(ospf, "match")
        ospf_external1 = ET.SubElement(match, "ospf-external1")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_uc_and_vrf_cmds_call_point_holder_redistribute_ospf_match_ospf_external2(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_uc_and_vrf_cmds_call_point_holder = ET.SubElement(ipv6_unicast, "af-ipv6-uc-and-vrf-cmds-call-point-holder")
        redistribute = ET.SubElement(af_ipv6_uc_and_vrf_cmds_call_point_holder, "redistribute")
        ospf = ET.SubElement(redistribute, "ospf")
        match = ET.SubElement(ospf, "match")
        ospf_external2 = ET.SubElement(match, "ospf-external2")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_uc_and_vrf_cmds_call_point_holder_redistribute_ospf_ospf_metric(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_uc_and_vrf_cmds_call_point_holder = ET.SubElement(ipv6_unicast, "af-ipv6-uc-and-vrf-cmds-call-point-holder")
        redistribute = ET.SubElement(af_ipv6_uc_and_vrf_cmds_call_point_holder, "redistribute")
        ospf = ET.SubElement(redistribute, "ospf")
        ospf_metric = ET.SubElement(ospf, "ospf-metric")
        ospf_metric.text = kwargs.pop('ospf_metric')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_uc_and_vrf_cmds_call_point_holder_redistribute_ospf_ospf_route_map(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_uc_and_vrf_cmds_call_point_holder = ET.SubElement(ipv6_unicast, "af-ipv6-uc-and-vrf-cmds-call-point-holder")
        redistribute = ET.SubElement(af_ipv6_uc_and_vrf_cmds_call_point_holder, "redistribute")
        ospf = ET.SubElement(redistribute, "ospf")
        ospf_route_map = ET.SubElement(ospf, "ospf-route-map")
        ospf_route_map.text = kwargs.pop('ospf_route_map')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_uc_and_vrf_cmds_call_point_holder_redistribute_static_redistribute_static(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_uc_and_vrf_cmds_call_point_holder = ET.SubElement(ipv6_unicast, "af-ipv6-uc-and-vrf-cmds-call-point-holder")
        redistribute = ET.SubElement(af_ipv6_uc_and_vrf_cmds_call_point_holder, "redistribute")
        static = ET.SubElement(redistribute, "static")
        redistribute_static = ET.SubElement(static, "redistribute-static")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_uc_and_vrf_cmds_call_point_holder_redistribute_static_unicast_static_metric(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_uc_and_vrf_cmds_call_point_holder = ET.SubElement(ipv6_unicast, "af-ipv6-uc-and-vrf-cmds-call-point-holder")
        redistribute = ET.SubElement(af_ipv6_uc_and_vrf_cmds_call_point_holder, "redistribute")
        static = ET.SubElement(redistribute, "static")
        unicast_static_metric = ET.SubElement(static, "unicast-static-metric")
        unicast_static_metric.text = kwargs.pop('unicast_static_metric')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_uc_and_vrf_cmds_call_point_holder_redistribute_static_static_route_map(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_uc_and_vrf_cmds_call_point_holder = ET.SubElement(ipv6_unicast, "af-ipv6-uc-and-vrf-cmds-call-point-holder")
        redistribute = ET.SubElement(af_ipv6_uc_and_vrf_cmds_call_point_holder, "redistribute")
        static = ET.SubElement(redistribute, "static")
        static_route_map = ET.SubElement(static, "static-route-map")
        static_route_map.text = kwargs.pop('static_route_map')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_aggregate_ipv6_address_aggregate_ip_prefix(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        aggregate_ipv6_address = ET.SubElement(ipv6_unicast, "aggregate-ipv6-address")
        aggregate_ip_prefix = ET.SubElement(aggregate_ipv6_address, "aggregate-ip-prefix")
        aggregate_ip_prefix.text = kwargs.pop('aggregate_ip_prefix')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_aggregate_ipv6_address_advertise_map(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        aggregate_ipv6_address = ET.SubElement(ipv6_unicast, "aggregate-ipv6-address")
        aggregate_ip_prefix_key = ET.SubElement(aggregate_ipv6_address, "aggregate-ip-prefix")
        aggregate_ip_prefix_key.text = kwargs.pop('aggregate_ip_prefix')
        advertise_map = ET.SubElement(aggregate_ipv6_address, "advertise-map")
        advertise_map.text = kwargs.pop('advertise_map')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_aggregate_ipv6_address_as_set(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        aggregate_ipv6_address = ET.SubElement(ipv6_unicast, "aggregate-ipv6-address")
        aggregate_ip_prefix_key = ET.SubElement(aggregate_ipv6_address, "aggregate-ip-prefix")
        aggregate_ip_prefix_key.text = kwargs.pop('aggregate_ip_prefix')
        as_set = ET.SubElement(aggregate_ipv6_address, "as-set")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_aggregate_ipv6_address_attribute_map(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        aggregate_ipv6_address = ET.SubElement(ipv6_unicast, "aggregate-ipv6-address")
        aggregate_ip_prefix_key = ET.SubElement(aggregate_ipv6_address, "aggregate-ip-prefix")
        aggregate_ip_prefix_key.text = kwargs.pop('aggregate_ip_prefix')
        attribute_map = ET.SubElement(aggregate_ipv6_address, "attribute-map")
        attribute_map.text = kwargs.pop('attribute_map')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_aggregate_ipv6_address_summary_only(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        aggregate_ipv6_address = ET.SubElement(ipv6_unicast, "aggregate-ipv6-address")
        aggregate_ip_prefix_key = ET.SubElement(aggregate_ipv6_address, "aggregate-ip-prefix")
        aggregate_ip_prefix_key.text = kwargs.pop('aggregate_ip_prefix')
        summary_only = ET.SubElement(aggregate_ipv6_address, "summary-only")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_aggregate_ipv6_address_suppress_map(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        aggregate_ipv6_address = ET.SubElement(ipv6_unicast, "aggregate-ipv6-address")
        aggregate_ip_prefix_key = ET.SubElement(aggregate_ipv6_address, "aggregate-ip-prefix")
        aggregate_ip_prefix_key.text = kwargs.pop('aggregate_ip_prefix')
        suppress_map = ET.SubElement(aggregate_ipv6_address, "suppress-map")
        suppress_map.text = kwargs.pop('suppress_map')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_network_network_ipv6_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        network = ET.SubElement(ipv6_unicast, "network")
        network_ipv6_address = ET.SubElement(network, "network-ipv6-address")
        network_ipv6_address.text = kwargs.pop('network_ipv6_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_network_network_weight(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        network = ET.SubElement(ipv6_unicast, "network")
        network_ipv6_address_key = ET.SubElement(network, "network-ipv6-address")
        network_ipv6_address_key.text = kwargs.pop('network_ipv6_address')
        network_weight = ET.SubElement(network, "network-weight")
        network_weight.text = kwargs.pop('network_weight')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_network_backdoor(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        network = ET.SubElement(ipv6_unicast, "network")
        network_ipv6_address_key = ET.SubElement(network, "network-ipv6-address")
        network_ipv6_address_key.text = kwargs.pop('network_ipv6_address')
        backdoor = ET.SubElement(network, "backdoor")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_network_network_route_map(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        network = ET.SubElement(ipv6_unicast, "network")
        network_ipv6_address_key = ET.SubElement(network, "network-ipv6-address")
        network_ipv6_address_key.text = kwargs.pop('network_ipv6_address')
        network_route_map = ET.SubElement(network, "network-route-map")
        network_route_map.text = kwargs.pop('network_route_map')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_peergroup_holder_af_ipv6_neighbor_peergroup_af_ipv6_neighbor_peergroup_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_peergroup_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-peergroup-holder")
        af_ipv6_neighbor_peergroup = ET.SubElement(af_ipv6_neighbor_peergroup_holder, "af-ipv6-neighbor-peergroup")
        af_ipv6_neighbor_peergroup_name = ET.SubElement(af_ipv6_neighbor_peergroup, "af-ipv6-neighbor-peergroup-name")
        af_ipv6_neighbor_peergroup_name.text = kwargs.pop('af_ipv6_neighbor_peergroup_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_peergroup_holder_af_ipv6_neighbor_peergroup_send_community_send_community_status(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_peergroup_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-peergroup-holder")
        af_ipv6_neighbor_peergroup = ET.SubElement(af_ipv6_neighbor_peergroup_holder, "af-ipv6-neighbor-peergroup")
        af_ipv6_neighbor_peergroup_name_key = ET.SubElement(af_ipv6_neighbor_peergroup, "af-ipv6-neighbor-peergroup-name")
        af_ipv6_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv6_neighbor_peergroup_name')
        send_community = ET.SubElement(af_ipv6_neighbor_peergroup, "send-community")
        send_community_status = ET.SubElement(send_community, "send-community-status")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_peergroup_holder_af_ipv6_neighbor_peergroup_send_community_both(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_peergroup_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-peergroup-holder")
        af_ipv6_neighbor_peergroup = ET.SubElement(af_ipv6_neighbor_peergroup_holder, "af-ipv6-neighbor-peergroup")
        af_ipv6_neighbor_peergroup_name_key = ET.SubElement(af_ipv6_neighbor_peergroup, "af-ipv6-neighbor-peergroup-name")
        af_ipv6_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv6_neighbor_peergroup_name')
        send_community = ET.SubElement(af_ipv6_neighbor_peergroup, "send-community")
        both = ET.SubElement(send_community, "both")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_peergroup_holder_af_ipv6_neighbor_peergroup_send_community_extended(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_peergroup_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-peergroup-holder")
        af_ipv6_neighbor_peergroup = ET.SubElement(af_ipv6_neighbor_peergroup_holder, "af-ipv6-neighbor-peergroup")
        af_ipv6_neighbor_peergroup_name_key = ET.SubElement(af_ipv6_neighbor_peergroup, "af-ipv6-neighbor-peergroup-name")
        af_ipv6_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv6_neighbor_peergroup_name')
        send_community = ET.SubElement(af_ipv6_neighbor_peergroup, "send-community")
        extended = ET.SubElement(send_community, "extended")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_peergroup_holder_af_ipv6_neighbor_peergroup_send_community_standard(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_peergroup_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-peergroup-holder")
        af_ipv6_neighbor_peergroup = ET.SubElement(af_ipv6_neighbor_peergroup_holder, "af-ipv6-neighbor-peergroup")
        af_ipv6_neighbor_peergroup_name_key = ET.SubElement(af_ipv6_neighbor_peergroup, "af-ipv6-neighbor-peergroup-name")
        af_ipv6_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv6_neighbor_peergroup_name')
        send_community = ET.SubElement(af_ipv6_neighbor_peergroup, "send-community")
        standard = ET.SubElement(send_community, "standard")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_peergroup_holder_af_ipv6_neighbor_peergroup_af_neighbor_capability_orf_prefixlist_prefixlist_status(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_peergroup_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-peergroup-holder")
        af_ipv6_neighbor_peergroup = ET.SubElement(af_ipv6_neighbor_peergroup_holder, "af-ipv6-neighbor-peergroup")
        af_ipv6_neighbor_peergroup_name_key = ET.SubElement(af_ipv6_neighbor_peergroup, "af-ipv6-neighbor-peergroup-name")
        af_ipv6_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv6_neighbor_peergroup_name')
        af_neighbor_capability = ET.SubElement(af_ipv6_neighbor_peergroup, "af-neighbor-capability")
        orf = ET.SubElement(af_neighbor_capability, "orf")
        prefixlist = ET.SubElement(orf, "prefixlist")
        prefixlist_status = ET.SubElement(prefixlist, "prefixlist-status")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_peergroup_holder_af_ipv6_neighbor_peergroup_af_neighbor_capability_orf_prefixlist_prefixlist_send(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_peergroup_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-peergroup-holder")
        af_ipv6_neighbor_peergroup = ET.SubElement(af_ipv6_neighbor_peergroup_holder, "af-ipv6-neighbor-peergroup")
        af_ipv6_neighbor_peergroup_name_key = ET.SubElement(af_ipv6_neighbor_peergroup, "af-ipv6-neighbor-peergroup-name")
        af_ipv6_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv6_neighbor_peergroup_name')
        af_neighbor_capability = ET.SubElement(af_ipv6_neighbor_peergroup, "af-neighbor-capability")
        orf = ET.SubElement(af_neighbor_capability, "orf")
        prefixlist = ET.SubElement(orf, "prefixlist")
        prefixlist_send = ET.SubElement(prefixlist, "prefixlist-send")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_peergroup_holder_af_ipv6_neighbor_peergroup_af_neighbor_capability_orf_prefixlist_prefixlist_receive(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_peergroup_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-peergroup-holder")
        af_ipv6_neighbor_peergroup = ET.SubElement(af_ipv6_neighbor_peergroup_holder, "af-ipv6-neighbor-peergroup")
        af_ipv6_neighbor_peergroup_name_key = ET.SubElement(af_ipv6_neighbor_peergroup, "af-ipv6-neighbor-peergroup-name")
        af_ipv6_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv6_neighbor_peergroup_name')
        af_neighbor_capability = ET.SubElement(af_ipv6_neighbor_peergroup, "af-neighbor-capability")
        orf = ET.SubElement(af_neighbor_capability, "orf")
        prefixlist = ET.SubElement(orf, "prefixlist")
        prefixlist_receive = ET.SubElement(prefixlist, "prefixlist-receive")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_peergroup_holder_af_ipv6_neighbor_peergroup_allowas_in(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_peergroup_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-peergroup-holder")
        af_ipv6_neighbor_peergroup = ET.SubElement(af_ipv6_neighbor_peergroup_holder, "af-ipv6-neighbor-peergroup")
        af_ipv6_neighbor_peergroup_name_key = ET.SubElement(af_ipv6_neighbor_peergroup, "af-ipv6-neighbor-peergroup-name")
        af_ipv6_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv6_neighbor_peergroup_name')
        allowas_in = ET.SubElement(af_ipv6_neighbor_peergroup, "allowas-in")
        allowas_in.text = kwargs.pop('allowas_in')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_peergroup_holder_af_ipv6_neighbor_peergroup_activate(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_peergroup_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-peergroup-holder")
        af_ipv6_neighbor_peergroup = ET.SubElement(af_ipv6_neighbor_peergroup_holder, "af-ipv6-neighbor-peergroup")
        af_ipv6_neighbor_peergroup_name_key = ET.SubElement(af_ipv6_neighbor_peergroup, "af-ipv6-neighbor-peergroup-name")
        af_ipv6_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv6_neighbor_peergroup_name')
        activate = ET.SubElement(af_ipv6_neighbor_peergroup, "activate")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_peergroup_holder_af_ipv6_neighbor_peergroup_filter_list_direction_in_filter_list_direction_in_acl_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_peergroup_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-peergroup-holder")
        af_ipv6_neighbor_peergroup = ET.SubElement(af_ipv6_neighbor_peergroup_holder, "af-ipv6-neighbor-peergroup")
        af_ipv6_neighbor_peergroup_name_key = ET.SubElement(af_ipv6_neighbor_peergroup, "af-ipv6-neighbor-peergroup-name")
        af_ipv6_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv6_neighbor_peergroup_name')
        filter_list = ET.SubElement(af_ipv6_neighbor_peergroup, "filter-list")
        direction_in = ET.SubElement(filter_list, "direction-in")
        filter_list_direction_in_acl_name = ET.SubElement(direction_in, "filter-list-direction-in-acl-name")
        filter_list_direction_in_acl_name.text = kwargs.pop('filter_list_direction_in_acl_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_peergroup_holder_af_ipv6_neighbor_peergroup_filter_list_direction_in_filter_list_name_direction_in(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_peergroup_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-peergroup-holder")
        af_ipv6_neighbor_peergroup = ET.SubElement(af_ipv6_neighbor_peergroup_holder, "af-ipv6-neighbor-peergroup")
        af_ipv6_neighbor_peergroup_name_key = ET.SubElement(af_ipv6_neighbor_peergroup, "af-ipv6-neighbor-peergroup-name")
        af_ipv6_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv6_neighbor_peergroup_name')
        filter_list = ET.SubElement(af_ipv6_neighbor_peergroup, "filter-list")
        direction_in = ET.SubElement(filter_list, "direction-in")
        filter_list_name_direction_in = ET.SubElement(direction_in, "filter-list-name-direction-in")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_peergroup_holder_af_ipv6_neighbor_peergroup_filter_list_direction_out_filter_list_direction_out_acl_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_peergroup_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-peergroup-holder")
        af_ipv6_neighbor_peergroup = ET.SubElement(af_ipv6_neighbor_peergroup_holder, "af-ipv6-neighbor-peergroup")
        af_ipv6_neighbor_peergroup_name_key = ET.SubElement(af_ipv6_neighbor_peergroup, "af-ipv6-neighbor-peergroup-name")
        af_ipv6_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv6_neighbor_peergroup_name')
        filter_list = ET.SubElement(af_ipv6_neighbor_peergroup, "filter-list")
        direction_out = ET.SubElement(filter_list, "direction-out")
        filter_list_direction_out_acl_name = ET.SubElement(direction_out, "filter-list-direction-out-acl-name")
        filter_list_direction_out_acl_name.text = kwargs.pop('filter_list_direction_out_acl_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_peergroup_holder_af_ipv6_neighbor_peergroup_filter_list_direction_out_filter_list_name_direction_out(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_peergroup_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-peergroup-holder")
        af_ipv6_neighbor_peergroup = ET.SubElement(af_ipv6_neighbor_peergroup_holder, "af-ipv6-neighbor-peergroup")
        af_ipv6_neighbor_peergroup_name_key = ET.SubElement(af_ipv6_neighbor_peergroup, "af-ipv6-neighbor-peergroup-name")
        af_ipv6_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv6_neighbor_peergroup_name')
        filter_list = ET.SubElement(af_ipv6_neighbor_peergroup, "filter-list")
        direction_out = ET.SubElement(filter_list, "direction-out")
        filter_list_name_direction_out = ET.SubElement(direction_out, "filter-list-name-direction-out")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_peergroup_holder_af_ipv6_neighbor_peergroup_maximum_prefix_max_prefix_limit(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_peergroup_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-peergroup-holder")
        af_ipv6_neighbor_peergroup = ET.SubElement(af_ipv6_neighbor_peergroup_holder, "af-ipv6-neighbor-peergroup")
        af_ipv6_neighbor_peergroup_name_key = ET.SubElement(af_ipv6_neighbor_peergroup, "af-ipv6-neighbor-peergroup-name")
        af_ipv6_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv6_neighbor_peergroup_name')
        maximum_prefix = ET.SubElement(af_ipv6_neighbor_peergroup, "maximum-prefix")
        max_prefix_limit = ET.SubElement(maximum_prefix, "max-prefix-limit")
        max_prefix_limit.text = kwargs.pop('max_prefix_limit')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_peergroup_holder_af_ipv6_neighbor_peergroup_maximum_prefix_threshold_holder_threshold(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_peergroup_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-peergroup-holder")
        af_ipv6_neighbor_peergroup = ET.SubElement(af_ipv6_neighbor_peergroup_holder, "af-ipv6-neighbor-peergroup")
        af_ipv6_neighbor_peergroup_name_key = ET.SubElement(af_ipv6_neighbor_peergroup, "af-ipv6-neighbor-peergroup-name")
        af_ipv6_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv6_neighbor_peergroup_name')
        maximum_prefix = ET.SubElement(af_ipv6_neighbor_peergroup, "maximum-prefix")
        threshold_holder = ET.SubElement(maximum_prefix, "threshold-holder")
        threshold = ET.SubElement(threshold_holder, "threshold")
        threshold.text = kwargs.pop('threshold')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_peergroup_holder_af_ipv6_neighbor_peergroup_maximum_prefix_threshold_holder_teardown(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_peergroup_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-peergroup-holder")
        af_ipv6_neighbor_peergroup = ET.SubElement(af_ipv6_neighbor_peergroup_holder, "af-ipv6-neighbor-peergroup")
        af_ipv6_neighbor_peergroup_name_key = ET.SubElement(af_ipv6_neighbor_peergroup, "af-ipv6-neighbor-peergroup-name")
        af_ipv6_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv6_neighbor_peergroup_name')
        maximum_prefix = ET.SubElement(af_ipv6_neighbor_peergroup, "maximum-prefix")
        threshold_holder = ET.SubElement(maximum_prefix, "threshold-holder")
        teardown = ET.SubElement(threshold_holder, "teardown")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_peergroup_holder_af_ipv6_neighbor_peergroup_default_originate_default_originate_status(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_peergroup_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-peergroup-holder")
        af_ipv6_neighbor_peergroup = ET.SubElement(af_ipv6_neighbor_peergroup_holder, "af-ipv6-neighbor-peergroup")
        af_ipv6_neighbor_peergroup_name_key = ET.SubElement(af_ipv6_neighbor_peergroup, "af-ipv6-neighbor-peergroup-name")
        af_ipv6_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv6_neighbor_peergroup_name')
        default_originate = ET.SubElement(af_ipv6_neighbor_peergroup, "default-originate")
        default_originate_status = ET.SubElement(default_originate, "default-originate-status")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_peergroup_holder_af_ipv6_neighbor_peergroup_default_originate_default_originate_route_map(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_peergroup_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-peergroup-holder")
        af_ipv6_neighbor_peergroup = ET.SubElement(af_ipv6_neighbor_peergroup_holder, "af-ipv6-neighbor-peergroup")
        af_ipv6_neighbor_peergroup_name_key = ET.SubElement(af_ipv6_neighbor_peergroup, "af-ipv6-neighbor-peergroup-name")
        af_ipv6_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv6_neighbor_peergroup_name')
        default_originate = ET.SubElement(af_ipv6_neighbor_peergroup, "default-originate")
        default_originate_route_map = ET.SubElement(default_originate, "default-originate-route-map")
        default_originate_route_map.text = kwargs.pop('default_originate_route_map')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_peergroup_holder_af_ipv6_neighbor_peergroup_prefix_list_direction_in_prefix_list_direction_in_prefix_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_peergroup_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-peergroup-holder")
        af_ipv6_neighbor_peergroup = ET.SubElement(af_ipv6_neighbor_peergroup_holder, "af-ipv6-neighbor-peergroup")
        af_ipv6_neighbor_peergroup_name_key = ET.SubElement(af_ipv6_neighbor_peergroup, "af-ipv6-neighbor-peergroup-name")
        af_ipv6_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv6_neighbor_peergroup_name')
        prefix_list = ET.SubElement(af_ipv6_neighbor_peergroup, "prefix-list")
        direction_in = ET.SubElement(prefix_list, "direction-in")
        prefix_list_direction_in_prefix_name = ET.SubElement(direction_in, "prefix-list-direction-in-prefix-name")
        prefix_list_direction_in_prefix_name.text = kwargs.pop('prefix_list_direction_in_prefix_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_peergroup_holder_af_ipv6_neighbor_peergroup_prefix_list_direction_in_prefix_list_direction_in(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_peergroup_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-peergroup-holder")
        af_ipv6_neighbor_peergroup = ET.SubElement(af_ipv6_neighbor_peergroup_holder, "af-ipv6-neighbor-peergroup")
        af_ipv6_neighbor_peergroup_name_key = ET.SubElement(af_ipv6_neighbor_peergroup, "af-ipv6-neighbor-peergroup-name")
        af_ipv6_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv6_neighbor_peergroup_name')
        prefix_list = ET.SubElement(af_ipv6_neighbor_peergroup, "prefix-list")
        direction_in = ET.SubElement(prefix_list, "direction-in")
        prefix_list_direction_in = ET.SubElement(direction_in, "prefix-list-direction-in")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_peergroup_holder_af_ipv6_neighbor_peergroup_prefix_list_direction_out_prefix_list_direction_out_prefix_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_peergroup_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-peergroup-holder")
        af_ipv6_neighbor_peergroup = ET.SubElement(af_ipv6_neighbor_peergroup_holder, "af-ipv6-neighbor-peergroup")
        af_ipv6_neighbor_peergroup_name_key = ET.SubElement(af_ipv6_neighbor_peergroup, "af-ipv6-neighbor-peergroup-name")
        af_ipv6_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv6_neighbor_peergroup_name')
        prefix_list = ET.SubElement(af_ipv6_neighbor_peergroup, "prefix-list")
        direction_out = ET.SubElement(prefix_list, "direction-out")
        prefix_list_direction_out_prefix_name = ET.SubElement(direction_out, "prefix-list-direction-out-prefix-name")
        prefix_list_direction_out_prefix_name.text = kwargs.pop('prefix_list_direction_out_prefix_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_peergroup_holder_af_ipv6_neighbor_peergroup_prefix_list_direction_out_prefix_list_direction_out(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_peergroup_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-peergroup-holder")
        af_ipv6_neighbor_peergroup = ET.SubElement(af_ipv6_neighbor_peergroup_holder, "af-ipv6-neighbor-peergroup")
        af_ipv6_neighbor_peergroup_name_key = ET.SubElement(af_ipv6_neighbor_peergroup, "af-ipv6-neighbor-peergroup-name")
        af_ipv6_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv6_neighbor_peergroup_name')
        prefix_list = ET.SubElement(af_ipv6_neighbor_peergroup, "prefix-list")
        direction_out = ET.SubElement(prefix_list, "direction-out")
        prefix_list_direction_out = ET.SubElement(direction_out, "prefix-list-direction-out")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_peergroup_holder_af_ipv6_neighbor_peergroup_neighbor_route_map_neighbor_route_map_direction_in_neighbor_route_map_name_direction_in(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_peergroup_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-peergroup-holder")
        af_ipv6_neighbor_peergroup = ET.SubElement(af_ipv6_neighbor_peergroup_holder, "af-ipv6-neighbor-peergroup")
        af_ipv6_neighbor_peergroup_name_key = ET.SubElement(af_ipv6_neighbor_peergroup, "af-ipv6-neighbor-peergroup-name")
        af_ipv6_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv6_neighbor_peergroup_name')
        neighbor_route_map = ET.SubElement(af_ipv6_neighbor_peergroup, "neighbor-route-map")
        neighbor_route_map_direction_in = ET.SubElement(neighbor_route_map, "neighbor-route-map-direction-in")
        neighbor_route_map_name_direction_in = ET.SubElement(neighbor_route_map_direction_in, "neighbor-route-map-name-direction-in")
        neighbor_route_map_name_direction_in.text = kwargs.pop('neighbor_route_map_name_direction_in')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_peergroup_holder_af_ipv6_neighbor_peergroup_neighbor_route_map_neighbor_route_map_direction_out_neighbor_route_map_name_direction_out(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_peergroup_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-peergroup-holder")
        af_ipv6_neighbor_peergroup = ET.SubElement(af_ipv6_neighbor_peergroup_holder, "af-ipv6-neighbor-peergroup")
        af_ipv6_neighbor_peergroup_name_key = ET.SubElement(af_ipv6_neighbor_peergroup, "af-ipv6-neighbor-peergroup-name")
        af_ipv6_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv6_neighbor_peergroup_name')
        neighbor_route_map = ET.SubElement(af_ipv6_neighbor_peergroup, "neighbor-route-map")
        neighbor_route_map_direction_out = ET.SubElement(neighbor_route_map, "neighbor-route-map-direction-out")
        neighbor_route_map_name_direction_out = ET.SubElement(neighbor_route_map_direction_out, "neighbor-route-map-name-direction-out")
        neighbor_route_map_name_direction_out.text = kwargs.pop('neighbor_route_map_name_direction_out')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_peergroup_holder_af_ipv6_neighbor_peergroup_route_reflector_client(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_peergroup_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-peergroup-holder")
        af_ipv6_neighbor_peergroup = ET.SubElement(af_ipv6_neighbor_peergroup_holder, "af-ipv6-neighbor-peergroup")
        af_ipv6_neighbor_peergroup_name_key = ET.SubElement(af_ipv6_neighbor_peergroup, "af-ipv6-neighbor-peergroup-name")
        af_ipv6_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv6_neighbor_peergroup_name')
        route_reflector_client = ET.SubElement(af_ipv6_neighbor_peergroup, "route-reflector-client")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_peergroup_holder_af_ipv6_neighbor_peergroup_unsuppress_map_map_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_peergroup_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-peergroup-holder")
        af_ipv6_neighbor_peergroup = ET.SubElement(af_ipv6_neighbor_peergroup_holder, "af-ipv6-neighbor-peergroup")
        af_ipv6_neighbor_peergroup_name_key = ET.SubElement(af_ipv6_neighbor_peergroup, "af-ipv6-neighbor-peergroup-name")
        af_ipv6_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv6_neighbor_peergroup_name')
        unsuppress_map = ET.SubElement(af_ipv6_neighbor_peergroup, "unsuppress-map")
        map_name = ET.SubElement(unsuppress_map, "map-name")
        map_name.text = kwargs.pop('map_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_peergroup_holder_af_ipv6_neighbor_peergroup_af_nei_weight(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_peergroup_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-peergroup-holder")
        af_ipv6_neighbor_peergroup = ET.SubElement(af_ipv6_neighbor_peergroup_holder, "af-ipv6-neighbor-peergroup")
        af_ipv6_neighbor_peergroup_name_key = ET.SubElement(af_ipv6_neighbor_peergroup, "af-ipv6-neighbor-peergroup-name")
        af_ipv6_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv6_neighbor_peergroup_name')
        af_nei_weight = ET.SubElement(af_ipv6_neighbor_peergroup, "af-nei-weight")
        af_nei_weight.text = kwargs.pop('af_nei_weight')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_address_holder_af_ipv6_neighbor_address_af_ipv6_neighbor_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_address_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-address-holder")
        af_ipv6_neighbor_address = ET.SubElement(af_ipv6_neighbor_address_holder, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address = ET.SubElement(af_ipv6_neighbor_address, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address.text = kwargs.pop('af_ipv6_neighbor_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_address_holder_af_ipv6_neighbor_address_send_community_send_community_status(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_address_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-address-holder")
        af_ipv6_neighbor_address = ET.SubElement(af_ipv6_neighbor_address_holder, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key = ET.SubElement(af_ipv6_neighbor_address, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key.text = kwargs.pop('af_ipv6_neighbor_address')
        send_community = ET.SubElement(af_ipv6_neighbor_address, "send-community")
        send_community_status = ET.SubElement(send_community, "send-community-status")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_address_holder_af_ipv6_neighbor_address_send_community_both(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_address_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-address-holder")
        af_ipv6_neighbor_address = ET.SubElement(af_ipv6_neighbor_address_holder, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key = ET.SubElement(af_ipv6_neighbor_address, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key.text = kwargs.pop('af_ipv6_neighbor_address')
        send_community = ET.SubElement(af_ipv6_neighbor_address, "send-community")
        both = ET.SubElement(send_community, "both")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_address_holder_af_ipv6_neighbor_address_send_community_extended(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_address_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-address-holder")
        af_ipv6_neighbor_address = ET.SubElement(af_ipv6_neighbor_address_holder, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key = ET.SubElement(af_ipv6_neighbor_address, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key.text = kwargs.pop('af_ipv6_neighbor_address')
        send_community = ET.SubElement(af_ipv6_neighbor_address, "send-community")
        extended = ET.SubElement(send_community, "extended")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_address_holder_af_ipv6_neighbor_address_send_community_standard(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_address_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-address-holder")
        af_ipv6_neighbor_address = ET.SubElement(af_ipv6_neighbor_address_holder, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key = ET.SubElement(af_ipv6_neighbor_address, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key.text = kwargs.pop('af_ipv6_neighbor_address')
        send_community = ET.SubElement(af_ipv6_neighbor_address, "send-community")
        standard = ET.SubElement(send_community, "standard")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_address_holder_af_ipv6_neighbor_address_af_neighbor_capability_orf_prefixlist_prefixlist_status(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_address_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-address-holder")
        af_ipv6_neighbor_address = ET.SubElement(af_ipv6_neighbor_address_holder, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key = ET.SubElement(af_ipv6_neighbor_address, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key.text = kwargs.pop('af_ipv6_neighbor_address')
        af_neighbor_capability = ET.SubElement(af_ipv6_neighbor_address, "af-neighbor-capability")
        orf = ET.SubElement(af_neighbor_capability, "orf")
        prefixlist = ET.SubElement(orf, "prefixlist")
        prefixlist_status = ET.SubElement(prefixlist, "prefixlist-status")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_address_holder_af_ipv6_neighbor_address_af_neighbor_capability_orf_prefixlist_prefixlist_send(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_address_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-address-holder")
        af_ipv6_neighbor_address = ET.SubElement(af_ipv6_neighbor_address_holder, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key = ET.SubElement(af_ipv6_neighbor_address, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key.text = kwargs.pop('af_ipv6_neighbor_address')
        af_neighbor_capability = ET.SubElement(af_ipv6_neighbor_address, "af-neighbor-capability")
        orf = ET.SubElement(af_neighbor_capability, "orf")
        prefixlist = ET.SubElement(orf, "prefixlist")
        prefixlist_send = ET.SubElement(prefixlist, "prefixlist-send")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_address_holder_af_ipv6_neighbor_address_af_neighbor_capability_orf_prefixlist_prefixlist_receive(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_address_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-address-holder")
        af_ipv6_neighbor_address = ET.SubElement(af_ipv6_neighbor_address_holder, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key = ET.SubElement(af_ipv6_neighbor_address, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key.text = kwargs.pop('af_ipv6_neighbor_address')
        af_neighbor_capability = ET.SubElement(af_ipv6_neighbor_address, "af-neighbor-capability")
        orf = ET.SubElement(af_neighbor_capability, "orf")
        prefixlist = ET.SubElement(orf, "prefixlist")
        prefixlist_receive = ET.SubElement(prefixlist, "prefixlist-receive")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_address_holder_af_ipv6_neighbor_address_allowas_in(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_address_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-address-holder")
        af_ipv6_neighbor_address = ET.SubElement(af_ipv6_neighbor_address_holder, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key = ET.SubElement(af_ipv6_neighbor_address, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key.text = kwargs.pop('af_ipv6_neighbor_address')
        allowas_in = ET.SubElement(af_ipv6_neighbor_address, "allowas-in")
        allowas_in.text = kwargs.pop('allowas_in')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_address_holder_af_ipv6_neighbor_address_activate(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_address_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-address-holder")
        af_ipv6_neighbor_address = ET.SubElement(af_ipv6_neighbor_address_holder, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key = ET.SubElement(af_ipv6_neighbor_address, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key.text = kwargs.pop('af_ipv6_neighbor_address')
        activate = ET.SubElement(af_ipv6_neighbor_address, "activate")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_address_holder_af_ipv6_neighbor_address_filter_list_direction_in_filter_list_direction_in_acl_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_address_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-address-holder")
        af_ipv6_neighbor_address = ET.SubElement(af_ipv6_neighbor_address_holder, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key = ET.SubElement(af_ipv6_neighbor_address, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key.text = kwargs.pop('af_ipv6_neighbor_address')
        filter_list = ET.SubElement(af_ipv6_neighbor_address, "filter-list")
        direction_in = ET.SubElement(filter_list, "direction-in")
        filter_list_direction_in_acl_name = ET.SubElement(direction_in, "filter-list-direction-in-acl-name")
        filter_list_direction_in_acl_name.text = kwargs.pop('filter_list_direction_in_acl_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_address_holder_af_ipv6_neighbor_address_filter_list_direction_in_filter_list_name_direction_in(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_address_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-address-holder")
        af_ipv6_neighbor_address = ET.SubElement(af_ipv6_neighbor_address_holder, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key = ET.SubElement(af_ipv6_neighbor_address, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key.text = kwargs.pop('af_ipv6_neighbor_address')
        filter_list = ET.SubElement(af_ipv6_neighbor_address, "filter-list")
        direction_in = ET.SubElement(filter_list, "direction-in")
        filter_list_name_direction_in = ET.SubElement(direction_in, "filter-list-name-direction-in")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_address_holder_af_ipv6_neighbor_address_filter_list_direction_out_filter_list_direction_out_acl_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_address_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-address-holder")
        af_ipv6_neighbor_address = ET.SubElement(af_ipv6_neighbor_address_holder, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key = ET.SubElement(af_ipv6_neighbor_address, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key.text = kwargs.pop('af_ipv6_neighbor_address')
        filter_list = ET.SubElement(af_ipv6_neighbor_address, "filter-list")
        direction_out = ET.SubElement(filter_list, "direction-out")
        filter_list_direction_out_acl_name = ET.SubElement(direction_out, "filter-list-direction-out-acl-name")
        filter_list_direction_out_acl_name.text = kwargs.pop('filter_list_direction_out_acl_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_address_holder_af_ipv6_neighbor_address_filter_list_direction_out_filter_list_name_direction_out(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_address_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-address-holder")
        af_ipv6_neighbor_address = ET.SubElement(af_ipv6_neighbor_address_holder, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key = ET.SubElement(af_ipv6_neighbor_address, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key.text = kwargs.pop('af_ipv6_neighbor_address')
        filter_list = ET.SubElement(af_ipv6_neighbor_address, "filter-list")
        direction_out = ET.SubElement(filter_list, "direction-out")
        filter_list_name_direction_out = ET.SubElement(direction_out, "filter-list-name-direction-out")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_address_holder_af_ipv6_neighbor_address_maximum_prefix_max_prefix_limit(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_address_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-address-holder")
        af_ipv6_neighbor_address = ET.SubElement(af_ipv6_neighbor_address_holder, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key = ET.SubElement(af_ipv6_neighbor_address, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key.text = kwargs.pop('af_ipv6_neighbor_address')
        maximum_prefix = ET.SubElement(af_ipv6_neighbor_address, "maximum-prefix")
        max_prefix_limit = ET.SubElement(maximum_prefix, "max-prefix-limit")
        max_prefix_limit.text = kwargs.pop('max_prefix_limit')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_address_holder_af_ipv6_neighbor_address_maximum_prefix_threshold_holder_threshold(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_address_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-address-holder")
        af_ipv6_neighbor_address = ET.SubElement(af_ipv6_neighbor_address_holder, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key = ET.SubElement(af_ipv6_neighbor_address, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key.text = kwargs.pop('af_ipv6_neighbor_address')
        maximum_prefix = ET.SubElement(af_ipv6_neighbor_address, "maximum-prefix")
        threshold_holder = ET.SubElement(maximum_prefix, "threshold-holder")
        threshold = ET.SubElement(threshold_holder, "threshold")
        threshold.text = kwargs.pop('threshold')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_address_holder_af_ipv6_neighbor_address_maximum_prefix_threshold_holder_teardown(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_address_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-address-holder")
        af_ipv6_neighbor_address = ET.SubElement(af_ipv6_neighbor_address_holder, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key = ET.SubElement(af_ipv6_neighbor_address, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key.text = kwargs.pop('af_ipv6_neighbor_address')
        maximum_prefix = ET.SubElement(af_ipv6_neighbor_address, "maximum-prefix")
        threshold_holder = ET.SubElement(maximum_prefix, "threshold-holder")
        teardown = ET.SubElement(threshold_holder, "teardown")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_address_holder_af_ipv6_neighbor_address_default_originate_default_originate_status(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_address_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-address-holder")
        af_ipv6_neighbor_address = ET.SubElement(af_ipv6_neighbor_address_holder, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key = ET.SubElement(af_ipv6_neighbor_address, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key.text = kwargs.pop('af_ipv6_neighbor_address')
        default_originate = ET.SubElement(af_ipv6_neighbor_address, "default-originate")
        default_originate_status = ET.SubElement(default_originate, "default-originate-status")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_address_holder_af_ipv6_neighbor_address_default_originate_default_originate_route_map(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_address_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-address-holder")
        af_ipv6_neighbor_address = ET.SubElement(af_ipv6_neighbor_address_holder, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key = ET.SubElement(af_ipv6_neighbor_address, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key.text = kwargs.pop('af_ipv6_neighbor_address')
        default_originate = ET.SubElement(af_ipv6_neighbor_address, "default-originate")
        default_originate_route_map = ET.SubElement(default_originate, "default-originate-route-map")
        default_originate_route_map.text = kwargs.pop('default_originate_route_map')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_address_holder_af_ipv6_neighbor_address_prefix_list_direction_in_prefix_list_direction_in_prefix_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_address_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-address-holder")
        af_ipv6_neighbor_address = ET.SubElement(af_ipv6_neighbor_address_holder, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key = ET.SubElement(af_ipv6_neighbor_address, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key.text = kwargs.pop('af_ipv6_neighbor_address')
        prefix_list = ET.SubElement(af_ipv6_neighbor_address, "prefix-list")
        direction_in = ET.SubElement(prefix_list, "direction-in")
        prefix_list_direction_in_prefix_name = ET.SubElement(direction_in, "prefix-list-direction-in-prefix-name")
        prefix_list_direction_in_prefix_name.text = kwargs.pop('prefix_list_direction_in_prefix_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_address_holder_af_ipv6_neighbor_address_prefix_list_direction_in_prefix_list_direction_in(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_address_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-address-holder")
        af_ipv6_neighbor_address = ET.SubElement(af_ipv6_neighbor_address_holder, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key = ET.SubElement(af_ipv6_neighbor_address, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key.text = kwargs.pop('af_ipv6_neighbor_address')
        prefix_list = ET.SubElement(af_ipv6_neighbor_address, "prefix-list")
        direction_in = ET.SubElement(prefix_list, "direction-in")
        prefix_list_direction_in = ET.SubElement(direction_in, "prefix-list-direction-in")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_address_holder_af_ipv6_neighbor_address_prefix_list_direction_out_prefix_list_direction_out_prefix_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_address_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-address-holder")
        af_ipv6_neighbor_address = ET.SubElement(af_ipv6_neighbor_address_holder, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key = ET.SubElement(af_ipv6_neighbor_address, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key.text = kwargs.pop('af_ipv6_neighbor_address')
        prefix_list = ET.SubElement(af_ipv6_neighbor_address, "prefix-list")
        direction_out = ET.SubElement(prefix_list, "direction-out")
        prefix_list_direction_out_prefix_name = ET.SubElement(direction_out, "prefix-list-direction-out-prefix-name")
        prefix_list_direction_out_prefix_name.text = kwargs.pop('prefix_list_direction_out_prefix_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_address_holder_af_ipv6_neighbor_address_prefix_list_direction_out_prefix_list_direction_out(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_address_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-address-holder")
        af_ipv6_neighbor_address = ET.SubElement(af_ipv6_neighbor_address_holder, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key = ET.SubElement(af_ipv6_neighbor_address, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key.text = kwargs.pop('af_ipv6_neighbor_address')
        prefix_list = ET.SubElement(af_ipv6_neighbor_address, "prefix-list")
        direction_out = ET.SubElement(prefix_list, "direction-out")
        prefix_list_direction_out = ET.SubElement(direction_out, "prefix-list-direction-out")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_address_holder_af_ipv6_neighbor_address_neighbor_route_map_neighbor_route_map_direction_in_neighbor_route_map_name_direction_in(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_address_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-address-holder")
        af_ipv6_neighbor_address = ET.SubElement(af_ipv6_neighbor_address_holder, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key = ET.SubElement(af_ipv6_neighbor_address, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key.text = kwargs.pop('af_ipv6_neighbor_address')
        neighbor_route_map = ET.SubElement(af_ipv6_neighbor_address, "neighbor-route-map")
        neighbor_route_map_direction_in = ET.SubElement(neighbor_route_map, "neighbor-route-map-direction-in")
        neighbor_route_map_name_direction_in = ET.SubElement(neighbor_route_map_direction_in, "neighbor-route-map-name-direction-in")
        neighbor_route_map_name_direction_in.text = kwargs.pop('neighbor_route_map_name_direction_in')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_address_holder_af_ipv6_neighbor_address_neighbor_route_map_neighbor_route_map_direction_out_neighbor_route_map_name_direction_out(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_address_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-address-holder")
        af_ipv6_neighbor_address = ET.SubElement(af_ipv6_neighbor_address_holder, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key = ET.SubElement(af_ipv6_neighbor_address, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key.text = kwargs.pop('af_ipv6_neighbor_address')
        neighbor_route_map = ET.SubElement(af_ipv6_neighbor_address, "neighbor-route-map")
        neighbor_route_map_direction_out = ET.SubElement(neighbor_route_map, "neighbor-route-map-direction-out")
        neighbor_route_map_name_direction_out = ET.SubElement(neighbor_route_map_direction_out, "neighbor-route-map-name-direction-out")
        neighbor_route_map_name_direction_out.text = kwargs.pop('neighbor_route_map_name_direction_out')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_address_holder_af_ipv6_neighbor_address_route_reflector_client(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_address_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-address-holder")
        af_ipv6_neighbor_address = ET.SubElement(af_ipv6_neighbor_address_holder, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key = ET.SubElement(af_ipv6_neighbor_address, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key.text = kwargs.pop('af_ipv6_neighbor_address')
        route_reflector_client = ET.SubElement(af_ipv6_neighbor_address, "route-reflector-client")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_address_holder_af_ipv6_neighbor_address_unsuppress_map_map_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_address_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-address-holder")
        af_ipv6_neighbor_address = ET.SubElement(af_ipv6_neighbor_address_holder, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key = ET.SubElement(af_ipv6_neighbor_address, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key.text = kwargs.pop('af_ipv6_neighbor_address')
        unsuppress_map = ET.SubElement(af_ipv6_neighbor_address, "unsuppress-map")
        map_name = ET.SubElement(unsuppress_map, "map-name")
        map_name.text = kwargs.pop('map_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_address_holder_af_ipv6_neighbor_address_af_nei_weight(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_address_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-address-holder")
        af_ipv6_neighbor_address = ET.SubElement(af_ipv6_neighbor_address_holder, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key = ET.SubElement(af_ipv6_neighbor_address, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key.text = kwargs.pop('af_ipv6_neighbor_address')
        af_nei_weight = ET.SubElement(af_ipv6_neighbor_address, "af-nei-weight")
        af_nei_weight.text = kwargs.pop('af_nei_weight')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_common_cmds_holder_maximum_paths_load_sharing_value(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_common_cmds_holder = ET.SubElement(ipv6_unicast, "af-common-cmds-holder")
        maximum_paths = ET.SubElement(af_common_cmds_holder, "maximum-paths")
        load_sharing_value = ET.SubElement(maximum_paths, "load-sharing-value")
        load_sharing_value.text = kwargs.pop('load_sharing_value')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_common_cmds_holder_maximum_paths_ebgp(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_common_cmds_holder = ET.SubElement(ipv6_unicast, "af-common-cmds-holder")
        maximum_paths = ET.SubElement(af_common_cmds_holder, "maximum-paths")
        ebgp = ET.SubElement(maximum_paths, "ebgp")
        ebgp.text = kwargs.pop('ebgp')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_common_cmds_holder_maximum_paths_ibgp(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_common_cmds_holder = ET.SubElement(ipv6_unicast, "af-common-cmds-holder")
        maximum_paths = ET.SubElement(af_common_cmds_holder, "maximum-paths")
        ibgp = ET.SubElement(maximum_paths, "ibgp")
        ibgp.text = kwargs.pop('ibgp')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_common_cmds_holder_maximum_paths_use_load_sharing(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_common_cmds_holder = ET.SubElement(ipv6_unicast, "af-common-cmds-holder")
        maximum_paths = ET.SubElement(af_common_cmds_holder, "maximum-paths")
        use_load_sharing = ET.SubElement(maximum_paths, "use-load-sharing")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_common_cmds_holder_multipath_multipath_ebgp(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_common_cmds_holder = ET.SubElement(ipv6_unicast, "af-common-cmds-holder")
        multipath = ET.SubElement(af_common_cmds_holder, "multipath")
        multipath_ebgp = ET.SubElement(multipath, "multipath_ebgp")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_common_cmds_holder_multipath_multipath_ibgp(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_common_cmds_holder = ET.SubElement(ipv6_unicast, "af-common-cmds-holder")
        multipath = ET.SubElement(af_common_cmds_holder, "multipath")
        multipath_ibgp = ET.SubElement(multipath, "multipath_ibgp")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_common_cmds_holder_multipath_multi_as(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_common_cmds_holder = ET.SubElement(ipv6_unicast, "af-common-cmds-holder")
        multipath = ET.SubElement(af_common_cmds_holder, "multipath")
        multi_as = ET.SubElement(multipath, "multi-as")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_common_cmds_holder_always_propagate(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_common_cmds_holder = ET.SubElement(ipv6_unicast, "af-common-cmds-holder")
        always_propagate = ET.SubElement(af_common_cmds_holder, "always-propagate")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_common_cmds_holder_default_information_originate(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_common_cmds_holder = ET.SubElement(ipv6_unicast, "af-common-cmds-holder")
        default_information_originate = ET.SubElement(af_common_cmds_holder, "default-information-originate")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_common_cmds_holder_rib_route_limit(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_common_cmds_holder = ET.SubElement(ipv6_unicast, "af-common-cmds-holder")
        rib_route_limit = ET.SubElement(af_common_cmds_holder, "rib-route-limit")
        rib_route_limit.text = kwargs.pop('rib_route_limit')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_common_cmds_holder_client_to_client_reflection(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_common_cmds_holder = ET.SubElement(ipv6_unicast, "af-common-cmds-holder")
        client_to_client_reflection = ET.SubElement(af_common_cmds_holder, "client-to-client-reflection")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_common_cmds_holder_dampening_ch_dampening_source_ca_dampening_flag_dampening_flag(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_common_cmds_holder = ET.SubElement(ipv6_unicast, "af-common-cmds-holder")
        dampening = ET.SubElement(af_common_cmds_holder, "dampening")
        ch_dampening_source = ET.SubElement(dampening, "ch-dampening-source")
        ca_dampening_flag = ET.SubElement(ch_dampening_source, "ca-dampening-flag")
        dampening_flag = ET.SubElement(ca_dampening_flag, "dampening-flag")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_common_cmds_holder_dampening_ch_dampening_source_ca_dampening_specify_values_values_half_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_common_cmds_holder = ET.SubElement(ipv6_unicast, "af-common-cmds-holder")
        dampening = ET.SubElement(af_common_cmds_holder, "dampening")
        ch_dampening_source = ET.SubElement(dampening, "ch-dampening-source")
        ca_dampening_specify_values = ET.SubElement(ch_dampening_source, "ca-dampening-specify-values")
        values = ET.SubElement(ca_dampening_specify_values, "values")
        half_time = ET.SubElement(values, "half-time")
        half_time.text = kwargs.pop('half_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_common_cmds_holder_dampening_ch_dampening_source_ca_dampening_specify_values_values_reuse_value(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_common_cmds_holder = ET.SubElement(ipv6_unicast, "af-common-cmds-holder")
        dampening = ET.SubElement(af_common_cmds_holder, "dampening")
        ch_dampening_source = ET.SubElement(dampening, "ch-dampening-source")
        ca_dampening_specify_values = ET.SubElement(ch_dampening_source, "ca-dampening-specify-values")
        values = ET.SubElement(ca_dampening_specify_values, "values")
        reuse_value = ET.SubElement(values, "reuse-value")
        reuse_value.text = kwargs.pop('reuse_value')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_common_cmds_holder_dampening_ch_dampening_source_ca_dampening_specify_values_values_start_suppress_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_common_cmds_holder = ET.SubElement(ipv6_unicast, "af-common-cmds-holder")
        dampening = ET.SubElement(af_common_cmds_holder, "dampening")
        ch_dampening_source = ET.SubElement(dampening, "ch-dampening-source")
        ca_dampening_specify_values = ET.SubElement(ch_dampening_source, "ca-dampening-specify-values")
        values = ET.SubElement(ca_dampening_specify_values, "values")
        start_suppress_time = ET.SubElement(values, "start-suppress-time")
        start_suppress_time.text = kwargs.pop('start_suppress_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_common_cmds_holder_dampening_ch_dampening_source_ca_dampening_specify_values_values_max_suppress_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_common_cmds_holder = ET.SubElement(ipv6_unicast, "af-common-cmds-holder")
        dampening = ET.SubElement(af_common_cmds_holder, "dampening")
        ch_dampening_source = ET.SubElement(dampening, "ch-dampening-source")
        ca_dampening_specify_values = ET.SubElement(ch_dampening_source, "ca-dampening-specify-values")
        values = ET.SubElement(ca_dampening_specify_values, "values")
        max_suppress_time = ET.SubElement(values, "max-suppress-time")
        max_suppress_time.text = kwargs.pop('max_suppress_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_common_cmds_holder_dampening_ch_dampening_source_ca_dampening_route_map_dampening_route_map(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_common_cmds_holder = ET.SubElement(ipv6_unicast, "af-common-cmds-holder")
        dampening = ET.SubElement(af_common_cmds_holder, "dampening")
        ch_dampening_source = ET.SubElement(dampening, "ch-dampening-source")
        ca_dampening_route_map = ET.SubElement(ch_dampening_source, "ca-dampening-route-map")
        dampening_route_map = ET.SubElement(ca_dampening_route_map, "dampening-route-map")
        dampening_route_map.text = kwargs.pop('dampening_route_map')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_common_cmds_holder_default_metric(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_common_cmds_holder = ET.SubElement(ipv6_unicast, "af-common-cmds-holder")
        default_metric = ET.SubElement(af_common_cmds_holder, "default-metric")
        default_metric.text = kwargs.pop('default_metric')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_common_cmds_holder_next_hop_enable_default(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_common_cmds_holder = ET.SubElement(ipv6_unicast, "af-common-cmds-holder")
        next_hop_enable_default = ET.SubElement(af_common_cmds_holder, "next-hop-enable-default")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_common_cmds_holder_table_map_table_map_route_map(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_common_cmds_holder = ET.SubElement(ipv6_unicast, "af-common-cmds-holder")
        table_map = ET.SubElement(af_common_cmds_holder, "table-map")
        table_map_route_map = ET.SubElement(table_map, "table-map-route-map")
        table_map_route_map.text = kwargs.pop('table_map_route_map')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_common_cmds_holder_update_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_common_cmds_holder = ET.SubElement(ipv6_unicast, "af-common-cmds-holder")
        update_time = ET.SubElement(af_common_cmds_holder, "update-time")
        update_time.text = kwargs.pop('update_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_common_cmds_holder_graceful_restart_graceful_restart_status(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_common_cmds_holder = ET.SubElement(ipv6_unicast, "af-common-cmds-holder")
        graceful_restart = ET.SubElement(af_common_cmds_holder, "graceful-restart")
        graceful_restart_status = ET.SubElement(graceful_restart, "graceful-restart-status")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_common_cmds_holder_graceful_restart_restart_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_common_cmds_holder = ET.SubElement(ipv6_unicast, "af-common-cmds-holder")
        graceful_restart = ET.SubElement(af_common_cmds_holder, "graceful-restart")
        restart_time = ET.SubElement(graceful_restart, "restart-time")
        restart_time.text = kwargs.pop('restart_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_common_cmds_holder_graceful_restart_purge_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_common_cmds_holder = ET.SubElement(ipv6_unicast, "af-common-cmds-holder")
        graceful_restart = ET.SubElement(af_common_cmds_holder, "graceful-restart")
        purge_time = ET.SubElement(graceful_restart, "purge-time")
        purge_time.text = kwargs.pop('purge_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_common_cmds_holder_graceful_restart_stale_routes_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_common_cmds_holder = ET.SubElement(ipv6_unicast, "af-common-cmds-holder")
        graceful_restart = ET.SubElement(af_common_cmds_holder, "graceful-restart")
        stale_routes_time = ET.SubElement(graceful_restart, "stale-routes-time")
        stale_routes_time.text = kwargs.pop('stale_routes_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_ipv6_ucast_next_hop_recursion(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        ipv6_ucast_next_hop_recursion = ET.SubElement(ipv6_unicast, "ipv6-ucast-next-hop-recursion")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_vrf(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf = ET.SubElement(ospf, "vrf")
        vrf.text = kwargs.pop('vrf')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_database_overflow_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        database_overflow_interval = ET.SubElement(ospf, "database-overflow-interval")
        database_overflow_interval.text = kwargs.pop('database_overflow_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_default_information_originate_always(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        default_information_originate = ET.SubElement(ospf, "default-information-originate")
        always = ET.SubElement(default_information_originate, "always")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_default_information_originate_def_orig_metric(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        default_information_originate = ET.SubElement(ospf, "default-information-originate")
        def_orig_metric = ET.SubElement(default_information_originate, "def-orig-metric")
        def_orig_metric.text = kwargs.pop('def_orig_metric')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_default_information_originate_def_orig_metric_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        default_information_originate = ET.SubElement(ospf, "default-information-originate")
        def_orig_metric_type = ET.SubElement(default_information_originate, "def-orig-metric-type")
        def_orig_metric_type.text = kwargs.pop('def_orig_metric_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_default_information_originate_def_orig_route_map(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        default_information_originate = ET.SubElement(ospf, "default-information-originate")
        def_orig_route_map = ET.SubElement(default_information_originate, "def-orig-route-map")
        def_orig_route_map.text = kwargs.pop('def_orig_route_map')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_default_passive_interface(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        default_passive_interface = ET.SubElement(ospf, "default-passive-interface")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_default_metric(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        default_metric = ET.SubElement(ospf, "default-metric")
        default_metric.text = kwargs.pop('default_metric')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_external_lsdb_limit(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        external_lsdb_limit = ET.SubElement(ospf, "external-lsdb-limit")
        external_lsdb_limit.text = kwargs.pop('external_lsdb_limit')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_log_adjacency_dr_only(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        log = ET.SubElement(ospf, "log")
        adjacency = ET.SubElement(log, "adjacency")
        dr_only = ET.SubElement(adjacency, "dr-only")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_log_log_all(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        log = ET.SubElement(ospf, "log")
        log_all = ET.SubElement(log, "log-all")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_log_bad_packet_log_checksum(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        log = ET.SubElement(ospf, "log")
        bad_packet = ET.SubElement(log, "bad-packet")
        log_checksum = ET.SubElement(bad_packet, "log-checksum")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_log_log_database(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        log = ET.SubElement(ospf, "log")
        log_database = ET.SubElement(log, "log-database")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_log_log_retransmit(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        log = ET.SubElement(ospf, "log")
        log_retransmit = ET.SubElement(log, "log-retransmit")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_ospf_metric_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        ospf_metric_type = ET.SubElement(ospf, "ospf-metric-type")
        ospf_metric_type.text = kwargs.pop('ospf_metric_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_neighbor_neighbor_addr(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        neighbor = ET.SubElement(ospf, "neighbor")
        neighbor_addr = ET.SubElement(neighbor, "neighbor-addr")
        neighbor_addr.text = kwargs.pop('neighbor_addr')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_nssa_translator_nssa_translator_flag(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        nssa_translator = ET.SubElement(ospf, "nssa-translator")
        nssa_translator_flag = ET.SubElement(nssa_translator, "nssa-translator-flag")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_redistribute_connected_connected_route_map(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        redistribute = ET.SubElement(ospf, "redistribute")
        connected = ET.SubElement(redistribute, "connected")
        connected_route_map = ET.SubElement(connected, "connected-route-map")
        connected_route_map.text = kwargs.pop('connected_route_map')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_redistribute_static_static_route_map(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        redistribute = ET.SubElement(ospf, "redistribute")
        static = ET.SubElement(redistribute, "static")
        static_route_map = ET.SubElement(static, "static-route-map")
        static_route_map.text = kwargs.pop('static_route_map')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_redistribute_bgp_bgp_route_map(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        redistribute = ET.SubElement(ospf, "redistribute")
        bgp = ET.SubElement(redistribute, "bgp")
        bgp_route_map = ET.SubElement(bgp, "bgp-route-map")
        bgp_route_map.text = kwargs.pop('bgp_route_map')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_redistribute_redistribute_ospf_ospf_route_map(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        redistribute = ET.SubElement(ospf, "redistribute")
        redistribute_ospf = ET.SubElement(redistribute, "redistribute-ospf")
        ospf_route_map = ET.SubElement(redistribute_ospf, "ospf-route-map")
        ospf_route_map.text = kwargs.pop('ospf_route_map')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_rfc1583_compatibility_rfc1583_compatibility_flag(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        rfc1583_compatibility = ET.SubElement(ospf, "rfc1583-compatibility")
        rfc1583_compatibility_flag = ET.SubElement(rfc1583_compatibility, "rfc1583-compatibility-flag")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_area_area_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id = ET.SubElement(area, "area-id")
        area_id.text = kwargs.pop('area_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_area_normal(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        normal = ET.SubElement(area, "normal")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_area_nssa_metric_nssa_value(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        nssa = ET.SubElement(area, "nssa")
        metric = ET.SubElement(nssa, "metric")
        nssa_value = ET.SubElement(metric, "nssa-value")
        nssa_value.text = kwargs.pop('nssa_value')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_area_nssa_metric_no_summary1(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        nssa = ET.SubElement(area, "nssa")
        metric = ET.SubElement(nssa, "metric")
        no_summary1 = ET.SubElement(metric, "no-summary1")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_area_nssa_default_information_originate(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        nssa = ET.SubElement(area, "nssa")
        default_information_originate = ET.SubElement(nssa, "default-information-originate")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_area_range_range_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        range = ET.SubElement(area, "range")
        range_mask_key = ET.SubElement(range, "range-mask")
        range_mask_key.text = kwargs.pop('range_mask')
        range_address = ET.SubElement(range, "range-address")
        range_address.text = kwargs.pop('range_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_area_range_range_mask(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        range = ET.SubElement(area, "range")
        range_address_key = ET.SubElement(range, "range-address")
        range_address_key.text = kwargs.pop('range_address')
        range_mask = ET.SubElement(range, "range-mask")
        range_mask.text = kwargs.pop('range_mask')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_area_range_range_effect(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        range = ET.SubElement(area, "range")
        range_address_key = ET.SubElement(range, "range-address")
        range_address_key.text = kwargs.pop('range_address')
        range_mask_key = ET.SubElement(range, "range-mask")
        range_mask_key.text = kwargs.pop('range_mask')
        range_effect = ET.SubElement(range, "range-effect")
        range_effect.text = kwargs.pop('range_effect')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_area_range_range_cost(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        range = ET.SubElement(area, "range")
        range_address_key = ET.SubElement(range, "range-address")
        range_address_key.text = kwargs.pop('range_address')
        range_mask_key = ET.SubElement(range, "range-mask")
        range_mask_key.text = kwargs.pop('range_mask')
        range_cost = ET.SubElement(range, "range-cost")
        range_cost.text = kwargs.pop('range_cost')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_area_stub_metric_stub_value(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        stub = ET.SubElement(area, "stub")
        metric = ET.SubElement(stub, "metric")
        stub_value = ET.SubElement(metric, "stub-value")
        stub_value.text = kwargs.pop('stub_value')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_area_stub_metric_no_summary(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        stub = ET.SubElement(area, "stub")
        metric = ET.SubElement(stub, "metric")
        no_summary = ET.SubElement(metric, "no-summary")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_area_virtual_link_virt_link_neighbor(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        virtual_link = ET.SubElement(area, "virtual-link")
        virt_link_neighbor = ET.SubElement(virtual_link, "virt-link-neighbor")
        virt_link_neighbor.text = kwargs.pop('virt_link_neighbor')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_area_virtual_link_authentication_key_no_encrypt_auth_key_table_no_encrypt_auth_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        virtual_link = ET.SubElement(area, "virtual-link")
        virt_link_neighbor_key = ET.SubElement(virtual_link, "virt-link-neighbor")
        virt_link_neighbor_key.text = kwargs.pop('virt_link_neighbor')
        authentication_key = ET.SubElement(virtual_link, "authentication-key")
        no_encrypt_auth_key_table = ET.SubElement(authentication_key, "no-encrypt-auth-key-table")
        no_encrypt_auth_key = ET.SubElement(no_encrypt_auth_key_table, "no-encrypt-auth-key")
        no_encrypt_auth_key.text = kwargs.pop('no_encrypt_auth_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_area_virtual_link_authentication_key_auth_key_table_encrypttype(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        virtual_link = ET.SubElement(area, "virtual-link")
        virt_link_neighbor_key = ET.SubElement(virtual_link, "virt-link-neighbor")
        virt_link_neighbor_key.text = kwargs.pop('virt_link_neighbor')
        authentication_key = ET.SubElement(virtual_link, "authentication-key")
        auth_key_table = ET.SubElement(authentication_key, "auth-key-table")
        encrypttype = ET.SubElement(auth_key_table, "encrypttype")
        encrypttype.text = kwargs.pop('encrypttype')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_area_virtual_link_authentication_key_auth_key_table_auth_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        virtual_link = ET.SubElement(area, "virtual-link")
        virt_link_neighbor_key = ET.SubElement(virtual_link, "virt-link-neighbor")
        virt_link_neighbor_key.text = kwargs.pop('virt_link_neighbor')
        authentication_key = ET.SubElement(virtual_link, "authentication-key")
        auth_key_table = ET.SubElement(authentication_key, "auth-key-table")
        auth_key = ET.SubElement(auth_key_table, "auth-key")
        auth_key.text = kwargs.pop('auth_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_area_virtual_link_dead_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        virtual_link = ET.SubElement(area, "virtual-link")
        virt_link_neighbor_key = ET.SubElement(virtual_link, "virt-link-neighbor")
        virt_link_neighbor_key.text = kwargs.pop('virt_link_neighbor')
        dead_interval = ET.SubElement(virtual_link, "dead-interval")
        dead_interval.text = kwargs.pop('dead_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_area_virtual_link_hello_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        virtual_link = ET.SubElement(area, "virtual-link")
        virt_link_neighbor_key = ET.SubElement(virtual_link, "virt-link-neighbor")
        virt_link_neighbor_key.text = kwargs.pop('virt_link_neighbor')
        hello_interval = ET.SubElement(virtual_link, "hello-interval")
        hello_interval.text = kwargs.pop('hello_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_area_virtual_link_retransmit_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        virtual_link = ET.SubElement(area, "virtual-link")
        virt_link_neighbor_key = ET.SubElement(virtual_link, "virt-link-neighbor")
        virt_link_neighbor_key.text = kwargs.pop('virt_link_neighbor')
        retransmit_interval = ET.SubElement(virtual_link, "retransmit-interval")
        retransmit_interval.text = kwargs.pop('retransmit_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_area_virtual_link_transmit_delay(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        virtual_link = ET.SubElement(area, "virtual-link")
        virt_link_neighbor_key = ET.SubElement(virtual_link, "virt-link-neighbor")
        virt_link_neighbor_key.text = kwargs.pop('virt_link_neighbor')
        transmit_delay = ET.SubElement(virtual_link, "transmit-delay")
        transmit_delay.text = kwargs.pop('transmit_delay')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_area_virtual_link_md5_authentication_key_activation_wait_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        virtual_link = ET.SubElement(area, "virtual-link")
        virt_link_neighbor_key = ET.SubElement(virtual_link, "virt-link-neighbor")
        virt_link_neighbor_key.text = kwargs.pop('virt_link_neighbor')
        md5_authentication = ET.SubElement(virtual_link, "md5-authentication")
        key_activation_wait_time = ET.SubElement(md5_authentication, "key-activation-wait-time")
        key_activation_wait_time.text = kwargs.pop('key_activation_wait_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_area_virtual_link_md5_authentication_no_encrypt_key_table_no_encrypt_key_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        virtual_link = ET.SubElement(area, "virtual-link")
        virt_link_neighbor_key = ET.SubElement(virtual_link, "virt-link-neighbor")
        virt_link_neighbor_key.text = kwargs.pop('virt_link_neighbor')
        md5_authentication = ET.SubElement(virtual_link, "md5-authentication")
        no_encrypt_key_table = ET.SubElement(md5_authentication, "no-encrypt-key-table")
        no_encrypt_key_id = ET.SubElement(no_encrypt_key_table, "no-encrypt-key-id")
        no_encrypt_key_id.text = kwargs.pop('no_encrypt_key_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_area_virtual_link_md5_authentication_no_encrypt_key_table_no_encrypt_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        virtual_link = ET.SubElement(area, "virtual-link")
        virt_link_neighbor_key = ET.SubElement(virtual_link, "virt-link-neighbor")
        virt_link_neighbor_key.text = kwargs.pop('virt_link_neighbor')
        md5_authentication = ET.SubElement(virtual_link, "md5-authentication")
        no_encrypt_key_table = ET.SubElement(md5_authentication, "no-encrypt-key-table")
        no_encrypt_key = ET.SubElement(no_encrypt_key_table, "no-encrypt-key")
        no_encrypt_key.text = kwargs.pop('no_encrypt_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_area_virtual_link_md5_authentication_key_table_key_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        virtual_link = ET.SubElement(area, "virtual-link")
        virt_link_neighbor_key = ET.SubElement(virtual_link, "virt-link-neighbor")
        virt_link_neighbor_key.text = kwargs.pop('virt_link_neighbor')
        md5_authentication = ET.SubElement(virtual_link, "md5-authentication")
        key_table = ET.SubElement(md5_authentication, "key-table")
        key_id = ET.SubElement(key_table, "key-id")
        key_id.text = kwargs.pop('key_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_area_virtual_link_md5_authentication_key_table_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        virtual_link = ET.SubElement(area, "virtual-link")
        virt_link_neighbor_key = ET.SubElement(virtual_link, "virt-link-neighbor")
        virt_link_neighbor_key.text = kwargs.pop('virt_link_neighbor')
        md5_authentication = ET.SubElement(virtual_link, "md5-authentication")
        key_table = ET.SubElement(md5_authentication, "key-table")
        key = ET.SubElement(key_table, "key")
        key.text = kwargs.pop('key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_area_virtual_link_md5_authentication_key_table_md5_authentication_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        virtual_link = ET.SubElement(area, "virtual-link")
        virt_link_neighbor_key = ET.SubElement(virtual_link, "virt-link-neighbor")
        virt_link_neighbor_key.text = kwargs.pop('virt_link_neighbor')
        md5_authentication = ET.SubElement(virtual_link, "md5-authentication")
        key_table = ET.SubElement(md5_authentication, "key-table")
        md5_authentication_key = ET.SubElement(key_table, "md5-authentication-key")
        md5_authentication_key.text = kwargs.pop('md5_authentication_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_auto_cost_reference_bandwidth_ref_bandwidth(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        auto_cost = ET.SubElement(ospf, "auto-cost")
        reference_bandwidth = ET.SubElement(auto_cost, "reference-bandwidth")
        ref_bandwidth = ET.SubElement(reference_bandwidth, "ref-bandwidth")
        ref_bandwidth.text = kwargs.pop('ref_bandwidth')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_auto_cost_reference_bandwidth_use_active_ports(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        auto_cost = ET.SubElement(ospf, "auto-cost")
        reference_bandwidth = ET.SubElement(auto_cost, "reference-bandwidth")
        use_active_ports = ET.SubElement(reference_bandwidth, "use-active-ports")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_distance_route_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        distance = ET.SubElement(ospf, "distance")
        route_type = ET.SubElement(distance, "route-type")
        route_type.text = kwargs.pop('route_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_distance_dist_value(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        distance = ET.SubElement(ospf, "distance")
        route_type_key = ET.SubElement(distance, "route-type")
        route_type_key.text = kwargs.pop('route_type')
        dist_value = ET.SubElement(distance, "dist-value")
        dist_value.text = kwargs.pop('dist_value')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_distribute_list_route_map_route_map(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        distribute_list = ET.SubElement(ospf, "distribute-list")
        route_map = ET.SubElement(distribute_list, "route-map")
        route_map = ET.SubElement(route_map, "route-map")
        route_map.text = kwargs.pop('route_map')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_distribute_list_route_map_in_cg(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        distribute_list = ET.SubElement(ospf, "distribute-list")
        route_map = ET.SubElement(distribute_list, "route-map")
        in_cg = ET.SubElement(route_map, "in")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_max_metric_router_lsa_all_vrfs(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        max_metric = ET.SubElement(ospf, "max-metric")
        router_lsa = ET.SubElement(max_metric, "router-lsa")
        all_vrfs = ET.SubElement(router_lsa, "all-vrfs")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_max_metric_router_lsa_all_lsas(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        max_metric = ET.SubElement(ospf, "max-metric")
        router_lsa = ET.SubElement(max_metric, "router-lsa")
        all_lsas = ET.SubElement(router_lsa, "all-lsas")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_max_metric_router_lsa_external_lsa_external_lsa_val(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        max_metric = ET.SubElement(ospf, "max-metric")
        router_lsa = ET.SubElement(max_metric, "router-lsa")
        external_lsa = ET.SubElement(router_lsa, "external-lsa")
        external_lsa_val = ET.SubElement(external_lsa, "external-lsa-val")
        external_lsa_val.text = kwargs.pop('external_lsa_val')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_max_metric_router_lsa_summary_lsa_summary_lsa_val(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        max_metric = ET.SubElement(ospf, "max-metric")
        router_lsa = ET.SubElement(max_metric, "router-lsa")
        summary_lsa = ET.SubElement(router_lsa, "summary-lsa")
        summary_lsa_val = ET.SubElement(summary_lsa, "summary-lsa-val")
        summary_lsa_val.text = kwargs.pop('summary_lsa_val')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_max_metric_router_lsa_link_all(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        max_metric = ET.SubElement(ospf, "max-metric")
        router_lsa = ET.SubElement(max_metric, "router-lsa")
        link = ET.SubElement(router_lsa, "link")
        all = ET.SubElement(link, "all")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_max_metric_router_lsa_link_ptp(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        max_metric = ET.SubElement(ospf, "max-metric")
        router_lsa = ET.SubElement(max_metric, "router-lsa")
        link = ET.SubElement(router_lsa, "link")
        ptp = ET.SubElement(link, "ptp")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_max_metric_router_lsa_link_stub(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        max_metric = ET.SubElement(ospf, "max-metric")
        router_lsa = ET.SubElement(max_metric, "router-lsa")
        link = ET.SubElement(router_lsa, "link")
        stub = ET.SubElement(link, "stub")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_max_metric_router_lsa_link_transit(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        max_metric = ET.SubElement(ospf, "max-metric")
        router_lsa = ET.SubElement(max_metric, "router-lsa")
        link = ET.SubElement(router_lsa, "link")
        transit = ET.SubElement(link, "transit")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_max_metric_router_lsa_on_startup_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        max_metric = ET.SubElement(ospf, "max-metric")
        router_lsa = ET.SubElement(max_metric, "router-lsa")
        on_startup = ET.SubElement(router_lsa, "on-startup")
        time = ET.SubElement(on_startup, "time")
        time.text = kwargs.pop('time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_max_metric_router_lsa_on_startup_wait_for_bgp(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        max_metric = ET.SubElement(ospf, "max-metric")
        router_lsa = ET.SubElement(max_metric, "router-lsa")
        on_startup = ET.SubElement(router_lsa, "on-startup")
        wait_for_bgp = ET.SubElement(on_startup, "wait-for-bgp")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_max_metric_router_lsa_on_startup_all_lsas_onstartup(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        max_metric = ET.SubElement(ospf, "max-metric")
        router_lsa = ET.SubElement(max_metric, "router-lsa")
        on_startup = ET.SubElement(router_lsa, "on-startup")
        all_lsas_onstartup = ET.SubElement(on_startup, "all-lsas-onstartup")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_max_metric_router_lsa_on_startup_external_lsa_onstartup_external_lsa_val_onstartup(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        max_metric = ET.SubElement(ospf, "max-metric")
        router_lsa = ET.SubElement(max_metric, "router-lsa")
        on_startup = ET.SubElement(router_lsa, "on-startup")
        external_lsa_onstartup = ET.SubElement(on_startup, "external-lsa-onstartup")
        external_lsa_val_onstartup = ET.SubElement(external_lsa_onstartup, "external-lsa-val-onstartup")
        external_lsa_val_onstartup.text = kwargs.pop('external_lsa_val_onstartup')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_max_metric_router_lsa_on_startup_summary_lsa_onstartup_summary_lsa_val_onstartup(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        max_metric = ET.SubElement(ospf, "max-metric")
        router_lsa = ET.SubElement(max_metric, "router-lsa")
        on_startup = ET.SubElement(router_lsa, "on-startup")
        summary_lsa_onstartup = ET.SubElement(on_startup, "summary-lsa-onstartup")
        summary_lsa_val_onstartup = ET.SubElement(summary_lsa_onstartup, "summary-lsa-val-onstartup")
        summary_lsa_val_onstartup.text = kwargs.pop('summary_lsa_val_onstartup')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_max_metric_router_lsa_on_startup_link_onstartup_all_link_onstartup(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        max_metric = ET.SubElement(ospf, "max-metric")
        router_lsa = ET.SubElement(max_metric, "router-lsa")
        on_startup = ET.SubElement(router_lsa, "on-startup")
        link_onstartup = ET.SubElement(on_startup, "link-onstartup")
        all_link_onstartup = ET.SubElement(link_onstartup, "all-link-onstartup")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_max_metric_router_lsa_on_startup_link_onstartup_ptp_link_onstartup(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        max_metric = ET.SubElement(ospf, "max-metric")
        router_lsa = ET.SubElement(max_metric, "router-lsa")
        on_startup = ET.SubElement(router_lsa, "on-startup")
        link_onstartup = ET.SubElement(on_startup, "link-onstartup")
        ptp_link_onstartup = ET.SubElement(link_onstartup, "ptp-link-onstartup")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_max_metric_router_lsa_on_startup_link_onstartup_stub_link_onstartup(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        max_metric = ET.SubElement(ospf, "max-metric")
        router_lsa = ET.SubElement(max_metric, "router-lsa")
        on_startup = ET.SubElement(router_lsa, "on-startup")
        link_onstartup = ET.SubElement(on_startup, "link-onstartup")
        stub_link_onstartup = ET.SubElement(link_onstartup, "stub-link-onstartup")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_max_metric_router_lsa_on_startup_link_onstartup_transit_link_onstartup(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        max_metric = ET.SubElement(ospf, "max-metric")
        router_lsa = ET.SubElement(max_metric, "router-lsa")
        on_startup = ET.SubElement(router_lsa, "on-startup")
        link_onstartup = ET.SubElement(on_startup, "link-onstartup")
        transit_link_onstartup = ET.SubElement(link_onstartup, "transit-link-onstartup")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_summary_address_sum_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        summary_address = ET.SubElement(ospf, "summary-address")
        sum_address_mask_key = ET.SubElement(summary_address, "sum-address-mask")
        sum_address_mask_key.text = kwargs.pop('sum_address_mask')
        sum_address = ET.SubElement(summary_address, "sum-address")
        sum_address.text = kwargs.pop('sum_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_summary_address_sum_address_mask(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        summary_address = ET.SubElement(ospf, "summary-address")
        sum_address_key = ET.SubElement(summary_address, "sum-address")
        sum_address_key.text = kwargs.pop('sum_address')
        sum_address_mask = ET.SubElement(summary_address, "sum-address-mask")
        sum_address_mask.text = kwargs.pop('sum_address_mask')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_timers_lsa_group_pacing(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        timers = ET.SubElement(ospf, "timers")
        lsa_group_pacing = ET.SubElement(timers, "lsa-group-pacing")
        lsa_group_pacing.text = kwargs.pop('lsa_group_pacing')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_timers_throttle_spf_init_delay(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        timers = ET.SubElement(ospf, "timers")
        throttle = ET.SubElement(timers, "throttle")
        spf = ET.SubElement(throttle, "spf")
        init_delay = ET.SubElement(spf, "init-delay")
        init_delay.text = kwargs.pop('init_delay')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_timers_throttle_spf_hold_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        timers = ET.SubElement(ospf, "timers")
        throttle = ET.SubElement(timers, "throttle")
        spf = ET.SubElement(throttle, "spf")
        hold_time = ET.SubElement(spf, "hold-time")
        hold_time.text = kwargs.pop('hold_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_timers_throttle_spf_max_hold_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        timers = ET.SubElement(ospf, "timers")
        throttle = ET.SubElement(timers, "throttle")
        spf = ET.SubElement(throttle, "spf")
        max_hold_time = ET.SubElement(spf, "max-hold-time")
        max_hold_time.text = kwargs.pop('max_hold_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_permit_redistribute_redist_value(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        permit = ET.SubElement(ospf, "permit")
        redistribute = ET.SubElement(permit, "redistribute")
        route_option_key = ET.SubElement(redistribute, "route-option")
        route_option_key.text = kwargs.pop('route_option')
        redist_value = ET.SubElement(redistribute, "redist-value")
        redist_value.text = kwargs.pop('redist_value')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_permit_redistribute_route_option(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        permit = ET.SubElement(ospf, "permit")
        redistribute = ET.SubElement(permit, "redistribute")
        redist_value_key = ET.SubElement(redistribute, "redist-value")
        redist_value_key.text = kwargs.pop('redist_value')
        route_option = ET.SubElement(redistribute, "route-option")
        route_option.text = kwargs.pop('route_option')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_permit_redistribute_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        permit = ET.SubElement(ospf, "permit")
        redistribute = ET.SubElement(permit, "redistribute")
        redist_value_key = ET.SubElement(redistribute, "redist-value")
        redist_value_key.text = kwargs.pop('redist_value')
        route_option_key = ET.SubElement(redistribute, "route-option")
        route_option_key.text = kwargs.pop('route_option')
        address = ET.SubElement(redistribute, "address")
        address.text = kwargs.pop('address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_permit_redistribute_mask(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        permit = ET.SubElement(ospf, "permit")
        redistribute = ET.SubElement(permit, "redistribute")
        redist_value_key = ET.SubElement(redistribute, "redist-value")
        redist_value_key.text = kwargs.pop('redist_value')
        route_option_key = ET.SubElement(redistribute, "route-option")
        route_option_key.text = kwargs.pop('route_option')
        mask = ET.SubElement(redistribute, "mask")
        mask.text = kwargs.pop('mask')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_permit_redistribute_set_metric_val(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        permit = ET.SubElement(ospf, "permit")
        redistribute = ET.SubElement(permit, "redistribute")
        redist_value_key = ET.SubElement(redistribute, "redist-value")
        redist_value_key.text = kwargs.pop('redist_value')
        route_option_key = ET.SubElement(redistribute, "route-option")
        route_option_key.text = kwargs.pop('route_option')
        set_metric_val = ET.SubElement(redistribute, "set-metric-val")
        set_metric_val.text = kwargs.pop('set_metric_val')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_permit_redistribute_match_metric_val(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        permit = ET.SubElement(ospf, "permit")
        redistribute = ET.SubElement(permit, "redistribute")
        redist_value_key = ET.SubElement(redistribute, "redist-value")
        redist_value_key.text = kwargs.pop('redist_value')
        route_option_key = ET.SubElement(redistribute, "route-option")
        route_option_key.text = kwargs.pop('route_option')
        match_metric_val = ET.SubElement(redistribute, "match-metric-val")
        match_metric_val.text = kwargs.pop('match_metric_val')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_deny_redistribute_redist_value(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        deny = ET.SubElement(ospf, "deny")
        redistribute = ET.SubElement(deny, "redistribute")
        route_option_key = ET.SubElement(redistribute, "route-option")
        route_option_key.text = kwargs.pop('route_option')
        redist_value = ET.SubElement(redistribute, "redist-value")
        redist_value.text = kwargs.pop('redist_value')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_deny_redistribute_route_option(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        deny = ET.SubElement(ospf, "deny")
        redistribute = ET.SubElement(deny, "redistribute")
        redist_value_key = ET.SubElement(redistribute, "redist-value")
        redist_value_key.text = kwargs.pop('redist_value')
        route_option = ET.SubElement(redistribute, "route-option")
        route_option.text = kwargs.pop('route_option')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_deny_redistribute_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        deny = ET.SubElement(ospf, "deny")
        redistribute = ET.SubElement(deny, "redistribute")
        redist_value_key = ET.SubElement(redistribute, "redist-value")
        redist_value_key.text = kwargs.pop('redist_value')
        route_option_key = ET.SubElement(redistribute, "route-option")
        route_option_key.text = kwargs.pop('route_option')
        address = ET.SubElement(redistribute, "address")
        address.text = kwargs.pop('address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_deny_redistribute_mask(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        deny = ET.SubElement(ospf, "deny")
        redistribute = ET.SubElement(deny, "redistribute")
        redist_value_key = ET.SubElement(redistribute, "redist-value")
        redist_value_key.text = kwargs.pop('redist_value')
        route_option_key = ET.SubElement(redistribute, "route-option")
        route_option_key.text = kwargs.pop('route_option')
        mask = ET.SubElement(redistribute, "mask")
        mask.text = kwargs.pop('mask')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_deny_redistribute_set_metric_val(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        deny = ET.SubElement(ospf, "deny")
        redistribute = ET.SubElement(deny, "redistribute")
        redist_value_key = ET.SubElement(redistribute, "redist-value")
        redist_value_key.text = kwargs.pop('redist_value')
        route_option_key = ET.SubElement(redistribute, "route-option")
        route_option_key.text = kwargs.pop('route_option')
        set_metric_val = ET.SubElement(redistribute, "set-metric-val")
        set_metric_val.text = kwargs.pop('set_metric_val')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_deny_redistribute_match_metric_val(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        deny = ET.SubElement(ospf, "deny")
        redistribute = ET.SubElement(deny, "redistribute")
        redist_value_key = ET.SubElement(redistribute, "redist-value")
        redist_value_key.text = kwargs.pop('redist_value')
        route_option_key = ET.SubElement(redistribute, "route-option")
        route_option_key.text = kwargs.pop('route_option')
        match_metric_val = ET.SubElement(redistribute, "match-metric-val")
        match_metric_val.text = kwargs.pop('match_metric_val')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_vrf_lite_capability(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        vrf_lite_capability = ET.SubElement(ospf, "vrf-lite-capability")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_graceful_restart_graceful_restart_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        graceful_restart = ET.SubElement(ospf, "graceful-restart")
        graceful_restart_enable = ET.SubElement(graceful_restart, "graceful-restart-enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_graceful_restart_helper_disable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        graceful_restart = ET.SubElement(ospf, "graceful-restart")
        helper_disable = ET.SubElement(graceful_restart, "helper-disable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_graceful_restart_restart_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        graceful_restart = ET.SubElement(ospf, "graceful-restart")
        restart_time = ET.SubElement(graceful_restart, "restart-time")
        restart_time.text = kwargs.pop('restart_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_nonstop_routing(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        nonstop_routing = ET.SubElement(ospf, "nonstop-routing")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_maximum_paths(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        maximum_paths = ET.SubElement(ospf, "maximum-paths")
        maximum_paths.text = kwargs.pop('maximum_paths')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_hide_pim_holder_pim_max_mcache(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        hide_pim_holder = ET.SubElement(router, "hide-pim-holder", xmlns="urn:brocade.com:mgmt:brocade-pim")
        pim = ET.SubElement(hide_pim_holder, "pim")
        max_mcache = ET.SubElement(pim, "max-mcache")
        max_mcache.text = kwargs.pop('max_mcache')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_hide_pim_holder_pim_hello_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        hide_pim_holder = ET.SubElement(router, "hide-pim-holder", xmlns="urn:brocade.com:mgmt:brocade-pim")
        pim = ET.SubElement(hide_pim_holder, "pim")
        hello_interval = ET.SubElement(pim, "hello-interval")
        hello_interval.text = kwargs.pop('hello_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_hide_pim_holder_pim_nbr_timeout(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        hide_pim_holder = ET.SubElement(router, "hide-pim-holder", xmlns="urn:brocade.com:mgmt:brocade-pim")
        pim = ET.SubElement(hide_pim_holder, "pim")
        nbr_timeout = ET.SubElement(pim, "nbr-timeout")
        nbr_timeout.text = kwargs.pop('nbr_timeout')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_hide_pim_holder_pim_inactivity_timer(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        hide_pim_holder = ET.SubElement(router, "hide-pim-holder", xmlns="urn:brocade.com:mgmt:brocade-pim")
        pim = ET.SubElement(hide_pim_holder, "pim")
        inactivity_timer = ET.SubElement(pim, "inactivity-timer")
        inactivity_timer.text = kwargs.pop('inactivity_timer')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_hide_pim_holder_pim_message_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        hide_pim_holder = ET.SubElement(router, "hide-pim-holder", xmlns="urn:brocade.com:mgmt:brocade-pim")
        pim = ET.SubElement(hide_pim_holder, "pim")
        message_interval = ET.SubElement(pim, "message-interval")
        message_interval.text = kwargs.pop('message_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_hide_pim_holder_pim_spt_threshold(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        hide_pim_holder = ET.SubElement(router, "hide-pim-holder", xmlns="urn:brocade.com:mgmt:brocade-pim")
        pim = ET.SubElement(hide_pim_holder, "pim")
        spt_threshold = ET.SubElement(pim, "spt-threshold")
        spt_threshold.text = kwargs.pop('spt_threshold')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_hide_pim_holder_pim_bsr_candidate_bsr_cand_interface_bsr_cand_intf_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        hide_pim_holder = ET.SubElement(router, "hide-pim-holder", xmlns="urn:brocade.com:mgmt:brocade-pim")
        pim = ET.SubElement(hide_pim_holder, "pim")
        bsr_candidate = ET.SubElement(pim, "bsr-candidate")
        bsr_cand_interface = ET.SubElement(bsr_candidate, "bsr-cand-interface")
        bsr_cand_intf_id_key = ET.SubElement(bsr_cand_interface, "bsr-cand-intf-id")
        bsr_cand_intf_id_key.text = kwargs.pop('bsr_cand_intf_id')
        bsr_cand_intf_type = ET.SubElement(bsr_cand_interface, "bsr-cand-intf-type")
        bsr_cand_intf_type.text = kwargs.pop('bsr_cand_intf_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_hide_pim_holder_pim_bsr_candidate_bsr_cand_interface_bsr_cand_intf_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        hide_pim_holder = ET.SubElement(router, "hide-pim-holder", xmlns="urn:brocade.com:mgmt:brocade-pim")
        pim = ET.SubElement(hide_pim_holder, "pim")
        bsr_candidate = ET.SubElement(pim, "bsr-candidate")
        bsr_cand_interface = ET.SubElement(bsr_candidate, "bsr-cand-interface")
        bsr_cand_intf_type_key = ET.SubElement(bsr_cand_interface, "bsr-cand-intf-type")
        bsr_cand_intf_type_key.text = kwargs.pop('bsr_cand_intf_type')
        bsr_cand_intf_id = ET.SubElement(bsr_cand_interface, "bsr-cand-intf-id")
        bsr_cand_intf_id.text = kwargs.pop('bsr_cand_intf_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_hide_pim_holder_pim_bsr_candidate_bsr_cand_interface_hash_mask_length(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        hide_pim_holder = ET.SubElement(router, "hide-pim-holder", xmlns="urn:brocade.com:mgmt:brocade-pim")
        pim = ET.SubElement(hide_pim_holder, "pim")
        bsr_candidate = ET.SubElement(pim, "bsr-candidate")
        bsr_cand_interface = ET.SubElement(bsr_candidate, "bsr-cand-interface")
        bsr_cand_intf_type_key = ET.SubElement(bsr_cand_interface, "bsr-cand-intf-type")
        bsr_cand_intf_type_key.text = kwargs.pop('bsr_cand_intf_type')
        bsr_cand_intf_id_key = ET.SubElement(bsr_cand_interface, "bsr-cand-intf-id")
        bsr_cand_intf_id_key.text = kwargs.pop('bsr_cand_intf_id')
        hash_mask_length = ET.SubElement(bsr_cand_interface, "hash-mask-length")
        hash_mask_length.text = kwargs.pop('hash_mask_length')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_hide_pim_holder_pim_bsr_candidate_bsr_cand_interface_bsr_cand_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        hide_pim_holder = ET.SubElement(router, "hide-pim-holder", xmlns="urn:brocade.com:mgmt:brocade-pim")
        pim = ET.SubElement(hide_pim_holder, "pim")
        bsr_candidate = ET.SubElement(pim, "bsr-candidate")
        bsr_cand_interface = ET.SubElement(bsr_candidate, "bsr-cand-interface")
        bsr_cand_intf_type_key = ET.SubElement(bsr_cand_interface, "bsr-cand-intf-type")
        bsr_cand_intf_type_key.text = kwargs.pop('bsr_cand_intf_type')
        bsr_cand_intf_id_key = ET.SubElement(bsr_cand_interface, "bsr-cand-intf-id")
        bsr_cand_intf_id_key.text = kwargs.pop('bsr_cand_intf_id')
        bsr_cand_priority = ET.SubElement(bsr_cand_interface, "bsr-cand-priority")
        bsr_cand_priority.text = kwargs.pop('bsr_cand_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_hide_pim_holder_pim_rp_candidate_rp_cand_interface_rp_cand_intf_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        hide_pim_holder = ET.SubElement(router, "hide-pim-holder", xmlns="urn:brocade.com:mgmt:brocade-pim")
        pim = ET.SubElement(hide_pim_holder, "pim")
        rp_candidate = ET.SubElement(pim, "rp-candidate")
        rp_cand_interface = ET.SubElement(rp_candidate, "rp-cand-interface")
        rp_cand_intf_id_key = ET.SubElement(rp_cand_interface, "rp-cand-intf-id")
        rp_cand_intf_id_key.text = kwargs.pop('rp_cand_intf_id')
        rp_cand_intf_type = ET.SubElement(rp_cand_interface, "rp-cand-intf-type")
        rp_cand_intf_type.text = kwargs.pop('rp_cand_intf_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_hide_pim_holder_pim_rp_candidate_rp_cand_interface_rp_cand_intf_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        hide_pim_holder = ET.SubElement(router, "hide-pim-holder", xmlns="urn:brocade.com:mgmt:brocade-pim")
        pim = ET.SubElement(hide_pim_holder, "pim")
        rp_candidate = ET.SubElement(pim, "rp-candidate")
        rp_cand_interface = ET.SubElement(rp_candidate, "rp-cand-interface")
        rp_cand_intf_type_key = ET.SubElement(rp_cand_interface, "rp-cand-intf-type")
        rp_cand_intf_type_key.text = kwargs.pop('rp_cand_intf_type')
        rp_cand_intf_id = ET.SubElement(rp_cand_interface, "rp-cand-intf-id")
        rp_cand_intf_id.text = kwargs.pop('rp_cand_intf_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_hide_pim_holder_pim_rp_candidate_rp_cand_grp_prefix_rp_cand_grp_prefix_action(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        hide_pim_holder = ET.SubElement(router, "hide-pim-holder", xmlns="urn:brocade.com:mgmt:brocade-pim")
        pim = ET.SubElement(hide_pim_holder, "pim")
        rp_candidate = ET.SubElement(pim, "rp-candidate")
        rp_cand_grp_prefix = ET.SubElement(rp_candidate, "rp-cand-grp-prefix")
        rp_cand_grp_prefix_ip_key = ET.SubElement(rp_cand_grp_prefix, "rp-cand-grp-prefix-ip")
        rp_cand_grp_prefix_ip_key.text = kwargs.pop('rp_cand_grp_prefix_ip')
        rp_cand_grp_prefix_length_key = ET.SubElement(rp_cand_grp_prefix, "rp-cand-grp-prefix-length")
        rp_cand_grp_prefix_length_key.text = kwargs.pop('rp_cand_grp_prefix_length')
        rp_cand_grp_prefix_action = ET.SubElement(rp_cand_grp_prefix, "rp-cand-grp-prefix-action")
        rp_cand_grp_prefix_action.text = kwargs.pop('rp_cand_grp_prefix_action')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_hide_pim_holder_pim_rp_candidate_rp_cand_grp_prefix_rp_cand_grp_prefix_ip(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        hide_pim_holder = ET.SubElement(router, "hide-pim-holder", xmlns="urn:brocade.com:mgmt:brocade-pim")
        pim = ET.SubElement(hide_pim_holder, "pim")
        rp_candidate = ET.SubElement(pim, "rp-candidate")
        rp_cand_grp_prefix = ET.SubElement(rp_candidate, "rp-cand-grp-prefix")
        rp_cand_grp_prefix_action_key = ET.SubElement(rp_cand_grp_prefix, "rp-cand-grp-prefix-action")
        rp_cand_grp_prefix_action_key.text = kwargs.pop('rp_cand_grp_prefix_action')
        rp_cand_grp_prefix_length_key = ET.SubElement(rp_cand_grp_prefix, "rp-cand-grp-prefix-length")
        rp_cand_grp_prefix_length_key.text = kwargs.pop('rp_cand_grp_prefix_length')
        rp_cand_grp_prefix_ip = ET.SubElement(rp_cand_grp_prefix, "rp-cand-grp-prefix-ip")
        rp_cand_grp_prefix_ip.text = kwargs.pop('rp_cand_grp_prefix_ip')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_hide_pim_holder_pim_rp_candidate_rp_cand_grp_prefix_rp_cand_grp_prefix_length(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        hide_pim_holder = ET.SubElement(router, "hide-pim-holder", xmlns="urn:brocade.com:mgmt:brocade-pim")
        pim = ET.SubElement(hide_pim_holder, "pim")
        rp_candidate = ET.SubElement(pim, "rp-candidate")
        rp_cand_grp_prefix = ET.SubElement(rp_candidate, "rp-cand-grp-prefix")
        rp_cand_grp_prefix_action_key = ET.SubElement(rp_cand_grp_prefix, "rp-cand-grp-prefix-action")
        rp_cand_grp_prefix_action_key.text = kwargs.pop('rp_cand_grp_prefix_action')
        rp_cand_grp_prefix_ip_key = ET.SubElement(rp_cand_grp_prefix, "rp-cand-grp-prefix-ip")
        rp_cand_grp_prefix_ip_key.text = kwargs.pop('rp_cand_grp_prefix_ip')
        rp_cand_grp_prefix_length = ET.SubElement(rp_cand_grp_prefix, "rp-cand-grp-prefix-length")
        rp_cand_grp_prefix_length.text = kwargs.pop('rp_cand_grp_prefix_length')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_hide_pim_holder_pim_rp_address_rp_ip_addr(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        hide_pim_holder = ET.SubElement(router, "hide-pim-holder", xmlns="urn:brocade.com:mgmt:brocade-pim")
        pim = ET.SubElement(hide_pim_holder, "pim")
        rp_address = ET.SubElement(pim, "rp-address")
        rp_ip_addr = ET.SubElement(rp_address, "rp-ip-addr")
        rp_ip_addr.text = kwargs.pop('rp_ip_addr')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_hide_pim_holder_pim_rp_address_prefix_list(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        hide_pim_holder = ET.SubElement(router, "hide-pim-holder", xmlns="urn:brocade.com:mgmt:brocade-pim")
        pim = ET.SubElement(hide_pim_holder, "pim")
        rp_address = ET.SubElement(pim, "rp-address")
        rp_ip_addr_key = ET.SubElement(rp_address, "rp-ip-addr")
        rp_ip_addr_key.text = kwargs.pop('rp_ip_addr')
        prefix_list = ET.SubElement(rp_address, "prefix-list")
        prefix_list.text = kwargs.pop('prefix_list')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_switch_attributes_chassis_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        switch_attributes = ET.SubElement(rbridge_id, "switch-attributes")
        chassis_name = ET.SubElement(switch_attributes, "chassis-name")
        chassis_name.text = kwargs.pop('chassis_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_switch_attributes_host_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        switch_attributes = ET.SubElement(rbridge_id, "switch-attributes")
        host_name = ET.SubElement(switch_attributes, "host-name")
        host_name.text = kwargs.pop('host_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_protocol_hide_vrrp_holder_vrrp(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        protocol = ET.SubElement(rbridge_id, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hide_vrrp_holder = ET.SubElement(protocol, "hide-vrrp-holder", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrrp = ET.SubElement(hide_vrrp_holder, "vrrp")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_protocol_hide_vrrp_holder_vrrp_extended(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        protocol = ET.SubElement(rbridge_id, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hide_vrrp_holder = ET.SubElement(protocol, "hide-vrrp-holder", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrrp_extended = ET.SubElement(hide_vrrp_holder, "vrrp-extended")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name = ET.SubElement(ve, "name")
        name.text = kwargs.pop('name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_vrrp_vrid(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(ve, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        vrid = ET.SubElement(vrrp, "vrid")
        vrid.text = kwargs.pop('vrid')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_vrrp_version(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(ve, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version = ET.SubElement(vrrp, "version")
        version.text = kwargs.pop('version')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_vrrp_use_v2_checksum(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(ve, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        use_v2_checksum = ET.SubElement(vrrp, "use-v2-checksum")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_vrrp_virtual_ip_virtual_ipaddr(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(ve, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        virtual_ip = ET.SubElement(vrrp, "virtual-ip")
        virtual_ipaddr = ET.SubElement(virtual_ip, "virtual-ipaddr")
        virtual_ipaddr.text = kwargs.pop('virtual_ipaddr')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_vrrp_track_interface_interface_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(ve, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        track = ET.SubElement(vrrp, "track")
        interface = ET.SubElement(track, "interface")
        interface_name_key = ET.SubElement(interface, "interface-name")
        interface_name_key.text = kwargs.pop('interface_name')
        interface_type = ET.SubElement(interface, "interface-type")
        interface_type.text = kwargs.pop('interface_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_vrrp_track_interface_interface_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(ve, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        track = ET.SubElement(vrrp, "track")
        interface = ET.SubElement(track, "interface")
        interface_type_key = ET.SubElement(interface, "interface-type")
        interface_type_key.text = kwargs.pop('interface_type')
        interface_name = ET.SubElement(interface, "interface-name")
        interface_name.text = kwargs.pop('interface_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_vrrp_track_interface_track_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(ve, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        track = ET.SubElement(vrrp, "track")
        interface = ET.SubElement(track, "interface")
        interface_type_key = ET.SubElement(interface, "interface-type")
        interface_type_key.text = kwargs.pop('interface_type')
        interface_name_key = ET.SubElement(interface, "interface-name")
        interface_name_key.text = kwargs.pop('interface_name')
        track_priority = ET.SubElement(interface, "track-priority")
        track_priority.text = kwargs.pop('track_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_vrrp_advertisement_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(ve, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        advertisement_interval = ET.SubElement(vrrp, "advertisement-interval")
        advertisement_interval.text = kwargs.pop('advertisement_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_vrrp_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(ve, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        enable = ET.SubElement(vrrp, "enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_vrrp_hold_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(ve, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        hold_time = ET.SubElement(vrrp, "hold-time")
        hold_time.text = kwargs.pop('hold_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_vrrp_preempt_mode(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(ve, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        preempt_mode = ET.SubElement(vrrp, "preempt-mode")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_vrrp_arp_unicast_request_receive(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(ve, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        arp = ET.SubElement(vrrp, "arp")
        unicast_request = ET.SubElement(arp, "unicast-request")
        receive = ET.SubElement(unicast_request, "receive")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_vrrp_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(ve, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        priority = ET.SubElement(vrrp, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_vrrp_description(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(ve, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        description = ET.SubElement(vrrp, "description")
        description.text = kwargs.pop('description')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_vrrpe_vrid(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        vrrpe = ET.SubElement(ve, "vrrpe", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid = ET.SubElement(vrrpe, "vrid")
        vrid.text = kwargs.pop('vrid')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_vrrpe_virtual_mac(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        vrrpe = ET.SubElement(ve, "vrrpe", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrpe, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        virtual_mac = ET.SubElement(vrrpe, "virtual-mac")
        virtual_mac.text = kwargs.pop('virtual_mac')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_vrrpe_virtual_ip_virtual_ipaddr(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        vrrpe = ET.SubElement(ve, "vrrpe", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrpe, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        virtual_ip = ET.SubElement(vrrpe, "virtual-ip")
        virtual_ipaddr = ET.SubElement(virtual_ip, "virtual-ipaddr")
        virtual_ipaddr.text = kwargs.pop('virtual_ipaddr')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_vrrpe_track_interface_interface_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        vrrpe = ET.SubElement(ve, "vrrpe", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrpe, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        track = ET.SubElement(vrrpe, "track")
        interface = ET.SubElement(track, "interface")
        interface_name_key = ET.SubElement(interface, "interface-name")
        interface_name_key.text = kwargs.pop('interface_name')
        interface_type = ET.SubElement(interface, "interface-type")
        interface_type.text = kwargs.pop('interface_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_vrrpe_track_interface_interface_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        vrrpe = ET.SubElement(ve, "vrrpe", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrpe, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        track = ET.SubElement(vrrpe, "track")
        interface = ET.SubElement(track, "interface")
        interface_type_key = ET.SubElement(interface, "interface-type")
        interface_type_key.text = kwargs.pop('interface_type')
        interface_name = ET.SubElement(interface, "interface-name")
        interface_name.text = kwargs.pop('interface_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_vrrpe_track_interface_track_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        vrrpe = ET.SubElement(ve, "vrrpe", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrpe, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        track = ET.SubElement(vrrpe, "track")
        interface = ET.SubElement(track, "interface")
        interface_type_key = ET.SubElement(interface, "interface-type")
        interface_type_key.text = kwargs.pop('interface_type')
        interface_name_key = ET.SubElement(interface, "interface-name")
        interface_name_key.text = kwargs.pop('interface_name')
        track_priority = ET.SubElement(interface, "track-priority")
        track_priority.text = kwargs.pop('track_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_vrrpe_advertisement_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        vrrpe = ET.SubElement(ve, "vrrpe", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrpe, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        advertisement_interval = ET.SubElement(vrrpe, "advertisement-interval")
        advertisement_interval.text = kwargs.pop('advertisement_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_vrrpe_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        vrrpe = ET.SubElement(ve, "vrrpe", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrpe, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        enable = ET.SubElement(vrrpe, "enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_vrrpe_hold_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        vrrpe = ET.SubElement(ve, "vrrpe", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrpe, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        hold_time = ET.SubElement(vrrpe, "hold-time")
        hold_time.text = kwargs.pop('hold_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_vrrpe_preempt_mode(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        vrrpe = ET.SubElement(ve, "vrrpe", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrpe, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        preempt_mode = ET.SubElement(vrrpe, "preempt-mode")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_vrrpe_arp_unicast_request_receive(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        vrrpe = ET.SubElement(ve, "vrrpe", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrpe, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        arp = ET.SubElement(vrrpe, "arp")
        unicast_request = ET.SubElement(arp, "unicast-request")
        receive = ET.SubElement(unicast_request, "receive")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_vrrpe_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        vrrpe = ET.SubElement(ve, "vrrpe", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrpe, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        priority = ET.SubElement(vrrpe, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_vrrpe_description(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        vrrpe = ET.SubElement(ve, "vrrpe", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrpe, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        description = ET.SubElement(vrrpe, "description")
        description.text = kwargs.pop('description')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_vrrpe_advertise_backup(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        vrrpe = ET.SubElement(ve, "vrrpe", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrpe, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        advertise_backup = ET.SubElement(vrrpe, "advertise-backup")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_vrrpe_vrrpe_garp_timer(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        vrrpe = ET.SubElement(ve, "vrrpe", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrpe, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        vrrpe_garp_timer = ET.SubElement(vrrpe, "vrrpe-garp-timer")
        vrrpe_garp_timer.text = kwargs.pop('vrrpe_garp_timer')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_vrrpe_backup_advertisement_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        vrrpe = ET.SubElement(ve, "vrrpe", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrpe, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        backup_advertisement_interval = ET.SubElement(vrrpe, "backup-advertisement-interval")
        backup_advertisement_interval.text = kwargs.pop('backup_advertisement_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_vrrpe_short_path_forwarding_basic(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        vrrpe = ET.SubElement(ve, "vrrpe", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrpe, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        short_path_forwarding = ET.SubElement(vrrpe, "short-path-forwarding")
        basic = ET.SubElement(short_path_forwarding, "basic")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_vrrpe_short_path_forwarding_revert_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        vrrpe = ET.SubElement(ve, "vrrpe", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrpe, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        short_path_forwarding = ET.SubElement(vrrpe, "short-path-forwarding")
        revert_priority = ET.SubElement(short_path_forwarding, "revert-priority")
        revert_priority.text = kwargs.pop('revert_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_vrrpe_advertisement_interval_scale(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        vrrpe = ET.SubElement(ve, "vrrpe", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrpe, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        advertisement_interval_scale = ET.SubElement(vrrpe, "advertisement-interval-scale")
        advertisement_interval_scale.text = kwargs.pop('advertisement_interval_scale')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_vrf_forwarding(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        vrf = ET.SubElement(ve, "vrf", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        forwarding = ET.SubElement(vrf, "forwarding")
        forwarding.text = kwargs.pop('forwarding')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_ip_config_mtu(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        ip_config = ET.SubElement(ip, "ip-config")
        mtu = ET.SubElement(ip_config, "mtu")
        mtu.text = kwargs.pop('mtu')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_ip_config_directed_broadcast(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        ip_config = ET.SubElement(ip, "ip-config")
        directed_broadcast = ET.SubElement(ip_config, "directed-broadcast")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_ip_config_proxy_arp(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        ip_config = ET.SubElement(ip, "ip-config")
        proxy_arp = ET.SubElement(ip_config, "proxy-arp")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_ip_config_arp_aging_timeout(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        ip_config = ET.SubElement(ip, "ip-config")
        arp_aging_timeout = ET.SubElement(ip_config, "arp-aging-timeout")
        arp_aging_timeout.text = kwargs.pop('arp_aging_timeout')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_ip_config_address_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        ip_config = ET.SubElement(ip, "ip-config")
        address = ET.SubElement(ip_config, "address")
        address = ET.SubElement(address, "address")
        address.text = kwargs.pop('address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_ip_config_address_secondary(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        ip_config = ET.SubElement(ip, "ip-config")
        address = ET.SubElement(ip_config, "address")
        address_key = ET.SubElement(address, "address")
        address_key.text = kwargs.pop('address')
        secondary = ET.SubElement(address, "secondary")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_ip_config_address_ospf_passive(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        ip_config = ET.SubElement(ip, "ip-config")
        address = ET.SubElement(ip_config, "address")
        address_key = ET.SubElement(address, "address")
        address_key.text = kwargs.pop('address')
        ospf_passive = ET.SubElement(address, "ospf-passive")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_ip_config_address_ospf_ignore(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        ip_config = ET.SubElement(ip, "ip-config")
        address = ET.SubElement(ip_config, "address")
        address_key = ET.SubElement(address, "address")
        address_key.text = kwargs.pop('address')
        ospf_ignore = ET.SubElement(address, "ospf-ignore")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_ip_local_anycast_gateway_local_ip_gw_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        ip_local_anycast_gateway = ET.SubElement(ip, "ip-local-anycast-gateway", xmlns="urn:brocade.com:mgmt:brocade-anycast-gateway")
        local_ip_gw_id = ET.SubElement(ip_local_anycast_gateway, "local-ip-gw-id")
        local_ip_gw_id.text = kwargs.pop('local_ip_gw_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_ip_local_anycast_gateway_track_interface_interface_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        ip_local_anycast_gateway = ET.SubElement(ip, "ip-local-anycast-gateway", xmlns="urn:brocade.com:mgmt:brocade-anycast-gateway")
        local_ip_gw_id_key = ET.SubElement(ip_local_anycast_gateway, "local-ip-gw-id")
        local_ip_gw_id_key.text = kwargs.pop('local_ip_gw_id')
        track = ET.SubElement(ip_local_anycast_gateway, "track")
        interface = ET.SubElement(track, "interface")
        interface_name_key = ET.SubElement(interface, "interface-name")
        interface_name_key.text = kwargs.pop('interface_name')
        interface_type = ET.SubElement(interface, "interface-type")
        interface_type.text = kwargs.pop('interface_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_ip_local_anycast_gateway_track_interface_interface_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        ip_local_anycast_gateway = ET.SubElement(ip, "ip-local-anycast-gateway", xmlns="urn:brocade.com:mgmt:brocade-anycast-gateway")
        local_ip_gw_id_key = ET.SubElement(ip_local_anycast_gateway, "local-ip-gw-id")
        local_ip_gw_id_key.text = kwargs.pop('local_ip_gw_id')
        track = ET.SubElement(ip_local_anycast_gateway, "track")
        interface = ET.SubElement(track, "interface")
        interface_type_key = ET.SubElement(interface, "interface-type")
        interface_type_key.text = kwargs.pop('interface_type')
        interface_name = ET.SubElement(interface, "interface-name")
        interface_name.text = kwargs.pop('interface_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_ip_local_anycast_gateway_track_interface_interface_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        ip_local_anycast_gateway = ET.SubElement(ip, "ip-local-anycast-gateway", xmlns="urn:brocade.com:mgmt:brocade-anycast-gateway")
        local_ip_gw_id_key = ET.SubElement(ip_local_anycast_gateway, "local-ip-gw-id")
        local_ip_gw_id_key.text = kwargs.pop('local_ip_gw_id')
        track = ET.SubElement(ip_local_anycast_gateway, "track")
        interface = ET.SubElement(track, "interface")
        interface_type_key = ET.SubElement(interface, "interface-type")
        interface_type_key.text = kwargs.pop('interface_type')
        interface_name_key = ET.SubElement(interface, "interface-name")
        interface_name_key.text = kwargs.pop('interface_name')
        interface_priority = ET.SubElement(interface, "interface-priority")
        interface_priority.text = kwargs.pop('interface_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_ip_local_anycast_gateway_track_network_network_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        ip_local_anycast_gateway = ET.SubElement(ip, "ip-local-anycast-gateway", xmlns="urn:brocade.com:mgmt:brocade-anycast-gateway")
        local_ip_gw_id_key = ET.SubElement(ip_local_anycast_gateway, "local-ip-gw-id")
        local_ip_gw_id_key.text = kwargs.pop('local_ip_gw_id')
        track = ET.SubElement(ip_local_anycast_gateway, "track")
        network = ET.SubElement(track, "network")
        network_address = ET.SubElement(network, "network-address")
        network_address.text = kwargs.pop('network_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_ip_local_anycast_gateway_track_network_network_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        ip_local_anycast_gateway = ET.SubElement(ip, "ip-local-anycast-gateway", xmlns="urn:brocade.com:mgmt:brocade-anycast-gateway")
        local_ip_gw_id_key = ET.SubElement(ip_local_anycast_gateway, "local-ip-gw-id")
        local_ip_gw_id_key.text = kwargs.pop('local_ip_gw_id')
        track = ET.SubElement(ip_local_anycast_gateway, "track")
        network = ET.SubElement(track, "network")
        network_address_key = ET.SubElement(network, "network-address")
        network_address_key.text = kwargs.pop('network_address')
        network_priority = ET.SubElement(network, "network-priority")
        network_priority.text = kwargs.pop('network_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_ip_local_anycast_gateway_track_next_hop_next_hop_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        ip_local_anycast_gateway = ET.SubElement(ip, "ip-local-anycast-gateway", xmlns="urn:brocade.com:mgmt:brocade-anycast-gateway")
        local_ip_gw_id_key = ET.SubElement(ip_local_anycast_gateway, "local-ip-gw-id")
        local_ip_gw_id_key.text = kwargs.pop('local_ip_gw_id')
        track = ET.SubElement(ip_local_anycast_gateway, "track")
        next_hop = ET.SubElement(track, "next-hop")
        next_hop_address = ET.SubElement(next_hop, "next-hop-address")
        next_hop_address.text = kwargs.pop('next_hop_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_ip_local_anycast_gateway_track_next_hop_next_hop_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        ip_local_anycast_gateway = ET.SubElement(ip, "ip-local-anycast-gateway", xmlns="urn:brocade.com:mgmt:brocade-anycast-gateway")
        local_ip_gw_id_key = ET.SubElement(ip_local_anycast_gateway, "local-ip-gw-id")
        local_ip_gw_id_key.text = kwargs.pop('local_ip_gw_id')
        track = ET.SubElement(ip_local_anycast_gateway, "track")
        next_hop = ET.SubElement(track, "next-hop")
        next_hop_address_key = ET.SubElement(next_hop, "next-hop-address")
        next_hop_address_key.text = kwargs.pop('next_hop_address')
        next_hop_priority = ET.SubElement(next_hop, "next-hop-priority")
        next_hop_priority.text = kwargs.pop('next_hop_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_ip_local_anycast_gateway_enable_local(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        ip_local_anycast_gateway = ET.SubElement(ip, "ip-local-anycast-gateway", xmlns="urn:brocade.com:mgmt:brocade-anycast-gateway")
        local_ip_gw_id_key = ET.SubElement(ip_local_anycast_gateway, "local-ip-gw-id")
        local_ip_gw_id_key.text = kwargs.pop('local_ip_gw_id')
        enable_local = ET.SubElement(ip_local_anycast_gateway, "enable_local")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_ip_local_anycast_gateway_disable_local(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        ip_local_anycast_gateway = ET.SubElement(ip, "ip-local-anycast-gateway", xmlns="urn:brocade.com:mgmt:brocade-anycast-gateway")
        local_ip_gw_id_key = ET.SubElement(ip_local_anycast_gateway, "local-ip-gw-id")
        local_ip_gw_id_key.text = kwargs.pop('local_ip_gw_id')
        disable_local = ET.SubElement(ip_local_anycast_gateway, "disable_local")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_ip_local_anycast_gateway_load_balancing_basic(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        ip_local_anycast_gateway = ET.SubElement(ip, "ip-local-anycast-gateway", xmlns="urn:brocade.com:mgmt:brocade-anycast-gateway")
        local_ip_gw_id_key = ET.SubElement(ip_local_anycast_gateway, "local-ip-gw-id")
        local_ip_gw_id_key.text = kwargs.pop('local_ip_gw_id')
        load_balancing = ET.SubElement(ip_local_anycast_gateway, "load-balancing")
        basic = ET.SubElement(load_balancing, "basic")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_ip_local_anycast_gateway_load_balancing_threshold_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        ip_local_anycast_gateway = ET.SubElement(ip, "ip-local-anycast-gateway", xmlns="urn:brocade.com:mgmt:brocade-anycast-gateway")
        local_ip_gw_id_key = ET.SubElement(ip_local_anycast_gateway, "local-ip-gw-id")
        local_ip_gw_id_key.text = kwargs.pop('local_ip_gw_id')
        load_balancing = ET.SubElement(ip_local_anycast_gateway, "load-balancing")
        threshold_priority = ET.SubElement(load_balancing, "threshold-priority")
        threshold_priority.text = kwargs.pop('threshold_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_ip_local_anycast_gateway_install_default_route(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        ip_local_anycast_gateway = ET.SubElement(ip, "ip-local-anycast-gateway", xmlns="urn:brocade.com:mgmt:brocade-anycast-gateway")
        local_ip_gw_id_key = ET.SubElement(ip_local_anycast_gateway, "local-ip-gw-id")
        local_ip_gw_id_key.text = kwargs.pop('local_ip_gw_id')
        install_default_route = ET.SubElement(ip_local_anycast_gateway, "install-default-route")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_interface_ve_dhcp_conf_dhcp_relay_servers_relay_ip_addr(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_ve_dhcp_conf = ET.SubElement(ip, "interface-ve-dhcp-conf", xmlns="urn:brocade.com:mgmt:brocade-dhcp")
        dhcp = ET.SubElement(interface_ve_dhcp_conf, "dhcp")
        relay = ET.SubElement(dhcp, "relay")
        servers = ET.SubElement(relay, "servers")
        server_vrf_name_key = ET.SubElement(servers, "server-vrf-name")
        server_vrf_name_key.text = kwargs.pop('server_vrf_name')
        relay_ip_addr = ET.SubElement(servers, "relay-ip-addr")
        relay_ip_addr.text = kwargs.pop('relay_ip_addr')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_interface_ve_dhcp_conf_dhcp_relay_servers_server_vrf_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_ve_dhcp_conf = ET.SubElement(ip, "interface-ve-dhcp-conf", xmlns="urn:brocade.com:mgmt:brocade-dhcp")
        dhcp = ET.SubElement(interface_ve_dhcp_conf, "dhcp")
        relay = ET.SubElement(dhcp, "relay")
        servers = ET.SubElement(relay, "servers")
        relay_ip_addr_key = ET.SubElement(servers, "relay-ip-addr")
        relay_ip_addr_key.text = kwargs.pop('relay_ip_addr')
        server_vrf_name = ET.SubElement(servers, "server-vrf-name")
        server_vrf_name.text = kwargs.pop('server_vrf_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_interface_ve_dhcp_conf_dhcp_relay_gateway(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_ve_dhcp_conf = ET.SubElement(ip, "interface-ve-dhcp-conf", xmlns="urn:brocade.com:mgmt:brocade-dhcp")
        dhcp = ET.SubElement(interface_ve_dhcp_conf, "dhcp")
        relay = ET.SubElement(dhcp, "relay")
        gateway = ET.SubElement(relay, "gateway")
        gateway.text = kwargs.pop('gateway')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_icmp_echo_reply(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        icmp = ET.SubElement(ip, "icmp", xmlns="urn:brocade.com:mgmt:brocade-icmp")
        echo_reply = ET.SubElement(icmp, "echo-reply")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_icmp_rate_limiting(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        icmp = ET.SubElement(ip, "icmp", xmlns="urn:brocade.com:mgmt:brocade-icmp")
        rate_limiting = ET.SubElement(icmp, "rate-limiting")
        rate_limiting.text = kwargs.pop('rate_limiting')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_icmp_unreachable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        icmp = ET.SubElement(ip, "icmp", xmlns="urn:brocade.com:mgmt:brocade-icmp")
        unreachable = ET.SubElement(icmp, "unreachable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_icmp_redirect(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        icmp = ET.SubElement(ip, "icmp", xmlns="urn:brocade.com:mgmt:brocade-icmp")
        redirect = ET.SubElement(icmp, "redirect")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_icmp_address_mask(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        icmp = ET.SubElement(ip, "icmp", xmlns="urn:brocade.com:mgmt:brocade-icmp")
        address_mask = ET.SubElement(icmp, "address-mask")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_igmp_last_member_query_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        igmp = ET.SubElement(ip, "igmp", xmlns="urn:brocade.com:mgmt:brocade-igmp")
        last_member_query_interval = ET.SubElement(igmp, "last-member-query-interval")
        last_member_query_interval.text = kwargs.pop('last_member_query_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_igmp_query_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        igmp = ET.SubElement(ip, "igmp", xmlns="urn:brocade.com:mgmt:brocade-igmp")
        query_interval = ET.SubElement(igmp, "query-interval")
        query_interval.text = kwargs.pop('query_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_igmp_query_max_response_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        igmp = ET.SubElement(ip, "igmp", xmlns="urn:brocade.com:mgmt:brocade-igmp")
        query_max_response_time = ET.SubElement(igmp, "query-max-response-time")
        query_max_response_time.text = kwargs.pop('query_max_response_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_igmp_immediate_leave(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        igmp = ET.SubElement(ip, "igmp", xmlns="urn:brocade.com:mgmt:brocade-igmp")
        immediate_leave = ET.SubElement(igmp, "immediate-leave")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_igmp_static_group_sg_addr(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        igmp = ET.SubElement(ip, "igmp", xmlns="urn:brocade.com:mgmt:brocade-igmp")
        static_group = ET.SubElement(igmp, "static-group")
        sg_addr = ET.SubElement(static_group, "sg-addr")
        sg_addr.text = kwargs.pop('sg_addr')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_interface_vlan_ospf_conf_ospf1_area(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_vlan_ospf_conf = ET.SubElement(ip, "interface-vlan-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_vlan_ospf_conf, "ospf1")
        area = ET.SubElement(ospf1, "area")
        area.text = kwargs.pop('area')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_interface_vlan_ospf_conf_ospf1_auth_change_wait_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_vlan_ospf_conf = ET.SubElement(ip, "interface-vlan-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_vlan_ospf_conf, "ospf1")
        auth_change_wait_time = ET.SubElement(ospf1, "auth-change-wait-time")
        auth_change_wait_time.text = kwargs.pop('auth_change_wait_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_interface_vlan_ospf_conf_ospf1_authentication_key_no_encrypt_auth_key_table_no_encrypt_auth_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_vlan_ospf_conf = ET.SubElement(ip, "interface-vlan-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_vlan_ospf_conf, "ospf1")
        authentication_key = ET.SubElement(ospf1, "authentication-key")
        no_encrypt_auth_key_table = ET.SubElement(authentication_key, "no-encrypt-auth-key-table")
        no_encrypt_auth_key = ET.SubElement(no_encrypt_auth_key_table, "no-encrypt-auth-key")
        no_encrypt_auth_key.text = kwargs.pop('no_encrypt_auth_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_interface_vlan_ospf_conf_ospf1_authentication_key_auth_key_table_encrypttype(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_vlan_ospf_conf = ET.SubElement(ip, "interface-vlan-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_vlan_ospf_conf, "ospf1")
        authentication_key = ET.SubElement(ospf1, "authentication-key")
        auth_key_table = ET.SubElement(authentication_key, "auth-key-table")
        encrypttype = ET.SubElement(auth_key_table, "encrypttype")
        encrypttype.text = kwargs.pop('encrypttype')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_interface_vlan_ospf_conf_ospf1_authentication_key_auth_key_table_auth_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_vlan_ospf_conf = ET.SubElement(ip, "interface-vlan-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_vlan_ospf_conf, "ospf1")
        authentication_key = ET.SubElement(ospf1, "authentication-key")
        auth_key_table = ET.SubElement(authentication_key, "auth-key-table")
        auth_key = ET.SubElement(auth_key_table, "auth-key")
        auth_key.text = kwargs.pop('auth_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_interface_vlan_ospf_conf_ospf1_dead_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_vlan_ospf_conf = ET.SubElement(ip, "interface-vlan-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_vlan_ospf_conf, "ospf1")
        dead_interval = ET.SubElement(ospf1, "dead-interval")
        dead_interval.text = kwargs.pop('dead_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_interface_vlan_ospf_conf_ospf1_hello_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_vlan_ospf_conf = ET.SubElement(ip, "interface-vlan-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_vlan_ospf_conf, "ospf1")
        hello_interval = ET.SubElement(ospf1, "hello-interval")
        hello_interval.text = kwargs.pop('hello_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_interface_vlan_ospf_conf_ospf1_retransmit_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_vlan_ospf_conf = ET.SubElement(ip, "interface-vlan-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_vlan_ospf_conf, "ospf1")
        retransmit_interval = ET.SubElement(ospf1, "retransmit-interval")
        retransmit_interval.text = kwargs.pop('retransmit_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_interface_vlan_ospf_conf_ospf1_transmit_delay(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_vlan_ospf_conf = ET.SubElement(ip, "interface-vlan-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_vlan_ospf_conf, "ospf1")
        transmit_delay = ET.SubElement(ospf1, "transmit-delay")
        transmit_delay.text = kwargs.pop('transmit_delay')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_interface_vlan_ospf_conf_ospf1_md5_authentication_key_activation_wait_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_vlan_ospf_conf = ET.SubElement(ip, "interface-vlan-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_vlan_ospf_conf, "ospf1")
        md5_authentication = ET.SubElement(ospf1, "md5-authentication")
        key_activation_wait_time = ET.SubElement(md5_authentication, "key-activation-wait-time")
        key_activation_wait_time.text = kwargs.pop('key_activation_wait_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_interface_vlan_ospf_conf_ospf1_md5_authentication_no_encrypt_key_table_no_encrypt_key_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_vlan_ospf_conf = ET.SubElement(ip, "interface-vlan-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_vlan_ospf_conf, "ospf1")
        md5_authentication = ET.SubElement(ospf1, "md5-authentication")
        no_encrypt_key_table = ET.SubElement(md5_authentication, "no-encrypt-key-table")
        no_encrypt_key_id = ET.SubElement(no_encrypt_key_table, "no-encrypt-key-id")
        no_encrypt_key_id.text = kwargs.pop('no_encrypt_key_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_interface_vlan_ospf_conf_ospf1_md5_authentication_no_encrypt_key_table_no_encrypt_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_vlan_ospf_conf = ET.SubElement(ip, "interface-vlan-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_vlan_ospf_conf, "ospf1")
        md5_authentication = ET.SubElement(ospf1, "md5-authentication")
        no_encrypt_key_table = ET.SubElement(md5_authentication, "no-encrypt-key-table")
        no_encrypt_key = ET.SubElement(no_encrypt_key_table, "no-encrypt-key")
        no_encrypt_key.text = kwargs.pop('no_encrypt_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_interface_vlan_ospf_conf_ospf1_md5_authentication_key_table_key_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_vlan_ospf_conf = ET.SubElement(ip, "interface-vlan-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_vlan_ospf_conf, "ospf1")
        md5_authentication = ET.SubElement(ospf1, "md5-authentication")
        key_table = ET.SubElement(md5_authentication, "key-table")
        key_id = ET.SubElement(key_table, "key-id")
        key_id.text = kwargs.pop('key_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_interface_vlan_ospf_conf_ospf1_md5_authentication_key_table_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_vlan_ospf_conf = ET.SubElement(ip, "interface-vlan-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_vlan_ospf_conf, "ospf1")
        md5_authentication = ET.SubElement(ospf1, "md5-authentication")
        key_table = ET.SubElement(md5_authentication, "key-table")
        key = ET.SubElement(key_table, "key")
        key.text = kwargs.pop('key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_interface_vlan_ospf_conf_ospf1_md5_authentication_key_table_md5_authentication_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_vlan_ospf_conf = ET.SubElement(ip, "interface-vlan-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_vlan_ospf_conf, "ospf1")
        md5_authentication = ET.SubElement(ospf1, "md5-authentication")
        key_table = ET.SubElement(md5_authentication, "key-table")
        md5_authentication_key = ET.SubElement(key_table, "md5-authentication-key")
        md5_authentication_key.text = kwargs.pop('md5_authentication_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_interface_vlan_ospf_conf_ospf1_cost(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_vlan_ospf_conf = ET.SubElement(ip, "interface-vlan-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_vlan_ospf_conf, "ospf1")
        cost = ET.SubElement(ospf1, "cost")
        cost.text = kwargs.pop('cost')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_interface_vlan_ospf_conf_ospf1_database_filter_all_out(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_vlan_ospf_conf = ET.SubElement(ip, "interface-vlan-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_vlan_ospf_conf, "ospf1")
        database_filter = ET.SubElement(ospf1, "database-filter")
        all_out = ET.SubElement(database_filter, "all-out")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_interface_vlan_ospf_conf_ospf1_database_filter_all_external(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_vlan_ospf_conf = ET.SubElement(ip, "interface-vlan-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_vlan_ospf_conf, "ospf1")
        database_filter = ET.SubElement(ospf1, "database-filter")
        all_external = ET.SubElement(database_filter, "all-external")
        all_external.text = kwargs.pop('all_external')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_interface_vlan_ospf_conf_ospf1_database_filter_all_summary_external(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_vlan_ospf_conf = ET.SubElement(ip, "interface-vlan-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_vlan_ospf_conf, "ospf1")
        database_filter = ET.SubElement(ospf1, "database-filter")
        all_summary_external = ET.SubElement(database_filter, "all-summary-external")
        all_summary_external.text = kwargs.pop('all_summary_external')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_interface_vlan_ospf_conf_ospf1_mtu_ignore(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_vlan_ospf_conf = ET.SubElement(ip, "interface-vlan-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_vlan_ospf_conf, "ospf1")
        mtu_ignore = ET.SubElement(ospf1, "mtu-ignore")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_interface_vlan_ospf_conf_ospf1_network(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_vlan_ospf_conf = ET.SubElement(ip, "interface-vlan-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_vlan_ospf_conf, "ospf1")
        network = ET.SubElement(ospf1, "network")
        network.text = kwargs.pop('network')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_interface_vlan_ospf_conf_ospf1_active(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_vlan_ospf_conf = ET.SubElement(ip, "interface-vlan-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_vlan_ospf_conf, "ospf1")
        active = ET.SubElement(ospf1, "active")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_interface_vlan_ospf_conf_ospf1_passive(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_vlan_ospf_conf = ET.SubElement(ip, "interface-vlan-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_vlan_ospf_conf, "ospf1")
        passive = ET.SubElement(ospf1, "passive")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_interface_vlan_ospf_conf_ospf1_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_vlan_ospf_conf = ET.SubElement(ip, "interface-vlan-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_vlan_ospf_conf, "ospf1")
        priority = ET.SubElement(ospf1, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_pim_intf_vlan_cont_pim_int_cmd_pim_sparse(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        pim_intf_vlan_cont = ET.SubElement(ip, "pim-intf-vlan-cont", xmlns="urn:brocade.com:mgmt:brocade-pim")
        pim_int_cmd = ET.SubElement(pim_intf_vlan_cont, "pim-int-cmd")
        pim_sparse = ET.SubElement(pim_int_cmd, "pim-sparse")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_pim_intf_vlan_cont_pim_int_cmd_pim_dr_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        pim_intf_vlan_cont = ET.SubElement(ip, "pim-intf-vlan-cont", xmlns="urn:brocade.com:mgmt:brocade-pim")
        pim_int_cmd = ET.SubElement(pim_intf_vlan_cont, "pim-int-cmd")
        pim = ET.SubElement(pim_int_cmd, "pim")
        dr_priority = ET.SubElement(pim, "dr-priority")
        dr_priority.text = kwargs.pop('dr_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_pim_intf_vlan_cont_pim_int_cmd_pim_ttl_threshold(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        pim_intf_vlan_cont = ET.SubElement(ip, "pim-intf-vlan-cont", xmlns="urn:brocade.com:mgmt:brocade-pim")
        pim_int_cmd = ET.SubElement(pim_intf_vlan_cont, "pim-int-cmd")
        pim = ET.SubElement(pim_int_cmd, "pim")
        ttl_threshold = ET.SubElement(pim, "ttl-threshold")
        ttl_threshold.text = kwargs.pop('ttl_threshold')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_pim_intf_vlan_cont_pim_int_cmd_multicast_boundary(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        pim_intf_vlan_cont = ET.SubElement(ip, "pim-intf-vlan-cont", xmlns="urn:brocade.com:mgmt:brocade-pim")
        pim_int_cmd = ET.SubElement(pim_intf_vlan_cont, "pim-int-cmd")
        multicast_boundary = ET.SubElement(pim_int_cmd, "multicast-boundary")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_shutdown(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        shutdown = ET.SubElement(ve, "shutdown", xmlns="urn:brocade.com:mgmt:brocade-ip-config")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_config_address_use_link_local_only(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config")
        address = ET.SubElement(ipv6_config, "address")
        use_link_local_only = ET.SubElement(address, "use-link-local-only")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_config_address_link_local_config_link_local_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config")
        address = ET.SubElement(ipv6_config, "address")
        link_local_config = ET.SubElement(address, "link-local-config")
        link_local_address = ET.SubElement(link_local_config, "link-local-address")
        link_local_address.text = kwargs.pop('link_local_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_config_address_link_local_config_link_local(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config")
        address = ET.SubElement(ipv6_config, "address")
        link_local_config = ET.SubElement(address, "link-local-config")
        link_local = ET.SubElement(link_local_config, "link-local")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_config_address_ipv6_address_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config")
        address = ET.SubElement(ipv6_config, "address")
        ipv6_address = ET.SubElement(address, "ipv6-address")
        address = ET.SubElement(ipv6_address, "address")
        address.text = kwargs.pop('address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_config_address_ipv6_address_secondary(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config")
        address = ET.SubElement(ipv6_config, "address")
        ipv6_address = ET.SubElement(address, "ipv6-address")
        address_key = ET.SubElement(ipv6_address, "address")
        address_key.text = kwargs.pop('address')
        secondary = ET.SubElement(ipv6_address, "secondary")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_config_address_ipv6_address_eui_config_eui64(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config")
        address = ET.SubElement(ipv6_config, "address")
        ipv6_address = ET.SubElement(address, "ipv6-address")
        address_key = ET.SubElement(ipv6_address, "address")
        address_key.text = kwargs.pop('address')
        eui_config = ET.SubElement(ipv6_address, "eui-config")
        eui64 = ET.SubElement(eui_config, "eui64")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_config_address_ipv6_address_eui_config_eui_secondary(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config")
        address = ET.SubElement(ipv6_config, "address")
        ipv6_address = ET.SubElement(address, "ipv6-address")
        address_key = ET.SubElement(ipv6_address, "address")
        address_key.text = kwargs.pop('address')
        eui_config = ET.SubElement(ipv6_address, "eui-config")
        eui_secondary = ET.SubElement(eui_config, "eui-secondary")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_config_address_ipv6_address_anycast(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config")
        address = ET.SubElement(ipv6_config, "address")
        ipv6_address = ET.SubElement(address, "ipv6-address")
        address_key = ET.SubElement(ipv6_address, "address")
        address_key.text = kwargs.pop('address')
        anycast = ET.SubElement(ipv6_address, "anycast")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_config_mtu(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config")
        mtu = ET.SubElement(ipv6_config, "mtu")
        mtu.text = kwargs.pop('mtu')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_local_anycast_gateway_local_ipv6_gw_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_local_anycast_gateway = ET.SubElement(ipv6, "ipv6-local-anycast-gateway", xmlns="urn:brocade.com:mgmt:brocade-anycast-gateway")
        local_ipv6_gw_id = ET.SubElement(ipv6_local_anycast_gateway, "local-ipv6-gw-id")
        local_ipv6_gw_id.text = kwargs.pop('local_ipv6_gw_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_local_anycast_gateway_ipv6_track_ipv6_interface_ipv6_interface_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_local_anycast_gateway = ET.SubElement(ipv6, "ipv6-local-anycast-gateway", xmlns="urn:brocade.com:mgmt:brocade-anycast-gateway")
        local_ipv6_gw_id_key = ET.SubElement(ipv6_local_anycast_gateway, "local-ipv6-gw-id")
        local_ipv6_gw_id_key.text = kwargs.pop('local_ipv6_gw_id')
        ipv6_track = ET.SubElement(ipv6_local_anycast_gateway, "ipv6-track")
        ipv6_interface = ET.SubElement(ipv6_track, "ipv6-interface")
        ipv6_interface_name_key = ET.SubElement(ipv6_interface, "ipv6-interface-name")
        ipv6_interface_name_key.text = kwargs.pop('ipv6_interface_name')
        ipv6_interface_type = ET.SubElement(ipv6_interface, "ipv6-interface-type")
        ipv6_interface_type.text = kwargs.pop('ipv6_interface_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_local_anycast_gateway_ipv6_track_ipv6_interface_ipv6_interface_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_local_anycast_gateway = ET.SubElement(ipv6, "ipv6-local-anycast-gateway", xmlns="urn:brocade.com:mgmt:brocade-anycast-gateway")
        local_ipv6_gw_id_key = ET.SubElement(ipv6_local_anycast_gateway, "local-ipv6-gw-id")
        local_ipv6_gw_id_key.text = kwargs.pop('local_ipv6_gw_id')
        ipv6_track = ET.SubElement(ipv6_local_anycast_gateway, "ipv6-track")
        ipv6_interface = ET.SubElement(ipv6_track, "ipv6-interface")
        ipv6_interface_type_key = ET.SubElement(ipv6_interface, "ipv6-interface-type")
        ipv6_interface_type_key.text = kwargs.pop('ipv6_interface_type')
        ipv6_interface_name = ET.SubElement(ipv6_interface, "ipv6-interface-name")
        ipv6_interface_name.text = kwargs.pop('ipv6_interface_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_local_anycast_gateway_ipv6_track_ipv6_interface_ipv6_interface_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_local_anycast_gateway = ET.SubElement(ipv6, "ipv6-local-anycast-gateway", xmlns="urn:brocade.com:mgmt:brocade-anycast-gateway")
        local_ipv6_gw_id_key = ET.SubElement(ipv6_local_anycast_gateway, "local-ipv6-gw-id")
        local_ipv6_gw_id_key.text = kwargs.pop('local_ipv6_gw_id')
        ipv6_track = ET.SubElement(ipv6_local_anycast_gateway, "ipv6-track")
        ipv6_interface = ET.SubElement(ipv6_track, "ipv6-interface")
        ipv6_interface_type_key = ET.SubElement(ipv6_interface, "ipv6-interface-type")
        ipv6_interface_type_key.text = kwargs.pop('ipv6_interface_type')
        ipv6_interface_name_key = ET.SubElement(ipv6_interface, "ipv6-interface-name")
        ipv6_interface_name_key.text = kwargs.pop('ipv6_interface_name')
        ipv6_interface_priority = ET.SubElement(ipv6_interface, "ipv6-interface-priority")
        ipv6_interface_priority.text = kwargs.pop('ipv6_interface_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_local_anycast_gateway_ipv6_track_ipv6_network_ipv6_network_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_local_anycast_gateway = ET.SubElement(ipv6, "ipv6-local-anycast-gateway", xmlns="urn:brocade.com:mgmt:brocade-anycast-gateway")
        local_ipv6_gw_id_key = ET.SubElement(ipv6_local_anycast_gateway, "local-ipv6-gw-id")
        local_ipv6_gw_id_key.text = kwargs.pop('local_ipv6_gw_id')
        ipv6_track = ET.SubElement(ipv6_local_anycast_gateway, "ipv6-track")
        ipv6_network = ET.SubElement(ipv6_track, "ipv6-network")
        ipv6_network_address = ET.SubElement(ipv6_network, "ipv6-network-address")
        ipv6_network_address.text = kwargs.pop('ipv6_network_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_local_anycast_gateway_ipv6_track_ipv6_network_ipv6_network_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_local_anycast_gateway = ET.SubElement(ipv6, "ipv6-local-anycast-gateway", xmlns="urn:brocade.com:mgmt:brocade-anycast-gateway")
        local_ipv6_gw_id_key = ET.SubElement(ipv6_local_anycast_gateway, "local-ipv6-gw-id")
        local_ipv6_gw_id_key.text = kwargs.pop('local_ipv6_gw_id')
        ipv6_track = ET.SubElement(ipv6_local_anycast_gateway, "ipv6-track")
        ipv6_network = ET.SubElement(ipv6_track, "ipv6-network")
        ipv6_network_address_key = ET.SubElement(ipv6_network, "ipv6-network-address")
        ipv6_network_address_key.text = kwargs.pop('ipv6_network_address')
        ipv6_network_priority = ET.SubElement(ipv6_network, "ipv6-network-priority")
        ipv6_network_priority.text = kwargs.pop('ipv6_network_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_local_anycast_gateway_ipv6_track_ipv6_next_hop_ipv6_next_hop_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_local_anycast_gateway = ET.SubElement(ipv6, "ipv6-local-anycast-gateway", xmlns="urn:brocade.com:mgmt:brocade-anycast-gateway")
        local_ipv6_gw_id_key = ET.SubElement(ipv6_local_anycast_gateway, "local-ipv6-gw-id")
        local_ipv6_gw_id_key.text = kwargs.pop('local_ipv6_gw_id')
        ipv6_track = ET.SubElement(ipv6_local_anycast_gateway, "ipv6-track")
        ipv6_next_hop = ET.SubElement(ipv6_track, "ipv6-next-hop")
        ipv6_next_hop_address = ET.SubElement(ipv6_next_hop, "ipv6-next-hop-address")
        ipv6_next_hop_address.text = kwargs.pop('ipv6_next_hop_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_local_anycast_gateway_ipv6_track_ipv6_next_hop_ipv6_next_hop_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_local_anycast_gateway = ET.SubElement(ipv6, "ipv6-local-anycast-gateway", xmlns="urn:brocade.com:mgmt:brocade-anycast-gateway")
        local_ipv6_gw_id_key = ET.SubElement(ipv6_local_anycast_gateway, "local-ipv6-gw-id")
        local_ipv6_gw_id_key.text = kwargs.pop('local_ipv6_gw_id')
        ipv6_track = ET.SubElement(ipv6_local_anycast_gateway, "ipv6-track")
        ipv6_next_hop = ET.SubElement(ipv6_track, "ipv6-next-hop")
        ipv6_next_hop_address_key = ET.SubElement(ipv6_next_hop, "ipv6-next-hop-address")
        ipv6_next_hop_address_key.text = kwargs.pop('ipv6_next_hop_address')
        ipv6_next_hop_priority = ET.SubElement(ipv6_next_hop, "ipv6-next-hop-priority")
        ipv6_next_hop_priority.text = kwargs.pop('ipv6_next_hop_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_local_anycast_gateway_enable_local(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_local_anycast_gateway = ET.SubElement(ipv6, "ipv6-local-anycast-gateway", xmlns="urn:brocade.com:mgmt:brocade-anycast-gateway")
        local_ipv6_gw_id_key = ET.SubElement(ipv6_local_anycast_gateway, "local-ipv6-gw-id")
        local_ipv6_gw_id_key.text = kwargs.pop('local_ipv6_gw_id')
        enable_local = ET.SubElement(ipv6_local_anycast_gateway, "enable_local")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_local_anycast_gateway_disable_local(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_local_anycast_gateway = ET.SubElement(ipv6, "ipv6-local-anycast-gateway", xmlns="urn:brocade.com:mgmt:brocade-anycast-gateway")
        local_ipv6_gw_id_key = ET.SubElement(ipv6_local_anycast_gateway, "local-ipv6-gw-id")
        local_ipv6_gw_id_key.text = kwargs.pop('local_ipv6_gw_id')
        disable_local = ET.SubElement(ipv6_local_anycast_gateway, "disable_local")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_local_anycast_gateway_load_balancing_basic(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_local_anycast_gateway = ET.SubElement(ipv6, "ipv6-local-anycast-gateway", xmlns="urn:brocade.com:mgmt:brocade-anycast-gateway")
        local_ipv6_gw_id_key = ET.SubElement(ipv6_local_anycast_gateway, "local-ipv6-gw-id")
        local_ipv6_gw_id_key.text = kwargs.pop('local_ipv6_gw_id')
        load_balancing = ET.SubElement(ipv6_local_anycast_gateway, "load-balancing")
        basic = ET.SubElement(load_balancing, "basic")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_local_anycast_gateway_load_balancing_threshold_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_local_anycast_gateway = ET.SubElement(ipv6, "ipv6-local-anycast-gateway", xmlns="urn:brocade.com:mgmt:brocade-anycast-gateway")
        local_ipv6_gw_id_key = ET.SubElement(ipv6_local_anycast_gateway, "local-ipv6-gw-id")
        local_ipv6_gw_id_key.text = kwargs.pop('local_ipv6_gw_id')
        load_balancing = ET.SubElement(ipv6_local_anycast_gateway, "load-balancing")
        threshold_priority = ET.SubElement(load_balancing, "threshold-priority")
        threshold_priority.text = kwargs.pop('threshold_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_local_anycast_gateway_install_default_route(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_local_anycast_gateway = ET.SubElement(ipv6, "ipv6-local-anycast-gateway", xmlns="urn:brocade.com:mgmt:brocade-anycast-gateway")
        local_ipv6_gw_id_key = ET.SubElement(ipv6_local_anycast_gateway, "local-ipv6-gw-id")
        local_ipv6_gw_id_key.text = kwargs.pop('local_ipv6_gw_id')
        install_default_route = ET.SubElement(ipv6_local_anycast_gateway, "install-default-route")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_interface_ve_dhcp_conf_dhcp_relay_servers_relay_ip_addr(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ve_dhcp_conf = ET.SubElement(ipv6, "interface-ve-dhcp-conf", xmlns="urn:brocade.com:mgmt:brocade-dhcpv6")
        dhcp = ET.SubElement(interface_ve_dhcp_conf, "dhcp")
        relay = ET.SubElement(dhcp, "relay")
        servers = ET.SubElement(relay, "servers")
        relay_ip_addr = ET.SubElement(servers, "relay-ip-addr")
        relay_ip_addr.text = kwargs.pop('relay_ip_addr')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_interface_ve_dhcp_conf_dhcp_relay_servers_server_vrf_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ve_dhcp_conf = ET.SubElement(ipv6, "interface-ve-dhcp-conf", xmlns="urn:brocade.com:mgmt:brocade-dhcpv6")
        dhcp = ET.SubElement(interface_ve_dhcp_conf, "dhcp")
        relay = ET.SubElement(dhcp, "relay")
        servers = ET.SubElement(relay, "servers")
        relay_ip_addr_key = ET.SubElement(servers, "relay-ip-addr")
        relay_ip_addr_key.text = kwargs.pop('relay_ip_addr')
        server_vrf_name = ET.SubElement(servers, "server-vrf-name")
        server_vrf_name.text = kwargs.pop('server_vrf_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_interface_ve_dhcp_conf_dhcp_relay_servers_interface_interface_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ve_dhcp_conf = ET.SubElement(ipv6, "interface-ve-dhcp-conf", xmlns="urn:brocade.com:mgmt:brocade-dhcpv6")
        dhcp = ET.SubElement(interface_ve_dhcp_conf, "dhcp")
        relay = ET.SubElement(dhcp, "relay")
        servers = ET.SubElement(relay, "servers")
        relay_ip_addr_key = ET.SubElement(servers, "relay-ip-addr")
        relay_ip_addr_key.text = kwargs.pop('relay_ip_addr')
        interface = ET.SubElement(servers, "interface")
        interface_type = ET.SubElement(interface, "interface-type")
        interface_type.text = kwargs.pop('interface_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_interface_ve_dhcp_conf_dhcp_relay_servers_interface_interface_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ve_dhcp_conf = ET.SubElement(ipv6, "interface-ve-dhcp-conf", xmlns="urn:brocade.com:mgmt:brocade-dhcpv6")
        dhcp = ET.SubElement(interface_ve_dhcp_conf, "dhcp")
        relay = ET.SubElement(dhcp, "relay")
        servers = ET.SubElement(relay, "servers")
        relay_ip_addr_key = ET.SubElement(servers, "relay-ip-addr")
        relay_ip_addr_key.text = kwargs.pop('relay_ip_addr')
        interface = ET.SubElement(servers, "interface")
        interface_name = ET.SubElement(interface, "interface-name")
        interface_name.text = kwargs.pop('interface_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_icmpv6_echo_reply(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        icmpv6 = ET.SubElement(ipv6, "icmpv6", xmlns="urn:brocade.com:mgmt:brocade-icmp")
        echo_reply = ET.SubElement(icmpv6, "echo-reply")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_icmpv6_rate_limiting(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        icmpv6 = ET.SubElement(ipv6, "icmpv6", xmlns="urn:brocade.com:mgmt:brocade-icmp")
        rate_limiting = ET.SubElement(icmpv6, "rate-limiting")
        rate_limiting.text = kwargs.pop('rate_limiting')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_icmpv6_unreachable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        icmpv6 = ET.SubElement(ipv6, "icmpv6", xmlns="urn:brocade.com:mgmt:brocade-icmp")
        unreachable = ET.SubElement(icmpv6, "unreachable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_icmpv6_redirect(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        icmpv6 = ET.SubElement(ipv6, "icmpv6", xmlns="urn:brocade.com:mgmt:brocade-icmp")
        redirect = ET.SubElement(icmpv6, "redirect")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_policy_route_map_ipv6_route_map_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        policy = ET.SubElement(ipv6, "policy", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        route_map = ET.SubElement(policy, "route-map")
        ipv6_route_map_name = ET.SubElement(route_map, "ipv6-route-map-name")
        ipv6_route_map_name.text = kwargs.pop('ipv6_route_map_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_nd_ra_ipv6_intf_cmds_vrrp_suppress_interface_ra(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        vrrp_suppress_interface_ra = ET.SubElement(ipv6_intf_cmds, "vrrp-suppress-interface-ra")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_managed_config_flag(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        managed_config_flag = ET.SubElement(nd, "managed-config-flag")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_other_config_flag(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        other_config_flag = ET.SubElement(nd, "other-config-flag")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_broadcast_mac_trap(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        broadcast_mac_trap = ET.SubElement(nd, "broadcast-mac-trap")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_ra_lifetime(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        ra_lifetime = ET.SubElement(nd, "ra-lifetime")
        ra_lifetime.text = kwargs.pop('ra_lifetime')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_reachable_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        reachable_time = ET.SubElement(nd, "reachable-time")
        reachable_time.text = kwargs.pop('reachable_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_mtu(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        mtu = ET.SubElement(nd, "mtu")
        mtu.text = kwargs.pop('mtu')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_retrans_timer(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        retrans_timer = ET.SubElement(nd, "retrans-timer")
        retrans_timer.text = kwargs.pop('retrans_timer')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_hoplimit(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        hoplimit = ET.SubElement(nd, "hoplimit")
        hoplimit.text = kwargs.pop('hoplimit')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_ns_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        ns_interval = ET.SubElement(nd, "ns-interval")
        ns_interval.text = kwargs.pop('ns_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_proxy(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        proxy = ET.SubElement(nd, "proxy")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_suppress_ra_suppress_ra_flag(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        suppress_ra = ET.SubElement(nd, "suppress-ra")
        suppress_ra_flag = ET.SubElement(suppress_ra, "suppress-ra-flag")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_suppress_ra_suppress_ra_mtu(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        suppress_ra = ET.SubElement(nd, "suppress-ra")
        suppress_ra_mtu = ET.SubElement(suppress_ra, "suppress-ra-mtu")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_suppress_ra_suppress_ra_all(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        suppress_ra = ET.SubElement(nd, "suppress-ra")
        suppress_ra_all = ET.SubElement(suppress_ra, "suppress-ra-all")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_ra_interval_max_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        ra_interval = ET.SubElement(nd, "ra-interval")
        max_interval = ET.SubElement(ra_interval, "max-interval")
        max_interval.text = kwargs.pop('max_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_ra_interval_min(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        ra_interval = ET.SubElement(nd, "ra-interval")
        min = ET.SubElement(ra_interval, "min")
        min.text = kwargs.pop('min')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_dad_attempts(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        dad = ET.SubElement(nd, "dad")
        attempts = ET.SubElement(dad, "attempts")
        attempts.text = kwargs.pop('attempts')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_dad_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        dad = ET.SubElement(nd, "dad")
        time = ET.SubElement(dad, "time")
        time.text = kwargs.pop('time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_nud_retry_base(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        nud = ET.SubElement(nd, "nud")
        retry = ET.SubElement(nud, "retry")
        base = ET.SubElement(retry, "base")
        base.text = kwargs.pop('base')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_nud_retry_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        nud = ET.SubElement(nd, "nud")
        retry = ET.SubElement(nud, "retry")
        interval = ET.SubElement(retry, "interval")
        interval.text = kwargs.pop('interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_nud_retry_max_attempts(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        nud = ET.SubElement(nd, "nud")
        retry = ET.SubElement(nud, "retry")
        max_attempts = ET.SubElement(retry, "max-attempts")
        max_attempts.text = kwargs.pop('max_attempts')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_cache_expire(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        cache = ET.SubElement(nd, "cache")
        expire = ET.SubElement(cache, "expire")
        expire.text = kwargs.pop('expire')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_prefix_prefix_ipv6_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        prefix = ET.SubElement(nd, "prefix")
        prefix_ipv6_address = ET.SubElement(prefix, "prefix-ipv6-address")
        prefix_ipv6_address.text = kwargs.pop('prefix_ipv6_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_prefix_lifetime_ch_valid_type_ca_no_advertise_no_advertise(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        prefix = ET.SubElement(nd, "prefix")
        prefix_ipv6_address_key = ET.SubElement(prefix, "prefix-ipv6-address")
        prefix_ipv6_address_key.text = kwargs.pop('prefix_ipv6_address')
        lifetime = ET.SubElement(prefix, "lifetime")
        ch_valid_type = ET.SubElement(lifetime, "ch-valid-type")
        ca_no_advertise = ET.SubElement(ch_valid_type, "ca-no-advertise")
        no_advertise = ET.SubElement(ca_no_advertise, "no-advertise")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_prefix_lifetime_ch_valid_type_ca_valid_lifetime_valid_lifetime(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        prefix = ET.SubElement(nd, "prefix")
        prefix_ipv6_address_key = ET.SubElement(prefix, "prefix-ipv6-address")
        prefix_ipv6_address_key.text = kwargs.pop('prefix_ipv6_address')
        lifetime = ET.SubElement(prefix, "lifetime")
        ch_valid_type = ET.SubElement(lifetime, "ch-valid-type")
        ca_valid_lifetime = ET.SubElement(ch_valid_type, "ca-valid-lifetime")
        valid_lifetime = ET.SubElement(ca_valid_lifetime, "valid-lifetime")
        valid_lifetime.text = kwargs.pop('valid_lifetime')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_prefix_lifetime_ch_valid_type_ca_valid_infinite_valid_infinite(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        prefix = ET.SubElement(nd, "prefix")
        prefix_ipv6_address_key = ET.SubElement(prefix, "prefix-ipv6-address")
        prefix_ipv6_address_key.text = kwargs.pop('prefix_ipv6_address')
        lifetime = ET.SubElement(prefix, "lifetime")
        ch_valid_type = ET.SubElement(lifetime, "ch-valid-type")
        ca_valid_infinite = ET.SubElement(ch_valid_type, "ca-valid-infinite")
        valid_infinite = ET.SubElement(ca_valid_infinite, "valid-infinite")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_prefix_lifetime_preferred_ch_preferred_type_ca_preferred_lifetime_preferred_lifetime(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        prefix = ET.SubElement(nd, "prefix")
        prefix_ipv6_address_key = ET.SubElement(prefix, "prefix-ipv6-address")
        prefix_ipv6_address_key.text = kwargs.pop('prefix_ipv6_address')
        lifetime = ET.SubElement(prefix, "lifetime")
        preferred = ET.SubElement(lifetime, "preferred")
        ch_preferred_type = ET.SubElement(preferred, "ch-preferred-type")
        ca_preferred_lifetime = ET.SubElement(ch_preferred_type, "ca-preferred-lifetime")
        preferred_lifetime = ET.SubElement(ca_preferred_lifetime, "preferred-lifetime")
        preferred_lifetime.text = kwargs.pop('preferred_lifetime')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_prefix_lifetime_preferred_ch_preferred_type_ca_preferred_infinite_preferred_infinite(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        prefix = ET.SubElement(nd, "prefix")
        prefix_ipv6_address_key = ET.SubElement(prefix, "prefix-ipv6-address")
        prefix_ipv6_address_key.text = kwargs.pop('prefix_ipv6_address')
        lifetime = ET.SubElement(prefix, "lifetime")
        preferred = ET.SubElement(lifetime, "preferred")
        ch_preferred_type = ET.SubElement(preferred, "ch-preferred-type")
        ca_preferred_infinite = ET.SubElement(ch_preferred_type, "ca-preferred-infinite")
        preferred_infinite = ET.SubElement(ca_preferred_infinite, "preferred-infinite")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_prefix_lifetime_preferred_prefix_flags_no_autoconfig(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        prefix = ET.SubElement(nd, "prefix")
        prefix_ipv6_address_key = ET.SubElement(prefix, "prefix-ipv6-address")
        prefix_ipv6_address_key.text = kwargs.pop('prefix_ipv6_address')
        lifetime = ET.SubElement(prefix, "lifetime")
        preferred = ET.SubElement(lifetime, "preferred")
        prefix_flags = ET.SubElement(preferred, "prefix-flags")
        no_autoconfig = ET.SubElement(prefix_flags, "no-autoconfig")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_prefix_lifetime_preferred_prefix_flags_no_onlink(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        prefix = ET.SubElement(nd, "prefix")
        prefix_ipv6_address_key = ET.SubElement(prefix, "prefix-ipv6-address")
        prefix_ipv6_address_key.text = kwargs.pop('prefix_ipv6_address')
        lifetime = ET.SubElement(prefix, "lifetime")
        preferred = ET.SubElement(lifetime, "preferred")
        prefix_flags = ET.SubElement(preferred, "prefix-flags")
        no_onlink = ET.SubElement(prefix_flags, "no-onlink")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_prefix_lifetime_preferred_prefix_flags_off_link(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        prefix = ET.SubElement(nd, "prefix")
        prefix_ipv6_address_key = ET.SubElement(prefix, "prefix-ipv6-address")
        prefix_ipv6_address_key.text = kwargs.pop('prefix_ipv6_address')
        lifetime = ET.SubElement(prefix, "lifetime")
        preferred = ET.SubElement(lifetime, "preferred")
        prefix_flags = ET.SubElement(preferred, "prefix-flags")
        off_link = ET.SubElement(prefix_flags, "off-link")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_nd_ra_ipv6_intf_cmds_neighbor_ipv6_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        neighbor = ET.SubElement(ipv6_intf_cmds, "neighbor")
        ipv6_address = ET.SubElement(neighbor, "ipv6-address")
        ipv6_address.text = kwargs.pop('ipv6_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_nd_ra_ipv6_intf_cmds_neighbor_hardware_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        neighbor = ET.SubElement(ipv6_intf_cmds, "neighbor")
        ipv6_address_key = ET.SubElement(neighbor, "ipv6-address")
        ipv6_address_key.text = kwargs.pop('ipv6_address')
        hardware_address = ET.SubElement(neighbor, "hardware-address")
        hardware_address.text = kwargs.pop('hardware_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_ve_intf_cmds_hop_by_hop_trap(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_ve_intf_cmds = ET.SubElement(ipv6, "ipv6-ve-intf-cmds", xmlns="urn:brocade.com:mgmt:brocade-mld-snooping")
        hop_by_hop_trap = ET.SubElement(ipv6_ve_intf_cmds, "hop-by-hop-trap")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_interface_ospfv3_conf_interface_area(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        interface_area = ET.SubElement(interface_ospfv3_conf, "interface-area")
        interface_area.text = kwargs.pop('interface_area')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_interface_ospfv3_conf_active(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        active = ET.SubElement(interface_ospfv3_conf, "active")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_interface_ospfv3_conf_passive(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        passive = ET.SubElement(interface_ospfv3_conf, "passive")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_interface_ospfv3_conf_bfd(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        bfd = ET.SubElement(interface_ospfv3_conf, "bfd")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_interface_ospfv3_conf_cost(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        cost = ET.SubElement(interface_ospfv3_conf, "cost")
        cost.text = kwargs.pop('cost')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_interface_ospfv3_conf_instance(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        instance = ET.SubElement(interface_ospfv3_conf, "instance")
        instance.text = kwargs.pop('instance')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_interface_ospfv3_conf_mtu_ignore(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        mtu_ignore = ET.SubElement(interface_ospfv3_conf, "mtu-ignore")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_interface_ospfv3_conf_network(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        network = ET.SubElement(interface_ospfv3_conf, "network")
        network.text = kwargs.pop('network')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_interface_ospfv3_conf_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        priority = ET.SubElement(interface_ospfv3_conf, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_interface_ospfv3_conf_suppress_linklsa(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        suppress_linklsa = ET.SubElement(interface_ospfv3_conf, "suppress-linklsa")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_spi(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        spi = ET.SubElement(ipsec_auth_key_config, "spi")
        spi.text = kwargs.pop('spi')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_ah_algorithm_ah(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_ah_algorithm = ET.SubElement(ch_algorithm, "ca-ah-algorithm")
        ah = ET.SubElement(ca_ah_algorithm, "ah")
        ah.text = kwargs.pop('ah')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_ah_algorithm_ah_no_encrypt(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_ah_algorithm = ET.SubElement(ch_algorithm, "ca-ah-algorithm")
        ah_no_encrypt = ET.SubElement(ca_ah_algorithm, "ah-no-encrypt")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_ah_algorithm_ah_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_ah_algorithm = ET.SubElement(ch_algorithm, "ca-ah-algorithm")
        ah_key = ET.SubElement(ca_ah_algorithm, "ah-key")
        ah_key.text = kwargs.pop('ah_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp = ET.SubElement(ca_esp_algorithm, "esp")
        esp.text = kwargs.pop('esp')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp_no_encrypt(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp_no_encrypt = ET.SubElement(ca_esp_algorithm, "esp-no-encrypt")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp_key = ET.SubElement(ca_esp_algorithm, "esp-key")
        esp_key.text = kwargs.pop('esp_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp_auth(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp_auth = ET.SubElement(ca_esp_algorithm, "esp-auth")
        esp_auth.text = kwargs.pop('esp_auth')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp_auth_no_encrypt(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp_auth_no_encrypt = ET.SubElement(ca_esp_algorithm, "esp-auth-no-encrypt")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp_auth_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp_auth_key = ET.SubElement(ca_esp_algorithm, "esp-auth-key")
        esp_auth_key.text = kwargs.pop('esp_auth_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_interface_ospfv3_conf_authentication_ipsec_ipsec_authentication_disable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec = ET.SubElement(authentication, "ipsec")
        ipsec_authentication_disable = ET.SubElement(ipsec, "ipsec-authentication-disable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_interface_ospfv3_conf_authentication_ipsec_ifc_key_add_remove_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec = ET.SubElement(authentication, "ipsec")
        ifc_key_add_remove_interval = ET.SubElement(ipsec, "ifc-key-add-remove-interval")
        ifc_key_add_remove_interval.text = kwargs.pop('ifc_key_add_remove_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_interface_ospfv3_conf_link_interval_properties_hello_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        link_interval_properties = ET.SubElement(interface_ospfv3_conf, "link-interval-properties")
        hello_interval = ET.SubElement(link_interval_properties, "hello-interval")
        hello_interval.text = kwargs.pop('hello_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_interface_ospfv3_conf_link_interval_properties_dead_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        link_interval_properties = ET.SubElement(interface_ospfv3_conf, "link-interval-properties")
        dead_interval = ET.SubElement(link_interval_properties, "dead-interval")
        dead_interval.text = kwargs.pop('dead_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_interface_ospfv3_conf_link_interval_properties_hello_jitter(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        link_interval_properties = ET.SubElement(interface_ospfv3_conf, "link-interval-properties")
        hello_jitter = ET.SubElement(link_interval_properties, "hello-jitter")
        hello_jitter.text = kwargs.pop('hello_jitter')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_interface_ospfv3_conf_link_interval_properties_retransmit_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        link_interval_properties = ET.SubElement(interface_ospfv3_conf, "link-interval-properties")
        retransmit_interval = ET.SubElement(link_interval_properties, "retransmit-interval")
        retransmit_interval.text = kwargs.pop('retransmit_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_interface_ospfv3_conf_link_interval_properties_transmit_delay(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        link_interval_properties = ET.SubElement(interface_ospfv3_conf, "link-interval-properties")
        transmit_delay = ET.SubElement(link_interval_properties, "transmit-delay")
        transmit_delay.text = kwargs.pop('transmit_delay')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_vrrpv3_vrid(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        vrrpv3 = ET.SubElement(ipv6, "vrrpv3", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid = ET.SubElement(vrrpv3, "vrid")
        vrid.text = kwargs.pop('vrid')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_vrrpv3_use_v2_checksum(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        vrrpv3 = ET.SubElement(ipv6, "vrrpv3", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        use_v2_checksum = ET.SubElement(vrrpv3, "use-v2-checksum")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_vrrpv3_virtual_ip_virtual_ipaddr(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        vrrpv3 = ET.SubElement(ipv6, "vrrpv3", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        virtual_ip = ET.SubElement(vrrpv3, "virtual-ip")
        virtual_ipaddr = ET.SubElement(virtual_ip, "virtual-ipaddr")
        virtual_ipaddr.text = kwargs.pop('virtual_ipaddr')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_vrrpv3_track_interface_interface_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        vrrpv3 = ET.SubElement(ipv6, "vrrpv3", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        track = ET.SubElement(vrrpv3, "track")
        interface = ET.SubElement(track, "interface")
        interface_name_key = ET.SubElement(interface, "interface-name")
        interface_name_key.text = kwargs.pop('interface_name')
        interface_type = ET.SubElement(interface, "interface-type")
        interface_type.text = kwargs.pop('interface_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_vrrpv3_track_interface_interface_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        vrrpv3 = ET.SubElement(ipv6, "vrrpv3", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        track = ET.SubElement(vrrpv3, "track")
        interface = ET.SubElement(track, "interface")
        interface_type_key = ET.SubElement(interface, "interface-type")
        interface_type_key.text = kwargs.pop('interface_type')
        interface_name = ET.SubElement(interface, "interface-name")
        interface_name.text = kwargs.pop('interface_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_vrrpv3_track_interface_track_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        vrrpv3 = ET.SubElement(ipv6, "vrrpv3", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        track = ET.SubElement(vrrpv3, "track")
        interface = ET.SubElement(track, "interface")
        interface_type_key = ET.SubElement(interface, "interface-type")
        interface_type_key.text = kwargs.pop('interface_type')
        interface_name_key = ET.SubElement(interface, "interface-name")
        interface_name_key.text = kwargs.pop('interface_name')
        track_priority = ET.SubElement(interface, "track-priority")
        track_priority.text = kwargs.pop('track_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_vrrpv3_advertisement_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        vrrpv3 = ET.SubElement(ipv6, "vrrpv3", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        advertisement_interval = ET.SubElement(vrrpv3, "advertisement-interval")
        advertisement_interval.text = kwargs.pop('advertisement_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_vrrpv3_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        vrrpv3 = ET.SubElement(ipv6, "vrrpv3", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        enable = ET.SubElement(vrrpv3, "enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_vrrpv3_hold_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        vrrpv3 = ET.SubElement(ipv6, "vrrpv3", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        hold_time = ET.SubElement(vrrpv3, "hold-time")
        hold_time.text = kwargs.pop('hold_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_vrrpv3_preempt_mode(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        vrrpv3 = ET.SubElement(ipv6, "vrrpv3", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        preempt_mode = ET.SubElement(vrrpv3, "preempt-mode")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_vrrpv3_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        vrrpv3 = ET.SubElement(ipv6, "vrrpv3", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        priority = ET.SubElement(vrrpv3, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_vrrpv3_description(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        vrrpv3 = ET.SubElement(ipv6, "vrrpv3", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        description = ET.SubElement(vrrpv3, "description")
        description.text = kwargs.pop('description')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_vrrpv3e_vrid(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        vrrpv3e = ET.SubElement(ipv6, "vrrpv3e", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid = ET.SubElement(vrrpv3e, "vrid")
        vrid.text = kwargs.pop('vrid')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_vrrpv3e_virtual_mac_vmac(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        vrrpv3e = ET.SubElement(ipv6, "vrrpv3e", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        virtual_mac = ET.SubElement(vrrpv3e, "virtual-mac")
        vmac = ET.SubElement(virtual_mac, "vmac")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_vrrpv3e_virtual_ip_virtual_ipaddr(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        vrrpv3e = ET.SubElement(ipv6, "vrrpv3e", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        virtual_ip = ET.SubElement(vrrpv3e, "virtual-ip")
        virtual_ipaddr = ET.SubElement(virtual_ip, "virtual-ipaddr")
        virtual_ipaddr.text = kwargs.pop('virtual_ipaddr')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_vrrpv3e_track_interface_interface_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        vrrpv3e = ET.SubElement(ipv6, "vrrpv3e", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        track = ET.SubElement(vrrpv3e, "track")
        interface = ET.SubElement(track, "interface")
        interface_name_key = ET.SubElement(interface, "interface-name")
        interface_name_key.text = kwargs.pop('interface_name')
        interface_type = ET.SubElement(interface, "interface-type")
        interface_type.text = kwargs.pop('interface_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_vrrpv3e_track_interface_interface_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        vrrpv3e = ET.SubElement(ipv6, "vrrpv3e", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        track = ET.SubElement(vrrpv3e, "track")
        interface = ET.SubElement(track, "interface")
        interface_type_key = ET.SubElement(interface, "interface-type")
        interface_type_key.text = kwargs.pop('interface_type')
        interface_name = ET.SubElement(interface, "interface-name")
        interface_name.text = kwargs.pop('interface_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_vrrpv3e_track_interface_track_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        vrrpv3e = ET.SubElement(ipv6, "vrrpv3e", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        track = ET.SubElement(vrrpv3e, "track")
        interface = ET.SubElement(track, "interface")
        interface_type_key = ET.SubElement(interface, "interface-type")
        interface_type_key.text = kwargs.pop('interface_type')
        interface_name_key = ET.SubElement(interface, "interface-name")
        interface_name_key.text = kwargs.pop('interface_name')
        track_priority = ET.SubElement(interface, "track-priority")
        track_priority.text = kwargs.pop('track_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_vrrpv3e_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        vrrpv3e = ET.SubElement(ipv6, "vrrpv3e", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        enable = ET.SubElement(vrrpv3e, "enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_vrrpv3e_hold_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        vrrpv3e = ET.SubElement(ipv6, "vrrpv3e", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        hold_time = ET.SubElement(vrrpv3e, "hold-time")
        hold_time.text = kwargs.pop('hold_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_vrrpv3e_preempt_mode(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        vrrpv3e = ET.SubElement(ipv6, "vrrpv3e", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        preempt_mode = ET.SubElement(vrrpv3e, "preempt-mode")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_vrrpv3e_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        vrrpv3e = ET.SubElement(ipv6, "vrrpv3e", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        priority = ET.SubElement(vrrpv3e, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_vrrpv3e_description(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        vrrpv3e = ET.SubElement(ipv6, "vrrpv3e", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        description = ET.SubElement(vrrpv3e, "description")
        description.text = kwargs.pop('description')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_vrrpv3e_advertise_backup(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        vrrpv3e = ET.SubElement(ipv6, "vrrpv3e", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        advertise_backup = ET.SubElement(vrrpv3e, "advertise-backup")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_vrrpv3e_nd_advertisement_timer(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        vrrpv3e = ET.SubElement(ipv6, "vrrpv3e", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        nd_advertisement_timer = ET.SubElement(vrrpv3e, "nd-advertisement-timer")
        nd_advertisement_timer.text = kwargs.pop('nd_advertisement_timer')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_vrrpv3e_advertisement_interval_scale(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        vrrpv3e = ET.SubElement(ipv6, "vrrpv3e", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        advertisement_interval_scale = ET.SubElement(vrrpv3e, "advertisement-interval-scale")
        advertisement_interval_scale.text = kwargs.pop('advertisement_interval_scale')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_vrrpv3e_backup_advertisement_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        vrrpv3e = ET.SubElement(ipv6, "vrrpv3e", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        backup_advertisement_interval = ET.SubElement(vrrpv3e, "backup-advertisement-interval")
        backup_advertisement_interval.text = kwargs.pop('backup_advertisement_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_vrrpv3e_vrrpe_advertisement_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        vrrpv3e = ET.SubElement(ipv6, "vrrpv3e", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        vrrpe_advertisement_interval = ET.SubElement(vrrpv3e, "vrrpe-advertisement-interval")
        vrrpe_advertisement_interval.text = kwargs.pop('vrrpe_advertisement_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_vrrpv3e_short_path_forwarding_basic(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        vrrpv3e = ET.SubElement(ipv6, "vrrpv3e", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        short_path_forwarding = ET.SubElement(vrrpv3e, "short-path-forwarding")
        basic = ET.SubElement(short_path_forwarding, "basic")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_vrrpv3e_short_path_forwarding_revert_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        vrrpv3e = ET.SubElement(ipv6, "vrrpv3e", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        short_path_forwarding = ET.SubElement(vrrpv3e, "short-path-forwarding")
        revert_priority = ET.SubElement(short_path_forwarding, "revert-priority")
        revert_priority.text = kwargs.pop('revert_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_acl_interface_ip_access_group_ip_access_list(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip_acl_interface = ET.SubElement(ve, "ip-acl-interface", xmlns="urn:brocade.com:mgmt:brocade-ip-access-list")
        ip = ET.SubElement(ip_acl_interface, "ip")
        access_group = ET.SubElement(ip, "access-group")
        ip_direction_key = ET.SubElement(access_group, "ip-direction")
        ip_direction_key.text = kwargs.pop('ip_direction')
        ip_access_list = ET.SubElement(access_group, "ip-access-list")
        ip_access_list.text = kwargs.pop('ip_access_list')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_acl_interface_ip_access_group_ip_direction(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip_acl_interface = ET.SubElement(ve, "ip-acl-interface", xmlns="urn:brocade.com:mgmt:brocade-ip-access-list")
        ip = ET.SubElement(ip_acl_interface, "ip")
        access_group = ET.SubElement(ip, "access-group")
        ip_access_list_key = ET.SubElement(access_group, "ip-access-list")
        ip_access_list_key.text = kwargs.pop('ip_access_list')
        ip_direction = ET.SubElement(access_group, "ip-direction")
        ip_direction.text = kwargs.pop('ip_direction')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_acl_interface_ipv6_access_group_ipv6_access_list(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip_acl_interface = ET.SubElement(ve, "ip-acl-interface", xmlns="urn:brocade.com:mgmt:brocade-ipv6-access-list")
        ipv6 = ET.SubElement(ip_acl_interface, "ipv6")
        access_group = ET.SubElement(ipv6, "access-group")
        ip_direction_key = ET.SubElement(access_group, "ip-direction")
        ip_direction_key.text = kwargs.pop('ip_direction')
        ipv6_access_list = ET.SubElement(access_group, "ipv6-access-list")
        ipv6_access_list.text = kwargs.pop('ipv6_access_list')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_acl_interface_ipv6_access_group_ip_direction(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip_acl_interface = ET.SubElement(ve, "ip-acl-interface", xmlns="urn:brocade.com:mgmt:brocade-ipv6-access-list")
        ipv6 = ET.SubElement(ip_acl_interface, "ipv6")
        access_group = ET.SubElement(ipv6, "access-group")
        ipv6_access_list_key = ET.SubElement(access_group, "ipv6-access-list")
        ipv6_access_list_key.text = kwargs.pop('ipv6_access_list')
        ip_direction = ET.SubElement(access_group, "ip-direction")
        ip_direction.text = kwargs.pop('ip_direction')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_pbr_interface_ip_policy_route_map_route_map_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip_pbr_interface = ET.SubElement(ve, "ip-pbr-interface", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        ip = ET.SubElement(ip_pbr_interface, "ip")
        policy = ET.SubElement(ip, "policy")
        route_map = ET.SubElement(policy, "route-map")
        route_map_name = ET.SubElement(route_map, "route-map-name")
        route_map_name.text = kwargs.pop('route_map_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id = ET.SubElement(loopback, "id")
        id.text = kwargs.pop('id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_vrf_forwarding(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        vrf = ET.SubElement(loopback, "vrf")
        forwarding = ET.SubElement(vrf, "forwarding")
        forwarding.text = kwargs.pop('forwarding')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_intf_loopback_shutdown(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        intf_loopback = ET.SubElement(loopback, "intf-loopback")
        shutdown = ET.SubElement(intf_loopback, "shutdown")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ip_ip_config_address_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ip = ET.SubElement(loopback, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        ip_config = ET.SubElement(ip, "ip-config")
        address = ET.SubElement(ip_config, "address")
        address = ET.SubElement(address, "address")
        address.text = kwargs.pop('address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ip_interface_loopback_ospf_conf_ospf1_area(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ip = ET.SubElement(loopback, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_loopback_ospf_conf = ET.SubElement(ip, "interface-loopback-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_loopback_ospf_conf, "ospf1")
        area = ET.SubElement(ospf1, "area")
        area.text = kwargs.pop('area')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ip_interface_loopback_ospf_conf_ospf1_auth_change_wait_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ip = ET.SubElement(loopback, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_loopback_ospf_conf = ET.SubElement(ip, "interface-loopback-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_loopback_ospf_conf, "ospf1")
        auth_change_wait_time = ET.SubElement(ospf1, "auth-change-wait-time")
        auth_change_wait_time.text = kwargs.pop('auth_change_wait_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ip_interface_loopback_ospf_conf_ospf1_authentication_key_no_encrypt_auth_key_table_no_encrypt_auth_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ip = ET.SubElement(loopback, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_loopback_ospf_conf = ET.SubElement(ip, "interface-loopback-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_loopback_ospf_conf, "ospf1")
        authentication_key = ET.SubElement(ospf1, "authentication-key")
        no_encrypt_auth_key_table = ET.SubElement(authentication_key, "no-encrypt-auth-key-table")
        no_encrypt_auth_key = ET.SubElement(no_encrypt_auth_key_table, "no-encrypt-auth-key")
        no_encrypt_auth_key.text = kwargs.pop('no_encrypt_auth_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ip_interface_loopback_ospf_conf_ospf1_authentication_key_auth_key_table_encrypttype(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ip = ET.SubElement(loopback, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_loopback_ospf_conf = ET.SubElement(ip, "interface-loopback-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_loopback_ospf_conf, "ospf1")
        authentication_key = ET.SubElement(ospf1, "authentication-key")
        auth_key_table = ET.SubElement(authentication_key, "auth-key-table")
        encrypttype = ET.SubElement(auth_key_table, "encrypttype")
        encrypttype.text = kwargs.pop('encrypttype')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ip_interface_loopback_ospf_conf_ospf1_authentication_key_auth_key_table_auth_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ip = ET.SubElement(loopback, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_loopback_ospf_conf = ET.SubElement(ip, "interface-loopback-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_loopback_ospf_conf, "ospf1")
        authentication_key = ET.SubElement(ospf1, "authentication-key")
        auth_key_table = ET.SubElement(authentication_key, "auth-key-table")
        auth_key = ET.SubElement(auth_key_table, "auth-key")
        auth_key.text = kwargs.pop('auth_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ip_interface_loopback_ospf_conf_ospf1_dead_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ip = ET.SubElement(loopback, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_loopback_ospf_conf = ET.SubElement(ip, "interface-loopback-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_loopback_ospf_conf, "ospf1")
        dead_interval = ET.SubElement(ospf1, "dead-interval")
        dead_interval.text = kwargs.pop('dead_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ip_interface_loopback_ospf_conf_ospf1_hello_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ip = ET.SubElement(loopback, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_loopback_ospf_conf = ET.SubElement(ip, "interface-loopback-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_loopback_ospf_conf, "ospf1")
        hello_interval = ET.SubElement(ospf1, "hello-interval")
        hello_interval.text = kwargs.pop('hello_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ip_interface_loopback_ospf_conf_ospf1_retransmit_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ip = ET.SubElement(loopback, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_loopback_ospf_conf = ET.SubElement(ip, "interface-loopback-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_loopback_ospf_conf, "ospf1")
        retransmit_interval = ET.SubElement(ospf1, "retransmit-interval")
        retransmit_interval.text = kwargs.pop('retransmit_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ip_interface_loopback_ospf_conf_ospf1_transmit_delay(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ip = ET.SubElement(loopback, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_loopback_ospf_conf = ET.SubElement(ip, "interface-loopback-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_loopback_ospf_conf, "ospf1")
        transmit_delay = ET.SubElement(ospf1, "transmit-delay")
        transmit_delay.text = kwargs.pop('transmit_delay')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ip_interface_loopback_ospf_conf_ospf1_md5_authentication_key_activation_wait_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ip = ET.SubElement(loopback, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_loopback_ospf_conf = ET.SubElement(ip, "interface-loopback-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_loopback_ospf_conf, "ospf1")
        md5_authentication = ET.SubElement(ospf1, "md5-authentication")
        key_activation_wait_time = ET.SubElement(md5_authentication, "key-activation-wait-time")
        key_activation_wait_time.text = kwargs.pop('key_activation_wait_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ip_interface_loopback_ospf_conf_ospf1_md5_authentication_no_encrypt_key_table_no_encrypt_key_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ip = ET.SubElement(loopback, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_loopback_ospf_conf = ET.SubElement(ip, "interface-loopback-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_loopback_ospf_conf, "ospf1")
        md5_authentication = ET.SubElement(ospf1, "md5-authentication")
        no_encrypt_key_table = ET.SubElement(md5_authentication, "no-encrypt-key-table")
        no_encrypt_key_id = ET.SubElement(no_encrypt_key_table, "no-encrypt-key-id")
        no_encrypt_key_id.text = kwargs.pop('no_encrypt_key_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ip_interface_loopback_ospf_conf_ospf1_md5_authentication_no_encrypt_key_table_no_encrypt_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ip = ET.SubElement(loopback, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_loopback_ospf_conf = ET.SubElement(ip, "interface-loopback-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_loopback_ospf_conf, "ospf1")
        md5_authentication = ET.SubElement(ospf1, "md5-authentication")
        no_encrypt_key_table = ET.SubElement(md5_authentication, "no-encrypt-key-table")
        no_encrypt_key = ET.SubElement(no_encrypt_key_table, "no-encrypt-key")
        no_encrypt_key.text = kwargs.pop('no_encrypt_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ip_interface_loopback_ospf_conf_ospf1_md5_authentication_key_table_key_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ip = ET.SubElement(loopback, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_loopback_ospf_conf = ET.SubElement(ip, "interface-loopback-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_loopback_ospf_conf, "ospf1")
        md5_authentication = ET.SubElement(ospf1, "md5-authentication")
        key_table = ET.SubElement(md5_authentication, "key-table")
        key_id = ET.SubElement(key_table, "key-id")
        key_id.text = kwargs.pop('key_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ip_interface_loopback_ospf_conf_ospf1_md5_authentication_key_table_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ip = ET.SubElement(loopback, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_loopback_ospf_conf = ET.SubElement(ip, "interface-loopback-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_loopback_ospf_conf, "ospf1")
        md5_authentication = ET.SubElement(ospf1, "md5-authentication")
        key_table = ET.SubElement(md5_authentication, "key-table")
        key = ET.SubElement(key_table, "key")
        key.text = kwargs.pop('key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ip_interface_loopback_ospf_conf_ospf1_md5_authentication_key_table_md5_authentication_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ip = ET.SubElement(loopback, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_loopback_ospf_conf = ET.SubElement(ip, "interface-loopback-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_loopback_ospf_conf, "ospf1")
        md5_authentication = ET.SubElement(ospf1, "md5-authentication")
        key_table = ET.SubElement(md5_authentication, "key-table")
        md5_authentication_key = ET.SubElement(key_table, "md5-authentication-key")
        md5_authentication_key.text = kwargs.pop('md5_authentication_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ip_interface_loopback_ospf_conf_ospf1_cost(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ip = ET.SubElement(loopback, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_loopback_ospf_conf = ET.SubElement(ip, "interface-loopback-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_loopback_ospf_conf, "ospf1")
        cost = ET.SubElement(ospf1, "cost")
        cost.text = kwargs.pop('cost')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ip_interface_loopback_ospf_conf_ospf1_database_filter_all_out(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ip = ET.SubElement(loopback, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_loopback_ospf_conf = ET.SubElement(ip, "interface-loopback-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_loopback_ospf_conf, "ospf1")
        database_filter = ET.SubElement(ospf1, "database-filter")
        all_out = ET.SubElement(database_filter, "all-out")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ip_interface_loopback_ospf_conf_ospf1_database_filter_all_external(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ip = ET.SubElement(loopback, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_loopback_ospf_conf = ET.SubElement(ip, "interface-loopback-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_loopback_ospf_conf, "ospf1")
        database_filter = ET.SubElement(ospf1, "database-filter")
        all_external = ET.SubElement(database_filter, "all-external")
        all_external.text = kwargs.pop('all_external')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ip_interface_loopback_ospf_conf_ospf1_database_filter_all_summary_external(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ip = ET.SubElement(loopback, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_loopback_ospf_conf = ET.SubElement(ip, "interface-loopback-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_loopback_ospf_conf, "ospf1")
        database_filter = ET.SubElement(ospf1, "database-filter")
        all_summary_external = ET.SubElement(database_filter, "all-summary-external")
        all_summary_external.text = kwargs.pop('all_summary_external')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ip_interface_loopback_ospf_conf_ospf1_mtu_ignore(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ip = ET.SubElement(loopback, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_loopback_ospf_conf = ET.SubElement(ip, "interface-loopback-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_loopback_ospf_conf, "ospf1")
        mtu_ignore = ET.SubElement(ospf1, "mtu-ignore")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ip_interface_loopback_ospf_conf_ospf1_network(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ip = ET.SubElement(loopback, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_loopback_ospf_conf = ET.SubElement(ip, "interface-loopback-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_loopback_ospf_conf, "ospf1")
        network = ET.SubElement(ospf1, "network")
        network.text = kwargs.pop('network')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ip_interface_loopback_ospf_conf_ospf1_active(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ip = ET.SubElement(loopback, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_loopback_ospf_conf = ET.SubElement(ip, "interface-loopback-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_loopback_ospf_conf, "ospf1")
        active = ET.SubElement(ospf1, "active")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ip_interface_loopback_ospf_conf_ospf1_passive(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ip = ET.SubElement(loopback, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_loopback_ospf_conf = ET.SubElement(ip, "interface-loopback-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_loopback_ospf_conf, "ospf1")
        passive = ET.SubElement(ospf1, "passive")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ip_interface_loopback_ospf_conf_ospf1_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ip = ET.SubElement(loopback, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_loopback_ospf_conf = ET.SubElement(ip, "interface-loopback-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_loopback_ospf_conf, "ospf1")
        priority = ET.SubElement(ospf1, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ipv6_ipv6_config_address_use_link_local_only(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ipv6 = ET.SubElement(loopback, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config")
        address = ET.SubElement(ipv6_config, "address")
        use_link_local_only = ET.SubElement(address, "use-link-local-only")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ipv6_ipv6_config_address_link_local_config_link_local_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ipv6 = ET.SubElement(loopback, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config")
        address = ET.SubElement(ipv6_config, "address")
        link_local_config = ET.SubElement(address, "link-local-config")
        link_local_address = ET.SubElement(link_local_config, "link-local-address")
        link_local_address.text = kwargs.pop('link_local_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ipv6_ipv6_config_address_link_local_config_link_local(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ipv6 = ET.SubElement(loopback, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config")
        address = ET.SubElement(ipv6_config, "address")
        link_local_config = ET.SubElement(address, "link-local-config")
        link_local = ET.SubElement(link_local_config, "link-local")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ipv6_ipv6_config_address_ipv6_address_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ipv6 = ET.SubElement(loopback, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config")
        address = ET.SubElement(ipv6_config, "address")
        ipv6_address = ET.SubElement(address, "ipv6-address")
        address = ET.SubElement(ipv6_address, "address")
        address.text = kwargs.pop('address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ipv6_ipv6_config_address_ipv6_address_eui64(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ipv6 = ET.SubElement(loopback, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config")
        address = ET.SubElement(ipv6_config, "address")
        ipv6_address = ET.SubElement(address, "ipv6-address")
        address_key = ET.SubElement(ipv6_address, "address")
        address_key.text = kwargs.pop('address')
        eui64 = ET.SubElement(ipv6_address, "eui64")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ipv6_ipv6_config_address_ipv6_address_anycast(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ipv6 = ET.SubElement(loopback, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config")
        address = ET.SubElement(ipv6_config, "address")
        ipv6_address = ET.SubElement(address, "ipv6-address")
        address_key = ET.SubElement(ipv6_address, "address")
        address_key.text = kwargs.pop('address')
        anycast = ET.SubElement(ipv6_address, "anycast")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ipv6_interface_ospfv3_conf_interface_area(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ipv6 = ET.SubElement(loopback, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        interface_area = ET.SubElement(interface_ospfv3_conf, "interface-area")
        interface_area.text = kwargs.pop('interface_area')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ipv6_interface_ospfv3_conf_active(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ipv6 = ET.SubElement(loopback, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        active = ET.SubElement(interface_ospfv3_conf, "active")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ipv6_interface_ospfv3_conf_passive(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ipv6 = ET.SubElement(loopback, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        passive = ET.SubElement(interface_ospfv3_conf, "passive")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ipv6_interface_ospfv3_conf_bfd(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ipv6 = ET.SubElement(loopback, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        bfd = ET.SubElement(interface_ospfv3_conf, "bfd")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ipv6_interface_ospfv3_conf_cost(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ipv6 = ET.SubElement(loopback, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        cost = ET.SubElement(interface_ospfv3_conf, "cost")
        cost.text = kwargs.pop('cost')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ipv6_interface_ospfv3_conf_instance(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ipv6 = ET.SubElement(loopback, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        instance = ET.SubElement(interface_ospfv3_conf, "instance")
        instance.text = kwargs.pop('instance')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ipv6_interface_ospfv3_conf_mtu_ignore(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ipv6 = ET.SubElement(loopback, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        mtu_ignore = ET.SubElement(interface_ospfv3_conf, "mtu-ignore")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ipv6_interface_ospfv3_conf_network(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ipv6 = ET.SubElement(loopback, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        network = ET.SubElement(interface_ospfv3_conf, "network")
        network.text = kwargs.pop('network')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ipv6_interface_ospfv3_conf_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ipv6 = ET.SubElement(loopback, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        priority = ET.SubElement(interface_ospfv3_conf, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ipv6_interface_ospfv3_conf_suppress_linklsa(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ipv6 = ET.SubElement(loopback, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        suppress_linklsa = ET.SubElement(interface_ospfv3_conf, "suppress-linklsa")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_spi(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ipv6 = ET.SubElement(loopback, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        spi = ET.SubElement(ipsec_auth_key_config, "spi")
        spi.text = kwargs.pop('spi')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_ah_algorithm_ah(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ipv6 = ET.SubElement(loopback, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_ah_algorithm = ET.SubElement(ch_algorithm, "ca-ah-algorithm")
        ah = ET.SubElement(ca_ah_algorithm, "ah")
        ah.text = kwargs.pop('ah')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_ah_algorithm_ah_no_encrypt(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ipv6 = ET.SubElement(loopback, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_ah_algorithm = ET.SubElement(ch_algorithm, "ca-ah-algorithm")
        ah_no_encrypt = ET.SubElement(ca_ah_algorithm, "ah-no-encrypt")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_ah_algorithm_ah_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ipv6 = ET.SubElement(loopback, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_ah_algorithm = ET.SubElement(ch_algorithm, "ca-ah-algorithm")
        ah_key = ET.SubElement(ca_ah_algorithm, "ah-key")
        ah_key.text = kwargs.pop('ah_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ipv6 = ET.SubElement(loopback, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp = ET.SubElement(ca_esp_algorithm, "esp")
        esp.text = kwargs.pop('esp')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp_no_encrypt(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ipv6 = ET.SubElement(loopback, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp_no_encrypt = ET.SubElement(ca_esp_algorithm, "esp-no-encrypt")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ipv6 = ET.SubElement(loopback, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp_key = ET.SubElement(ca_esp_algorithm, "esp-key")
        esp_key.text = kwargs.pop('esp_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp_auth(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ipv6 = ET.SubElement(loopback, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp_auth = ET.SubElement(ca_esp_algorithm, "esp-auth")
        esp_auth.text = kwargs.pop('esp_auth')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp_auth_no_encrypt(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ipv6 = ET.SubElement(loopback, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp_auth_no_encrypt = ET.SubElement(ca_esp_algorithm, "esp-auth-no-encrypt")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp_auth_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ipv6 = ET.SubElement(loopback, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp_auth_key = ET.SubElement(ca_esp_algorithm, "esp-auth-key")
        esp_auth_key.text = kwargs.pop('esp_auth_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ipv6_interface_ospfv3_conf_authentication_ipsec_ipsec_authentication_disable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ipv6 = ET.SubElement(loopback, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec = ET.SubElement(authentication, "ipsec")
        ipsec_authentication_disable = ET.SubElement(ipsec, "ipsec-authentication-disable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ipv6_interface_ospfv3_conf_authentication_ipsec_ifc_key_add_remove_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ipv6 = ET.SubElement(loopback, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec = ET.SubElement(authentication, "ipsec")
        ifc_key_add_remove_interval = ET.SubElement(ipsec, "ifc-key-add-remove-interval")
        ifc_key_add_remove_interval.text = kwargs.pop('ifc_key_add_remove_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ipv6_interface_ospfv3_conf_link_interval_properties_hello_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ipv6 = ET.SubElement(loopback, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        link_interval_properties = ET.SubElement(interface_ospfv3_conf, "link-interval-properties")
        hello_interval = ET.SubElement(link_interval_properties, "hello-interval")
        hello_interval.text = kwargs.pop('hello_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ipv6_interface_ospfv3_conf_link_interval_properties_dead_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ipv6 = ET.SubElement(loopback, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        link_interval_properties = ET.SubElement(interface_ospfv3_conf, "link-interval-properties")
        dead_interval = ET.SubElement(link_interval_properties, "dead-interval")
        dead_interval.text = kwargs.pop('dead_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ipv6_interface_ospfv3_conf_link_interval_properties_hello_jitter(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ipv6 = ET.SubElement(loopback, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        link_interval_properties = ET.SubElement(interface_ospfv3_conf, "link-interval-properties")
        hello_jitter = ET.SubElement(link_interval_properties, "hello-jitter")
        hello_jitter.text = kwargs.pop('hello_jitter')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ipv6_interface_ospfv3_conf_link_interval_properties_retransmit_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ipv6 = ET.SubElement(loopback, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        link_interval_properties = ET.SubElement(interface_ospfv3_conf, "link-interval-properties")
        retransmit_interval = ET.SubElement(link_interval_properties, "retransmit-interval")
        retransmit_interval.text = kwargs.pop('retransmit_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ipv6_interface_ospfv3_conf_link_interval_properties_transmit_delay(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ipv6 = ET.SubElement(loopback, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        link_interval_properties = ET.SubElement(interface_ospfv3_conf, "link-interval-properties")
        transmit_delay = ET.SubElement(link_interval_properties, "transmit-delay")
        transmit_delay.text = kwargs.pop('transmit_delay')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_fcoe_config_fcoe_enode_fabric_map_fcoe_enode_fabric_map_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        fcoe_config = ET.SubElement(rbridge_id, "fcoe-config", xmlns="urn:brocade.com:mgmt:brocade-fcoe")
        fcoe_enode_fabric_map = ET.SubElement(fcoe_config, "fcoe-enode-fabric-map")
        fcoe_enode_fabric_map_name = ET.SubElement(fcoe_enode_fabric_map, "fcoe-enode-fabric-map-name")
        fcoe_enode_fabric_map_name.text = kwargs.pop('fcoe_enode_fabric_map_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_fcoe_config_fcoe_max_enode(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        fcoe_config = ET.SubElement(rbridge_id, "fcoe-config", xmlns="urn:brocade.com:mgmt:brocade-fcoe")
        fcoe_max_enode = ET.SubElement(fcoe_config, "fcoe-max-enode")
        fcoe_max_enode.text = kwargs.pop('fcoe_max_enode')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_root_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        root = ET.SubElement(rbridge_id, "root", xmlns="urn:brocade.com:mgmt:brocade-aaa")
        enable = ET.SubElement(root, "enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_root_access(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        root = ET.SubElement(rbridge_id, "root", xmlns="urn:brocade.com:mgmt:brocade-aaa")
        access = ET.SubElement(root, "access")
        access.text = kwargs.pop('access')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ag_nport_menu_nport_interface_nport_agNPortNb(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ag = ET.SubElement(rbridge_id, "ag", xmlns="urn:brocade.com:mgmt:brocade-ag")
        nport_menu = ET.SubElement(ag, "nport-menu")
        nport_interface = ET.SubElement(nport_menu, "nport-interface")
        nport = ET.SubElement(nport_interface, "nport")
        agNPortNb = ET.SubElement(nport, "agNPortNb")
        agNPortNb.text = kwargs.pop('agNPortNb')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ag_pg_pgid(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ag = ET.SubElement(rbridge_id, "ag", xmlns="urn:brocade.com:mgmt:brocade-ag")
        pg = ET.SubElement(ag, "pg")
        pgid = ET.SubElement(pg, "pgid")
        pgid.text = kwargs.pop('pgid')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ag_pg_rename(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ag = ET.SubElement(rbridge_id, "ag", xmlns="urn:brocade.com:mgmt:brocade-ag")
        pg = ET.SubElement(ag, "pg")
        pgid_key = ET.SubElement(pg, "pgid")
        pgid_key.text = kwargs.pop('pgid')
        rename = ET.SubElement(pg, "rename")
        rename.text = kwargs.pop('rename')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ag_timeout_fnmtovalue(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ag = ET.SubElement(rbridge_id, "ag", xmlns="urn:brocade.com:mgmt:brocade-ag")
        timeout = ET.SubElement(ag, "timeout")
        fnmtovalue = ET.SubElement(timeout, "fnmtovalue")
        fnmtovalue.text = kwargs.pop('fnmtovalue')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ag_counter_reliabilitycountervalue(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ag = ET.SubElement(rbridge_id, "ag", xmlns="urn:brocade.com:mgmt:brocade-ag")
        counter = ET.SubElement(ag, "counter")
        reliabilitycountervalue = ET.SubElement(counter, "reliabilitycountervalue")
        reliabilitycountervalue.text = kwargs.pop('reliabilitycountervalue')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_vrf_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name = ET.SubElement(vrf, "vrf-name")
        vrf_name.text = kwargs.pop('vrf_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_route_distiniguisher(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        route_distiniguisher = ET.SubElement(vrf, "route-distiniguisher")
        route_distiniguisher.text = kwargs.pop('route_distiniguisher')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_route_target_action(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        route_target = ET.SubElement(vrf, "route-target")
        target_community_key = ET.SubElement(route_target, "target-community")
        target_community_key.text = kwargs.pop('target_community')
        action = ET.SubElement(route_target, "action")
        action.text = kwargs.pop('action')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_route_target_target_community(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        route_target = ET.SubElement(vrf, "route-target")
        action_key = ET.SubElement(route_target, "action")
        action_key.text = kwargs.pop('action')
        target_community = ET.SubElement(route_target, "target-community")
        target_community.text = kwargs.pop('target_community')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ipv4_max_route(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        max_route = ET.SubElement(ipv4, "max-route")
        max_route.text = kwargs.pop('max_route')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ipv4_route_target_action(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        max_route_key = ET.SubElement(ipv4, "max-route")
        max_route_key.text = kwargs.pop('max_route')
        route_target = ET.SubElement(ipv4, "route-target")
        target_community_key = ET.SubElement(route_target, "target-community")
        target_community_key.text = kwargs.pop('target_community')
        action = ET.SubElement(route_target, "action")
        action.text = kwargs.pop('action')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ipv4_route_target_target_community(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        max_route_key = ET.SubElement(ipv4, "max-route")
        max_route_key.text = kwargs.pop('max_route')
        route_target = ET.SubElement(ipv4, "route-target")
        action_key = ET.SubElement(route_target, "action")
        action_key.text = kwargs.pop('action')
        target_community = ET.SubElement(route_target, "target-community")
        target_community.text = kwargs.pop('target_community')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ip_unicast_max_route(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ip = ET.SubElement(address_family, "ip")
        unicast = ET.SubElement(ip, "unicast")
        max_route = ET.SubElement(unicast, "max-route")
        max_route.text = kwargs.pop('max_route')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ip_unicast_arp_entry_arp_ip_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ip = ET.SubElement(address_family, "ip")
        unicast = ET.SubElement(ip, "unicast")
        arp_entry = ET.SubElement(unicast, "arp-entry", xmlns="urn:brocade.com:mgmt:brocade-arp")
        arp_ip_address = ET.SubElement(arp_entry, "arp-ip-address")
        arp_ip_address.text = kwargs.pop('arp_ip_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ip_unicast_arp_entry_mac_address_value(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ip = ET.SubElement(address_family, "ip")
        unicast = ET.SubElement(ip, "unicast")
        arp_entry = ET.SubElement(unicast, "arp-entry", xmlns="urn:brocade.com:mgmt:brocade-arp")
        arp_ip_address_key = ET.SubElement(arp_entry, "arp-ip-address")
        arp_ip_address_key.text = kwargs.pop('arp_ip_address')
        mac_address_value = ET.SubElement(arp_entry, "mac-address-value")
        mac_address_value.text = kwargs.pop('mac_address_value')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ip_unicast_arp_entry_interfacename(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ip = ET.SubElement(address_family, "ip")
        unicast = ET.SubElement(ip, "unicast")
        arp_entry = ET.SubElement(unicast, "arp-entry", xmlns="urn:brocade.com:mgmt:brocade-arp")
        arp_ip_address_key = ET.SubElement(arp_entry, "arp-ip-address")
        arp_ip_address_key.text = kwargs.pop('arp_ip_address')
        interfacename = ET.SubElement(arp_entry, "interfacename")
        interfacename.text = kwargs.pop('interfacename')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ip_unicast_arp_entry_interfacetype_GigabitEthernet_GigabitEthernet(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ip = ET.SubElement(address_family, "ip")
        unicast = ET.SubElement(ip, "unicast")
        arp_entry = ET.SubElement(unicast, "arp-entry", xmlns="urn:brocade.com:mgmt:brocade-arp")
        arp_ip_address_key = ET.SubElement(arp_entry, "arp-ip-address")
        arp_ip_address_key.text = kwargs.pop('arp_ip_address')
        interfacetype = ET.SubElement(arp_entry, "interfacetype")
        GigabitEthernet = ET.SubElement(interfacetype, "GigabitEthernet")
        GigabitEthernet = ET.SubElement(GigabitEthernet, "GigabitEthernet")
        GigabitEthernet.text = kwargs.pop('GigabitEthernet')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ip_unicast_arp_entry_interfacetype_TenGigabitEthernet_TenGigabitEthernet(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ip = ET.SubElement(address_family, "ip")
        unicast = ET.SubElement(ip, "unicast")
        arp_entry = ET.SubElement(unicast, "arp-entry", xmlns="urn:brocade.com:mgmt:brocade-arp")
        arp_ip_address_key = ET.SubElement(arp_entry, "arp-ip-address")
        arp_ip_address_key.text = kwargs.pop('arp_ip_address')
        interfacetype = ET.SubElement(arp_entry, "interfacetype")
        TenGigabitEthernet = ET.SubElement(interfacetype, "TenGigabitEthernet")
        TenGigabitEthernet = ET.SubElement(TenGigabitEthernet, "TenGigabitEthernet")
        TenGigabitEthernet.text = kwargs.pop('TenGigabitEthernet')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ip_unicast_arp_entry_interfacetype_FortyGigabitEthernet_FortyGigabitEthernet(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ip = ET.SubElement(address_family, "ip")
        unicast = ET.SubElement(ip, "unicast")
        arp_entry = ET.SubElement(unicast, "arp-entry", xmlns="urn:brocade.com:mgmt:brocade-arp")
        arp_ip_address_key = ET.SubElement(arp_entry, "arp-ip-address")
        arp_ip_address_key.text = kwargs.pop('arp_ip_address')
        interfacetype = ET.SubElement(arp_entry, "interfacetype")
        FortyGigabitEthernet = ET.SubElement(interfacetype, "FortyGigabitEthernet")
        FortyGigabitEthernet = ET.SubElement(FortyGigabitEthernet, "FortyGigabitEthernet")
        FortyGigabitEthernet.text = kwargs.pop('FortyGigabitEthernet')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ip_unicast_arp_entry_interfacetype_HundredGigabitEthernet_HundredGigabitEthernet(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ip = ET.SubElement(address_family, "ip")
        unicast = ET.SubElement(ip, "unicast")
        arp_entry = ET.SubElement(unicast, "arp-entry", xmlns="urn:brocade.com:mgmt:brocade-arp")
        arp_ip_address_key = ET.SubElement(arp_entry, "arp-ip-address")
        arp_ip_address_key.text = kwargs.pop('arp_ip_address')
        interfacetype = ET.SubElement(arp_entry, "interfacetype")
        HundredGigabitEthernet = ET.SubElement(interfacetype, "HundredGigabitEthernet")
        HundredGigabitEthernet = ET.SubElement(HundredGigabitEthernet, "HundredGigabitEthernet")
        HundredGigabitEthernet.text = kwargs.pop('HundredGigabitEthernet')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ip_unicast_arp_entry_interfacetype_Ve_Ve(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ip = ET.SubElement(address_family, "ip")
        unicast = ET.SubElement(ip, "unicast")
        arp_entry = ET.SubElement(unicast, "arp-entry", xmlns="urn:brocade.com:mgmt:brocade-arp")
        arp_ip_address_key = ET.SubElement(arp_entry, "arp-ip-address")
        arp_ip_address_key.text = kwargs.pop('arp_ip_address')
        interfacetype = ET.SubElement(arp_entry, "interfacetype")
        Ve = ET.SubElement(interfacetype, "Ve")
        Ve = ET.SubElement(Ve, "Ve")
        Ve.text = kwargs.pop('Ve')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ip_unicast_ip_route_static_route_nh_static_route_dest(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ip = ET.SubElement(address_family, "ip")
        unicast = ET.SubElement(ip, "unicast")
        ip = ET.SubElement(unicast, "ip", xmlns="urn:brocade.com:mgmt:brocade-rtm")
        route = ET.SubElement(ip, "route")
        static_route_nh = ET.SubElement(route, "static-route-nh")
        static_route_next_hop_key = ET.SubElement(static_route_nh, "static-route-next-hop")
        static_route_next_hop_key.text = kwargs.pop('static_route_next_hop')
        static_route_dest = ET.SubElement(static_route_nh, "static-route-dest")
        static_route_dest.text = kwargs.pop('static_route_dest')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ip_unicast_ip_route_static_route_nh_static_route_next_hop(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ip = ET.SubElement(address_family, "ip")
        unicast = ET.SubElement(ip, "unicast")
        ip = ET.SubElement(unicast, "ip", xmlns="urn:brocade.com:mgmt:brocade-rtm")
        route = ET.SubElement(ip, "route")
        static_route_nh = ET.SubElement(route, "static-route-nh")
        static_route_dest_key = ET.SubElement(static_route_nh, "static-route-dest")
        static_route_dest_key.text = kwargs.pop('static_route_dest')
        static_route_next_hop = ET.SubElement(static_route_nh, "static-route-next-hop")
        static_route_next_hop.text = kwargs.pop('static_route_next_hop')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ip_unicast_ip_route_static_route_nh_route_attributes_metric(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ip = ET.SubElement(address_family, "ip")
        unicast = ET.SubElement(ip, "unicast")
        ip = ET.SubElement(unicast, "ip", xmlns="urn:brocade.com:mgmt:brocade-rtm")
        route = ET.SubElement(ip, "route")
        static_route_nh = ET.SubElement(route, "static-route-nh")
        static_route_dest_key = ET.SubElement(static_route_nh, "static-route-dest")
        static_route_dest_key.text = kwargs.pop('static_route_dest')
        static_route_next_hop_key = ET.SubElement(static_route_nh, "static-route-next-hop")
        static_route_next_hop_key.text = kwargs.pop('static_route_next_hop')
        route_attributes = ET.SubElement(static_route_nh, "route-attributes")
        metric = ET.SubElement(route_attributes, "metric")
        metric.text = kwargs.pop('metric')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ip_unicast_ip_route_static_route_nh_route_attributes_distance(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ip = ET.SubElement(address_family, "ip")
        unicast = ET.SubElement(ip, "unicast")
        ip = ET.SubElement(unicast, "ip", xmlns="urn:brocade.com:mgmt:brocade-rtm")
        route = ET.SubElement(ip, "route")
        static_route_nh = ET.SubElement(route, "static-route-nh")
        static_route_dest_key = ET.SubElement(static_route_nh, "static-route-dest")
        static_route_dest_key.text = kwargs.pop('static_route_dest')
        static_route_next_hop_key = ET.SubElement(static_route_nh, "static-route-next-hop")
        static_route_next_hop_key.text = kwargs.pop('static_route_next_hop')
        route_attributes = ET.SubElement(static_route_nh, "route-attributes")
        distance = ET.SubElement(route_attributes, "distance")
        distance.text = kwargs.pop('distance')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ip_unicast_ip_route_static_route_nh_route_attributes_tag(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ip = ET.SubElement(address_family, "ip")
        unicast = ET.SubElement(ip, "unicast")
        ip = ET.SubElement(unicast, "ip", xmlns="urn:brocade.com:mgmt:brocade-rtm")
        route = ET.SubElement(ip, "route")
        static_route_nh = ET.SubElement(route, "static-route-nh")
        static_route_dest_key = ET.SubElement(static_route_nh, "static-route-dest")
        static_route_dest_key.text = kwargs.pop('static_route_dest')
        static_route_next_hop_key = ET.SubElement(static_route_nh, "static-route-next-hop")
        static_route_next_hop_key.text = kwargs.pop('static_route_next_hop')
        route_attributes = ET.SubElement(static_route_nh, "route-attributes")
        tag = ET.SubElement(route_attributes, "tag")
        tag.text = kwargs.pop('tag')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ip_unicast_ip_route_static_route_nh_vrf_static_route_next_vrf_dest(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ip = ET.SubElement(address_family, "ip")
        unicast = ET.SubElement(ip, "unicast")
        ip = ET.SubElement(unicast, "ip", xmlns="urn:brocade.com:mgmt:brocade-rtm")
        route = ET.SubElement(ip, "route")
        static_route_nh_vrf = ET.SubElement(route, "static-route-nh-vrf")
        next_hop_vrf_key = ET.SubElement(static_route_nh_vrf, "next-hop-vrf")
        next_hop_vrf_key.text = kwargs.pop('next_hop_vrf')
        static_route_next_hop_key = ET.SubElement(static_route_nh_vrf, "static-route-next-hop")
        static_route_next_hop_key.text = kwargs.pop('static_route_next_hop')
        static_route_next_vrf_dest = ET.SubElement(static_route_nh_vrf, "static-route-next-vrf-dest")
        static_route_next_vrf_dest.text = kwargs.pop('static_route_next_vrf_dest')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ip_unicast_ip_route_static_route_nh_vrf_next_hop_vrf(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ip = ET.SubElement(address_family, "ip")
        unicast = ET.SubElement(ip, "unicast")
        ip = ET.SubElement(unicast, "ip", xmlns="urn:brocade.com:mgmt:brocade-rtm")
        route = ET.SubElement(ip, "route")
        static_route_nh_vrf = ET.SubElement(route, "static-route-nh-vrf")
        static_route_next_vrf_dest_key = ET.SubElement(static_route_nh_vrf, "static-route-next-vrf-dest")
        static_route_next_vrf_dest_key.text = kwargs.pop('static_route_next_vrf_dest')
        static_route_next_hop_key = ET.SubElement(static_route_nh_vrf, "static-route-next-hop")
        static_route_next_hop_key.text = kwargs.pop('static_route_next_hop')
        next_hop_vrf = ET.SubElement(static_route_nh_vrf, "next-hop-vrf")
        next_hop_vrf.text = kwargs.pop('next_hop_vrf')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ip_unicast_ip_route_static_route_nh_vrf_static_route_next_hop(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ip = ET.SubElement(address_family, "ip")
        unicast = ET.SubElement(ip, "unicast")
        ip = ET.SubElement(unicast, "ip", xmlns="urn:brocade.com:mgmt:brocade-rtm")
        route = ET.SubElement(ip, "route")
        static_route_nh_vrf = ET.SubElement(route, "static-route-nh-vrf")
        static_route_next_vrf_dest_key = ET.SubElement(static_route_nh_vrf, "static-route-next-vrf-dest")
        static_route_next_vrf_dest_key.text = kwargs.pop('static_route_next_vrf_dest')
        next_hop_vrf_key = ET.SubElement(static_route_nh_vrf, "next-hop-vrf")
        next_hop_vrf_key.text = kwargs.pop('next_hop_vrf')
        static_route_next_hop = ET.SubElement(static_route_nh_vrf, "static-route-next-hop")
        static_route_next_hop.text = kwargs.pop('static_route_next_hop')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ip_unicast_ip_route_static_route_oif_static_route_dest(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ip = ET.SubElement(address_family, "ip")
        unicast = ET.SubElement(ip, "unicast")
        ip = ET.SubElement(unicast, "ip", xmlns="urn:brocade.com:mgmt:brocade-rtm")
        route = ET.SubElement(ip, "route")
        static_route_oif = ET.SubElement(route, "static-route-oif")
        static_route_oif_type_key = ET.SubElement(static_route_oif, "static-route-oif-type")
        static_route_oif_type_key.text = kwargs.pop('static_route_oif_type')
        static_route_oif_name_key = ET.SubElement(static_route_oif, "static-route-oif-name")
        static_route_oif_name_key.text = kwargs.pop('static_route_oif_name')
        static_route_dest = ET.SubElement(static_route_oif, "static-route-dest")
        static_route_dest.text = kwargs.pop('static_route_dest')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ip_unicast_ip_route_static_route_oif_static_route_oif_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ip = ET.SubElement(address_family, "ip")
        unicast = ET.SubElement(ip, "unicast")
        ip = ET.SubElement(unicast, "ip", xmlns="urn:brocade.com:mgmt:brocade-rtm")
        route = ET.SubElement(ip, "route")
        static_route_oif = ET.SubElement(route, "static-route-oif")
        static_route_dest_key = ET.SubElement(static_route_oif, "static-route-dest")
        static_route_dest_key.text = kwargs.pop('static_route_dest')
        static_route_oif_name_key = ET.SubElement(static_route_oif, "static-route-oif-name")
        static_route_oif_name_key.text = kwargs.pop('static_route_oif_name')
        static_route_oif_type = ET.SubElement(static_route_oif, "static-route-oif-type")
        static_route_oif_type.text = kwargs.pop('static_route_oif_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ip_unicast_ip_route_static_route_oif_static_route_oif_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ip = ET.SubElement(address_family, "ip")
        unicast = ET.SubElement(ip, "unicast")
        ip = ET.SubElement(unicast, "ip", xmlns="urn:brocade.com:mgmt:brocade-rtm")
        route = ET.SubElement(ip, "route")
        static_route_oif = ET.SubElement(route, "static-route-oif")
        static_route_dest_key = ET.SubElement(static_route_oif, "static-route-dest")
        static_route_dest_key.text = kwargs.pop('static_route_dest')
        static_route_oif_type_key = ET.SubElement(static_route_oif, "static-route-oif-type")
        static_route_oif_type_key.text = kwargs.pop('static_route_oif_type')
        static_route_oif_name = ET.SubElement(static_route_oif, "static-route-oif-name")
        static_route_oif_name.text = kwargs.pop('static_route_oif_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ip_unicast_ip_route_static_route_oif_route_attributes_metric(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ip = ET.SubElement(address_family, "ip")
        unicast = ET.SubElement(ip, "unicast")
        ip = ET.SubElement(unicast, "ip", xmlns="urn:brocade.com:mgmt:brocade-rtm")
        route = ET.SubElement(ip, "route")
        static_route_oif = ET.SubElement(route, "static-route-oif")
        static_route_dest_key = ET.SubElement(static_route_oif, "static-route-dest")
        static_route_dest_key.text = kwargs.pop('static_route_dest')
        static_route_oif_type_key = ET.SubElement(static_route_oif, "static-route-oif-type")
        static_route_oif_type_key.text = kwargs.pop('static_route_oif_type')
        static_route_oif_name_key = ET.SubElement(static_route_oif, "static-route-oif-name")
        static_route_oif_name_key.text = kwargs.pop('static_route_oif_name')
        route_attributes = ET.SubElement(static_route_oif, "route-attributes")
        metric = ET.SubElement(route_attributes, "metric")
        metric.text = kwargs.pop('metric')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ip_unicast_ip_route_static_route_oif_route_attributes_distance(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ip = ET.SubElement(address_family, "ip")
        unicast = ET.SubElement(ip, "unicast")
        ip = ET.SubElement(unicast, "ip", xmlns="urn:brocade.com:mgmt:brocade-rtm")
        route = ET.SubElement(ip, "route")
        static_route_oif = ET.SubElement(route, "static-route-oif")
        static_route_dest_key = ET.SubElement(static_route_oif, "static-route-dest")
        static_route_dest_key.text = kwargs.pop('static_route_dest')
        static_route_oif_type_key = ET.SubElement(static_route_oif, "static-route-oif-type")
        static_route_oif_type_key.text = kwargs.pop('static_route_oif_type')
        static_route_oif_name_key = ET.SubElement(static_route_oif, "static-route-oif-name")
        static_route_oif_name_key.text = kwargs.pop('static_route_oif_name')
        route_attributes = ET.SubElement(static_route_oif, "route-attributes")
        distance = ET.SubElement(route_attributes, "distance")
        distance.text = kwargs.pop('distance')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ip_unicast_ip_route_static_route_oif_route_attributes_tag(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ip = ET.SubElement(address_family, "ip")
        unicast = ET.SubElement(ip, "unicast")
        ip = ET.SubElement(unicast, "ip", xmlns="urn:brocade.com:mgmt:brocade-rtm")
        route = ET.SubElement(ip, "route")
        static_route_oif = ET.SubElement(route, "static-route-oif")
        static_route_dest_key = ET.SubElement(static_route_oif, "static-route-dest")
        static_route_dest_key.text = kwargs.pop('static_route_dest')
        static_route_oif_type_key = ET.SubElement(static_route_oif, "static-route-oif-type")
        static_route_oif_type_key.text = kwargs.pop('static_route_oif_type')
        static_route_oif_name_key = ET.SubElement(static_route_oif, "static-route-oif-name")
        static_route_oif_name_key.text = kwargs.pop('static_route_oif_name')
        route_attributes = ET.SubElement(static_route_oif, "route-attributes")
        tag = ET.SubElement(route_attributes, "tag")
        tag.text = kwargs.pop('tag')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ip_unicast_ip_imprt_routes_src_vrf(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ip = ET.SubElement(address_family, "ip")
        unicast = ET.SubElement(ip, "unicast")
        ip = ET.SubElement(unicast, "ip", xmlns="urn:brocade.com:mgmt:brocade-rtm")
        imprt = ET.SubElement(ip, "import")
        routes = ET.SubElement(imprt, "routes")
        route_map_key = ET.SubElement(routes, "route-map")
        route_map_key.text = kwargs.pop('route_map')
        src_vrf = ET.SubElement(routes, "src-vrf")
        src_vrf.text = kwargs.pop('src_vrf')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ip_unicast_ip_imprt_routes_route_map(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ip = ET.SubElement(address_family, "ip")
        unicast = ET.SubElement(ip, "unicast")
        ip = ET.SubElement(unicast, "ip", xmlns="urn:brocade.com:mgmt:brocade-rtm")
        imprt = ET.SubElement(ip, "import")
        routes = ET.SubElement(imprt, "routes")
        src_vrf_key = ET.SubElement(routes, "src-vrf")
        src_vrf_key.text = kwargs.pop('src_vrf')
        route_map = ET.SubElement(routes, "route-map")
        route_map.text = kwargs.pop('route_map')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ipv6_unicast_max_route(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        unicast = ET.SubElement(ipv6, "unicast")
        max_route = ET.SubElement(unicast, "max-route")
        max_route.text = kwargs.pop('max_route')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ipv6_unicast_ipv6_route_static_route_nh_static_route_dest(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        unicast = ET.SubElement(ipv6, "unicast")
        ipv6 = ET.SubElement(unicast, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-rtm")
        route = ET.SubElement(ipv6, "route")
        static_route_nh = ET.SubElement(route, "static-route-nh")
        static_route_next_hop_key = ET.SubElement(static_route_nh, "static-route-next-hop")
        static_route_next_hop_key.text = kwargs.pop('static_route_next_hop')
        static_route_dest = ET.SubElement(static_route_nh, "static-route-dest")
        static_route_dest.text = kwargs.pop('static_route_dest')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ipv6_unicast_ipv6_route_static_route_nh_static_route_next_hop(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        unicast = ET.SubElement(ipv6, "unicast")
        ipv6 = ET.SubElement(unicast, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-rtm")
        route = ET.SubElement(ipv6, "route")
        static_route_nh = ET.SubElement(route, "static-route-nh")
        static_route_dest_key = ET.SubElement(static_route_nh, "static-route-dest")
        static_route_dest_key.text = kwargs.pop('static_route_dest')
        static_route_next_hop = ET.SubElement(static_route_nh, "static-route-next-hop")
        static_route_next_hop.text = kwargs.pop('static_route_next_hop')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ipv6_unicast_ipv6_route_static_route_nh_route_attributes_metric(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        unicast = ET.SubElement(ipv6, "unicast")
        ipv6 = ET.SubElement(unicast, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-rtm")
        route = ET.SubElement(ipv6, "route")
        static_route_nh = ET.SubElement(route, "static-route-nh")
        static_route_dest_key = ET.SubElement(static_route_nh, "static-route-dest")
        static_route_dest_key.text = kwargs.pop('static_route_dest')
        static_route_next_hop_key = ET.SubElement(static_route_nh, "static-route-next-hop")
        static_route_next_hop_key.text = kwargs.pop('static_route_next_hop')
        route_attributes = ET.SubElement(static_route_nh, "route-attributes")
        metric = ET.SubElement(route_attributes, "metric")
        metric.text = kwargs.pop('metric')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ipv6_unicast_ipv6_route_static_route_nh_route_attributes_distance(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        unicast = ET.SubElement(ipv6, "unicast")
        ipv6 = ET.SubElement(unicast, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-rtm")
        route = ET.SubElement(ipv6, "route")
        static_route_nh = ET.SubElement(route, "static-route-nh")
        static_route_dest_key = ET.SubElement(static_route_nh, "static-route-dest")
        static_route_dest_key.text = kwargs.pop('static_route_dest')
        static_route_next_hop_key = ET.SubElement(static_route_nh, "static-route-next-hop")
        static_route_next_hop_key.text = kwargs.pop('static_route_next_hop')
        route_attributes = ET.SubElement(static_route_nh, "route-attributes")
        distance = ET.SubElement(route_attributes, "distance")
        distance.text = kwargs.pop('distance')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ipv6_unicast_ipv6_route_static_route_nh_route_attributes_tag(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        unicast = ET.SubElement(ipv6, "unicast")
        ipv6 = ET.SubElement(unicast, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-rtm")
        route = ET.SubElement(ipv6, "route")
        static_route_nh = ET.SubElement(route, "static-route-nh")
        static_route_dest_key = ET.SubElement(static_route_nh, "static-route-dest")
        static_route_dest_key.text = kwargs.pop('static_route_dest')
        static_route_next_hop_key = ET.SubElement(static_route_nh, "static-route-next-hop")
        static_route_next_hop_key.text = kwargs.pop('static_route_next_hop')
        route_attributes = ET.SubElement(static_route_nh, "route-attributes")
        tag = ET.SubElement(route_attributes, "tag")
        tag.text = kwargs.pop('tag')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ipv6_unicast_ipv6_route_static_route_oif_static_route_dest(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        unicast = ET.SubElement(ipv6, "unicast")
        ipv6 = ET.SubElement(unicast, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-rtm")
        route = ET.SubElement(ipv6, "route")
        static_route_oif = ET.SubElement(route, "static-route-oif")
        static_route_oif_type_key = ET.SubElement(static_route_oif, "static-route-oif-type")
        static_route_oif_type_key.text = kwargs.pop('static_route_oif_type')
        static_route_oif_name_key = ET.SubElement(static_route_oif, "static-route-oif-name")
        static_route_oif_name_key.text = kwargs.pop('static_route_oif_name')
        static_route_dest = ET.SubElement(static_route_oif, "static-route-dest")
        static_route_dest.text = kwargs.pop('static_route_dest')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ipv6_unicast_ipv6_route_static_route_oif_static_route_oif_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        unicast = ET.SubElement(ipv6, "unicast")
        ipv6 = ET.SubElement(unicast, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-rtm")
        route = ET.SubElement(ipv6, "route")
        static_route_oif = ET.SubElement(route, "static-route-oif")
        static_route_dest_key = ET.SubElement(static_route_oif, "static-route-dest")
        static_route_dest_key.text = kwargs.pop('static_route_dest')
        static_route_oif_name_key = ET.SubElement(static_route_oif, "static-route-oif-name")
        static_route_oif_name_key.text = kwargs.pop('static_route_oif_name')
        static_route_oif_type = ET.SubElement(static_route_oif, "static-route-oif-type")
        static_route_oif_type.text = kwargs.pop('static_route_oif_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ipv6_unicast_ipv6_route_static_route_oif_static_route_oif_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        unicast = ET.SubElement(ipv6, "unicast")
        ipv6 = ET.SubElement(unicast, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-rtm")
        route = ET.SubElement(ipv6, "route")
        static_route_oif = ET.SubElement(route, "static-route-oif")
        static_route_dest_key = ET.SubElement(static_route_oif, "static-route-dest")
        static_route_dest_key.text = kwargs.pop('static_route_dest')
        static_route_oif_type_key = ET.SubElement(static_route_oif, "static-route-oif-type")
        static_route_oif_type_key.text = kwargs.pop('static_route_oif_type')
        static_route_oif_name = ET.SubElement(static_route_oif, "static-route-oif-name")
        static_route_oif_name.text = kwargs.pop('static_route_oif_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ipv6_unicast_ipv6_route_static_route_oif_route_attributes_metric(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        unicast = ET.SubElement(ipv6, "unicast")
        ipv6 = ET.SubElement(unicast, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-rtm")
        route = ET.SubElement(ipv6, "route")
        static_route_oif = ET.SubElement(route, "static-route-oif")
        static_route_dest_key = ET.SubElement(static_route_oif, "static-route-dest")
        static_route_dest_key.text = kwargs.pop('static_route_dest')
        static_route_oif_type_key = ET.SubElement(static_route_oif, "static-route-oif-type")
        static_route_oif_type_key.text = kwargs.pop('static_route_oif_type')
        static_route_oif_name_key = ET.SubElement(static_route_oif, "static-route-oif-name")
        static_route_oif_name_key.text = kwargs.pop('static_route_oif_name')
        route_attributes = ET.SubElement(static_route_oif, "route-attributes")
        metric = ET.SubElement(route_attributes, "metric")
        metric.text = kwargs.pop('metric')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ipv6_unicast_ipv6_route_static_route_oif_route_attributes_distance(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        unicast = ET.SubElement(ipv6, "unicast")
        ipv6 = ET.SubElement(unicast, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-rtm")
        route = ET.SubElement(ipv6, "route")
        static_route_oif = ET.SubElement(route, "static-route-oif")
        static_route_dest_key = ET.SubElement(static_route_oif, "static-route-dest")
        static_route_dest_key.text = kwargs.pop('static_route_dest')
        static_route_oif_type_key = ET.SubElement(static_route_oif, "static-route-oif-type")
        static_route_oif_type_key.text = kwargs.pop('static_route_oif_type')
        static_route_oif_name_key = ET.SubElement(static_route_oif, "static-route-oif-name")
        static_route_oif_name_key.text = kwargs.pop('static_route_oif_name')
        route_attributes = ET.SubElement(static_route_oif, "route-attributes")
        distance = ET.SubElement(route_attributes, "distance")
        distance.text = kwargs.pop('distance')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ipv6_unicast_ipv6_route_static_route_oif_route_attributes_tag(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        unicast = ET.SubElement(ipv6, "unicast")
        ipv6 = ET.SubElement(unicast, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-rtm")
        route = ET.SubElement(ipv6, "route")
        static_route_oif = ET.SubElement(route, "static-route-oif")
        static_route_dest_key = ET.SubElement(static_route_oif, "static-route-dest")
        static_route_dest_key.text = kwargs.pop('static_route_dest')
        static_route_oif_type_key = ET.SubElement(static_route_oif, "static-route-oif-type")
        static_route_oif_type_key.text = kwargs.pop('static_route_oif_type')
        static_route_oif_name_key = ET.SubElement(static_route_oif, "static-route-oif-name")
        static_route_oif_name_key.text = kwargs.pop('static_route_oif_name')
        route_attributes = ET.SubElement(static_route_oif, "route-attributes")
        tag = ET.SubElement(route_attributes, "tag")
        tag.text = kwargs.pop('tag')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ipv6_unicast_ipv6_route_link_local_static_route_nh_link_local_static_route_dest(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        unicast = ET.SubElement(ipv6, "unicast")
        ipv6 = ET.SubElement(unicast, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-rtm")
        route = ET.SubElement(ipv6, "route")
        link_local_static_route_nh = ET.SubElement(route, "link-local-static-route-nh")
        link_local_nexthop_key = ET.SubElement(link_local_static_route_nh, "link-local-nexthop")
        link_local_nexthop_key.text = kwargs.pop('link_local_nexthop')
        link_local_route_oif_type_key = ET.SubElement(link_local_static_route_nh, "link-local-route-oif-type")
        link_local_route_oif_type_key.text = kwargs.pop('link_local_route_oif_type')
        link_local_route_oif_name_key = ET.SubElement(link_local_static_route_nh, "link-local-route-oif-name")
        link_local_route_oif_name_key.text = kwargs.pop('link_local_route_oif_name')
        link_local_static_route_dest = ET.SubElement(link_local_static_route_nh, "link-local-static-route-dest")
        link_local_static_route_dest.text = kwargs.pop('link_local_static_route_dest')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ipv6_unicast_ipv6_route_link_local_static_route_nh_link_local_nexthop(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        unicast = ET.SubElement(ipv6, "unicast")
        ipv6 = ET.SubElement(unicast, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-rtm")
        route = ET.SubElement(ipv6, "route")
        link_local_static_route_nh = ET.SubElement(route, "link-local-static-route-nh")
        link_local_static_route_dest_key = ET.SubElement(link_local_static_route_nh, "link-local-static-route-dest")
        link_local_static_route_dest_key.text = kwargs.pop('link_local_static_route_dest')
        link_local_route_oif_type_key = ET.SubElement(link_local_static_route_nh, "link-local-route-oif-type")
        link_local_route_oif_type_key.text = kwargs.pop('link_local_route_oif_type')
        link_local_route_oif_name_key = ET.SubElement(link_local_static_route_nh, "link-local-route-oif-name")
        link_local_route_oif_name_key.text = kwargs.pop('link_local_route_oif_name')
        link_local_nexthop = ET.SubElement(link_local_static_route_nh, "link-local-nexthop")
        link_local_nexthop.text = kwargs.pop('link_local_nexthop')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ipv6_unicast_ipv6_route_link_local_static_route_nh_link_local_route_oif_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        unicast = ET.SubElement(ipv6, "unicast")
        ipv6 = ET.SubElement(unicast, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-rtm")
        route = ET.SubElement(ipv6, "route")
        link_local_static_route_nh = ET.SubElement(route, "link-local-static-route-nh")
        link_local_static_route_dest_key = ET.SubElement(link_local_static_route_nh, "link-local-static-route-dest")
        link_local_static_route_dest_key.text = kwargs.pop('link_local_static_route_dest')
        link_local_nexthop_key = ET.SubElement(link_local_static_route_nh, "link-local-nexthop")
        link_local_nexthop_key.text = kwargs.pop('link_local_nexthop')
        link_local_route_oif_name_key = ET.SubElement(link_local_static_route_nh, "link-local-route-oif-name")
        link_local_route_oif_name_key.text = kwargs.pop('link_local_route_oif_name')
        link_local_route_oif_type = ET.SubElement(link_local_static_route_nh, "link-local-route-oif-type")
        link_local_route_oif_type.text = kwargs.pop('link_local_route_oif_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ipv6_unicast_ipv6_route_link_local_static_route_nh_link_local_route_oif_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        unicast = ET.SubElement(ipv6, "unicast")
        ipv6 = ET.SubElement(unicast, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-rtm")
        route = ET.SubElement(ipv6, "route")
        link_local_static_route_nh = ET.SubElement(route, "link-local-static-route-nh")
        link_local_static_route_dest_key = ET.SubElement(link_local_static_route_nh, "link-local-static-route-dest")
        link_local_static_route_dest_key.text = kwargs.pop('link_local_static_route_dest')
        link_local_nexthop_key = ET.SubElement(link_local_static_route_nh, "link-local-nexthop")
        link_local_nexthop_key.text = kwargs.pop('link_local_nexthop')
        link_local_route_oif_type_key = ET.SubElement(link_local_static_route_nh, "link-local-route-oif-type")
        link_local_route_oif_type_key.text = kwargs.pop('link_local_route_oif_type')
        link_local_route_oif_name = ET.SubElement(link_local_static_route_nh, "link-local-route-oif-name")
        link_local_route_oif_name.text = kwargs.pop('link_local_route_oif_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ipv6_unicast_ipv6_route_link_local_static_route_nh_route_attributes_metric(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        unicast = ET.SubElement(ipv6, "unicast")
        ipv6 = ET.SubElement(unicast, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-rtm")
        route = ET.SubElement(ipv6, "route")
        link_local_static_route_nh = ET.SubElement(route, "link-local-static-route-nh")
        link_local_static_route_dest_key = ET.SubElement(link_local_static_route_nh, "link-local-static-route-dest")
        link_local_static_route_dest_key.text = kwargs.pop('link_local_static_route_dest')
        link_local_nexthop_key = ET.SubElement(link_local_static_route_nh, "link-local-nexthop")
        link_local_nexthop_key.text = kwargs.pop('link_local_nexthop')
        link_local_route_oif_type_key = ET.SubElement(link_local_static_route_nh, "link-local-route-oif-type")
        link_local_route_oif_type_key.text = kwargs.pop('link_local_route_oif_type')
        link_local_route_oif_name_key = ET.SubElement(link_local_static_route_nh, "link-local-route-oif-name")
        link_local_route_oif_name_key.text = kwargs.pop('link_local_route_oif_name')
        route_attributes = ET.SubElement(link_local_static_route_nh, "route-attributes")
        metric = ET.SubElement(route_attributes, "metric")
        metric.text = kwargs.pop('metric')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ipv6_unicast_ipv6_route_link_local_static_route_nh_route_attributes_distance(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        unicast = ET.SubElement(ipv6, "unicast")
        ipv6 = ET.SubElement(unicast, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-rtm")
        route = ET.SubElement(ipv6, "route")
        link_local_static_route_nh = ET.SubElement(route, "link-local-static-route-nh")
        link_local_static_route_dest_key = ET.SubElement(link_local_static_route_nh, "link-local-static-route-dest")
        link_local_static_route_dest_key.text = kwargs.pop('link_local_static_route_dest')
        link_local_nexthop_key = ET.SubElement(link_local_static_route_nh, "link-local-nexthop")
        link_local_nexthop_key.text = kwargs.pop('link_local_nexthop')
        link_local_route_oif_type_key = ET.SubElement(link_local_static_route_nh, "link-local-route-oif-type")
        link_local_route_oif_type_key.text = kwargs.pop('link_local_route_oif_type')
        link_local_route_oif_name_key = ET.SubElement(link_local_static_route_nh, "link-local-route-oif-name")
        link_local_route_oif_name_key.text = kwargs.pop('link_local_route_oif_name')
        route_attributes = ET.SubElement(link_local_static_route_nh, "route-attributes")
        distance = ET.SubElement(route_attributes, "distance")
        distance.text = kwargs.pop('distance')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ipv6_unicast_ipv6_route_link_local_static_route_nh_route_attributes_tag(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        unicast = ET.SubElement(ipv6, "unicast")
        ipv6 = ET.SubElement(unicast, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-rtm")
        route = ET.SubElement(ipv6, "route")
        link_local_static_route_nh = ET.SubElement(route, "link-local-static-route-nh")
        link_local_static_route_dest_key = ET.SubElement(link_local_static_route_nh, "link-local-static-route-dest")
        link_local_static_route_dest_key.text = kwargs.pop('link_local_static_route_dest')
        link_local_nexthop_key = ET.SubElement(link_local_static_route_nh, "link-local-nexthop")
        link_local_nexthop_key.text = kwargs.pop('link_local_nexthop')
        link_local_route_oif_type_key = ET.SubElement(link_local_static_route_nh, "link-local-route-oif-type")
        link_local_route_oif_type_key.text = kwargs.pop('link_local_route_oif_type')
        link_local_route_oif_name_key = ET.SubElement(link_local_static_route_nh, "link-local-route-oif-name")
        link_local_route_oif_name_key.text = kwargs.pop('link_local_route_oif_name')
        route_attributes = ET.SubElement(link_local_static_route_nh, "route-attributes")
        tag = ET.SubElement(route_attributes, "tag")
        tag.text = kwargs.pop('tag')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ipv6_unicast_ipv6_route_static_route_nh_vrf_static_route_next_vrf_dest(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        unicast = ET.SubElement(ipv6, "unicast")
        ipv6 = ET.SubElement(unicast, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-rtm")
        route = ET.SubElement(ipv6, "route")
        static_route_nh_vrf = ET.SubElement(route, "static-route-nh-vrf")
        next_hop_vrf_key = ET.SubElement(static_route_nh_vrf, "next-hop-vrf")
        next_hop_vrf_key.text = kwargs.pop('next_hop_vrf')
        static_route_next_hop_key = ET.SubElement(static_route_nh_vrf, "static-route-next-hop")
        static_route_next_hop_key.text = kwargs.pop('static_route_next_hop')
        static_route_next_vrf_dest = ET.SubElement(static_route_nh_vrf, "static-route-next-vrf-dest")
        static_route_next_vrf_dest.text = kwargs.pop('static_route_next_vrf_dest')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ipv6_unicast_ipv6_route_static_route_nh_vrf_next_hop_vrf(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        unicast = ET.SubElement(ipv6, "unicast")
        ipv6 = ET.SubElement(unicast, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-rtm")
        route = ET.SubElement(ipv6, "route")
        static_route_nh_vrf = ET.SubElement(route, "static-route-nh-vrf")
        static_route_next_vrf_dest_key = ET.SubElement(static_route_nh_vrf, "static-route-next-vrf-dest")
        static_route_next_vrf_dest_key.text = kwargs.pop('static_route_next_vrf_dest')
        static_route_next_hop_key = ET.SubElement(static_route_nh_vrf, "static-route-next-hop")
        static_route_next_hop_key.text = kwargs.pop('static_route_next_hop')
        next_hop_vrf = ET.SubElement(static_route_nh_vrf, "next-hop-vrf")
        next_hop_vrf.text = kwargs.pop('next_hop_vrf')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ipv6_unicast_ipv6_route_static_route_nh_vrf_static_route_next_hop(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        unicast = ET.SubElement(ipv6, "unicast")
        ipv6 = ET.SubElement(unicast, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-rtm")
        route = ET.SubElement(ipv6, "route")
        static_route_nh_vrf = ET.SubElement(route, "static-route-nh-vrf")
        static_route_next_vrf_dest_key = ET.SubElement(static_route_nh_vrf, "static-route-next-vrf-dest")
        static_route_next_vrf_dest_key.text = kwargs.pop('static_route_next_vrf_dest')
        next_hop_vrf_key = ET.SubElement(static_route_nh_vrf, "next-hop-vrf")
        next_hop_vrf_key.text = kwargs.pop('next_hop_vrf')
        static_route_next_hop = ET.SubElement(static_route_nh_vrf, "static-route-next-hop")
        static_route_next_hop.text = kwargs.pop('static_route_next_hop')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ipv6_unicast_ipv6_imprt_routes_src_vrf(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        unicast = ET.SubElement(ipv6, "unicast")
        ipv6 = ET.SubElement(unicast, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-rtm")
        imprt = ET.SubElement(ipv6, "import")
        routes = ET.SubElement(imprt, "routes")
        route_map_key = ET.SubElement(routes, "route-map")
        route_map_key.text = kwargs.pop('route_map')
        src_vrf = ET.SubElement(routes, "src-vrf")
        src_vrf.text = kwargs.pop('src_vrf')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ipv6_unicast_ipv6_imprt_routes_route_map(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        unicast = ET.SubElement(ipv6, "unicast")
        ipv6 = ET.SubElement(unicast, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-rtm")
        imprt = ET.SubElement(ipv6, "import")
        routes = ET.SubElement(imprt, "routes")
        src_vrf_key = ET.SubElement(routes, "src-vrf")
        src_vrf_key.text = kwargs.pop('src_vrf')
        route_map = ET.SubElement(routes, "route-map")
        route_map.text = kwargs.pop('route_map')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_ip_vrf_router_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        ip = ET.SubElement(vrf, "ip")
        vrf_router_id = ET.SubElement(ip, "vrf-router-id")
        vrf_router_id.text = kwargs.pop('vrf_router_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_system_max_arp(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        system_max = ET.SubElement(rbridge_id, "system-max", xmlns="urn:brocade.com:mgmt:brocade-arp")
        arp = ET.SubElement(system_max, "arp")
        arp.text = kwargs.pop('arp')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_arp_entry_arp_ip_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        arp_entry = ET.SubElement(rbridge_id, "arp-entry", xmlns="urn:brocade.com:mgmt:brocade-arp")
        arp_ip_address = ET.SubElement(arp_entry, "arp-ip-address")
        arp_ip_address.text = kwargs.pop('arp_ip_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_arp_entry_mac_address_value(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        arp_entry = ET.SubElement(rbridge_id, "arp-entry", xmlns="urn:brocade.com:mgmt:brocade-arp")
        arp_ip_address_key = ET.SubElement(arp_entry, "arp-ip-address")
        arp_ip_address_key.text = kwargs.pop('arp_ip_address')
        mac_address_value = ET.SubElement(arp_entry, "mac-address-value")
        mac_address_value.text = kwargs.pop('mac_address_value')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_arp_entry_interfacename(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        arp_entry = ET.SubElement(rbridge_id, "arp-entry", xmlns="urn:brocade.com:mgmt:brocade-arp")
        arp_ip_address_key = ET.SubElement(arp_entry, "arp-ip-address")
        arp_ip_address_key.text = kwargs.pop('arp_ip_address')
        interfacename = ET.SubElement(arp_entry, "interfacename")
        interfacename.text = kwargs.pop('interfacename')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_arp_entry_interfacetype_GigabitEthernet_GigabitEthernet(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        arp_entry = ET.SubElement(rbridge_id, "arp-entry", xmlns="urn:brocade.com:mgmt:brocade-arp")
        arp_ip_address_key = ET.SubElement(arp_entry, "arp-ip-address")
        arp_ip_address_key.text = kwargs.pop('arp_ip_address')
        interfacetype = ET.SubElement(arp_entry, "interfacetype")
        GigabitEthernet = ET.SubElement(interfacetype, "GigabitEthernet")
        GigabitEthernet = ET.SubElement(GigabitEthernet, "GigabitEthernet")
        GigabitEthernet.text = kwargs.pop('GigabitEthernet')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_arp_entry_interfacetype_TenGigabitEthernet_TenGigabitEthernet(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        arp_entry = ET.SubElement(rbridge_id, "arp-entry", xmlns="urn:brocade.com:mgmt:brocade-arp")
        arp_ip_address_key = ET.SubElement(arp_entry, "arp-ip-address")
        arp_ip_address_key.text = kwargs.pop('arp_ip_address')
        interfacetype = ET.SubElement(arp_entry, "interfacetype")
        TenGigabitEthernet = ET.SubElement(interfacetype, "TenGigabitEthernet")
        TenGigabitEthernet = ET.SubElement(TenGigabitEthernet, "TenGigabitEthernet")
        TenGigabitEthernet.text = kwargs.pop('TenGigabitEthernet')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_arp_entry_interfacetype_FortyGigabitEthernet_FortyGigabitEthernet(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        arp_entry = ET.SubElement(rbridge_id, "arp-entry", xmlns="urn:brocade.com:mgmt:brocade-arp")
        arp_ip_address_key = ET.SubElement(arp_entry, "arp-ip-address")
        arp_ip_address_key.text = kwargs.pop('arp_ip_address')
        interfacetype = ET.SubElement(arp_entry, "interfacetype")
        FortyGigabitEthernet = ET.SubElement(interfacetype, "FortyGigabitEthernet")
        FortyGigabitEthernet = ET.SubElement(FortyGigabitEthernet, "FortyGigabitEthernet")
        FortyGigabitEthernet.text = kwargs.pop('FortyGigabitEthernet')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_arp_entry_interfacetype_HundredGigabitEthernet_HundredGigabitEthernet(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        arp_entry = ET.SubElement(rbridge_id, "arp-entry", xmlns="urn:brocade.com:mgmt:brocade-arp")
        arp_ip_address_key = ET.SubElement(arp_entry, "arp-ip-address")
        arp_ip_address_key.text = kwargs.pop('arp_ip_address')
        interfacetype = ET.SubElement(arp_entry, "interfacetype")
        HundredGigabitEthernet = ET.SubElement(interfacetype, "HundredGigabitEthernet")
        HundredGigabitEthernet = ET.SubElement(HundredGigabitEthernet, "HundredGigabitEthernet")
        HundredGigabitEthernet.text = kwargs.pop('HundredGigabitEthernet')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_arp_entry_interfacetype_Ve_Ve(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        arp_entry = ET.SubElement(rbridge_id, "arp-entry", xmlns="urn:brocade.com:mgmt:brocade-arp")
        arp_ip_address_key = ET.SubElement(arp_entry, "arp-ip-address")
        arp_ip_address_key.text = kwargs.pop('arp_ip_address')
        interfacetype = ET.SubElement(arp_entry, "interfacetype")
        Ve = ET.SubElement(interfacetype, "Ve")
        Ve = ET.SubElement(Ve, "Ve")
        Ve.text = kwargs.pop('Ve')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vcs_auto_shut_lag(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vcs = ET.SubElement(rbridge_id, "vcs", xmlns="http://brocade.com/ns/brocade-auto-shut-edge-port")
        auto_shut = ET.SubElement(vcs, "auto-shut")
        lag = ET.SubElement(auto_shut, "lag")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_chassis_virtual_ip(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        chassis = ET.SubElement(rbridge_id, "chassis", xmlns="urn:brocade.com:mgmt:brocade-chassis")
        virtual_ip = ET.SubElement(chassis, "virtual-ip")
        virtual_ip.text = kwargs.pop('virtual_ip')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_chassis_virtual_ipv6(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        chassis = ET.SubElement(rbridge_id, "chassis", xmlns="urn:brocade.com:mgmt:brocade-chassis")
        virtual_ipv6 = ET.SubElement(chassis, "virtual-ipv6")
        virtual_ipv6.text = kwargs.pop('virtual_ipv6')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_chassis_oper_address_virtual_oper_Vip_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        chassis = ET.SubElement(rbridge_id, "chassis", xmlns="urn:brocade.com:mgmt:brocade-chassis")
        oper_address = ET.SubElement(chassis, "oper-address")
        virtual_oper_Vip_address = ET.SubElement(oper_address, "virtual-oper-Vip-address")
        virtual_oper_Vip_address.text = kwargs.pop('virtual_oper_Vip_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_clock_timezone(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        clock = ET.SubElement(rbridge_id, "clock", xmlns="urn:brocade.com:mgmt:brocade-clock")
        timezone = ET.SubElement(clock, "timezone")
        timezone.text = kwargs.pop('timezone')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_fabric_ecmp_ecmp_load_balance(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        fabric = ET.SubElement(rbridge_id, "fabric", xmlns="urn:brocade.com:mgmt:brocade-fabric-service")
        ecmp = ET.SubElement(fabric, "ecmp")
        ecmp_load_balance = ET.SubElement(ecmp, "ecmp-load-balance")
        ecmp_load_balance.text = kwargs.pop('ecmp_load_balance')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_fabric_ecmp_load_balance_hash_swap(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        fabric = ET.SubElement(rbridge_id, "fabric", xmlns="urn:brocade.com:mgmt:brocade-fabric-service")
        ecmp = ET.SubElement(fabric, "ecmp")
        load_balance_hash_swap = ET.SubElement(ecmp, "load-balance-hash-swap")
        load_balance_hash_swap.text = kwargs.pop('load_balance_hash_swap')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_fabric_route_mcast_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        fabric = ET.SubElement(rbridge_id, "fabric", xmlns="urn:brocade.com:mgmt:brocade-fabric-service")
        route = ET.SubElement(fabric, "route")
        mcast = ET.SubElement(route, "mcast")
        priority = ET.SubElement(mcast, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_fabric_port_channel_po_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        fabric = ET.SubElement(rbridge_id, "fabric", xmlns="urn:brocade.com:mgmt:brocade-fabric-service")
        port_channel = ET.SubElement(fabric, "port-channel")
        po_id = ET.SubElement(port_channel, "po-id")
        po_id.text = kwargs.pop('po_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_fabric_port_channel_vlag_load_balance(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        fabric = ET.SubElement(rbridge_id, "fabric", xmlns="urn:brocade.com:mgmt:brocade-fabric-service")
        port_channel = ET.SubElement(fabric, "port-channel")
        po_id_key = ET.SubElement(port_channel, "po-id")
        po_id_key.text = kwargs.pop('po_id')
        vlag_load_balance = ET.SubElement(port_channel, "vlag-load-balance")
        vlag_load_balance.text = kwargs.pop('vlag_load_balance')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_fcsp_auth_proto_auth_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        fcsp = ET.SubElement(rbridge_id, "fcsp", xmlns="urn:brocade.com:mgmt:brocade-fc-auth")
        auth = ET.SubElement(fcsp, "auth")
        proto = ET.SubElement(auth, "proto")
        auth_type = ET.SubElement(proto, "auth-type")
        auth_type.text = kwargs.pop('auth_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_fcsp_auth_proto_group(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        fcsp = ET.SubElement(rbridge_id, "fcsp", xmlns="urn:brocade.com:mgmt:brocade-fc-auth")
        auth = ET.SubElement(fcsp, "auth")
        proto = ET.SubElement(auth, "proto")
        group = ET.SubElement(proto, "group")
        group.text = kwargs.pop('group')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_fcsp_auth_proto_hash(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        fcsp = ET.SubElement(rbridge_id, "fcsp", xmlns="urn:brocade.com:mgmt:brocade-fc-auth")
        auth = ET.SubElement(fcsp, "auth")
        proto = ET.SubElement(auth, "proto")
        hash = ET.SubElement(proto, "hash")
        hash.text = kwargs.pop('hash')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_fcsp_auth_policy_switch(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        fcsp = ET.SubElement(rbridge_id, "fcsp", xmlns="urn:brocade.com:mgmt:brocade-fc-auth")
        auth = ET.SubElement(fcsp, "auth")
        policy = ET.SubElement(auth, "policy")
        switch = ET.SubElement(policy, "switch")
        switch.text = kwargs.pop('switch')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_secpolicy_defined_policy_policies_policy(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        secpolicy = ET.SubElement(rbridge_id, "secpolicy", xmlns="urn:brocade.com:mgmt:brocade-fc-auth")
        defined_policy = ET.SubElement(secpolicy, "defined-policy")
        policies = ET.SubElement(defined_policy, "policies")
        policy = ET.SubElement(policies, "policy")
        policy.text = kwargs.pop('policy')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_secpolicy_defined_policy_policies_member_entry_member(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        secpolicy = ET.SubElement(rbridge_id, "secpolicy", xmlns="urn:brocade.com:mgmt:brocade-fc-auth")
        defined_policy = ET.SubElement(secpolicy, "defined-policy")
        policies = ET.SubElement(defined_policy, "policies")
        policy_key = ET.SubElement(policies, "policy")
        policy_key.text = kwargs.pop('policy')
        member_entry = ET.SubElement(policies, "member-entry")
        member = ET.SubElement(member_entry, "member")
        member.text = kwargs.pop('member')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_secpolicy_active_policy_policies_policy(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        secpolicy = ET.SubElement(rbridge_id, "secpolicy", xmlns="urn:brocade.com:mgmt:brocade-fc-auth")
        active_policy = ET.SubElement(secpolicy, "active-policy")
        policies = ET.SubElement(active_policy, "policies")
        policy = ET.SubElement(policies, "policy")
        policy.text = kwargs.pop('policy')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_secpolicy_active_policy_policies_member_entry_member(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        secpolicy = ET.SubElement(rbridge_id, "secpolicy", xmlns="urn:brocade.com:mgmt:brocade-fc-auth")
        active_policy = ET.SubElement(secpolicy, "active-policy")
        policies = ET.SubElement(active_policy, "policies")
        policy_key = ET.SubElement(policies, "policy")
        policy_key.text = kwargs.pop('policy')
        member_entry = ET.SubElement(policies, "member-entry")
        member = ET.SubElement(member_entry, "member")
        member.text = kwargs.pop('member')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_hardware_profile_tcam_predefined_tcam_profiletype(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        hardware_profile = ET.SubElement(rbridge_id, "hardware-profile", xmlns="urn:brocade.com:mgmt:brocade-hardware")
        tcam = ET.SubElement(hardware_profile, "tcam")
        predefined = ET.SubElement(tcam, "predefined")
        tcam_profiletype = ET.SubElement(predefined, "tcam_profiletype")
        tcam_profiletype.text = kwargs.pop('tcam_profiletype')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_hardware_profile_route_table_predefined_routing_profiletype(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        hardware_profile = ET.SubElement(rbridge_id, "hardware-profile", xmlns="urn:brocade.com:mgmt:brocade-hardware")
        route_table = ET.SubElement(hardware_profile, "route-table")
        predefined = ET.SubElement(route_table, "predefined")
        routing_profiletype = ET.SubElement(predefined, "routing_profiletype")
        routing_profiletype.text = kwargs.pop('routing_profiletype')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_http_server_shutdown(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        http = ET.SubElement(rbridge_id, "http", xmlns="urn:brocade.com:mgmt:brocade-http")
        server = ET.SubElement(http, "server")
        shutdown = ET.SubElement(server, "shutdown")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        name = ET.SubElement(route_map, "name")
        name.text = kwargs.pop('name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_action_rm(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        action_rm = ET.SubElement(route_map, "action-rm")
        action_rm.text = kwargs.pop('action_rm')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_instance(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance = ET.SubElement(route_map, "instance")
        instance.text = kwargs.pop('instance')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_match_ipv6_address_ipv6_prefix_list_rmm(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        match = ET.SubElement(content, "match")
        ipv6 = ET.SubElement(match, "ipv6")
        address = ET.SubElement(ipv6, "address")
        ipv6_prefix_list_rmm = ET.SubElement(address, "ipv6-prefix-list-rmm")
        ipv6_prefix_list_rmm.text = kwargs.pop('ipv6_prefix_list_rmm')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_match_ipv6_address_ipv6_acl_rmm(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        match = ET.SubElement(content, "match")
        ipv6 = ET.SubElement(match, "ipv6")
        address = ET.SubElement(ipv6, "address")
        ipv6_acl_rmm = ET.SubElement(address, "ipv6-acl-rmm")
        ipv6_acl_rmm.text = kwargs.pop('ipv6_acl_rmm')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_match_ipv6_next_hop_ipv6_prefix_list_rmm_n(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        match = ET.SubElement(content, "match")
        ipv6 = ET.SubElement(match, "ipv6")
        next_hop = ET.SubElement(ipv6, "next-hop")
        ipv6_prefix_list_rmm_n = ET.SubElement(next_hop, "ipv6-prefix-list-rmm-n")
        ipv6_prefix_list_rmm_n.text = kwargs.pop('ipv6_prefix_list_rmm_n')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_match_ipv6_route_source_ipv6_prefix_list_rmrs(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        match = ET.SubElement(content, "match")
        ipv6 = ET.SubElement(match, "ipv6")
        route_source = ET.SubElement(ipv6, "route-source")
        ipv6_prefix_list_rmrs = ET.SubElement(route_source, "ipv6-prefix-list-rmrs")
        ipv6_prefix_list_rmrs.text = kwargs.pop('ipv6_prefix_list_rmrs')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_match_ip_address_prefix_list_rmm(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        match = ET.SubElement(content, "match")
        ip = ET.SubElement(match, "ip")
        address = ET.SubElement(ip, "address")
        prefix_list_rmm = ET.SubElement(address, "prefix-list-rmm")
        prefix_list_rmm.text = kwargs.pop('prefix_list_rmm')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_match_ip_address_acl_rmm(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        match = ET.SubElement(content, "match")
        ip = ET.SubElement(match, "ip")
        address = ET.SubElement(ip, "address")
        acl_rmm = ET.SubElement(address, "acl-rmm")
        acl_rmm.text = kwargs.pop('acl_rmm')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_match_ip_next_hop_prefix_list_rmm_n(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        match = ET.SubElement(content, "match")
        ip = ET.SubElement(match, "ip")
        next_hop = ET.SubElement(ip, "next-hop")
        prefix_list_rmm_n = ET.SubElement(next_hop, "prefix-list-rmm-n")
        prefix_list_rmm_n.text = kwargs.pop('prefix_list_rmm_n')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_match_ip_route_source_prefix_list_rmrs(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        match = ET.SubElement(content, "match")
        ip = ET.SubElement(match, "ip")
        route_source = ET.SubElement(ip, "route-source")
        prefix_list_rmrs = ET.SubElement(route_source, "prefix-list-rmrs")
        prefix_list_rmrs.text = kwargs.pop('prefix_list_rmrs')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_match_extcommunity_extcommunity_num(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        match = ET.SubElement(content, "match")
        extcommunity = ET.SubElement(match, "extcommunity")
        extcommunity_num = ET.SubElement(extcommunity, "extcommunity-num")
        extcommunity_num.text = kwargs.pop('extcommunity_num')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_match_metric_metric_rmm(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        match = ET.SubElement(content, "match")
        metric = ET.SubElement(match, "metric")
        metric_rmm = ET.SubElement(metric, "metric-rmm")
        metric_rmm.text = kwargs.pop('metric_rmm')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_match_route_type_route_type_rmm(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        match = ET.SubElement(content, "match")
        route_type = ET.SubElement(match, "route-type")
        route_type_rmm = ET.SubElement(route_type, "route-type-rmm")
        route_type_rmm.text = kwargs.pop('route_type_rmm')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_match_as_path_as_path_access_list_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        match = ET.SubElement(content, "match")
        as_path = ET.SubElement(match, "as-path")
        as_path_access_list_name = ET.SubElement(as_path, "as-path-access-list-name")
        as_path_access_list_name.text = kwargs.pop('as_path_access_list_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_match_community_community_access_list_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        match = ET.SubElement(content, "match")
        community = ET.SubElement(match, "community")
        community_access_list_name = ET.SubElement(community, "community-access-list-name")
        community_access_list_name.text = kwargs.pop('community_access_list_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_match_next_hop_next_hop_filter_val(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        match = ET.SubElement(content, "match")
        next_hop = ET.SubElement(match, "next-hop")
        next_hop_filter_val = ET.SubElement(next_hop, "next-hop-filter-val")
        next_hop_filter_val.text = kwargs.pop('next_hop_filter_val')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_match_protocol_protocol_static_container_static(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        match = ET.SubElement(content, "match")
        protocol = ET.SubElement(match, "protocol")
        protocol_static_container = ET.SubElement(protocol, "protocol-static-container")
        static = ET.SubElement(protocol_static_container, "static")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_match_protocol_bgp_protocol_container_protocol_bgp(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        match = ET.SubElement(content, "match")
        protocol = ET.SubElement(match, "protocol")
        bgp_protocol_container = ET.SubElement(protocol, "bgp-protocol-container")
        protocol_bgp = ET.SubElement(bgp_protocol_container, "protocol-bgp")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_match_protocol_bgp_protocol_container_bgp_route_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        match = ET.SubElement(content, "match")
        protocol = ET.SubElement(match, "protocol")
        bgp_protocol_container = ET.SubElement(protocol, "bgp-protocol-container")
        bgp_route_type = ET.SubElement(bgp_protocol_container, "bgp-route-type")
        bgp_route_type.text = kwargs.pop('bgp_route_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_set_ip_dscp_dscp_rms(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        set = ET.SubElement(content, "set")
        ip = ET.SubElement(set, "ip")
        dscp = ET.SubElement(ip, "dscp")
        dscp_rms = ET.SubElement(dscp, "dscp-rms")
        dscp_rms.text = kwargs.pop('dscp_rms')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_set_ip_interface_null0(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        set = ET.SubElement(content, "set")
        ip = ET.SubElement(set, "ip")
        interface = ET.SubElement(ip, "interface")
        null0 = ET.SubElement(interface, "null0")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_set_ip_next_hop_peer_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        set = ET.SubElement(content, "set")
        ip = ET.SubElement(set, "ip")
        next_hop = ET.SubElement(ip, "next-hop")
        peer_address = ET.SubElement(next_hop, "peer-address")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_set_ip_globl_next_global_hop_next_hop(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        set = ET.SubElement(content, "set")
        ip = ET.SubElement(set, "ip")
        globl = ET.SubElement(ip, "global")
        next_global_hop = ET.SubElement(globl, "next-global-hop")
        next_hop = ET.SubElement(next_global_hop, "next-hop")
        next_hop.text = kwargs.pop('next_hop')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_set_ip_next_ip_next_hop_next_hop(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        set = ET.SubElement(content, "set")
        ip = ET.SubElement(set, "ip")
        next_ip = ET.SubElement(ip, "next-ip")
        next_hop = ET.SubElement(next_ip, "next-hop")
        next_hop = ET.SubElement(next_hop, "next-hop")
        next_hop.text = kwargs.pop('next_hop')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_set_ip_next_vrf_next_vrf_list_vrf(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        set = ET.SubElement(content, "set")
        ip = ET.SubElement(set, "ip")
        next_vrf = ET.SubElement(ip, "next-vrf")
        next_vrf_list = ET.SubElement(next_vrf, "next-vrf-list")
        next_hop_key = ET.SubElement(next_vrf_list, "next-hop")
        next_hop_key.text = kwargs.pop('next_hop')
        vrf = ET.SubElement(next_vrf_list, "vrf")
        vrf.text = kwargs.pop('vrf')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_set_ip_next_vrf_next_vrf_list_next_hop(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        set = ET.SubElement(content, "set")
        ip = ET.SubElement(set, "ip")
        next_vrf = ET.SubElement(ip, "next-vrf")
        next_vrf_list = ET.SubElement(next_vrf, "next-vrf-list")
        vrf_key = ET.SubElement(next_vrf_list, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        next_hop = ET.SubElement(next_vrf_list, "next-hop")
        next_hop.text = kwargs.pop('next_hop')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_set_ipv6_globl_next_global_hop_next_hop(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        set = ET.SubElement(content, "set")
        ipv6 = ET.SubElement(set, "ipv6")
        globl = ET.SubElement(ipv6, "global")
        next_global_hop = ET.SubElement(globl, "next-global-hop")
        next_hop = ET.SubElement(next_global_hop, "next-hop")
        next_hop.text = kwargs.pop('next_hop')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_set_ipv6_next_ip_next_hop_next_hop(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        set = ET.SubElement(content, "set")
        ipv6 = ET.SubElement(set, "ipv6")
        next_ip = ET.SubElement(ipv6, "next-ip")
        next_hop = ET.SubElement(next_ip, "next-hop")
        next_hop = ET.SubElement(next_hop, "next-hop")
        next_hop.text = kwargs.pop('next_hop')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_set_ipv6_next_vrf_next_vrf_list_vrf(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        set = ET.SubElement(content, "set")
        ipv6 = ET.SubElement(set, "ipv6")
        next_vrf = ET.SubElement(ipv6, "next-vrf")
        next_vrf_list = ET.SubElement(next_vrf, "next-vrf-list")
        next_hop_key = ET.SubElement(next_vrf_list, "next-hop")
        next_hop_key.text = kwargs.pop('next_hop')
        vrf = ET.SubElement(next_vrf_list, "vrf")
        vrf.text = kwargs.pop('vrf')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_set_ipv6_next_vrf_next_vrf_list_next_hop(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        set = ET.SubElement(content, "set")
        ipv6 = ET.SubElement(set, "ipv6")
        next_vrf = ET.SubElement(ipv6, "next-vrf")
        next_vrf_list = ET.SubElement(next_vrf, "next-vrf-list")
        vrf_key = ET.SubElement(next_vrf_list, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        next_hop = ET.SubElement(next_vrf_list, "next-hop")
        next_hop.text = kwargs.pop('next_hop')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_set_extcommunity_rt_ASN_NN_rt(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        set = ET.SubElement(content, "set")
        extcommunity = ET.SubElement(set, "extcommunity")
        rt = ET.SubElement(extcommunity, "rt")
        ASN_NN_rt = ET.SubElement(rt, "ASN-NN-rt")
        ASN_NN_rt.text = kwargs.pop('ASN_NN_rt')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_set_extcommunity_soo_ASN_NN_soo(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        set = ET.SubElement(content, "set")
        extcommunity = ET.SubElement(set, "extcommunity")
        soo = ET.SubElement(extcommunity, "soo")
        ASN_NN_soo = ET.SubElement(soo, "ASN-NN-soo")
        ASN_NN_soo.text = kwargs.pop('ASN_NN_soo')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_set_community_set_community_expr(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        set = ET.SubElement(content, "set")
        community = ET.SubElement(set, "community")
        set_community_expr = ET.SubElement(community, "set-community-expr")
        set_community_expr.text = kwargs.pop('set_community_expr')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_set_metric_delta_rms(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        set = ET.SubElement(content, "set")
        metric = ET.SubElement(set, "metric")
        delta_rms = ET.SubElement(metric, "delta-rms")
        delta_rms.text = kwargs.pop('delta_rms')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_set_metric_metric_rms(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        set = ET.SubElement(content, "set")
        metric = ET.SubElement(set, "metric")
        metric_rms = ET.SubElement(metric, "metric-rms")
        metric_rms.text = kwargs.pop('metric_rms')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_set_distance_dist_rms(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        set = ET.SubElement(content, "set")
        distance = ET.SubElement(set, "distance")
        dist_rms = ET.SubElement(distance, "dist-rms")
        dist_rms.text = kwargs.pop('dist_rms')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_set_route_type_route_type_rms(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        set = ET.SubElement(content, "set")
        route_type = ET.SubElement(set, "route-type")
        route_type_rms = ET.SubElement(route_type, "route-type-rms")
        route_type_rms.text = kwargs.pop('route_type_rms')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_set_tag_tag_rms(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        set = ET.SubElement(content, "set")
        tag = ET.SubElement(set, "tag")
        tag_rms = ET.SubElement(tag, "tag-rms")
        tag_rms.text = kwargs.pop('tag_rms')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_set_weight_weight_value(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        set = ET.SubElement(content, "set")
        weight = ET.SubElement(set, "weight")
        weight_value = ET.SubElement(weight, "weight-value")
        weight_value.text = kwargs.pop('weight_value')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_set_as_path_aspath_tag(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        set = ET.SubElement(content, "set")
        as_path = ET.SubElement(set, "as-path")
        aspath_tag = ET.SubElement(as_path, "aspath-tag")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_set_as_path_prepend(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        set = ET.SubElement(content, "set")
        as_path = ET.SubElement(set, "as-path")
        prepend = ET.SubElement(as_path, "prepend")
        prepend.text = kwargs.pop('prepend')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_set_automatic_tag_tag_empty(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        set = ET.SubElement(content, "set")
        automatic_tag = ET.SubElement(set, "automatic-tag")
        tag_empty = ET.SubElement(automatic_tag, "tag-empty")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_set_comm_list_comm_list_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        set = ET.SubElement(content, "set")
        comm_list = ET.SubElement(set, "comm-list")
        comm_list_name = ET.SubElement(comm_list, "comm-list-name")
        comm_list_name.text = kwargs.pop('comm_list_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_set_comm_list_match_comm_delete(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        set = ET.SubElement(content, "set")
        comm_list = ET.SubElement(set, "comm-list")
        match_comm_delete = ET.SubElement(comm_list, "match-comm-delete")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_set_dampening_half_life(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        set = ET.SubElement(content, "set")
        dampening = ET.SubElement(set, "dampening")
        half_life = ET.SubElement(dampening, "half-life")
        half_life.text = kwargs.pop('half_life')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_set_dampening_reuse(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        set = ET.SubElement(content, "set")
        dampening = ET.SubElement(set, "dampening")
        reuse = ET.SubElement(dampening, "reuse")
        reuse.text = kwargs.pop('reuse')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_set_dampening_suppress(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        set = ET.SubElement(content, "set")
        dampening = ET.SubElement(set, "dampening")
        suppress = ET.SubElement(dampening, "suppress")
        suppress.text = kwargs.pop('suppress')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_set_dampening_max_suppress_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        set = ET.SubElement(content, "set")
        dampening = ET.SubElement(set, "dampening")
        max_suppress_time = ET.SubElement(dampening, "max-suppress-time")
        max_suppress_time.text = kwargs.pop('max_suppress_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_set_local_preference_local_preference_value(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        set = ET.SubElement(content, "set")
        local_preference = ET.SubElement(set, "local-preference")
        local_preference_value = ET.SubElement(local_preference, "local-preference-value")
        local_preference_value.text = kwargs.pop('local_preference_value')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_set_origin_origin_igp(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        set = ET.SubElement(content, "set")
        origin = ET.SubElement(set, "origin")
        origin_igp = ET.SubElement(origin, "origin-igp")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_set_origin_origin_incomplete(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        set = ET.SubElement(content, "set")
        origin = ET.SubElement(set, "origin")
        origin_incomplete = ET.SubElement(origin, "origin-incomplete")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_set_metric_type_external(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        set = ET.SubElement(content, "set")
        metric_type = ET.SubElement(set, "metric-type")
        external = ET.SubElement(metric_type, "external")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_set_metric_type_internal(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        set = ET.SubElement(content, "set")
        metric_type = ET.SubElement(set, "metric-type")
        internal = ET.SubElement(metric_type, "internal")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_set_metric_type_type_1(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        set = ET.SubElement(content, "set")
        metric_type = ET.SubElement(set, "metric-type")
        type_1 = ET.SubElement(metric_type, "type-1")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_set_metric_type_type_2(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        set = ET.SubElement(content, "set")
        metric_type = ET.SubElement(set, "metric-type")
        type_2 = ET.SubElement(metric_type, "type-2")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_continue_holder_cont(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        continue_holder = ET.SubElement(content, "continue-holder")
        cont = ET.SubElement(continue_holder, "continue")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_continue_holder_continue_val(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        continue_holder = ET.SubElement(content, "continue-holder")
        continue_val = ET.SubElement(continue_holder, "continue-val")
        continue_val.text = kwargs.pop('continue_val')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_filter_change_update_delay_filter_delay_value(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        filter_change_update_delay = ET.SubElement(rbridge_id, "filter-change-update-delay", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        filter_delay_value = ET.SubElement(filter_change_update_delay, "filter-delay-value")
        filter_delay_value.text = kwargs.pop('filter_delay_value')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_global_lc_holder_linecard_linecards_linecardName(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        global_lc_holder = ET.SubElement(rbridge_id, "global-lc-holder", xmlns="urn:brocade.com:mgmt:brocade-linecard-management")
        linecard = ET.SubElement(global_lc_holder, "linecard")
        linecards = ET.SubElement(linecard, "linecards")
        linecardName = ET.SubElement(linecards, "linecardName")
        linecardName.text = kwargs.pop('linecardName')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_global_lc_holder_linecard_linecards_linecardType(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        global_lc_holder = ET.SubElement(rbridge_id, "global-lc-holder", xmlns="urn:brocade.com:mgmt:brocade-linecard-management")
        linecard = ET.SubElement(global_lc_holder, "linecard")
        linecards = ET.SubElement(linecard, "linecards")
        linecardName_key = ET.SubElement(linecards, "linecardName")
        linecardName_key.text = kwargs.pop('linecardName')
        linecardType = ET.SubElement(linecards, "linecardType")
        linecardType.text = kwargs.pop('linecardType')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_logical_chassis_principal_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        logical_chassis = ET.SubElement(rbridge_id, "logical-chassis", xmlns="http://brocade.com/ns/brocade-logical-chassis")
        principal_priority = ET.SubElement(logical_chassis, "principal-priority")
        principal_priority.text = kwargs.pop('principal_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_qos_tx_queue_tx_queue_limit(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        qos = ET.SubElement(rbridge_id, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        tx_queue = ET.SubElement(qos, "tx-queue")
        tx_queue_limit = ET.SubElement(tx_queue, "tx-queue-limit")
        tx_queue_limit.text = kwargs.pop('tx_queue_limit')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_qos_rcv_queue_rcv_queue_limit(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        qos = ET.SubElement(rbridge_id, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        rcv_queue = ET.SubElement(qos, "rcv-queue")
        rcv_queue_limit = ET.SubElement(rcv_queue, "rcv-queue-limit")
        rcv_queue_limit.text = kwargs.pop('rcv_queue_limit')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_telnet_server_shutdown(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        telnet = ET.SubElement(rbridge_id, "telnet", xmlns="urn:brocade.com:mgmt:brocade-sec-services")
        server = ET.SubElement(telnet, "server")
        shutdown = ET.SubElement(server, "shutdown")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_telnet_server_standby_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        telnet = ET.SubElement(rbridge_id, "telnet", xmlns="urn:brocade.com:mgmt:brocade-sec-services")
        server = ET.SubElement(telnet, "server")
        standby = ET.SubElement(server, "standby")
        enable = ET.SubElement(standby, "enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ssh_server_shutdown(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ssh = ET.SubElement(rbridge_id, "ssh", xmlns="urn:brocade.com:mgmt:brocade-sec-services")
        server = ET.SubElement(ssh, "server")
        shutdown = ET.SubElement(server, "shutdown")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ssh_server_key_exchange_protocol(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ssh = ET.SubElement(rbridge_id, "ssh", xmlns="urn:brocade.com:mgmt:brocade-sec-services")
        server = ET.SubElement(ssh, "server")
        key_exchange = ET.SubElement(server, "key-exchange")
        protocol = ET.SubElement(key_exchange, "protocol")
        protocol.text = kwargs.pop('protocol')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ssh_server_rekey_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ssh = ET.SubElement(rbridge_id, "ssh", xmlns="urn:brocade.com:mgmt:brocade-sec-services")
        server = ET.SubElement(ssh, "server")
        rekey_interval = ET.SubElement(server, "rekey-interval")
        rekey_interval.text = kwargs.pop('rekey_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ssh_server_cipher(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ssh = ET.SubElement(rbridge_id, "ssh", xmlns="urn:brocade.com:mgmt:brocade-sec-services")
        server = ET.SubElement(ssh, "server")
        cipher = ET.SubElement(server, "cipher")
        cipher.text = kwargs.pop('cipher')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ssh_server_standby_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ssh = ET.SubElement(rbridge_id, "ssh", xmlns="urn:brocade.com:mgmt:brocade-sec-services")
        server = ET.SubElement(ssh, "server")
        standby = ET.SubElement(server, "standby")
        enable = ET.SubElement(standby, "enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ssh_server_key_rsa(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ssh = ET.SubElement(rbridge_id, "ssh", xmlns="urn:brocade.com:mgmt:brocade-sec-services")
        server = ET.SubElement(ssh, "server")
        key = ET.SubElement(server, "key")
        rsa = ET.SubElement(key, "rsa")
        rsa.text = kwargs.pop('rsa')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ssh_server_key_ecdsa(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ssh = ET.SubElement(rbridge_id, "ssh", xmlns="urn:brocade.com:mgmt:brocade-sec-services")
        server = ET.SubElement(ssh, "server")
        key = ET.SubElement(server, "key")
        ecdsa = ET.SubElement(key, "ecdsa")
        ecdsa.text = kwargs.pop('ecdsa')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ssh_server_key_dsa(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ssh = ET.SubElement(rbridge_id, "ssh", xmlns="urn:brocade.com:mgmt:brocade-sec-services")
        server = ET.SubElement(ssh, "server")
        key = ET.SubElement(server, "key")
        dsa = ET.SubElement(key, "dsa")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ssh_client_cipher(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ssh = ET.SubElement(rbridge_id, "ssh", xmlns="urn:brocade.com:mgmt:brocade-sec-services")
        client = ET.SubElement(ssh, "client")
        cipher = ET.SubElement(client, "cipher")
        cipher.text = kwargs.pop('cipher')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_snmp_server_engineID_local(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        snmp_server = ET.SubElement(rbridge_id, "snmp-server", xmlns="urn:brocade.com:mgmt:brocade-snmp")
        engineID = ET.SubElement(snmp_server, "engineID")
        local = ET.SubElement(engineID, "local")
        local.text = kwargs.pop('local')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_snmp_server_user_username(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        snmp_server = ET.SubElement(rbridge_id, "snmp-server", xmlns="urn:brocade.com:mgmt:brocade-snmp")
        user = ET.SubElement(snmp_server, "user")
        username = ET.SubElement(user, "username")
        username.text = kwargs.pop('username')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_snmp_server_user_groupname(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        snmp_server = ET.SubElement(rbridge_id, "snmp-server", xmlns="urn:brocade.com:mgmt:brocade-snmp")
        user = ET.SubElement(snmp_server, "user")
        username_key = ET.SubElement(user, "username")
        username_key.text = kwargs.pop('username')
        groupname = ET.SubElement(user, "groupname")
        groupname.text = kwargs.pop('groupname')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_snmp_server_user_auth(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        snmp_server = ET.SubElement(rbridge_id, "snmp-server", xmlns="urn:brocade.com:mgmt:brocade-snmp")
        user = ET.SubElement(snmp_server, "user")
        username_key = ET.SubElement(user, "username")
        username_key.text = kwargs.pop('username')
        auth = ET.SubElement(user, "auth")
        auth.text = kwargs.pop('auth')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_snmp_server_user_auth_password(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        snmp_server = ET.SubElement(rbridge_id, "snmp-server", xmlns="urn:brocade.com:mgmt:brocade-snmp")
        user = ET.SubElement(snmp_server, "user")
        username_key = ET.SubElement(user, "username")
        username_key.text = kwargs.pop('username')
        auth_password = ET.SubElement(user, "auth-password")
        auth_password.text = kwargs.pop('auth_password')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_snmp_server_user_priv(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        snmp_server = ET.SubElement(rbridge_id, "snmp-server", xmlns="urn:brocade.com:mgmt:brocade-snmp")
        user = ET.SubElement(snmp_server, "user")
        username_key = ET.SubElement(user, "username")
        username_key.text = kwargs.pop('username')
        priv = ET.SubElement(user, "priv")
        priv.text = kwargs.pop('priv')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_snmp_server_user_priv_password(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        snmp_server = ET.SubElement(rbridge_id, "snmp-server", xmlns="urn:brocade.com:mgmt:brocade-snmp")
        user = ET.SubElement(snmp_server, "user")
        username_key = ET.SubElement(user, "username")
        username_key.text = kwargs.pop('username')
        priv_password = ET.SubElement(user, "priv-password")
        priv_password.text = kwargs.pop('priv_password')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_snmp_server_user_encrypted(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        snmp_server = ET.SubElement(rbridge_id, "snmp-server", xmlns="urn:brocade.com:mgmt:brocade-snmp")
        user = ET.SubElement(snmp_server, "user")
        username_key = ET.SubElement(user, "username")
        username_key.text = kwargs.pop('username')
        encrypted = ET.SubElement(user, "encrypted")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_snmp_server_v3host_hostip(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        snmp_server = ET.SubElement(rbridge_id, "snmp-server", xmlns="urn:brocade.com:mgmt:brocade-snmp")
        v3host = ET.SubElement(snmp_server, "v3host")
        username_key = ET.SubElement(v3host, "username")
        username_key.text = kwargs.pop('username')
        hostip = ET.SubElement(v3host, "hostip")
        hostip.text = kwargs.pop('hostip')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_snmp_server_v3host_username(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        snmp_server = ET.SubElement(rbridge_id, "snmp-server", xmlns="urn:brocade.com:mgmt:brocade-snmp")
        v3host = ET.SubElement(snmp_server, "v3host")
        hostip_key = ET.SubElement(v3host, "hostip")
        hostip_key.text = kwargs.pop('hostip')
        username = ET.SubElement(v3host, "username")
        username.text = kwargs.pop('username')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_snmp_server_v3host_udp_port(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        snmp_server = ET.SubElement(rbridge_id, "snmp-server", xmlns="urn:brocade.com:mgmt:brocade-snmp")
        v3host = ET.SubElement(snmp_server, "v3host")
        hostip_key = ET.SubElement(v3host, "hostip")
        hostip_key.text = kwargs.pop('hostip')
        username_key = ET.SubElement(v3host, "username")
        username_key.text = kwargs.pop('username')
        udp_port = ET.SubElement(v3host, "udp-port")
        udp_port.text = kwargs.pop('udp_port')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_snmp_server_v3host_notifytype(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        snmp_server = ET.SubElement(rbridge_id, "snmp-server", xmlns="urn:brocade.com:mgmt:brocade-snmp")
        v3host = ET.SubElement(snmp_server, "v3host")
        hostip_key = ET.SubElement(v3host, "hostip")
        hostip_key.text = kwargs.pop('hostip')
        username_key = ET.SubElement(v3host, "username")
        username_key.text = kwargs.pop('username')
        notifytype = ET.SubElement(v3host, "notifytype")
        notifytype.text = kwargs.pop('notifytype')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_snmp_server_v3host_engineid(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        snmp_server = ET.SubElement(rbridge_id, "snmp-server", xmlns="urn:brocade.com:mgmt:brocade-snmp")
        v3host = ET.SubElement(snmp_server, "v3host")
        hostip_key = ET.SubElement(v3host, "hostip")
        hostip_key.text = kwargs.pop('hostip')
        username_key = ET.SubElement(v3host, "username")
        username_key.text = kwargs.pop('username')
        engineid = ET.SubElement(v3host, "engineid")
        engineid.text = kwargs.pop('engineid')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_snmp_server_v3host_severity_level(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        snmp_server = ET.SubElement(rbridge_id, "snmp-server", xmlns="urn:brocade.com:mgmt:brocade-snmp")
        v3host = ET.SubElement(snmp_server, "v3host")
        hostip_key = ET.SubElement(v3host, "hostip")
        hostip_key.text = kwargs.pop('hostip')
        username_key = ET.SubElement(v3host, "username")
        username_key.text = kwargs.pop('username')
        severity_level = ET.SubElement(v3host, "severity-level")
        severity_level.text = kwargs.pop('severity_level')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_system_monitor_fan_threshold_marginal_threshold(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        system_monitor = ET.SubElement(rbridge_id, "system-monitor", xmlns="urn:brocade.com:mgmt:brocade-system-monitor")
        fan = ET.SubElement(system_monitor, "fan")
        threshold = ET.SubElement(fan, "threshold")
        marginal_threshold = ET.SubElement(threshold, "marginal-threshold")
        marginal_threshold.text = kwargs.pop('marginal_threshold')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_system_monitor_fan_threshold_down_threshold(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        system_monitor = ET.SubElement(rbridge_id, "system-monitor", xmlns="urn:brocade.com:mgmt:brocade-system-monitor")
        fan = ET.SubElement(system_monitor, "fan")
        threshold = ET.SubElement(fan, "threshold")
        down_threshold = ET.SubElement(threshold, "down-threshold")
        down_threshold.text = kwargs.pop('down_threshold')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_system_monitor_fan_alert_state(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        system_monitor = ET.SubElement(rbridge_id, "system-monitor", xmlns="urn:brocade.com:mgmt:brocade-system-monitor")
        fan = ET.SubElement(system_monitor, "fan")
        alert = ET.SubElement(fan, "alert")
        state = ET.SubElement(alert, "state")
        state.text = kwargs.pop('state')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_system_monitor_fan_alert_action(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        system_monitor = ET.SubElement(rbridge_id, "system-monitor", xmlns="urn:brocade.com:mgmt:brocade-system-monitor")
        fan = ET.SubElement(system_monitor, "fan")
        alert = ET.SubElement(fan, "alert")
        action = ET.SubElement(alert, "action")
        action.text = kwargs.pop('action')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_system_monitor_power_threshold_marginal_threshold(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        system_monitor = ET.SubElement(rbridge_id, "system-monitor", xmlns="urn:brocade.com:mgmt:brocade-system-monitor")
        power = ET.SubElement(system_monitor, "power")
        threshold = ET.SubElement(power, "threshold")
        marginal_threshold = ET.SubElement(threshold, "marginal-threshold")
        marginal_threshold.text = kwargs.pop('marginal_threshold')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_system_monitor_power_threshold_down_threshold(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        system_monitor = ET.SubElement(rbridge_id, "system-monitor", xmlns="urn:brocade.com:mgmt:brocade-system-monitor")
        power = ET.SubElement(system_monitor, "power")
        threshold = ET.SubElement(power, "threshold")
        down_threshold = ET.SubElement(threshold, "down-threshold")
        down_threshold.text = kwargs.pop('down_threshold')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_system_monitor_power_alert_state(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        system_monitor = ET.SubElement(rbridge_id, "system-monitor", xmlns="urn:brocade.com:mgmt:brocade-system-monitor")
        power = ET.SubElement(system_monitor, "power")
        alert = ET.SubElement(power, "alert")
        state = ET.SubElement(alert, "state")
        state.text = kwargs.pop('state')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_system_monitor_power_alert_action(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        system_monitor = ET.SubElement(rbridge_id, "system-monitor", xmlns="urn:brocade.com:mgmt:brocade-system-monitor")
        power = ET.SubElement(system_monitor, "power")
        alert = ET.SubElement(power, "alert")
        action = ET.SubElement(alert, "action")
        action.text = kwargs.pop('action')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_system_monitor_temp_threshold_marginal_threshold(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        system_monitor = ET.SubElement(rbridge_id, "system-monitor", xmlns="urn:brocade.com:mgmt:brocade-system-monitor")
        temp = ET.SubElement(system_monitor, "temp")
        threshold = ET.SubElement(temp, "threshold")
        marginal_threshold = ET.SubElement(threshold, "marginal-threshold")
        marginal_threshold.text = kwargs.pop('marginal_threshold')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_system_monitor_temp_threshold_down_threshold(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        system_monitor = ET.SubElement(rbridge_id, "system-monitor", xmlns="urn:brocade.com:mgmt:brocade-system-monitor")
        temp = ET.SubElement(system_monitor, "temp")
        threshold = ET.SubElement(temp, "threshold")
        down_threshold = ET.SubElement(threshold, "down-threshold")
        down_threshold.text = kwargs.pop('down_threshold')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_system_monitor_cid_card_threshold_marginal_threshold(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        system_monitor = ET.SubElement(rbridge_id, "system-monitor", xmlns="urn:brocade.com:mgmt:brocade-system-monitor")
        cid_card = ET.SubElement(system_monitor, "cid-card")
        threshold = ET.SubElement(cid_card, "threshold")
        marginal_threshold = ET.SubElement(threshold, "marginal-threshold")
        marginal_threshold.text = kwargs.pop('marginal_threshold')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_system_monitor_cid_card_threshold_down_threshold(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        system_monitor = ET.SubElement(rbridge_id, "system-monitor", xmlns="urn:brocade.com:mgmt:brocade-system-monitor")
        cid_card = ET.SubElement(system_monitor, "cid-card")
        threshold = ET.SubElement(cid_card, "threshold")
        down_threshold = ET.SubElement(threshold, "down-threshold")
        down_threshold.text = kwargs.pop('down_threshold')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_system_monitor_cid_card_alert_state(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        system_monitor = ET.SubElement(rbridge_id, "system-monitor", xmlns="urn:brocade.com:mgmt:brocade-system-monitor")
        cid_card = ET.SubElement(system_monitor, "cid-card")
        alert = ET.SubElement(cid_card, "alert")
        state = ET.SubElement(alert, "state")
        state.text = kwargs.pop('state')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_system_monitor_cid_card_alert_action(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        system_monitor = ET.SubElement(rbridge_id, "system-monitor", xmlns="urn:brocade.com:mgmt:brocade-system-monitor")
        cid_card = ET.SubElement(system_monitor, "cid-card")
        alert = ET.SubElement(cid_card, "alert")
        action = ET.SubElement(alert, "action")
        action.text = kwargs.pop('action')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_system_monitor_sfp_alert_state(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        system_monitor = ET.SubElement(rbridge_id, "system-monitor", xmlns="urn:brocade.com:mgmt:brocade-system-monitor")
        sfp = ET.SubElement(system_monitor, "sfp")
        alert = ET.SubElement(sfp, "alert")
        state = ET.SubElement(alert, "state")
        state.text = kwargs.pop('state')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_system_monitor_sfp_alert_action(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        system_monitor = ET.SubElement(rbridge_id, "system-monitor", xmlns="urn:brocade.com:mgmt:brocade-system-monitor")
        sfp = ET.SubElement(system_monitor, "sfp")
        alert = ET.SubElement(sfp, "alert")
        action = ET.SubElement(alert, "action")
        action.text = kwargs.pop('action')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_system_monitor_compact_flash_threshold_marginal_threshold(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        system_monitor = ET.SubElement(rbridge_id, "system-monitor", xmlns="urn:brocade.com:mgmt:brocade-system-monitor")
        compact_flash = ET.SubElement(system_monitor, "compact-flash")
        threshold = ET.SubElement(compact_flash, "threshold")
        marginal_threshold = ET.SubElement(threshold, "marginal-threshold")
        marginal_threshold.text = kwargs.pop('marginal_threshold')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_system_monitor_compact_flash_threshold_down_threshold(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        system_monitor = ET.SubElement(rbridge_id, "system-monitor", xmlns="urn:brocade.com:mgmt:brocade-system-monitor")
        compact_flash = ET.SubElement(system_monitor, "compact-flash")
        threshold = ET.SubElement(compact_flash, "threshold")
        down_threshold = ET.SubElement(threshold, "down-threshold")
        down_threshold.text = kwargs.pop('down_threshold')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_system_monitor_MM_threshold_marginal_threshold(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        system_monitor = ET.SubElement(rbridge_id, "system-monitor", xmlns="urn:brocade.com:mgmt:brocade-system-monitor")
        MM = ET.SubElement(system_monitor, "MM")
        threshold = ET.SubElement(MM, "threshold")
        marginal_threshold = ET.SubElement(threshold, "marginal-threshold")
        marginal_threshold.text = kwargs.pop('marginal_threshold')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_system_monitor_MM_threshold_down_threshold(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        system_monitor = ET.SubElement(rbridge_id, "system-monitor", xmlns="urn:brocade.com:mgmt:brocade-system-monitor")
        MM = ET.SubElement(system_monitor, "MM")
        threshold = ET.SubElement(MM, "threshold")
        down_threshold = ET.SubElement(threshold, "down-threshold")
        down_threshold.text = kwargs.pop('down_threshold')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_system_monitor_LineCard_threshold_marginal_threshold(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        system_monitor = ET.SubElement(rbridge_id, "system-monitor", xmlns="urn:brocade.com:mgmt:brocade-system-monitor")
        LineCard = ET.SubElement(system_monitor, "LineCard")
        threshold = ET.SubElement(LineCard, "threshold")
        marginal_threshold = ET.SubElement(threshold, "marginal-threshold")
        marginal_threshold.text = kwargs.pop('marginal_threshold')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_system_monitor_LineCard_threshold_down_threshold(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        system_monitor = ET.SubElement(rbridge_id, "system-monitor", xmlns="urn:brocade.com:mgmt:brocade-system-monitor")
        LineCard = ET.SubElement(system_monitor, "LineCard")
        threshold = ET.SubElement(LineCard, "threshold")
        down_threshold = ET.SubElement(threshold, "down-threshold")
        down_threshold.text = kwargs.pop('down_threshold')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_system_monitor_LineCard_alert_state(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        system_monitor = ET.SubElement(rbridge_id, "system-monitor", xmlns="urn:brocade.com:mgmt:brocade-system-monitor")
        LineCard = ET.SubElement(system_monitor, "LineCard")
        alert = ET.SubElement(LineCard, "alert")
        state = ET.SubElement(alert, "state")
        state.text = kwargs.pop('state')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_system_monitor_LineCard_alert_action(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        system_monitor = ET.SubElement(rbridge_id, "system-monitor", xmlns="urn:brocade.com:mgmt:brocade-system-monitor")
        LineCard = ET.SubElement(system_monitor, "LineCard")
        alert = ET.SubElement(LineCard, "alert")
        action = ET.SubElement(alert, "action")
        action.text = kwargs.pop('action')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_system_monitor_SFM_threshold_marginal_threshold(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        system_monitor = ET.SubElement(rbridge_id, "system-monitor", xmlns="urn:brocade.com:mgmt:brocade-system-monitor")
        SFM = ET.SubElement(system_monitor, "SFM")
        threshold = ET.SubElement(SFM, "threshold")
        marginal_threshold = ET.SubElement(threshold, "marginal-threshold")
        marginal_threshold.text = kwargs.pop('marginal_threshold')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_system_monitor_SFM_threshold_down_threshold(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        system_monitor = ET.SubElement(rbridge_id, "system-monitor", xmlns="urn:brocade.com:mgmt:brocade-system-monitor")
        SFM = ET.SubElement(system_monitor, "SFM")
        threshold = ET.SubElement(SFM, "threshold")
        down_threshold = ET.SubElement(threshold, "down-threshold")
        down_threshold.text = kwargs.pop('down_threshold')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_threshold_monitor_sfp_apply(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        threshold_monitor = ET.SubElement(rbridge_id, "threshold-monitor", xmlns="urn:brocade.com:mgmt:brocade-threshold-monitor")
        sfp = ET.SubElement(threshold_monitor, "sfp")
        apply = ET.SubElement(sfp, "apply")
        apply.text = kwargs.pop('apply')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_threshold_monitor_sfp_pause(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        threshold_monitor = ET.SubElement(rbridge_id, "threshold-monitor", xmlns="urn:brocade.com:mgmt:brocade-threshold-monitor")
        sfp = ET.SubElement(threshold_monitor, "sfp")
        pause = ET.SubElement(sfp, "pause")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_threshold_monitor_sfp_policy_policy_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        threshold_monitor = ET.SubElement(rbridge_id, "threshold-monitor", xmlns="urn:brocade.com:mgmt:brocade-threshold-monitor")
        sfp = ET.SubElement(threshold_monitor, "sfp")
        policy = ET.SubElement(sfp, "policy")
        policy_name = ET.SubElement(policy, "policy_name")
        policy_name.text = kwargs.pop('policy_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_threshold_monitor_sfp_policy_area_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        threshold_monitor = ET.SubElement(rbridge_id, "threshold-monitor", xmlns="urn:brocade.com:mgmt:brocade-threshold-monitor")
        sfp = ET.SubElement(threshold_monitor, "sfp")
        policy = ET.SubElement(sfp, "policy")
        policy_name_key = ET.SubElement(policy, "policy_name")
        policy_name_key.text = kwargs.pop('policy_name')
        area = ET.SubElement(policy, "area")
        area_value_key = ET.SubElement(area, "area_value")
        area_value_key.text = kwargs.pop('area_value')
        type = ET.SubElement(area, "type")
        type.text = kwargs.pop('type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_threshold_monitor_sfp_policy_area_area_value(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        threshold_monitor = ET.SubElement(rbridge_id, "threshold-monitor", xmlns="urn:brocade.com:mgmt:brocade-threshold-monitor")
        sfp = ET.SubElement(threshold_monitor, "sfp")
        policy = ET.SubElement(sfp, "policy")
        policy_name_key = ET.SubElement(policy, "policy_name")
        policy_name_key.text = kwargs.pop('policy_name')
        area = ET.SubElement(policy, "area")
        type_key = ET.SubElement(area, "type")
        type_key.text = kwargs.pop('type')
        area_value = ET.SubElement(area, "area_value")
        area_value.text = kwargs.pop('area_value')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_threshold_monitor_sfp_policy_area_threshold_high_threshold(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        threshold_monitor = ET.SubElement(rbridge_id, "threshold-monitor", xmlns="urn:brocade.com:mgmt:brocade-threshold-monitor")
        sfp = ET.SubElement(threshold_monitor, "sfp")
        policy = ET.SubElement(sfp, "policy")
        policy_name_key = ET.SubElement(policy, "policy_name")
        policy_name_key.text = kwargs.pop('policy_name')
        area = ET.SubElement(policy, "area")
        type_key = ET.SubElement(area, "type")
        type_key.text = kwargs.pop('type')
        area_value_key = ET.SubElement(area, "area_value")
        area_value_key.text = kwargs.pop('area_value')
        threshold = ET.SubElement(area, "threshold")
        high_threshold = ET.SubElement(threshold, "high-threshold")
        high_threshold.text = kwargs.pop('high_threshold')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_threshold_monitor_sfp_policy_area_threshold_low_threshold(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        threshold_monitor = ET.SubElement(rbridge_id, "threshold-monitor", xmlns="urn:brocade.com:mgmt:brocade-threshold-monitor")
        sfp = ET.SubElement(threshold_monitor, "sfp")
        policy = ET.SubElement(sfp, "policy")
        policy_name_key = ET.SubElement(policy, "policy_name")
        policy_name_key.text = kwargs.pop('policy_name')
        area = ET.SubElement(policy, "area")
        type_key = ET.SubElement(area, "type")
        type_key.text = kwargs.pop('type')
        area_value_key = ET.SubElement(area, "area_value")
        area_value_key.text = kwargs.pop('area_value')
        threshold = ET.SubElement(area, "threshold")
        low_threshold = ET.SubElement(threshold, "low-threshold")
        low_threshold.text = kwargs.pop('low_threshold')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_threshold_monitor_sfp_policy_area_threshold_buffer(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        threshold_monitor = ET.SubElement(rbridge_id, "threshold-monitor", xmlns="urn:brocade.com:mgmt:brocade-threshold-monitor")
        sfp = ET.SubElement(threshold_monitor, "sfp")
        policy = ET.SubElement(sfp, "policy")
        policy_name_key = ET.SubElement(policy, "policy_name")
        policy_name_key.text = kwargs.pop('policy_name')
        area = ET.SubElement(policy, "area")
        type_key = ET.SubElement(area, "type")
        type_key.text = kwargs.pop('type')
        area_value_key = ET.SubElement(area, "area_value")
        area_value_key.text = kwargs.pop('area_value')
        threshold = ET.SubElement(area, "threshold")
        buffer = ET.SubElement(threshold, "buffer")
        buffer.text = kwargs.pop('buffer')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_threshold_monitor_sfp_policy_area_alert_above_above_highthresh_action(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        threshold_monitor = ET.SubElement(rbridge_id, "threshold-monitor", xmlns="urn:brocade.com:mgmt:brocade-threshold-monitor")
        sfp = ET.SubElement(threshold_monitor, "sfp")
        policy = ET.SubElement(sfp, "policy")
        policy_name_key = ET.SubElement(policy, "policy_name")
        policy_name_key.text = kwargs.pop('policy_name')
        area = ET.SubElement(policy, "area")
        type_key = ET.SubElement(area, "type")
        type_key.text = kwargs.pop('type')
        area_value_key = ET.SubElement(area, "area_value")
        area_value_key.text = kwargs.pop('area_value')
        alert = ET.SubElement(area, "alert")
        above = ET.SubElement(alert, "above")
        above_highthresh_action = ET.SubElement(above, "above-highthresh-action")
        above_highthresh_action.text = kwargs.pop('above_highthresh_action')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_threshold_monitor_sfp_policy_area_alert_below_below_highthresh_action(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        threshold_monitor = ET.SubElement(rbridge_id, "threshold-monitor", xmlns="urn:brocade.com:mgmt:brocade-threshold-monitor")
        sfp = ET.SubElement(threshold_monitor, "sfp")
        policy = ET.SubElement(sfp, "policy")
        policy_name_key = ET.SubElement(policy, "policy_name")
        policy_name_key.text = kwargs.pop('policy_name')
        area = ET.SubElement(policy, "area")
        type_key = ET.SubElement(area, "type")
        type_key.text = kwargs.pop('type')
        area_value_key = ET.SubElement(area, "area_value")
        area_value_key.text = kwargs.pop('area_value')
        alert = ET.SubElement(area, "alert")
        below = ET.SubElement(alert, "below")
        below_highthresh_action = ET.SubElement(below, "below-highthresh-action")
        below_highthresh_action.text = kwargs.pop('below_highthresh_action')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_threshold_monitor_sfp_policy_area_alert_below_below_lowthresh_action(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        threshold_monitor = ET.SubElement(rbridge_id, "threshold-monitor", xmlns="urn:brocade.com:mgmt:brocade-threshold-monitor")
        sfp = ET.SubElement(threshold_monitor, "sfp")
        policy = ET.SubElement(sfp, "policy")
        policy_name_key = ET.SubElement(policy, "policy_name")
        policy_name_key.text = kwargs.pop('policy_name')
        area = ET.SubElement(policy, "area")
        type_key = ET.SubElement(area, "type")
        type_key.text = kwargs.pop('type')
        area_value_key = ET.SubElement(area, "area_value")
        area_value_key.text = kwargs.pop('area_value')
        alert = ET.SubElement(area, "alert")
        below = ET.SubElement(alert, "below")
        below_lowthresh_action = ET.SubElement(below, "below-lowthresh-action")
        below_lowthresh_action.text = kwargs.pop('below_lowthresh_action')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_threshold_monitor_security_apply(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        threshold_monitor = ET.SubElement(rbridge_id, "threshold-monitor", xmlns="urn:brocade.com:mgmt:brocade-threshold-monitor")
        security = ET.SubElement(threshold_monitor, "security")
        apply = ET.SubElement(security, "apply")
        apply.text = kwargs.pop('apply')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_threshold_monitor_security_pause(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        threshold_monitor = ET.SubElement(rbridge_id, "threshold-monitor", xmlns="urn:brocade.com:mgmt:brocade-threshold-monitor")
        security = ET.SubElement(threshold_monitor, "security")
        pause = ET.SubElement(security, "pause")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_threshold_monitor_security_policy_sec_policy_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        threshold_monitor = ET.SubElement(rbridge_id, "threshold-monitor", xmlns="urn:brocade.com:mgmt:brocade-threshold-monitor")
        security = ET.SubElement(threshold_monitor, "security")
        policy = ET.SubElement(security, "policy")
        sec_policy_name = ET.SubElement(policy, "sec_policy_name")
        sec_policy_name.text = kwargs.pop('sec_policy_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_threshold_monitor_security_policy_area_sec_area_value(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        threshold_monitor = ET.SubElement(rbridge_id, "threshold-monitor", xmlns="urn:brocade.com:mgmt:brocade-threshold-monitor")
        security = ET.SubElement(threshold_monitor, "security")
        policy = ET.SubElement(security, "policy")
        sec_policy_name_key = ET.SubElement(policy, "sec_policy_name")
        sec_policy_name_key.text = kwargs.pop('sec_policy_name')
        area = ET.SubElement(policy, "area")
        sec_area_value = ET.SubElement(area, "sec_area_value")
        sec_area_value.text = kwargs.pop('sec_area_value')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_threshold_monitor_security_policy_area_timebase(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        threshold_monitor = ET.SubElement(rbridge_id, "threshold-monitor", xmlns="urn:brocade.com:mgmt:brocade-threshold-monitor")
        security = ET.SubElement(threshold_monitor, "security")
        policy = ET.SubElement(security, "policy")
        sec_policy_name_key = ET.SubElement(policy, "sec_policy_name")
        sec_policy_name_key.text = kwargs.pop('sec_policy_name')
        area = ET.SubElement(policy, "area")
        sec_area_value_key = ET.SubElement(area, "sec_area_value")
        sec_area_value_key.text = kwargs.pop('sec_area_value')
        timebase = ET.SubElement(area, "timebase")
        timebase.text = kwargs.pop('timebase')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_threshold_monitor_security_policy_area_threshold_sec_high_threshold(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        threshold_monitor = ET.SubElement(rbridge_id, "threshold-monitor", xmlns="urn:brocade.com:mgmt:brocade-threshold-monitor")
        security = ET.SubElement(threshold_monitor, "security")
        policy = ET.SubElement(security, "policy")
        sec_policy_name_key = ET.SubElement(policy, "sec_policy_name")
        sec_policy_name_key.text = kwargs.pop('sec_policy_name')
        area = ET.SubElement(policy, "area")
        sec_area_value_key = ET.SubElement(area, "sec_area_value")
        sec_area_value_key.text = kwargs.pop('sec_area_value')
        threshold = ET.SubElement(area, "threshold")
        sec_high_threshold = ET.SubElement(threshold, "sec-high-threshold")
        sec_high_threshold.text = kwargs.pop('sec_high_threshold')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_threshold_monitor_security_policy_area_threshold_sec_low_threshold(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        threshold_monitor = ET.SubElement(rbridge_id, "threshold-monitor", xmlns="urn:brocade.com:mgmt:brocade-threshold-monitor")
        security = ET.SubElement(threshold_monitor, "security")
        policy = ET.SubElement(security, "policy")
        sec_policy_name_key = ET.SubElement(policy, "sec_policy_name")
        sec_policy_name_key.text = kwargs.pop('sec_policy_name')
        area = ET.SubElement(policy, "area")
        sec_area_value_key = ET.SubElement(area, "sec_area_value")
        sec_area_value_key.text = kwargs.pop('sec_area_value')
        threshold = ET.SubElement(area, "threshold")
        sec_low_threshold = ET.SubElement(threshold, "sec-low-threshold")
        sec_low_threshold.text = kwargs.pop('sec_low_threshold')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_threshold_monitor_security_policy_area_threshold_sec_buffer(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        threshold_monitor = ET.SubElement(rbridge_id, "threshold-monitor", xmlns="urn:brocade.com:mgmt:brocade-threshold-monitor")
        security = ET.SubElement(threshold_monitor, "security")
        policy = ET.SubElement(security, "policy")
        sec_policy_name_key = ET.SubElement(policy, "sec_policy_name")
        sec_policy_name_key.text = kwargs.pop('sec_policy_name')
        area = ET.SubElement(policy, "area")
        sec_area_value_key = ET.SubElement(area, "sec_area_value")
        sec_area_value_key.text = kwargs.pop('sec_area_value')
        threshold = ET.SubElement(area, "threshold")
        sec_buffer = ET.SubElement(threshold, "sec-buffer")
        sec_buffer.text = kwargs.pop('sec_buffer')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_threshold_monitor_security_policy_area_alert_above_sec_above_highthresh_action(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        threshold_monitor = ET.SubElement(rbridge_id, "threshold-monitor", xmlns="urn:brocade.com:mgmt:brocade-threshold-monitor")
        security = ET.SubElement(threshold_monitor, "security")
        policy = ET.SubElement(security, "policy")
        sec_policy_name_key = ET.SubElement(policy, "sec_policy_name")
        sec_policy_name_key.text = kwargs.pop('sec_policy_name')
        area = ET.SubElement(policy, "area")
        sec_area_value_key = ET.SubElement(area, "sec_area_value")
        sec_area_value_key.text = kwargs.pop('sec_area_value')
        alert = ET.SubElement(area, "alert")
        above = ET.SubElement(alert, "above")
        sec_above_highthresh_action = ET.SubElement(above, "sec-above-highthresh-action")
        sec_above_highthresh_action.text = kwargs.pop('sec_above_highthresh_action')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_threshold_monitor_security_policy_area_alert_below_sec_below_highthresh_action(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        threshold_monitor = ET.SubElement(rbridge_id, "threshold-monitor", xmlns="urn:brocade.com:mgmt:brocade-threshold-monitor")
        security = ET.SubElement(threshold_monitor, "security")
        policy = ET.SubElement(security, "policy")
        sec_policy_name_key = ET.SubElement(policy, "sec_policy_name")
        sec_policy_name_key.text = kwargs.pop('sec_policy_name')
        area = ET.SubElement(policy, "area")
        sec_area_value_key = ET.SubElement(area, "sec_area_value")
        sec_area_value_key.text = kwargs.pop('sec_area_value')
        alert = ET.SubElement(area, "alert")
        below = ET.SubElement(alert, "below")
        sec_below_highthresh_action = ET.SubElement(below, "sec-below-highthresh-action")
        sec_below_highthresh_action.text = kwargs.pop('sec_below_highthresh_action')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_threshold_monitor_security_policy_area_alert_below_sec_below_lowthresh_action(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        threshold_monitor = ET.SubElement(rbridge_id, "threshold-monitor", xmlns="urn:brocade.com:mgmt:brocade-threshold-monitor")
        security = ET.SubElement(threshold_monitor, "security")
        policy = ET.SubElement(security, "policy")
        sec_policy_name_key = ET.SubElement(policy, "sec_policy_name")
        sec_policy_name_key.text = kwargs.pop('sec_policy_name')
        area = ET.SubElement(policy, "area")
        sec_area_value_key = ET.SubElement(area, "sec_area_value")
        sec_area_value_key.text = kwargs.pop('sec_area_value')
        alert = ET.SubElement(area, "alert")
        below = ET.SubElement(alert, "below")
        sec_below_lowthresh_action = ET.SubElement(below, "sec-below-lowthresh-action")
        sec_below_lowthresh_action.text = kwargs.pop('sec_below_lowthresh_action')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_threshold_monitor_Cpu_poll(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        threshold_monitor = ET.SubElement(rbridge_id, "threshold-monitor", xmlns="urn:brocade.com:mgmt:brocade-threshold-monitor")
        Cpu = ET.SubElement(threshold_monitor, "Cpu")
        poll = ET.SubElement(Cpu, "poll")
        poll.text = kwargs.pop('poll')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_threshold_monitor_Cpu_retry(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        threshold_monitor = ET.SubElement(rbridge_id, "threshold-monitor", xmlns="urn:brocade.com:mgmt:brocade-threshold-monitor")
        Cpu = ET.SubElement(threshold_monitor, "Cpu")
        retry = ET.SubElement(Cpu, "retry")
        retry.text = kwargs.pop('retry')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_threshold_monitor_Cpu_limit(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        threshold_monitor = ET.SubElement(rbridge_id, "threshold-monitor", xmlns="urn:brocade.com:mgmt:brocade-threshold-monitor")
        Cpu = ET.SubElement(threshold_monitor, "Cpu")
        limit = ET.SubElement(Cpu, "limit")
        limit.text = kwargs.pop('limit')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_threshold_monitor_Cpu_actions(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        threshold_monitor = ET.SubElement(rbridge_id, "threshold-monitor", xmlns="urn:brocade.com:mgmt:brocade-threshold-monitor")
        Cpu = ET.SubElement(threshold_monitor, "Cpu")
        actions = ET.SubElement(Cpu, "actions")
        actions.text = kwargs.pop('actions')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_threshold_monitor_Memory_poll(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        threshold_monitor = ET.SubElement(rbridge_id, "threshold-monitor", xmlns="urn:brocade.com:mgmt:brocade-threshold-monitor")
        Memory = ET.SubElement(threshold_monitor, "Memory")
        poll = ET.SubElement(Memory, "poll")
        poll.text = kwargs.pop('poll')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_threshold_monitor_Memory_retry(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        threshold_monitor = ET.SubElement(rbridge_id, "threshold-monitor", xmlns="urn:brocade.com:mgmt:brocade-threshold-monitor")
        Memory = ET.SubElement(threshold_monitor, "Memory")
        retry = ET.SubElement(Memory, "retry")
        retry.text = kwargs.pop('retry')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_threshold_monitor_Memory_limit(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        threshold_monitor = ET.SubElement(rbridge_id, "threshold-monitor", xmlns="urn:brocade.com:mgmt:brocade-threshold-monitor")
        Memory = ET.SubElement(threshold_monitor, "Memory")
        limit = ET.SubElement(Memory, "limit")
        limit.text = kwargs.pop('limit')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_threshold_monitor_Memory_high_limit(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        threshold_monitor = ET.SubElement(rbridge_id, "threshold-monitor", xmlns="urn:brocade.com:mgmt:brocade-threshold-monitor")
        Memory = ET.SubElement(threshold_monitor, "Memory")
        high_limit = ET.SubElement(Memory, "high-limit")
        high_limit.text = kwargs.pop('high_limit')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_threshold_monitor_Memory_low_limit(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        threshold_monitor = ET.SubElement(rbridge_id, "threshold-monitor", xmlns="urn:brocade.com:mgmt:brocade-threshold-monitor")
        Memory = ET.SubElement(threshold_monitor, "Memory")
        low_limit = ET.SubElement(Memory, "low-limit")
        low_limit.text = kwargs.pop('low_limit')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_threshold_monitor_Memory_actions(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        threshold_monitor = ET.SubElement(rbridge_id, "threshold-monitor", xmlns="urn:brocade.com:mgmt:brocade-threshold-monitor")
        Memory = ET.SubElement(threshold_monitor, "Memory")
        actions = ET.SubElement(Memory, "actions")
        actions.text = kwargs.pop('actions')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_threshold_monitor_interface_apply(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        threshold_monitor = ET.SubElement(rbridge_id, "threshold-monitor", xmlns="urn:brocade.com:mgmt:brocade-threshold-monitor")
        interface = ET.SubElement(threshold_monitor, "interface")
        apply = ET.SubElement(interface, "apply")
        apply.text = kwargs.pop('apply')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_threshold_monitor_interface_pause(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        threshold_monitor = ET.SubElement(rbridge_id, "threshold-monitor", xmlns="urn:brocade.com:mgmt:brocade-threshold-monitor")
        interface = ET.SubElement(threshold_monitor, "interface")
        pause = ET.SubElement(interface, "pause")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_threshold_monitor_interface_policy_policy_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        threshold_monitor = ET.SubElement(rbridge_id, "threshold-monitor", xmlns="urn:brocade.com:mgmt:brocade-threshold-monitor")
        interface = ET.SubElement(threshold_monitor, "interface")
        policy = ET.SubElement(interface, "policy")
        policy_name = ET.SubElement(policy, "policy_name")
        policy_name.text = kwargs.pop('policy_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_threshold_monitor_interface_policy_area_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        threshold_monitor = ET.SubElement(rbridge_id, "threshold-monitor", xmlns="urn:brocade.com:mgmt:brocade-threshold-monitor")
        interface = ET.SubElement(threshold_monitor, "interface")
        policy = ET.SubElement(interface, "policy")
        policy_name_key = ET.SubElement(policy, "policy_name")
        policy_name_key.text = kwargs.pop('policy_name')
        area = ET.SubElement(policy, "area")
        area_value_key = ET.SubElement(area, "area_value")
        area_value_key.text = kwargs.pop('area_value')
        type = ET.SubElement(area, "type")
        type.text = kwargs.pop('type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_threshold_monitor_interface_policy_area_area_value(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        threshold_monitor = ET.SubElement(rbridge_id, "threshold-monitor", xmlns="urn:brocade.com:mgmt:brocade-threshold-monitor")
        interface = ET.SubElement(threshold_monitor, "interface")
        policy = ET.SubElement(interface, "policy")
        policy_name_key = ET.SubElement(policy, "policy_name")
        policy_name_key.text = kwargs.pop('policy_name')
        area = ET.SubElement(policy, "area")
        type_key = ET.SubElement(area, "type")
        type_key.text = kwargs.pop('type')
        area_value = ET.SubElement(area, "area_value")
        area_value.text = kwargs.pop('area_value')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_threshold_monitor_interface_policy_area_threshold_timebase_value(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        threshold_monitor = ET.SubElement(rbridge_id, "threshold-monitor", xmlns="urn:brocade.com:mgmt:brocade-threshold-monitor")
        interface = ET.SubElement(threshold_monitor, "interface")
        policy = ET.SubElement(interface, "policy")
        policy_name_key = ET.SubElement(policy, "policy_name")
        policy_name_key.text = kwargs.pop('policy_name')
        area = ET.SubElement(policy, "area")
        type_key = ET.SubElement(area, "type")
        type_key.text = kwargs.pop('type')
        area_value_key = ET.SubElement(area, "area_value")
        area_value_key.text = kwargs.pop('area_value')
        threshold = ET.SubElement(area, "threshold")
        timebase_value = ET.SubElement(threshold, "timebase_value")
        timebase_value.text = kwargs.pop('timebase_value')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_threshold_monitor_interface_policy_area_threshold_high_threshold(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        threshold_monitor = ET.SubElement(rbridge_id, "threshold-monitor", xmlns="urn:brocade.com:mgmt:brocade-threshold-monitor")
        interface = ET.SubElement(threshold_monitor, "interface")
        policy = ET.SubElement(interface, "policy")
        policy_name_key = ET.SubElement(policy, "policy_name")
        policy_name_key.text = kwargs.pop('policy_name')
        area = ET.SubElement(policy, "area")
        type_key = ET.SubElement(area, "type")
        type_key.text = kwargs.pop('type')
        area_value_key = ET.SubElement(area, "area_value")
        area_value_key.text = kwargs.pop('area_value')
        threshold = ET.SubElement(area, "threshold")
        high_threshold = ET.SubElement(threshold, "high-threshold")
        high_threshold.text = kwargs.pop('high_threshold')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_threshold_monitor_interface_policy_area_threshold_low_threshold(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        threshold_monitor = ET.SubElement(rbridge_id, "threshold-monitor", xmlns="urn:brocade.com:mgmt:brocade-threshold-monitor")
        interface = ET.SubElement(threshold_monitor, "interface")
        policy = ET.SubElement(interface, "policy")
        policy_name_key = ET.SubElement(policy, "policy_name")
        policy_name_key.text = kwargs.pop('policy_name')
        area = ET.SubElement(policy, "area")
        type_key = ET.SubElement(area, "type")
        type_key.text = kwargs.pop('type')
        area_value_key = ET.SubElement(area, "area_value")
        area_value_key.text = kwargs.pop('area_value')
        threshold = ET.SubElement(area, "threshold")
        low_threshold = ET.SubElement(threshold, "low-threshold")
        low_threshold.text = kwargs.pop('low_threshold')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_threshold_monitor_interface_policy_area_threshold_buffer(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        threshold_monitor = ET.SubElement(rbridge_id, "threshold-monitor", xmlns="urn:brocade.com:mgmt:brocade-threshold-monitor")
        interface = ET.SubElement(threshold_monitor, "interface")
        policy = ET.SubElement(interface, "policy")
        policy_name_key = ET.SubElement(policy, "policy_name")
        policy_name_key.text = kwargs.pop('policy_name')
        area = ET.SubElement(policy, "area")
        type_key = ET.SubElement(area, "type")
        type_key.text = kwargs.pop('type')
        area_value_key = ET.SubElement(area, "area_value")
        area_value_key.text = kwargs.pop('area_value')
        threshold = ET.SubElement(area, "threshold")
        buffer = ET.SubElement(threshold, "buffer")
        buffer.text = kwargs.pop('buffer')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_threshold_monitor_interface_policy_area_alert_above_above_highthresh_action(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        threshold_monitor = ET.SubElement(rbridge_id, "threshold-monitor", xmlns="urn:brocade.com:mgmt:brocade-threshold-monitor")
        interface = ET.SubElement(threshold_monitor, "interface")
        policy = ET.SubElement(interface, "policy")
        policy_name_key = ET.SubElement(policy, "policy_name")
        policy_name_key.text = kwargs.pop('policy_name')
        area = ET.SubElement(policy, "area")
        type_key = ET.SubElement(area, "type")
        type_key.text = kwargs.pop('type')
        area_value_key = ET.SubElement(area, "area_value")
        area_value_key.text = kwargs.pop('area_value')
        alert = ET.SubElement(area, "alert")
        above = ET.SubElement(alert, "above")
        above_highthresh_action = ET.SubElement(above, "above-highthresh-action")
        above_highthresh_action.text = kwargs.pop('above_highthresh_action')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_threshold_monitor_interface_policy_area_alert_above_above_lowthresh_action(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        threshold_monitor = ET.SubElement(rbridge_id, "threshold-monitor", xmlns="urn:brocade.com:mgmt:brocade-threshold-monitor")
        interface = ET.SubElement(threshold_monitor, "interface")
        policy = ET.SubElement(interface, "policy")
        policy_name_key = ET.SubElement(policy, "policy_name")
        policy_name_key.text = kwargs.pop('policy_name')
        area = ET.SubElement(policy, "area")
        type_key = ET.SubElement(area, "type")
        type_key.text = kwargs.pop('type')
        area_value_key = ET.SubElement(area, "area_value")
        area_value_key.text = kwargs.pop('area_value')
        alert = ET.SubElement(area, "alert")
        above = ET.SubElement(alert, "above")
        above_lowthresh_action = ET.SubElement(above, "above-lowthresh-action")
        above_lowthresh_action.text = kwargs.pop('above_lowthresh_action')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_threshold_monitor_interface_policy_area_alert_below_below_highthresh_action(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        threshold_monitor = ET.SubElement(rbridge_id, "threshold-monitor", xmlns="urn:brocade.com:mgmt:brocade-threshold-monitor")
        interface = ET.SubElement(threshold_monitor, "interface")
        policy = ET.SubElement(interface, "policy")
        policy_name_key = ET.SubElement(policy, "policy_name")
        policy_name_key.text = kwargs.pop('policy_name')
        area = ET.SubElement(policy, "area")
        type_key = ET.SubElement(area, "type")
        type_key.text = kwargs.pop('type')
        area_value_key = ET.SubElement(area, "area_value")
        area_value_key.text = kwargs.pop('area_value')
        alert = ET.SubElement(area, "alert")
        below = ET.SubElement(alert, "below")
        below_highthresh_action = ET.SubElement(below, "below-highthresh-action")
        below_highthresh_action.text = kwargs.pop('below_highthresh_action')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_threshold_monitor_interface_policy_area_alert_below_below_lowthresh_action(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        threshold_monitor = ET.SubElement(rbridge_id, "threshold-monitor", xmlns="urn:brocade.com:mgmt:brocade-threshold-monitor")
        interface = ET.SubElement(threshold_monitor, "interface")
        policy = ET.SubElement(interface, "policy")
        policy_name_key = ET.SubElement(policy, "policy_name")
        policy_name_key.text = kwargs.pop('policy_name')
        area = ET.SubElement(policy, "area")
        type_key = ET.SubElement(area, "type")
        type_key.text = kwargs.pop('type')
        area_value_key = ET.SubElement(area, "area_value")
        area_value_key.text = kwargs.pop('area_value')
        alert = ET.SubElement(area, "alert")
        below = ET.SubElement(alert, "below")
        below_lowthresh_action = ET.SubElement(below, "below-lowthresh-action")
        below_lowthresh_action.text = kwargs.pop('below_lowthresh_action')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrrp_rbridge_global_vrrp_acceptmode_disable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrrp_rbridge_global = ET.SubElement(rbridge_id, "vrrp-rbridge-global", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrrp_acceptmode_disable = ET.SubElement(vrrp_rbridge_global, "vrrp-acceptmode-disable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_rbridge_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id.text = kwargs.pop('rbridge_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_swbd_number(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        swbd_number = ET.SubElement(rbridge_id, "swbd-number")
        swbd_number.text = kwargs.pop('swbd_number')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_nodespecific_ns_vlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface_nodespecific = ET.SubElement(rbridge_id, "interface-nodespecific")
        ns_vlan = ET.SubElement(interface_nodespecific, "ns-vlan")
        ns_vlan.text = kwargs.pop('ns_vlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_nodespecific_ns_ethernet(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface_nodespecific = ET.SubElement(rbridge_id, "interface-nodespecific")
        ns_ethernet = ET.SubElement(interface_nodespecific, "ns-ethernet")
        ns_ethernet.text = kwargs.pop('ns_ethernet')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ip_prefix_list_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ip = ET.SubElement(rbridge_id, "ip")
        prefix_list = ET.SubElement(ip, "prefix-list", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        seq_keyword_key = ET.SubElement(prefix_list, "seq-keyword")
        seq_keyword_key.text = kwargs.pop('seq_keyword')
        instance_key = ET.SubElement(prefix_list, "instance")
        instance_key.text = kwargs.pop('instance')
        name = ET.SubElement(prefix_list, "name")
        name.text = kwargs.pop('name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ip_prefix_list_seq_keyword(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ip = ET.SubElement(rbridge_id, "ip")
        prefix_list = ET.SubElement(ip, "prefix-list", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(prefix_list, "name")
        name_key.text = kwargs.pop('name')
        instance_key = ET.SubElement(prefix_list, "instance")
        instance_key.text = kwargs.pop('instance')
        seq_keyword = ET.SubElement(prefix_list, "seq-keyword")
        seq_keyword.text = kwargs.pop('seq_keyword')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ip_prefix_list_instance(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ip = ET.SubElement(rbridge_id, "ip")
        prefix_list = ET.SubElement(ip, "prefix-list", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(prefix_list, "name")
        name_key.text = kwargs.pop('name')
        seq_keyword_key = ET.SubElement(prefix_list, "seq-keyword")
        seq_keyword_key.text = kwargs.pop('seq_keyword')
        instance = ET.SubElement(prefix_list, "instance")
        instance.text = kwargs.pop('instance')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ip_prefix_list_action_ipp(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ip = ET.SubElement(rbridge_id, "ip")
        prefix_list = ET.SubElement(ip, "prefix-list", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(prefix_list, "name")
        name_key.text = kwargs.pop('name')
        seq_keyword_key = ET.SubElement(prefix_list, "seq-keyword")
        seq_keyword_key.text = kwargs.pop('seq_keyword')
        instance_key = ET.SubElement(prefix_list, "instance")
        instance_key.text = kwargs.pop('instance')
        action_ipp = ET.SubElement(prefix_list, "action-ipp")
        action_ipp.text = kwargs.pop('action_ipp')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ip_prefix_list_prefix_ipp(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ip = ET.SubElement(rbridge_id, "ip")
        prefix_list = ET.SubElement(ip, "prefix-list", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(prefix_list, "name")
        name_key.text = kwargs.pop('name')
        seq_keyword_key = ET.SubElement(prefix_list, "seq-keyword")
        seq_keyword_key.text = kwargs.pop('seq_keyword')
        instance_key = ET.SubElement(prefix_list, "instance")
        instance_key.text = kwargs.pop('instance')
        prefix_ipp = ET.SubElement(prefix_list, "prefix-ipp")
        prefix_ipp.text = kwargs.pop('prefix_ipp')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ip_prefix_list_ge_ipp(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ip = ET.SubElement(rbridge_id, "ip")
        prefix_list = ET.SubElement(ip, "prefix-list", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(prefix_list, "name")
        name_key.text = kwargs.pop('name')
        seq_keyword_key = ET.SubElement(prefix_list, "seq-keyword")
        seq_keyword_key.text = kwargs.pop('seq_keyword')
        instance_key = ET.SubElement(prefix_list, "instance")
        instance_key.text = kwargs.pop('instance')
        ge_ipp = ET.SubElement(prefix_list, "ge-ipp")
        ge_ipp.text = kwargs.pop('ge_ipp')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ip_prefix_list_le_ipp(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ip = ET.SubElement(rbridge_id, "ip")
        prefix_list = ET.SubElement(ip, "prefix-list", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(prefix_list, "name")
        name_key.text = kwargs.pop('name')
        seq_keyword_key = ET.SubElement(prefix_list, "seq-keyword")
        seq_keyword_key.text = kwargs.pop('seq_keyword')
        instance_key = ET.SubElement(prefix_list, "instance")
        instance_key.text = kwargs.pop('instance')
        le_ipp = ET.SubElement(prefix_list, "le-ipp")
        le_ipp.text = kwargs.pop('le_ipp')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ip_as_path_access_list_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ip = ET.SubElement(rbridge_id, "ip")
        as_path = ET.SubElement(ip, "as-path", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        access_list = ET.SubElement(as_path, "access-list")
        seq_keyword_key = ET.SubElement(access_list, "seq-keyword")
        seq_keyword_key.text = kwargs.pop('seq_keyword')
        instance_key = ET.SubElement(access_list, "instance")
        instance_key.text = kwargs.pop('instance')
        name = ET.SubElement(access_list, "name")
        name.text = kwargs.pop('name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ip_as_path_access_list_seq_keyword(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ip = ET.SubElement(rbridge_id, "ip")
        as_path = ET.SubElement(ip, "as-path", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        access_list = ET.SubElement(as_path, "access-list")
        name_key = ET.SubElement(access_list, "name")
        name_key.text = kwargs.pop('name')
        instance_key = ET.SubElement(access_list, "instance")
        instance_key.text = kwargs.pop('instance')
        seq_keyword = ET.SubElement(access_list, "seq-keyword")
        seq_keyword.text = kwargs.pop('seq_keyword')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ip_as_path_access_list_instance(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ip = ET.SubElement(rbridge_id, "ip")
        as_path = ET.SubElement(ip, "as-path", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        access_list = ET.SubElement(as_path, "access-list")
        name_key = ET.SubElement(access_list, "name")
        name_key.text = kwargs.pop('name')
        seq_keyword_key = ET.SubElement(access_list, "seq-keyword")
        seq_keyword_key.text = kwargs.pop('seq_keyword')
        instance = ET.SubElement(access_list, "instance")
        instance.text = kwargs.pop('instance')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ip_as_path_access_list_ip_action(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ip = ET.SubElement(rbridge_id, "ip")
        as_path = ET.SubElement(ip, "as-path", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        access_list = ET.SubElement(as_path, "access-list")
        name_key = ET.SubElement(access_list, "name")
        name_key.text = kwargs.pop('name')
        seq_keyword_key = ET.SubElement(access_list, "seq-keyword")
        seq_keyword_key.text = kwargs.pop('seq_keyword')
        instance_key = ET.SubElement(access_list, "instance")
        instance_key.text = kwargs.pop('instance')
        ip_action = ET.SubElement(access_list, "ip-action")
        ip_action.text = kwargs.pop('ip_action')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ip_as_path_access_list_ip_reg_expr(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ip = ET.SubElement(rbridge_id, "ip")
        as_path = ET.SubElement(ip, "as-path", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        access_list = ET.SubElement(as_path, "access-list")
        name_key = ET.SubElement(access_list, "name")
        name_key.text = kwargs.pop('name')
        seq_keyword_key = ET.SubElement(access_list, "seq-keyword")
        seq_keyword_key.text = kwargs.pop('seq_keyword')
        instance_key = ET.SubElement(access_list, "instance")
        instance_key.text = kwargs.pop('instance')
        ip_reg_expr = ET.SubElement(access_list, "ip-reg-expr")
        ip_reg_expr.text = kwargs.pop('ip_reg_expr')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ip_community_list_standard_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ip = ET.SubElement(rbridge_id, "ip")
        community_list = ET.SubElement(ip, "community-list", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        standard = ET.SubElement(community_list, "standard")
        seq_keyword_key = ET.SubElement(standard, "seq-keyword")
        seq_keyword_key.text = kwargs.pop('seq_keyword')
        instance_key = ET.SubElement(standard, "instance")
        instance_key.text = kwargs.pop('instance')
        name = ET.SubElement(standard, "name")
        name.text = kwargs.pop('name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ip_community_list_standard_seq_keyword(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ip = ET.SubElement(rbridge_id, "ip")
        community_list = ET.SubElement(ip, "community-list", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        standard = ET.SubElement(community_list, "standard")
        name_key = ET.SubElement(standard, "name")
        name_key.text = kwargs.pop('name')
        instance_key = ET.SubElement(standard, "instance")
        instance_key.text = kwargs.pop('instance')
        seq_keyword = ET.SubElement(standard, "seq-keyword")
        seq_keyword.text = kwargs.pop('seq_keyword')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ip_community_list_standard_instance(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ip = ET.SubElement(rbridge_id, "ip")
        community_list = ET.SubElement(ip, "community-list", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        standard = ET.SubElement(community_list, "standard")
        name_key = ET.SubElement(standard, "name")
        name_key.text = kwargs.pop('name')
        seq_keyword_key = ET.SubElement(standard, "seq-keyword")
        seq_keyword_key.text = kwargs.pop('seq_keyword')
        instance = ET.SubElement(standard, "instance")
        instance.text = kwargs.pop('instance')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ip_community_list_standard_ip_action(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ip = ET.SubElement(rbridge_id, "ip")
        community_list = ET.SubElement(ip, "community-list", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        standard = ET.SubElement(community_list, "standard")
        name_key = ET.SubElement(standard, "name")
        name_key.text = kwargs.pop('name')
        seq_keyword_key = ET.SubElement(standard, "seq-keyword")
        seq_keyword_key.text = kwargs.pop('seq_keyword')
        instance_key = ET.SubElement(standard, "instance")
        instance_key.text = kwargs.pop('instance')
        ip_action = ET.SubElement(standard, "ip-action")
        ip_action.text = kwargs.pop('ip_action')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ip_community_list_standard_std_community_expr(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ip = ET.SubElement(rbridge_id, "ip")
        community_list = ET.SubElement(ip, "community-list", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        standard = ET.SubElement(community_list, "standard")
        name_key = ET.SubElement(standard, "name")
        name_key.text = kwargs.pop('name')
        seq_keyword_key = ET.SubElement(standard, "seq-keyword")
        seq_keyword_key.text = kwargs.pop('seq_keyword')
        instance_key = ET.SubElement(standard, "instance")
        instance_key.text = kwargs.pop('instance')
        std_community_expr = ET.SubElement(standard, "std-community-expr")
        std_community_expr.text = kwargs.pop('std_community_expr')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ip_community_list_extended_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ip = ET.SubElement(rbridge_id, "ip")
        community_list = ET.SubElement(ip, "community-list", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        extended = ET.SubElement(community_list, "extended")
        seq_keyword_key = ET.SubElement(extended, "seq-keyword")
        seq_keyword_key.text = kwargs.pop('seq_keyword')
        instance_key = ET.SubElement(extended, "instance")
        instance_key.text = kwargs.pop('instance')
        name = ET.SubElement(extended, "name")
        name.text = kwargs.pop('name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ip_community_list_extended_seq_keyword(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ip = ET.SubElement(rbridge_id, "ip")
        community_list = ET.SubElement(ip, "community-list", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        extended = ET.SubElement(community_list, "extended")
        name_key = ET.SubElement(extended, "name")
        name_key.text = kwargs.pop('name')
        instance_key = ET.SubElement(extended, "instance")
        instance_key.text = kwargs.pop('instance')
        seq_keyword = ET.SubElement(extended, "seq-keyword")
        seq_keyword.text = kwargs.pop('seq_keyword')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ip_community_list_extended_instance(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ip = ET.SubElement(rbridge_id, "ip")
        community_list = ET.SubElement(ip, "community-list", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        extended = ET.SubElement(community_list, "extended")
        name_key = ET.SubElement(extended, "name")
        name_key.text = kwargs.pop('name')
        seq_keyword_key = ET.SubElement(extended, "seq-keyword")
        seq_keyword_key.text = kwargs.pop('seq_keyword')
        instance = ET.SubElement(extended, "instance")
        instance.text = kwargs.pop('instance')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ip_community_list_extended_ip_action(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ip = ET.SubElement(rbridge_id, "ip")
        community_list = ET.SubElement(ip, "community-list", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        extended = ET.SubElement(community_list, "extended")
        name_key = ET.SubElement(extended, "name")
        name_key.text = kwargs.pop('name')
        seq_keyword_key = ET.SubElement(extended, "seq-keyword")
        seq_keyword_key.text = kwargs.pop('seq_keyword')
        instance_key = ET.SubElement(extended, "instance")
        instance_key.text = kwargs.pop('instance')
        ip_action = ET.SubElement(extended, "ip-action")
        ip_action.text = kwargs.pop('ip_action')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ip_community_list_extended_ip_community_reg_expr(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ip = ET.SubElement(rbridge_id, "ip")
        community_list = ET.SubElement(ip, "community-list", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        extended = ET.SubElement(community_list, "extended")
        name_key = ET.SubElement(extended, "name")
        name_key.text = kwargs.pop('name')
        seq_keyword_key = ET.SubElement(extended, "seq-keyword")
        seq_keyword_key.text = kwargs.pop('seq_keyword')
        instance_key = ET.SubElement(extended, "instance")
        instance_key.text = kwargs.pop('instance')
        ip_community_reg_expr = ET.SubElement(extended, "ip-community-reg-expr")
        ip_community_reg_expr.text = kwargs.pop('ip_community_reg_expr')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ip_extcommunity_list_extcommunity_list_num(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ip = ET.SubElement(rbridge_id, "ip")
        extcommunity_list = ET.SubElement(ip, "extcommunity-list", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        extcommunity_list_num = ET.SubElement(extcommunity_list, "extcommunity-list-num")
        extcommunity_list_num.text = kwargs.pop('extcommunity_list_num')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ip_extcommunity_list_ext_community_action(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ip = ET.SubElement(rbridge_id, "ip")
        extcommunity_list = ET.SubElement(ip, "extcommunity-list", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        extcommunity_list_num_key = ET.SubElement(extcommunity_list, "extcommunity-list-num")
        extcommunity_list_num_key.text = kwargs.pop('extcommunity_list_num')
        ext_community_action = ET.SubElement(extcommunity_list, "ext-community-action")
        ext_community_action.text = kwargs.pop('ext_community_action')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ip_extcommunity_list_ext_community_expr(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ip = ET.SubElement(rbridge_id, "ip")
        extcommunity_list = ET.SubElement(ip, "extcommunity-list", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        extcommunity_list_num_key = ET.SubElement(extcommunity_list, "extcommunity-list-num")
        extcommunity_list_num_key.text = kwargs.pop('extcommunity_list_num')
        ext_community_expr = ET.SubElement(extcommunity_list, "ext-community-expr")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ip_rtm_config_router_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ip = ET.SubElement(rbridge_id, "ip")
        rtm_config = ET.SubElement(ip, "rtm-config", xmlns="urn:brocade.com:mgmt:brocade-rtm")
        router_id = ET.SubElement(rtm_config, "router-id")
        router_id.text = kwargs.pop('router_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ip_rtm_config_load_sharing(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ip = ET.SubElement(rbridge_id, "ip")
        rtm_config = ET.SubElement(ip, "rtm-config", xmlns="urn:brocade.com:mgmt:brocade-rtm")
        load_sharing = ET.SubElement(rtm_config, "load-sharing")
        load_sharing.text = kwargs.pop('load_sharing')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ip_rtm_config_route_static_route_nh_static_route_dest(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ip = ET.SubElement(rbridge_id, "ip")
        rtm_config = ET.SubElement(ip, "rtm-config", xmlns="urn:brocade.com:mgmt:brocade-rtm")
        route = ET.SubElement(rtm_config, "route")
        static_route_nh = ET.SubElement(route, "static-route-nh")
        static_route_next_hop_key = ET.SubElement(static_route_nh, "static-route-next-hop")
        static_route_next_hop_key.text = kwargs.pop('static_route_next_hop')
        static_route_dest = ET.SubElement(static_route_nh, "static-route-dest")
        static_route_dest.text = kwargs.pop('static_route_dest')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ip_rtm_config_route_static_route_nh_static_route_next_hop(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ip = ET.SubElement(rbridge_id, "ip")
        rtm_config = ET.SubElement(ip, "rtm-config", xmlns="urn:brocade.com:mgmt:brocade-rtm")
        route = ET.SubElement(rtm_config, "route")
        static_route_nh = ET.SubElement(route, "static-route-nh")
        static_route_dest_key = ET.SubElement(static_route_nh, "static-route-dest")
        static_route_dest_key.text = kwargs.pop('static_route_dest')
        static_route_next_hop = ET.SubElement(static_route_nh, "static-route-next-hop")
        static_route_next_hop.text = kwargs.pop('static_route_next_hop')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ip_rtm_config_route_static_route_nh_route_attributes_metric(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ip = ET.SubElement(rbridge_id, "ip")
        rtm_config = ET.SubElement(ip, "rtm-config", xmlns="urn:brocade.com:mgmt:brocade-rtm")
        route = ET.SubElement(rtm_config, "route")
        static_route_nh = ET.SubElement(route, "static-route-nh")
        static_route_dest_key = ET.SubElement(static_route_nh, "static-route-dest")
        static_route_dest_key.text = kwargs.pop('static_route_dest')
        static_route_next_hop_key = ET.SubElement(static_route_nh, "static-route-next-hop")
        static_route_next_hop_key.text = kwargs.pop('static_route_next_hop')
        route_attributes = ET.SubElement(static_route_nh, "route-attributes")
        metric = ET.SubElement(route_attributes, "metric")
        metric.text = kwargs.pop('metric')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ip_rtm_config_route_static_route_nh_route_attributes_distance(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ip = ET.SubElement(rbridge_id, "ip")
        rtm_config = ET.SubElement(ip, "rtm-config", xmlns="urn:brocade.com:mgmt:brocade-rtm")
        route = ET.SubElement(rtm_config, "route")
        static_route_nh = ET.SubElement(route, "static-route-nh")
        static_route_dest_key = ET.SubElement(static_route_nh, "static-route-dest")
        static_route_dest_key.text = kwargs.pop('static_route_dest')
        static_route_next_hop_key = ET.SubElement(static_route_nh, "static-route-next-hop")
        static_route_next_hop_key.text = kwargs.pop('static_route_next_hop')
        route_attributes = ET.SubElement(static_route_nh, "route-attributes")
        distance = ET.SubElement(route_attributes, "distance")
        distance.text = kwargs.pop('distance')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ip_rtm_config_route_static_route_nh_route_attributes_tag(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ip = ET.SubElement(rbridge_id, "ip")
        rtm_config = ET.SubElement(ip, "rtm-config", xmlns="urn:brocade.com:mgmt:brocade-rtm")
        route = ET.SubElement(rtm_config, "route")
        static_route_nh = ET.SubElement(route, "static-route-nh")
        static_route_dest_key = ET.SubElement(static_route_nh, "static-route-dest")
        static_route_dest_key.text = kwargs.pop('static_route_dest')
        static_route_next_hop_key = ET.SubElement(static_route_nh, "static-route-next-hop")
        static_route_next_hop_key.text = kwargs.pop('static_route_next_hop')
        route_attributes = ET.SubElement(static_route_nh, "route-attributes")
        tag = ET.SubElement(route_attributes, "tag")
        tag.text = kwargs.pop('tag')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ip_rtm_config_route_static_route_nh_vrf_static_route_next_vrf_dest(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ip = ET.SubElement(rbridge_id, "ip")
        rtm_config = ET.SubElement(ip, "rtm-config", xmlns="urn:brocade.com:mgmt:brocade-rtm")
        route = ET.SubElement(rtm_config, "route")
        static_route_nh_vrf = ET.SubElement(route, "static-route-nh-vrf")
        next_hop_vrf_key = ET.SubElement(static_route_nh_vrf, "next-hop-vrf")
        next_hop_vrf_key.text = kwargs.pop('next_hop_vrf')
        static_route_next_hop_key = ET.SubElement(static_route_nh_vrf, "static-route-next-hop")
        static_route_next_hop_key.text = kwargs.pop('static_route_next_hop')
        static_route_next_vrf_dest = ET.SubElement(static_route_nh_vrf, "static-route-next-vrf-dest")
        static_route_next_vrf_dest.text = kwargs.pop('static_route_next_vrf_dest')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ip_rtm_config_route_static_route_nh_vrf_next_hop_vrf(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ip = ET.SubElement(rbridge_id, "ip")
        rtm_config = ET.SubElement(ip, "rtm-config", xmlns="urn:brocade.com:mgmt:brocade-rtm")
        route = ET.SubElement(rtm_config, "route")
        static_route_nh_vrf = ET.SubElement(route, "static-route-nh-vrf")
        static_route_next_vrf_dest_key = ET.SubElement(static_route_nh_vrf, "static-route-next-vrf-dest")
        static_route_next_vrf_dest_key.text = kwargs.pop('static_route_next_vrf_dest')
        static_route_next_hop_key = ET.SubElement(static_route_nh_vrf, "static-route-next-hop")
        static_route_next_hop_key.text = kwargs.pop('static_route_next_hop')
        next_hop_vrf = ET.SubElement(static_route_nh_vrf, "next-hop-vrf")
        next_hop_vrf.text = kwargs.pop('next_hop_vrf')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ip_rtm_config_route_static_route_nh_vrf_static_route_next_hop(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ip = ET.SubElement(rbridge_id, "ip")
        rtm_config = ET.SubElement(ip, "rtm-config", xmlns="urn:brocade.com:mgmt:brocade-rtm")
        route = ET.SubElement(rtm_config, "route")
        static_route_nh_vrf = ET.SubElement(route, "static-route-nh-vrf")
        static_route_next_vrf_dest_key = ET.SubElement(static_route_nh_vrf, "static-route-next-vrf-dest")
        static_route_next_vrf_dest_key.text = kwargs.pop('static_route_next_vrf_dest')
        next_hop_vrf_key = ET.SubElement(static_route_nh_vrf, "next-hop-vrf")
        next_hop_vrf_key.text = kwargs.pop('next_hop_vrf')
        static_route_next_hop = ET.SubElement(static_route_nh_vrf, "static-route-next-hop")
        static_route_next_hop.text = kwargs.pop('static_route_next_hop')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ip_rtm_config_route_static_route_oif_static_route_dest(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ip = ET.SubElement(rbridge_id, "ip")
        rtm_config = ET.SubElement(ip, "rtm-config", xmlns="urn:brocade.com:mgmt:brocade-rtm")
        route = ET.SubElement(rtm_config, "route")
        static_route_oif = ET.SubElement(route, "static-route-oif")
        static_route_oif_type_key = ET.SubElement(static_route_oif, "static-route-oif-type")
        static_route_oif_type_key.text = kwargs.pop('static_route_oif_type')
        static_route_oif_name_key = ET.SubElement(static_route_oif, "static-route-oif-name")
        static_route_oif_name_key.text = kwargs.pop('static_route_oif_name')
        static_route_dest = ET.SubElement(static_route_oif, "static-route-dest")
        static_route_dest.text = kwargs.pop('static_route_dest')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ip_rtm_config_route_static_route_oif_static_route_oif_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ip = ET.SubElement(rbridge_id, "ip")
        rtm_config = ET.SubElement(ip, "rtm-config", xmlns="urn:brocade.com:mgmt:brocade-rtm")
        route = ET.SubElement(rtm_config, "route")
        static_route_oif = ET.SubElement(route, "static-route-oif")
        static_route_dest_key = ET.SubElement(static_route_oif, "static-route-dest")
        static_route_dest_key.text = kwargs.pop('static_route_dest')
        static_route_oif_name_key = ET.SubElement(static_route_oif, "static-route-oif-name")
        static_route_oif_name_key.text = kwargs.pop('static_route_oif_name')
        static_route_oif_type = ET.SubElement(static_route_oif, "static-route-oif-type")
        static_route_oif_type.text = kwargs.pop('static_route_oif_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ip_rtm_config_route_static_route_oif_static_route_oif_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ip = ET.SubElement(rbridge_id, "ip")
        rtm_config = ET.SubElement(ip, "rtm-config", xmlns="urn:brocade.com:mgmt:brocade-rtm")
        route = ET.SubElement(rtm_config, "route")
        static_route_oif = ET.SubElement(route, "static-route-oif")
        static_route_dest_key = ET.SubElement(static_route_oif, "static-route-dest")
        static_route_dest_key.text = kwargs.pop('static_route_dest')
        static_route_oif_type_key = ET.SubElement(static_route_oif, "static-route-oif-type")
        static_route_oif_type_key.text = kwargs.pop('static_route_oif_type')
        static_route_oif_name = ET.SubElement(static_route_oif, "static-route-oif-name")
        static_route_oif_name.text = kwargs.pop('static_route_oif_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ip_rtm_config_route_static_route_oif_route_attributes_metric(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ip = ET.SubElement(rbridge_id, "ip")
        rtm_config = ET.SubElement(ip, "rtm-config", xmlns="urn:brocade.com:mgmt:brocade-rtm")
        route = ET.SubElement(rtm_config, "route")
        static_route_oif = ET.SubElement(route, "static-route-oif")
        static_route_dest_key = ET.SubElement(static_route_oif, "static-route-dest")
        static_route_dest_key.text = kwargs.pop('static_route_dest')
        static_route_oif_type_key = ET.SubElement(static_route_oif, "static-route-oif-type")
        static_route_oif_type_key.text = kwargs.pop('static_route_oif_type')
        static_route_oif_name_key = ET.SubElement(static_route_oif, "static-route-oif-name")
        static_route_oif_name_key.text = kwargs.pop('static_route_oif_name')
        route_attributes = ET.SubElement(static_route_oif, "route-attributes")
        metric = ET.SubElement(route_attributes, "metric")
        metric.text = kwargs.pop('metric')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ip_rtm_config_route_static_route_oif_route_attributes_distance(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ip = ET.SubElement(rbridge_id, "ip")
        rtm_config = ET.SubElement(ip, "rtm-config", xmlns="urn:brocade.com:mgmt:brocade-rtm")
        route = ET.SubElement(rtm_config, "route")
        static_route_oif = ET.SubElement(route, "static-route-oif")
        static_route_dest_key = ET.SubElement(static_route_oif, "static-route-dest")
        static_route_dest_key.text = kwargs.pop('static_route_dest')
        static_route_oif_type_key = ET.SubElement(static_route_oif, "static-route-oif-type")
        static_route_oif_type_key.text = kwargs.pop('static_route_oif_type')
        static_route_oif_name_key = ET.SubElement(static_route_oif, "static-route-oif-name")
        static_route_oif_name_key.text = kwargs.pop('static_route_oif_name')
        route_attributes = ET.SubElement(static_route_oif, "route-attributes")
        distance = ET.SubElement(route_attributes, "distance")
        distance.text = kwargs.pop('distance')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ip_rtm_config_route_static_route_oif_route_attributes_tag(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ip = ET.SubElement(rbridge_id, "ip")
        rtm_config = ET.SubElement(ip, "rtm-config", xmlns="urn:brocade.com:mgmt:brocade-rtm")
        route = ET.SubElement(rtm_config, "route")
        static_route_oif = ET.SubElement(route, "static-route-oif")
        static_route_dest_key = ET.SubElement(static_route_oif, "static-route-dest")
        static_route_dest_key.text = kwargs.pop('static_route_dest')
        static_route_oif_type_key = ET.SubElement(static_route_oif, "static-route-oif-type")
        static_route_oif_type_key.text = kwargs.pop('static_route_oif_type')
        static_route_oif_name_key = ET.SubElement(static_route_oif, "static-route-oif-name")
        static_route_oif_name_key.text = kwargs.pop('static_route_oif_name')
        route_attributes = ET.SubElement(static_route_oif, "route-attributes")
        tag = ET.SubElement(route_attributes, "tag")
        tag.text = kwargs.pop('tag')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ip_imprt_routes_src_vrf(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ip = ET.SubElement(rbridge_id, "ip")
        imprt = ET.SubElement(ip, "import", xmlns="urn:brocade.com:mgmt:brocade-rtm")
        routes = ET.SubElement(imprt, "routes")
        route_map_key = ET.SubElement(routes, "route-map")
        route_map_key.text = kwargs.pop('route_map')
        src_vrf = ET.SubElement(routes, "src-vrf")
        src_vrf.text = kwargs.pop('src_vrf')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ip_imprt_routes_route_map(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ip = ET.SubElement(rbridge_id, "ip")
        imprt = ET.SubElement(ip, "import", xmlns="urn:brocade.com:mgmt:brocade-rtm")
        routes = ET.SubElement(imprt, "routes")
        src_vrf_key = ET.SubElement(routes, "src-vrf")
        src_vrf_key.text = kwargs.pop('src_vrf')
        route_map = ET.SubElement(routes, "route-map")
        route_map.text = kwargs.pop('route_map')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_vrf(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf = ET.SubElement(ospf, "vrf")
        vrf.text = kwargs.pop('vrf')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_area_area_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id = ET.SubElement(area, "area-id")
        area_id.text = kwargs.pop('area_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_area_normal(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        normal = ET.SubElement(area, "normal")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_area_nssa_metric_nssa_area_metric(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        nssa = ET.SubElement(area, "nssa")
        metric = ET.SubElement(nssa, "metric")
        nssa_area_metric = ET.SubElement(metric, "nssa-area-metric")
        nssa_area_metric.text = kwargs.pop('nssa_area_metric')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_area_nssa_area_default_information_originate_area_default_information_originate_metric(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        nssa = ET.SubElement(area, "nssa")
        area_default_information_originate = ET.SubElement(nssa, "area-default-information-originate")
        area_default_information_originate_metric = ET.SubElement(area_default_information_originate, "area-default-information-originate-metric")
        area_default_information_originate_metric.text = kwargs.pop('area_default_information_originate_metric')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_area_nssa_area_default_information_originate_area_default_information_originate_metric_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        nssa = ET.SubElement(area, "nssa")
        area_default_information_originate = ET.SubElement(nssa, "area-default-information-originate")
        area_default_information_originate_metric_type = ET.SubElement(area_default_information_originate, "area-default-information-originate-metric-type")
        area_default_information_originate_metric_type.text = kwargs.pop('area_default_information_originate_metric_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_area_nssa_no_redistribution(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        nssa = ET.SubElement(area, "nssa")
        no_redistribution = ET.SubElement(nssa, "no-redistribution")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_area_nssa_nssa_area_no_summary(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        nssa = ET.SubElement(area, "nssa")
        nssa_area_no_summary = ET.SubElement(nssa, "nssa-area-no-summary")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_area_nssa_translator_always(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        nssa = ET.SubElement(area, "nssa")
        translator_always = ET.SubElement(nssa, "translator-always")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_area_nssa_translator_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        nssa = ET.SubElement(area, "nssa")
        translator_interval = ET.SubElement(nssa, "translator-interval")
        translator_interval.text = kwargs.pop('translator_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_area_stub_stub_area_no_summary(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        stub = ET.SubElement(area, "stub")
        stub_area_no_summary = ET.SubElement(stub, "stub-area-no-summary")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_area_stub_stub_area_metric(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        stub = ET.SubElement(area, "stub")
        stub_area_metric = ET.SubElement(stub, "stub-area-metric")
        stub_area_metric.text = kwargs.pop('stub_area_metric')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_area_authentication_ipsec_auth_key_config_spi(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        authentication = ET.SubElement(area, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        spi = ET.SubElement(ipsec_auth_key_config, "spi")
        spi.text = kwargs.pop('spi')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_area_authentication_ipsec_auth_key_config_ch_algorithm_ca_ah_algorithm_ah(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        authentication = ET.SubElement(area, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_ah_algorithm = ET.SubElement(ch_algorithm, "ca-ah-algorithm")
        ah = ET.SubElement(ca_ah_algorithm, "ah")
        ah.text = kwargs.pop('ah')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_area_authentication_ipsec_auth_key_config_ch_algorithm_ca_ah_algorithm_ah_no_encrypt(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        authentication = ET.SubElement(area, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_ah_algorithm = ET.SubElement(ch_algorithm, "ca-ah-algorithm")
        ah_no_encrypt = ET.SubElement(ca_ah_algorithm, "ah-no-encrypt")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_area_authentication_ipsec_auth_key_config_ch_algorithm_ca_ah_algorithm_ah_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        authentication = ET.SubElement(area, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_ah_algorithm = ET.SubElement(ch_algorithm, "ca-ah-algorithm")
        ah_key = ET.SubElement(ca_ah_algorithm, "ah-key")
        ah_key.text = kwargs.pop('ah_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_area_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        authentication = ET.SubElement(area, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp = ET.SubElement(ca_esp_algorithm, "esp")
        esp.text = kwargs.pop('esp')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_area_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp_no_encrypt(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        authentication = ET.SubElement(area, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp_no_encrypt = ET.SubElement(ca_esp_algorithm, "esp-no-encrypt")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_area_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        authentication = ET.SubElement(area, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp_key = ET.SubElement(ca_esp_algorithm, "esp-key")
        esp_key.text = kwargs.pop('esp_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_area_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp_auth(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        authentication = ET.SubElement(area, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp_auth = ET.SubElement(ca_esp_algorithm, "esp-auth")
        esp_auth.text = kwargs.pop('esp_auth')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_area_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp_auth_no_encrypt(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        authentication = ET.SubElement(area, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp_auth_no_encrypt = ET.SubElement(ca_esp_algorithm, "esp-auth-no-encrypt")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_area_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp_auth_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        authentication = ET.SubElement(area, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp_auth_key = ET.SubElement(ca_esp_algorithm, "esp-auth-key")
        esp_auth_key.text = kwargs.pop('esp_auth_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_area_virtual_link_virtual_link_neighbor(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        virtual_link = ET.SubElement(area, "virtual-link")
        virtual_link_neighbor = ET.SubElement(virtual_link, "virtual-link-neighbor")
        virtual_link_neighbor.text = kwargs.pop('virtual_link_neighbor')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_area_virtual_link_link_properties_link_interval_properties_hello_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        virtual_link = ET.SubElement(area, "virtual-link")
        virtual_link_neighbor_key = ET.SubElement(virtual_link, "virtual-link-neighbor")
        virtual_link_neighbor_key.text = kwargs.pop('virtual_link_neighbor')
        link_properties = ET.SubElement(virtual_link, "link-properties")
        link_interval_properties = ET.SubElement(link_properties, "link-interval-properties")
        hello_interval = ET.SubElement(link_interval_properties, "hello-interval")
        hello_interval.text = kwargs.pop('hello_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_area_virtual_link_link_properties_link_interval_properties_dead_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        virtual_link = ET.SubElement(area, "virtual-link")
        virtual_link_neighbor_key = ET.SubElement(virtual_link, "virtual-link-neighbor")
        virtual_link_neighbor_key.text = kwargs.pop('virtual_link_neighbor')
        link_properties = ET.SubElement(virtual_link, "link-properties")
        link_interval_properties = ET.SubElement(link_properties, "link-interval-properties")
        dead_interval = ET.SubElement(link_interval_properties, "dead-interval")
        dead_interval.text = kwargs.pop('dead_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_area_virtual_link_link_properties_link_interval_properties_hello_jitter(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        virtual_link = ET.SubElement(area, "virtual-link")
        virtual_link_neighbor_key = ET.SubElement(virtual_link, "virtual-link-neighbor")
        virtual_link_neighbor_key.text = kwargs.pop('virtual_link_neighbor')
        link_properties = ET.SubElement(virtual_link, "link-properties")
        link_interval_properties = ET.SubElement(link_properties, "link-interval-properties")
        hello_jitter = ET.SubElement(link_interval_properties, "hello-jitter")
        hello_jitter.text = kwargs.pop('hello_jitter')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_area_virtual_link_link_properties_link_interval_properties_retransmit_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        virtual_link = ET.SubElement(area, "virtual-link")
        virtual_link_neighbor_key = ET.SubElement(virtual_link, "virtual-link-neighbor")
        virtual_link_neighbor_key.text = kwargs.pop('virtual_link_neighbor')
        link_properties = ET.SubElement(virtual_link, "link-properties")
        link_interval_properties = ET.SubElement(link_properties, "link-interval-properties")
        retransmit_interval = ET.SubElement(link_interval_properties, "retransmit-interval")
        retransmit_interval.text = kwargs.pop('retransmit_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_area_virtual_link_link_properties_link_interval_properties_transmit_delay(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        virtual_link = ET.SubElement(area, "virtual-link")
        virtual_link_neighbor_key = ET.SubElement(virtual_link, "virtual-link-neighbor")
        virtual_link_neighbor_key.text = kwargs.pop('virtual_link_neighbor')
        link_properties = ET.SubElement(virtual_link, "link-properties")
        link_interval_properties = ET.SubElement(link_properties, "link-interval-properties")
        transmit_delay = ET.SubElement(link_interval_properties, "transmit-delay")
        transmit_delay.text = kwargs.pop('transmit_delay')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_area_virtual_link_link_properties_authentication_ipsec_auth_key_config_spi(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        virtual_link = ET.SubElement(area, "virtual-link")
        virtual_link_neighbor_key = ET.SubElement(virtual_link, "virtual-link-neighbor")
        virtual_link_neighbor_key.text = kwargs.pop('virtual_link_neighbor')
        link_properties = ET.SubElement(virtual_link, "link-properties")
        authentication = ET.SubElement(link_properties, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        spi = ET.SubElement(ipsec_auth_key_config, "spi")
        spi.text = kwargs.pop('spi')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_area_virtual_link_link_properties_authentication_ipsec_auth_key_config_ch_algorithm_ca_ah_algorithm_ah(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        virtual_link = ET.SubElement(area, "virtual-link")
        virtual_link_neighbor_key = ET.SubElement(virtual_link, "virtual-link-neighbor")
        virtual_link_neighbor_key.text = kwargs.pop('virtual_link_neighbor')
        link_properties = ET.SubElement(virtual_link, "link-properties")
        authentication = ET.SubElement(link_properties, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_ah_algorithm = ET.SubElement(ch_algorithm, "ca-ah-algorithm")
        ah = ET.SubElement(ca_ah_algorithm, "ah")
        ah.text = kwargs.pop('ah')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_area_virtual_link_link_properties_authentication_ipsec_auth_key_config_ch_algorithm_ca_ah_algorithm_ah_no_encrypt(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        virtual_link = ET.SubElement(area, "virtual-link")
        virtual_link_neighbor_key = ET.SubElement(virtual_link, "virtual-link-neighbor")
        virtual_link_neighbor_key.text = kwargs.pop('virtual_link_neighbor')
        link_properties = ET.SubElement(virtual_link, "link-properties")
        authentication = ET.SubElement(link_properties, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_ah_algorithm = ET.SubElement(ch_algorithm, "ca-ah-algorithm")
        ah_no_encrypt = ET.SubElement(ca_ah_algorithm, "ah-no-encrypt")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_area_virtual_link_link_properties_authentication_ipsec_auth_key_config_ch_algorithm_ca_ah_algorithm_ah_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        virtual_link = ET.SubElement(area, "virtual-link")
        virtual_link_neighbor_key = ET.SubElement(virtual_link, "virtual-link-neighbor")
        virtual_link_neighbor_key.text = kwargs.pop('virtual_link_neighbor')
        link_properties = ET.SubElement(virtual_link, "link-properties")
        authentication = ET.SubElement(link_properties, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_ah_algorithm = ET.SubElement(ch_algorithm, "ca-ah-algorithm")
        ah_key = ET.SubElement(ca_ah_algorithm, "ah-key")
        ah_key.text = kwargs.pop('ah_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_area_virtual_link_link_properties_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        virtual_link = ET.SubElement(area, "virtual-link")
        virtual_link_neighbor_key = ET.SubElement(virtual_link, "virtual-link-neighbor")
        virtual_link_neighbor_key.text = kwargs.pop('virtual_link_neighbor')
        link_properties = ET.SubElement(virtual_link, "link-properties")
        authentication = ET.SubElement(link_properties, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp = ET.SubElement(ca_esp_algorithm, "esp")
        esp.text = kwargs.pop('esp')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_area_virtual_link_link_properties_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp_no_encrypt(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        virtual_link = ET.SubElement(area, "virtual-link")
        virtual_link_neighbor_key = ET.SubElement(virtual_link, "virtual-link-neighbor")
        virtual_link_neighbor_key.text = kwargs.pop('virtual_link_neighbor')
        link_properties = ET.SubElement(virtual_link, "link-properties")
        authentication = ET.SubElement(link_properties, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp_no_encrypt = ET.SubElement(ca_esp_algorithm, "esp-no-encrypt")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_area_virtual_link_link_properties_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        virtual_link = ET.SubElement(area, "virtual-link")
        virtual_link_neighbor_key = ET.SubElement(virtual_link, "virtual-link-neighbor")
        virtual_link_neighbor_key.text = kwargs.pop('virtual_link_neighbor')
        link_properties = ET.SubElement(virtual_link, "link-properties")
        authentication = ET.SubElement(link_properties, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp_key = ET.SubElement(ca_esp_algorithm, "esp-key")
        esp_key.text = kwargs.pop('esp_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_area_virtual_link_link_properties_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp_auth(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        virtual_link = ET.SubElement(area, "virtual-link")
        virtual_link_neighbor_key = ET.SubElement(virtual_link, "virtual-link-neighbor")
        virtual_link_neighbor_key.text = kwargs.pop('virtual_link_neighbor')
        link_properties = ET.SubElement(virtual_link, "link-properties")
        authentication = ET.SubElement(link_properties, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp_auth = ET.SubElement(ca_esp_algorithm, "esp-auth")
        esp_auth.text = kwargs.pop('esp_auth')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_area_virtual_link_link_properties_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp_auth_no_encrypt(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        virtual_link = ET.SubElement(area, "virtual-link")
        virtual_link_neighbor_key = ET.SubElement(virtual_link, "virtual-link-neighbor")
        virtual_link_neighbor_key.text = kwargs.pop('virtual_link_neighbor')
        link_properties = ET.SubElement(virtual_link, "link-properties")
        authentication = ET.SubElement(link_properties, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp_auth_no_encrypt = ET.SubElement(ca_esp_algorithm, "esp-auth-no-encrypt")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_area_virtual_link_link_properties_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp_auth_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        virtual_link = ET.SubElement(area, "virtual-link")
        virtual_link_neighbor_key = ET.SubElement(virtual_link, "virtual-link-neighbor")
        virtual_link_neighbor_key.text = kwargs.pop('virtual_link_neighbor')
        link_properties = ET.SubElement(virtual_link, "link-properties")
        authentication = ET.SubElement(link_properties, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp_auth_key = ET.SubElement(ca_esp_algorithm, "esp-auth-key")
        esp_auth_key.text = kwargs.pop('esp_auth_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_area_area_range_range_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        area_range = ET.SubElement(area, "area-range")
        range_address = ET.SubElement(area_range, "range-address")
        range_address.text = kwargs.pop('range_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_area_area_range_range_effect(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        area_range = ET.SubElement(area, "area-range")
        range_address_key = ET.SubElement(area_range, "range-address")
        range_address_key.text = kwargs.pop('range_address')
        range_effect = ET.SubElement(area_range, "range-effect")
        range_effect.text = kwargs.pop('range_effect')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_area_area_range_range_cost(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        area_range = ET.SubElement(area, "area-range")
        range_address_key = ET.SubElement(area_range, "range-address")
        range_address_key.text = kwargs.pop('range_address')
        range_cost = ET.SubElement(area_range, "range-cost")
        range_cost.text = kwargs.pop('range_cost')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_auto_cost_reference_bandwidth(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        auto_cost = ET.SubElement(ospf, "auto-cost")
        reference_bandwidth = ET.SubElement(auto_cost, "reference-bandwidth")
        reference_bandwidth.text = kwargs.pop('reference_bandwidth')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_database_overflow_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        database_overflow_interval = ET.SubElement(ospf, "database-overflow-interval")
        database_overflow_interval.text = kwargs.pop('database_overflow_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_global_default_information_originate_global_default_information_originate_always(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        global_default_information_originate = ET.SubElement(ospf, "global-default-information-originate")
        global_default_information_originate_always = ET.SubElement(global_default_information_originate, "global-default-information-originate-always")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_global_default_information_originate_global_default_information_originate_metric(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        global_default_information_originate = ET.SubElement(ospf, "global-default-information-originate")
        global_default_information_originate_metric = ET.SubElement(global_default_information_originate, "global-default-information-originate-metric")
        global_default_information_originate_metric.text = kwargs.pop('global_default_information_originate_metric')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_global_default_information_originate_global_default_information_originate_metric_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        global_default_information_originate = ET.SubElement(ospf, "global-default-information-originate")
        global_default_information_originate_metric_type = ET.SubElement(global_default_information_originate, "global-default-information-originate-metric-type")
        global_default_information_originate_metric_type.text = kwargs.pop('global_default_information_originate_metric_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_default_metric(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        default_metric = ET.SubElement(ospf, "default-metric")
        default_metric.text = kwargs.pop('default_metric')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_default_passive_interface(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        default_passive_interface = ET.SubElement(ospf, "default-passive-interface")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_distance_route_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        distance = ET.SubElement(ospf, "distance")
        route_type = ET.SubElement(distance, "route-type")
        route_type.text = kwargs.pop('route_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_distance_distance_value(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        distance = ET.SubElement(ospf, "distance")
        route_type_key = ET.SubElement(distance, "route-type")
        route_type_key.text = kwargs.pop('route_type')
        distance_value = ET.SubElement(distance, "distance-value")
        distance_value.text = kwargs.pop('distance_value')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_distribute_list_route_map_distribute_list_route_map_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        distribute_list = ET.SubElement(ospf, "distribute-list")
        route_map = ET.SubElement(distribute_list, "route-map")
        distribute_list_route_map_name = ET.SubElement(route_map, "distribute-list-route-map-name")
        distribute_list_route_map_name.text = kwargs.pop('distribute_list_route_map_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_distribute_list_route_map_distribute_list_route_map_in(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        distribute_list = ET.SubElement(ospf, "distribute-list")
        route_map = ET.SubElement(distribute_list, "route-map")
        distribute_list_route_map_in = ET.SubElement(route_map, "distribute-list-route-map-in")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_distribute_list_prefix_list_distribute_list_prefix_list_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        distribute_list = ET.SubElement(ospf, "distribute-list")
        prefix_list = ET.SubElement(distribute_list, "prefix-list")
        distribute_list_prefix_list_name = ET.SubElement(prefix_list, "distribute-list-prefix-list-name")
        distribute_list_prefix_list_name.text = kwargs.pop('distribute_list_prefix_list_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_distribute_list_prefix_list_distribute_list_prefix_list_in(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        distribute_list = ET.SubElement(ospf, "distribute-list")
        prefix_list = ET.SubElement(distribute_list, "prefix-list")
        distribute_list_prefix_list_in = ET.SubElement(prefix_list, "distribute-list-prefix-list-in")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_external_lsdb_limit(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        external_lsdb_limit = ET.SubElement(ospf, "external-lsdb-limit")
        external_lsdb_limit.text = kwargs.pop('external_lsdb_limit')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_graceful_restart_helper_graceful_restart_helper_disable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        graceful_restart = ET.SubElement(ospf, "graceful-restart")
        helper = ET.SubElement(graceful_restart, "helper")
        graceful_restart_helper_disable = ET.SubElement(helper, "graceful-restart-helper-disable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_graceful_restart_helper_graceful_restart_helper_strict_lsa_checking(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        graceful_restart = ET.SubElement(ospf, "graceful-restart")
        helper = ET.SubElement(graceful_restart, "helper")
        graceful_restart_helper_strict_lsa_checking = ET.SubElement(helper, "graceful-restart-helper-strict-lsa-checking")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_key_add_remove_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        key_add_remove_interval = ET.SubElement(ospf, "key-add-remove-interval")
        key_add_remove_interval.text = kwargs.pop('key_add_remove_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_key_rollover_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        key_rollover_interval = ET.SubElement(ospf, "key-rollover-interval")
        key_rollover_interval.text = kwargs.pop('key_rollover_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_log_status_change(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        log_status_change = ET.SubElement(ospf, "log-status-change")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_global_metric_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        global_metric_type = ET.SubElement(ospf, "global-metric-type")
        global_metric_type.text = kwargs.pop('global_metric_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_redistribute_redistribute_connected_connected_route_map(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        redistribute = ET.SubElement(ospf, "redistribute")
        redistribute_connected = ET.SubElement(redistribute, "redistribute-connected")
        connected_route_map = ET.SubElement(redistribute_connected, "connected-route-map")
        connected_route_map.text = kwargs.pop('connected_route_map')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_redistribute_redistribute_connected_redistribute_connected_metric(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        redistribute = ET.SubElement(ospf, "redistribute")
        redistribute_connected = ET.SubElement(redistribute, "redistribute-connected")
        redistribute_connected_metric = ET.SubElement(redistribute_connected, "redistribute-connected-metric")
        redistribute_connected_metric.text = kwargs.pop('redistribute_connected_metric')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_redistribute_redistribute_connected_redistribute_connected_metric_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        redistribute = ET.SubElement(ospf, "redistribute")
        redistribute_connected = ET.SubElement(redistribute, "redistribute-connected")
        redistribute_connected_metric_type = ET.SubElement(redistribute_connected, "redistribute-connected-metric-type")
        redistribute_connected_metric_type.text = kwargs.pop('redistribute_connected_metric_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_redistribute_redistribute_static_static_route_map(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        redistribute = ET.SubElement(ospf, "redistribute")
        redistribute_static = ET.SubElement(redistribute, "redistribute-static")
        static_route_map = ET.SubElement(redistribute_static, "static-route-map")
        static_route_map.text = kwargs.pop('static_route_map')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_redistribute_redistribute_static_redistribute_static_metric(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        redistribute = ET.SubElement(ospf, "redistribute")
        redistribute_static = ET.SubElement(redistribute, "redistribute-static")
        redistribute_static_metric = ET.SubElement(redistribute_static, "redistribute-static-metric")
        redistribute_static_metric.text = kwargs.pop('redistribute_static_metric')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_redistribute_redistribute_static_redistribute_static_metric_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        redistribute = ET.SubElement(ospf, "redistribute")
        redistribute_static = ET.SubElement(redistribute, "redistribute-static")
        redistribute_static_metric_type = ET.SubElement(redistribute_static, "redistribute-static-metric-type")
        redistribute_static_metric_type.text = kwargs.pop('redistribute_static_metric_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_redistribute_redistribute_bgp_bgp_route_map(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        redistribute = ET.SubElement(ospf, "redistribute")
        redistribute_bgp = ET.SubElement(redistribute, "redistribute-bgp")
        bgp_route_map = ET.SubElement(redistribute_bgp, "bgp-route-map")
        bgp_route_map.text = kwargs.pop('bgp_route_map')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_redistribute_redistribute_bgp_redistribute_bgp_metric(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        redistribute = ET.SubElement(ospf, "redistribute")
        redistribute_bgp = ET.SubElement(redistribute, "redistribute-bgp")
        redistribute_bgp_metric = ET.SubElement(redistribute_bgp, "redistribute-bgp-metric")
        redistribute_bgp_metric.text = kwargs.pop('redistribute_bgp_metric')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_redistribute_redistribute_bgp_redistribute_bgp_metric_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        redistribute = ET.SubElement(ospf, "redistribute")
        redistribute_bgp = ET.SubElement(redistribute, "redistribute-bgp")
        redistribute_bgp_metric_type = ET.SubElement(redistribute_bgp, "redistribute-bgp-metric-type")
        redistribute_bgp_metric_type.text = kwargs.pop('redistribute_bgp_metric_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_redistribute_redistribute_ospf_ospf_route_map(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        redistribute = ET.SubElement(ospf, "redistribute")
        redistribute_ospf = ET.SubElement(redistribute, "redistribute-ospf")
        ospf_route_map = ET.SubElement(redistribute_ospf, "ospf-route-map")
        ospf_route_map.text = kwargs.pop('ospf_route_map')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_redistribute_redistribute_ospf_redistribute_ospf_metric(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        redistribute = ET.SubElement(ospf, "redistribute")
        redistribute_ospf = ET.SubElement(redistribute, "redistribute-ospf")
        redistribute_ospf_metric = ET.SubElement(redistribute_ospf, "redistribute-ospf-metric")
        redistribute_ospf_metric.text = kwargs.pop('redistribute_ospf_metric')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_redistribute_redistribute_ospf_redistribute_ospf_metric_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        redistribute = ET.SubElement(ospf, "redistribute")
        redistribute_ospf = ET.SubElement(redistribute, "redistribute-ospf")
        redistribute_ospf_metric_type = ET.SubElement(redistribute_ospf, "redistribute-ospf-metric-type")
        redistribute_ospf_metric_type.text = kwargs.pop('redistribute_ospf_metric_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_summary_address_summary_address_value(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        summary_address = ET.SubElement(ospf, "summary-address")
        summary_address_value = ET.SubElement(summary_address, "summary-address-value")
        summary_address_value.text = kwargs.pop('summary_address_value')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_timers_lsa_group_pacing(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        timers = ET.SubElement(ospf, "timers")
        lsa_group_pacing = ET.SubElement(timers, "lsa-group-pacing")
        lsa_group_pacing.text = kwargs.pop('lsa_group_pacing')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_timers_spf_spf_delay(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        timers = ET.SubElement(ospf, "timers")
        spf = ET.SubElement(timers, "spf")
        spf_delay = ET.SubElement(spf, "spf-delay")
        spf_delay.text = kwargs.pop('spf_delay')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_timers_spf_spf_hold_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        timers = ET.SubElement(ospf, "timers")
        spf = ET.SubElement(timers, "spf")
        spf_hold_time = ET.SubElement(spf, "spf-hold-time")
        spf_hold_time.text = kwargs.pop('spf_hold_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_nonstop_routing(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        nonstop_routing = ET.SubElement(ospf, "nonstop-routing")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_router_ospf_maximum_paths(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        router = ET.SubElement(ipv6, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        maximum_paths = ET.SubElement(ospf, "maximum-paths")
        maximum_paths.text = kwargs.pop('maximum_paths')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_ipv6route_route_dest(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        ipv6route = ET.SubElement(ipv6, "ipv6route", xmlns="urn:brocade.com:mgmt:brocade-ip-forward")
        route = ET.SubElement(ipv6route, "route")
        dest = ET.SubElement(route, "dest")
        dest.text = kwargs.pop('dest')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_ipv6route_route_next_ipv6_hop_next_hop(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        ipv6route = ET.SubElement(ipv6, "ipv6route", xmlns="urn:brocade.com:mgmt:brocade-ip-forward")
        route = ET.SubElement(ipv6route, "route")
        dest_key = ET.SubElement(route, "dest")
        dest_key.text = kwargs.pop('dest')
        next = ET.SubElement(route, "next")
        ipv6_hop = ET.SubElement(next, "ipv6-hop")
        next_hop = ET.SubElement(ipv6_hop, "next-hop")
        next_hop.text = kwargs.pop('next_hop')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_prefix_list_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        prefix_list = ET.SubElement(ipv6, "prefix-list", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        seq_keyword_key = ET.SubElement(prefix_list, "seq-keyword")
        seq_keyword_key.text = kwargs.pop('seq_keyword')
        instance_key = ET.SubElement(prefix_list, "instance")
        instance_key.text = kwargs.pop('instance')
        name = ET.SubElement(prefix_list, "name")
        name.text = kwargs.pop('name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_prefix_list_seq_keyword(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        prefix_list = ET.SubElement(ipv6, "prefix-list", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(prefix_list, "name")
        name_key.text = kwargs.pop('name')
        instance_key = ET.SubElement(prefix_list, "instance")
        instance_key.text = kwargs.pop('instance')
        seq_keyword = ET.SubElement(prefix_list, "seq-keyword")
        seq_keyword.text = kwargs.pop('seq_keyword')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_prefix_list_instance(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        prefix_list = ET.SubElement(ipv6, "prefix-list", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(prefix_list, "name")
        name_key.text = kwargs.pop('name')
        seq_keyword_key = ET.SubElement(prefix_list, "seq-keyword")
        seq_keyword_key.text = kwargs.pop('seq_keyword')
        instance = ET.SubElement(prefix_list, "instance")
        instance.text = kwargs.pop('instance')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_prefix_list_action_ipp(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        prefix_list = ET.SubElement(ipv6, "prefix-list", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(prefix_list, "name")
        name_key.text = kwargs.pop('name')
        seq_keyword_key = ET.SubElement(prefix_list, "seq-keyword")
        seq_keyword_key.text = kwargs.pop('seq_keyword')
        instance_key = ET.SubElement(prefix_list, "instance")
        instance_key.text = kwargs.pop('instance')
        action_ipp = ET.SubElement(prefix_list, "action-ipp")
        action_ipp.text = kwargs.pop('action_ipp')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_prefix_list_ipv6_prefix_ipp(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        prefix_list = ET.SubElement(ipv6, "prefix-list", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(prefix_list, "name")
        name_key.text = kwargs.pop('name')
        seq_keyword_key = ET.SubElement(prefix_list, "seq-keyword")
        seq_keyword_key.text = kwargs.pop('seq_keyword')
        instance_key = ET.SubElement(prefix_list, "instance")
        instance_key.text = kwargs.pop('instance')
        ipv6_prefix_ipp = ET.SubElement(prefix_list, "ipv6-prefix-ipp")
        ipv6_prefix_ipp.text = kwargs.pop('ipv6_prefix_ipp')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_prefix_list_ge_ipp(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        prefix_list = ET.SubElement(ipv6, "prefix-list", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(prefix_list, "name")
        name_key.text = kwargs.pop('name')
        seq_keyword_key = ET.SubElement(prefix_list, "seq-keyword")
        seq_keyword_key.text = kwargs.pop('seq_keyword')
        instance_key = ET.SubElement(prefix_list, "instance")
        instance_key.text = kwargs.pop('instance')
        ge_ipp = ET.SubElement(prefix_list, "ge-ipp")
        ge_ipp.text = kwargs.pop('ge_ipp')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_prefix_list_le_ipp(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        prefix_list = ET.SubElement(ipv6, "prefix-list", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(prefix_list, "name")
        name_key.text = kwargs.pop('name')
        seq_keyword_key = ET.SubElement(prefix_list, "seq-keyword")
        seq_keyword_key.text = kwargs.pop('seq_keyword')
        instance_key = ET.SubElement(prefix_list, "instance")
        instance_key.text = kwargs.pop('instance')
        le_ipp = ET.SubElement(prefix_list, "le-ipp")
        le_ipp.text = kwargs.pop('le_ipp')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_ipv6_global_cmds_nd_global_dad_global_dad_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        ipv6_global_cmds = ET.SubElement(ipv6, "ipv6-global-cmds", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        nd_global = ET.SubElement(ipv6_global_cmds, "nd-global")
        dad = ET.SubElement(nd_global, "dad")
        global_dad_time = ET.SubElement(dad, "global-dad-time")
        global_dad_time.text = kwargs.pop('global_dad_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_route_static_route_nh_static_route_dest(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        route = ET.SubElement(ipv6, "route", xmlns="urn:brocade.com:mgmt:brocade-ipv6-rtm")
        static_route_nh = ET.SubElement(route, "static-route-nh")
        static_route_next_hop_key = ET.SubElement(static_route_nh, "static-route-next-hop")
        static_route_next_hop_key.text = kwargs.pop('static_route_next_hop')
        static_route_dest = ET.SubElement(static_route_nh, "static-route-dest")
        static_route_dest.text = kwargs.pop('static_route_dest')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_route_static_route_nh_static_route_next_hop(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        route = ET.SubElement(ipv6, "route", xmlns="urn:brocade.com:mgmt:brocade-ipv6-rtm")
        static_route_nh = ET.SubElement(route, "static-route-nh")
        static_route_dest_key = ET.SubElement(static_route_nh, "static-route-dest")
        static_route_dest_key.text = kwargs.pop('static_route_dest')
        static_route_next_hop = ET.SubElement(static_route_nh, "static-route-next-hop")
        static_route_next_hop.text = kwargs.pop('static_route_next_hop')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_route_static_route_nh_route_attributes_metric(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        route = ET.SubElement(ipv6, "route", xmlns="urn:brocade.com:mgmt:brocade-ipv6-rtm")
        static_route_nh = ET.SubElement(route, "static-route-nh")
        static_route_dest_key = ET.SubElement(static_route_nh, "static-route-dest")
        static_route_dest_key.text = kwargs.pop('static_route_dest')
        static_route_next_hop_key = ET.SubElement(static_route_nh, "static-route-next-hop")
        static_route_next_hop_key.text = kwargs.pop('static_route_next_hop')
        route_attributes = ET.SubElement(static_route_nh, "route-attributes")
        metric = ET.SubElement(route_attributes, "metric")
        metric.text = kwargs.pop('metric')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_route_static_route_nh_route_attributes_distance(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        route = ET.SubElement(ipv6, "route", xmlns="urn:brocade.com:mgmt:brocade-ipv6-rtm")
        static_route_nh = ET.SubElement(route, "static-route-nh")
        static_route_dest_key = ET.SubElement(static_route_nh, "static-route-dest")
        static_route_dest_key.text = kwargs.pop('static_route_dest')
        static_route_next_hop_key = ET.SubElement(static_route_nh, "static-route-next-hop")
        static_route_next_hop_key.text = kwargs.pop('static_route_next_hop')
        route_attributes = ET.SubElement(static_route_nh, "route-attributes")
        distance = ET.SubElement(route_attributes, "distance")
        distance.text = kwargs.pop('distance')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_route_static_route_nh_route_attributes_tag(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        route = ET.SubElement(ipv6, "route", xmlns="urn:brocade.com:mgmt:brocade-ipv6-rtm")
        static_route_nh = ET.SubElement(route, "static-route-nh")
        static_route_dest_key = ET.SubElement(static_route_nh, "static-route-dest")
        static_route_dest_key.text = kwargs.pop('static_route_dest')
        static_route_next_hop_key = ET.SubElement(static_route_nh, "static-route-next-hop")
        static_route_next_hop_key.text = kwargs.pop('static_route_next_hop')
        route_attributes = ET.SubElement(static_route_nh, "route-attributes")
        tag = ET.SubElement(route_attributes, "tag")
        tag.text = kwargs.pop('tag')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_route_static_route_oif_static_route_dest(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        route = ET.SubElement(ipv6, "route", xmlns="urn:brocade.com:mgmt:brocade-ipv6-rtm")
        static_route_oif = ET.SubElement(route, "static-route-oif")
        static_route_oif_type_key = ET.SubElement(static_route_oif, "static-route-oif-type")
        static_route_oif_type_key.text = kwargs.pop('static_route_oif_type')
        static_route_oif_name_key = ET.SubElement(static_route_oif, "static-route-oif-name")
        static_route_oif_name_key.text = kwargs.pop('static_route_oif_name')
        static_route_dest = ET.SubElement(static_route_oif, "static-route-dest")
        static_route_dest.text = kwargs.pop('static_route_dest')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_route_static_route_oif_static_route_oif_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        route = ET.SubElement(ipv6, "route", xmlns="urn:brocade.com:mgmt:brocade-ipv6-rtm")
        static_route_oif = ET.SubElement(route, "static-route-oif")
        static_route_dest_key = ET.SubElement(static_route_oif, "static-route-dest")
        static_route_dest_key.text = kwargs.pop('static_route_dest')
        static_route_oif_name_key = ET.SubElement(static_route_oif, "static-route-oif-name")
        static_route_oif_name_key.text = kwargs.pop('static_route_oif_name')
        static_route_oif_type = ET.SubElement(static_route_oif, "static-route-oif-type")
        static_route_oif_type.text = kwargs.pop('static_route_oif_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_route_static_route_oif_static_route_oif_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        route = ET.SubElement(ipv6, "route", xmlns="urn:brocade.com:mgmt:brocade-ipv6-rtm")
        static_route_oif = ET.SubElement(route, "static-route-oif")
        static_route_dest_key = ET.SubElement(static_route_oif, "static-route-dest")
        static_route_dest_key.text = kwargs.pop('static_route_dest')
        static_route_oif_type_key = ET.SubElement(static_route_oif, "static-route-oif-type")
        static_route_oif_type_key.text = kwargs.pop('static_route_oif_type')
        static_route_oif_name = ET.SubElement(static_route_oif, "static-route-oif-name")
        static_route_oif_name.text = kwargs.pop('static_route_oif_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_route_static_route_oif_route_attributes_metric(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        route = ET.SubElement(ipv6, "route", xmlns="urn:brocade.com:mgmt:brocade-ipv6-rtm")
        static_route_oif = ET.SubElement(route, "static-route-oif")
        static_route_dest_key = ET.SubElement(static_route_oif, "static-route-dest")
        static_route_dest_key.text = kwargs.pop('static_route_dest')
        static_route_oif_type_key = ET.SubElement(static_route_oif, "static-route-oif-type")
        static_route_oif_type_key.text = kwargs.pop('static_route_oif_type')
        static_route_oif_name_key = ET.SubElement(static_route_oif, "static-route-oif-name")
        static_route_oif_name_key.text = kwargs.pop('static_route_oif_name')
        route_attributes = ET.SubElement(static_route_oif, "route-attributes")
        metric = ET.SubElement(route_attributes, "metric")
        metric.text = kwargs.pop('metric')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_route_static_route_oif_route_attributes_distance(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        route = ET.SubElement(ipv6, "route", xmlns="urn:brocade.com:mgmt:brocade-ipv6-rtm")
        static_route_oif = ET.SubElement(route, "static-route-oif")
        static_route_dest_key = ET.SubElement(static_route_oif, "static-route-dest")
        static_route_dest_key.text = kwargs.pop('static_route_dest')
        static_route_oif_type_key = ET.SubElement(static_route_oif, "static-route-oif-type")
        static_route_oif_type_key.text = kwargs.pop('static_route_oif_type')
        static_route_oif_name_key = ET.SubElement(static_route_oif, "static-route-oif-name")
        static_route_oif_name_key.text = kwargs.pop('static_route_oif_name')
        route_attributes = ET.SubElement(static_route_oif, "route-attributes")
        distance = ET.SubElement(route_attributes, "distance")
        distance.text = kwargs.pop('distance')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_route_static_route_oif_route_attributes_tag(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        route = ET.SubElement(ipv6, "route", xmlns="urn:brocade.com:mgmt:brocade-ipv6-rtm")
        static_route_oif = ET.SubElement(route, "static-route-oif")
        static_route_dest_key = ET.SubElement(static_route_oif, "static-route-dest")
        static_route_dest_key.text = kwargs.pop('static_route_dest')
        static_route_oif_type_key = ET.SubElement(static_route_oif, "static-route-oif-type")
        static_route_oif_type_key.text = kwargs.pop('static_route_oif_type')
        static_route_oif_name_key = ET.SubElement(static_route_oif, "static-route-oif-name")
        static_route_oif_name_key.text = kwargs.pop('static_route_oif_name')
        route_attributes = ET.SubElement(static_route_oif, "route-attributes")
        tag = ET.SubElement(route_attributes, "tag")
        tag.text = kwargs.pop('tag')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_route_link_local_static_route_nh_link_local_static_route_dest(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        route = ET.SubElement(ipv6, "route", xmlns="urn:brocade.com:mgmt:brocade-ipv6-rtm")
        link_local_static_route_nh = ET.SubElement(route, "link-local-static-route-nh")
        link_local_nexthop_key = ET.SubElement(link_local_static_route_nh, "link-local-nexthop")
        link_local_nexthop_key.text = kwargs.pop('link_local_nexthop')
        link_local_route_oif_type_key = ET.SubElement(link_local_static_route_nh, "link-local-route-oif-type")
        link_local_route_oif_type_key.text = kwargs.pop('link_local_route_oif_type')
        link_local_route_oif_name_key = ET.SubElement(link_local_static_route_nh, "link-local-route-oif-name")
        link_local_route_oif_name_key.text = kwargs.pop('link_local_route_oif_name')
        link_local_static_route_dest = ET.SubElement(link_local_static_route_nh, "link-local-static-route-dest")
        link_local_static_route_dest.text = kwargs.pop('link_local_static_route_dest')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_route_link_local_static_route_nh_link_local_nexthop(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        route = ET.SubElement(ipv6, "route", xmlns="urn:brocade.com:mgmt:brocade-ipv6-rtm")
        link_local_static_route_nh = ET.SubElement(route, "link-local-static-route-nh")
        link_local_static_route_dest_key = ET.SubElement(link_local_static_route_nh, "link-local-static-route-dest")
        link_local_static_route_dest_key.text = kwargs.pop('link_local_static_route_dest')
        link_local_route_oif_type_key = ET.SubElement(link_local_static_route_nh, "link-local-route-oif-type")
        link_local_route_oif_type_key.text = kwargs.pop('link_local_route_oif_type')
        link_local_route_oif_name_key = ET.SubElement(link_local_static_route_nh, "link-local-route-oif-name")
        link_local_route_oif_name_key.text = kwargs.pop('link_local_route_oif_name')
        link_local_nexthop = ET.SubElement(link_local_static_route_nh, "link-local-nexthop")
        link_local_nexthop.text = kwargs.pop('link_local_nexthop')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_route_link_local_static_route_nh_link_local_route_oif_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        route = ET.SubElement(ipv6, "route", xmlns="urn:brocade.com:mgmt:brocade-ipv6-rtm")
        link_local_static_route_nh = ET.SubElement(route, "link-local-static-route-nh")
        link_local_static_route_dest_key = ET.SubElement(link_local_static_route_nh, "link-local-static-route-dest")
        link_local_static_route_dest_key.text = kwargs.pop('link_local_static_route_dest')
        link_local_nexthop_key = ET.SubElement(link_local_static_route_nh, "link-local-nexthop")
        link_local_nexthop_key.text = kwargs.pop('link_local_nexthop')
        link_local_route_oif_name_key = ET.SubElement(link_local_static_route_nh, "link-local-route-oif-name")
        link_local_route_oif_name_key.text = kwargs.pop('link_local_route_oif_name')
        link_local_route_oif_type = ET.SubElement(link_local_static_route_nh, "link-local-route-oif-type")
        link_local_route_oif_type.text = kwargs.pop('link_local_route_oif_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_route_link_local_static_route_nh_link_local_route_oif_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        route = ET.SubElement(ipv6, "route", xmlns="urn:brocade.com:mgmt:brocade-ipv6-rtm")
        link_local_static_route_nh = ET.SubElement(route, "link-local-static-route-nh")
        link_local_static_route_dest_key = ET.SubElement(link_local_static_route_nh, "link-local-static-route-dest")
        link_local_static_route_dest_key.text = kwargs.pop('link_local_static_route_dest')
        link_local_nexthop_key = ET.SubElement(link_local_static_route_nh, "link-local-nexthop")
        link_local_nexthop_key.text = kwargs.pop('link_local_nexthop')
        link_local_route_oif_type_key = ET.SubElement(link_local_static_route_nh, "link-local-route-oif-type")
        link_local_route_oif_type_key.text = kwargs.pop('link_local_route_oif_type')
        link_local_route_oif_name = ET.SubElement(link_local_static_route_nh, "link-local-route-oif-name")
        link_local_route_oif_name.text = kwargs.pop('link_local_route_oif_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_route_link_local_static_route_nh_route_attributes_metric(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        route = ET.SubElement(ipv6, "route", xmlns="urn:brocade.com:mgmt:brocade-ipv6-rtm")
        link_local_static_route_nh = ET.SubElement(route, "link-local-static-route-nh")
        link_local_static_route_dest_key = ET.SubElement(link_local_static_route_nh, "link-local-static-route-dest")
        link_local_static_route_dest_key.text = kwargs.pop('link_local_static_route_dest')
        link_local_nexthop_key = ET.SubElement(link_local_static_route_nh, "link-local-nexthop")
        link_local_nexthop_key.text = kwargs.pop('link_local_nexthop')
        link_local_route_oif_type_key = ET.SubElement(link_local_static_route_nh, "link-local-route-oif-type")
        link_local_route_oif_type_key.text = kwargs.pop('link_local_route_oif_type')
        link_local_route_oif_name_key = ET.SubElement(link_local_static_route_nh, "link-local-route-oif-name")
        link_local_route_oif_name_key.text = kwargs.pop('link_local_route_oif_name')
        route_attributes = ET.SubElement(link_local_static_route_nh, "route-attributes")
        metric = ET.SubElement(route_attributes, "metric")
        metric.text = kwargs.pop('metric')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_route_link_local_static_route_nh_route_attributes_distance(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        route = ET.SubElement(ipv6, "route", xmlns="urn:brocade.com:mgmt:brocade-ipv6-rtm")
        link_local_static_route_nh = ET.SubElement(route, "link-local-static-route-nh")
        link_local_static_route_dest_key = ET.SubElement(link_local_static_route_nh, "link-local-static-route-dest")
        link_local_static_route_dest_key.text = kwargs.pop('link_local_static_route_dest')
        link_local_nexthop_key = ET.SubElement(link_local_static_route_nh, "link-local-nexthop")
        link_local_nexthop_key.text = kwargs.pop('link_local_nexthop')
        link_local_route_oif_type_key = ET.SubElement(link_local_static_route_nh, "link-local-route-oif-type")
        link_local_route_oif_type_key.text = kwargs.pop('link_local_route_oif_type')
        link_local_route_oif_name_key = ET.SubElement(link_local_static_route_nh, "link-local-route-oif-name")
        link_local_route_oif_name_key.text = kwargs.pop('link_local_route_oif_name')
        route_attributes = ET.SubElement(link_local_static_route_nh, "route-attributes")
        distance = ET.SubElement(route_attributes, "distance")
        distance.text = kwargs.pop('distance')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_route_link_local_static_route_nh_route_attributes_tag(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        route = ET.SubElement(ipv6, "route", xmlns="urn:brocade.com:mgmt:brocade-ipv6-rtm")
        link_local_static_route_nh = ET.SubElement(route, "link-local-static-route-nh")
        link_local_static_route_dest_key = ET.SubElement(link_local_static_route_nh, "link-local-static-route-dest")
        link_local_static_route_dest_key.text = kwargs.pop('link_local_static_route_dest')
        link_local_nexthop_key = ET.SubElement(link_local_static_route_nh, "link-local-nexthop")
        link_local_nexthop_key.text = kwargs.pop('link_local_nexthop')
        link_local_route_oif_type_key = ET.SubElement(link_local_static_route_nh, "link-local-route-oif-type")
        link_local_route_oif_type_key.text = kwargs.pop('link_local_route_oif_type')
        link_local_route_oif_name_key = ET.SubElement(link_local_static_route_nh, "link-local-route-oif-name")
        link_local_route_oif_name_key.text = kwargs.pop('link_local_route_oif_name')
        route_attributes = ET.SubElement(link_local_static_route_nh, "route-attributes")
        tag = ET.SubElement(route_attributes, "tag")
        tag.text = kwargs.pop('tag')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_route_static_route_nh_vrf_static_route_next_vrf_dest(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        route = ET.SubElement(ipv6, "route", xmlns="urn:brocade.com:mgmt:brocade-ipv6-rtm")
        static_route_nh_vrf = ET.SubElement(route, "static-route-nh-vrf")
        next_hop_vrf_key = ET.SubElement(static_route_nh_vrf, "next-hop-vrf")
        next_hop_vrf_key.text = kwargs.pop('next_hop_vrf')
        static_route_next_hop_key = ET.SubElement(static_route_nh_vrf, "static-route-next-hop")
        static_route_next_hop_key.text = kwargs.pop('static_route_next_hop')
        static_route_next_vrf_dest = ET.SubElement(static_route_nh_vrf, "static-route-next-vrf-dest")
        static_route_next_vrf_dest.text = kwargs.pop('static_route_next_vrf_dest')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_route_static_route_nh_vrf_next_hop_vrf(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        route = ET.SubElement(ipv6, "route", xmlns="urn:brocade.com:mgmt:brocade-ipv6-rtm")
        static_route_nh_vrf = ET.SubElement(route, "static-route-nh-vrf")
        static_route_next_vrf_dest_key = ET.SubElement(static_route_nh_vrf, "static-route-next-vrf-dest")
        static_route_next_vrf_dest_key.text = kwargs.pop('static_route_next_vrf_dest')
        static_route_next_hop_key = ET.SubElement(static_route_nh_vrf, "static-route-next-hop")
        static_route_next_hop_key.text = kwargs.pop('static_route_next_hop')
        next_hop_vrf = ET.SubElement(static_route_nh_vrf, "next-hop-vrf")
        next_hop_vrf.text = kwargs.pop('next_hop_vrf')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_route_static_route_nh_vrf_static_route_next_hop(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        route = ET.SubElement(ipv6, "route", xmlns="urn:brocade.com:mgmt:brocade-ipv6-rtm")
        static_route_nh_vrf = ET.SubElement(route, "static-route-nh-vrf")
        static_route_next_vrf_dest_key = ET.SubElement(static_route_nh_vrf, "static-route-next-vrf-dest")
        static_route_next_vrf_dest_key.text = kwargs.pop('static_route_next_vrf_dest')
        next_hop_vrf_key = ET.SubElement(static_route_nh_vrf, "next-hop-vrf")
        next_hop_vrf_key.text = kwargs.pop('next_hop_vrf')
        static_route_next_hop = ET.SubElement(static_route_nh_vrf, "static-route-next-hop")
        static_route_next_hop.text = kwargs.pop('static_route_next_hop')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_imprt_routes_src_vrf(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        imprt = ET.SubElement(ipv6, "import", xmlns="urn:brocade.com:mgmt:brocade-ipv6-rtm")
        routes = ET.SubElement(imprt, "routes")
        route_map_key = ET.SubElement(routes, "route-map")
        route_map_key.text = kwargs.pop('route_map')
        src_vrf = ET.SubElement(routes, "src-vrf")
        src_vrf.text = kwargs.pop('src_vrf')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_imprt_routes_route_map(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        imprt = ET.SubElement(ipv6, "import", xmlns="urn:brocade.com:mgmt:brocade-ipv6-rtm")
        routes = ET.SubElement(imprt, "routes")
        src_vrf_key = ET.SubElement(routes, "src-vrf")
        src_vrf_key.text = kwargs.pop('src_vrf')
        route_map = ET.SubElement(routes, "route-map")
        route_map.text = kwargs.pop('route_map')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_proto_vrrpv3_vrrp(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        proto_vrrpv3 = ET.SubElement(ipv6, "proto-vrrpv3", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrrp = ET.SubElement(proto_vrrpv3, "vrrp")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ipv6_proto_vrrpv3_vrrp_extended(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ipv6 = ET.SubElement(rbridge_id, "ipv6")
        proto_vrrpv3 = ET.SubElement(ipv6, "proto-vrrpv3", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrrp_extended = ET.SubElement(proto_vrrpv3, "vrrp-extended")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_vrf_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name = ET.SubElement(bgp, "vrf-name")
        vrf_name.text = kwargs.pop('vrf_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_local_as(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        local_as = ET.SubElement(router_bgp_attributes, "local-as")
        local_as.text = kwargs.pop('local_as')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_always_compare_med(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        always_compare_med = ET.SubElement(router_bgp_attributes, "always-compare-med")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_compare_med_empty_aspath(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        compare_med_empty_aspath = ET.SubElement(router_bgp_attributes, "compare-med-empty-aspath")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_med_missing_as_worst(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        med_missing_as_worst = ET.SubElement(router_bgp_attributes, "med-missing-as-worst")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_as_path_ignore(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        as_path_ignore = ET.SubElement(router_bgp_attributes, "as-path-ignore")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_compare_routerid(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        compare_routerid = ET.SubElement(router_bgp_attributes, "compare-routerid")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_install_igp_cost(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        install_igp_cost = ET.SubElement(router_bgp_attributes, "install-igp-cost")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_cluster_id_ch_cluster_id_ca_cluster_id_cluster_id_value(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        cluster_id = ET.SubElement(router_bgp_attributes, "cluster-id")
        ch_cluster_id = ET.SubElement(cluster_id, "ch-cluster-id")
        ca_cluster_id = ET.SubElement(ch_cluster_id, "ca-cluster-id")
        cluster_id_value = ET.SubElement(ca_cluster_id, "cluster-id-value")
        cluster_id_value.text = kwargs.pop('cluster_id_value')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_cluster_id_ch_cluster_id_ca_cluster_id_ipv4_address_cluster_id_ipv4_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        cluster_id = ET.SubElement(router_bgp_attributes, "cluster-id")
        ch_cluster_id = ET.SubElement(cluster_id, "ch-cluster-id")
        ca_cluster_id_ipv4_address = ET.SubElement(ch_cluster_id, "ca-cluster-id-ipv4-address")
        cluster_id_ipv4_address = ET.SubElement(ca_cluster_id_ipv4_address, "cluster-id-ipv4-address")
        cluster_id_ipv4_address.text = kwargs.pop('cluster_id_ipv4_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_default_local_preference(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        default_local_preference = ET.SubElement(router_bgp_attributes, "default-local-preference")
        default_local_preference.text = kwargs.pop('default_local_preference')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_distance_ext_route_distance(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        distance = ET.SubElement(router_bgp_attributes, "distance")
        ext_route_distance = ET.SubElement(distance, "ext-route-distance")
        ext_route_distance.text = kwargs.pop('ext_route_distance')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_distance_int_route_distance(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        distance = ET.SubElement(router_bgp_attributes, "distance")
        int_route_distance = ET.SubElement(distance, "int-route-distance")
        int_route_distance.text = kwargs.pop('int_route_distance')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_distance_lcl_route_distance(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        distance = ET.SubElement(router_bgp_attributes, "distance")
        lcl_route_distance = ET.SubElement(distance, "lcl-route-distance")
        lcl_route_distance.text = kwargs.pop('lcl_route_distance')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_capability_as4_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        capability = ET.SubElement(router_bgp_attributes, "capability")
        as4_enable = ET.SubElement(capability, "as4-enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_maxas_limit_in_cg_num_as_in_path(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        maxas_limit = ET.SubElement(router_bgp_attributes, "maxas-limit")
        in_cg = ET.SubElement(maxas_limit, "in")
        num_as_in_path = ET.SubElement(in_cg, "num-as-in-path")
        num_as_in_path.text = kwargs.pop('num_as_in_path')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_enforce_first_as(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        enforce_first_as = ET.SubElement(router_bgp_attributes, "enforce-first-as")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_fast_external_fallover(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        fast_external_fallover = ET.SubElement(router_bgp_attributes, "fast-external-fallover")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_timers_keep_alive(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        timers = ET.SubElement(router_bgp_attributes, "timers")
        keep_alive = ET.SubElement(timers, "keep-alive")
        keep_alive.text = kwargs.pop('keep_alive')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_timers_hold_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        timers = ET.SubElement(router_bgp_attributes, "timers")
        hold_time = ET.SubElement(timers, "hold-time")
        hold_time.text = kwargs.pop('hold_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_log_dampening_debug(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        log_dampening_debug = ET.SubElement(router_bgp_attributes, "log-dampening-debug")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_confederation_identifier(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        confederation = ET.SubElement(router_bgp_attributes, "confederation")
        identifier = ET.SubElement(confederation, "identifier")
        identifier.text = kwargs.pop('identifier')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_peer_grps_neighbor_peer_grp_router_bgp_neighbor_peer_grp(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        peer_grps = ET.SubElement(router_bgp_attributes, "peer-grps")
        neighbor_peer_grp = ET.SubElement(peer_grps, "neighbor-peer-grp")
        router_bgp_neighbor_peer_grp = ET.SubElement(neighbor_peer_grp, "router-bgp-neighbor-peer-grp")
        router_bgp_neighbor_peer_grp.text = kwargs.pop('router_bgp_neighbor_peer_grp')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_peer_grps_neighbor_peer_grp_peer_group_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        peer_grps = ET.SubElement(router_bgp_attributes, "peer-grps")
        neighbor_peer_grp = ET.SubElement(peer_grps, "neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key = ET.SubElement(neighbor_peer_grp, "router-bgp-neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key.text = kwargs.pop('router_bgp_neighbor_peer_grp')
        peer_group_name = ET.SubElement(neighbor_peer_grp, "peer-group-name")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_peer_grps_neighbor_peer_grp_remote_as(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        peer_grps = ET.SubElement(router_bgp_attributes, "peer-grps")
        neighbor_peer_grp = ET.SubElement(peer_grps, "neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key = ET.SubElement(neighbor_peer_grp, "router-bgp-neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key.text = kwargs.pop('router_bgp_neighbor_peer_grp')
        remote_as = ET.SubElement(neighbor_peer_grp, "remote-as")
        remote_as.text = kwargs.pop('remote_as')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_peer_grps_neighbor_peer_grp_update_source_ch_update_source_ca_ipv4_sip_ipv4_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        peer_grps = ET.SubElement(router_bgp_attributes, "peer-grps")
        neighbor_peer_grp = ET.SubElement(peer_grps, "neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key = ET.SubElement(neighbor_peer_grp, "router-bgp-neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key.text = kwargs.pop('router_bgp_neighbor_peer_grp')
        update_source = ET.SubElement(neighbor_peer_grp, "update-source")
        ch_update_source = ET.SubElement(update_source, "ch-update-source")
        ca_ipv4 = ET.SubElement(ch_update_source, "ca-ipv4")
        sip_ipv4_address = ET.SubElement(ca_ipv4, "sip-ipv4-address")
        sip_ipv4_address.text = kwargs.pop('sip_ipv4_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_peer_grps_neighbor_peer_grp_update_source_ch_update_source_ca_eth_ethernet_interface_interface_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        peer_grps = ET.SubElement(router_bgp_attributes, "peer-grps")
        neighbor_peer_grp = ET.SubElement(peer_grps, "neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key = ET.SubElement(neighbor_peer_grp, "router-bgp-neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key.text = kwargs.pop('router_bgp_neighbor_peer_grp')
        update_source = ET.SubElement(neighbor_peer_grp, "update-source")
        ch_update_source = ET.SubElement(update_source, "ch-update-source")
        ca_eth = ET.SubElement(ch_update_source, "ca-eth")
        ethernet_interface = ET.SubElement(ca_eth, "ethernet-interface")
        interface_type = ET.SubElement(ethernet_interface, "interface-type")
        interface_type.text = kwargs.pop('interface_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_peer_grps_neighbor_peer_grp_update_source_ch_update_source_ca_eth_ethernet_interface_ethernet(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        peer_grps = ET.SubElement(router_bgp_attributes, "peer-grps")
        neighbor_peer_grp = ET.SubElement(peer_grps, "neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key = ET.SubElement(neighbor_peer_grp, "router-bgp-neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key.text = kwargs.pop('router_bgp_neighbor_peer_grp')
        update_source = ET.SubElement(neighbor_peer_grp, "update-source")
        ch_update_source = ET.SubElement(update_source, "ch-update-source")
        ca_eth = ET.SubElement(ch_update_source, "ca-eth")
        ethernet_interface = ET.SubElement(ca_eth, "ethernet-interface")
        ethernet = ET.SubElement(ethernet_interface, "ethernet")
        ethernet.text = kwargs.pop('ethernet')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_peer_grps_neighbor_peer_grp_update_source_ch_update_source_ca_loopback_loopback(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        peer_grps = ET.SubElement(router_bgp_attributes, "peer-grps")
        neighbor_peer_grp = ET.SubElement(peer_grps, "neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key = ET.SubElement(neighbor_peer_grp, "router-bgp-neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key.text = kwargs.pop('router_bgp_neighbor_peer_grp')
        update_source = ET.SubElement(neighbor_peer_grp, "update-source")
        ch_update_source = ET.SubElement(update_source, "ch-update-source")
        ca_loopback = ET.SubElement(ch_update_source, "ca-loopback")
        loopback = ET.SubElement(ca_loopback, "loopback")
        loopback.text = kwargs.pop('loopback')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_peer_grps_neighbor_peer_grp_update_source_ch_update_source_ca_ve_ve_interface(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        peer_grps = ET.SubElement(router_bgp_attributes, "peer-grps")
        neighbor_peer_grp = ET.SubElement(peer_grps, "neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key = ET.SubElement(neighbor_peer_grp, "router-bgp-neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key.text = kwargs.pop('router_bgp_neighbor_peer_grp')
        update_source = ET.SubElement(neighbor_peer_grp, "update-source")
        ch_update_source = ET.SubElement(update_source, "ch-update-source")
        ca_ve = ET.SubElement(ch_update_source, "ca-ve")
        ve_interface = ET.SubElement(ca_ve, "ve-interface")
        ve_interface.text = kwargs.pop('ve_interface')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_peer_grps_neighbor_peer_grp_description(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        peer_grps = ET.SubElement(router_bgp_attributes, "peer-grps")
        neighbor_peer_grp = ET.SubElement(peer_grps, "neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key = ET.SubElement(neighbor_peer_grp, "router-bgp-neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key.text = kwargs.pop('router_bgp_neighbor_peer_grp')
        description = ET.SubElement(neighbor_peer_grp, "description")
        description.text = kwargs.pop('description')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_peer_grps_neighbor_peer_grp_local_as_local_as_value(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        peer_grps = ET.SubElement(router_bgp_attributes, "peer-grps")
        neighbor_peer_grp = ET.SubElement(peer_grps, "neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key = ET.SubElement(neighbor_peer_grp, "router-bgp-neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key.text = kwargs.pop('router_bgp_neighbor_peer_grp')
        local_as = ET.SubElement(neighbor_peer_grp, "local-as")
        local_as_value = ET.SubElement(local_as, "local-as-value")
        local_as_value.text = kwargs.pop('local_as_value')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_peer_grps_neighbor_peer_grp_local_as_no_prepend(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        peer_grps = ET.SubElement(router_bgp_attributes, "peer-grps")
        neighbor_peer_grp = ET.SubElement(peer_grps, "neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key = ET.SubElement(neighbor_peer_grp, "router-bgp-neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key.text = kwargs.pop('router_bgp_neighbor_peer_grp')
        local_as = ET.SubElement(neighbor_peer_grp, "local-as")
        no_prepend = ET.SubElement(local_as, "no-prepend")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_peer_grps_neighbor_peer_grp_next_hop_self_ch_next_hop_self_type_ca_next_hop_self_always_next_hop_self_always(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        peer_grps = ET.SubElement(router_bgp_attributes, "peer-grps")
        neighbor_peer_grp = ET.SubElement(peer_grps, "neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key = ET.SubElement(neighbor_peer_grp, "router-bgp-neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key.text = kwargs.pop('router_bgp_neighbor_peer_grp')
        next_hop_self = ET.SubElement(neighbor_peer_grp, "next-hop-self")
        ch_next_hop_self_type = ET.SubElement(next_hop_self, "ch-next-hop-self-type")
        ca_next_hop_self_always = ET.SubElement(ch_next_hop_self_type, "ca-next-hop-self-always")
        next_hop_self_always = ET.SubElement(ca_next_hop_self_always, "next-hop-self-always")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_peer_grps_neighbor_peer_grp_next_hop_self_ch_next_hop_self_type_ca_next_hop_self_status_next_hop_self_status(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        peer_grps = ET.SubElement(router_bgp_attributes, "peer-grps")
        neighbor_peer_grp = ET.SubElement(peer_grps, "neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key = ET.SubElement(neighbor_peer_grp, "router-bgp-neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key.text = kwargs.pop('router_bgp_neighbor_peer_grp')
        next_hop_self = ET.SubElement(neighbor_peer_grp, "next-hop-self")
        ch_next_hop_self_type = ET.SubElement(next_hop_self, "ch-next-hop-self-type")
        ca_next_hop_self_status = ET.SubElement(ch_next_hop_self_type, "ca-next-hop-self-status")
        next_hop_self_status = ET.SubElement(ca_next_hop_self_status, "next-hop-self-status")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_peer_grps_neighbor_peer_grp_advertisement_interval_value(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        peer_grps = ET.SubElement(router_bgp_attributes, "peer-grps")
        neighbor_peer_grp = ET.SubElement(peer_grps, "neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key = ET.SubElement(neighbor_peer_grp, "router-bgp-neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key.text = kwargs.pop('router_bgp_neighbor_peer_grp')
        advertisement_interval = ET.SubElement(neighbor_peer_grp, "advertisement-interval")
        value = ET.SubElement(advertisement_interval, "value")
        value.text = kwargs.pop('value')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_peer_grps_neighbor_peer_grp_ebgp_btsh(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        peer_grps = ET.SubElement(router_bgp_attributes, "peer-grps")
        neighbor_peer_grp = ET.SubElement(peer_grps, "neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key = ET.SubElement(neighbor_peer_grp, "router-bgp-neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key.text = kwargs.pop('router_bgp_neighbor_peer_grp')
        ebgp_btsh = ET.SubElement(neighbor_peer_grp, "ebgp-btsh")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_peer_grps_neighbor_peer_grp_ebgp_multihop_ch_ebgp_multihop_type_ca_ebgp_multihop_flag_ebgp_multihop_flag(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        peer_grps = ET.SubElement(router_bgp_attributes, "peer-grps")
        neighbor_peer_grp = ET.SubElement(peer_grps, "neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key = ET.SubElement(neighbor_peer_grp, "router-bgp-neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key.text = kwargs.pop('router_bgp_neighbor_peer_grp')
        ebgp_multihop = ET.SubElement(neighbor_peer_grp, "ebgp-multihop")
        ch_ebgp_multihop_type = ET.SubElement(ebgp_multihop, "ch-ebgp-multihop-type")
        ca_ebgp_multihop_flag = ET.SubElement(ch_ebgp_multihop_type, "ca-ebgp-multihop-flag")
        ebgp_multihop_flag = ET.SubElement(ca_ebgp_multihop_flag, "ebgp-multihop-flag")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_peer_grps_neighbor_peer_grp_ebgp_multihop_ch_ebgp_multihop_type_ca_ebgp_multihop_count_ebgp_multihop_count(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        peer_grps = ET.SubElement(router_bgp_attributes, "peer-grps")
        neighbor_peer_grp = ET.SubElement(peer_grps, "neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key = ET.SubElement(neighbor_peer_grp, "router-bgp-neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key.text = kwargs.pop('router_bgp_neighbor_peer_grp')
        ebgp_multihop = ET.SubElement(neighbor_peer_grp, "ebgp-multihop")
        ch_ebgp_multihop_type = ET.SubElement(ebgp_multihop, "ch-ebgp-multihop-type")
        ca_ebgp_multihop_count = ET.SubElement(ch_ebgp_multihop_type, "ca-ebgp-multihop-count")
        ebgp_multihop_count = ET.SubElement(ca_ebgp_multihop_count, "ebgp-multihop-count")
        ebgp_multihop_count.text = kwargs.pop('ebgp_multihop_count')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_peer_grps_neighbor_peer_grp_maxas_limit_in_cg_ch_maxas_limit_ca_maxas_limit_enable_num_as_in_as_path(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        peer_grps = ET.SubElement(router_bgp_attributes, "peer-grps")
        neighbor_peer_grp = ET.SubElement(peer_grps, "neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key = ET.SubElement(neighbor_peer_grp, "router-bgp-neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key.text = kwargs.pop('router_bgp_neighbor_peer_grp')
        maxas_limit = ET.SubElement(neighbor_peer_grp, "maxas-limit")
        in_cg = ET.SubElement(maxas_limit, "in")
        ch_maxas_limit = ET.SubElement(in_cg, "ch-maxas-limit")
        ca_maxas_limit_enable = ET.SubElement(ch_maxas_limit, "ca-maxas-limit-enable")
        num_as_in_as_path = ET.SubElement(ca_maxas_limit_enable, "num-as-in-as-path")
        num_as_in_as_path.text = kwargs.pop('num_as_in_as_path')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_peer_grps_neighbor_peer_grp_maxas_limit_in_cg_ch_maxas_limit_ca_maxas_limit_disable_maxas_limit_disable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        peer_grps = ET.SubElement(router_bgp_attributes, "peer-grps")
        neighbor_peer_grp = ET.SubElement(peer_grps, "neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key = ET.SubElement(neighbor_peer_grp, "router-bgp-neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key.text = kwargs.pop('router_bgp_neighbor_peer_grp')
        maxas_limit = ET.SubElement(neighbor_peer_grp, "maxas-limit")
        in_cg = ET.SubElement(maxas_limit, "in")
        ch_maxas_limit = ET.SubElement(in_cg, "ch-maxas-limit")
        ca_maxas_limit_disable = ET.SubElement(ch_maxas_limit, "ca-maxas-limit-disable")
        maxas_limit_disable = ET.SubElement(ca_maxas_limit_disable, "maxas-limit-disable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_peer_grps_neighbor_peer_grp_password(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        peer_grps = ET.SubElement(router_bgp_attributes, "peer-grps")
        neighbor_peer_grp = ET.SubElement(peer_grps, "neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key = ET.SubElement(neighbor_peer_grp, "router-bgp-neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key.text = kwargs.pop('router_bgp_neighbor_peer_grp')
        password = ET.SubElement(neighbor_peer_grp, "password")
        password.text = kwargs.pop('password')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_peer_grps_neighbor_peer_grp_enforce_first_as_nei_enforce_first_as(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        peer_grps = ET.SubElement(router_bgp_attributes, "peer-grps")
        neighbor_peer_grp = ET.SubElement(peer_grps, "neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key = ET.SubElement(neighbor_peer_grp, "router-bgp-neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key.text = kwargs.pop('router_bgp_neighbor_peer_grp')
        enforce_first_as = ET.SubElement(neighbor_peer_grp, "enforce-first-as")
        nei_enforce_first_as = ET.SubElement(enforce_first_as, "nei-enforce-first-as")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_peer_grps_neighbor_peer_grp_enforce_first_as_nei_enforce_first_as_disable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        peer_grps = ET.SubElement(router_bgp_attributes, "peer-grps")
        neighbor_peer_grp = ET.SubElement(peer_grps, "neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key = ET.SubElement(neighbor_peer_grp, "router-bgp-neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key.text = kwargs.pop('router_bgp_neighbor_peer_grp')
        enforce_first_as = ET.SubElement(neighbor_peer_grp, "enforce-first-as")
        nei_enforce_first_as_disable = ET.SubElement(enforce_first_as, "nei-enforce-first-as-disable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_peer_grps_neighbor_peer_grp_neighbor_capability_as4_neighbor_as4_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        peer_grps = ET.SubElement(router_bgp_attributes, "peer-grps")
        neighbor_peer_grp = ET.SubElement(peer_grps, "neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key = ET.SubElement(neighbor_peer_grp, "router-bgp-neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key.text = kwargs.pop('router_bgp_neighbor_peer_grp')
        neighbor_capability = ET.SubElement(neighbor_peer_grp, "neighbor-capability")
        as4 = ET.SubElement(neighbor_capability, "as4")
        neighbor_as4_enable = ET.SubElement(as4, "neighbor-as4-enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_peer_grps_neighbor_peer_grp_neighbor_capability_as4_neighbor_as4_disable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        peer_grps = ET.SubElement(router_bgp_attributes, "peer-grps")
        neighbor_peer_grp = ET.SubElement(peer_grps, "neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key = ET.SubElement(neighbor_peer_grp, "router-bgp-neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key.text = kwargs.pop('router_bgp_neighbor_peer_grp')
        neighbor_capability = ET.SubElement(neighbor_peer_grp, "neighbor-capability")
        as4 = ET.SubElement(neighbor_capability, "as4")
        neighbor_as4_disable = ET.SubElement(as4, "neighbor-as4-disable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_peer_grps_neighbor_peer_grp_timers_nei_keep_alive(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        peer_grps = ET.SubElement(router_bgp_attributes, "peer-grps")
        neighbor_peer_grp = ET.SubElement(peer_grps, "neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key = ET.SubElement(neighbor_peer_grp, "router-bgp-neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key.text = kwargs.pop('router_bgp_neighbor_peer_grp')
        timers = ET.SubElement(neighbor_peer_grp, "timers")
        nei_keep_alive = ET.SubElement(timers, "nei-keep-alive")
        nei_keep_alive.text = kwargs.pop('nei_keep_alive')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_peer_grps_neighbor_peer_grp_timers_nei_hold_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        peer_grps = ET.SubElement(router_bgp_attributes, "peer-grps")
        neighbor_peer_grp = ET.SubElement(peer_grps, "neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key = ET.SubElement(neighbor_peer_grp, "router-bgp-neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key.text = kwargs.pop('router_bgp_neighbor_peer_grp')
        timers = ET.SubElement(neighbor_peer_grp, "timers")
        nei_hold_time = ET.SubElement(timers, "nei-hold-time")
        nei_hold_time.text = kwargs.pop('nei_hold_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_peer_grps_neighbor_peer_grp_remove_private_as(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        peer_grps = ET.SubElement(router_bgp_attributes, "peer-grps")
        neighbor_peer_grp = ET.SubElement(peer_grps, "neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key = ET.SubElement(neighbor_peer_grp, "router-bgp-neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key.text = kwargs.pop('router_bgp_neighbor_peer_grp')
        remove_private_as = ET.SubElement(neighbor_peer_grp, "remove-private-as")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_peer_grps_neighbor_peer_grp_as_override(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        peer_grps = ET.SubElement(router_bgp_attributes, "peer-grps")
        neighbor_peer_grp = ET.SubElement(peer_grps, "neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key = ET.SubElement(neighbor_peer_grp, "router-bgp-neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key.text = kwargs.pop('router_bgp_neighbor_peer_grp')
        as_override = ET.SubElement(neighbor_peer_grp, "as-override")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_peer_grps_neighbor_peer_grp_soft_reconfiguration_inbound(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        peer_grps = ET.SubElement(router_bgp_attributes, "peer-grps")
        neighbor_peer_grp = ET.SubElement(peer_grps, "neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key = ET.SubElement(neighbor_peer_grp, "router-bgp-neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key.text = kwargs.pop('router_bgp_neighbor_peer_grp')
        soft_reconfiguration = ET.SubElement(neighbor_peer_grp, "soft-reconfiguration")
        inbound = ET.SubElement(soft_reconfiguration, "inbound")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_peer_grps_neighbor_peer_grp_static_network_edge(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        peer_grps = ET.SubElement(router_bgp_attributes, "peer-grps")
        neighbor_peer_grp = ET.SubElement(peer_grps, "neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key = ET.SubElement(neighbor_peer_grp, "router-bgp-neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key.text = kwargs.pop('router_bgp_neighbor_peer_grp')
        static_network_edge = ET.SubElement(neighbor_peer_grp, "static-network-edge")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_peer_grps_neighbor_peer_grp_shutdown_shutdown_status(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        peer_grps = ET.SubElement(router_bgp_attributes, "peer-grps")
        neighbor_peer_grp = ET.SubElement(peer_grps, "neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key = ET.SubElement(neighbor_peer_grp, "router-bgp-neighbor-peer-grp")
        router_bgp_neighbor_peer_grp_key.text = kwargs.pop('router_bgp_neighbor_peer_grp')
        shutdown = ET.SubElement(neighbor_peer_grp, "shutdown")
        shutdown_status = ET.SubElement(shutdown, "shutdown-status")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ipv6s_neighbor_ipv6_addr_router_bgp_neighbor_ipv6_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ipv6s = ET.SubElement(router_bgp_attributes, "neighbor-ipv6s")
        neighbor_ipv6_addr = ET.SubElement(neighbor_ipv6s, "neighbor-ipv6-addr")
        router_bgp_neighbor_ipv6_address = ET.SubElement(neighbor_ipv6_addr, "router-bgp-neighbor-ipv6-address")
        router_bgp_neighbor_ipv6_address.text = kwargs.pop('router_bgp_neighbor_ipv6_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ipv6s_neighbor_ipv6_addr_remote_as(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ipv6s = ET.SubElement(router_bgp_attributes, "neighbor-ipv6s")
        neighbor_ipv6_addr = ET.SubElement(neighbor_ipv6s, "neighbor-ipv6-addr")
        router_bgp_neighbor_ipv6_address_key = ET.SubElement(neighbor_ipv6_addr, "router-bgp-neighbor-ipv6-address")
        router_bgp_neighbor_ipv6_address_key.text = kwargs.pop('router_bgp_neighbor_ipv6_address')
        remote_as = ET.SubElement(neighbor_ipv6_addr, "remote-as")
        remote_as.text = kwargs.pop('remote_as')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ipv6s_neighbor_ipv6_addr_associate_peer_group(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ipv6s = ET.SubElement(router_bgp_attributes, "neighbor-ipv6s")
        neighbor_ipv6_addr = ET.SubElement(neighbor_ipv6s, "neighbor-ipv6-addr")
        router_bgp_neighbor_ipv6_address_key = ET.SubElement(neighbor_ipv6_addr, "router-bgp-neighbor-ipv6-address")
        router_bgp_neighbor_ipv6_address_key.text = kwargs.pop('router_bgp_neighbor_ipv6_address')
        associate_peer_group = ET.SubElement(neighbor_ipv6_addr, "associate-peer-group")
        associate_peer_group.text = kwargs.pop('associate_peer_group')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ipv6s_neighbor_ipv6_addr_update_source_ch_update_source_ca_ipv6_sip_ipv6_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ipv6s = ET.SubElement(router_bgp_attributes, "neighbor-ipv6s")
        neighbor_ipv6_addr = ET.SubElement(neighbor_ipv6s, "neighbor-ipv6-addr")
        router_bgp_neighbor_ipv6_address_key = ET.SubElement(neighbor_ipv6_addr, "router-bgp-neighbor-ipv6-address")
        router_bgp_neighbor_ipv6_address_key.text = kwargs.pop('router_bgp_neighbor_ipv6_address')
        update_source = ET.SubElement(neighbor_ipv6_addr, "update-source")
        ch_update_source = ET.SubElement(update_source, "ch-update-source")
        ca_ipv6 = ET.SubElement(ch_update_source, "ca-ipv6")
        sip_ipv6_address = ET.SubElement(ca_ipv6, "sip-ipv6-address")
        sip_ipv6_address.text = kwargs.pop('sip_ipv6_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ipv6s_neighbor_ipv6_addr_update_source_ch_update_source_ca_eth_ethernet_interface_interface_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ipv6s = ET.SubElement(router_bgp_attributes, "neighbor-ipv6s")
        neighbor_ipv6_addr = ET.SubElement(neighbor_ipv6s, "neighbor-ipv6-addr")
        router_bgp_neighbor_ipv6_address_key = ET.SubElement(neighbor_ipv6_addr, "router-bgp-neighbor-ipv6-address")
        router_bgp_neighbor_ipv6_address_key.text = kwargs.pop('router_bgp_neighbor_ipv6_address')
        update_source = ET.SubElement(neighbor_ipv6_addr, "update-source")
        ch_update_source = ET.SubElement(update_source, "ch-update-source")
        ca_eth = ET.SubElement(ch_update_source, "ca-eth")
        ethernet_interface = ET.SubElement(ca_eth, "ethernet-interface")
        interface_type = ET.SubElement(ethernet_interface, "interface-type")
        interface_type.text = kwargs.pop('interface_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ipv6s_neighbor_ipv6_addr_update_source_ch_update_source_ca_eth_ethernet_interface_ethernet(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ipv6s = ET.SubElement(router_bgp_attributes, "neighbor-ipv6s")
        neighbor_ipv6_addr = ET.SubElement(neighbor_ipv6s, "neighbor-ipv6-addr")
        router_bgp_neighbor_ipv6_address_key = ET.SubElement(neighbor_ipv6_addr, "router-bgp-neighbor-ipv6-address")
        router_bgp_neighbor_ipv6_address_key.text = kwargs.pop('router_bgp_neighbor_ipv6_address')
        update_source = ET.SubElement(neighbor_ipv6_addr, "update-source")
        ch_update_source = ET.SubElement(update_source, "ch-update-source")
        ca_eth = ET.SubElement(ch_update_source, "ca-eth")
        ethernet_interface = ET.SubElement(ca_eth, "ethernet-interface")
        ethernet = ET.SubElement(ethernet_interface, "ethernet")
        ethernet.text = kwargs.pop('ethernet')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ipv6s_neighbor_ipv6_addr_update_source_ch_update_source_ca_loopback_loopback(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ipv6s = ET.SubElement(router_bgp_attributes, "neighbor-ipv6s")
        neighbor_ipv6_addr = ET.SubElement(neighbor_ipv6s, "neighbor-ipv6-addr")
        router_bgp_neighbor_ipv6_address_key = ET.SubElement(neighbor_ipv6_addr, "router-bgp-neighbor-ipv6-address")
        router_bgp_neighbor_ipv6_address_key.text = kwargs.pop('router_bgp_neighbor_ipv6_address')
        update_source = ET.SubElement(neighbor_ipv6_addr, "update-source")
        ch_update_source = ET.SubElement(update_source, "ch-update-source")
        ca_loopback = ET.SubElement(ch_update_source, "ca-loopback")
        loopback = ET.SubElement(ca_loopback, "loopback")
        loopback.text = kwargs.pop('loopback')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ipv6s_neighbor_ipv6_addr_update_source_ch_update_source_ca_ve_ve_interface(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ipv6s = ET.SubElement(router_bgp_attributes, "neighbor-ipv6s")
        neighbor_ipv6_addr = ET.SubElement(neighbor_ipv6s, "neighbor-ipv6-addr")
        router_bgp_neighbor_ipv6_address_key = ET.SubElement(neighbor_ipv6_addr, "router-bgp-neighbor-ipv6-address")
        router_bgp_neighbor_ipv6_address_key.text = kwargs.pop('router_bgp_neighbor_ipv6_address')
        update_source = ET.SubElement(neighbor_ipv6_addr, "update-source")
        ch_update_source = ET.SubElement(update_source, "ch-update-source")
        ca_ve = ET.SubElement(ch_update_source, "ca-ve")
        ve_interface = ET.SubElement(ca_ve, "ve-interface")
        ve_interface.text = kwargs.pop('ve_interface')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ipv6s_neighbor_ipv6_addr_description(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ipv6s = ET.SubElement(router_bgp_attributes, "neighbor-ipv6s")
        neighbor_ipv6_addr = ET.SubElement(neighbor_ipv6s, "neighbor-ipv6-addr")
        router_bgp_neighbor_ipv6_address_key = ET.SubElement(neighbor_ipv6_addr, "router-bgp-neighbor-ipv6-address")
        router_bgp_neighbor_ipv6_address_key.text = kwargs.pop('router_bgp_neighbor_ipv6_address')
        description = ET.SubElement(neighbor_ipv6_addr, "description")
        description.text = kwargs.pop('description')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ipv6s_neighbor_ipv6_addr_local_as_local_as_value(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ipv6s = ET.SubElement(router_bgp_attributes, "neighbor-ipv6s")
        neighbor_ipv6_addr = ET.SubElement(neighbor_ipv6s, "neighbor-ipv6-addr")
        router_bgp_neighbor_ipv6_address_key = ET.SubElement(neighbor_ipv6_addr, "router-bgp-neighbor-ipv6-address")
        router_bgp_neighbor_ipv6_address_key.text = kwargs.pop('router_bgp_neighbor_ipv6_address')
        local_as = ET.SubElement(neighbor_ipv6_addr, "local-as")
        local_as_value = ET.SubElement(local_as, "local-as-value")
        local_as_value.text = kwargs.pop('local_as_value')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ipv6s_neighbor_ipv6_addr_local_as_no_prepend(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ipv6s = ET.SubElement(router_bgp_attributes, "neighbor-ipv6s")
        neighbor_ipv6_addr = ET.SubElement(neighbor_ipv6s, "neighbor-ipv6-addr")
        router_bgp_neighbor_ipv6_address_key = ET.SubElement(neighbor_ipv6_addr, "router-bgp-neighbor-ipv6-address")
        router_bgp_neighbor_ipv6_address_key.text = kwargs.pop('router_bgp_neighbor_ipv6_address')
        local_as = ET.SubElement(neighbor_ipv6_addr, "local-as")
        no_prepend = ET.SubElement(local_as, "no-prepend")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ipv6s_neighbor_ipv6_addr_next_hop_self_ch_next_hop_self_type_ca_next_hop_self_always_next_hop_self_always(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ipv6s = ET.SubElement(router_bgp_attributes, "neighbor-ipv6s")
        neighbor_ipv6_addr = ET.SubElement(neighbor_ipv6s, "neighbor-ipv6-addr")
        router_bgp_neighbor_ipv6_address_key = ET.SubElement(neighbor_ipv6_addr, "router-bgp-neighbor-ipv6-address")
        router_bgp_neighbor_ipv6_address_key.text = kwargs.pop('router_bgp_neighbor_ipv6_address')
        next_hop_self = ET.SubElement(neighbor_ipv6_addr, "next-hop-self")
        ch_next_hop_self_type = ET.SubElement(next_hop_self, "ch-next-hop-self-type")
        ca_next_hop_self_always = ET.SubElement(ch_next_hop_self_type, "ca-next-hop-self-always")
        next_hop_self_always = ET.SubElement(ca_next_hop_self_always, "next-hop-self-always")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ipv6s_neighbor_ipv6_addr_next_hop_self_ch_next_hop_self_type_ca_next_hop_self_status_next_hop_self_status(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ipv6s = ET.SubElement(router_bgp_attributes, "neighbor-ipv6s")
        neighbor_ipv6_addr = ET.SubElement(neighbor_ipv6s, "neighbor-ipv6-addr")
        router_bgp_neighbor_ipv6_address_key = ET.SubElement(neighbor_ipv6_addr, "router-bgp-neighbor-ipv6-address")
        router_bgp_neighbor_ipv6_address_key.text = kwargs.pop('router_bgp_neighbor_ipv6_address')
        next_hop_self = ET.SubElement(neighbor_ipv6_addr, "next-hop-self")
        ch_next_hop_self_type = ET.SubElement(next_hop_self, "ch-next-hop-self-type")
        ca_next_hop_self_status = ET.SubElement(ch_next_hop_self_type, "ca-next-hop-self-status")
        next_hop_self_status = ET.SubElement(ca_next_hop_self_status, "next-hop-self-status")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ipv6s_neighbor_ipv6_addr_advertisement_interval_value(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ipv6s = ET.SubElement(router_bgp_attributes, "neighbor-ipv6s")
        neighbor_ipv6_addr = ET.SubElement(neighbor_ipv6s, "neighbor-ipv6-addr")
        router_bgp_neighbor_ipv6_address_key = ET.SubElement(neighbor_ipv6_addr, "router-bgp-neighbor-ipv6-address")
        router_bgp_neighbor_ipv6_address_key.text = kwargs.pop('router_bgp_neighbor_ipv6_address')
        advertisement_interval = ET.SubElement(neighbor_ipv6_addr, "advertisement-interval")
        value = ET.SubElement(advertisement_interval, "value")
        value.text = kwargs.pop('value')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ipv6s_neighbor_ipv6_addr_ebgp_btsh(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ipv6s = ET.SubElement(router_bgp_attributes, "neighbor-ipv6s")
        neighbor_ipv6_addr = ET.SubElement(neighbor_ipv6s, "neighbor-ipv6-addr")
        router_bgp_neighbor_ipv6_address_key = ET.SubElement(neighbor_ipv6_addr, "router-bgp-neighbor-ipv6-address")
        router_bgp_neighbor_ipv6_address_key.text = kwargs.pop('router_bgp_neighbor_ipv6_address')
        ebgp_btsh = ET.SubElement(neighbor_ipv6_addr, "ebgp-btsh")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ipv6s_neighbor_ipv6_addr_ebgp_multihop_ch_ebgp_multihop_type_ca_ebgp_multihop_flag_ebgp_multihop_flag(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ipv6s = ET.SubElement(router_bgp_attributes, "neighbor-ipv6s")
        neighbor_ipv6_addr = ET.SubElement(neighbor_ipv6s, "neighbor-ipv6-addr")
        router_bgp_neighbor_ipv6_address_key = ET.SubElement(neighbor_ipv6_addr, "router-bgp-neighbor-ipv6-address")
        router_bgp_neighbor_ipv6_address_key.text = kwargs.pop('router_bgp_neighbor_ipv6_address')
        ebgp_multihop = ET.SubElement(neighbor_ipv6_addr, "ebgp-multihop")
        ch_ebgp_multihop_type = ET.SubElement(ebgp_multihop, "ch-ebgp-multihop-type")
        ca_ebgp_multihop_flag = ET.SubElement(ch_ebgp_multihop_type, "ca-ebgp-multihop-flag")
        ebgp_multihop_flag = ET.SubElement(ca_ebgp_multihop_flag, "ebgp-multihop-flag")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ipv6s_neighbor_ipv6_addr_ebgp_multihop_ch_ebgp_multihop_type_ca_ebgp_multihop_count_ebgp_multihop_count(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ipv6s = ET.SubElement(router_bgp_attributes, "neighbor-ipv6s")
        neighbor_ipv6_addr = ET.SubElement(neighbor_ipv6s, "neighbor-ipv6-addr")
        router_bgp_neighbor_ipv6_address_key = ET.SubElement(neighbor_ipv6_addr, "router-bgp-neighbor-ipv6-address")
        router_bgp_neighbor_ipv6_address_key.text = kwargs.pop('router_bgp_neighbor_ipv6_address')
        ebgp_multihop = ET.SubElement(neighbor_ipv6_addr, "ebgp-multihop")
        ch_ebgp_multihop_type = ET.SubElement(ebgp_multihop, "ch-ebgp-multihop-type")
        ca_ebgp_multihop_count = ET.SubElement(ch_ebgp_multihop_type, "ca-ebgp-multihop-count")
        ebgp_multihop_count = ET.SubElement(ca_ebgp_multihop_count, "ebgp-multihop-count")
        ebgp_multihop_count.text = kwargs.pop('ebgp_multihop_count')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ipv6s_neighbor_ipv6_addr_maxas_limit_in_cg_ch_maxas_limit_ca_maxas_limit_enable_num_as_in_as_path(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ipv6s = ET.SubElement(router_bgp_attributes, "neighbor-ipv6s")
        neighbor_ipv6_addr = ET.SubElement(neighbor_ipv6s, "neighbor-ipv6-addr")
        router_bgp_neighbor_ipv6_address_key = ET.SubElement(neighbor_ipv6_addr, "router-bgp-neighbor-ipv6-address")
        router_bgp_neighbor_ipv6_address_key.text = kwargs.pop('router_bgp_neighbor_ipv6_address')
        maxas_limit = ET.SubElement(neighbor_ipv6_addr, "maxas-limit")
        in_cg = ET.SubElement(maxas_limit, "in")
        ch_maxas_limit = ET.SubElement(in_cg, "ch-maxas-limit")
        ca_maxas_limit_enable = ET.SubElement(ch_maxas_limit, "ca-maxas-limit-enable")
        num_as_in_as_path = ET.SubElement(ca_maxas_limit_enable, "num-as-in-as-path")
        num_as_in_as_path.text = kwargs.pop('num_as_in_as_path')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ipv6s_neighbor_ipv6_addr_maxas_limit_in_cg_ch_maxas_limit_ca_maxas_limit_disable_maxas_limit_disable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ipv6s = ET.SubElement(router_bgp_attributes, "neighbor-ipv6s")
        neighbor_ipv6_addr = ET.SubElement(neighbor_ipv6s, "neighbor-ipv6-addr")
        router_bgp_neighbor_ipv6_address_key = ET.SubElement(neighbor_ipv6_addr, "router-bgp-neighbor-ipv6-address")
        router_bgp_neighbor_ipv6_address_key.text = kwargs.pop('router_bgp_neighbor_ipv6_address')
        maxas_limit = ET.SubElement(neighbor_ipv6_addr, "maxas-limit")
        in_cg = ET.SubElement(maxas_limit, "in")
        ch_maxas_limit = ET.SubElement(in_cg, "ch-maxas-limit")
        ca_maxas_limit_disable = ET.SubElement(ch_maxas_limit, "ca-maxas-limit-disable")
        maxas_limit_disable = ET.SubElement(ca_maxas_limit_disable, "maxas-limit-disable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ipv6s_neighbor_ipv6_addr_password(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ipv6s = ET.SubElement(router_bgp_attributes, "neighbor-ipv6s")
        neighbor_ipv6_addr = ET.SubElement(neighbor_ipv6s, "neighbor-ipv6-addr")
        router_bgp_neighbor_ipv6_address_key = ET.SubElement(neighbor_ipv6_addr, "router-bgp-neighbor-ipv6-address")
        router_bgp_neighbor_ipv6_address_key.text = kwargs.pop('router_bgp_neighbor_ipv6_address')
        password = ET.SubElement(neighbor_ipv6_addr, "password")
        password.text = kwargs.pop('password')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ipv6s_neighbor_ipv6_addr_enforce_first_as_nei_enforce_first_as(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ipv6s = ET.SubElement(router_bgp_attributes, "neighbor-ipv6s")
        neighbor_ipv6_addr = ET.SubElement(neighbor_ipv6s, "neighbor-ipv6-addr")
        router_bgp_neighbor_ipv6_address_key = ET.SubElement(neighbor_ipv6_addr, "router-bgp-neighbor-ipv6-address")
        router_bgp_neighbor_ipv6_address_key.text = kwargs.pop('router_bgp_neighbor_ipv6_address')
        enforce_first_as = ET.SubElement(neighbor_ipv6_addr, "enforce-first-as")
        nei_enforce_first_as = ET.SubElement(enforce_first_as, "nei-enforce-first-as")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ipv6s_neighbor_ipv6_addr_enforce_first_as_nei_enforce_first_as_disable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ipv6s = ET.SubElement(router_bgp_attributes, "neighbor-ipv6s")
        neighbor_ipv6_addr = ET.SubElement(neighbor_ipv6s, "neighbor-ipv6-addr")
        router_bgp_neighbor_ipv6_address_key = ET.SubElement(neighbor_ipv6_addr, "router-bgp-neighbor-ipv6-address")
        router_bgp_neighbor_ipv6_address_key.text = kwargs.pop('router_bgp_neighbor_ipv6_address')
        enforce_first_as = ET.SubElement(neighbor_ipv6_addr, "enforce-first-as")
        nei_enforce_first_as_disable = ET.SubElement(enforce_first_as, "nei-enforce-first-as-disable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ipv6s_neighbor_ipv6_addr_neighbor_capability_as4_neighbor_as4_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ipv6s = ET.SubElement(router_bgp_attributes, "neighbor-ipv6s")
        neighbor_ipv6_addr = ET.SubElement(neighbor_ipv6s, "neighbor-ipv6-addr")
        router_bgp_neighbor_ipv6_address_key = ET.SubElement(neighbor_ipv6_addr, "router-bgp-neighbor-ipv6-address")
        router_bgp_neighbor_ipv6_address_key.text = kwargs.pop('router_bgp_neighbor_ipv6_address')
        neighbor_capability = ET.SubElement(neighbor_ipv6_addr, "neighbor-capability")
        as4 = ET.SubElement(neighbor_capability, "as4")
        neighbor_as4_enable = ET.SubElement(as4, "neighbor-as4-enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ipv6s_neighbor_ipv6_addr_neighbor_capability_as4_neighbor_as4_disable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ipv6s = ET.SubElement(router_bgp_attributes, "neighbor-ipv6s")
        neighbor_ipv6_addr = ET.SubElement(neighbor_ipv6s, "neighbor-ipv6-addr")
        router_bgp_neighbor_ipv6_address_key = ET.SubElement(neighbor_ipv6_addr, "router-bgp-neighbor-ipv6-address")
        router_bgp_neighbor_ipv6_address_key.text = kwargs.pop('router_bgp_neighbor_ipv6_address')
        neighbor_capability = ET.SubElement(neighbor_ipv6_addr, "neighbor-capability")
        as4 = ET.SubElement(neighbor_capability, "as4")
        neighbor_as4_disable = ET.SubElement(as4, "neighbor-as4-disable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ipv6s_neighbor_ipv6_addr_timers_nei_keep_alive(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ipv6s = ET.SubElement(router_bgp_attributes, "neighbor-ipv6s")
        neighbor_ipv6_addr = ET.SubElement(neighbor_ipv6s, "neighbor-ipv6-addr")
        router_bgp_neighbor_ipv6_address_key = ET.SubElement(neighbor_ipv6_addr, "router-bgp-neighbor-ipv6-address")
        router_bgp_neighbor_ipv6_address_key.text = kwargs.pop('router_bgp_neighbor_ipv6_address')
        timers = ET.SubElement(neighbor_ipv6_addr, "timers")
        nei_keep_alive = ET.SubElement(timers, "nei-keep-alive")
        nei_keep_alive.text = kwargs.pop('nei_keep_alive')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ipv6s_neighbor_ipv6_addr_timers_nei_hold_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ipv6s = ET.SubElement(router_bgp_attributes, "neighbor-ipv6s")
        neighbor_ipv6_addr = ET.SubElement(neighbor_ipv6s, "neighbor-ipv6-addr")
        router_bgp_neighbor_ipv6_address_key = ET.SubElement(neighbor_ipv6_addr, "router-bgp-neighbor-ipv6-address")
        router_bgp_neighbor_ipv6_address_key.text = kwargs.pop('router_bgp_neighbor_ipv6_address')
        timers = ET.SubElement(neighbor_ipv6_addr, "timers")
        nei_hold_time = ET.SubElement(timers, "nei-hold-time")
        nei_hold_time.text = kwargs.pop('nei_hold_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ipv6s_neighbor_ipv6_addr_remove_private_as(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ipv6s = ET.SubElement(router_bgp_attributes, "neighbor-ipv6s")
        neighbor_ipv6_addr = ET.SubElement(neighbor_ipv6s, "neighbor-ipv6-addr")
        router_bgp_neighbor_ipv6_address_key = ET.SubElement(neighbor_ipv6_addr, "router-bgp-neighbor-ipv6-address")
        router_bgp_neighbor_ipv6_address_key.text = kwargs.pop('router_bgp_neighbor_ipv6_address')
        remove_private_as = ET.SubElement(neighbor_ipv6_addr, "remove-private-as")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ipv6s_neighbor_ipv6_addr_as_override(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ipv6s = ET.SubElement(router_bgp_attributes, "neighbor-ipv6s")
        neighbor_ipv6_addr = ET.SubElement(neighbor_ipv6s, "neighbor-ipv6-addr")
        router_bgp_neighbor_ipv6_address_key = ET.SubElement(neighbor_ipv6_addr, "router-bgp-neighbor-ipv6-address")
        router_bgp_neighbor_ipv6_address_key.text = kwargs.pop('router_bgp_neighbor_ipv6_address')
        as_override = ET.SubElement(neighbor_ipv6_addr, "as-override")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ipv6s_neighbor_ipv6_addr_soft_reconfiguration_inbound(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ipv6s = ET.SubElement(router_bgp_attributes, "neighbor-ipv6s")
        neighbor_ipv6_addr = ET.SubElement(neighbor_ipv6s, "neighbor-ipv6-addr")
        router_bgp_neighbor_ipv6_address_key = ET.SubElement(neighbor_ipv6_addr, "router-bgp-neighbor-ipv6-address")
        router_bgp_neighbor_ipv6_address_key.text = kwargs.pop('router_bgp_neighbor_ipv6_address')
        soft_reconfiguration = ET.SubElement(neighbor_ipv6_addr, "soft-reconfiguration")
        inbound = ET.SubElement(soft_reconfiguration, "inbound")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ipv6s_neighbor_ipv6_addr_static_network_edge(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ipv6s = ET.SubElement(router_bgp_attributes, "neighbor-ipv6s")
        neighbor_ipv6_addr = ET.SubElement(neighbor_ipv6s, "neighbor-ipv6-addr")
        router_bgp_neighbor_ipv6_address_key = ET.SubElement(neighbor_ipv6_addr, "router-bgp-neighbor-ipv6-address")
        router_bgp_neighbor_ipv6_address_key.text = kwargs.pop('router_bgp_neighbor_ipv6_address')
        static_network_edge = ET.SubElement(neighbor_ipv6_addr, "static-network-edge")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ipv6s_neighbor_ipv6_addr_shutdown_shutdown_status(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ipv6s = ET.SubElement(router_bgp_attributes, "neighbor-ipv6s")
        neighbor_ipv6_addr = ET.SubElement(neighbor_ipv6s, "neighbor-ipv6-addr")
        router_bgp_neighbor_ipv6_address_key = ET.SubElement(neighbor_ipv6_addr, "router-bgp-neighbor-ipv6-address")
        router_bgp_neighbor_ipv6_address_key.text = kwargs.pop('router_bgp_neighbor_ipv6_address')
        shutdown = ET.SubElement(neighbor_ipv6_addr, "shutdown")
        shutdown_status = ET.SubElement(shutdown, "shutdown-status")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ipv6s_neighbor_ipv6_addr_shutdown_generate_rib_out(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ipv6s = ET.SubElement(router_bgp_attributes, "neighbor-ipv6s")
        neighbor_ipv6_addr = ET.SubElement(neighbor_ipv6s, "neighbor-ipv6-addr")
        router_bgp_neighbor_ipv6_address_key = ET.SubElement(neighbor_ipv6_addr, "router-bgp-neighbor-ipv6-address")
        router_bgp_neighbor_ipv6_address_key.text = kwargs.pop('router_bgp_neighbor_ipv6_address')
        shutdown = ET.SubElement(neighbor_ipv6_addr, "shutdown")
        generate_rib_out = ET.SubElement(shutdown, "generate-rib-out")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ips_neighbor_addr_router_bgp_neighbor_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ips = ET.SubElement(router_bgp_attributes, "neighbor-ips")
        neighbor_addr = ET.SubElement(neighbor_ips, "neighbor-addr")
        router_bgp_neighbor_address = ET.SubElement(neighbor_addr, "router-bgp-neighbor-address")
        router_bgp_neighbor_address.text = kwargs.pop('router_bgp_neighbor_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ips_neighbor_addr_remote_as(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ips = ET.SubElement(router_bgp_attributes, "neighbor-ips")
        neighbor_addr = ET.SubElement(neighbor_ips, "neighbor-addr")
        router_bgp_neighbor_address_key = ET.SubElement(neighbor_addr, "router-bgp-neighbor-address")
        router_bgp_neighbor_address_key.text = kwargs.pop('router_bgp_neighbor_address')
        remote_as = ET.SubElement(neighbor_addr, "remote-as")
        remote_as.text = kwargs.pop('remote_as')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ips_neighbor_addr_associate_peer_group(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ips = ET.SubElement(router_bgp_attributes, "neighbor-ips")
        neighbor_addr = ET.SubElement(neighbor_ips, "neighbor-addr")
        router_bgp_neighbor_address_key = ET.SubElement(neighbor_addr, "router-bgp-neighbor-address")
        router_bgp_neighbor_address_key.text = kwargs.pop('router_bgp_neighbor_address')
        associate_peer_group = ET.SubElement(neighbor_addr, "associate-peer-group")
        associate_peer_group.text = kwargs.pop('associate_peer_group')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ips_neighbor_addr_update_source_ch_update_source_ca_ipv4_sip_ipv4_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ips = ET.SubElement(router_bgp_attributes, "neighbor-ips")
        neighbor_addr = ET.SubElement(neighbor_ips, "neighbor-addr")
        router_bgp_neighbor_address_key = ET.SubElement(neighbor_addr, "router-bgp-neighbor-address")
        router_bgp_neighbor_address_key.text = kwargs.pop('router_bgp_neighbor_address')
        update_source = ET.SubElement(neighbor_addr, "update-source")
        ch_update_source = ET.SubElement(update_source, "ch-update-source")
        ca_ipv4 = ET.SubElement(ch_update_source, "ca-ipv4")
        sip_ipv4_address = ET.SubElement(ca_ipv4, "sip-ipv4-address")
        sip_ipv4_address.text = kwargs.pop('sip_ipv4_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ips_neighbor_addr_update_source_ch_update_source_ca_eth_ethernet_interface_interface_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ips = ET.SubElement(router_bgp_attributes, "neighbor-ips")
        neighbor_addr = ET.SubElement(neighbor_ips, "neighbor-addr")
        router_bgp_neighbor_address_key = ET.SubElement(neighbor_addr, "router-bgp-neighbor-address")
        router_bgp_neighbor_address_key.text = kwargs.pop('router_bgp_neighbor_address')
        update_source = ET.SubElement(neighbor_addr, "update-source")
        ch_update_source = ET.SubElement(update_source, "ch-update-source")
        ca_eth = ET.SubElement(ch_update_source, "ca-eth")
        ethernet_interface = ET.SubElement(ca_eth, "ethernet-interface")
        interface_type = ET.SubElement(ethernet_interface, "interface-type")
        interface_type.text = kwargs.pop('interface_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ips_neighbor_addr_update_source_ch_update_source_ca_eth_ethernet_interface_ethernet(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ips = ET.SubElement(router_bgp_attributes, "neighbor-ips")
        neighbor_addr = ET.SubElement(neighbor_ips, "neighbor-addr")
        router_bgp_neighbor_address_key = ET.SubElement(neighbor_addr, "router-bgp-neighbor-address")
        router_bgp_neighbor_address_key.text = kwargs.pop('router_bgp_neighbor_address')
        update_source = ET.SubElement(neighbor_addr, "update-source")
        ch_update_source = ET.SubElement(update_source, "ch-update-source")
        ca_eth = ET.SubElement(ch_update_source, "ca-eth")
        ethernet_interface = ET.SubElement(ca_eth, "ethernet-interface")
        ethernet = ET.SubElement(ethernet_interface, "ethernet")
        ethernet.text = kwargs.pop('ethernet')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ips_neighbor_addr_update_source_ch_update_source_ca_loopback_loopback(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ips = ET.SubElement(router_bgp_attributes, "neighbor-ips")
        neighbor_addr = ET.SubElement(neighbor_ips, "neighbor-addr")
        router_bgp_neighbor_address_key = ET.SubElement(neighbor_addr, "router-bgp-neighbor-address")
        router_bgp_neighbor_address_key.text = kwargs.pop('router_bgp_neighbor_address')
        update_source = ET.SubElement(neighbor_addr, "update-source")
        ch_update_source = ET.SubElement(update_source, "ch-update-source")
        ca_loopback = ET.SubElement(ch_update_source, "ca-loopback")
        loopback = ET.SubElement(ca_loopback, "loopback")
        loopback.text = kwargs.pop('loopback')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ips_neighbor_addr_update_source_ch_update_source_ca_ve_ve_interface(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ips = ET.SubElement(router_bgp_attributes, "neighbor-ips")
        neighbor_addr = ET.SubElement(neighbor_ips, "neighbor-addr")
        router_bgp_neighbor_address_key = ET.SubElement(neighbor_addr, "router-bgp-neighbor-address")
        router_bgp_neighbor_address_key.text = kwargs.pop('router_bgp_neighbor_address')
        update_source = ET.SubElement(neighbor_addr, "update-source")
        ch_update_source = ET.SubElement(update_source, "ch-update-source")
        ca_ve = ET.SubElement(ch_update_source, "ca-ve")
        ve_interface = ET.SubElement(ca_ve, "ve-interface")
        ve_interface.text = kwargs.pop('ve_interface')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ips_neighbor_addr_description(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ips = ET.SubElement(router_bgp_attributes, "neighbor-ips")
        neighbor_addr = ET.SubElement(neighbor_ips, "neighbor-addr")
        router_bgp_neighbor_address_key = ET.SubElement(neighbor_addr, "router-bgp-neighbor-address")
        router_bgp_neighbor_address_key.text = kwargs.pop('router_bgp_neighbor_address')
        description = ET.SubElement(neighbor_addr, "description")
        description.text = kwargs.pop('description')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ips_neighbor_addr_local_as_local_as_value(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ips = ET.SubElement(router_bgp_attributes, "neighbor-ips")
        neighbor_addr = ET.SubElement(neighbor_ips, "neighbor-addr")
        router_bgp_neighbor_address_key = ET.SubElement(neighbor_addr, "router-bgp-neighbor-address")
        router_bgp_neighbor_address_key.text = kwargs.pop('router_bgp_neighbor_address')
        local_as = ET.SubElement(neighbor_addr, "local-as")
        local_as_value = ET.SubElement(local_as, "local-as-value")
        local_as_value.text = kwargs.pop('local_as_value')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ips_neighbor_addr_local_as_no_prepend(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ips = ET.SubElement(router_bgp_attributes, "neighbor-ips")
        neighbor_addr = ET.SubElement(neighbor_ips, "neighbor-addr")
        router_bgp_neighbor_address_key = ET.SubElement(neighbor_addr, "router-bgp-neighbor-address")
        router_bgp_neighbor_address_key.text = kwargs.pop('router_bgp_neighbor_address')
        local_as = ET.SubElement(neighbor_addr, "local-as")
        no_prepend = ET.SubElement(local_as, "no-prepend")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ips_neighbor_addr_next_hop_self_ch_next_hop_self_type_ca_next_hop_self_always_next_hop_self_always(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ips = ET.SubElement(router_bgp_attributes, "neighbor-ips")
        neighbor_addr = ET.SubElement(neighbor_ips, "neighbor-addr")
        router_bgp_neighbor_address_key = ET.SubElement(neighbor_addr, "router-bgp-neighbor-address")
        router_bgp_neighbor_address_key.text = kwargs.pop('router_bgp_neighbor_address')
        next_hop_self = ET.SubElement(neighbor_addr, "next-hop-self")
        ch_next_hop_self_type = ET.SubElement(next_hop_self, "ch-next-hop-self-type")
        ca_next_hop_self_always = ET.SubElement(ch_next_hop_self_type, "ca-next-hop-self-always")
        next_hop_self_always = ET.SubElement(ca_next_hop_self_always, "next-hop-self-always")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ips_neighbor_addr_next_hop_self_ch_next_hop_self_type_ca_next_hop_self_status_next_hop_self_status(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ips = ET.SubElement(router_bgp_attributes, "neighbor-ips")
        neighbor_addr = ET.SubElement(neighbor_ips, "neighbor-addr")
        router_bgp_neighbor_address_key = ET.SubElement(neighbor_addr, "router-bgp-neighbor-address")
        router_bgp_neighbor_address_key.text = kwargs.pop('router_bgp_neighbor_address')
        next_hop_self = ET.SubElement(neighbor_addr, "next-hop-self")
        ch_next_hop_self_type = ET.SubElement(next_hop_self, "ch-next-hop-self-type")
        ca_next_hop_self_status = ET.SubElement(ch_next_hop_self_type, "ca-next-hop-self-status")
        next_hop_self_status = ET.SubElement(ca_next_hop_self_status, "next-hop-self-status")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ips_neighbor_addr_advertisement_interval_value(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ips = ET.SubElement(router_bgp_attributes, "neighbor-ips")
        neighbor_addr = ET.SubElement(neighbor_ips, "neighbor-addr")
        router_bgp_neighbor_address_key = ET.SubElement(neighbor_addr, "router-bgp-neighbor-address")
        router_bgp_neighbor_address_key.text = kwargs.pop('router_bgp_neighbor_address')
        advertisement_interval = ET.SubElement(neighbor_addr, "advertisement-interval")
        value = ET.SubElement(advertisement_interval, "value")
        value.text = kwargs.pop('value')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ips_neighbor_addr_ebgp_btsh(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ips = ET.SubElement(router_bgp_attributes, "neighbor-ips")
        neighbor_addr = ET.SubElement(neighbor_ips, "neighbor-addr")
        router_bgp_neighbor_address_key = ET.SubElement(neighbor_addr, "router-bgp-neighbor-address")
        router_bgp_neighbor_address_key.text = kwargs.pop('router_bgp_neighbor_address')
        ebgp_btsh = ET.SubElement(neighbor_addr, "ebgp-btsh")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ips_neighbor_addr_ebgp_multihop_ch_ebgp_multihop_type_ca_ebgp_multihop_flag_ebgp_multihop_flag(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ips = ET.SubElement(router_bgp_attributes, "neighbor-ips")
        neighbor_addr = ET.SubElement(neighbor_ips, "neighbor-addr")
        router_bgp_neighbor_address_key = ET.SubElement(neighbor_addr, "router-bgp-neighbor-address")
        router_bgp_neighbor_address_key.text = kwargs.pop('router_bgp_neighbor_address')
        ebgp_multihop = ET.SubElement(neighbor_addr, "ebgp-multihop")
        ch_ebgp_multihop_type = ET.SubElement(ebgp_multihop, "ch-ebgp-multihop-type")
        ca_ebgp_multihop_flag = ET.SubElement(ch_ebgp_multihop_type, "ca-ebgp-multihop-flag")
        ebgp_multihop_flag = ET.SubElement(ca_ebgp_multihop_flag, "ebgp-multihop-flag")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ips_neighbor_addr_ebgp_multihop_ch_ebgp_multihop_type_ca_ebgp_multihop_count_ebgp_multihop_count(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ips = ET.SubElement(router_bgp_attributes, "neighbor-ips")
        neighbor_addr = ET.SubElement(neighbor_ips, "neighbor-addr")
        router_bgp_neighbor_address_key = ET.SubElement(neighbor_addr, "router-bgp-neighbor-address")
        router_bgp_neighbor_address_key.text = kwargs.pop('router_bgp_neighbor_address')
        ebgp_multihop = ET.SubElement(neighbor_addr, "ebgp-multihop")
        ch_ebgp_multihop_type = ET.SubElement(ebgp_multihop, "ch-ebgp-multihop-type")
        ca_ebgp_multihop_count = ET.SubElement(ch_ebgp_multihop_type, "ca-ebgp-multihop-count")
        ebgp_multihop_count = ET.SubElement(ca_ebgp_multihop_count, "ebgp-multihop-count")
        ebgp_multihop_count.text = kwargs.pop('ebgp_multihop_count')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ips_neighbor_addr_maxas_limit_in_cg_ch_maxas_limit_ca_maxas_limit_enable_num_as_in_as_path(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ips = ET.SubElement(router_bgp_attributes, "neighbor-ips")
        neighbor_addr = ET.SubElement(neighbor_ips, "neighbor-addr")
        router_bgp_neighbor_address_key = ET.SubElement(neighbor_addr, "router-bgp-neighbor-address")
        router_bgp_neighbor_address_key.text = kwargs.pop('router_bgp_neighbor_address')
        maxas_limit = ET.SubElement(neighbor_addr, "maxas-limit")
        in_cg = ET.SubElement(maxas_limit, "in")
        ch_maxas_limit = ET.SubElement(in_cg, "ch-maxas-limit")
        ca_maxas_limit_enable = ET.SubElement(ch_maxas_limit, "ca-maxas-limit-enable")
        num_as_in_as_path = ET.SubElement(ca_maxas_limit_enable, "num-as-in-as-path")
        num_as_in_as_path.text = kwargs.pop('num_as_in_as_path')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ips_neighbor_addr_maxas_limit_in_cg_ch_maxas_limit_ca_maxas_limit_disable_maxas_limit_disable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ips = ET.SubElement(router_bgp_attributes, "neighbor-ips")
        neighbor_addr = ET.SubElement(neighbor_ips, "neighbor-addr")
        router_bgp_neighbor_address_key = ET.SubElement(neighbor_addr, "router-bgp-neighbor-address")
        router_bgp_neighbor_address_key.text = kwargs.pop('router_bgp_neighbor_address')
        maxas_limit = ET.SubElement(neighbor_addr, "maxas-limit")
        in_cg = ET.SubElement(maxas_limit, "in")
        ch_maxas_limit = ET.SubElement(in_cg, "ch-maxas-limit")
        ca_maxas_limit_disable = ET.SubElement(ch_maxas_limit, "ca-maxas-limit-disable")
        maxas_limit_disable = ET.SubElement(ca_maxas_limit_disable, "maxas-limit-disable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ips_neighbor_addr_password(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ips = ET.SubElement(router_bgp_attributes, "neighbor-ips")
        neighbor_addr = ET.SubElement(neighbor_ips, "neighbor-addr")
        router_bgp_neighbor_address_key = ET.SubElement(neighbor_addr, "router-bgp-neighbor-address")
        router_bgp_neighbor_address_key.text = kwargs.pop('router_bgp_neighbor_address')
        password = ET.SubElement(neighbor_addr, "password")
        password.text = kwargs.pop('password')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ips_neighbor_addr_enforce_first_as_nei_enforce_first_as(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ips = ET.SubElement(router_bgp_attributes, "neighbor-ips")
        neighbor_addr = ET.SubElement(neighbor_ips, "neighbor-addr")
        router_bgp_neighbor_address_key = ET.SubElement(neighbor_addr, "router-bgp-neighbor-address")
        router_bgp_neighbor_address_key.text = kwargs.pop('router_bgp_neighbor_address')
        enforce_first_as = ET.SubElement(neighbor_addr, "enforce-first-as")
        nei_enforce_first_as = ET.SubElement(enforce_first_as, "nei-enforce-first-as")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ips_neighbor_addr_enforce_first_as_nei_enforce_first_as_disable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ips = ET.SubElement(router_bgp_attributes, "neighbor-ips")
        neighbor_addr = ET.SubElement(neighbor_ips, "neighbor-addr")
        router_bgp_neighbor_address_key = ET.SubElement(neighbor_addr, "router-bgp-neighbor-address")
        router_bgp_neighbor_address_key.text = kwargs.pop('router_bgp_neighbor_address')
        enforce_first_as = ET.SubElement(neighbor_addr, "enforce-first-as")
        nei_enforce_first_as_disable = ET.SubElement(enforce_first_as, "nei-enforce-first-as-disable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ips_neighbor_addr_neighbor_capability_as4_neighbor_as4_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ips = ET.SubElement(router_bgp_attributes, "neighbor-ips")
        neighbor_addr = ET.SubElement(neighbor_ips, "neighbor-addr")
        router_bgp_neighbor_address_key = ET.SubElement(neighbor_addr, "router-bgp-neighbor-address")
        router_bgp_neighbor_address_key.text = kwargs.pop('router_bgp_neighbor_address')
        neighbor_capability = ET.SubElement(neighbor_addr, "neighbor-capability")
        as4 = ET.SubElement(neighbor_capability, "as4")
        neighbor_as4_enable = ET.SubElement(as4, "neighbor-as4-enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ips_neighbor_addr_neighbor_capability_as4_neighbor_as4_disable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ips = ET.SubElement(router_bgp_attributes, "neighbor-ips")
        neighbor_addr = ET.SubElement(neighbor_ips, "neighbor-addr")
        router_bgp_neighbor_address_key = ET.SubElement(neighbor_addr, "router-bgp-neighbor-address")
        router_bgp_neighbor_address_key.text = kwargs.pop('router_bgp_neighbor_address')
        neighbor_capability = ET.SubElement(neighbor_addr, "neighbor-capability")
        as4 = ET.SubElement(neighbor_capability, "as4")
        neighbor_as4_disable = ET.SubElement(as4, "neighbor-as4-disable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ips_neighbor_addr_timers_nei_keep_alive(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ips = ET.SubElement(router_bgp_attributes, "neighbor-ips")
        neighbor_addr = ET.SubElement(neighbor_ips, "neighbor-addr")
        router_bgp_neighbor_address_key = ET.SubElement(neighbor_addr, "router-bgp-neighbor-address")
        router_bgp_neighbor_address_key.text = kwargs.pop('router_bgp_neighbor_address')
        timers = ET.SubElement(neighbor_addr, "timers")
        nei_keep_alive = ET.SubElement(timers, "nei-keep-alive")
        nei_keep_alive.text = kwargs.pop('nei_keep_alive')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ips_neighbor_addr_timers_nei_hold_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ips = ET.SubElement(router_bgp_attributes, "neighbor-ips")
        neighbor_addr = ET.SubElement(neighbor_ips, "neighbor-addr")
        router_bgp_neighbor_address_key = ET.SubElement(neighbor_addr, "router-bgp-neighbor-address")
        router_bgp_neighbor_address_key.text = kwargs.pop('router_bgp_neighbor_address')
        timers = ET.SubElement(neighbor_addr, "timers")
        nei_hold_time = ET.SubElement(timers, "nei-hold-time")
        nei_hold_time.text = kwargs.pop('nei_hold_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ips_neighbor_addr_remove_private_as(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ips = ET.SubElement(router_bgp_attributes, "neighbor-ips")
        neighbor_addr = ET.SubElement(neighbor_ips, "neighbor-addr")
        router_bgp_neighbor_address_key = ET.SubElement(neighbor_addr, "router-bgp-neighbor-address")
        router_bgp_neighbor_address_key.text = kwargs.pop('router_bgp_neighbor_address')
        remove_private_as = ET.SubElement(neighbor_addr, "remove-private-as")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ips_neighbor_addr_as_override(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ips = ET.SubElement(router_bgp_attributes, "neighbor-ips")
        neighbor_addr = ET.SubElement(neighbor_ips, "neighbor-addr")
        router_bgp_neighbor_address_key = ET.SubElement(neighbor_addr, "router-bgp-neighbor-address")
        router_bgp_neighbor_address_key.text = kwargs.pop('router_bgp_neighbor_address')
        as_override = ET.SubElement(neighbor_addr, "as-override")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ips_neighbor_addr_soft_reconfiguration_inbound(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ips = ET.SubElement(router_bgp_attributes, "neighbor-ips")
        neighbor_addr = ET.SubElement(neighbor_ips, "neighbor-addr")
        router_bgp_neighbor_address_key = ET.SubElement(neighbor_addr, "router-bgp-neighbor-address")
        router_bgp_neighbor_address_key.text = kwargs.pop('router_bgp_neighbor_address')
        soft_reconfiguration = ET.SubElement(neighbor_addr, "soft-reconfiguration")
        inbound = ET.SubElement(soft_reconfiguration, "inbound")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ips_neighbor_addr_static_network_edge(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ips = ET.SubElement(router_bgp_attributes, "neighbor-ips")
        neighbor_addr = ET.SubElement(neighbor_ips, "neighbor-addr")
        router_bgp_neighbor_address_key = ET.SubElement(neighbor_addr, "router-bgp-neighbor-address")
        router_bgp_neighbor_address_key.text = kwargs.pop('router_bgp_neighbor_address')
        static_network_edge = ET.SubElement(neighbor_addr, "static-network-edge")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ips_neighbor_addr_shutdown_shutdown_status(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ips = ET.SubElement(router_bgp_attributes, "neighbor-ips")
        neighbor_addr = ET.SubElement(neighbor_ips, "neighbor-addr")
        router_bgp_neighbor_address_key = ET.SubElement(neighbor_addr, "router-bgp-neighbor-address")
        router_bgp_neighbor_address_key.text = kwargs.pop('router_bgp_neighbor_address')
        shutdown = ET.SubElement(neighbor_addr, "shutdown")
        shutdown_status = ET.SubElement(shutdown, "shutdown-status")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_router_bgp_attributes_neighbor_ips_neighbor_addr_shutdown_generate_rib_out(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        router_bgp_attributes = ET.SubElement(router_bgp_cmds_holder, "router-bgp-attributes")
        neighbor_ips = ET.SubElement(router_bgp_attributes, "neighbor-ips")
        neighbor_addr = ET.SubElement(neighbor_ips, "neighbor-addr")
        router_bgp_neighbor_address_key = ET.SubElement(neighbor_addr, "router-bgp-neighbor-address")
        router_bgp_neighbor_address_key.text = kwargs.pop('router_bgp_neighbor_address')
        shutdown = ET.SubElement(neighbor_addr, "shutdown")
        generate_rib_out = ET.SubElement(shutdown, "generate-rib-out")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_uc_and_vrf_cmds_call_point_holder_bgp_redistribute_internal(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_uc_and_vrf_cmds_call_point_holder = ET.SubElement(ipv4_unicast, "af-ipv4-uc-and-vrf-cmds-call-point-holder")
        bgp_redistribute_internal = ET.SubElement(af_ipv4_uc_and_vrf_cmds_call_point_holder, "bgp-redistribute-internal")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_uc_and_vrf_cmds_call_point_holder_redistribute_connected_redistribute_connected(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_uc_and_vrf_cmds_call_point_holder = ET.SubElement(ipv4_unicast, "af-ipv4-uc-and-vrf-cmds-call-point-holder")
        redistribute = ET.SubElement(af_ipv4_uc_and_vrf_cmds_call_point_holder, "redistribute")
        connected = ET.SubElement(redistribute, "connected")
        redistribute_connected = ET.SubElement(connected, "redistribute-connected")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_uc_and_vrf_cmds_call_point_holder_redistribute_connected_unicast_metric(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_uc_and_vrf_cmds_call_point_holder = ET.SubElement(ipv4_unicast, "af-ipv4-uc-and-vrf-cmds-call-point-holder")
        redistribute = ET.SubElement(af_ipv4_uc_and_vrf_cmds_call_point_holder, "redistribute")
        connected = ET.SubElement(redistribute, "connected")
        unicast_metric = ET.SubElement(connected, "unicast-metric")
        unicast_metric.text = kwargs.pop('unicast_metric')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_uc_and_vrf_cmds_call_point_holder_redistribute_connected_redistribute_route_map(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_uc_and_vrf_cmds_call_point_holder = ET.SubElement(ipv4_unicast, "af-ipv4-uc-and-vrf-cmds-call-point-holder")
        redistribute = ET.SubElement(af_ipv4_uc_and_vrf_cmds_call_point_holder, "redistribute")
        connected = ET.SubElement(redistribute, "connected")
        redistribute_route_map = ET.SubElement(connected, "redistribute-route-map")
        redistribute_route_map.text = kwargs.pop('redistribute_route_map')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_uc_and_vrf_cmds_call_point_holder_redistribute_ospf_redistribute_ospf(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_uc_and_vrf_cmds_call_point_holder = ET.SubElement(ipv4_unicast, "af-ipv4-uc-and-vrf-cmds-call-point-holder")
        redistribute = ET.SubElement(af_ipv4_uc_and_vrf_cmds_call_point_holder, "redistribute")
        ospf = ET.SubElement(redistribute, "ospf")
        redistribute_ospf = ET.SubElement(ospf, "redistribute-ospf")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_uc_and_vrf_cmds_call_point_holder_redistribute_ospf_match_ospf_internal(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_uc_and_vrf_cmds_call_point_holder = ET.SubElement(ipv4_unicast, "af-ipv4-uc-and-vrf-cmds-call-point-holder")
        redistribute = ET.SubElement(af_ipv4_uc_and_vrf_cmds_call_point_holder, "redistribute")
        ospf = ET.SubElement(redistribute, "ospf")
        match = ET.SubElement(ospf, "match")
        ospf_internal = ET.SubElement(match, "ospf-internal")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_uc_and_vrf_cmds_call_point_holder_redistribute_ospf_match_ospf_external1(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_uc_and_vrf_cmds_call_point_holder = ET.SubElement(ipv4_unicast, "af-ipv4-uc-and-vrf-cmds-call-point-holder")
        redistribute = ET.SubElement(af_ipv4_uc_and_vrf_cmds_call_point_holder, "redistribute")
        ospf = ET.SubElement(redistribute, "ospf")
        match = ET.SubElement(ospf, "match")
        ospf_external1 = ET.SubElement(match, "ospf-external1")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_uc_and_vrf_cmds_call_point_holder_redistribute_ospf_match_ospf_external2(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_uc_and_vrf_cmds_call_point_holder = ET.SubElement(ipv4_unicast, "af-ipv4-uc-and-vrf-cmds-call-point-holder")
        redistribute = ET.SubElement(af_ipv4_uc_and_vrf_cmds_call_point_holder, "redistribute")
        ospf = ET.SubElement(redistribute, "ospf")
        match = ET.SubElement(ospf, "match")
        ospf_external2 = ET.SubElement(match, "ospf-external2")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_uc_and_vrf_cmds_call_point_holder_redistribute_ospf_ospf_metric(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_uc_and_vrf_cmds_call_point_holder = ET.SubElement(ipv4_unicast, "af-ipv4-uc-and-vrf-cmds-call-point-holder")
        redistribute = ET.SubElement(af_ipv4_uc_and_vrf_cmds_call_point_holder, "redistribute")
        ospf = ET.SubElement(redistribute, "ospf")
        ospf_metric = ET.SubElement(ospf, "ospf-metric")
        ospf_metric.text = kwargs.pop('ospf_metric')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_uc_and_vrf_cmds_call_point_holder_redistribute_ospf_ospf_route_map(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_uc_and_vrf_cmds_call_point_holder = ET.SubElement(ipv4_unicast, "af-ipv4-uc-and-vrf-cmds-call-point-holder")
        redistribute = ET.SubElement(af_ipv4_uc_and_vrf_cmds_call_point_holder, "redistribute")
        ospf = ET.SubElement(redistribute, "ospf")
        ospf_route_map = ET.SubElement(ospf, "ospf-route-map")
        ospf_route_map.text = kwargs.pop('ospf_route_map')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_uc_and_vrf_cmds_call_point_holder_redistribute_static_redistribute_static(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_uc_and_vrf_cmds_call_point_holder = ET.SubElement(ipv4_unicast, "af-ipv4-uc-and-vrf-cmds-call-point-holder")
        redistribute = ET.SubElement(af_ipv4_uc_and_vrf_cmds_call_point_holder, "redistribute")
        static = ET.SubElement(redistribute, "static")
        redistribute_static = ET.SubElement(static, "redistribute-static")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_uc_and_vrf_cmds_call_point_holder_redistribute_static_unicast_static_metric(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_uc_and_vrf_cmds_call_point_holder = ET.SubElement(ipv4_unicast, "af-ipv4-uc-and-vrf-cmds-call-point-holder")
        redistribute = ET.SubElement(af_ipv4_uc_and_vrf_cmds_call_point_holder, "redistribute")
        static = ET.SubElement(redistribute, "static")
        unicast_static_metric = ET.SubElement(static, "unicast-static-metric")
        unicast_static_metric.text = kwargs.pop('unicast_static_metric')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_uc_and_vrf_cmds_call_point_holder_redistribute_static_static_route_map(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_uc_and_vrf_cmds_call_point_holder = ET.SubElement(ipv4_unicast, "af-ipv4-uc-and-vrf-cmds-call-point-holder")
        redistribute = ET.SubElement(af_ipv4_uc_and_vrf_cmds_call_point_holder, "redistribute")
        static = ET.SubElement(redistribute, "static")
        static_route_map = ET.SubElement(static, "static-route-map")
        static_route_map.text = kwargs.pop('static_route_map')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_static_network_static_network_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        static_network = ET.SubElement(ipv4_unicast, "static-network")
        static_network_address = ET.SubElement(static_network, "static-network-address")
        static_network_address.text = kwargs.pop('static_network_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_static_network_static_network_distance(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        static_network = ET.SubElement(ipv4_unicast, "static-network")
        static_network_address_key = ET.SubElement(static_network, "static-network-address")
        static_network_address_key.text = kwargs.pop('static_network_address')
        static_network_distance = ET.SubElement(static_network, "static-network-distance")
        static_network_distance.text = kwargs.pop('static_network_distance')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_aggregate_address_aggregate_ip_prefix(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        aggregate_address = ET.SubElement(ipv4_unicast, "aggregate-address")
        aggregate_ip_prefix = ET.SubElement(aggregate_address, "aggregate-ip-prefix")
        aggregate_ip_prefix.text = kwargs.pop('aggregate_ip_prefix')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_aggregate_address_advertise_map(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        aggregate_address = ET.SubElement(ipv4_unicast, "aggregate-address")
        aggregate_ip_prefix_key = ET.SubElement(aggregate_address, "aggregate-ip-prefix")
        aggregate_ip_prefix_key.text = kwargs.pop('aggregate_ip_prefix')
        advertise_map = ET.SubElement(aggregate_address, "advertise-map")
        advertise_map.text = kwargs.pop('advertise_map')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_aggregate_address_as_set(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        aggregate_address = ET.SubElement(ipv4_unicast, "aggregate-address")
        aggregate_ip_prefix_key = ET.SubElement(aggregate_address, "aggregate-ip-prefix")
        aggregate_ip_prefix_key.text = kwargs.pop('aggregate_ip_prefix')
        as_set = ET.SubElement(aggregate_address, "as-set")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_aggregate_address_attribute_map(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        aggregate_address = ET.SubElement(ipv4_unicast, "aggregate-address")
        aggregate_ip_prefix_key = ET.SubElement(aggregate_address, "aggregate-ip-prefix")
        aggregate_ip_prefix_key.text = kwargs.pop('aggregate_ip_prefix')
        attribute_map = ET.SubElement(aggregate_address, "attribute-map")
        attribute_map.text = kwargs.pop('attribute_map')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_aggregate_address_summary_only(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        aggregate_address = ET.SubElement(ipv4_unicast, "aggregate-address")
        aggregate_ip_prefix_key = ET.SubElement(aggregate_address, "aggregate-ip-prefix")
        aggregate_ip_prefix_key.text = kwargs.pop('aggregate_ip_prefix')
        summary_only = ET.SubElement(aggregate_address, "summary-only")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_aggregate_address_suppress_map(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        aggregate_address = ET.SubElement(ipv4_unicast, "aggregate-address")
        aggregate_ip_prefix_key = ET.SubElement(aggregate_address, "aggregate-ip-prefix")
        aggregate_ip_prefix_key.text = kwargs.pop('aggregate_ip_prefix')
        suppress_map = ET.SubElement(aggregate_address, "suppress-map")
        suppress_map.text = kwargs.pop('suppress_map')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_network_network_ipv4_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        network = ET.SubElement(ipv4_unicast, "network")
        network_ipv4_address = ET.SubElement(network, "network-ipv4-address")
        network_ipv4_address.text = kwargs.pop('network_ipv4_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_network_network_weight(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        network = ET.SubElement(ipv4_unicast, "network")
        network_ipv4_address_key = ET.SubElement(network, "network-ipv4-address")
        network_ipv4_address_key.text = kwargs.pop('network_ipv4_address')
        network_weight = ET.SubElement(network, "network-weight")
        network_weight.text = kwargs.pop('network_weight')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_network_backdoor(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        network = ET.SubElement(ipv4_unicast, "network")
        network_ipv4_address_key = ET.SubElement(network, "network-ipv4-address")
        network_ipv4_address_key.text = kwargs.pop('network_ipv4_address')
        backdoor = ET.SubElement(network, "backdoor")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_network_network_route_map(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        network = ET.SubElement(ipv4_unicast, "network")
        network_ipv4_address_key = ET.SubElement(network, "network-ipv4-address")
        network_ipv4_address_key.text = kwargs.pop('network_ipv4_address')
        network_route_map = ET.SubElement(network, "network-route-map")
        network_route_map.text = kwargs.pop('network_route_map')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_peergroup_holder_af_ipv4_neighbor_peergroup_af_ipv4_neighbor_peergroup_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_peergroup_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-peergroup-holder")
        af_ipv4_neighbor_peergroup = ET.SubElement(af_ipv4_neighbor_peergroup_holder, "af-ipv4-neighbor-peergroup")
        af_ipv4_neighbor_peergroup_name = ET.SubElement(af_ipv4_neighbor_peergroup, "af-ipv4-neighbor-peergroup-name")
        af_ipv4_neighbor_peergroup_name.text = kwargs.pop('af_ipv4_neighbor_peergroup_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_peergroup_holder_af_ipv4_neighbor_peergroup_send_community_send_community_status(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_peergroup_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-peergroup-holder")
        af_ipv4_neighbor_peergroup = ET.SubElement(af_ipv4_neighbor_peergroup_holder, "af-ipv4-neighbor-peergroup")
        af_ipv4_neighbor_peergroup_name_key = ET.SubElement(af_ipv4_neighbor_peergroup, "af-ipv4-neighbor-peergroup-name")
        af_ipv4_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv4_neighbor_peergroup_name')
        send_community = ET.SubElement(af_ipv4_neighbor_peergroup, "send-community")
        send_community_status = ET.SubElement(send_community, "send-community-status")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_peergroup_holder_af_ipv4_neighbor_peergroup_send_community_both(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_peergroup_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-peergroup-holder")
        af_ipv4_neighbor_peergroup = ET.SubElement(af_ipv4_neighbor_peergroup_holder, "af-ipv4-neighbor-peergroup")
        af_ipv4_neighbor_peergroup_name_key = ET.SubElement(af_ipv4_neighbor_peergroup, "af-ipv4-neighbor-peergroup-name")
        af_ipv4_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv4_neighbor_peergroup_name')
        send_community = ET.SubElement(af_ipv4_neighbor_peergroup, "send-community")
        both = ET.SubElement(send_community, "both")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_peergroup_holder_af_ipv4_neighbor_peergroup_send_community_extended(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_peergroup_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-peergroup-holder")
        af_ipv4_neighbor_peergroup = ET.SubElement(af_ipv4_neighbor_peergroup_holder, "af-ipv4-neighbor-peergroup")
        af_ipv4_neighbor_peergroup_name_key = ET.SubElement(af_ipv4_neighbor_peergroup, "af-ipv4-neighbor-peergroup-name")
        af_ipv4_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv4_neighbor_peergroup_name')
        send_community = ET.SubElement(af_ipv4_neighbor_peergroup, "send-community")
        extended = ET.SubElement(send_community, "extended")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_peergroup_holder_af_ipv4_neighbor_peergroup_send_community_standard(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_peergroup_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-peergroup-holder")
        af_ipv4_neighbor_peergroup = ET.SubElement(af_ipv4_neighbor_peergroup_holder, "af-ipv4-neighbor-peergroup")
        af_ipv4_neighbor_peergroup_name_key = ET.SubElement(af_ipv4_neighbor_peergroup, "af-ipv4-neighbor-peergroup-name")
        af_ipv4_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv4_neighbor_peergroup_name')
        send_community = ET.SubElement(af_ipv4_neighbor_peergroup, "send-community")
        standard = ET.SubElement(send_community, "standard")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_peergroup_holder_af_ipv4_neighbor_peergroup_af_neighbor_capability_orf_prefixlist_prefixlist_status(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_peergroup_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-peergroup-holder")
        af_ipv4_neighbor_peergroup = ET.SubElement(af_ipv4_neighbor_peergroup_holder, "af-ipv4-neighbor-peergroup")
        af_ipv4_neighbor_peergroup_name_key = ET.SubElement(af_ipv4_neighbor_peergroup, "af-ipv4-neighbor-peergroup-name")
        af_ipv4_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv4_neighbor_peergroup_name')
        af_neighbor_capability = ET.SubElement(af_ipv4_neighbor_peergroup, "af-neighbor-capability")
        orf = ET.SubElement(af_neighbor_capability, "orf")
        prefixlist = ET.SubElement(orf, "prefixlist")
        prefixlist_status = ET.SubElement(prefixlist, "prefixlist-status")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_peergroup_holder_af_ipv4_neighbor_peergroup_af_neighbor_capability_orf_prefixlist_prefixlist_send(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_peergroup_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-peergroup-holder")
        af_ipv4_neighbor_peergroup = ET.SubElement(af_ipv4_neighbor_peergroup_holder, "af-ipv4-neighbor-peergroup")
        af_ipv4_neighbor_peergroup_name_key = ET.SubElement(af_ipv4_neighbor_peergroup, "af-ipv4-neighbor-peergroup-name")
        af_ipv4_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv4_neighbor_peergroup_name')
        af_neighbor_capability = ET.SubElement(af_ipv4_neighbor_peergroup, "af-neighbor-capability")
        orf = ET.SubElement(af_neighbor_capability, "orf")
        prefixlist = ET.SubElement(orf, "prefixlist")
        prefixlist_send = ET.SubElement(prefixlist, "prefixlist-send")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_peergroup_holder_af_ipv4_neighbor_peergroup_af_neighbor_capability_orf_prefixlist_prefixlist_receive(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_peergroup_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-peergroup-holder")
        af_ipv4_neighbor_peergroup = ET.SubElement(af_ipv4_neighbor_peergroup_holder, "af-ipv4-neighbor-peergroup")
        af_ipv4_neighbor_peergroup_name_key = ET.SubElement(af_ipv4_neighbor_peergroup, "af-ipv4-neighbor-peergroup-name")
        af_ipv4_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv4_neighbor_peergroup_name')
        af_neighbor_capability = ET.SubElement(af_ipv4_neighbor_peergroup, "af-neighbor-capability")
        orf = ET.SubElement(af_neighbor_capability, "orf")
        prefixlist = ET.SubElement(orf, "prefixlist")
        prefixlist_receive = ET.SubElement(prefixlist, "prefixlist-receive")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_peergroup_holder_af_ipv4_neighbor_peergroup_allowas_in(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_peergroup_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-peergroup-holder")
        af_ipv4_neighbor_peergroup = ET.SubElement(af_ipv4_neighbor_peergroup_holder, "af-ipv4-neighbor-peergroup")
        af_ipv4_neighbor_peergroup_name_key = ET.SubElement(af_ipv4_neighbor_peergroup, "af-ipv4-neighbor-peergroup-name")
        af_ipv4_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv4_neighbor_peergroup_name')
        allowas_in = ET.SubElement(af_ipv4_neighbor_peergroup, "allowas-in")
        allowas_in.text = kwargs.pop('allowas_in')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_peergroup_holder_af_ipv4_neighbor_peergroup_activate(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_peergroup_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-peergroup-holder")
        af_ipv4_neighbor_peergroup = ET.SubElement(af_ipv4_neighbor_peergroup_holder, "af-ipv4-neighbor-peergroup")
        af_ipv4_neighbor_peergroup_name_key = ET.SubElement(af_ipv4_neighbor_peergroup, "af-ipv4-neighbor-peergroup-name")
        af_ipv4_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv4_neighbor_peergroup_name')
        activate = ET.SubElement(af_ipv4_neighbor_peergroup, "activate")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_peergroup_holder_af_ipv4_neighbor_peergroup_filter_list_direction_in_filter_list_direction_in_acl_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_peergroup_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-peergroup-holder")
        af_ipv4_neighbor_peergroup = ET.SubElement(af_ipv4_neighbor_peergroup_holder, "af-ipv4-neighbor-peergroup")
        af_ipv4_neighbor_peergroup_name_key = ET.SubElement(af_ipv4_neighbor_peergroup, "af-ipv4-neighbor-peergroup-name")
        af_ipv4_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv4_neighbor_peergroup_name')
        filter_list = ET.SubElement(af_ipv4_neighbor_peergroup, "filter-list")
        direction_in = ET.SubElement(filter_list, "direction-in")
        filter_list_direction_in_acl_name = ET.SubElement(direction_in, "filter-list-direction-in-acl-name")
        filter_list_direction_in_acl_name.text = kwargs.pop('filter_list_direction_in_acl_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_peergroup_holder_af_ipv4_neighbor_peergroup_filter_list_direction_in_filter_list_name_direction_in(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_peergroup_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-peergroup-holder")
        af_ipv4_neighbor_peergroup = ET.SubElement(af_ipv4_neighbor_peergroup_holder, "af-ipv4-neighbor-peergroup")
        af_ipv4_neighbor_peergroup_name_key = ET.SubElement(af_ipv4_neighbor_peergroup, "af-ipv4-neighbor-peergroup-name")
        af_ipv4_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv4_neighbor_peergroup_name')
        filter_list = ET.SubElement(af_ipv4_neighbor_peergroup, "filter-list")
        direction_in = ET.SubElement(filter_list, "direction-in")
        filter_list_name_direction_in = ET.SubElement(direction_in, "filter-list-name-direction-in")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_peergroup_holder_af_ipv4_neighbor_peergroup_filter_list_direction_out_filter_list_direction_out_acl_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_peergroup_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-peergroup-holder")
        af_ipv4_neighbor_peergroup = ET.SubElement(af_ipv4_neighbor_peergroup_holder, "af-ipv4-neighbor-peergroup")
        af_ipv4_neighbor_peergroup_name_key = ET.SubElement(af_ipv4_neighbor_peergroup, "af-ipv4-neighbor-peergroup-name")
        af_ipv4_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv4_neighbor_peergroup_name')
        filter_list = ET.SubElement(af_ipv4_neighbor_peergroup, "filter-list")
        direction_out = ET.SubElement(filter_list, "direction-out")
        filter_list_direction_out_acl_name = ET.SubElement(direction_out, "filter-list-direction-out-acl-name")
        filter_list_direction_out_acl_name.text = kwargs.pop('filter_list_direction_out_acl_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_peergroup_holder_af_ipv4_neighbor_peergroup_filter_list_direction_out_filter_list_name_direction_out(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_peergroup_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-peergroup-holder")
        af_ipv4_neighbor_peergroup = ET.SubElement(af_ipv4_neighbor_peergroup_holder, "af-ipv4-neighbor-peergroup")
        af_ipv4_neighbor_peergroup_name_key = ET.SubElement(af_ipv4_neighbor_peergroup, "af-ipv4-neighbor-peergroup-name")
        af_ipv4_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv4_neighbor_peergroup_name')
        filter_list = ET.SubElement(af_ipv4_neighbor_peergroup, "filter-list")
        direction_out = ET.SubElement(filter_list, "direction-out")
        filter_list_name_direction_out = ET.SubElement(direction_out, "filter-list-name-direction-out")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_peergroup_holder_af_ipv4_neighbor_peergroup_maximum_prefix_max_prefix_limit(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_peergroup_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-peergroup-holder")
        af_ipv4_neighbor_peergroup = ET.SubElement(af_ipv4_neighbor_peergroup_holder, "af-ipv4-neighbor-peergroup")
        af_ipv4_neighbor_peergroup_name_key = ET.SubElement(af_ipv4_neighbor_peergroup, "af-ipv4-neighbor-peergroup-name")
        af_ipv4_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv4_neighbor_peergroup_name')
        maximum_prefix = ET.SubElement(af_ipv4_neighbor_peergroup, "maximum-prefix")
        max_prefix_limit = ET.SubElement(maximum_prefix, "max-prefix-limit")
        max_prefix_limit.text = kwargs.pop('max_prefix_limit')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_peergroup_holder_af_ipv4_neighbor_peergroup_maximum_prefix_threshold_holder_threshold(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_peergroup_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-peergroup-holder")
        af_ipv4_neighbor_peergroup = ET.SubElement(af_ipv4_neighbor_peergroup_holder, "af-ipv4-neighbor-peergroup")
        af_ipv4_neighbor_peergroup_name_key = ET.SubElement(af_ipv4_neighbor_peergroup, "af-ipv4-neighbor-peergroup-name")
        af_ipv4_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv4_neighbor_peergroup_name')
        maximum_prefix = ET.SubElement(af_ipv4_neighbor_peergroup, "maximum-prefix")
        threshold_holder = ET.SubElement(maximum_prefix, "threshold-holder")
        threshold = ET.SubElement(threshold_holder, "threshold")
        threshold.text = kwargs.pop('threshold')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_peergroup_holder_af_ipv4_neighbor_peergroup_maximum_prefix_threshold_holder_teardown(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_peergroup_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-peergroup-holder")
        af_ipv4_neighbor_peergroup = ET.SubElement(af_ipv4_neighbor_peergroup_holder, "af-ipv4-neighbor-peergroup")
        af_ipv4_neighbor_peergroup_name_key = ET.SubElement(af_ipv4_neighbor_peergroup, "af-ipv4-neighbor-peergroup-name")
        af_ipv4_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv4_neighbor_peergroup_name')
        maximum_prefix = ET.SubElement(af_ipv4_neighbor_peergroup, "maximum-prefix")
        threshold_holder = ET.SubElement(maximum_prefix, "threshold-holder")
        teardown = ET.SubElement(threshold_holder, "teardown")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_peergroup_holder_af_ipv4_neighbor_peergroup_default_originate_default_originate_status(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_peergroup_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-peergroup-holder")
        af_ipv4_neighbor_peergroup = ET.SubElement(af_ipv4_neighbor_peergroup_holder, "af-ipv4-neighbor-peergroup")
        af_ipv4_neighbor_peergroup_name_key = ET.SubElement(af_ipv4_neighbor_peergroup, "af-ipv4-neighbor-peergroup-name")
        af_ipv4_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv4_neighbor_peergroup_name')
        default_originate = ET.SubElement(af_ipv4_neighbor_peergroup, "default-originate")
        default_originate_status = ET.SubElement(default_originate, "default-originate-status")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_peergroup_holder_af_ipv4_neighbor_peergroup_default_originate_default_originate_route_map(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_peergroup_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-peergroup-holder")
        af_ipv4_neighbor_peergroup = ET.SubElement(af_ipv4_neighbor_peergroup_holder, "af-ipv4-neighbor-peergroup")
        af_ipv4_neighbor_peergroup_name_key = ET.SubElement(af_ipv4_neighbor_peergroup, "af-ipv4-neighbor-peergroup-name")
        af_ipv4_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv4_neighbor_peergroup_name')
        default_originate = ET.SubElement(af_ipv4_neighbor_peergroup, "default-originate")
        default_originate_route_map = ET.SubElement(default_originate, "default-originate-route-map")
        default_originate_route_map.text = kwargs.pop('default_originate_route_map')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_peergroup_holder_af_ipv4_neighbor_peergroup_prefix_list_direction_in_prefix_list_direction_in_prefix_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_peergroup_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-peergroup-holder")
        af_ipv4_neighbor_peergroup = ET.SubElement(af_ipv4_neighbor_peergroup_holder, "af-ipv4-neighbor-peergroup")
        af_ipv4_neighbor_peergroup_name_key = ET.SubElement(af_ipv4_neighbor_peergroup, "af-ipv4-neighbor-peergroup-name")
        af_ipv4_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv4_neighbor_peergroup_name')
        prefix_list = ET.SubElement(af_ipv4_neighbor_peergroup, "prefix-list")
        direction_in = ET.SubElement(prefix_list, "direction-in")
        prefix_list_direction_in_prefix_name = ET.SubElement(direction_in, "prefix-list-direction-in-prefix-name")
        prefix_list_direction_in_prefix_name.text = kwargs.pop('prefix_list_direction_in_prefix_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_peergroup_holder_af_ipv4_neighbor_peergroup_prefix_list_direction_in_prefix_list_direction_in(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_peergroup_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-peergroup-holder")
        af_ipv4_neighbor_peergroup = ET.SubElement(af_ipv4_neighbor_peergroup_holder, "af-ipv4-neighbor-peergroup")
        af_ipv4_neighbor_peergroup_name_key = ET.SubElement(af_ipv4_neighbor_peergroup, "af-ipv4-neighbor-peergroup-name")
        af_ipv4_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv4_neighbor_peergroup_name')
        prefix_list = ET.SubElement(af_ipv4_neighbor_peergroup, "prefix-list")
        direction_in = ET.SubElement(prefix_list, "direction-in")
        prefix_list_direction_in = ET.SubElement(direction_in, "prefix-list-direction-in")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_peergroup_holder_af_ipv4_neighbor_peergroup_prefix_list_direction_out_prefix_list_direction_out_prefix_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_peergroup_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-peergroup-holder")
        af_ipv4_neighbor_peergroup = ET.SubElement(af_ipv4_neighbor_peergroup_holder, "af-ipv4-neighbor-peergroup")
        af_ipv4_neighbor_peergroup_name_key = ET.SubElement(af_ipv4_neighbor_peergroup, "af-ipv4-neighbor-peergroup-name")
        af_ipv4_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv4_neighbor_peergroup_name')
        prefix_list = ET.SubElement(af_ipv4_neighbor_peergroup, "prefix-list")
        direction_out = ET.SubElement(prefix_list, "direction-out")
        prefix_list_direction_out_prefix_name = ET.SubElement(direction_out, "prefix-list-direction-out-prefix-name")
        prefix_list_direction_out_prefix_name.text = kwargs.pop('prefix_list_direction_out_prefix_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_peergroup_holder_af_ipv4_neighbor_peergroup_prefix_list_direction_out_prefix_list_direction_out(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_peergroup_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-peergroup-holder")
        af_ipv4_neighbor_peergroup = ET.SubElement(af_ipv4_neighbor_peergroup_holder, "af-ipv4-neighbor-peergroup")
        af_ipv4_neighbor_peergroup_name_key = ET.SubElement(af_ipv4_neighbor_peergroup, "af-ipv4-neighbor-peergroup-name")
        af_ipv4_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv4_neighbor_peergroup_name')
        prefix_list = ET.SubElement(af_ipv4_neighbor_peergroup, "prefix-list")
        direction_out = ET.SubElement(prefix_list, "direction-out")
        prefix_list_direction_out = ET.SubElement(direction_out, "prefix-list-direction-out")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_peergroup_holder_af_ipv4_neighbor_peergroup_neighbor_route_map_neighbor_route_map_direction_in_neighbor_route_map_name_direction_in(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_peergroup_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-peergroup-holder")
        af_ipv4_neighbor_peergroup = ET.SubElement(af_ipv4_neighbor_peergroup_holder, "af-ipv4-neighbor-peergroup")
        af_ipv4_neighbor_peergroup_name_key = ET.SubElement(af_ipv4_neighbor_peergroup, "af-ipv4-neighbor-peergroup-name")
        af_ipv4_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv4_neighbor_peergroup_name')
        neighbor_route_map = ET.SubElement(af_ipv4_neighbor_peergroup, "neighbor-route-map")
        neighbor_route_map_direction_in = ET.SubElement(neighbor_route_map, "neighbor-route-map-direction-in")
        neighbor_route_map_name_direction_in = ET.SubElement(neighbor_route_map_direction_in, "neighbor-route-map-name-direction-in")
        neighbor_route_map_name_direction_in.text = kwargs.pop('neighbor_route_map_name_direction_in')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_peergroup_holder_af_ipv4_neighbor_peergroup_neighbor_route_map_neighbor_route_map_direction_out_neighbor_route_map_name_direction_out(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_peergroup_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-peergroup-holder")
        af_ipv4_neighbor_peergroup = ET.SubElement(af_ipv4_neighbor_peergroup_holder, "af-ipv4-neighbor-peergroup")
        af_ipv4_neighbor_peergroup_name_key = ET.SubElement(af_ipv4_neighbor_peergroup, "af-ipv4-neighbor-peergroup-name")
        af_ipv4_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv4_neighbor_peergroup_name')
        neighbor_route_map = ET.SubElement(af_ipv4_neighbor_peergroup, "neighbor-route-map")
        neighbor_route_map_direction_out = ET.SubElement(neighbor_route_map, "neighbor-route-map-direction-out")
        neighbor_route_map_name_direction_out = ET.SubElement(neighbor_route_map_direction_out, "neighbor-route-map-name-direction-out")
        neighbor_route_map_name_direction_out.text = kwargs.pop('neighbor_route_map_name_direction_out')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_peergroup_holder_af_ipv4_neighbor_peergroup_route_reflector_client(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_peergroup_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-peergroup-holder")
        af_ipv4_neighbor_peergroup = ET.SubElement(af_ipv4_neighbor_peergroup_holder, "af-ipv4-neighbor-peergroup")
        af_ipv4_neighbor_peergroup_name_key = ET.SubElement(af_ipv4_neighbor_peergroup, "af-ipv4-neighbor-peergroup-name")
        af_ipv4_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv4_neighbor_peergroup_name')
        route_reflector_client = ET.SubElement(af_ipv4_neighbor_peergroup, "route-reflector-client")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_peergroup_holder_af_ipv4_neighbor_peergroup_unsuppress_map_map_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_peergroup_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-peergroup-holder")
        af_ipv4_neighbor_peergroup = ET.SubElement(af_ipv4_neighbor_peergroup_holder, "af-ipv4-neighbor-peergroup")
        af_ipv4_neighbor_peergroup_name_key = ET.SubElement(af_ipv4_neighbor_peergroup, "af-ipv4-neighbor-peergroup-name")
        af_ipv4_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv4_neighbor_peergroup_name')
        unsuppress_map = ET.SubElement(af_ipv4_neighbor_peergroup, "unsuppress-map")
        map_name = ET.SubElement(unsuppress_map, "map-name")
        map_name.text = kwargs.pop('map_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_peergroup_holder_af_ipv4_neighbor_peergroup_af_nei_weight(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_peergroup_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-peergroup-holder")
        af_ipv4_neighbor_peergroup = ET.SubElement(af_ipv4_neighbor_peergroup_holder, "af-ipv4-neighbor-peergroup")
        af_ipv4_neighbor_peergroup_name_key = ET.SubElement(af_ipv4_neighbor_peergroup, "af-ipv4-neighbor-peergroup-name")
        af_ipv4_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv4_neighbor_peergroup_name')
        af_nei_weight = ET.SubElement(af_ipv4_neighbor_peergroup, "af-nei-weight")
        af_nei_weight.text = kwargs.pop('af_nei_weight')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_address_holder_af_ipv4_neighbor_address_af_ipv4_neighbor_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_address_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-address-holder")
        af_ipv4_neighbor_address = ET.SubElement(af_ipv4_neighbor_address_holder, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address = ET.SubElement(af_ipv4_neighbor_address, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address.text = kwargs.pop('af_ipv4_neighbor_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_address_holder_af_ipv4_neighbor_address_send_community_send_community_status(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_address_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-address-holder")
        af_ipv4_neighbor_address = ET.SubElement(af_ipv4_neighbor_address_holder, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key = ET.SubElement(af_ipv4_neighbor_address, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key.text = kwargs.pop('af_ipv4_neighbor_address')
        send_community = ET.SubElement(af_ipv4_neighbor_address, "send-community")
        send_community_status = ET.SubElement(send_community, "send-community-status")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_address_holder_af_ipv4_neighbor_address_send_community_both(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_address_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-address-holder")
        af_ipv4_neighbor_address = ET.SubElement(af_ipv4_neighbor_address_holder, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key = ET.SubElement(af_ipv4_neighbor_address, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key.text = kwargs.pop('af_ipv4_neighbor_address')
        send_community = ET.SubElement(af_ipv4_neighbor_address, "send-community")
        both = ET.SubElement(send_community, "both")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_address_holder_af_ipv4_neighbor_address_send_community_extended(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_address_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-address-holder")
        af_ipv4_neighbor_address = ET.SubElement(af_ipv4_neighbor_address_holder, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key = ET.SubElement(af_ipv4_neighbor_address, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key.text = kwargs.pop('af_ipv4_neighbor_address')
        send_community = ET.SubElement(af_ipv4_neighbor_address, "send-community")
        extended = ET.SubElement(send_community, "extended")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_address_holder_af_ipv4_neighbor_address_send_community_standard(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_address_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-address-holder")
        af_ipv4_neighbor_address = ET.SubElement(af_ipv4_neighbor_address_holder, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key = ET.SubElement(af_ipv4_neighbor_address, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key.text = kwargs.pop('af_ipv4_neighbor_address')
        send_community = ET.SubElement(af_ipv4_neighbor_address, "send-community")
        standard = ET.SubElement(send_community, "standard")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_address_holder_af_ipv4_neighbor_address_af_neighbor_capability_orf_prefixlist_prefixlist_status(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_address_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-address-holder")
        af_ipv4_neighbor_address = ET.SubElement(af_ipv4_neighbor_address_holder, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key = ET.SubElement(af_ipv4_neighbor_address, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key.text = kwargs.pop('af_ipv4_neighbor_address')
        af_neighbor_capability = ET.SubElement(af_ipv4_neighbor_address, "af-neighbor-capability")
        orf = ET.SubElement(af_neighbor_capability, "orf")
        prefixlist = ET.SubElement(orf, "prefixlist")
        prefixlist_status = ET.SubElement(prefixlist, "prefixlist-status")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_address_holder_af_ipv4_neighbor_address_af_neighbor_capability_orf_prefixlist_prefixlist_send(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_address_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-address-holder")
        af_ipv4_neighbor_address = ET.SubElement(af_ipv4_neighbor_address_holder, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key = ET.SubElement(af_ipv4_neighbor_address, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key.text = kwargs.pop('af_ipv4_neighbor_address')
        af_neighbor_capability = ET.SubElement(af_ipv4_neighbor_address, "af-neighbor-capability")
        orf = ET.SubElement(af_neighbor_capability, "orf")
        prefixlist = ET.SubElement(orf, "prefixlist")
        prefixlist_send = ET.SubElement(prefixlist, "prefixlist-send")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_address_holder_af_ipv4_neighbor_address_af_neighbor_capability_orf_prefixlist_prefixlist_receive(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_address_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-address-holder")
        af_ipv4_neighbor_address = ET.SubElement(af_ipv4_neighbor_address_holder, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key = ET.SubElement(af_ipv4_neighbor_address, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key.text = kwargs.pop('af_ipv4_neighbor_address')
        af_neighbor_capability = ET.SubElement(af_ipv4_neighbor_address, "af-neighbor-capability")
        orf = ET.SubElement(af_neighbor_capability, "orf")
        prefixlist = ET.SubElement(orf, "prefixlist")
        prefixlist_receive = ET.SubElement(prefixlist, "prefixlist-receive")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_address_holder_af_ipv4_neighbor_address_allowas_in(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_address_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-address-holder")
        af_ipv4_neighbor_address = ET.SubElement(af_ipv4_neighbor_address_holder, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key = ET.SubElement(af_ipv4_neighbor_address, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key.text = kwargs.pop('af_ipv4_neighbor_address')
        allowas_in = ET.SubElement(af_ipv4_neighbor_address, "allowas-in")
        allowas_in.text = kwargs.pop('allowas_in')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_address_holder_af_ipv4_neighbor_address_activate(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_address_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-address-holder")
        af_ipv4_neighbor_address = ET.SubElement(af_ipv4_neighbor_address_holder, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key = ET.SubElement(af_ipv4_neighbor_address, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key.text = kwargs.pop('af_ipv4_neighbor_address')
        activate = ET.SubElement(af_ipv4_neighbor_address, "activate")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_address_holder_af_ipv4_neighbor_address_filter_list_direction_in_filter_list_direction_in_acl_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_address_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-address-holder")
        af_ipv4_neighbor_address = ET.SubElement(af_ipv4_neighbor_address_holder, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key = ET.SubElement(af_ipv4_neighbor_address, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key.text = kwargs.pop('af_ipv4_neighbor_address')
        filter_list = ET.SubElement(af_ipv4_neighbor_address, "filter-list")
        direction_in = ET.SubElement(filter_list, "direction-in")
        filter_list_direction_in_acl_name = ET.SubElement(direction_in, "filter-list-direction-in-acl-name")
        filter_list_direction_in_acl_name.text = kwargs.pop('filter_list_direction_in_acl_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_address_holder_af_ipv4_neighbor_address_filter_list_direction_in_filter_list_name_direction_in(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_address_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-address-holder")
        af_ipv4_neighbor_address = ET.SubElement(af_ipv4_neighbor_address_holder, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key = ET.SubElement(af_ipv4_neighbor_address, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key.text = kwargs.pop('af_ipv4_neighbor_address')
        filter_list = ET.SubElement(af_ipv4_neighbor_address, "filter-list")
        direction_in = ET.SubElement(filter_list, "direction-in")
        filter_list_name_direction_in = ET.SubElement(direction_in, "filter-list-name-direction-in")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_address_holder_af_ipv4_neighbor_address_filter_list_direction_out_filter_list_direction_out_acl_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_address_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-address-holder")
        af_ipv4_neighbor_address = ET.SubElement(af_ipv4_neighbor_address_holder, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key = ET.SubElement(af_ipv4_neighbor_address, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key.text = kwargs.pop('af_ipv4_neighbor_address')
        filter_list = ET.SubElement(af_ipv4_neighbor_address, "filter-list")
        direction_out = ET.SubElement(filter_list, "direction-out")
        filter_list_direction_out_acl_name = ET.SubElement(direction_out, "filter-list-direction-out-acl-name")
        filter_list_direction_out_acl_name.text = kwargs.pop('filter_list_direction_out_acl_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_address_holder_af_ipv4_neighbor_address_filter_list_direction_out_filter_list_name_direction_out(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_address_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-address-holder")
        af_ipv4_neighbor_address = ET.SubElement(af_ipv4_neighbor_address_holder, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key = ET.SubElement(af_ipv4_neighbor_address, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key.text = kwargs.pop('af_ipv4_neighbor_address')
        filter_list = ET.SubElement(af_ipv4_neighbor_address, "filter-list")
        direction_out = ET.SubElement(filter_list, "direction-out")
        filter_list_name_direction_out = ET.SubElement(direction_out, "filter-list-name-direction-out")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_address_holder_af_ipv4_neighbor_address_maximum_prefix_max_prefix_limit(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_address_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-address-holder")
        af_ipv4_neighbor_address = ET.SubElement(af_ipv4_neighbor_address_holder, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key = ET.SubElement(af_ipv4_neighbor_address, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key.text = kwargs.pop('af_ipv4_neighbor_address')
        maximum_prefix = ET.SubElement(af_ipv4_neighbor_address, "maximum-prefix")
        max_prefix_limit = ET.SubElement(maximum_prefix, "max-prefix-limit")
        max_prefix_limit.text = kwargs.pop('max_prefix_limit')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_address_holder_af_ipv4_neighbor_address_maximum_prefix_threshold_holder_threshold(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_address_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-address-holder")
        af_ipv4_neighbor_address = ET.SubElement(af_ipv4_neighbor_address_holder, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key = ET.SubElement(af_ipv4_neighbor_address, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key.text = kwargs.pop('af_ipv4_neighbor_address')
        maximum_prefix = ET.SubElement(af_ipv4_neighbor_address, "maximum-prefix")
        threshold_holder = ET.SubElement(maximum_prefix, "threshold-holder")
        threshold = ET.SubElement(threshold_holder, "threshold")
        threshold.text = kwargs.pop('threshold')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_address_holder_af_ipv4_neighbor_address_maximum_prefix_threshold_holder_teardown(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_address_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-address-holder")
        af_ipv4_neighbor_address = ET.SubElement(af_ipv4_neighbor_address_holder, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key = ET.SubElement(af_ipv4_neighbor_address, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key.text = kwargs.pop('af_ipv4_neighbor_address')
        maximum_prefix = ET.SubElement(af_ipv4_neighbor_address, "maximum-prefix")
        threshold_holder = ET.SubElement(maximum_prefix, "threshold-holder")
        teardown = ET.SubElement(threshold_holder, "teardown")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_address_holder_af_ipv4_neighbor_address_default_originate_default_originate_status(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_address_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-address-holder")
        af_ipv4_neighbor_address = ET.SubElement(af_ipv4_neighbor_address_holder, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key = ET.SubElement(af_ipv4_neighbor_address, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key.text = kwargs.pop('af_ipv4_neighbor_address')
        default_originate = ET.SubElement(af_ipv4_neighbor_address, "default-originate")
        default_originate_status = ET.SubElement(default_originate, "default-originate-status")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_address_holder_af_ipv4_neighbor_address_default_originate_default_originate_route_map(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_address_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-address-holder")
        af_ipv4_neighbor_address = ET.SubElement(af_ipv4_neighbor_address_holder, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key = ET.SubElement(af_ipv4_neighbor_address, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key.text = kwargs.pop('af_ipv4_neighbor_address')
        default_originate = ET.SubElement(af_ipv4_neighbor_address, "default-originate")
        default_originate_route_map = ET.SubElement(default_originate, "default-originate-route-map")
        default_originate_route_map.text = kwargs.pop('default_originate_route_map')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_address_holder_af_ipv4_neighbor_address_prefix_list_direction_in_prefix_list_direction_in_prefix_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_address_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-address-holder")
        af_ipv4_neighbor_address = ET.SubElement(af_ipv4_neighbor_address_holder, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key = ET.SubElement(af_ipv4_neighbor_address, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key.text = kwargs.pop('af_ipv4_neighbor_address')
        prefix_list = ET.SubElement(af_ipv4_neighbor_address, "prefix-list")
        direction_in = ET.SubElement(prefix_list, "direction-in")
        prefix_list_direction_in_prefix_name = ET.SubElement(direction_in, "prefix-list-direction-in-prefix-name")
        prefix_list_direction_in_prefix_name.text = kwargs.pop('prefix_list_direction_in_prefix_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_address_holder_af_ipv4_neighbor_address_prefix_list_direction_in_prefix_list_direction_in(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_address_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-address-holder")
        af_ipv4_neighbor_address = ET.SubElement(af_ipv4_neighbor_address_holder, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key = ET.SubElement(af_ipv4_neighbor_address, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key.text = kwargs.pop('af_ipv4_neighbor_address')
        prefix_list = ET.SubElement(af_ipv4_neighbor_address, "prefix-list")
        direction_in = ET.SubElement(prefix_list, "direction-in")
        prefix_list_direction_in = ET.SubElement(direction_in, "prefix-list-direction-in")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_address_holder_af_ipv4_neighbor_address_prefix_list_direction_out_prefix_list_direction_out_prefix_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_address_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-address-holder")
        af_ipv4_neighbor_address = ET.SubElement(af_ipv4_neighbor_address_holder, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key = ET.SubElement(af_ipv4_neighbor_address, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key.text = kwargs.pop('af_ipv4_neighbor_address')
        prefix_list = ET.SubElement(af_ipv4_neighbor_address, "prefix-list")
        direction_out = ET.SubElement(prefix_list, "direction-out")
        prefix_list_direction_out_prefix_name = ET.SubElement(direction_out, "prefix-list-direction-out-prefix-name")
        prefix_list_direction_out_prefix_name.text = kwargs.pop('prefix_list_direction_out_prefix_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_address_holder_af_ipv4_neighbor_address_prefix_list_direction_out_prefix_list_direction_out(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_address_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-address-holder")
        af_ipv4_neighbor_address = ET.SubElement(af_ipv4_neighbor_address_holder, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key = ET.SubElement(af_ipv4_neighbor_address, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key.text = kwargs.pop('af_ipv4_neighbor_address')
        prefix_list = ET.SubElement(af_ipv4_neighbor_address, "prefix-list")
        direction_out = ET.SubElement(prefix_list, "direction-out")
        prefix_list_direction_out = ET.SubElement(direction_out, "prefix-list-direction-out")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_address_holder_af_ipv4_neighbor_address_neighbor_route_map_neighbor_route_map_direction_in_neighbor_route_map_name_direction_in(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_address_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-address-holder")
        af_ipv4_neighbor_address = ET.SubElement(af_ipv4_neighbor_address_holder, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key = ET.SubElement(af_ipv4_neighbor_address, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key.text = kwargs.pop('af_ipv4_neighbor_address')
        neighbor_route_map = ET.SubElement(af_ipv4_neighbor_address, "neighbor-route-map")
        neighbor_route_map_direction_in = ET.SubElement(neighbor_route_map, "neighbor-route-map-direction-in")
        neighbor_route_map_name_direction_in = ET.SubElement(neighbor_route_map_direction_in, "neighbor-route-map-name-direction-in")
        neighbor_route_map_name_direction_in.text = kwargs.pop('neighbor_route_map_name_direction_in')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_address_holder_af_ipv4_neighbor_address_neighbor_route_map_neighbor_route_map_direction_out_neighbor_route_map_name_direction_out(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_address_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-address-holder")
        af_ipv4_neighbor_address = ET.SubElement(af_ipv4_neighbor_address_holder, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key = ET.SubElement(af_ipv4_neighbor_address, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key.text = kwargs.pop('af_ipv4_neighbor_address')
        neighbor_route_map = ET.SubElement(af_ipv4_neighbor_address, "neighbor-route-map")
        neighbor_route_map_direction_out = ET.SubElement(neighbor_route_map, "neighbor-route-map-direction-out")
        neighbor_route_map_name_direction_out = ET.SubElement(neighbor_route_map_direction_out, "neighbor-route-map-name-direction-out")
        neighbor_route_map_name_direction_out.text = kwargs.pop('neighbor_route_map_name_direction_out')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_address_holder_af_ipv4_neighbor_address_route_reflector_client(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_address_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-address-holder")
        af_ipv4_neighbor_address = ET.SubElement(af_ipv4_neighbor_address_holder, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key = ET.SubElement(af_ipv4_neighbor_address, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key.text = kwargs.pop('af_ipv4_neighbor_address')
        route_reflector_client = ET.SubElement(af_ipv4_neighbor_address, "route-reflector-client")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_address_holder_af_ipv4_neighbor_address_unsuppress_map_map_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_address_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-address-holder")
        af_ipv4_neighbor_address = ET.SubElement(af_ipv4_neighbor_address_holder, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key = ET.SubElement(af_ipv4_neighbor_address, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key.text = kwargs.pop('af_ipv4_neighbor_address')
        unsuppress_map = ET.SubElement(af_ipv4_neighbor_address, "unsuppress-map")
        map_name = ET.SubElement(unsuppress_map, "map-name")
        map_name.text = kwargs.pop('map_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_ipv4_neighbor_address_holder_af_ipv4_neighbor_address_af_nei_weight(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_ipv4_neighbor_address_holder = ET.SubElement(ipv4_unicast, "af-ipv4-neighbor-address-holder")
        af_ipv4_neighbor_address = ET.SubElement(af_ipv4_neighbor_address_holder, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key = ET.SubElement(af_ipv4_neighbor_address, "af-ipv4-neighbor-address")
        af_ipv4_neighbor_address_key.text = kwargs.pop('af_ipv4_neighbor_address')
        af_nei_weight = ET.SubElement(af_ipv4_neighbor_address, "af-nei-weight")
        af_nei_weight.text = kwargs.pop('af_nei_weight')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_common_cmds_holder_maximum_paths_load_sharing_value(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_common_cmds_holder = ET.SubElement(ipv4_unicast, "af-common-cmds-holder")
        maximum_paths = ET.SubElement(af_common_cmds_holder, "maximum-paths")
        load_sharing_value = ET.SubElement(maximum_paths, "load-sharing-value")
        load_sharing_value.text = kwargs.pop('load_sharing_value')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_common_cmds_holder_maximum_paths_ebgp(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_common_cmds_holder = ET.SubElement(ipv4_unicast, "af-common-cmds-holder")
        maximum_paths = ET.SubElement(af_common_cmds_holder, "maximum-paths")
        ebgp = ET.SubElement(maximum_paths, "ebgp")
        ebgp.text = kwargs.pop('ebgp')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_common_cmds_holder_maximum_paths_ibgp(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_common_cmds_holder = ET.SubElement(ipv4_unicast, "af-common-cmds-holder")
        maximum_paths = ET.SubElement(af_common_cmds_holder, "maximum-paths")
        ibgp = ET.SubElement(maximum_paths, "ibgp")
        ibgp.text = kwargs.pop('ibgp')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_common_cmds_holder_maximum_paths_use_load_sharing(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_common_cmds_holder = ET.SubElement(ipv4_unicast, "af-common-cmds-holder")
        maximum_paths = ET.SubElement(af_common_cmds_holder, "maximum-paths")
        use_load_sharing = ET.SubElement(maximum_paths, "use-load-sharing")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_common_cmds_holder_multipath_multipath_ebgp(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_common_cmds_holder = ET.SubElement(ipv4_unicast, "af-common-cmds-holder")
        multipath = ET.SubElement(af_common_cmds_holder, "multipath")
        multipath_ebgp = ET.SubElement(multipath, "multipath_ebgp")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_common_cmds_holder_multipath_multipath_ibgp(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_common_cmds_holder = ET.SubElement(ipv4_unicast, "af-common-cmds-holder")
        multipath = ET.SubElement(af_common_cmds_holder, "multipath")
        multipath_ibgp = ET.SubElement(multipath, "multipath_ibgp")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_common_cmds_holder_multipath_multi_as(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_common_cmds_holder = ET.SubElement(ipv4_unicast, "af-common-cmds-holder")
        multipath = ET.SubElement(af_common_cmds_holder, "multipath")
        multi_as = ET.SubElement(multipath, "multi-as")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_common_cmds_holder_always_propagate(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_common_cmds_holder = ET.SubElement(ipv4_unicast, "af-common-cmds-holder")
        always_propagate = ET.SubElement(af_common_cmds_holder, "always-propagate")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_common_cmds_holder_default_information_originate(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_common_cmds_holder = ET.SubElement(ipv4_unicast, "af-common-cmds-holder")
        default_information_originate = ET.SubElement(af_common_cmds_holder, "default-information-originate")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_common_cmds_holder_rib_route_limit(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_common_cmds_holder = ET.SubElement(ipv4_unicast, "af-common-cmds-holder")
        rib_route_limit = ET.SubElement(af_common_cmds_holder, "rib-route-limit")
        rib_route_limit.text = kwargs.pop('rib_route_limit')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_common_cmds_holder_client_to_client_reflection(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_common_cmds_holder = ET.SubElement(ipv4_unicast, "af-common-cmds-holder")
        client_to_client_reflection = ET.SubElement(af_common_cmds_holder, "client-to-client-reflection")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_common_cmds_holder_dampening_ch_dampening_source_ca_dampening_flag_dampening_flag(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_common_cmds_holder = ET.SubElement(ipv4_unicast, "af-common-cmds-holder")
        dampening = ET.SubElement(af_common_cmds_holder, "dampening")
        ch_dampening_source = ET.SubElement(dampening, "ch-dampening-source")
        ca_dampening_flag = ET.SubElement(ch_dampening_source, "ca-dampening-flag")
        dampening_flag = ET.SubElement(ca_dampening_flag, "dampening-flag")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_common_cmds_holder_dampening_ch_dampening_source_ca_dampening_specify_values_values_half_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_common_cmds_holder = ET.SubElement(ipv4_unicast, "af-common-cmds-holder")
        dampening = ET.SubElement(af_common_cmds_holder, "dampening")
        ch_dampening_source = ET.SubElement(dampening, "ch-dampening-source")
        ca_dampening_specify_values = ET.SubElement(ch_dampening_source, "ca-dampening-specify-values")
        values = ET.SubElement(ca_dampening_specify_values, "values")
        half_time = ET.SubElement(values, "half-time")
        half_time.text = kwargs.pop('half_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_common_cmds_holder_dampening_ch_dampening_source_ca_dampening_specify_values_values_reuse_value(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_common_cmds_holder = ET.SubElement(ipv4_unicast, "af-common-cmds-holder")
        dampening = ET.SubElement(af_common_cmds_holder, "dampening")
        ch_dampening_source = ET.SubElement(dampening, "ch-dampening-source")
        ca_dampening_specify_values = ET.SubElement(ch_dampening_source, "ca-dampening-specify-values")
        values = ET.SubElement(ca_dampening_specify_values, "values")
        reuse_value = ET.SubElement(values, "reuse-value")
        reuse_value.text = kwargs.pop('reuse_value')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_common_cmds_holder_dampening_ch_dampening_source_ca_dampening_specify_values_values_start_suppress_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_common_cmds_holder = ET.SubElement(ipv4_unicast, "af-common-cmds-holder")
        dampening = ET.SubElement(af_common_cmds_holder, "dampening")
        ch_dampening_source = ET.SubElement(dampening, "ch-dampening-source")
        ca_dampening_specify_values = ET.SubElement(ch_dampening_source, "ca-dampening-specify-values")
        values = ET.SubElement(ca_dampening_specify_values, "values")
        start_suppress_time = ET.SubElement(values, "start-suppress-time")
        start_suppress_time.text = kwargs.pop('start_suppress_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_common_cmds_holder_dampening_ch_dampening_source_ca_dampening_specify_values_values_max_suppress_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_common_cmds_holder = ET.SubElement(ipv4_unicast, "af-common-cmds-holder")
        dampening = ET.SubElement(af_common_cmds_holder, "dampening")
        ch_dampening_source = ET.SubElement(dampening, "ch-dampening-source")
        ca_dampening_specify_values = ET.SubElement(ch_dampening_source, "ca-dampening-specify-values")
        values = ET.SubElement(ca_dampening_specify_values, "values")
        max_suppress_time = ET.SubElement(values, "max-suppress-time")
        max_suppress_time.text = kwargs.pop('max_suppress_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_common_cmds_holder_dampening_ch_dampening_source_ca_dampening_route_map_dampening_route_map(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_common_cmds_holder = ET.SubElement(ipv4_unicast, "af-common-cmds-holder")
        dampening = ET.SubElement(af_common_cmds_holder, "dampening")
        ch_dampening_source = ET.SubElement(dampening, "ch-dampening-source")
        ca_dampening_route_map = ET.SubElement(ch_dampening_source, "ca-dampening-route-map")
        dampening_route_map = ET.SubElement(ca_dampening_route_map, "dampening-route-map")
        dampening_route_map.text = kwargs.pop('dampening_route_map')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_common_cmds_holder_default_metric(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_common_cmds_holder = ET.SubElement(ipv4_unicast, "af-common-cmds-holder")
        default_metric = ET.SubElement(af_common_cmds_holder, "default-metric")
        default_metric.text = kwargs.pop('default_metric')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_common_cmds_holder_next_hop_enable_default(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_common_cmds_holder = ET.SubElement(ipv4_unicast, "af-common-cmds-holder")
        next_hop_enable_default = ET.SubElement(af_common_cmds_holder, "next-hop-enable-default")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_common_cmds_holder_table_map_table_map_route_map(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_common_cmds_holder = ET.SubElement(ipv4_unicast, "af-common-cmds-holder")
        table_map = ET.SubElement(af_common_cmds_holder, "table-map")
        table_map_route_map = ET.SubElement(table_map, "table-map-route-map")
        table_map_route_map.text = kwargs.pop('table_map_route_map')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_common_cmds_holder_update_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_common_cmds_holder = ET.SubElement(ipv4_unicast, "af-common-cmds-holder")
        update_time = ET.SubElement(af_common_cmds_holder, "update-time")
        update_time.text = kwargs.pop('update_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_common_cmds_holder_graceful_restart_graceful_restart_status(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_common_cmds_holder = ET.SubElement(ipv4_unicast, "af-common-cmds-holder")
        graceful_restart = ET.SubElement(af_common_cmds_holder, "graceful-restart")
        graceful_restart_status = ET.SubElement(graceful_restart, "graceful-restart-status")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_common_cmds_holder_graceful_restart_restart_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_common_cmds_holder = ET.SubElement(ipv4_unicast, "af-common-cmds-holder")
        graceful_restart = ET.SubElement(af_common_cmds_holder, "graceful-restart")
        restart_time = ET.SubElement(graceful_restart, "restart-time")
        restart_time.text = kwargs.pop('restart_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_common_cmds_holder_graceful_restart_purge_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_common_cmds_holder = ET.SubElement(ipv4_unicast, "af-common-cmds-holder")
        graceful_restart = ET.SubElement(af_common_cmds_holder, "graceful-restart")
        purge_time = ET.SubElement(graceful_restart, "purge-time")
        purge_time.text = kwargs.pop('purge_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_af_common_cmds_holder_graceful_restart_stale_routes_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        af_common_cmds_holder = ET.SubElement(ipv4_unicast, "af-common-cmds-holder")
        graceful_restart = ET.SubElement(af_common_cmds_holder, "graceful-restart")
        stale_routes_time = ET.SubElement(graceful_restart, "stale-routes-time")
        stale_routes_time.text = kwargs.pop('stale_routes_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv4_ipv4_unicast_next_hop_recursion(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        ipv4_unicast = ET.SubElement(ipv4, "ipv4-unicast")
        next_hop_recursion = ET.SubElement(ipv4_unicast, "next-hop-recursion")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_uc_and_vrf_cmds_call_point_holder_bgp_redistribute_internal(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_uc_and_vrf_cmds_call_point_holder = ET.SubElement(ipv6_unicast, "af-ipv6-uc-and-vrf-cmds-call-point-holder")
        bgp_redistribute_internal = ET.SubElement(af_ipv6_uc_and_vrf_cmds_call_point_holder, "bgp-redistribute-internal")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_uc_and_vrf_cmds_call_point_holder_redistribute_connected_redistribute_connected(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_uc_and_vrf_cmds_call_point_holder = ET.SubElement(ipv6_unicast, "af-ipv6-uc-and-vrf-cmds-call-point-holder")
        redistribute = ET.SubElement(af_ipv6_uc_and_vrf_cmds_call_point_holder, "redistribute")
        connected = ET.SubElement(redistribute, "connected")
        redistribute_connected = ET.SubElement(connected, "redistribute-connected")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_uc_and_vrf_cmds_call_point_holder_redistribute_connected_unicast_metric(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_uc_and_vrf_cmds_call_point_holder = ET.SubElement(ipv6_unicast, "af-ipv6-uc-and-vrf-cmds-call-point-holder")
        redistribute = ET.SubElement(af_ipv6_uc_and_vrf_cmds_call_point_holder, "redistribute")
        connected = ET.SubElement(redistribute, "connected")
        unicast_metric = ET.SubElement(connected, "unicast-metric")
        unicast_metric.text = kwargs.pop('unicast_metric')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_uc_and_vrf_cmds_call_point_holder_redistribute_connected_redistribute_route_map(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_uc_and_vrf_cmds_call_point_holder = ET.SubElement(ipv6_unicast, "af-ipv6-uc-and-vrf-cmds-call-point-holder")
        redistribute = ET.SubElement(af_ipv6_uc_and_vrf_cmds_call_point_holder, "redistribute")
        connected = ET.SubElement(redistribute, "connected")
        redistribute_route_map = ET.SubElement(connected, "redistribute-route-map")
        redistribute_route_map.text = kwargs.pop('redistribute_route_map')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_uc_and_vrf_cmds_call_point_holder_redistribute_ospf_redistribute_ospf(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_uc_and_vrf_cmds_call_point_holder = ET.SubElement(ipv6_unicast, "af-ipv6-uc-and-vrf-cmds-call-point-holder")
        redistribute = ET.SubElement(af_ipv6_uc_and_vrf_cmds_call_point_holder, "redistribute")
        ospf = ET.SubElement(redistribute, "ospf")
        redistribute_ospf = ET.SubElement(ospf, "redistribute-ospf")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_uc_and_vrf_cmds_call_point_holder_redistribute_ospf_match_ospf_internal(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_uc_and_vrf_cmds_call_point_holder = ET.SubElement(ipv6_unicast, "af-ipv6-uc-and-vrf-cmds-call-point-holder")
        redistribute = ET.SubElement(af_ipv6_uc_and_vrf_cmds_call_point_holder, "redistribute")
        ospf = ET.SubElement(redistribute, "ospf")
        match = ET.SubElement(ospf, "match")
        ospf_internal = ET.SubElement(match, "ospf-internal")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_uc_and_vrf_cmds_call_point_holder_redistribute_ospf_match_ospf_external1(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_uc_and_vrf_cmds_call_point_holder = ET.SubElement(ipv6_unicast, "af-ipv6-uc-and-vrf-cmds-call-point-holder")
        redistribute = ET.SubElement(af_ipv6_uc_and_vrf_cmds_call_point_holder, "redistribute")
        ospf = ET.SubElement(redistribute, "ospf")
        match = ET.SubElement(ospf, "match")
        ospf_external1 = ET.SubElement(match, "ospf-external1")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_uc_and_vrf_cmds_call_point_holder_redistribute_ospf_match_ospf_external2(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_uc_and_vrf_cmds_call_point_holder = ET.SubElement(ipv6_unicast, "af-ipv6-uc-and-vrf-cmds-call-point-holder")
        redistribute = ET.SubElement(af_ipv6_uc_and_vrf_cmds_call_point_holder, "redistribute")
        ospf = ET.SubElement(redistribute, "ospf")
        match = ET.SubElement(ospf, "match")
        ospf_external2 = ET.SubElement(match, "ospf-external2")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_uc_and_vrf_cmds_call_point_holder_redistribute_ospf_ospf_metric(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_uc_and_vrf_cmds_call_point_holder = ET.SubElement(ipv6_unicast, "af-ipv6-uc-and-vrf-cmds-call-point-holder")
        redistribute = ET.SubElement(af_ipv6_uc_and_vrf_cmds_call_point_holder, "redistribute")
        ospf = ET.SubElement(redistribute, "ospf")
        ospf_metric = ET.SubElement(ospf, "ospf-metric")
        ospf_metric.text = kwargs.pop('ospf_metric')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_uc_and_vrf_cmds_call_point_holder_redistribute_ospf_ospf_route_map(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_uc_and_vrf_cmds_call_point_holder = ET.SubElement(ipv6_unicast, "af-ipv6-uc-and-vrf-cmds-call-point-holder")
        redistribute = ET.SubElement(af_ipv6_uc_and_vrf_cmds_call_point_holder, "redistribute")
        ospf = ET.SubElement(redistribute, "ospf")
        ospf_route_map = ET.SubElement(ospf, "ospf-route-map")
        ospf_route_map.text = kwargs.pop('ospf_route_map')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_uc_and_vrf_cmds_call_point_holder_redistribute_static_redistribute_static(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_uc_and_vrf_cmds_call_point_holder = ET.SubElement(ipv6_unicast, "af-ipv6-uc-and-vrf-cmds-call-point-holder")
        redistribute = ET.SubElement(af_ipv6_uc_and_vrf_cmds_call_point_holder, "redistribute")
        static = ET.SubElement(redistribute, "static")
        redistribute_static = ET.SubElement(static, "redistribute-static")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_uc_and_vrf_cmds_call_point_holder_redistribute_static_unicast_static_metric(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_uc_and_vrf_cmds_call_point_holder = ET.SubElement(ipv6_unicast, "af-ipv6-uc-and-vrf-cmds-call-point-holder")
        redistribute = ET.SubElement(af_ipv6_uc_and_vrf_cmds_call_point_holder, "redistribute")
        static = ET.SubElement(redistribute, "static")
        unicast_static_metric = ET.SubElement(static, "unicast-static-metric")
        unicast_static_metric.text = kwargs.pop('unicast_static_metric')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_uc_and_vrf_cmds_call_point_holder_redistribute_static_static_route_map(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_uc_and_vrf_cmds_call_point_holder = ET.SubElement(ipv6_unicast, "af-ipv6-uc-and-vrf-cmds-call-point-holder")
        redistribute = ET.SubElement(af_ipv6_uc_and_vrf_cmds_call_point_holder, "redistribute")
        static = ET.SubElement(redistribute, "static")
        static_route_map = ET.SubElement(static, "static-route-map")
        static_route_map.text = kwargs.pop('static_route_map')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_aggregate_ipv6_address_aggregate_ip_prefix(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        aggregate_ipv6_address = ET.SubElement(ipv6_unicast, "aggregate-ipv6-address")
        aggregate_ip_prefix = ET.SubElement(aggregate_ipv6_address, "aggregate-ip-prefix")
        aggregate_ip_prefix.text = kwargs.pop('aggregate_ip_prefix')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_aggregate_ipv6_address_advertise_map(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        aggregate_ipv6_address = ET.SubElement(ipv6_unicast, "aggregate-ipv6-address")
        aggregate_ip_prefix_key = ET.SubElement(aggregate_ipv6_address, "aggregate-ip-prefix")
        aggregate_ip_prefix_key.text = kwargs.pop('aggregate_ip_prefix')
        advertise_map = ET.SubElement(aggregate_ipv6_address, "advertise-map")
        advertise_map.text = kwargs.pop('advertise_map')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_aggregate_ipv6_address_as_set(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        aggregate_ipv6_address = ET.SubElement(ipv6_unicast, "aggregate-ipv6-address")
        aggregate_ip_prefix_key = ET.SubElement(aggregate_ipv6_address, "aggregate-ip-prefix")
        aggregate_ip_prefix_key.text = kwargs.pop('aggregate_ip_prefix')
        as_set = ET.SubElement(aggregate_ipv6_address, "as-set")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_aggregate_ipv6_address_attribute_map(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        aggregate_ipv6_address = ET.SubElement(ipv6_unicast, "aggregate-ipv6-address")
        aggregate_ip_prefix_key = ET.SubElement(aggregate_ipv6_address, "aggregate-ip-prefix")
        aggregate_ip_prefix_key.text = kwargs.pop('aggregate_ip_prefix')
        attribute_map = ET.SubElement(aggregate_ipv6_address, "attribute-map")
        attribute_map.text = kwargs.pop('attribute_map')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_aggregate_ipv6_address_summary_only(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        aggregate_ipv6_address = ET.SubElement(ipv6_unicast, "aggregate-ipv6-address")
        aggregate_ip_prefix_key = ET.SubElement(aggregate_ipv6_address, "aggregate-ip-prefix")
        aggregate_ip_prefix_key.text = kwargs.pop('aggregate_ip_prefix')
        summary_only = ET.SubElement(aggregate_ipv6_address, "summary-only")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_aggregate_ipv6_address_suppress_map(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        aggregate_ipv6_address = ET.SubElement(ipv6_unicast, "aggregate-ipv6-address")
        aggregate_ip_prefix_key = ET.SubElement(aggregate_ipv6_address, "aggregate-ip-prefix")
        aggregate_ip_prefix_key.text = kwargs.pop('aggregate_ip_prefix')
        suppress_map = ET.SubElement(aggregate_ipv6_address, "suppress-map")
        suppress_map.text = kwargs.pop('suppress_map')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_network_network_ipv6_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        network = ET.SubElement(ipv6_unicast, "network")
        network_ipv6_address = ET.SubElement(network, "network-ipv6-address")
        network_ipv6_address.text = kwargs.pop('network_ipv6_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_network_network_weight(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        network = ET.SubElement(ipv6_unicast, "network")
        network_ipv6_address_key = ET.SubElement(network, "network-ipv6-address")
        network_ipv6_address_key.text = kwargs.pop('network_ipv6_address')
        network_weight = ET.SubElement(network, "network-weight")
        network_weight.text = kwargs.pop('network_weight')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_network_backdoor(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        network = ET.SubElement(ipv6_unicast, "network")
        network_ipv6_address_key = ET.SubElement(network, "network-ipv6-address")
        network_ipv6_address_key.text = kwargs.pop('network_ipv6_address')
        backdoor = ET.SubElement(network, "backdoor")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_network_network_route_map(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        network = ET.SubElement(ipv6_unicast, "network")
        network_ipv6_address_key = ET.SubElement(network, "network-ipv6-address")
        network_ipv6_address_key.text = kwargs.pop('network_ipv6_address')
        network_route_map = ET.SubElement(network, "network-route-map")
        network_route_map.text = kwargs.pop('network_route_map')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_peergroup_holder_af_ipv6_neighbor_peergroup_af_ipv6_neighbor_peergroup_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_peergroup_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-peergroup-holder")
        af_ipv6_neighbor_peergroup = ET.SubElement(af_ipv6_neighbor_peergroup_holder, "af-ipv6-neighbor-peergroup")
        af_ipv6_neighbor_peergroup_name = ET.SubElement(af_ipv6_neighbor_peergroup, "af-ipv6-neighbor-peergroup-name")
        af_ipv6_neighbor_peergroup_name.text = kwargs.pop('af_ipv6_neighbor_peergroup_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_peergroup_holder_af_ipv6_neighbor_peergroup_send_community_send_community_status(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_peergroup_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-peergroup-holder")
        af_ipv6_neighbor_peergroup = ET.SubElement(af_ipv6_neighbor_peergroup_holder, "af-ipv6-neighbor-peergroup")
        af_ipv6_neighbor_peergroup_name_key = ET.SubElement(af_ipv6_neighbor_peergroup, "af-ipv6-neighbor-peergroup-name")
        af_ipv6_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv6_neighbor_peergroup_name')
        send_community = ET.SubElement(af_ipv6_neighbor_peergroup, "send-community")
        send_community_status = ET.SubElement(send_community, "send-community-status")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_peergroup_holder_af_ipv6_neighbor_peergroup_send_community_both(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_peergroup_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-peergroup-holder")
        af_ipv6_neighbor_peergroup = ET.SubElement(af_ipv6_neighbor_peergroup_holder, "af-ipv6-neighbor-peergroup")
        af_ipv6_neighbor_peergroup_name_key = ET.SubElement(af_ipv6_neighbor_peergroup, "af-ipv6-neighbor-peergroup-name")
        af_ipv6_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv6_neighbor_peergroup_name')
        send_community = ET.SubElement(af_ipv6_neighbor_peergroup, "send-community")
        both = ET.SubElement(send_community, "both")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_peergroup_holder_af_ipv6_neighbor_peergroup_send_community_extended(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_peergroup_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-peergroup-holder")
        af_ipv6_neighbor_peergroup = ET.SubElement(af_ipv6_neighbor_peergroup_holder, "af-ipv6-neighbor-peergroup")
        af_ipv6_neighbor_peergroup_name_key = ET.SubElement(af_ipv6_neighbor_peergroup, "af-ipv6-neighbor-peergroup-name")
        af_ipv6_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv6_neighbor_peergroup_name')
        send_community = ET.SubElement(af_ipv6_neighbor_peergroup, "send-community")
        extended = ET.SubElement(send_community, "extended")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_peergroup_holder_af_ipv6_neighbor_peergroup_send_community_standard(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_peergroup_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-peergroup-holder")
        af_ipv6_neighbor_peergroup = ET.SubElement(af_ipv6_neighbor_peergroup_holder, "af-ipv6-neighbor-peergroup")
        af_ipv6_neighbor_peergroup_name_key = ET.SubElement(af_ipv6_neighbor_peergroup, "af-ipv6-neighbor-peergroup-name")
        af_ipv6_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv6_neighbor_peergroup_name')
        send_community = ET.SubElement(af_ipv6_neighbor_peergroup, "send-community")
        standard = ET.SubElement(send_community, "standard")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_peergroup_holder_af_ipv6_neighbor_peergroup_af_neighbor_capability_orf_prefixlist_prefixlist_status(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_peergroup_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-peergroup-holder")
        af_ipv6_neighbor_peergroup = ET.SubElement(af_ipv6_neighbor_peergroup_holder, "af-ipv6-neighbor-peergroup")
        af_ipv6_neighbor_peergroup_name_key = ET.SubElement(af_ipv6_neighbor_peergroup, "af-ipv6-neighbor-peergroup-name")
        af_ipv6_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv6_neighbor_peergroup_name')
        af_neighbor_capability = ET.SubElement(af_ipv6_neighbor_peergroup, "af-neighbor-capability")
        orf = ET.SubElement(af_neighbor_capability, "orf")
        prefixlist = ET.SubElement(orf, "prefixlist")
        prefixlist_status = ET.SubElement(prefixlist, "prefixlist-status")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_peergroup_holder_af_ipv6_neighbor_peergroup_af_neighbor_capability_orf_prefixlist_prefixlist_send(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_peergroup_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-peergroup-holder")
        af_ipv6_neighbor_peergroup = ET.SubElement(af_ipv6_neighbor_peergroup_holder, "af-ipv6-neighbor-peergroup")
        af_ipv6_neighbor_peergroup_name_key = ET.SubElement(af_ipv6_neighbor_peergroup, "af-ipv6-neighbor-peergroup-name")
        af_ipv6_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv6_neighbor_peergroup_name')
        af_neighbor_capability = ET.SubElement(af_ipv6_neighbor_peergroup, "af-neighbor-capability")
        orf = ET.SubElement(af_neighbor_capability, "orf")
        prefixlist = ET.SubElement(orf, "prefixlist")
        prefixlist_send = ET.SubElement(prefixlist, "prefixlist-send")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_peergroup_holder_af_ipv6_neighbor_peergroup_af_neighbor_capability_orf_prefixlist_prefixlist_receive(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_peergroup_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-peergroup-holder")
        af_ipv6_neighbor_peergroup = ET.SubElement(af_ipv6_neighbor_peergroup_holder, "af-ipv6-neighbor-peergroup")
        af_ipv6_neighbor_peergroup_name_key = ET.SubElement(af_ipv6_neighbor_peergroup, "af-ipv6-neighbor-peergroup-name")
        af_ipv6_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv6_neighbor_peergroup_name')
        af_neighbor_capability = ET.SubElement(af_ipv6_neighbor_peergroup, "af-neighbor-capability")
        orf = ET.SubElement(af_neighbor_capability, "orf")
        prefixlist = ET.SubElement(orf, "prefixlist")
        prefixlist_receive = ET.SubElement(prefixlist, "prefixlist-receive")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_peergroup_holder_af_ipv6_neighbor_peergroup_allowas_in(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_peergroup_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-peergroup-holder")
        af_ipv6_neighbor_peergroup = ET.SubElement(af_ipv6_neighbor_peergroup_holder, "af-ipv6-neighbor-peergroup")
        af_ipv6_neighbor_peergroup_name_key = ET.SubElement(af_ipv6_neighbor_peergroup, "af-ipv6-neighbor-peergroup-name")
        af_ipv6_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv6_neighbor_peergroup_name')
        allowas_in = ET.SubElement(af_ipv6_neighbor_peergroup, "allowas-in")
        allowas_in.text = kwargs.pop('allowas_in')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_peergroup_holder_af_ipv6_neighbor_peergroup_activate(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_peergroup_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-peergroup-holder")
        af_ipv6_neighbor_peergroup = ET.SubElement(af_ipv6_neighbor_peergroup_holder, "af-ipv6-neighbor-peergroup")
        af_ipv6_neighbor_peergroup_name_key = ET.SubElement(af_ipv6_neighbor_peergroup, "af-ipv6-neighbor-peergroup-name")
        af_ipv6_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv6_neighbor_peergroup_name')
        activate = ET.SubElement(af_ipv6_neighbor_peergroup, "activate")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_peergroup_holder_af_ipv6_neighbor_peergroup_filter_list_direction_in_filter_list_direction_in_acl_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_peergroup_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-peergroup-holder")
        af_ipv6_neighbor_peergroup = ET.SubElement(af_ipv6_neighbor_peergroup_holder, "af-ipv6-neighbor-peergroup")
        af_ipv6_neighbor_peergroup_name_key = ET.SubElement(af_ipv6_neighbor_peergroup, "af-ipv6-neighbor-peergroup-name")
        af_ipv6_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv6_neighbor_peergroup_name')
        filter_list = ET.SubElement(af_ipv6_neighbor_peergroup, "filter-list")
        direction_in = ET.SubElement(filter_list, "direction-in")
        filter_list_direction_in_acl_name = ET.SubElement(direction_in, "filter-list-direction-in-acl-name")
        filter_list_direction_in_acl_name.text = kwargs.pop('filter_list_direction_in_acl_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_peergroup_holder_af_ipv6_neighbor_peergroup_filter_list_direction_in_filter_list_name_direction_in(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_peergroup_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-peergroup-holder")
        af_ipv6_neighbor_peergroup = ET.SubElement(af_ipv6_neighbor_peergroup_holder, "af-ipv6-neighbor-peergroup")
        af_ipv6_neighbor_peergroup_name_key = ET.SubElement(af_ipv6_neighbor_peergroup, "af-ipv6-neighbor-peergroup-name")
        af_ipv6_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv6_neighbor_peergroup_name')
        filter_list = ET.SubElement(af_ipv6_neighbor_peergroup, "filter-list")
        direction_in = ET.SubElement(filter_list, "direction-in")
        filter_list_name_direction_in = ET.SubElement(direction_in, "filter-list-name-direction-in")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_peergroup_holder_af_ipv6_neighbor_peergroup_filter_list_direction_out_filter_list_direction_out_acl_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_peergroup_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-peergroup-holder")
        af_ipv6_neighbor_peergroup = ET.SubElement(af_ipv6_neighbor_peergroup_holder, "af-ipv6-neighbor-peergroup")
        af_ipv6_neighbor_peergroup_name_key = ET.SubElement(af_ipv6_neighbor_peergroup, "af-ipv6-neighbor-peergroup-name")
        af_ipv6_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv6_neighbor_peergroup_name')
        filter_list = ET.SubElement(af_ipv6_neighbor_peergroup, "filter-list")
        direction_out = ET.SubElement(filter_list, "direction-out")
        filter_list_direction_out_acl_name = ET.SubElement(direction_out, "filter-list-direction-out-acl-name")
        filter_list_direction_out_acl_name.text = kwargs.pop('filter_list_direction_out_acl_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_peergroup_holder_af_ipv6_neighbor_peergroup_filter_list_direction_out_filter_list_name_direction_out(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_peergroup_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-peergroup-holder")
        af_ipv6_neighbor_peergroup = ET.SubElement(af_ipv6_neighbor_peergroup_holder, "af-ipv6-neighbor-peergroup")
        af_ipv6_neighbor_peergroup_name_key = ET.SubElement(af_ipv6_neighbor_peergroup, "af-ipv6-neighbor-peergroup-name")
        af_ipv6_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv6_neighbor_peergroup_name')
        filter_list = ET.SubElement(af_ipv6_neighbor_peergroup, "filter-list")
        direction_out = ET.SubElement(filter_list, "direction-out")
        filter_list_name_direction_out = ET.SubElement(direction_out, "filter-list-name-direction-out")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_peergroup_holder_af_ipv6_neighbor_peergroup_maximum_prefix_max_prefix_limit(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_peergroup_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-peergroup-holder")
        af_ipv6_neighbor_peergroup = ET.SubElement(af_ipv6_neighbor_peergroup_holder, "af-ipv6-neighbor-peergroup")
        af_ipv6_neighbor_peergroup_name_key = ET.SubElement(af_ipv6_neighbor_peergroup, "af-ipv6-neighbor-peergroup-name")
        af_ipv6_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv6_neighbor_peergroup_name')
        maximum_prefix = ET.SubElement(af_ipv6_neighbor_peergroup, "maximum-prefix")
        max_prefix_limit = ET.SubElement(maximum_prefix, "max-prefix-limit")
        max_prefix_limit.text = kwargs.pop('max_prefix_limit')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_peergroup_holder_af_ipv6_neighbor_peergroup_maximum_prefix_threshold_holder_threshold(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_peergroup_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-peergroup-holder")
        af_ipv6_neighbor_peergroup = ET.SubElement(af_ipv6_neighbor_peergroup_holder, "af-ipv6-neighbor-peergroup")
        af_ipv6_neighbor_peergroup_name_key = ET.SubElement(af_ipv6_neighbor_peergroup, "af-ipv6-neighbor-peergroup-name")
        af_ipv6_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv6_neighbor_peergroup_name')
        maximum_prefix = ET.SubElement(af_ipv6_neighbor_peergroup, "maximum-prefix")
        threshold_holder = ET.SubElement(maximum_prefix, "threshold-holder")
        threshold = ET.SubElement(threshold_holder, "threshold")
        threshold.text = kwargs.pop('threshold')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_peergroup_holder_af_ipv6_neighbor_peergroup_maximum_prefix_threshold_holder_teardown(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_peergroup_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-peergroup-holder")
        af_ipv6_neighbor_peergroup = ET.SubElement(af_ipv6_neighbor_peergroup_holder, "af-ipv6-neighbor-peergroup")
        af_ipv6_neighbor_peergroup_name_key = ET.SubElement(af_ipv6_neighbor_peergroup, "af-ipv6-neighbor-peergroup-name")
        af_ipv6_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv6_neighbor_peergroup_name')
        maximum_prefix = ET.SubElement(af_ipv6_neighbor_peergroup, "maximum-prefix")
        threshold_holder = ET.SubElement(maximum_prefix, "threshold-holder")
        teardown = ET.SubElement(threshold_holder, "teardown")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_peergroup_holder_af_ipv6_neighbor_peergroup_default_originate_default_originate_status(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_peergroup_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-peergroup-holder")
        af_ipv6_neighbor_peergroup = ET.SubElement(af_ipv6_neighbor_peergroup_holder, "af-ipv6-neighbor-peergroup")
        af_ipv6_neighbor_peergroup_name_key = ET.SubElement(af_ipv6_neighbor_peergroup, "af-ipv6-neighbor-peergroup-name")
        af_ipv6_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv6_neighbor_peergroup_name')
        default_originate = ET.SubElement(af_ipv6_neighbor_peergroup, "default-originate")
        default_originate_status = ET.SubElement(default_originate, "default-originate-status")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_peergroup_holder_af_ipv6_neighbor_peergroup_default_originate_default_originate_route_map(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_peergroup_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-peergroup-holder")
        af_ipv6_neighbor_peergroup = ET.SubElement(af_ipv6_neighbor_peergroup_holder, "af-ipv6-neighbor-peergroup")
        af_ipv6_neighbor_peergroup_name_key = ET.SubElement(af_ipv6_neighbor_peergroup, "af-ipv6-neighbor-peergroup-name")
        af_ipv6_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv6_neighbor_peergroup_name')
        default_originate = ET.SubElement(af_ipv6_neighbor_peergroup, "default-originate")
        default_originate_route_map = ET.SubElement(default_originate, "default-originate-route-map")
        default_originate_route_map.text = kwargs.pop('default_originate_route_map')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_peergroup_holder_af_ipv6_neighbor_peergroup_prefix_list_direction_in_prefix_list_direction_in_prefix_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_peergroup_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-peergroup-holder")
        af_ipv6_neighbor_peergroup = ET.SubElement(af_ipv6_neighbor_peergroup_holder, "af-ipv6-neighbor-peergroup")
        af_ipv6_neighbor_peergroup_name_key = ET.SubElement(af_ipv6_neighbor_peergroup, "af-ipv6-neighbor-peergroup-name")
        af_ipv6_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv6_neighbor_peergroup_name')
        prefix_list = ET.SubElement(af_ipv6_neighbor_peergroup, "prefix-list")
        direction_in = ET.SubElement(prefix_list, "direction-in")
        prefix_list_direction_in_prefix_name = ET.SubElement(direction_in, "prefix-list-direction-in-prefix-name")
        prefix_list_direction_in_prefix_name.text = kwargs.pop('prefix_list_direction_in_prefix_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_peergroup_holder_af_ipv6_neighbor_peergroup_prefix_list_direction_in_prefix_list_direction_in(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_peergroup_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-peergroup-holder")
        af_ipv6_neighbor_peergroup = ET.SubElement(af_ipv6_neighbor_peergroup_holder, "af-ipv6-neighbor-peergroup")
        af_ipv6_neighbor_peergroup_name_key = ET.SubElement(af_ipv6_neighbor_peergroup, "af-ipv6-neighbor-peergroup-name")
        af_ipv6_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv6_neighbor_peergroup_name')
        prefix_list = ET.SubElement(af_ipv6_neighbor_peergroup, "prefix-list")
        direction_in = ET.SubElement(prefix_list, "direction-in")
        prefix_list_direction_in = ET.SubElement(direction_in, "prefix-list-direction-in")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_peergroup_holder_af_ipv6_neighbor_peergroup_prefix_list_direction_out_prefix_list_direction_out_prefix_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_peergroup_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-peergroup-holder")
        af_ipv6_neighbor_peergroup = ET.SubElement(af_ipv6_neighbor_peergroup_holder, "af-ipv6-neighbor-peergroup")
        af_ipv6_neighbor_peergroup_name_key = ET.SubElement(af_ipv6_neighbor_peergroup, "af-ipv6-neighbor-peergroup-name")
        af_ipv6_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv6_neighbor_peergroup_name')
        prefix_list = ET.SubElement(af_ipv6_neighbor_peergroup, "prefix-list")
        direction_out = ET.SubElement(prefix_list, "direction-out")
        prefix_list_direction_out_prefix_name = ET.SubElement(direction_out, "prefix-list-direction-out-prefix-name")
        prefix_list_direction_out_prefix_name.text = kwargs.pop('prefix_list_direction_out_prefix_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_peergroup_holder_af_ipv6_neighbor_peergroup_prefix_list_direction_out_prefix_list_direction_out(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_peergroup_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-peergroup-holder")
        af_ipv6_neighbor_peergroup = ET.SubElement(af_ipv6_neighbor_peergroup_holder, "af-ipv6-neighbor-peergroup")
        af_ipv6_neighbor_peergroup_name_key = ET.SubElement(af_ipv6_neighbor_peergroup, "af-ipv6-neighbor-peergroup-name")
        af_ipv6_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv6_neighbor_peergroup_name')
        prefix_list = ET.SubElement(af_ipv6_neighbor_peergroup, "prefix-list")
        direction_out = ET.SubElement(prefix_list, "direction-out")
        prefix_list_direction_out = ET.SubElement(direction_out, "prefix-list-direction-out")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_peergroup_holder_af_ipv6_neighbor_peergroup_neighbor_route_map_neighbor_route_map_direction_in_neighbor_route_map_name_direction_in(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_peergroup_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-peergroup-holder")
        af_ipv6_neighbor_peergroup = ET.SubElement(af_ipv6_neighbor_peergroup_holder, "af-ipv6-neighbor-peergroup")
        af_ipv6_neighbor_peergroup_name_key = ET.SubElement(af_ipv6_neighbor_peergroup, "af-ipv6-neighbor-peergroup-name")
        af_ipv6_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv6_neighbor_peergroup_name')
        neighbor_route_map = ET.SubElement(af_ipv6_neighbor_peergroup, "neighbor-route-map")
        neighbor_route_map_direction_in = ET.SubElement(neighbor_route_map, "neighbor-route-map-direction-in")
        neighbor_route_map_name_direction_in = ET.SubElement(neighbor_route_map_direction_in, "neighbor-route-map-name-direction-in")
        neighbor_route_map_name_direction_in.text = kwargs.pop('neighbor_route_map_name_direction_in')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_peergroup_holder_af_ipv6_neighbor_peergroup_neighbor_route_map_neighbor_route_map_direction_out_neighbor_route_map_name_direction_out(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_peergroup_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-peergroup-holder")
        af_ipv6_neighbor_peergroup = ET.SubElement(af_ipv6_neighbor_peergroup_holder, "af-ipv6-neighbor-peergroup")
        af_ipv6_neighbor_peergroup_name_key = ET.SubElement(af_ipv6_neighbor_peergroup, "af-ipv6-neighbor-peergroup-name")
        af_ipv6_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv6_neighbor_peergroup_name')
        neighbor_route_map = ET.SubElement(af_ipv6_neighbor_peergroup, "neighbor-route-map")
        neighbor_route_map_direction_out = ET.SubElement(neighbor_route_map, "neighbor-route-map-direction-out")
        neighbor_route_map_name_direction_out = ET.SubElement(neighbor_route_map_direction_out, "neighbor-route-map-name-direction-out")
        neighbor_route_map_name_direction_out.text = kwargs.pop('neighbor_route_map_name_direction_out')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_peergroup_holder_af_ipv6_neighbor_peergroup_route_reflector_client(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_peergroup_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-peergroup-holder")
        af_ipv6_neighbor_peergroup = ET.SubElement(af_ipv6_neighbor_peergroup_holder, "af-ipv6-neighbor-peergroup")
        af_ipv6_neighbor_peergroup_name_key = ET.SubElement(af_ipv6_neighbor_peergroup, "af-ipv6-neighbor-peergroup-name")
        af_ipv6_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv6_neighbor_peergroup_name')
        route_reflector_client = ET.SubElement(af_ipv6_neighbor_peergroup, "route-reflector-client")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_peergroup_holder_af_ipv6_neighbor_peergroup_unsuppress_map_map_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_peergroup_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-peergroup-holder")
        af_ipv6_neighbor_peergroup = ET.SubElement(af_ipv6_neighbor_peergroup_holder, "af-ipv6-neighbor-peergroup")
        af_ipv6_neighbor_peergroup_name_key = ET.SubElement(af_ipv6_neighbor_peergroup, "af-ipv6-neighbor-peergroup-name")
        af_ipv6_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv6_neighbor_peergroup_name')
        unsuppress_map = ET.SubElement(af_ipv6_neighbor_peergroup, "unsuppress-map")
        map_name = ET.SubElement(unsuppress_map, "map-name")
        map_name.text = kwargs.pop('map_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_peergroup_holder_af_ipv6_neighbor_peergroup_af_nei_weight(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_peergroup_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-peergroup-holder")
        af_ipv6_neighbor_peergroup = ET.SubElement(af_ipv6_neighbor_peergroup_holder, "af-ipv6-neighbor-peergroup")
        af_ipv6_neighbor_peergroup_name_key = ET.SubElement(af_ipv6_neighbor_peergroup, "af-ipv6-neighbor-peergroup-name")
        af_ipv6_neighbor_peergroup_name_key.text = kwargs.pop('af_ipv6_neighbor_peergroup_name')
        af_nei_weight = ET.SubElement(af_ipv6_neighbor_peergroup, "af-nei-weight")
        af_nei_weight.text = kwargs.pop('af_nei_weight')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_address_holder_af_ipv6_neighbor_address_af_ipv6_neighbor_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_address_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-address-holder")
        af_ipv6_neighbor_address = ET.SubElement(af_ipv6_neighbor_address_holder, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address = ET.SubElement(af_ipv6_neighbor_address, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address.text = kwargs.pop('af_ipv6_neighbor_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_address_holder_af_ipv6_neighbor_address_send_community_send_community_status(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_address_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-address-holder")
        af_ipv6_neighbor_address = ET.SubElement(af_ipv6_neighbor_address_holder, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key = ET.SubElement(af_ipv6_neighbor_address, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key.text = kwargs.pop('af_ipv6_neighbor_address')
        send_community = ET.SubElement(af_ipv6_neighbor_address, "send-community")
        send_community_status = ET.SubElement(send_community, "send-community-status")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_address_holder_af_ipv6_neighbor_address_send_community_both(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_address_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-address-holder")
        af_ipv6_neighbor_address = ET.SubElement(af_ipv6_neighbor_address_holder, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key = ET.SubElement(af_ipv6_neighbor_address, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key.text = kwargs.pop('af_ipv6_neighbor_address')
        send_community = ET.SubElement(af_ipv6_neighbor_address, "send-community")
        both = ET.SubElement(send_community, "both")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_address_holder_af_ipv6_neighbor_address_send_community_extended(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_address_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-address-holder")
        af_ipv6_neighbor_address = ET.SubElement(af_ipv6_neighbor_address_holder, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key = ET.SubElement(af_ipv6_neighbor_address, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key.text = kwargs.pop('af_ipv6_neighbor_address')
        send_community = ET.SubElement(af_ipv6_neighbor_address, "send-community")
        extended = ET.SubElement(send_community, "extended")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_address_holder_af_ipv6_neighbor_address_send_community_standard(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_address_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-address-holder")
        af_ipv6_neighbor_address = ET.SubElement(af_ipv6_neighbor_address_holder, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key = ET.SubElement(af_ipv6_neighbor_address, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key.text = kwargs.pop('af_ipv6_neighbor_address')
        send_community = ET.SubElement(af_ipv6_neighbor_address, "send-community")
        standard = ET.SubElement(send_community, "standard")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_address_holder_af_ipv6_neighbor_address_af_neighbor_capability_orf_prefixlist_prefixlist_status(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_address_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-address-holder")
        af_ipv6_neighbor_address = ET.SubElement(af_ipv6_neighbor_address_holder, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key = ET.SubElement(af_ipv6_neighbor_address, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key.text = kwargs.pop('af_ipv6_neighbor_address')
        af_neighbor_capability = ET.SubElement(af_ipv6_neighbor_address, "af-neighbor-capability")
        orf = ET.SubElement(af_neighbor_capability, "orf")
        prefixlist = ET.SubElement(orf, "prefixlist")
        prefixlist_status = ET.SubElement(prefixlist, "prefixlist-status")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_address_holder_af_ipv6_neighbor_address_af_neighbor_capability_orf_prefixlist_prefixlist_send(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_address_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-address-holder")
        af_ipv6_neighbor_address = ET.SubElement(af_ipv6_neighbor_address_holder, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key = ET.SubElement(af_ipv6_neighbor_address, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key.text = kwargs.pop('af_ipv6_neighbor_address')
        af_neighbor_capability = ET.SubElement(af_ipv6_neighbor_address, "af-neighbor-capability")
        orf = ET.SubElement(af_neighbor_capability, "orf")
        prefixlist = ET.SubElement(orf, "prefixlist")
        prefixlist_send = ET.SubElement(prefixlist, "prefixlist-send")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_address_holder_af_ipv6_neighbor_address_af_neighbor_capability_orf_prefixlist_prefixlist_receive(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_address_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-address-holder")
        af_ipv6_neighbor_address = ET.SubElement(af_ipv6_neighbor_address_holder, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key = ET.SubElement(af_ipv6_neighbor_address, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key.text = kwargs.pop('af_ipv6_neighbor_address')
        af_neighbor_capability = ET.SubElement(af_ipv6_neighbor_address, "af-neighbor-capability")
        orf = ET.SubElement(af_neighbor_capability, "orf")
        prefixlist = ET.SubElement(orf, "prefixlist")
        prefixlist_receive = ET.SubElement(prefixlist, "prefixlist-receive")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_address_holder_af_ipv6_neighbor_address_allowas_in(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_address_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-address-holder")
        af_ipv6_neighbor_address = ET.SubElement(af_ipv6_neighbor_address_holder, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key = ET.SubElement(af_ipv6_neighbor_address, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key.text = kwargs.pop('af_ipv6_neighbor_address')
        allowas_in = ET.SubElement(af_ipv6_neighbor_address, "allowas-in")
        allowas_in.text = kwargs.pop('allowas_in')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_address_holder_af_ipv6_neighbor_address_activate(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_address_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-address-holder")
        af_ipv6_neighbor_address = ET.SubElement(af_ipv6_neighbor_address_holder, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key = ET.SubElement(af_ipv6_neighbor_address, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key.text = kwargs.pop('af_ipv6_neighbor_address')
        activate = ET.SubElement(af_ipv6_neighbor_address, "activate")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_address_holder_af_ipv6_neighbor_address_filter_list_direction_in_filter_list_direction_in_acl_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_address_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-address-holder")
        af_ipv6_neighbor_address = ET.SubElement(af_ipv6_neighbor_address_holder, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key = ET.SubElement(af_ipv6_neighbor_address, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key.text = kwargs.pop('af_ipv6_neighbor_address')
        filter_list = ET.SubElement(af_ipv6_neighbor_address, "filter-list")
        direction_in = ET.SubElement(filter_list, "direction-in")
        filter_list_direction_in_acl_name = ET.SubElement(direction_in, "filter-list-direction-in-acl-name")
        filter_list_direction_in_acl_name.text = kwargs.pop('filter_list_direction_in_acl_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_address_holder_af_ipv6_neighbor_address_filter_list_direction_in_filter_list_name_direction_in(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_address_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-address-holder")
        af_ipv6_neighbor_address = ET.SubElement(af_ipv6_neighbor_address_holder, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key = ET.SubElement(af_ipv6_neighbor_address, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key.text = kwargs.pop('af_ipv6_neighbor_address')
        filter_list = ET.SubElement(af_ipv6_neighbor_address, "filter-list")
        direction_in = ET.SubElement(filter_list, "direction-in")
        filter_list_name_direction_in = ET.SubElement(direction_in, "filter-list-name-direction-in")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_address_holder_af_ipv6_neighbor_address_filter_list_direction_out_filter_list_direction_out_acl_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_address_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-address-holder")
        af_ipv6_neighbor_address = ET.SubElement(af_ipv6_neighbor_address_holder, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key = ET.SubElement(af_ipv6_neighbor_address, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key.text = kwargs.pop('af_ipv6_neighbor_address')
        filter_list = ET.SubElement(af_ipv6_neighbor_address, "filter-list")
        direction_out = ET.SubElement(filter_list, "direction-out")
        filter_list_direction_out_acl_name = ET.SubElement(direction_out, "filter-list-direction-out-acl-name")
        filter_list_direction_out_acl_name.text = kwargs.pop('filter_list_direction_out_acl_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_address_holder_af_ipv6_neighbor_address_filter_list_direction_out_filter_list_name_direction_out(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_address_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-address-holder")
        af_ipv6_neighbor_address = ET.SubElement(af_ipv6_neighbor_address_holder, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key = ET.SubElement(af_ipv6_neighbor_address, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key.text = kwargs.pop('af_ipv6_neighbor_address')
        filter_list = ET.SubElement(af_ipv6_neighbor_address, "filter-list")
        direction_out = ET.SubElement(filter_list, "direction-out")
        filter_list_name_direction_out = ET.SubElement(direction_out, "filter-list-name-direction-out")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_address_holder_af_ipv6_neighbor_address_maximum_prefix_max_prefix_limit(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_address_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-address-holder")
        af_ipv6_neighbor_address = ET.SubElement(af_ipv6_neighbor_address_holder, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key = ET.SubElement(af_ipv6_neighbor_address, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key.text = kwargs.pop('af_ipv6_neighbor_address')
        maximum_prefix = ET.SubElement(af_ipv6_neighbor_address, "maximum-prefix")
        max_prefix_limit = ET.SubElement(maximum_prefix, "max-prefix-limit")
        max_prefix_limit.text = kwargs.pop('max_prefix_limit')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_address_holder_af_ipv6_neighbor_address_maximum_prefix_threshold_holder_threshold(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_address_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-address-holder")
        af_ipv6_neighbor_address = ET.SubElement(af_ipv6_neighbor_address_holder, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key = ET.SubElement(af_ipv6_neighbor_address, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key.text = kwargs.pop('af_ipv6_neighbor_address')
        maximum_prefix = ET.SubElement(af_ipv6_neighbor_address, "maximum-prefix")
        threshold_holder = ET.SubElement(maximum_prefix, "threshold-holder")
        threshold = ET.SubElement(threshold_holder, "threshold")
        threshold.text = kwargs.pop('threshold')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_address_holder_af_ipv6_neighbor_address_maximum_prefix_threshold_holder_teardown(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_address_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-address-holder")
        af_ipv6_neighbor_address = ET.SubElement(af_ipv6_neighbor_address_holder, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key = ET.SubElement(af_ipv6_neighbor_address, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key.text = kwargs.pop('af_ipv6_neighbor_address')
        maximum_prefix = ET.SubElement(af_ipv6_neighbor_address, "maximum-prefix")
        threshold_holder = ET.SubElement(maximum_prefix, "threshold-holder")
        teardown = ET.SubElement(threshold_holder, "teardown")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_address_holder_af_ipv6_neighbor_address_default_originate_default_originate_status(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_address_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-address-holder")
        af_ipv6_neighbor_address = ET.SubElement(af_ipv6_neighbor_address_holder, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key = ET.SubElement(af_ipv6_neighbor_address, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key.text = kwargs.pop('af_ipv6_neighbor_address')
        default_originate = ET.SubElement(af_ipv6_neighbor_address, "default-originate")
        default_originate_status = ET.SubElement(default_originate, "default-originate-status")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_address_holder_af_ipv6_neighbor_address_default_originate_default_originate_route_map(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_address_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-address-holder")
        af_ipv6_neighbor_address = ET.SubElement(af_ipv6_neighbor_address_holder, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key = ET.SubElement(af_ipv6_neighbor_address, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key.text = kwargs.pop('af_ipv6_neighbor_address')
        default_originate = ET.SubElement(af_ipv6_neighbor_address, "default-originate")
        default_originate_route_map = ET.SubElement(default_originate, "default-originate-route-map")
        default_originate_route_map.text = kwargs.pop('default_originate_route_map')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_address_holder_af_ipv6_neighbor_address_prefix_list_direction_in_prefix_list_direction_in_prefix_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_address_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-address-holder")
        af_ipv6_neighbor_address = ET.SubElement(af_ipv6_neighbor_address_holder, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key = ET.SubElement(af_ipv6_neighbor_address, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key.text = kwargs.pop('af_ipv6_neighbor_address')
        prefix_list = ET.SubElement(af_ipv6_neighbor_address, "prefix-list")
        direction_in = ET.SubElement(prefix_list, "direction-in")
        prefix_list_direction_in_prefix_name = ET.SubElement(direction_in, "prefix-list-direction-in-prefix-name")
        prefix_list_direction_in_prefix_name.text = kwargs.pop('prefix_list_direction_in_prefix_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_address_holder_af_ipv6_neighbor_address_prefix_list_direction_in_prefix_list_direction_in(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_address_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-address-holder")
        af_ipv6_neighbor_address = ET.SubElement(af_ipv6_neighbor_address_holder, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key = ET.SubElement(af_ipv6_neighbor_address, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key.text = kwargs.pop('af_ipv6_neighbor_address')
        prefix_list = ET.SubElement(af_ipv6_neighbor_address, "prefix-list")
        direction_in = ET.SubElement(prefix_list, "direction-in")
        prefix_list_direction_in = ET.SubElement(direction_in, "prefix-list-direction-in")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_address_holder_af_ipv6_neighbor_address_prefix_list_direction_out_prefix_list_direction_out_prefix_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_address_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-address-holder")
        af_ipv6_neighbor_address = ET.SubElement(af_ipv6_neighbor_address_holder, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key = ET.SubElement(af_ipv6_neighbor_address, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key.text = kwargs.pop('af_ipv6_neighbor_address')
        prefix_list = ET.SubElement(af_ipv6_neighbor_address, "prefix-list")
        direction_out = ET.SubElement(prefix_list, "direction-out")
        prefix_list_direction_out_prefix_name = ET.SubElement(direction_out, "prefix-list-direction-out-prefix-name")
        prefix_list_direction_out_prefix_name.text = kwargs.pop('prefix_list_direction_out_prefix_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_address_holder_af_ipv6_neighbor_address_prefix_list_direction_out_prefix_list_direction_out(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_address_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-address-holder")
        af_ipv6_neighbor_address = ET.SubElement(af_ipv6_neighbor_address_holder, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key = ET.SubElement(af_ipv6_neighbor_address, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key.text = kwargs.pop('af_ipv6_neighbor_address')
        prefix_list = ET.SubElement(af_ipv6_neighbor_address, "prefix-list")
        direction_out = ET.SubElement(prefix_list, "direction-out")
        prefix_list_direction_out = ET.SubElement(direction_out, "prefix-list-direction-out")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_address_holder_af_ipv6_neighbor_address_neighbor_route_map_neighbor_route_map_direction_in_neighbor_route_map_name_direction_in(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_address_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-address-holder")
        af_ipv6_neighbor_address = ET.SubElement(af_ipv6_neighbor_address_holder, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key = ET.SubElement(af_ipv6_neighbor_address, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key.text = kwargs.pop('af_ipv6_neighbor_address')
        neighbor_route_map = ET.SubElement(af_ipv6_neighbor_address, "neighbor-route-map")
        neighbor_route_map_direction_in = ET.SubElement(neighbor_route_map, "neighbor-route-map-direction-in")
        neighbor_route_map_name_direction_in = ET.SubElement(neighbor_route_map_direction_in, "neighbor-route-map-name-direction-in")
        neighbor_route_map_name_direction_in.text = kwargs.pop('neighbor_route_map_name_direction_in')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_address_holder_af_ipv6_neighbor_address_neighbor_route_map_neighbor_route_map_direction_out_neighbor_route_map_name_direction_out(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_address_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-address-holder")
        af_ipv6_neighbor_address = ET.SubElement(af_ipv6_neighbor_address_holder, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key = ET.SubElement(af_ipv6_neighbor_address, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key.text = kwargs.pop('af_ipv6_neighbor_address')
        neighbor_route_map = ET.SubElement(af_ipv6_neighbor_address, "neighbor-route-map")
        neighbor_route_map_direction_out = ET.SubElement(neighbor_route_map, "neighbor-route-map-direction-out")
        neighbor_route_map_name_direction_out = ET.SubElement(neighbor_route_map_direction_out, "neighbor-route-map-name-direction-out")
        neighbor_route_map_name_direction_out.text = kwargs.pop('neighbor_route_map_name_direction_out')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_address_holder_af_ipv6_neighbor_address_route_reflector_client(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_address_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-address-holder")
        af_ipv6_neighbor_address = ET.SubElement(af_ipv6_neighbor_address_holder, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key = ET.SubElement(af_ipv6_neighbor_address, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key.text = kwargs.pop('af_ipv6_neighbor_address')
        route_reflector_client = ET.SubElement(af_ipv6_neighbor_address, "route-reflector-client")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_address_holder_af_ipv6_neighbor_address_unsuppress_map_map_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_address_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-address-holder")
        af_ipv6_neighbor_address = ET.SubElement(af_ipv6_neighbor_address_holder, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key = ET.SubElement(af_ipv6_neighbor_address, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key.text = kwargs.pop('af_ipv6_neighbor_address')
        unsuppress_map = ET.SubElement(af_ipv6_neighbor_address, "unsuppress-map")
        map_name = ET.SubElement(unsuppress_map, "map-name")
        map_name.text = kwargs.pop('map_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_ipv6_neighbor_address_holder_af_ipv6_neighbor_address_af_nei_weight(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_ipv6_neighbor_address_holder = ET.SubElement(ipv6_unicast, "af-ipv6-neighbor-address-holder")
        af_ipv6_neighbor_address = ET.SubElement(af_ipv6_neighbor_address_holder, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key = ET.SubElement(af_ipv6_neighbor_address, "af-ipv6-neighbor-address")
        af_ipv6_neighbor_address_key.text = kwargs.pop('af_ipv6_neighbor_address')
        af_nei_weight = ET.SubElement(af_ipv6_neighbor_address, "af-nei-weight")
        af_nei_weight.text = kwargs.pop('af_nei_weight')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_common_cmds_holder_maximum_paths_load_sharing_value(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_common_cmds_holder = ET.SubElement(ipv6_unicast, "af-common-cmds-holder")
        maximum_paths = ET.SubElement(af_common_cmds_holder, "maximum-paths")
        load_sharing_value = ET.SubElement(maximum_paths, "load-sharing-value")
        load_sharing_value.text = kwargs.pop('load_sharing_value')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_common_cmds_holder_maximum_paths_ebgp(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_common_cmds_holder = ET.SubElement(ipv6_unicast, "af-common-cmds-holder")
        maximum_paths = ET.SubElement(af_common_cmds_holder, "maximum-paths")
        ebgp = ET.SubElement(maximum_paths, "ebgp")
        ebgp.text = kwargs.pop('ebgp')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_common_cmds_holder_maximum_paths_ibgp(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_common_cmds_holder = ET.SubElement(ipv6_unicast, "af-common-cmds-holder")
        maximum_paths = ET.SubElement(af_common_cmds_holder, "maximum-paths")
        ibgp = ET.SubElement(maximum_paths, "ibgp")
        ibgp.text = kwargs.pop('ibgp')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_common_cmds_holder_maximum_paths_use_load_sharing(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_common_cmds_holder = ET.SubElement(ipv6_unicast, "af-common-cmds-holder")
        maximum_paths = ET.SubElement(af_common_cmds_holder, "maximum-paths")
        use_load_sharing = ET.SubElement(maximum_paths, "use-load-sharing")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_common_cmds_holder_multipath_multipath_ebgp(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_common_cmds_holder = ET.SubElement(ipv6_unicast, "af-common-cmds-holder")
        multipath = ET.SubElement(af_common_cmds_holder, "multipath")
        multipath_ebgp = ET.SubElement(multipath, "multipath_ebgp")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_common_cmds_holder_multipath_multipath_ibgp(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_common_cmds_holder = ET.SubElement(ipv6_unicast, "af-common-cmds-holder")
        multipath = ET.SubElement(af_common_cmds_holder, "multipath")
        multipath_ibgp = ET.SubElement(multipath, "multipath_ibgp")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_common_cmds_holder_multipath_multi_as(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_common_cmds_holder = ET.SubElement(ipv6_unicast, "af-common-cmds-holder")
        multipath = ET.SubElement(af_common_cmds_holder, "multipath")
        multi_as = ET.SubElement(multipath, "multi-as")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_common_cmds_holder_always_propagate(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_common_cmds_holder = ET.SubElement(ipv6_unicast, "af-common-cmds-holder")
        always_propagate = ET.SubElement(af_common_cmds_holder, "always-propagate")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_common_cmds_holder_default_information_originate(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_common_cmds_holder = ET.SubElement(ipv6_unicast, "af-common-cmds-holder")
        default_information_originate = ET.SubElement(af_common_cmds_holder, "default-information-originate")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_common_cmds_holder_rib_route_limit(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_common_cmds_holder = ET.SubElement(ipv6_unicast, "af-common-cmds-holder")
        rib_route_limit = ET.SubElement(af_common_cmds_holder, "rib-route-limit")
        rib_route_limit.text = kwargs.pop('rib_route_limit')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_common_cmds_holder_client_to_client_reflection(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_common_cmds_holder = ET.SubElement(ipv6_unicast, "af-common-cmds-holder")
        client_to_client_reflection = ET.SubElement(af_common_cmds_holder, "client-to-client-reflection")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_common_cmds_holder_dampening_ch_dampening_source_ca_dampening_flag_dampening_flag(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_common_cmds_holder = ET.SubElement(ipv6_unicast, "af-common-cmds-holder")
        dampening = ET.SubElement(af_common_cmds_holder, "dampening")
        ch_dampening_source = ET.SubElement(dampening, "ch-dampening-source")
        ca_dampening_flag = ET.SubElement(ch_dampening_source, "ca-dampening-flag")
        dampening_flag = ET.SubElement(ca_dampening_flag, "dampening-flag")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_common_cmds_holder_dampening_ch_dampening_source_ca_dampening_specify_values_values_half_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_common_cmds_holder = ET.SubElement(ipv6_unicast, "af-common-cmds-holder")
        dampening = ET.SubElement(af_common_cmds_holder, "dampening")
        ch_dampening_source = ET.SubElement(dampening, "ch-dampening-source")
        ca_dampening_specify_values = ET.SubElement(ch_dampening_source, "ca-dampening-specify-values")
        values = ET.SubElement(ca_dampening_specify_values, "values")
        half_time = ET.SubElement(values, "half-time")
        half_time.text = kwargs.pop('half_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_common_cmds_holder_dampening_ch_dampening_source_ca_dampening_specify_values_values_reuse_value(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_common_cmds_holder = ET.SubElement(ipv6_unicast, "af-common-cmds-holder")
        dampening = ET.SubElement(af_common_cmds_holder, "dampening")
        ch_dampening_source = ET.SubElement(dampening, "ch-dampening-source")
        ca_dampening_specify_values = ET.SubElement(ch_dampening_source, "ca-dampening-specify-values")
        values = ET.SubElement(ca_dampening_specify_values, "values")
        reuse_value = ET.SubElement(values, "reuse-value")
        reuse_value.text = kwargs.pop('reuse_value')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_common_cmds_holder_dampening_ch_dampening_source_ca_dampening_specify_values_values_start_suppress_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_common_cmds_holder = ET.SubElement(ipv6_unicast, "af-common-cmds-holder")
        dampening = ET.SubElement(af_common_cmds_holder, "dampening")
        ch_dampening_source = ET.SubElement(dampening, "ch-dampening-source")
        ca_dampening_specify_values = ET.SubElement(ch_dampening_source, "ca-dampening-specify-values")
        values = ET.SubElement(ca_dampening_specify_values, "values")
        start_suppress_time = ET.SubElement(values, "start-suppress-time")
        start_suppress_time.text = kwargs.pop('start_suppress_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_common_cmds_holder_dampening_ch_dampening_source_ca_dampening_specify_values_values_max_suppress_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_common_cmds_holder = ET.SubElement(ipv6_unicast, "af-common-cmds-holder")
        dampening = ET.SubElement(af_common_cmds_holder, "dampening")
        ch_dampening_source = ET.SubElement(dampening, "ch-dampening-source")
        ca_dampening_specify_values = ET.SubElement(ch_dampening_source, "ca-dampening-specify-values")
        values = ET.SubElement(ca_dampening_specify_values, "values")
        max_suppress_time = ET.SubElement(values, "max-suppress-time")
        max_suppress_time.text = kwargs.pop('max_suppress_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_common_cmds_holder_dampening_ch_dampening_source_ca_dampening_route_map_dampening_route_map(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_common_cmds_holder = ET.SubElement(ipv6_unicast, "af-common-cmds-holder")
        dampening = ET.SubElement(af_common_cmds_holder, "dampening")
        ch_dampening_source = ET.SubElement(dampening, "ch-dampening-source")
        ca_dampening_route_map = ET.SubElement(ch_dampening_source, "ca-dampening-route-map")
        dampening_route_map = ET.SubElement(ca_dampening_route_map, "dampening-route-map")
        dampening_route_map.text = kwargs.pop('dampening_route_map')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_common_cmds_holder_default_metric(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_common_cmds_holder = ET.SubElement(ipv6_unicast, "af-common-cmds-holder")
        default_metric = ET.SubElement(af_common_cmds_holder, "default-metric")
        default_metric.text = kwargs.pop('default_metric')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_common_cmds_holder_next_hop_enable_default(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_common_cmds_holder = ET.SubElement(ipv6_unicast, "af-common-cmds-holder")
        next_hop_enable_default = ET.SubElement(af_common_cmds_holder, "next-hop-enable-default")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_common_cmds_holder_table_map_table_map_route_map(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_common_cmds_holder = ET.SubElement(ipv6_unicast, "af-common-cmds-holder")
        table_map = ET.SubElement(af_common_cmds_holder, "table-map")
        table_map_route_map = ET.SubElement(table_map, "table-map-route-map")
        table_map_route_map.text = kwargs.pop('table_map_route_map')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_common_cmds_holder_update_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_common_cmds_holder = ET.SubElement(ipv6_unicast, "af-common-cmds-holder")
        update_time = ET.SubElement(af_common_cmds_holder, "update-time")
        update_time.text = kwargs.pop('update_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_common_cmds_holder_graceful_restart_graceful_restart_status(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_common_cmds_holder = ET.SubElement(ipv6_unicast, "af-common-cmds-holder")
        graceful_restart = ET.SubElement(af_common_cmds_holder, "graceful-restart")
        graceful_restart_status = ET.SubElement(graceful_restart, "graceful-restart-status")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_common_cmds_holder_graceful_restart_restart_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_common_cmds_holder = ET.SubElement(ipv6_unicast, "af-common-cmds-holder")
        graceful_restart = ET.SubElement(af_common_cmds_holder, "graceful-restart")
        restart_time = ET.SubElement(graceful_restart, "restart-time")
        restart_time.text = kwargs.pop('restart_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_common_cmds_holder_graceful_restart_purge_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_common_cmds_holder = ET.SubElement(ipv6_unicast, "af-common-cmds-holder")
        graceful_restart = ET.SubElement(af_common_cmds_holder, "graceful-restart")
        purge_time = ET.SubElement(graceful_restart, "purge-time")
        purge_time.text = kwargs.pop('purge_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_af_common_cmds_holder_graceful_restart_stale_routes_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        af_common_cmds_holder = ET.SubElement(ipv6_unicast, "af-common-cmds-holder")
        graceful_restart = ET.SubElement(af_common_cmds_holder, "graceful-restart")
        stale_routes_time = ET.SubElement(graceful_restart, "stale-routes-time")
        stale_routes_time.text = kwargs.pop('stale_routes_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_bgp_router_bgp_cmds_holder_address_family_ipv6_ipv6_unicast_ipv6_ucast_next_hop_recursion(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        bgp = ET.SubElement(router, "bgp", xmlns="urn:brocade.com:mgmt:brocade-bgp")
        vrf_name_key = ET.SubElement(bgp, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        router_bgp_cmds_holder = ET.SubElement(bgp, "router-bgp-cmds-holder")
        address_family = ET.SubElement(router_bgp_cmds_holder, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        ipv6_unicast = ET.SubElement(ipv6, "ipv6-unicast")
        ipv6_ucast_next_hop_recursion = ET.SubElement(ipv6_unicast, "ipv6-ucast-next-hop-recursion")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_vrf(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf = ET.SubElement(ospf, "vrf")
        vrf.text = kwargs.pop('vrf')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_database_overflow_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        database_overflow_interval = ET.SubElement(ospf, "database-overflow-interval")
        database_overflow_interval.text = kwargs.pop('database_overflow_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_default_information_originate_always(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        default_information_originate = ET.SubElement(ospf, "default-information-originate")
        always = ET.SubElement(default_information_originate, "always")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_default_information_originate_def_orig_metric(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        default_information_originate = ET.SubElement(ospf, "default-information-originate")
        def_orig_metric = ET.SubElement(default_information_originate, "def-orig-metric")
        def_orig_metric.text = kwargs.pop('def_orig_metric')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_default_information_originate_def_orig_metric_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        default_information_originate = ET.SubElement(ospf, "default-information-originate")
        def_orig_metric_type = ET.SubElement(default_information_originate, "def-orig-metric-type")
        def_orig_metric_type.text = kwargs.pop('def_orig_metric_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_default_information_originate_def_orig_route_map(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        default_information_originate = ET.SubElement(ospf, "default-information-originate")
        def_orig_route_map = ET.SubElement(default_information_originate, "def-orig-route-map")
        def_orig_route_map.text = kwargs.pop('def_orig_route_map')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_default_passive_interface(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        default_passive_interface = ET.SubElement(ospf, "default-passive-interface")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_default_metric(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        default_metric = ET.SubElement(ospf, "default-metric")
        default_metric.text = kwargs.pop('default_metric')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_external_lsdb_limit(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        external_lsdb_limit = ET.SubElement(ospf, "external-lsdb-limit")
        external_lsdb_limit.text = kwargs.pop('external_lsdb_limit')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_log_adjacency_dr_only(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        log = ET.SubElement(ospf, "log")
        adjacency = ET.SubElement(log, "adjacency")
        dr_only = ET.SubElement(adjacency, "dr-only")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_log_log_all(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        log = ET.SubElement(ospf, "log")
        log_all = ET.SubElement(log, "log-all")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_log_bad_packet_log_checksum(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        log = ET.SubElement(ospf, "log")
        bad_packet = ET.SubElement(log, "bad-packet")
        log_checksum = ET.SubElement(bad_packet, "log-checksum")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_log_log_database(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        log = ET.SubElement(ospf, "log")
        log_database = ET.SubElement(log, "log-database")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_log_log_retransmit(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        log = ET.SubElement(ospf, "log")
        log_retransmit = ET.SubElement(log, "log-retransmit")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_ospf_metric_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        ospf_metric_type = ET.SubElement(ospf, "ospf-metric-type")
        ospf_metric_type.text = kwargs.pop('ospf_metric_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_neighbor_neighbor_addr(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        neighbor = ET.SubElement(ospf, "neighbor")
        neighbor_addr = ET.SubElement(neighbor, "neighbor-addr")
        neighbor_addr.text = kwargs.pop('neighbor_addr')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_nssa_translator_nssa_translator_flag(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        nssa_translator = ET.SubElement(ospf, "nssa-translator")
        nssa_translator_flag = ET.SubElement(nssa_translator, "nssa-translator-flag")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_redistribute_connected_connected_route_map(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        redistribute = ET.SubElement(ospf, "redistribute")
        connected = ET.SubElement(redistribute, "connected")
        connected_route_map = ET.SubElement(connected, "connected-route-map")
        connected_route_map.text = kwargs.pop('connected_route_map')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_redistribute_static_static_route_map(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        redistribute = ET.SubElement(ospf, "redistribute")
        static = ET.SubElement(redistribute, "static")
        static_route_map = ET.SubElement(static, "static-route-map")
        static_route_map.text = kwargs.pop('static_route_map')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_redistribute_bgp_bgp_route_map(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        redistribute = ET.SubElement(ospf, "redistribute")
        bgp = ET.SubElement(redistribute, "bgp")
        bgp_route_map = ET.SubElement(bgp, "bgp-route-map")
        bgp_route_map.text = kwargs.pop('bgp_route_map')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_redistribute_redistribute_ospf_ospf_route_map(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        redistribute = ET.SubElement(ospf, "redistribute")
        redistribute_ospf = ET.SubElement(redistribute, "redistribute-ospf")
        ospf_route_map = ET.SubElement(redistribute_ospf, "ospf-route-map")
        ospf_route_map.text = kwargs.pop('ospf_route_map')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_rfc1583_compatibility_rfc1583_compatibility_flag(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        rfc1583_compatibility = ET.SubElement(ospf, "rfc1583-compatibility")
        rfc1583_compatibility_flag = ET.SubElement(rfc1583_compatibility, "rfc1583-compatibility-flag")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_area_area_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id = ET.SubElement(area, "area-id")
        area_id.text = kwargs.pop('area_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_area_normal(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        normal = ET.SubElement(area, "normal")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_area_nssa_metric_nssa_value(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        nssa = ET.SubElement(area, "nssa")
        metric = ET.SubElement(nssa, "metric")
        nssa_value = ET.SubElement(metric, "nssa-value")
        nssa_value.text = kwargs.pop('nssa_value')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_area_nssa_metric_no_summary1(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        nssa = ET.SubElement(area, "nssa")
        metric = ET.SubElement(nssa, "metric")
        no_summary1 = ET.SubElement(metric, "no-summary1")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_area_nssa_default_information_originate(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        nssa = ET.SubElement(area, "nssa")
        default_information_originate = ET.SubElement(nssa, "default-information-originate")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_area_range_range_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        range = ET.SubElement(area, "range")
        range_mask_key = ET.SubElement(range, "range-mask")
        range_mask_key.text = kwargs.pop('range_mask')
        range_address = ET.SubElement(range, "range-address")
        range_address.text = kwargs.pop('range_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_area_range_range_mask(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        range = ET.SubElement(area, "range")
        range_address_key = ET.SubElement(range, "range-address")
        range_address_key.text = kwargs.pop('range_address')
        range_mask = ET.SubElement(range, "range-mask")
        range_mask.text = kwargs.pop('range_mask')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_area_range_range_effect(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        range = ET.SubElement(area, "range")
        range_address_key = ET.SubElement(range, "range-address")
        range_address_key.text = kwargs.pop('range_address')
        range_mask_key = ET.SubElement(range, "range-mask")
        range_mask_key.text = kwargs.pop('range_mask')
        range_effect = ET.SubElement(range, "range-effect")
        range_effect.text = kwargs.pop('range_effect')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_area_range_range_cost(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        range = ET.SubElement(area, "range")
        range_address_key = ET.SubElement(range, "range-address")
        range_address_key.text = kwargs.pop('range_address')
        range_mask_key = ET.SubElement(range, "range-mask")
        range_mask_key.text = kwargs.pop('range_mask')
        range_cost = ET.SubElement(range, "range-cost")
        range_cost.text = kwargs.pop('range_cost')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_area_stub_metric_stub_value(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        stub = ET.SubElement(area, "stub")
        metric = ET.SubElement(stub, "metric")
        stub_value = ET.SubElement(metric, "stub-value")
        stub_value.text = kwargs.pop('stub_value')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_area_stub_metric_no_summary(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        stub = ET.SubElement(area, "stub")
        metric = ET.SubElement(stub, "metric")
        no_summary = ET.SubElement(metric, "no-summary")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_area_virtual_link_virt_link_neighbor(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        virtual_link = ET.SubElement(area, "virtual-link")
        virt_link_neighbor = ET.SubElement(virtual_link, "virt-link-neighbor")
        virt_link_neighbor.text = kwargs.pop('virt_link_neighbor')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_area_virtual_link_authentication_key_no_encrypt_auth_key_table_no_encrypt_auth_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        virtual_link = ET.SubElement(area, "virtual-link")
        virt_link_neighbor_key = ET.SubElement(virtual_link, "virt-link-neighbor")
        virt_link_neighbor_key.text = kwargs.pop('virt_link_neighbor')
        authentication_key = ET.SubElement(virtual_link, "authentication-key")
        no_encrypt_auth_key_table = ET.SubElement(authentication_key, "no-encrypt-auth-key-table")
        no_encrypt_auth_key = ET.SubElement(no_encrypt_auth_key_table, "no-encrypt-auth-key")
        no_encrypt_auth_key.text = kwargs.pop('no_encrypt_auth_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_area_virtual_link_authentication_key_auth_key_table_encrypttype(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        virtual_link = ET.SubElement(area, "virtual-link")
        virt_link_neighbor_key = ET.SubElement(virtual_link, "virt-link-neighbor")
        virt_link_neighbor_key.text = kwargs.pop('virt_link_neighbor')
        authentication_key = ET.SubElement(virtual_link, "authentication-key")
        auth_key_table = ET.SubElement(authentication_key, "auth-key-table")
        encrypttype = ET.SubElement(auth_key_table, "encrypttype")
        encrypttype.text = kwargs.pop('encrypttype')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_area_virtual_link_authentication_key_auth_key_table_auth_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        virtual_link = ET.SubElement(area, "virtual-link")
        virt_link_neighbor_key = ET.SubElement(virtual_link, "virt-link-neighbor")
        virt_link_neighbor_key.text = kwargs.pop('virt_link_neighbor')
        authentication_key = ET.SubElement(virtual_link, "authentication-key")
        auth_key_table = ET.SubElement(authentication_key, "auth-key-table")
        auth_key = ET.SubElement(auth_key_table, "auth-key")
        auth_key.text = kwargs.pop('auth_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_area_virtual_link_dead_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        virtual_link = ET.SubElement(area, "virtual-link")
        virt_link_neighbor_key = ET.SubElement(virtual_link, "virt-link-neighbor")
        virt_link_neighbor_key.text = kwargs.pop('virt_link_neighbor')
        dead_interval = ET.SubElement(virtual_link, "dead-interval")
        dead_interval.text = kwargs.pop('dead_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_area_virtual_link_hello_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        virtual_link = ET.SubElement(area, "virtual-link")
        virt_link_neighbor_key = ET.SubElement(virtual_link, "virt-link-neighbor")
        virt_link_neighbor_key.text = kwargs.pop('virt_link_neighbor')
        hello_interval = ET.SubElement(virtual_link, "hello-interval")
        hello_interval.text = kwargs.pop('hello_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_area_virtual_link_retransmit_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        virtual_link = ET.SubElement(area, "virtual-link")
        virt_link_neighbor_key = ET.SubElement(virtual_link, "virt-link-neighbor")
        virt_link_neighbor_key.text = kwargs.pop('virt_link_neighbor')
        retransmit_interval = ET.SubElement(virtual_link, "retransmit-interval")
        retransmit_interval.text = kwargs.pop('retransmit_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_area_virtual_link_transmit_delay(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        virtual_link = ET.SubElement(area, "virtual-link")
        virt_link_neighbor_key = ET.SubElement(virtual_link, "virt-link-neighbor")
        virt_link_neighbor_key.text = kwargs.pop('virt_link_neighbor')
        transmit_delay = ET.SubElement(virtual_link, "transmit-delay")
        transmit_delay.text = kwargs.pop('transmit_delay')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_area_virtual_link_md5_authentication_key_activation_wait_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        virtual_link = ET.SubElement(area, "virtual-link")
        virt_link_neighbor_key = ET.SubElement(virtual_link, "virt-link-neighbor")
        virt_link_neighbor_key.text = kwargs.pop('virt_link_neighbor')
        md5_authentication = ET.SubElement(virtual_link, "md5-authentication")
        key_activation_wait_time = ET.SubElement(md5_authentication, "key-activation-wait-time")
        key_activation_wait_time.text = kwargs.pop('key_activation_wait_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_area_virtual_link_md5_authentication_no_encrypt_key_table_no_encrypt_key_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        virtual_link = ET.SubElement(area, "virtual-link")
        virt_link_neighbor_key = ET.SubElement(virtual_link, "virt-link-neighbor")
        virt_link_neighbor_key.text = kwargs.pop('virt_link_neighbor')
        md5_authentication = ET.SubElement(virtual_link, "md5-authentication")
        no_encrypt_key_table = ET.SubElement(md5_authentication, "no-encrypt-key-table")
        no_encrypt_key_id = ET.SubElement(no_encrypt_key_table, "no-encrypt-key-id")
        no_encrypt_key_id.text = kwargs.pop('no_encrypt_key_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_area_virtual_link_md5_authentication_no_encrypt_key_table_no_encrypt_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        virtual_link = ET.SubElement(area, "virtual-link")
        virt_link_neighbor_key = ET.SubElement(virtual_link, "virt-link-neighbor")
        virt_link_neighbor_key.text = kwargs.pop('virt_link_neighbor')
        md5_authentication = ET.SubElement(virtual_link, "md5-authentication")
        no_encrypt_key_table = ET.SubElement(md5_authentication, "no-encrypt-key-table")
        no_encrypt_key = ET.SubElement(no_encrypt_key_table, "no-encrypt-key")
        no_encrypt_key.text = kwargs.pop('no_encrypt_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_area_virtual_link_md5_authentication_key_table_key_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        virtual_link = ET.SubElement(area, "virtual-link")
        virt_link_neighbor_key = ET.SubElement(virtual_link, "virt-link-neighbor")
        virt_link_neighbor_key.text = kwargs.pop('virt_link_neighbor')
        md5_authentication = ET.SubElement(virtual_link, "md5-authentication")
        key_table = ET.SubElement(md5_authentication, "key-table")
        key_id = ET.SubElement(key_table, "key-id")
        key_id.text = kwargs.pop('key_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_area_virtual_link_md5_authentication_key_table_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        virtual_link = ET.SubElement(area, "virtual-link")
        virt_link_neighbor_key = ET.SubElement(virtual_link, "virt-link-neighbor")
        virt_link_neighbor_key.text = kwargs.pop('virt_link_neighbor')
        md5_authentication = ET.SubElement(virtual_link, "md5-authentication")
        key_table = ET.SubElement(md5_authentication, "key-table")
        key = ET.SubElement(key_table, "key")
        key.text = kwargs.pop('key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_area_virtual_link_md5_authentication_key_table_md5_authentication_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        area = ET.SubElement(ospf, "area")
        area_id_key = ET.SubElement(area, "area-id")
        area_id_key.text = kwargs.pop('area_id')
        virtual_link = ET.SubElement(area, "virtual-link")
        virt_link_neighbor_key = ET.SubElement(virtual_link, "virt-link-neighbor")
        virt_link_neighbor_key.text = kwargs.pop('virt_link_neighbor')
        md5_authentication = ET.SubElement(virtual_link, "md5-authentication")
        key_table = ET.SubElement(md5_authentication, "key-table")
        md5_authentication_key = ET.SubElement(key_table, "md5-authentication-key")
        md5_authentication_key.text = kwargs.pop('md5_authentication_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_auto_cost_reference_bandwidth_ref_bandwidth(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        auto_cost = ET.SubElement(ospf, "auto-cost")
        reference_bandwidth = ET.SubElement(auto_cost, "reference-bandwidth")
        ref_bandwidth = ET.SubElement(reference_bandwidth, "ref-bandwidth")
        ref_bandwidth.text = kwargs.pop('ref_bandwidth')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_auto_cost_reference_bandwidth_use_active_ports(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        auto_cost = ET.SubElement(ospf, "auto-cost")
        reference_bandwidth = ET.SubElement(auto_cost, "reference-bandwidth")
        use_active_ports = ET.SubElement(reference_bandwidth, "use-active-ports")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_distance_route_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        distance = ET.SubElement(ospf, "distance")
        route_type = ET.SubElement(distance, "route-type")
        route_type.text = kwargs.pop('route_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_distance_dist_value(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        distance = ET.SubElement(ospf, "distance")
        route_type_key = ET.SubElement(distance, "route-type")
        route_type_key.text = kwargs.pop('route_type')
        dist_value = ET.SubElement(distance, "dist-value")
        dist_value.text = kwargs.pop('dist_value')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_distribute_list_route_map_route_map(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        distribute_list = ET.SubElement(ospf, "distribute-list")
        route_map = ET.SubElement(distribute_list, "route-map")
        route_map = ET.SubElement(route_map, "route-map")
        route_map.text = kwargs.pop('route_map')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_distribute_list_route_map_in_cg(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        distribute_list = ET.SubElement(ospf, "distribute-list")
        route_map = ET.SubElement(distribute_list, "route-map")
        in_cg = ET.SubElement(route_map, "in")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_max_metric_router_lsa_all_vrfs(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        max_metric = ET.SubElement(ospf, "max-metric")
        router_lsa = ET.SubElement(max_metric, "router-lsa")
        all_vrfs = ET.SubElement(router_lsa, "all-vrfs")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_max_metric_router_lsa_all_lsas(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        max_metric = ET.SubElement(ospf, "max-metric")
        router_lsa = ET.SubElement(max_metric, "router-lsa")
        all_lsas = ET.SubElement(router_lsa, "all-lsas")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_max_metric_router_lsa_external_lsa_external_lsa_val(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        max_metric = ET.SubElement(ospf, "max-metric")
        router_lsa = ET.SubElement(max_metric, "router-lsa")
        external_lsa = ET.SubElement(router_lsa, "external-lsa")
        external_lsa_val = ET.SubElement(external_lsa, "external-lsa-val")
        external_lsa_val.text = kwargs.pop('external_lsa_val')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_max_metric_router_lsa_summary_lsa_summary_lsa_val(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        max_metric = ET.SubElement(ospf, "max-metric")
        router_lsa = ET.SubElement(max_metric, "router-lsa")
        summary_lsa = ET.SubElement(router_lsa, "summary-lsa")
        summary_lsa_val = ET.SubElement(summary_lsa, "summary-lsa-val")
        summary_lsa_val.text = kwargs.pop('summary_lsa_val')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_max_metric_router_lsa_link_all(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        max_metric = ET.SubElement(ospf, "max-metric")
        router_lsa = ET.SubElement(max_metric, "router-lsa")
        link = ET.SubElement(router_lsa, "link")
        all = ET.SubElement(link, "all")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_max_metric_router_lsa_link_ptp(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        max_metric = ET.SubElement(ospf, "max-metric")
        router_lsa = ET.SubElement(max_metric, "router-lsa")
        link = ET.SubElement(router_lsa, "link")
        ptp = ET.SubElement(link, "ptp")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_max_metric_router_lsa_link_stub(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        max_metric = ET.SubElement(ospf, "max-metric")
        router_lsa = ET.SubElement(max_metric, "router-lsa")
        link = ET.SubElement(router_lsa, "link")
        stub = ET.SubElement(link, "stub")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_max_metric_router_lsa_link_transit(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        max_metric = ET.SubElement(ospf, "max-metric")
        router_lsa = ET.SubElement(max_metric, "router-lsa")
        link = ET.SubElement(router_lsa, "link")
        transit = ET.SubElement(link, "transit")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_max_metric_router_lsa_on_startup_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        max_metric = ET.SubElement(ospf, "max-metric")
        router_lsa = ET.SubElement(max_metric, "router-lsa")
        on_startup = ET.SubElement(router_lsa, "on-startup")
        time = ET.SubElement(on_startup, "time")
        time.text = kwargs.pop('time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_max_metric_router_lsa_on_startup_wait_for_bgp(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        max_metric = ET.SubElement(ospf, "max-metric")
        router_lsa = ET.SubElement(max_metric, "router-lsa")
        on_startup = ET.SubElement(router_lsa, "on-startup")
        wait_for_bgp = ET.SubElement(on_startup, "wait-for-bgp")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_max_metric_router_lsa_on_startup_all_lsas_onstartup(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        max_metric = ET.SubElement(ospf, "max-metric")
        router_lsa = ET.SubElement(max_metric, "router-lsa")
        on_startup = ET.SubElement(router_lsa, "on-startup")
        all_lsas_onstartup = ET.SubElement(on_startup, "all-lsas-onstartup")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_max_metric_router_lsa_on_startup_external_lsa_onstartup_external_lsa_val_onstartup(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        max_metric = ET.SubElement(ospf, "max-metric")
        router_lsa = ET.SubElement(max_metric, "router-lsa")
        on_startup = ET.SubElement(router_lsa, "on-startup")
        external_lsa_onstartup = ET.SubElement(on_startup, "external-lsa-onstartup")
        external_lsa_val_onstartup = ET.SubElement(external_lsa_onstartup, "external-lsa-val-onstartup")
        external_lsa_val_onstartup.text = kwargs.pop('external_lsa_val_onstartup')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_max_metric_router_lsa_on_startup_summary_lsa_onstartup_summary_lsa_val_onstartup(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        max_metric = ET.SubElement(ospf, "max-metric")
        router_lsa = ET.SubElement(max_metric, "router-lsa")
        on_startup = ET.SubElement(router_lsa, "on-startup")
        summary_lsa_onstartup = ET.SubElement(on_startup, "summary-lsa-onstartup")
        summary_lsa_val_onstartup = ET.SubElement(summary_lsa_onstartup, "summary-lsa-val-onstartup")
        summary_lsa_val_onstartup.text = kwargs.pop('summary_lsa_val_onstartup')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_max_metric_router_lsa_on_startup_link_onstartup_all_link_onstartup(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        max_metric = ET.SubElement(ospf, "max-metric")
        router_lsa = ET.SubElement(max_metric, "router-lsa")
        on_startup = ET.SubElement(router_lsa, "on-startup")
        link_onstartup = ET.SubElement(on_startup, "link-onstartup")
        all_link_onstartup = ET.SubElement(link_onstartup, "all-link-onstartup")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_max_metric_router_lsa_on_startup_link_onstartup_ptp_link_onstartup(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        max_metric = ET.SubElement(ospf, "max-metric")
        router_lsa = ET.SubElement(max_metric, "router-lsa")
        on_startup = ET.SubElement(router_lsa, "on-startup")
        link_onstartup = ET.SubElement(on_startup, "link-onstartup")
        ptp_link_onstartup = ET.SubElement(link_onstartup, "ptp-link-onstartup")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_max_metric_router_lsa_on_startup_link_onstartup_stub_link_onstartup(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        max_metric = ET.SubElement(ospf, "max-metric")
        router_lsa = ET.SubElement(max_metric, "router-lsa")
        on_startup = ET.SubElement(router_lsa, "on-startup")
        link_onstartup = ET.SubElement(on_startup, "link-onstartup")
        stub_link_onstartup = ET.SubElement(link_onstartup, "stub-link-onstartup")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_max_metric_router_lsa_on_startup_link_onstartup_transit_link_onstartup(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        max_metric = ET.SubElement(ospf, "max-metric")
        router_lsa = ET.SubElement(max_metric, "router-lsa")
        on_startup = ET.SubElement(router_lsa, "on-startup")
        link_onstartup = ET.SubElement(on_startup, "link-onstartup")
        transit_link_onstartup = ET.SubElement(link_onstartup, "transit-link-onstartup")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_summary_address_sum_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        summary_address = ET.SubElement(ospf, "summary-address")
        sum_address_mask_key = ET.SubElement(summary_address, "sum-address-mask")
        sum_address_mask_key.text = kwargs.pop('sum_address_mask')
        sum_address = ET.SubElement(summary_address, "sum-address")
        sum_address.text = kwargs.pop('sum_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_summary_address_sum_address_mask(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        summary_address = ET.SubElement(ospf, "summary-address")
        sum_address_key = ET.SubElement(summary_address, "sum-address")
        sum_address_key.text = kwargs.pop('sum_address')
        sum_address_mask = ET.SubElement(summary_address, "sum-address-mask")
        sum_address_mask.text = kwargs.pop('sum_address_mask')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_timers_lsa_group_pacing(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        timers = ET.SubElement(ospf, "timers")
        lsa_group_pacing = ET.SubElement(timers, "lsa-group-pacing")
        lsa_group_pacing.text = kwargs.pop('lsa_group_pacing')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_timers_throttle_spf_init_delay(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        timers = ET.SubElement(ospf, "timers")
        throttle = ET.SubElement(timers, "throttle")
        spf = ET.SubElement(throttle, "spf")
        init_delay = ET.SubElement(spf, "init-delay")
        init_delay.text = kwargs.pop('init_delay')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_timers_throttle_spf_hold_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        timers = ET.SubElement(ospf, "timers")
        throttle = ET.SubElement(timers, "throttle")
        spf = ET.SubElement(throttle, "spf")
        hold_time = ET.SubElement(spf, "hold-time")
        hold_time.text = kwargs.pop('hold_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_timers_throttle_spf_max_hold_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        timers = ET.SubElement(ospf, "timers")
        throttle = ET.SubElement(timers, "throttle")
        spf = ET.SubElement(throttle, "spf")
        max_hold_time = ET.SubElement(spf, "max-hold-time")
        max_hold_time.text = kwargs.pop('max_hold_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_permit_redistribute_redist_value(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        permit = ET.SubElement(ospf, "permit")
        redistribute = ET.SubElement(permit, "redistribute")
        route_option_key = ET.SubElement(redistribute, "route-option")
        route_option_key.text = kwargs.pop('route_option')
        redist_value = ET.SubElement(redistribute, "redist-value")
        redist_value.text = kwargs.pop('redist_value')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_permit_redistribute_route_option(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        permit = ET.SubElement(ospf, "permit")
        redistribute = ET.SubElement(permit, "redistribute")
        redist_value_key = ET.SubElement(redistribute, "redist-value")
        redist_value_key.text = kwargs.pop('redist_value')
        route_option = ET.SubElement(redistribute, "route-option")
        route_option.text = kwargs.pop('route_option')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_permit_redistribute_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        permit = ET.SubElement(ospf, "permit")
        redistribute = ET.SubElement(permit, "redistribute")
        redist_value_key = ET.SubElement(redistribute, "redist-value")
        redist_value_key.text = kwargs.pop('redist_value')
        route_option_key = ET.SubElement(redistribute, "route-option")
        route_option_key.text = kwargs.pop('route_option')
        address = ET.SubElement(redistribute, "address")
        address.text = kwargs.pop('address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_permit_redistribute_mask(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        permit = ET.SubElement(ospf, "permit")
        redistribute = ET.SubElement(permit, "redistribute")
        redist_value_key = ET.SubElement(redistribute, "redist-value")
        redist_value_key.text = kwargs.pop('redist_value')
        route_option_key = ET.SubElement(redistribute, "route-option")
        route_option_key.text = kwargs.pop('route_option')
        mask = ET.SubElement(redistribute, "mask")
        mask.text = kwargs.pop('mask')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_permit_redistribute_set_metric_val(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        permit = ET.SubElement(ospf, "permit")
        redistribute = ET.SubElement(permit, "redistribute")
        redist_value_key = ET.SubElement(redistribute, "redist-value")
        redist_value_key.text = kwargs.pop('redist_value')
        route_option_key = ET.SubElement(redistribute, "route-option")
        route_option_key.text = kwargs.pop('route_option')
        set_metric_val = ET.SubElement(redistribute, "set-metric-val")
        set_metric_val.text = kwargs.pop('set_metric_val')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_permit_redistribute_match_metric_val(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        permit = ET.SubElement(ospf, "permit")
        redistribute = ET.SubElement(permit, "redistribute")
        redist_value_key = ET.SubElement(redistribute, "redist-value")
        redist_value_key.text = kwargs.pop('redist_value')
        route_option_key = ET.SubElement(redistribute, "route-option")
        route_option_key.text = kwargs.pop('route_option')
        match_metric_val = ET.SubElement(redistribute, "match-metric-val")
        match_metric_val.text = kwargs.pop('match_metric_val')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_deny_redistribute_redist_value(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        deny = ET.SubElement(ospf, "deny")
        redistribute = ET.SubElement(deny, "redistribute")
        route_option_key = ET.SubElement(redistribute, "route-option")
        route_option_key.text = kwargs.pop('route_option')
        redist_value = ET.SubElement(redistribute, "redist-value")
        redist_value.text = kwargs.pop('redist_value')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_deny_redistribute_route_option(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        deny = ET.SubElement(ospf, "deny")
        redistribute = ET.SubElement(deny, "redistribute")
        redist_value_key = ET.SubElement(redistribute, "redist-value")
        redist_value_key.text = kwargs.pop('redist_value')
        route_option = ET.SubElement(redistribute, "route-option")
        route_option.text = kwargs.pop('route_option')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_deny_redistribute_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        deny = ET.SubElement(ospf, "deny")
        redistribute = ET.SubElement(deny, "redistribute")
        redist_value_key = ET.SubElement(redistribute, "redist-value")
        redist_value_key.text = kwargs.pop('redist_value')
        route_option_key = ET.SubElement(redistribute, "route-option")
        route_option_key.text = kwargs.pop('route_option')
        address = ET.SubElement(redistribute, "address")
        address.text = kwargs.pop('address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_deny_redistribute_mask(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        deny = ET.SubElement(ospf, "deny")
        redistribute = ET.SubElement(deny, "redistribute")
        redist_value_key = ET.SubElement(redistribute, "redist-value")
        redist_value_key.text = kwargs.pop('redist_value')
        route_option_key = ET.SubElement(redistribute, "route-option")
        route_option_key.text = kwargs.pop('route_option')
        mask = ET.SubElement(redistribute, "mask")
        mask.text = kwargs.pop('mask')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_deny_redistribute_set_metric_val(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        deny = ET.SubElement(ospf, "deny")
        redistribute = ET.SubElement(deny, "redistribute")
        redist_value_key = ET.SubElement(redistribute, "redist-value")
        redist_value_key.text = kwargs.pop('redist_value')
        route_option_key = ET.SubElement(redistribute, "route-option")
        route_option_key.text = kwargs.pop('route_option')
        set_metric_val = ET.SubElement(redistribute, "set-metric-val")
        set_metric_val.text = kwargs.pop('set_metric_val')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_deny_redistribute_match_metric_val(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        deny = ET.SubElement(ospf, "deny")
        redistribute = ET.SubElement(deny, "redistribute")
        redist_value_key = ET.SubElement(redistribute, "redist-value")
        redist_value_key.text = kwargs.pop('redist_value')
        route_option_key = ET.SubElement(redistribute, "route-option")
        route_option_key.text = kwargs.pop('route_option')
        match_metric_val = ET.SubElement(redistribute, "match-metric-val")
        match_metric_val.text = kwargs.pop('match_metric_val')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_vrf_lite_capability(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        vrf_lite_capability = ET.SubElement(ospf, "vrf-lite-capability")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_graceful_restart_graceful_restart_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        graceful_restart = ET.SubElement(ospf, "graceful-restart")
        graceful_restart_enable = ET.SubElement(graceful_restart, "graceful-restart-enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_graceful_restart_helper_disable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        graceful_restart = ET.SubElement(ospf, "graceful-restart")
        helper_disable = ET.SubElement(graceful_restart, "helper-disable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_graceful_restart_restart_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        graceful_restart = ET.SubElement(ospf, "graceful-restart")
        restart_time = ET.SubElement(graceful_restart, "restart-time")
        restart_time.text = kwargs.pop('restart_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_nonstop_routing(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        nonstop_routing = ET.SubElement(ospf, "nonstop-routing")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_ospf_maximum_paths(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        ospf = ET.SubElement(router, "ospf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        vrf_key = ET.SubElement(ospf, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        maximum_paths = ET.SubElement(ospf, "maximum-paths")
        maximum_paths.text = kwargs.pop('maximum_paths')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_hide_pim_holder_pim_max_mcache(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        hide_pim_holder = ET.SubElement(router, "hide-pim-holder", xmlns="urn:brocade.com:mgmt:brocade-pim")
        pim = ET.SubElement(hide_pim_holder, "pim")
        max_mcache = ET.SubElement(pim, "max-mcache")
        max_mcache.text = kwargs.pop('max_mcache')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_hide_pim_holder_pim_hello_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        hide_pim_holder = ET.SubElement(router, "hide-pim-holder", xmlns="urn:brocade.com:mgmt:brocade-pim")
        pim = ET.SubElement(hide_pim_holder, "pim")
        hello_interval = ET.SubElement(pim, "hello-interval")
        hello_interval.text = kwargs.pop('hello_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_hide_pim_holder_pim_nbr_timeout(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        hide_pim_holder = ET.SubElement(router, "hide-pim-holder", xmlns="urn:brocade.com:mgmt:brocade-pim")
        pim = ET.SubElement(hide_pim_holder, "pim")
        nbr_timeout = ET.SubElement(pim, "nbr-timeout")
        nbr_timeout.text = kwargs.pop('nbr_timeout')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_hide_pim_holder_pim_inactivity_timer(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        hide_pim_holder = ET.SubElement(router, "hide-pim-holder", xmlns="urn:brocade.com:mgmt:brocade-pim")
        pim = ET.SubElement(hide_pim_holder, "pim")
        inactivity_timer = ET.SubElement(pim, "inactivity-timer")
        inactivity_timer.text = kwargs.pop('inactivity_timer')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_hide_pim_holder_pim_message_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        hide_pim_holder = ET.SubElement(router, "hide-pim-holder", xmlns="urn:brocade.com:mgmt:brocade-pim")
        pim = ET.SubElement(hide_pim_holder, "pim")
        message_interval = ET.SubElement(pim, "message-interval")
        message_interval.text = kwargs.pop('message_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_hide_pim_holder_pim_spt_threshold(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        hide_pim_holder = ET.SubElement(router, "hide-pim-holder", xmlns="urn:brocade.com:mgmt:brocade-pim")
        pim = ET.SubElement(hide_pim_holder, "pim")
        spt_threshold = ET.SubElement(pim, "spt-threshold")
        spt_threshold.text = kwargs.pop('spt_threshold')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_hide_pim_holder_pim_bsr_candidate_bsr_cand_interface_bsr_cand_intf_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        hide_pim_holder = ET.SubElement(router, "hide-pim-holder", xmlns="urn:brocade.com:mgmt:brocade-pim")
        pim = ET.SubElement(hide_pim_holder, "pim")
        bsr_candidate = ET.SubElement(pim, "bsr-candidate")
        bsr_cand_interface = ET.SubElement(bsr_candidate, "bsr-cand-interface")
        bsr_cand_intf_id_key = ET.SubElement(bsr_cand_interface, "bsr-cand-intf-id")
        bsr_cand_intf_id_key.text = kwargs.pop('bsr_cand_intf_id')
        bsr_cand_intf_type = ET.SubElement(bsr_cand_interface, "bsr-cand-intf-type")
        bsr_cand_intf_type.text = kwargs.pop('bsr_cand_intf_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_hide_pim_holder_pim_bsr_candidate_bsr_cand_interface_bsr_cand_intf_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        hide_pim_holder = ET.SubElement(router, "hide-pim-holder", xmlns="urn:brocade.com:mgmt:brocade-pim")
        pim = ET.SubElement(hide_pim_holder, "pim")
        bsr_candidate = ET.SubElement(pim, "bsr-candidate")
        bsr_cand_interface = ET.SubElement(bsr_candidate, "bsr-cand-interface")
        bsr_cand_intf_type_key = ET.SubElement(bsr_cand_interface, "bsr-cand-intf-type")
        bsr_cand_intf_type_key.text = kwargs.pop('bsr_cand_intf_type')
        bsr_cand_intf_id = ET.SubElement(bsr_cand_interface, "bsr-cand-intf-id")
        bsr_cand_intf_id.text = kwargs.pop('bsr_cand_intf_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_hide_pim_holder_pim_bsr_candidate_bsr_cand_interface_hash_mask_length(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        hide_pim_holder = ET.SubElement(router, "hide-pim-holder", xmlns="urn:brocade.com:mgmt:brocade-pim")
        pim = ET.SubElement(hide_pim_holder, "pim")
        bsr_candidate = ET.SubElement(pim, "bsr-candidate")
        bsr_cand_interface = ET.SubElement(bsr_candidate, "bsr-cand-interface")
        bsr_cand_intf_type_key = ET.SubElement(bsr_cand_interface, "bsr-cand-intf-type")
        bsr_cand_intf_type_key.text = kwargs.pop('bsr_cand_intf_type')
        bsr_cand_intf_id_key = ET.SubElement(bsr_cand_interface, "bsr-cand-intf-id")
        bsr_cand_intf_id_key.text = kwargs.pop('bsr_cand_intf_id')
        hash_mask_length = ET.SubElement(bsr_cand_interface, "hash-mask-length")
        hash_mask_length.text = kwargs.pop('hash_mask_length')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_hide_pim_holder_pim_bsr_candidate_bsr_cand_interface_bsr_cand_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        hide_pim_holder = ET.SubElement(router, "hide-pim-holder", xmlns="urn:brocade.com:mgmt:brocade-pim")
        pim = ET.SubElement(hide_pim_holder, "pim")
        bsr_candidate = ET.SubElement(pim, "bsr-candidate")
        bsr_cand_interface = ET.SubElement(bsr_candidate, "bsr-cand-interface")
        bsr_cand_intf_type_key = ET.SubElement(bsr_cand_interface, "bsr-cand-intf-type")
        bsr_cand_intf_type_key.text = kwargs.pop('bsr_cand_intf_type')
        bsr_cand_intf_id_key = ET.SubElement(bsr_cand_interface, "bsr-cand-intf-id")
        bsr_cand_intf_id_key.text = kwargs.pop('bsr_cand_intf_id')
        bsr_cand_priority = ET.SubElement(bsr_cand_interface, "bsr-cand-priority")
        bsr_cand_priority.text = kwargs.pop('bsr_cand_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_hide_pim_holder_pim_rp_candidate_rp_cand_interface_rp_cand_intf_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        hide_pim_holder = ET.SubElement(router, "hide-pim-holder", xmlns="urn:brocade.com:mgmt:brocade-pim")
        pim = ET.SubElement(hide_pim_holder, "pim")
        rp_candidate = ET.SubElement(pim, "rp-candidate")
        rp_cand_interface = ET.SubElement(rp_candidate, "rp-cand-interface")
        rp_cand_intf_id_key = ET.SubElement(rp_cand_interface, "rp-cand-intf-id")
        rp_cand_intf_id_key.text = kwargs.pop('rp_cand_intf_id')
        rp_cand_intf_type = ET.SubElement(rp_cand_interface, "rp-cand-intf-type")
        rp_cand_intf_type.text = kwargs.pop('rp_cand_intf_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_hide_pim_holder_pim_rp_candidate_rp_cand_interface_rp_cand_intf_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        hide_pim_holder = ET.SubElement(router, "hide-pim-holder", xmlns="urn:brocade.com:mgmt:brocade-pim")
        pim = ET.SubElement(hide_pim_holder, "pim")
        rp_candidate = ET.SubElement(pim, "rp-candidate")
        rp_cand_interface = ET.SubElement(rp_candidate, "rp-cand-interface")
        rp_cand_intf_type_key = ET.SubElement(rp_cand_interface, "rp-cand-intf-type")
        rp_cand_intf_type_key.text = kwargs.pop('rp_cand_intf_type')
        rp_cand_intf_id = ET.SubElement(rp_cand_interface, "rp-cand-intf-id")
        rp_cand_intf_id.text = kwargs.pop('rp_cand_intf_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_hide_pim_holder_pim_rp_candidate_rp_cand_grp_prefix_rp_cand_grp_prefix_action(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        hide_pim_holder = ET.SubElement(router, "hide-pim-holder", xmlns="urn:brocade.com:mgmt:brocade-pim")
        pim = ET.SubElement(hide_pim_holder, "pim")
        rp_candidate = ET.SubElement(pim, "rp-candidate")
        rp_cand_grp_prefix = ET.SubElement(rp_candidate, "rp-cand-grp-prefix")
        rp_cand_grp_prefix_ip_key = ET.SubElement(rp_cand_grp_prefix, "rp-cand-grp-prefix-ip")
        rp_cand_grp_prefix_ip_key.text = kwargs.pop('rp_cand_grp_prefix_ip')
        rp_cand_grp_prefix_length_key = ET.SubElement(rp_cand_grp_prefix, "rp-cand-grp-prefix-length")
        rp_cand_grp_prefix_length_key.text = kwargs.pop('rp_cand_grp_prefix_length')
        rp_cand_grp_prefix_action = ET.SubElement(rp_cand_grp_prefix, "rp-cand-grp-prefix-action")
        rp_cand_grp_prefix_action.text = kwargs.pop('rp_cand_grp_prefix_action')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_hide_pim_holder_pim_rp_candidate_rp_cand_grp_prefix_rp_cand_grp_prefix_ip(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        hide_pim_holder = ET.SubElement(router, "hide-pim-holder", xmlns="urn:brocade.com:mgmt:brocade-pim")
        pim = ET.SubElement(hide_pim_holder, "pim")
        rp_candidate = ET.SubElement(pim, "rp-candidate")
        rp_cand_grp_prefix = ET.SubElement(rp_candidate, "rp-cand-grp-prefix")
        rp_cand_grp_prefix_action_key = ET.SubElement(rp_cand_grp_prefix, "rp-cand-grp-prefix-action")
        rp_cand_grp_prefix_action_key.text = kwargs.pop('rp_cand_grp_prefix_action')
        rp_cand_grp_prefix_length_key = ET.SubElement(rp_cand_grp_prefix, "rp-cand-grp-prefix-length")
        rp_cand_grp_prefix_length_key.text = kwargs.pop('rp_cand_grp_prefix_length')
        rp_cand_grp_prefix_ip = ET.SubElement(rp_cand_grp_prefix, "rp-cand-grp-prefix-ip")
        rp_cand_grp_prefix_ip.text = kwargs.pop('rp_cand_grp_prefix_ip')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_hide_pim_holder_pim_rp_candidate_rp_cand_grp_prefix_rp_cand_grp_prefix_length(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        hide_pim_holder = ET.SubElement(router, "hide-pim-holder", xmlns="urn:brocade.com:mgmt:brocade-pim")
        pim = ET.SubElement(hide_pim_holder, "pim")
        rp_candidate = ET.SubElement(pim, "rp-candidate")
        rp_cand_grp_prefix = ET.SubElement(rp_candidate, "rp-cand-grp-prefix")
        rp_cand_grp_prefix_action_key = ET.SubElement(rp_cand_grp_prefix, "rp-cand-grp-prefix-action")
        rp_cand_grp_prefix_action_key.text = kwargs.pop('rp_cand_grp_prefix_action')
        rp_cand_grp_prefix_ip_key = ET.SubElement(rp_cand_grp_prefix, "rp-cand-grp-prefix-ip")
        rp_cand_grp_prefix_ip_key.text = kwargs.pop('rp_cand_grp_prefix_ip')
        rp_cand_grp_prefix_length = ET.SubElement(rp_cand_grp_prefix, "rp-cand-grp-prefix-length")
        rp_cand_grp_prefix_length.text = kwargs.pop('rp_cand_grp_prefix_length')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_hide_pim_holder_pim_rp_address_rp_ip_addr(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        hide_pim_holder = ET.SubElement(router, "hide-pim-holder", xmlns="urn:brocade.com:mgmt:brocade-pim")
        pim = ET.SubElement(hide_pim_holder, "pim")
        rp_address = ET.SubElement(pim, "rp-address")
        rp_ip_addr = ET.SubElement(rp_address, "rp-ip-addr")
        rp_ip_addr.text = kwargs.pop('rp_ip_addr')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_router_hide_pim_holder_pim_rp_address_prefix_list(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        router = ET.SubElement(rbridge_id, "router")
        hide_pim_holder = ET.SubElement(router, "hide-pim-holder", xmlns="urn:brocade.com:mgmt:brocade-pim")
        pim = ET.SubElement(hide_pim_holder, "pim")
        rp_address = ET.SubElement(pim, "rp-address")
        rp_ip_addr_key = ET.SubElement(rp_address, "rp-ip-addr")
        rp_ip_addr_key.text = kwargs.pop('rp_ip_addr')
        prefix_list = ET.SubElement(rp_address, "prefix-list")
        prefix_list.text = kwargs.pop('prefix_list')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_switch_attributes_chassis_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        switch_attributes = ET.SubElement(rbridge_id, "switch-attributes")
        chassis_name = ET.SubElement(switch_attributes, "chassis-name")
        chassis_name.text = kwargs.pop('chassis_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_switch_attributes_host_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        switch_attributes = ET.SubElement(rbridge_id, "switch-attributes")
        host_name = ET.SubElement(switch_attributes, "host-name")
        host_name.text = kwargs.pop('host_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_protocol_hide_vrrp_holder_vrrp(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        protocol = ET.SubElement(rbridge_id, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hide_vrrp_holder = ET.SubElement(protocol, "hide-vrrp-holder", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrrp = ET.SubElement(hide_vrrp_holder, "vrrp")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_protocol_hide_vrrp_holder_vrrp_extended(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        protocol = ET.SubElement(rbridge_id, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hide_vrrp_holder = ET.SubElement(protocol, "hide-vrrp-holder", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrrp_extended = ET.SubElement(hide_vrrp_holder, "vrrp-extended")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name = ET.SubElement(ve, "name")
        name.text = kwargs.pop('name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_vrrp_vrid(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(ve, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        vrid = ET.SubElement(vrrp, "vrid")
        vrid.text = kwargs.pop('vrid')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_vrrp_version(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(ve, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version = ET.SubElement(vrrp, "version")
        version.text = kwargs.pop('version')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_vrrp_use_v2_checksum(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(ve, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        use_v2_checksum = ET.SubElement(vrrp, "use-v2-checksum")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_vrrp_virtual_ip_virtual_ipaddr(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(ve, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        virtual_ip = ET.SubElement(vrrp, "virtual-ip")
        virtual_ipaddr = ET.SubElement(virtual_ip, "virtual-ipaddr")
        virtual_ipaddr.text = kwargs.pop('virtual_ipaddr')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_vrrp_track_interface_interface_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(ve, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        track = ET.SubElement(vrrp, "track")
        interface = ET.SubElement(track, "interface")
        interface_name_key = ET.SubElement(interface, "interface-name")
        interface_name_key.text = kwargs.pop('interface_name')
        interface_type = ET.SubElement(interface, "interface-type")
        interface_type.text = kwargs.pop('interface_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_vrrp_track_interface_interface_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(ve, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        track = ET.SubElement(vrrp, "track")
        interface = ET.SubElement(track, "interface")
        interface_type_key = ET.SubElement(interface, "interface-type")
        interface_type_key.text = kwargs.pop('interface_type')
        interface_name = ET.SubElement(interface, "interface-name")
        interface_name.text = kwargs.pop('interface_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_vrrp_track_interface_track_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(ve, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        track = ET.SubElement(vrrp, "track")
        interface = ET.SubElement(track, "interface")
        interface_type_key = ET.SubElement(interface, "interface-type")
        interface_type_key.text = kwargs.pop('interface_type')
        interface_name_key = ET.SubElement(interface, "interface-name")
        interface_name_key.text = kwargs.pop('interface_name')
        track_priority = ET.SubElement(interface, "track-priority")
        track_priority.text = kwargs.pop('track_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_vrrp_advertisement_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(ve, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        advertisement_interval = ET.SubElement(vrrp, "advertisement-interval")
        advertisement_interval.text = kwargs.pop('advertisement_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_vrrp_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(ve, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        enable = ET.SubElement(vrrp, "enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_vrrp_hold_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(ve, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        hold_time = ET.SubElement(vrrp, "hold-time")
        hold_time.text = kwargs.pop('hold_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_vrrp_preempt_mode(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(ve, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        preempt_mode = ET.SubElement(vrrp, "preempt-mode")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_vrrp_arp_unicast_request_receive(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(ve, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        arp = ET.SubElement(vrrp, "arp")
        unicast_request = ET.SubElement(arp, "unicast-request")
        receive = ET.SubElement(unicast_request, "receive")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_vrrp_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(ve, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        priority = ET.SubElement(vrrp, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_vrrp_description(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(ve, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        description = ET.SubElement(vrrp, "description")
        description.text = kwargs.pop('description')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_vrrpe_vrid(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        vrrpe = ET.SubElement(ve, "vrrpe", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid = ET.SubElement(vrrpe, "vrid")
        vrid.text = kwargs.pop('vrid')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_vrrpe_virtual_mac(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        vrrpe = ET.SubElement(ve, "vrrpe", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrpe, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        virtual_mac = ET.SubElement(vrrpe, "virtual-mac")
        virtual_mac.text = kwargs.pop('virtual_mac')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_vrrpe_virtual_ip_virtual_ipaddr(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        vrrpe = ET.SubElement(ve, "vrrpe", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrpe, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        virtual_ip = ET.SubElement(vrrpe, "virtual-ip")
        virtual_ipaddr = ET.SubElement(virtual_ip, "virtual-ipaddr")
        virtual_ipaddr.text = kwargs.pop('virtual_ipaddr')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_vrrpe_track_interface_interface_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        vrrpe = ET.SubElement(ve, "vrrpe", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrpe, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        track = ET.SubElement(vrrpe, "track")
        interface = ET.SubElement(track, "interface")
        interface_name_key = ET.SubElement(interface, "interface-name")
        interface_name_key.text = kwargs.pop('interface_name')
        interface_type = ET.SubElement(interface, "interface-type")
        interface_type.text = kwargs.pop('interface_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_vrrpe_track_interface_interface_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        vrrpe = ET.SubElement(ve, "vrrpe", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrpe, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        track = ET.SubElement(vrrpe, "track")
        interface = ET.SubElement(track, "interface")
        interface_type_key = ET.SubElement(interface, "interface-type")
        interface_type_key.text = kwargs.pop('interface_type')
        interface_name = ET.SubElement(interface, "interface-name")
        interface_name.text = kwargs.pop('interface_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_vrrpe_track_interface_track_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        vrrpe = ET.SubElement(ve, "vrrpe", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrpe, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        track = ET.SubElement(vrrpe, "track")
        interface = ET.SubElement(track, "interface")
        interface_type_key = ET.SubElement(interface, "interface-type")
        interface_type_key.text = kwargs.pop('interface_type')
        interface_name_key = ET.SubElement(interface, "interface-name")
        interface_name_key.text = kwargs.pop('interface_name')
        track_priority = ET.SubElement(interface, "track-priority")
        track_priority.text = kwargs.pop('track_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_vrrpe_advertisement_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        vrrpe = ET.SubElement(ve, "vrrpe", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrpe, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        advertisement_interval = ET.SubElement(vrrpe, "advertisement-interval")
        advertisement_interval.text = kwargs.pop('advertisement_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_vrrpe_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        vrrpe = ET.SubElement(ve, "vrrpe", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrpe, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        enable = ET.SubElement(vrrpe, "enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_vrrpe_hold_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        vrrpe = ET.SubElement(ve, "vrrpe", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrpe, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        hold_time = ET.SubElement(vrrpe, "hold-time")
        hold_time.text = kwargs.pop('hold_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_vrrpe_preempt_mode(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        vrrpe = ET.SubElement(ve, "vrrpe", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrpe, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        preempt_mode = ET.SubElement(vrrpe, "preempt-mode")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_vrrpe_arp_unicast_request_receive(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        vrrpe = ET.SubElement(ve, "vrrpe", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrpe, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        arp = ET.SubElement(vrrpe, "arp")
        unicast_request = ET.SubElement(arp, "unicast-request")
        receive = ET.SubElement(unicast_request, "receive")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_vrrpe_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        vrrpe = ET.SubElement(ve, "vrrpe", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrpe, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        priority = ET.SubElement(vrrpe, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_vrrpe_description(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        vrrpe = ET.SubElement(ve, "vrrpe", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrpe, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        description = ET.SubElement(vrrpe, "description")
        description.text = kwargs.pop('description')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_vrrpe_advertise_backup(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        vrrpe = ET.SubElement(ve, "vrrpe", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrpe, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        advertise_backup = ET.SubElement(vrrpe, "advertise-backup")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_vrrpe_vrrpe_garp_timer(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        vrrpe = ET.SubElement(ve, "vrrpe", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrpe, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        vrrpe_garp_timer = ET.SubElement(vrrpe, "vrrpe-garp-timer")
        vrrpe_garp_timer.text = kwargs.pop('vrrpe_garp_timer')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_vrrpe_backup_advertisement_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        vrrpe = ET.SubElement(ve, "vrrpe", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrpe, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        backup_advertisement_interval = ET.SubElement(vrrpe, "backup-advertisement-interval")
        backup_advertisement_interval.text = kwargs.pop('backup_advertisement_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_vrrpe_short_path_forwarding_basic(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        vrrpe = ET.SubElement(ve, "vrrpe", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrpe, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        short_path_forwarding = ET.SubElement(vrrpe, "short-path-forwarding")
        basic = ET.SubElement(short_path_forwarding, "basic")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_vrrpe_short_path_forwarding_revert_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        vrrpe = ET.SubElement(ve, "vrrpe", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrpe, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        short_path_forwarding = ET.SubElement(vrrpe, "short-path-forwarding")
        revert_priority = ET.SubElement(short_path_forwarding, "revert-priority")
        revert_priority.text = kwargs.pop('revert_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_vrrpe_advertisement_interval_scale(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        vrrpe = ET.SubElement(ve, "vrrpe", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrpe, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        advertisement_interval_scale = ET.SubElement(vrrpe, "advertisement-interval-scale")
        advertisement_interval_scale.text = kwargs.pop('advertisement_interval_scale')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_vrf_forwarding(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        vrf = ET.SubElement(ve, "vrf", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        forwarding = ET.SubElement(vrf, "forwarding")
        forwarding.text = kwargs.pop('forwarding')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_ip_config_mtu(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        ip_config = ET.SubElement(ip, "ip-config")
        mtu = ET.SubElement(ip_config, "mtu")
        mtu.text = kwargs.pop('mtu')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_ip_config_directed_broadcast(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        ip_config = ET.SubElement(ip, "ip-config")
        directed_broadcast = ET.SubElement(ip_config, "directed-broadcast")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_ip_config_proxy_arp(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        ip_config = ET.SubElement(ip, "ip-config")
        proxy_arp = ET.SubElement(ip_config, "proxy-arp")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_ip_config_arp_aging_timeout(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        ip_config = ET.SubElement(ip, "ip-config")
        arp_aging_timeout = ET.SubElement(ip_config, "arp-aging-timeout")
        arp_aging_timeout.text = kwargs.pop('arp_aging_timeout')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_ip_config_address_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        ip_config = ET.SubElement(ip, "ip-config")
        address = ET.SubElement(ip_config, "address")
        address = ET.SubElement(address, "address")
        address.text = kwargs.pop('address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_ip_config_address_secondary(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        ip_config = ET.SubElement(ip, "ip-config")
        address = ET.SubElement(ip_config, "address")
        address_key = ET.SubElement(address, "address")
        address_key.text = kwargs.pop('address')
        secondary = ET.SubElement(address, "secondary")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_ip_config_address_ospf_passive(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        ip_config = ET.SubElement(ip, "ip-config")
        address = ET.SubElement(ip_config, "address")
        address_key = ET.SubElement(address, "address")
        address_key.text = kwargs.pop('address')
        ospf_passive = ET.SubElement(address, "ospf-passive")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_ip_config_address_ospf_ignore(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        ip_config = ET.SubElement(ip, "ip-config")
        address = ET.SubElement(ip_config, "address")
        address_key = ET.SubElement(address, "address")
        address_key.text = kwargs.pop('address')
        ospf_ignore = ET.SubElement(address, "ospf-ignore")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_ip_local_anycast_gateway_local_ip_gw_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        ip_local_anycast_gateway = ET.SubElement(ip, "ip-local-anycast-gateway", xmlns="urn:brocade.com:mgmt:brocade-anycast-gateway")
        local_ip_gw_id = ET.SubElement(ip_local_anycast_gateway, "local-ip-gw-id")
        local_ip_gw_id.text = kwargs.pop('local_ip_gw_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_ip_local_anycast_gateway_track_interface_interface_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        ip_local_anycast_gateway = ET.SubElement(ip, "ip-local-anycast-gateway", xmlns="urn:brocade.com:mgmt:brocade-anycast-gateway")
        local_ip_gw_id_key = ET.SubElement(ip_local_anycast_gateway, "local-ip-gw-id")
        local_ip_gw_id_key.text = kwargs.pop('local_ip_gw_id')
        track = ET.SubElement(ip_local_anycast_gateway, "track")
        interface = ET.SubElement(track, "interface")
        interface_name_key = ET.SubElement(interface, "interface-name")
        interface_name_key.text = kwargs.pop('interface_name')
        interface_type = ET.SubElement(interface, "interface-type")
        interface_type.text = kwargs.pop('interface_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_ip_local_anycast_gateway_track_interface_interface_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        ip_local_anycast_gateway = ET.SubElement(ip, "ip-local-anycast-gateway", xmlns="urn:brocade.com:mgmt:brocade-anycast-gateway")
        local_ip_gw_id_key = ET.SubElement(ip_local_anycast_gateway, "local-ip-gw-id")
        local_ip_gw_id_key.text = kwargs.pop('local_ip_gw_id')
        track = ET.SubElement(ip_local_anycast_gateway, "track")
        interface = ET.SubElement(track, "interface")
        interface_type_key = ET.SubElement(interface, "interface-type")
        interface_type_key.text = kwargs.pop('interface_type')
        interface_name = ET.SubElement(interface, "interface-name")
        interface_name.text = kwargs.pop('interface_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_ip_local_anycast_gateway_track_interface_interface_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        ip_local_anycast_gateway = ET.SubElement(ip, "ip-local-anycast-gateway", xmlns="urn:brocade.com:mgmt:brocade-anycast-gateway")
        local_ip_gw_id_key = ET.SubElement(ip_local_anycast_gateway, "local-ip-gw-id")
        local_ip_gw_id_key.text = kwargs.pop('local_ip_gw_id')
        track = ET.SubElement(ip_local_anycast_gateway, "track")
        interface = ET.SubElement(track, "interface")
        interface_type_key = ET.SubElement(interface, "interface-type")
        interface_type_key.text = kwargs.pop('interface_type')
        interface_name_key = ET.SubElement(interface, "interface-name")
        interface_name_key.text = kwargs.pop('interface_name')
        interface_priority = ET.SubElement(interface, "interface-priority")
        interface_priority.text = kwargs.pop('interface_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_ip_local_anycast_gateway_track_network_network_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        ip_local_anycast_gateway = ET.SubElement(ip, "ip-local-anycast-gateway", xmlns="urn:brocade.com:mgmt:brocade-anycast-gateway")
        local_ip_gw_id_key = ET.SubElement(ip_local_anycast_gateway, "local-ip-gw-id")
        local_ip_gw_id_key.text = kwargs.pop('local_ip_gw_id')
        track = ET.SubElement(ip_local_anycast_gateway, "track")
        network = ET.SubElement(track, "network")
        network_address = ET.SubElement(network, "network-address")
        network_address.text = kwargs.pop('network_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_ip_local_anycast_gateway_track_network_network_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        ip_local_anycast_gateway = ET.SubElement(ip, "ip-local-anycast-gateway", xmlns="urn:brocade.com:mgmt:brocade-anycast-gateway")
        local_ip_gw_id_key = ET.SubElement(ip_local_anycast_gateway, "local-ip-gw-id")
        local_ip_gw_id_key.text = kwargs.pop('local_ip_gw_id')
        track = ET.SubElement(ip_local_anycast_gateway, "track")
        network = ET.SubElement(track, "network")
        network_address_key = ET.SubElement(network, "network-address")
        network_address_key.text = kwargs.pop('network_address')
        network_priority = ET.SubElement(network, "network-priority")
        network_priority.text = kwargs.pop('network_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_ip_local_anycast_gateway_track_next_hop_next_hop_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        ip_local_anycast_gateway = ET.SubElement(ip, "ip-local-anycast-gateway", xmlns="urn:brocade.com:mgmt:brocade-anycast-gateway")
        local_ip_gw_id_key = ET.SubElement(ip_local_anycast_gateway, "local-ip-gw-id")
        local_ip_gw_id_key.text = kwargs.pop('local_ip_gw_id')
        track = ET.SubElement(ip_local_anycast_gateway, "track")
        next_hop = ET.SubElement(track, "next-hop")
        next_hop_address = ET.SubElement(next_hop, "next-hop-address")
        next_hop_address.text = kwargs.pop('next_hop_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_ip_local_anycast_gateway_track_next_hop_next_hop_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        ip_local_anycast_gateway = ET.SubElement(ip, "ip-local-anycast-gateway", xmlns="urn:brocade.com:mgmt:brocade-anycast-gateway")
        local_ip_gw_id_key = ET.SubElement(ip_local_anycast_gateway, "local-ip-gw-id")
        local_ip_gw_id_key.text = kwargs.pop('local_ip_gw_id')
        track = ET.SubElement(ip_local_anycast_gateway, "track")
        next_hop = ET.SubElement(track, "next-hop")
        next_hop_address_key = ET.SubElement(next_hop, "next-hop-address")
        next_hop_address_key.text = kwargs.pop('next_hop_address')
        next_hop_priority = ET.SubElement(next_hop, "next-hop-priority")
        next_hop_priority.text = kwargs.pop('next_hop_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_ip_local_anycast_gateway_enable_local(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        ip_local_anycast_gateway = ET.SubElement(ip, "ip-local-anycast-gateway", xmlns="urn:brocade.com:mgmt:brocade-anycast-gateway")
        local_ip_gw_id_key = ET.SubElement(ip_local_anycast_gateway, "local-ip-gw-id")
        local_ip_gw_id_key.text = kwargs.pop('local_ip_gw_id')
        enable_local = ET.SubElement(ip_local_anycast_gateway, "enable_local")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_ip_local_anycast_gateway_disable_local(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        ip_local_anycast_gateway = ET.SubElement(ip, "ip-local-anycast-gateway", xmlns="urn:brocade.com:mgmt:brocade-anycast-gateway")
        local_ip_gw_id_key = ET.SubElement(ip_local_anycast_gateway, "local-ip-gw-id")
        local_ip_gw_id_key.text = kwargs.pop('local_ip_gw_id')
        disable_local = ET.SubElement(ip_local_anycast_gateway, "disable_local")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_ip_local_anycast_gateway_load_balancing_basic(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        ip_local_anycast_gateway = ET.SubElement(ip, "ip-local-anycast-gateway", xmlns="urn:brocade.com:mgmt:brocade-anycast-gateway")
        local_ip_gw_id_key = ET.SubElement(ip_local_anycast_gateway, "local-ip-gw-id")
        local_ip_gw_id_key.text = kwargs.pop('local_ip_gw_id')
        load_balancing = ET.SubElement(ip_local_anycast_gateway, "load-balancing")
        basic = ET.SubElement(load_balancing, "basic")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_ip_local_anycast_gateway_load_balancing_threshold_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        ip_local_anycast_gateway = ET.SubElement(ip, "ip-local-anycast-gateway", xmlns="urn:brocade.com:mgmt:brocade-anycast-gateway")
        local_ip_gw_id_key = ET.SubElement(ip_local_anycast_gateway, "local-ip-gw-id")
        local_ip_gw_id_key.text = kwargs.pop('local_ip_gw_id')
        load_balancing = ET.SubElement(ip_local_anycast_gateway, "load-balancing")
        threshold_priority = ET.SubElement(load_balancing, "threshold-priority")
        threshold_priority.text = kwargs.pop('threshold_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_ip_local_anycast_gateway_install_default_route(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        ip_local_anycast_gateway = ET.SubElement(ip, "ip-local-anycast-gateway", xmlns="urn:brocade.com:mgmt:brocade-anycast-gateway")
        local_ip_gw_id_key = ET.SubElement(ip_local_anycast_gateway, "local-ip-gw-id")
        local_ip_gw_id_key.text = kwargs.pop('local_ip_gw_id')
        install_default_route = ET.SubElement(ip_local_anycast_gateway, "install-default-route")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_interface_ve_dhcp_conf_dhcp_relay_servers_relay_ip_addr(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_ve_dhcp_conf = ET.SubElement(ip, "interface-ve-dhcp-conf", xmlns="urn:brocade.com:mgmt:brocade-dhcp")
        dhcp = ET.SubElement(interface_ve_dhcp_conf, "dhcp")
        relay = ET.SubElement(dhcp, "relay")
        servers = ET.SubElement(relay, "servers")
        server_vrf_name_key = ET.SubElement(servers, "server-vrf-name")
        server_vrf_name_key.text = kwargs.pop('server_vrf_name')
        relay_ip_addr = ET.SubElement(servers, "relay-ip-addr")
        relay_ip_addr.text = kwargs.pop('relay_ip_addr')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_interface_ve_dhcp_conf_dhcp_relay_servers_server_vrf_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_ve_dhcp_conf = ET.SubElement(ip, "interface-ve-dhcp-conf", xmlns="urn:brocade.com:mgmt:brocade-dhcp")
        dhcp = ET.SubElement(interface_ve_dhcp_conf, "dhcp")
        relay = ET.SubElement(dhcp, "relay")
        servers = ET.SubElement(relay, "servers")
        relay_ip_addr_key = ET.SubElement(servers, "relay-ip-addr")
        relay_ip_addr_key.text = kwargs.pop('relay_ip_addr')
        server_vrf_name = ET.SubElement(servers, "server-vrf-name")
        server_vrf_name.text = kwargs.pop('server_vrf_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_interface_ve_dhcp_conf_dhcp_relay_gateway(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_ve_dhcp_conf = ET.SubElement(ip, "interface-ve-dhcp-conf", xmlns="urn:brocade.com:mgmt:brocade-dhcp")
        dhcp = ET.SubElement(interface_ve_dhcp_conf, "dhcp")
        relay = ET.SubElement(dhcp, "relay")
        gateway = ET.SubElement(relay, "gateway")
        gateway.text = kwargs.pop('gateway')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_icmp_echo_reply(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        icmp = ET.SubElement(ip, "icmp", xmlns="urn:brocade.com:mgmt:brocade-icmp")
        echo_reply = ET.SubElement(icmp, "echo-reply")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_icmp_rate_limiting(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        icmp = ET.SubElement(ip, "icmp", xmlns="urn:brocade.com:mgmt:brocade-icmp")
        rate_limiting = ET.SubElement(icmp, "rate-limiting")
        rate_limiting.text = kwargs.pop('rate_limiting')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_icmp_unreachable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        icmp = ET.SubElement(ip, "icmp", xmlns="urn:brocade.com:mgmt:brocade-icmp")
        unreachable = ET.SubElement(icmp, "unreachable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_icmp_redirect(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        icmp = ET.SubElement(ip, "icmp", xmlns="urn:brocade.com:mgmt:brocade-icmp")
        redirect = ET.SubElement(icmp, "redirect")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_icmp_address_mask(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        icmp = ET.SubElement(ip, "icmp", xmlns="urn:brocade.com:mgmt:brocade-icmp")
        address_mask = ET.SubElement(icmp, "address-mask")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_igmp_last_member_query_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        igmp = ET.SubElement(ip, "igmp", xmlns="urn:brocade.com:mgmt:brocade-igmp")
        last_member_query_interval = ET.SubElement(igmp, "last-member-query-interval")
        last_member_query_interval.text = kwargs.pop('last_member_query_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_igmp_query_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        igmp = ET.SubElement(ip, "igmp", xmlns="urn:brocade.com:mgmt:brocade-igmp")
        query_interval = ET.SubElement(igmp, "query-interval")
        query_interval.text = kwargs.pop('query_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_igmp_query_max_response_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        igmp = ET.SubElement(ip, "igmp", xmlns="urn:brocade.com:mgmt:brocade-igmp")
        query_max_response_time = ET.SubElement(igmp, "query-max-response-time")
        query_max_response_time.text = kwargs.pop('query_max_response_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_igmp_immediate_leave(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        igmp = ET.SubElement(ip, "igmp", xmlns="urn:brocade.com:mgmt:brocade-igmp")
        immediate_leave = ET.SubElement(igmp, "immediate-leave")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_igmp_static_group_sg_addr(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        igmp = ET.SubElement(ip, "igmp", xmlns="urn:brocade.com:mgmt:brocade-igmp")
        static_group = ET.SubElement(igmp, "static-group")
        sg_addr = ET.SubElement(static_group, "sg-addr")
        sg_addr.text = kwargs.pop('sg_addr')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_interface_vlan_ospf_conf_ospf1_area(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_vlan_ospf_conf = ET.SubElement(ip, "interface-vlan-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_vlan_ospf_conf, "ospf1")
        area = ET.SubElement(ospf1, "area")
        area.text = kwargs.pop('area')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_interface_vlan_ospf_conf_ospf1_auth_change_wait_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_vlan_ospf_conf = ET.SubElement(ip, "interface-vlan-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_vlan_ospf_conf, "ospf1")
        auth_change_wait_time = ET.SubElement(ospf1, "auth-change-wait-time")
        auth_change_wait_time.text = kwargs.pop('auth_change_wait_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_interface_vlan_ospf_conf_ospf1_authentication_key_no_encrypt_auth_key_table_no_encrypt_auth_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_vlan_ospf_conf = ET.SubElement(ip, "interface-vlan-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_vlan_ospf_conf, "ospf1")
        authentication_key = ET.SubElement(ospf1, "authentication-key")
        no_encrypt_auth_key_table = ET.SubElement(authentication_key, "no-encrypt-auth-key-table")
        no_encrypt_auth_key = ET.SubElement(no_encrypt_auth_key_table, "no-encrypt-auth-key")
        no_encrypt_auth_key.text = kwargs.pop('no_encrypt_auth_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_interface_vlan_ospf_conf_ospf1_authentication_key_auth_key_table_encrypttype(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_vlan_ospf_conf = ET.SubElement(ip, "interface-vlan-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_vlan_ospf_conf, "ospf1")
        authentication_key = ET.SubElement(ospf1, "authentication-key")
        auth_key_table = ET.SubElement(authentication_key, "auth-key-table")
        encrypttype = ET.SubElement(auth_key_table, "encrypttype")
        encrypttype.text = kwargs.pop('encrypttype')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_interface_vlan_ospf_conf_ospf1_authentication_key_auth_key_table_auth_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_vlan_ospf_conf = ET.SubElement(ip, "interface-vlan-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_vlan_ospf_conf, "ospf1")
        authentication_key = ET.SubElement(ospf1, "authentication-key")
        auth_key_table = ET.SubElement(authentication_key, "auth-key-table")
        auth_key = ET.SubElement(auth_key_table, "auth-key")
        auth_key.text = kwargs.pop('auth_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_interface_vlan_ospf_conf_ospf1_dead_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_vlan_ospf_conf = ET.SubElement(ip, "interface-vlan-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_vlan_ospf_conf, "ospf1")
        dead_interval = ET.SubElement(ospf1, "dead-interval")
        dead_interval.text = kwargs.pop('dead_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_interface_vlan_ospf_conf_ospf1_hello_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_vlan_ospf_conf = ET.SubElement(ip, "interface-vlan-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_vlan_ospf_conf, "ospf1")
        hello_interval = ET.SubElement(ospf1, "hello-interval")
        hello_interval.text = kwargs.pop('hello_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_interface_vlan_ospf_conf_ospf1_retransmit_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_vlan_ospf_conf = ET.SubElement(ip, "interface-vlan-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_vlan_ospf_conf, "ospf1")
        retransmit_interval = ET.SubElement(ospf1, "retransmit-interval")
        retransmit_interval.text = kwargs.pop('retransmit_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_interface_vlan_ospf_conf_ospf1_transmit_delay(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_vlan_ospf_conf = ET.SubElement(ip, "interface-vlan-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_vlan_ospf_conf, "ospf1")
        transmit_delay = ET.SubElement(ospf1, "transmit-delay")
        transmit_delay.text = kwargs.pop('transmit_delay')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_interface_vlan_ospf_conf_ospf1_md5_authentication_key_activation_wait_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_vlan_ospf_conf = ET.SubElement(ip, "interface-vlan-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_vlan_ospf_conf, "ospf1")
        md5_authentication = ET.SubElement(ospf1, "md5-authentication")
        key_activation_wait_time = ET.SubElement(md5_authentication, "key-activation-wait-time")
        key_activation_wait_time.text = kwargs.pop('key_activation_wait_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_interface_vlan_ospf_conf_ospf1_md5_authentication_no_encrypt_key_table_no_encrypt_key_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_vlan_ospf_conf = ET.SubElement(ip, "interface-vlan-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_vlan_ospf_conf, "ospf1")
        md5_authentication = ET.SubElement(ospf1, "md5-authentication")
        no_encrypt_key_table = ET.SubElement(md5_authentication, "no-encrypt-key-table")
        no_encrypt_key_id = ET.SubElement(no_encrypt_key_table, "no-encrypt-key-id")
        no_encrypt_key_id.text = kwargs.pop('no_encrypt_key_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_interface_vlan_ospf_conf_ospf1_md5_authentication_no_encrypt_key_table_no_encrypt_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_vlan_ospf_conf = ET.SubElement(ip, "interface-vlan-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_vlan_ospf_conf, "ospf1")
        md5_authentication = ET.SubElement(ospf1, "md5-authentication")
        no_encrypt_key_table = ET.SubElement(md5_authentication, "no-encrypt-key-table")
        no_encrypt_key = ET.SubElement(no_encrypt_key_table, "no-encrypt-key")
        no_encrypt_key.text = kwargs.pop('no_encrypt_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_interface_vlan_ospf_conf_ospf1_md5_authentication_key_table_key_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_vlan_ospf_conf = ET.SubElement(ip, "interface-vlan-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_vlan_ospf_conf, "ospf1")
        md5_authentication = ET.SubElement(ospf1, "md5-authentication")
        key_table = ET.SubElement(md5_authentication, "key-table")
        key_id = ET.SubElement(key_table, "key-id")
        key_id.text = kwargs.pop('key_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_interface_vlan_ospf_conf_ospf1_md5_authentication_key_table_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_vlan_ospf_conf = ET.SubElement(ip, "interface-vlan-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_vlan_ospf_conf, "ospf1")
        md5_authentication = ET.SubElement(ospf1, "md5-authentication")
        key_table = ET.SubElement(md5_authentication, "key-table")
        key = ET.SubElement(key_table, "key")
        key.text = kwargs.pop('key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_interface_vlan_ospf_conf_ospf1_md5_authentication_key_table_md5_authentication_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_vlan_ospf_conf = ET.SubElement(ip, "interface-vlan-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_vlan_ospf_conf, "ospf1")
        md5_authentication = ET.SubElement(ospf1, "md5-authentication")
        key_table = ET.SubElement(md5_authentication, "key-table")
        md5_authentication_key = ET.SubElement(key_table, "md5-authentication-key")
        md5_authentication_key.text = kwargs.pop('md5_authentication_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_interface_vlan_ospf_conf_ospf1_cost(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_vlan_ospf_conf = ET.SubElement(ip, "interface-vlan-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_vlan_ospf_conf, "ospf1")
        cost = ET.SubElement(ospf1, "cost")
        cost.text = kwargs.pop('cost')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_interface_vlan_ospf_conf_ospf1_database_filter_all_out(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_vlan_ospf_conf = ET.SubElement(ip, "interface-vlan-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_vlan_ospf_conf, "ospf1")
        database_filter = ET.SubElement(ospf1, "database-filter")
        all_out = ET.SubElement(database_filter, "all-out")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_interface_vlan_ospf_conf_ospf1_database_filter_all_external(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_vlan_ospf_conf = ET.SubElement(ip, "interface-vlan-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_vlan_ospf_conf, "ospf1")
        database_filter = ET.SubElement(ospf1, "database-filter")
        all_external = ET.SubElement(database_filter, "all-external")
        all_external.text = kwargs.pop('all_external')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_interface_vlan_ospf_conf_ospf1_database_filter_all_summary_external(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_vlan_ospf_conf = ET.SubElement(ip, "interface-vlan-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_vlan_ospf_conf, "ospf1")
        database_filter = ET.SubElement(ospf1, "database-filter")
        all_summary_external = ET.SubElement(database_filter, "all-summary-external")
        all_summary_external.text = kwargs.pop('all_summary_external')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_interface_vlan_ospf_conf_ospf1_mtu_ignore(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_vlan_ospf_conf = ET.SubElement(ip, "interface-vlan-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_vlan_ospf_conf, "ospf1")
        mtu_ignore = ET.SubElement(ospf1, "mtu-ignore")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_interface_vlan_ospf_conf_ospf1_network(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_vlan_ospf_conf = ET.SubElement(ip, "interface-vlan-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_vlan_ospf_conf, "ospf1")
        network = ET.SubElement(ospf1, "network")
        network.text = kwargs.pop('network')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_interface_vlan_ospf_conf_ospf1_active(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_vlan_ospf_conf = ET.SubElement(ip, "interface-vlan-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_vlan_ospf_conf, "ospf1")
        active = ET.SubElement(ospf1, "active")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_interface_vlan_ospf_conf_ospf1_passive(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_vlan_ospf_conf = ET.SubElement(ip, "interface-vlan-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_vlan_ospf_conf, "ospf1")
        passive = ET.SubElement(ospf1, "passive")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_interface_vlan_ospf_conf_ospf1_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_vlan_ospf_conf = ET.SubElement(ip, "interface-vlan-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_vlan_ospf_conf, "ospf1")
        priority = ET.SubElement(ospf1, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_pim_intf_vlan_cont_pim_int_cmd_pim_sparse(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        pim_intf_vlan_cont = ET.SubElement(ip, "pim-intf-vlan-cont", xmlns="urn:brocade.com:mgmt:brocade-pim")
        pim_int_cmd = ET.SubElement(pim_intf_vlan_cont, "pim-int-cmd")
        pim_sparse = ET.SubElement(pim_int_cmd, "pim-sparse")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_pim_intf_vlan_cont_pim_int_cmd_pim_dr_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        pim_intf_vlan_cont = ET.SubElement(ip, "pim-intf-vlan-cont", xmlns="urn:brocade.com:mgmt:brocade-pim")
        pim_int_cmd = ET.SubElement(pim_intf_vlan_cont, "pim-int-cmd")
        pim = ET.SubElement(pim_int_cmd, "pim")
        dr_priority = ET.SubElement(pim, "dr-priority")
        dr_priority.text = kwargs.pop('dr_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_pim_intf_vlan_cont_pim_int_cmd_pim_ttl_threshold(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        pim_intf_vlan_cont = ET.SubElement(ip, "pim-intf-vlan-cont", xmlns="urn:brocade.com:mgmt:brocade-pim")
        pim_int_cmd = ET.SubElement(pim_intf_vlan_cont, "pim-int-cmd")
        pim = ET.SubElement(pim_int_cmd, "pim")
        ttl_threshold = ET.SubElement(pim, "ttl-threshold")
        ttl_threshold.text = kwargs.pop('ttl_threshold')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_pim_intf_vlan_cont_pim_int_cmd_multicast_boundary(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(ve, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        pim_intf_vlan_cont = ET.SubElement(ip, "pim-intf-vlan-cont", xmlns="urn:brocade.com:mgmt:brocade-pim")
        pim_int_cmd = ET.SubElement(pim_intf_vlan_cont, "pim-int-cmd")
        multicast_boundary = ET.SubElement(pim_int_cmd, "multicast-boundary")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_shutdown(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        shutdown = ET.SubElement(ve, "shutdown", xmlns="urn:brocade.com:mgmt:brocade-ip-config")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_config_address_use_link_local_only(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config")
        address = ET.SubElement(ipv6_config, "address")
        use_link_local_only = ET.SubElement(address, "use-link-local-only")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_config_address_link_local_config_link_local_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config")
        address = ET.SubElement(ipv6_config, "address")
        link_local_config = ET.SubElement(address, "link-local-config")
        link_local_address = ET.SubElement(link_local_config, "link-local-address")
        link_local_address.text = kwargs.pop('link_local_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_config_address_link_local_config_link_local(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config")
        address = ET.SubElement(ipv6_config, "address")
        link_local_config = ET.SubElement(address, "link-local-config")
        link_local = ET.SubElement(link_local_config, "link-local")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_config_address_ipv6_address_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config")
        address = ET.SubElement(ipv6_config, "address")
        ipv6_address = ET.SubElement(address, "ipv6-address")
        address = ET.SubElement(ipv6_address, "address")
        address.text = kwargs.pop('address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_config_address_ipv6_address_secondary(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config")
        address = ET.SubElement(ipv6_config, "address")
        ipv6_address = ET.SubElement(address, "ipv6-address")
        address_key = ET.SubElement(ipv6_address, "address")
        address_key.text = kwargs.pop('address')
        secondary = ET.SubElement(ipv6_address, "secondary")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_config_address_ipv6_address_eui_config_eui64(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config")
        address = ET.SubElement(ipv6_config, "address")
        ipv6_address = ET.SubElement(address, "ipv6-address")
        address_key = ET.SubElement(ipv6_address, "address")
        address_key.text = kwargs.pop('address')
        eui_config = ET.SubElement(ipv6_address, "eui-config")
        eui64 = ET.SubElement(eui_config, "eui64")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_config_address_ipv6_address_eui_config_eui_secondary(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config")
        address = ET.SubElement(ipv6_config, "address")
        ipv6_address = ET.SubElement(address, "ipv6-address")
        address_key = ET.SubElement(ipv6_address, "address")
        address_key.text = kwargs.pop('address')
        eui_config = ET.SubElement(ipv6_address, "eui-config")
        eui_secondary = ET.SubElement(eui_config, "eui-secondary")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_config_address_ipv6_address_anycast(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config")
        address = ET.SubElement(ipv6_config, "address")
        ipv6_address = ET.SubElement(address, "ipv6-address")
        address_key = ET.SubElement(ipv6_address, "address")
        address_key.text = kwargs.pop('address')
        anycast = ET.SubElement(ipv6_address, "anycast")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_config_mtu(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config")
        mtu = ET.SubElement(ipv6_config, "mtu")
        mtu.text = kwargs.pop('mtu')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_local_anycast_gateway_local_ipv6_gw_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_local_anycast_gateway = ET.SubElement(ipv6, "ipv6-local-anycast-gateway", xmlns="urn:brocade.com:mgmt:brocade-anycast-gateway")
        local_ipv6_gw_id = ET.SubElement(ipv6_local_anycast_gateway, "local-ipv6-gw-id")
        local_ipv6_gw_id.text = kwargs.pop('local_ipv6_gw_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_local_anycast_gateway_ipv6_track_ipv6_interface_ipv6_interface_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_local_anycast_gateway = ET.SubElement(ipv6, "ipv6-local-anycast-gateway", xmlns="urn:brocade.com:mgmt:brocade-anycast-gateway")
        local_ipv6_gw_id_key = ET.SubElement(ipv6_local_anycast_gateway, "local-ipv6-gw-id")
        local_ipv6_gw_id_key.text = kwargs.pop('local_ipv6_gw_id')
        ipv6_track = ET.SubElement(ipv6_local_anycast_gateway, "ipv6-track")
        ipv6_interface = ET.SubElement(ipv6_track, "ipv6-interface")
        ipv6_interface_name_key = ET.SubElement(ipv6_interface, "ipv6-interface-name")
        ipv6_interface_name_key.text = kwargs.pop('ipv6_interface_name')
        ipv6_interface_type = ET.SubElement(ipv6_interface, "ipv6-interface-type")
        ipv6_interface_type.text = kwargs.pop('ipv6_interface_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_local_anycast_gateway_ipv6_track_ipv6_interface_ipv6_interface_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_local_anycast_gateway = ET.SubElement(ipv6, "ipv6-local-anycast-gateway", xmlns="urn:brocade.com:mgmt:brocade-anycast-gateway")
        local_ipv6_gw_id_key = ET.SubElement(ipv6_local_anycast_gateway, "local-ipv6-gw-id")
        local_ipv6_gw_id_key.text = kwargs.pop('local_ipv6_gw_id')
        ipv6_track = ET.SubElement(ipv6_local_anycast_gateway, "ipv6-track")
        ipv6_interface = ET.SubElement(ipv6_track, "ipv6-interface")
        ipv6_interface_type_key = ET.SubElement(ipv6_interface, "ipv6-interface-type")
        ipv6_interface_type_key.text = kwargs.pop('ipv6_interface_type')
        ipv6_interface_name = ET.SubElement(ipv6_interface, "ipv6-interface-name")
        ipv6_interface_name.text = kwargs.pop('ipv6_interface_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_local_anycast_gateway_ipv6_track_ipv6_interface_ipv6_interface_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_local_anycast_gateway = ET.SubElement(ipv6, "ipv6-local-anycast-gateway", xmlns="urn:brocade.com:mgmt:brocade-anycast-gateway")
        local_ipv6_gw_id_key = ET.SubElement(ipv6_local_anycast_gateway, "local-ipv6-gw-id")
        local_ipv6_gw_id_key.text = kwargs.pop('local_ipv6_gw_id')
        ipv6_track = ET.SubElement(ipv6_local_anycast_gateway, "ipv6-track")
        ipv6_interface = ET.SubElement(ipv6_track, "ipv6-interface")
        ipv6_interface_type_key = ET.SubElement(ipv6_interface, "ipv6-interface-type")
        ipv6_interface_type_key.text = kwargs.pop('ipv6_interface_type')
        ipv6_interface_name_key = ET.SubElement(ipv6_interface, "ipv6-interface-name")
        ipv6_interface_name_key.text = kwargs.pop('ipv6_interface_name')
        ipv6_interface_priority = ET.SubElement(ipv6_interface, "ipv6-interface-priority")
        ipv6_interface_priority.text = kwargs.pop('ipv6_interface_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_local_anycast_gateway_ipv6_track_ipv6_network_ipv6_network_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_local_anycast_gateway = ET.SubElement(ipv6, "ipv6-local-anycast-gateway", xmlns="urn:brocade.com:mgmt:brocade-anycast-gateway")
        local_ipv6_gw_id_key = ET.SubElement(ipv6_local_anycast_gateway, "local-ipv6-gw-id")
        local_ipv6_gw_id_key.text = kwargs.pop('local_ipv6_gw_id')
        ipv6_track = ET.SubElement(ipv6_local_anycast_gateway, "ipv6-track")
        ipv6_network = ET.SubElement(ipv6_track, "ipv6-network")
        ipv6_network_address = ET.SubElement(ipv6_network, "ipv6-network-address")
        ipv6_network_address.text = kwargs.pop('ipv6_network_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_local_anycast_gateway_ipv6_track_ipv6_network_ipv6_network_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_local_anycast_gateway = ET.SubElement(ipv6, "ipv6-local-anycast-gateway", xmlns="urn:brocade.com:mgmt:brocade-anycast-gateway")
        local_ipv6_gw_id_key = ET.SubElement(ipv6_local_anycast_gateway, "local-ipv6-gw-id")
        local_ipv6_gw_id_key.text = kwargs.pop('local_ipv6_gw_id')
        ipv6_track = ET.SubElement(ipv6_local_anycast_gateway, "ipv6-track")
        ipv6_network = ET.SubElement(ipv6_track, "ipv6-network")
        ipv6_network_address_key = ET.SubElement(ipv6_network, "ipv6-network-address")
        ipv6_network_address_key.text = kwargs.pop('ipv6_network_address')
        ipv6_network_priority = ET.SubElement(ipv6_network, "ipv6-network-priority")
        ipv6_network_priority.text = kwargs.pop('ipv6_network_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_local_anycast_gateway_ipv6_track_ipv6_next_hop_ipv6_next_hop_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_local_anycast_gateway = ET.SubElement(ipv6, "ipv6-local-anycast-gateway", xmlns="urn:brocade.com:mgmt:brocade-anycast-gateway")
        local_ipv6_gw_id_key = ET.SubElement(ipv6_local_anycast_gateway, "local-ipv6-gw-id")
        local_ipv6_gw_id_key.text = kwargs.pop('local_ipv6_gw_id')
        ipv6_track = ET.SubElement(ipv6_local_anycast_gateway, "ipv6-track")
        ipv6_next_hop = ET.SubElement(ipv6_track, "ipv6-next-hop")
        ipv6_next_hop_address = ET.SubElement(ipv6_next_hop, "ipv6-next-hop-address")
        ipv6_next_hop_address.text = kwargs.pop('ipv6_next_hop_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_local_anycast_gateway_ipv6_track_ipv6_next_hop_ipv6_next_hop_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_local_anycast_gateway = ET.SubElement(ipv6, "ipv6-local-anycast-gateway", xmlns="urn:brocade.com:mgmt:brocade-anycast-gateway")
        local_ipv6_gw_id_key = ET.SubElement(ipv6_local_anycast_gateway, "local-ipv6-gw-id")
        local_ipv6_gw_id_key.text = kwargs.pop('local_ipv6_gw_id')
        ipv6_track = ET.SubElement(ipv6_local_anycast_gateway, "ipv6-track")
        ipv6_next_hop = ET.SubElement(ipv6_track, "ipv6-next-hop")
        ipv6_next_hop_address_key = ET.SubElement(ipv6_next_hop, "ipv6-next-hop-address")
        ipv6_next_hop_address_key.text = kwargs.pop('ipv6_next_hop_address')
        ipv6_next_hop_priority = ET.SubElement(ipv6_next_hop, "ipv6-next-hop-priority")
        ipv6_next_hop_priority.text = kwargs.pop('ipv6_next_hop_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_local_anycast_gateway_enable_local(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_local_anycast_gateway = ET.SubElement(ipv6, "ipv6-local-anycast-gateway", xmlns="urn:brocade.com:mgmt:brocade-anycast-gateway")
        local_ipv6_gw_id_key = ET.SubElement(ipv6_local_anycast_gateway, "local-ipv6-gw-id")
        local_ipv6_gw_id_key.text = kwargs.pop('local_ipv6_gw_id')
        enable_local = ET.SubElement(ipv6_local_anycast_gateway, "enable_local")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_local_anycast_gateway_disable_local(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_local_anycast_gateway = ET.SubElement(ipv6, "ipv6-local-anycast-gateway", xmlns="urn:brocade.com:mgmt:brocade-anycast-gateway")
        local_ipv6_gw_id_key = ET.SubElement(ipv6_local_anycast_gateway, "local-ipv6-gw-id")
        local_ipv6_gw_id_key.text = kwargs.pop('local_ipv6_gw_id')
        disable_local = ET.SubElement(ipv6_local_anycast_gateway, "disable_local")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_local_anycast_gateway_load_balancing_basic(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_local_anycast_gateway = ET.SubElement(ipv6, "ipv6-local-anycast-gateway", xmlns="urn:brocade.com:mgmt:brocade-anycast-gateway")
        local_ipv6_gw_id_key = ET.SubElement(ipv6_local_anycast_gateway, "local-ipv6-gw-id")
        local_ipv6_gw_id_key.text = kwargs.pop('local_ipv6_gw_id')
        load_balancing = ET.SubElement(ipv6_local_anycast_gateway, "load-balancing")
        basic = ET.SubElement(load_balancing, "basic")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_local_anycast_gateway_load_balancing_threshold_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_local_anycast_gateway = ET.SubElement(ipv6, "ipv6-local-anycast-gateway", xmlns="urn:brocade.com:mgmt:brocade-anycast-gateway")
        local_ipv6_gw_id_key = ET.SubElement(ipv6_local_anycast_gateway, "local-ipv6-gw-id")
        local_ipv6_gw_id_key.text = kwargs.pop('local_ipv6_gw_id')
        load_balancing = ET.SubElement(ipv6_local_anycast_gateway, "load-balancing")
        threshold_priority = ET.SubElement(load_balancing, "threshold-priority")
        threshold_priority.text = kwargs.pop('threshold_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_local_anycast_gateway_install_default_route(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_local_anycast_gateway = ET.SubElement(ipv6, "ipv6-local-anycast-gateway", xmlns="urn:brocade.com:mgmt:brocade-anycast-gateway")
        local_ipv6_gw_id_key = ET.SubElement(ipv6_local_anycast_gateway, "local-ipv6-gw-id")
        local_ipv6_gw_id_key.text = kwargs.pop('local_ipv6_gw_id')
        install_default_route = ET.SubElement(ipv6_local_anycast_gateway, "install-default-route")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_interface_ve_dhcp_conf_dhcp_relay_servers_relay_ip_addr(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ve_dhcp_conf = ET.SubElement(ipv6, "interface-ve-dhcp-conf", xmlns="urn:brocade.com:mgmt:brocade-dhcpv6")
        dhcp = ET.SubElement(interface_ve_dhcp_conf, "dhcp")
        relay = ET.SubElement(dhcp, "relay")
        servers = ET.SubElement(relay, "servers")
        relay_ip_addr = ET.SubElement(servers, "relay-ip-addr")
        relay_ip_addr.text = kwargs.pop('relay_ip_addr')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_interface_ve_dhcp_conf_dhcp_relay_servers_server_vrf_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ve_dhcp_conf = ET.SubElement(ipv6, "interface-ve-dhcp-conf", xmlns="urn:brocade.com:mgmt:brocade-dhcpv6")
        dhcp = ET.SubElement(interface_ve_dhcp_conf, "dhcp")
        relay = ET.SubElement(dhcp, "relay")
        servers = ET.SubElement(relay, "servers")
        relay_ip_addr_key = ET.SubElement(servers, "relay-ip-addr")
        relay_ip_addr_key.text = kwargs.pop('relay_ip_addr')
        server_vrf_name = ET.SubElement(servers, "server-vrf-name")
        server_vrf_name.text = kwargs.pop('server_vrf_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_interface_ve_dhcp_conf_dhcp_relay_servers_interface_interface_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ve_dhcp_conf = ET.SubElement(ipv6, "interface-ve-dhcp-conf", xmlns="urn:brocade.com:mgmt:brocade-dhcpv6")
        dhcp = ET.SubElement(interface_ve_dhcp_conf, "dhcp")
        relay = ET.SubElement(dhcp, "relay")
        servers = ET.SubElement(relay, "servers")
        relay_ip_addr_key = ET.SubElement(servers, "relay-ip-addr")
        relay_ip_addr_key.text = kwargs.pop('relay_ip_addr')
        interface = ET.SubElement(servers, "interface")
        interface_type = ET.SubElement(interface, "interface-type")
        interface_type.text = kwargs.pop('interface_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_interface_ve_dhcp_conf_dhcp_relay_servers_interface_interface_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ve_dhcp_conf = ET.SubElement(ipv6, "interface-ve-dhcp-conf", xmlns="urn:brocade.com:mgmt:brocade-dhcpv6")
        dhcp = ET.SubElement(interface_ve_dhcp_conf, "dhcp")
        relay = ET.SubElement(dhcp, "relay")
        servers = ET.SubElement(relay, "servers")
        relay_ip_addr_key = ET.SubElement(servers, "relay-ip-addr")
        relay_ip_addr_key.text = kwargs.pop('relay_ip_addr')
        interface = ET.SubElement(servers, "interface")
        interface_name = ET.SubElement(interface, "interface-name")
        interface_name.text = kwargs.pop('interface_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_icmpv6_echo_reply(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        icmpv6 = ET.SubElement(ipv6, "icmpv6", xmlns="urn:brocade.com:mgmt:brocade-icmp")
        echo_reply = ET.SubElement(icmpv6, "echo-reply")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_icmpv6_rate_limiting(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        icmpv6 = ET.SubElement(ipv6, "icmpv6", xmlns="urn:brocade.com:mgmt:brocade-icmp")
        rate_limiting = ET.SubElement(icmpv6, "rate-limiting")
        rate_limiting.text = kwargs.pop('rate_limiting')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_icmpv6_unreachable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        icmpv6 = ET.SubElement(ipv6, "icmpv6", xmlns="urn:brocade.com:mgmt:brocade-icmp")
        unreachable = ET.SubElement(icmpv6, "unreachable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_icmpv6_redirect(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        icmpv6 = ET.SubElement(ipv6, "icmpv6", xmlns="urn:brocade.com:mgmt:brocade-icmp")
        redirect = ET.SubElement(icmpv6, "redirect")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_policy_route_map_ipv6_route_map_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        policy = ET.SubElement(ipv6, "policy", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        route_map = ET.SubElement(policy, "route-map")
        ipv6_route_map_name = ET.SubElement(route_map, "ipv6-route-map-name")
        ipv6_route_map_name.text = kwargs.pop('ipv6_route_map_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_nd_ra_ipv6_intf_cmds_vrrp_suppress_interface_ra(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        vrrp_suppress_interface_ra = ET.SubElement(ipv6_intf_cmds, "vrrp-suppress-interface-ra")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_managed_config_flag(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        managed_config_flag = ET.SubElement(nd, "managed-config-flag")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_other_config_flag(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        other_config_flag = ET.SubElement(nd, "other-config-flag")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_broadcast_mac_trap(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        broadcast_mac_trap = ET.SubElement(nd, "broadcast-mac-trap")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_ra_lifetime(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        ra_lifetime = ET.SubElement(nd, "ra-lifetime")
        ra_lifetime.text = kwargs.pop('ra_lifetime')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_reachable_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        reachable_time = ET.SubElement(nd, "reachable-time")
        reachable_time.text = kwargs.pop('reachable_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_mtu(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        mtu = ET.SubElement(nd, "mtu")
        mtu.text = kwargs.pop('mtu')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_retrans_timer(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        retrans_timer = ET.SubElement(nd, "retrans-timer")
        retrans_timer.text = kwargs.pop('retrans_timer')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_hoplimit(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        hoplimit = ET.SubElement(nd, "hoplimit")
        hoplimit.text = kwargs.pop('hoplimit')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_ns_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        ns_interval = ET.SubElement(nd, "ns-interval")
        ns_interval.text = kwargs.pop('ns_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_proxy(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        proxy = ET.SubElement(nd, "proxy")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_suppress_ra_suppress_ra_flag(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        suppress_ra = ET.SubElement(nd, "suppress-ra")
        suppress_ra_flag = ET.SubElement(suppress_ra, "suppress-ra-flag")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_suppress_ra_suppress_ra_mtu(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        suppress_ra = ET.SubElement(nd, "suppress-ra")
        suppress_ra_mtu = ET.SubElement(suppress_ra, "suppress-ra-mtu")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_suppress_ra_suppress_ra_all(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        suppress_ra = ET.SubElement(nd, "suppress-ra")
        suppress_ra_all = ET.SubElement(suppress_ra, "suppress-ra-all")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_ra_interval_max_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        ra_interval = ET.SubElement(nd, "ra-interval")
        max_interval = ET.SubElement(ra_interval, "max-interval")
        max_interval.text = kwargs.pop('max_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_ra_interval_min(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        ra_interval = ET.SubElement(nd, "ra-interval")
        min = ET.SubElement(ra_interval, "min")
        min.text = kwargs.pop('min')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_dad_attempts(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        dad = ET.SubElement(nd, "dad")
        attempts = ET.SubElement(dad, "attempts")
        attempts.text = kwargs.pop('attempts')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_dad_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        dad = ET.SubElement(nd, "dad")
        time = ET.SubElement(dad, "time")
        time.text = kwargs.pop('time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_nud_retry_base(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        nud = ET.SubElement(nd, "nud")
        retry = ET.SubElement(nud, "retry")
        base = ET.SubElement(retry, "base")
        base.text = kwargs.pop('base')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_nud_retry_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        nud = ET.SubElement(nd, "nud")
        retry = ET.SubElement(nud, "retry")
        interval = ET.SubElement(retry, "interval")
        interval.text = kwargs.pop('interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_nud_retry_max_attempts(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        nud = ET.SubElement(nd, "nud")
        retry = ET.SubElement(nud, "retry")
        max_attempts = ET.SubElement(retry, "max-attempts")
        max_attempts.text = kwargs.pop('max_attempts')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_cache_expire(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        cache = ET.SubElement(nd, "cache")
        expire = ET.SubElement(cache, "expire")
        expire.text = kwargs.pop('expire')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_prefix_prefix_ipv6_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        prefix = ET.SubElement(nd, "prefix")
        prefix_ipv6_address = ET.SubElement(prefix, "prefix-ipv6-address")
        prefix_ipv6_address.text = kwargs.pop('prefix_ipv6_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_prefix_lifetime_ch_valid_type_ca_no_advertise_no_advertise(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        prefix = ET.SubElement(nd, "prefix")
        prefix_ipv6_address_key = ET.SubElement(prefix, "prefix-ipv6-address")
        prefix_ipv6_address_key.text = kwargs.pop('prefix_ipv6_address')
        lifetime = ET.SubElement(prefix, "lifetime")
        ch_valid_type = ET.SubElement(lifetime, "ch-valid-type")
        ca_no_advertise = ET.SubElement(ch_valid_type, "ca-no-advertise")
        no_advertise = ET.SubElement(ca_no_advertise, "no-advertise")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_prefix_lifetime_ch_valid_type_ca_valid_lifetime_valid_lifetime(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        prefix = ET.SubElement(nd, "prefix")
        prefix_ipv6_address_key = ET.SubElement(prefix, "prefix-ipv6-address")
        prefix_ipv6_address_key.text = kwargs.pop('prefix_ipv6_address')
        lifetime = ET.SubElement(prefix, "lifetime")
        ch_valid_type = ET.SubElement(lifetime, "ch-valid-type")
        ca_valid_lifetime = ET.SubElement(ch_valid_type, "ca-valid-lifetime")
        valid_lifetime = ET.SubElement(ca_valid_lifetime, "valid-lifetime")
        valid_lifetime.text = kwargs.pop('valid_lifetime')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_prefix_lifetime_ch_valid_type_ca_valid_infinite_valid_infinite(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        prefix = ET.SubElement(nd, "prefix")
        prefix_ipv6_address_key = ET.SubElement(prefix, "prefix-ipv6-address")
        prefix_ipv6_address_key.text = kwargs.pop('prefix_ipv6_address')
        lifetime = ET.SubElement(prefix, "lifetime")
        ch_valid_type = ET.SubElement(lifetime, "ch-valid-type")
        ca_valid_infinite = ET.SubElement(ch_valid_type, "ca-valid-infinite")
        valid_infinite = ET.SubElement(ca_valid_infinite, "valid-infinite")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_prefix_lifetime_preferred_ch_preferred_type_ca_preferred_lifetime_preferred_lifetime(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        prefix = ET.SubElement(nd, "prefix")
        prefix_ipv6_address_key = ET.SubElement(prefix, "prefix-ipv6-address")
        prefix_ipv6_address_key.text = kwargs.pop('prefix_ipv6_address')
        lifetime = ET.SubElement(prefix, "lifetime")
        preferred = ET.SubElement(lifetime, "preferred")
        ch_preferred_type = ET.SubElement(preferred, "ch-preferred-type")
        ca_preferred_lifetime = ET.SubElement(ch_preferred_type, "ca-preferred-lifetime")
        preferred_lifetime = ET.SubElement(ca_preferred_lifetime, "preferred-lifetime")
        preferred_lifetime.text = kwargs.pop('preferred_lifetime')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_prefix_lifetime_preferred_ch_preferred_type_ca_preferred_infinite_preferred_infinite(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        prefix = ET.SubElement(nd, "prefix")
        prefix_ipv6_address_key = ET.SubElement(prefix, "prefix-ipv6-address")
        prefix_ipv6_address_key.text = kwargs.pop('prefix_ipv6_address')
        lifetime = ET.SubElement(prefix, "lifetime")
        preferred = ET.SubElement(lifetime, "preferred")
        ch_preferred_type = ET.SubElement(preferred, "ch-preferred-type")
        ca_preferred_infinite = ET.SubElement(ch_preferred_type, "ca-preferred-infinite")
        preferred_infinite = ET.SubElement(ca_preferred_infinite, "preferred-infinite")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_prefix_lifetime_preferred_prefix_flags_no_autoconfig(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        prefix = ET.SubElement(nd, "prefix")
        prefix_ipv6_address_key = ET.SubElement(prefix, "prefix-ipv6-address")
        prefix_ipv6_address_key.text = kwargs.pop('prefix_ipv6_address')
        lifetime = ET.SubElement(prefix, "lifetime")
        preferred = ET.SubElement(lifetime, "preferred")
        prefix_flags = ET.SubElement(preferred, "prefix-flags")
        no_autoconfig = ET.SubElement(prefix_flags, "no-autoconfig")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_prefix_lifetime_preferred_prefix_flags_no_onlink(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        prefix = ET.SubElement(nd, "prefix")
        prefix_ipv6_address_key = ET.SubElement(prefix, "prefix-ipv6-address")
        prefix_ipv6_address_key.text = kwargs.pop('prefix_ipv6_address')
        lifetime = ET.SubElement(prefix, "lifetime")
        preferred = ET.SubElement(lifetime, "preferred")
        prefix_flags = ET.SubElement(preferred, "prefix-flags")
        no_onlink = ET.SubElement(prefix_flags, "no-onlink")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_prefix_lifetime_preferred_prefix_flags_off_link(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        prefix = ET.SubElement(nd, "prefix")
        prefix_ipv6_address_key = ET.SubElement(prefix, "prefix-ipv6-address")
        prefix_ipv6_address_key.text = kwargs.pop('prefix_ipv6_address')
        lifetime = ET.SubElement(prefix, "lifetime")
        preferred = ET.SubElement(lifetime, "preferred")
        prefix_flags = ET.SubElement(preferred, "prefix-flags")
        off_link = ET.SubElement(prefix_flags, "off-link")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_nd_ra_ipv6_intf_cmds_neighbor_ipv6_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        neighbor = ET.SubElement(ipv6_intf_cmds, "neighbor")
        ipv6_address = ET.SubElement(neighbor, "ipv6-address")
        ipv6_address.text = kwargs.pop('ipv6_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_nd_ra_ipv6_intf_cmds_neighbor_hardware_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        neighbor = ET.SubElement(ipv6_intf_cmds, "neighbor")
        ipv6_address_key = ET.SubElement(neighbor, "ipv6-address")
        ipv6_address_key.text = kwargs.pop('ipv6_address')
        hardware_address = ET.SubElement(neighbor, "hardware-address")
        hardware_address.text = kwargs.pop('hardware_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_ipv6_ve_intf_cmds_hop_by_hop_trap(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_ve_intf_cmds = ET.SubElement(ipv6, "ipv6-ve-intf-cmds", xmlns="urn:brocade.com:mgmt:brocade-mld-snooping")
        hop_by_hop_trap = ET.SubElement(ipv6_ve_intf_cmds, "hop-by-hop-trap")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_interface_ospfv3_conf_interface_area(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        interface_area = ET.SubElement(interface_ospfv3_conf, "interface-area")
        interface_area.text = kwargs.pop('interface_area')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_interface_ospfv3_conf_active(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        active = ET.SubElement(interface_ospfv3_conf, "active")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_interface_ospfv3_conf_passive(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        passive = ET.SubElement(interface_ospfv3_conf, "passive")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_interface_ospfv3_conf_bfd(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        bfd = ET.SubElement(interface_ospfv3_conf, "bfd")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_interface_ospfv3_conf_cost(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        cost = ET.SubElement(interface_ospfv3_conf, "cost")
        cost.text = kwargs.pop('cost')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_interface_ospfv3_conf_instance(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        instance = ET.SubElement(interface_ospfv3_conf, "instance")
        instance.text = kwargs.pop('instance')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_interface_ospfv3_conf_mtu_ignore(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        mtu_ignore = ET.SubElement(interface_ospfv3_conf, "mtu-ignore")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_interface_ospfv3_conf_network(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        network = ET.SubElement(interface_ospfv3_conf, "network")
        network.text = kwargs.pop('network')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_interface_ospfv3_conf_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        priority = ET.SubElement(interface_ospfv3_conf, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_interface_ospfv3_conf_suppress_linklsa(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        suppress_linklsa = ET.SubElement(interface_ospfv3_conf, "suppress-linklsa")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_spi(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        spi = ET.SubElement(ipsec_auth_key_config, "spi")
        spi.text = kwargs.pop('spi')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_ah_algorithm_ah(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_ah_algorithm = ET.SubElement(ch_algorithm, "ca-ah-algorithm")
        ah = ET.SubElement(ca_ah_algorithm, "ah")
        ah.text = kwargs.pop('ah')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_ah_algorithm_ah_no_encrypt(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_ah_algorithm = ET.SubElement(ch_algorithm, "ca-ah-algorithm")
        ah_no_encrypt = ET.SubElement(ca_ah_algorithm, "ah-no-encrypt")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_ah_algorithm_ah_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_ah_algorithm = ET.SubElement(ch_algorithm, "ca-ah-algorithm")
        ah_key = ET.SubElement(ca_ah_algorithm, "ah-key")
        ah_key.text = kwargs.pop('ah_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp = ET.SubElement(ca_esp_algorithm, "esp")
        esp.text = kwargs.pop('esp')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp_no_encrypt(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp_no_encrypt = ET.SubElement(ca_esp_algorithm, "esp-no-encrypt")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp_key = ET.SubElement(ca_esp_algorithm, "esp-key")
        esp_key.text = kwargs.pop('esp_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp_auth(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp_auth = ET.SubElement(ca_esp_algorithm, "esp-auth")
        esp_auth.text = kwargs.pop('esp_auth')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp_auth_no_encrypt(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp_auth_no_encrypt = ET.SubElement(ca_esp_algorithm, "esp-auth-no-encrypt")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp_auth_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp_auth_key = ET.SubElement(ca_esp_algorithm, "esp-auth-key")
        esp_auth_key.text = kwargs.pop('esp_auth_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_interface_ospfv3_conf_authentication_ipsec_ipsec_authentication_disable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec = ET.SubElement(authentication, "ipsec")
        ipsec_authentication_disable = ET.SubElement(ipsec, "ipsec-authentication-disable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_interface_ospfv3_conf_authentication_ipsec_ifc_key_add_remove_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec = ET.SubElement(authentication, "ipsec")
        ifc_key_add_remove_interval = ET.SubElement(ipsec, "ifc-key-add-remove-interval")
        ifc_key_add_remove_interval.text = kwargs.pop('ifc_key_add_remove_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_interface_ospfv3_conf_link_interval_properties_hello_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        link_interval_properties = ET.SubElement(interface_ospfv3_conf, "link-interval-properties")
        hello_interval = ET.SubElement(link_interval_properties, "hello-interval")
        hello_interval.text = kwargs.pop('hello_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_interface_ospfv3_conf_link_interval_properties_dead_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        link_interval_properties = ET.SubElement(interface_ospfv3_conf, "link-interval-properties")
        dead_interval = ET.SubElement(link_interval_properties, "dead-interval")
        dead_interval.text = kwargs.pop('dead_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_interface_ospfv3_conf_link_interval_properties_hello_jitter(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        link_interval_properties = ET.SubElement(interface_ospfv3_conf, "link-interval-properties")
        hello_jitter = ET.SubElement(link_interval_properties, "hello-jitter")
        hello_jitter.text = kwargs.pop('hello_jitter')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_interface_ospfv3_conf_link_interval_properties_retransmit_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        link_interval_properties = ET.SubElement(interface_ospfv3_conf, "link-interval-properties")
        retransmit_interval = ET.SubElement(link_interval_properties, "retransmit-interval")
        retransmit_interval.text = kwargs.pop('retransmit_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_interface_ospfv3_conf_link_interval_properties_transmit_delay(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        link_interval_properties = ET.SubElement(interface_ospfv3_conf, "link-interval-properties")
        transmit_delay = ET.SubElement(link_interval_properties, "transmit-delay")
        transmit_delay.text = kwargs.pop('transmit_delay')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_vrrpv3_vrid(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        vrrpv3 = ET.SubElement(ipv6, "vrrpv3", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid = ET.SubElement(vrrpv3, "vrid")
        vrid.text = kwargs.pop('vrid')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_vrrpv3_use_v2_checksum(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        vrrpv3 = ET.SubElement(ipv6, "vrrpv3", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        use_v2_checksum = ET.SubElement(vrrpv3, "use-v2-checksum")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_vrrpv3_virtual_ip_virtual_ipaddr(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        vrrpv3 = ET.SubElement(ipv6, "vrrpv3", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        virtual_ip = ET.SubElement(vrrpv3, "virtual-ip")
        virtual_ipaddr = ET.SubElement(virtual_ip, "virtual-ipaddr")
        virtual_ipaddr.text = kwargs.pop('virtual_ipaddr')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_vrrpv3_track_interface_interface_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        vrrpv3 = ET.SubElement(ipv6, "vrrpv3", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        track = ET.SubElement(vrrpv3, "track")
        interface = ET.SubElement(track, "interface")
        interface_name_key = ET.SubElement(interface, "interface-name")
        interface_name_key.text = kwargs.pop('interface_name')
        interface_type = ET.SubElement(interface, "interface-type")
        interface_type.text = kwargs.pop('interface_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_vrrpv3_track_interface_interface_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        vrrpv3 = ET.SubElement(ipv6, "vrrpv3", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        track = ET.SubElement(vrrpv3, "track")
        interface = ET.SubElement(track, "interface")
        interface_type_key = ET.SubElement(interface, "interface-type")
        interface_type_key.text = kwargs.pop('interface_type')
        interface_name = ET.SubElement(interface, "interface-name")
        interface_name.text = kwargs.pop('interface_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_vrrpv3_track_interface_track_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        vrrpv3 = ET.SubElement(ipv6, "vrrpv3", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        track = ET.SubElement(vrrpv3, "track")
        interface = ET.SubElement(track, "interface")
        interface_type_key = ET.SubElement(interface, "interface-type")
        interface_type_key.text = kwargs.pop('interface_type')
        interface_name_key = ET.SubElement(interface, "interface-name")
        interface_name_key.text = kwargs.pop('interface_name')
        track_priority = ET.SubElement(interface, "track-priority")
        track_priority.text = kwargs.pop('track_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_vrrpv3_advertisement_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        vrrpv3 = ET.SubElement(ipv6, "vrrpv3", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        advertisement_interval = ET.SubElement(vrrpv3, "advertisement-interval")
        advertisement_interval.text = kwargs.pop('advertisement_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_vrrpv3_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        vrrpv3 = ET.SubElement(ipv6, "vrrpv3", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        enable = ET.SubElement(vrrpv3, "enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_vrrpv3_hold_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        vrrpv3 = ET.SubElement(ipv6, "vrrpv3", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        hold_time = ET.SubElement(vrrpv3, "hold-time")
        hold_time.text = kwargs.pop('hold_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_vrrpv3_preempt_mode(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        vrrpv3 = ET.SubElement(ipv6, "vrrpv3", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        preempt_mode = ET.SubElement(vrrpv3, "preempt-mode")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_vrrpv3_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        vrrpv3 = ET.SubElement(ipv6, "vrrpv3", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        priority = ET.SubElement(vrrpv3, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_vrrpv3_description(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        vrrpv3 = ET.SubElement(ipv6, "vrrpv3", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        description = ET.SubElement(vrrpv3, "description")
        description.text = kwargs.pop('description')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_vrrpv3e_vrid(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        vrrpv3e = ET.SubElement(ipv6, "vrrpv3e", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid = ET.SubElement(vrrpv3e, "vrid")
        vrid.text = kwargs.pop('vrid')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_vrrpv3e_virtual_mac_vmac(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        vrrpv3e = ET.SubElement(ipv6, "vrrpv3e", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        virtual_mac = ET.SubElement(vrrpv3e, "virtual-mac")
        vmac = ET.SubElement(virtual_mac, "vmac")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_vrrpv3e_virtual_ip_virtual_ipaddr(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        vrrpv3e = ET.SubElement(ipv6, "vrrpv3e", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        virtual_ip = ET.SubElement(vrrpv3e, "virtual-ip")
        virtual_ipaddr = ET.SubElement(virtual_ip, "virtual-ipaddr")
        virtual_ipaddr.text = kwargs.pop('virtual_ipaddr')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_vrrpv3e_track_interface_interface_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        vrrpv3e = ET.SubElement(ipv6, "vrrpv3e", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        track = ET.SubElement(vrrpv3e, "track")
        interface = ET.SubElement(track, "interface")
        interface_name_key = ET.SubElement(interface, "interface-name")
        interface_name_key.text = kwargs.pop('interface_name')
        interface_type = ET.SubElement(interface, "interface-type")
        interface_type.text = kwargs.pop('interface_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_vrrpv3e_track_interface_interface_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        vrrpv3e = ET.SubElement(ipv6, "vrrpv3e", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        track = ET.SubElement(vrrpv3e, "track")
        interface = ET.SubElement(track, "interface")
        interface_type_key = ET.SubElement(interface, "interface-type")
        interface_type_key.text = kwargs.pop('interface_type')
        interface_name = ET.SubElement(interface, "interface-name")
        interface_name.text = kwargs.pop('interface_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_vrrpv3e_track_interface_track_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        vrrpv3e = ET.SubElement(ipv6, "vrrpv3e", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        track = ET.SubElement(vrrpv3e, "track")
        interface = ET.SubElement(track, "interface")
        interface_type_key = ET.SubElement(interface, "interface-type")
        interface_type_key.text = kwargs.pop('interface_type')
        interface_name_key = ET.SubElement(interface, "interface-name")
        interface_name_key.text = kwargs.pop('interface_name')
        track_priority = ET.SubElement(interface, "track-priority")
        track_priority.text = kwargs.pop('track_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_vrrpv3e_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        vrrpv3e = ET.SubElement(ipv6, "vrrpv3e", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        enable = ET.SubElement(vrrpv3e, "enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_vrrpv3e_hold_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        vrrpv3e = ET.SubElement(ipv6, "vrrpv3e", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        hold_time = ET.SubElement(vrrpv3e, "hold-time")
        hold_time.text = kwargs.pop('hold_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_vrrpv3e_preempt_mode(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        vrrpv3e = ET.SubElement(ipv6, "vrrpv3e", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        preempt_mode = ET.SubElement(vrrpv3e, "preempt-mode")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_vrrpv3e_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        vrrpv3e = ET.SubElement(ipv6, "vrrpv3e", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        priority = ET.SubElement(vrrpv3e, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_vrrpv3e_description(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        vrrpv3e = ET.SubElement(ipv6, "vrrpv3e", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        description = ET.SubElement(vrrpv3e, "description")
        description.text = kwargs.pop('description')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_vrrpv3e_advertise_backup(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        vrrpv3e = ET.SubElement(ipv6, "vrrpv3e", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        advertise_backup = ET.SubElement(vrrpv3e, "advertise-backup")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_vrrpv3e_nd_advertisement_timer(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        vrrpv3e = ET.SubElement(ipv6, "vrrpv3e", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        nd_advertisement_timer = ET.SubElement(vrrpv3e, "nd-advertisement-timer")
        nd_advertisement_timer.text = kwargs.pop('nd_advertisement_timer')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_vrrpv3e_advertisement_interval_scale(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        vrrpv3e = ET.SubElement(ipv6, "vrrpv3e", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        advertisement_interval_scale = ET.SubElement(vrrpv3e, "advertisement-interval-scale")
        advertisement_interval_scale.text = kwargs.pop('advertisement_interval_scale')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_vrrpv3e_backup_advertisement_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        vrrpv3e = ET.SubElement(ipv6, "vrrpv3e", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        backup_advertisement_interval = ET.SubElement(vrrpv3e, "backup-advertisement-interval")
        backup_advertisement_interval.text = kwargs.pop('backup_advertisement_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_vrrpv3e_vrrpe_advertisement_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        vrrpv3e = ET.SubElement(ipv6, "vrrpv3e", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        vrrpe_advertisement_interval = ET.SubElement(vrrpv3e, "vrrpe-advertisement-interval")
        vrrpe_advertisement_interval.text = kwargs.pop('vrrpe_advertisement_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_vrrpv3e_short_path_forwarding_basic(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        vrrpv3e = ET.SubElement(ipv6, "vrrpv3e", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        short_path_forwarding = ET.SubElement(vrrpv3e, "short-path-forwarding")
        basic = ET.SubElement(short_path_forwarding, "basic")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ipv6_vrrpv3e_short_path_forwarding_revert_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(ve, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        vrrpv3e = ET.SubElement(ipv6, "vrrpv3e", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        short_path_forwarding = ET.SubElement(vrrpv3e, "short-path-forwarding")
        revert_priority = ET.SubElement(short_path_forwarding, "revert-priority")
        revert_priority.text = kwargs.pop('revert_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_acl_interface_ip_access_group_ip_access_list(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip_acl_interface = ET.SubElement(ve, "ip-acl-interface", xmlns="urn:brocade.com:mgmt:brocade-ip-access-list")
        ip = ET.SubElement(ip_acl_interface, "ip")
        access_group = ET.SubElement(ip, "access-group")
        ip_direction_key = ET.SubElement(access_group, "ip-direction")
        ip_direction_key.text = kwargs.pop('ip_direction')
        ip_access_list = ET.SubElement(access_group, "ip-access-list")
        ip_access_list.text = kwargs.pop('ip_access_list')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_acl_interface_ip_access_group_ip_direction(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip_acl_interface = ET.SubElement(ve, "ip-acl-interface", xmlns="urn:brocade.com:mgmt:brocade-ip-access-list")
        ip = ET.SubElement(ip_acl_interface, "ip")
        access_group = ET.SubElement(ip, "access-group")
        ip_access_list_key = ET.SubElement(access_group, "ip-access-list")
        ip_access_list_key.text = kwargs.pop('ip_access_list')
        ip_direction = ET.SubElement(access_group, "ip-direction")
        ip_direction.text = kwargs.pop('ip_direction')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_acl_interface_ipv6_access_group_ipv6_access_list(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip_acl_interface = ET.SubElement(ve, "ip-acl-interface", xmlns="urn:brocade.com:mgmt:brocade-ipv6-access-list")
        ipv6 = ET.SubElement(ip_acl_interface, "ipv6")
        access_group = ET.SubElement(ipv6, "access-group")
        ip_direction_key = ET.SubElement(access_group, "ip-direction")
        ip_direction_key.text = kwargs.pop('ip_direction')
        ipv6_access_list = ET.SubElement(access_group, "ipv6-access-list")
        ipv6_access_list.text = kwargs.pop('ipv6_access_list')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_acl_interface_ipv6_access_group_ip_direction(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip_acl_interface = ET.SubElement(ve, "ip-acl-interface", xmlns="urn:brocade.com:mgmt:brocade-ipv6-access-list")
        ipv6 = ET.SubElement(ip_acl_interface, "ipv6")
        access_group = ET.SubElement(ipv6, "access-group")
        ipv6_access_list_key = ET.SubElement(access_group, "ipv6-access-list")
        ipv6_access_list_key.text = kwargs.pop('ipv6_access_list')
        ip_direction = ET.SubElement(access_group, "ip-direction")
        ip_direction.text = kwargs.pop('ip_direction')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_ve_ip_pbr_interface_ip_policy_route_map_route_map_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        ve = ET.SubElement(interface, "ve")
        name_key = ET.SubElement(ve, "name")
        name_key.text = kwargs.pop('name')
        ip_pbr_interface = ET.SubElement(ve, "ip-pbr-interface", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        ip = ET.SubElement(ip_pbr_interface, "ip")
        policy = ET.SubElement(ip, "policy")
        route_map = ET.SubElement(policy, "route-map")
        route_map_name = ET.SubElement(route_map, "route-map-name")
        route_map_name.text = kwargs.pop('route_map_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id = ET.SubElement(loopback, "id")
        id.text = kwargs.pop('id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_vrf_forwarding(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        vrf = ET.SubElement(loopback, "vrf")
        forwarding = ET.SubElement(vrf, "forwarding")
        forwarding.text = kwargs.pop('forwarding')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_intf_loopback_shutdown(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        intf_loopback = ET.SubElement(loopback, "intf-loopback")
        shutdown = ET.SubElement(intf_loopback, "shutdown")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ip_ip_config_address_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ip = ET.SubElement(loopback, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        ip_config = ET.SubElement(ip, "ip-config")
        address = ET.SubElement(ip_config, "address")
        address = ET.SubElement(address, "address")
        address.text = kwargs.pop('address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ip_interface_loopback_ospf_conf_ospf1_area(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ip = ET.SubElement(loopback, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_loopback_ospf_conf = ET.SubElement(ip, "interface-loopback-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_loopback_ospf_conf, "ospf1")
        area = ET.SubElement(ospf1, "area")
        area.text = kwargs.pop('area')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ip_interface_loopback_ospf_conf_ospf1_auth_change_wait_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ip = ET.SubElement(loopback, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_loopback_ospf_conf = ET.SubElement(ip, "interface-loopback-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_loopback_ospf_conf, "ospf1")
        auth_change_wait_time = ET.SubElement(ospf1, "auth-change-wait-time")
        auth_change_wait_time.text = kwargs.pop('auth_change_wait_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ip_interface_loopback_ospf_conf_ospf1_authentication_key_no_encrypt_auth_key_table_no_encrypt_auth_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ip = ET.SubElement(loopback, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_loopback_ospf_conf = ET.SubElement(ip, "interface-loopback-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_loopback_ospf_conf, "ospf1")
        authentication_key = ET.SubElement(ospf1, "authentication-key")
        no_encrypt_auth_key_table = ET.SubElement(authentication_key, "no-encrypt-auth-key-table")
        no_encrypt_auth_key = ET.SubElement(no_encrypt_auth_key_table, "no-encrypt-auth-key")
        no_encrypt_auth_key.text = kwargs.pop('no_encrypt_auth_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ip_interface_loopback_ospf_conf_ospf1_authentication_key_auth_key_table_encrypttype(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ip = ET.SubElement(loopback, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_loopback_ospf_conf = ET.SubElement(ip, "interface-loopback-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_loopback_ospf_conf, "ospf1")
        authentication_key = ET.SubElement(ospf1, "authentication-key")
        auth_key_table = ET.SubElement(authentication_key, "auth-key-table")
        encrypttype = ET.SubElement(auth_key_table, "encrypttype")
        encrypttype.text = kwargs.pop('encrypttype')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ip_interface_loopback_ospf_conf_ospf1_authentication_key_auth_key_table_auth_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ip = ET.SubElement(loopback, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_loopback_ospf_conf = ET.SubElement(ip, "interface-loopback-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_loopback_ospf_conf, "ospf1")
        authentication_key = ET.SubElement(ospf1, "authentication-key")
        auth_key_table = ET.SubElement(authentication_key, "auth-key-table")
        auth_key = ET.SubElement(auth_key_table, "auth-key")
        auth_key.text = kwargs.pop('auth_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ip_interface_loopback_ospf_conf_ospf1_dead_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ip = ET.SubElement(loopback, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_loopback_ospf_conf = ET.SubElement(ip, "interface-loopback-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_loopback_ospf_conf, "ospf1")
        dead_interval = ET.SubElement(ospf1, "dead-interval")
        dead_interval.text = kwargs.pop('dead_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ip_interface_loopback_ospf_conf_ospf1_hello_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ip = ET.SubElement(loopback, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_loopback_ospf_conf = ET.SubElement(ip, "interface-loopback-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_loopback_ospf_conf, "ospf1")
        hello_interval = ET.SubElement(ospf1, "hello-interval")
        hello_interval.text = kwargs.pop('hello_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ip_interface_loopback_ospf_conf_ospf1_retransmit_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ip = ET.SubElement(loopback, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_loopback_ospf_conf = ET.SubElement(ip, "interface-loopback-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_loopback_ospf_conf, "ospf1")
        retransmit_interval = ET.SubElement(ospf1, "retransmit-interval")
        retransmit_interval.text = kwargs.pop('retransmit_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ip_interface_loopback_ospf_conf_ospf1_transmit_delay(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ip = ET.SubElement(loopback, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_loopback_ospf_conf = ET.SubElement(ip, "interface-loopback-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_loopback_ospf_conf, "ospf1")
        transmit_delay = ET.SubElement(ospf1, "transmit-delay")
        transmit_delay.text = kwargs.pop('transmit_delay')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ip_interface_loopback_ospf_conf_ospf1_md5_authentication_key_activation_wait_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ip = ET.SubElement(loopback, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_loopback_ospf_conf = ET.SubElement(ip, "interface-loopback-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_loopback_ospf_conf, "ospf1")
        md5_authentication = ET.SubElement(ospf1, "md5-authentication")
        key_activation_wait_time = ET.SubElement(md5_authentication, "key-activation-wait-time")
        key_activation_wait_time.text = kwargs.pop('key_activation_wait_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ip_interface_loopback_ospf_conf_ospf1_md5_authentication_no_encrypt_key_table_no_encrypt_key_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ip = ET.SubElement(loopback, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_loopback_ospf_conf = ET.SubElement(ip, "interface-loopback-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_loopback_ospf_conf, "ospf1")
        md5_authentication = ET.SubElement(ospf1, "md5-authentication")
        no_encrypt_key_table = ET.SubElement(md5_authentication, "no-encrypt-key-table")
        no_encrypt_key_id = ET.SubElement(no_encrypt_key_table, "no-encrypt-key-id")
        no_encrypt_key_id.text = kwargs.pop('no_encrypt_key_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ip_interface_loopback_ospf_conf_ospf1_md5_authentication_no_encrypt_key_table_no_encrypt_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ip = ET.SubElement(loopback, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_loopback_ospf_conf = ET.SubElement(ip, "interface-loopback-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_loopback_ospf_conf, "ospf1")
        md5_authentication = ET.SubElement(ospf1, "md5-authentication")
        no_encrypt_key_table = ET.SubElement(md5_authentication, "no-encrypt-key-table")
        no_encrypt_key = ET.SubElement(no_encrypt_key_table, "no-encrypt-key")
        no_encrypt_key.text = kwargs.pop('no_encrypt_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ip_interface_loopback_ospf_conf_ospf1_md5_authentication_key_table_key_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ip = ET.SubElement(loopback, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_loopback_ospf_conf = ET.SubElement(ip, "interface-loopback-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_loopback_ospf_conf, "ospf1")
        md5_authentication = ET.SubElement(ospf1, "md5-authentication")
        key_table = ET.SubElement(md5_authentication, "key-table")
        key_id = ET.SubElement(key_table, "key-id")
        key_id.text = kwargs.pop('key_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ip_interface_loopback_ospf_conf_ospf1_md5_authentication_key_table_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ip = ET.SubElement(loopback, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_loopback_ospf_conf = ET.SubElement(ip, "interface-loopback-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_loopback_ospf_conf, "ospf1")
        md5_authentication = ET.SubElement(ospf1, "md5-authentication")
        key_table = ET.SubElement(md5_authentication, "key-table")
        key = ET.SubElement(key_table, "key")
        key.text = kwargs.pop('key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ip_interface_loopback_ospf_conf_ospf1_md5_authentication_key_table_md5_authentication_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ip = ET.SubElement(loopback, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_loopback_ospf_conf = ET.SubElement(ip, "interface-loopback-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_loopback_ospf_conf, "ospf1")
        md5_authentication = ET.SubElement(ospf1, "md5-authentication")
        key_table = ET.SubElement(md5_authentication, "key-table")
        md5_authentication_key = ET.SubElement(key_table, "md5-authentication-key")
        md5_authentication_key.text = kwargs.pop('md5_authentication_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ip_interface_loopback_ospf_conf_ospf1_cost(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ip = ET.SubElement(loopback, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_loopback_ospf_conf = ET.SubElement(ip, "interface-loopback-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_loopback_ospf_conf, "ospf1")
        cost = ET.SubElement(ospf1, "cost")
        cost.text = kwargs.pop('cost')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ip_interface_loopback_ospf_conf_ospf1_database_filter_all_out(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ip = ET.SubElement(loopback, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_loopback_ospf_conf = ET.SubElement(ip, "interface-loopback-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_loopback_ospf_conf, "ospf1")
        database_filter = ET.SubElement(ospf1, "database-filter")
        all_out = ET.SubElement(database_filter, "all-out")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ip_interface_loopback_ospf_conf_ospf1_database_filter_all_external(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ip = ET.SubElement(loopback, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_loopback_ospf_conf = ET.SubElement(ip, "interface-loopback-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_loopback_ospf_conf, "ospf1")
        database_filter = ET.SubElement(ospf1, "database-filter")
        all_external = ET.SubElement(database_filter, "all-external")
        all_external.text = kwargs.pop('all_external')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ip_interface_loopback_ospf_conf_ospf1_database_filter_all_summary_external(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ip = ET.SubElement(loopback, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_loopback_ospf_conf = ET.SubElement(ip, "interface-loopback-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_loopback_ospf_conf, "ospf1")
        database_filter = ET.SubElement(ospf1, "database-filter")
        all_summary_external = ET.SubElement(database_filter, "all-summary-external")
        all_summary_external.text = kwargs.pop('all_summary_external')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ip_interface_loopback_ospf_conf_ospf1_mtu_ignore(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ip = ET.SubElement(loopback, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_loopback_ospf_conf = ET.SubElement(ip, "interface-loopback-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_loopback_ospf_conf, "ospf1")
        mtu_ignore = ET.SubElement(ospf1, "mtu-ignore")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ip_interface_loopback_ospf_conf_ospf1_network(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ip = ET.SubElement(loopback, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_loopback_ospf_conf = ET.SubElement(ip, "interface-loopback-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_loopback_ospf_conf, "ospf1")
        network = ET.SubElement(ospf1, "network")
        network.text = kwargs.pop('network')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ip_interface_loopback_ospf_conf_ospf1_active(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ip = ET.SubElement(loopback, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_loopback_ospf_conf = ET.SubElement(ip, "interface-loopback-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_loopback_ospf_conf, "ospf1")
        active = ET.SubElement(ospf1, "active")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ip_interface_loopback_ospf_conf_ospf1_passive(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ip = ET.SubElement(loopback, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_loopback_ospf_conf = ET.SubElement(ip, "interface-loopback-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_loopback_ospf_conf, "ospf1")
        passive = ET.SubElement(ospf1, "passive")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ip_interface_loopback_ospf_conf_ospf1_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ip = ET.SubElement(loopback, "ip", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        interface_loopback_ospf_conf = ET.SubElement(ip, "interface-loopback-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_loopback_ospf_conf, "ospf1")
        priority = ET.SubElement(ospf1, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ipv6_ipv6_config_address_use_link_local_only(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ipv6 = ET.SubElement(loopback, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config")
        address = ET.SubElement(ipv6_config, "address")
        use_link_local_only = ET.SubElement(address, "use-link-local-only")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ipv6_ipv6_config_address_link_local_config_link_local_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ipv6 = ET.SubElement(loopback, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config")
        address = ET.SubElement(ipv6_config, "address")
        link_local_config = ET.SubElement(address, "link-local-config")
        link_local_address = ET.SubElement(link_local_config, "link-local-address")
        link_local_address.text = kwargs.pop('link_local_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ipv6_ipv6_config_address_link_local_config_link_local(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ipv6 = ET.SubElement(loopback, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config")
        address = ET.SubElement(ipv6_config, "address")
        link_local_config = ET.SubElement(address, "link-local-config")
        link_local = ET.SubElement(link_local_config, "link-local")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ipv6_ipv6_config_address_ipv6_address_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ipv6 = ET.SubElement(loopback, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config")
        address = ET.SubElement(ipv6_config, "address")
        ipv6_address = ET.SubElement(address, "ipv6-address")
        address = ET.SubElement(ipv6_address, "address")
        address.text = kwargs.pop('address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ipv6_ipv6_config_address_ipv6_address_eui64(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ipv6 = ET.SubElement(loopback, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config")
        address = ET.SubElement(ipv6_config, "address")
        ipv6_address = ET.SubElement(address, "ipv6-address")
        address_key = ET.SubElement(ipv6_address, "address")
        address_key.text = kwargs.pop('address')
        eui64 = ET.SubElement(ipv6_address, "eui64")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ipv6_ipv6_config_address_ipv6_address_anycast(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ipv6 = ET.SubElement(loopback, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config")
        address = ET.SubElement(ipv6_config, "address")
        ipv6_address = ET.SubElement(address, "ipv6-address")
        address_key = ET.SubElement(ipv6_address, "address")
        address_key.text = kwargs.pop('address')
        anycast = ET.SubElement(ipv6_address, "anycast")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ipv6_interface_ospfv3_conf_interface_area(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ipv6 = ET.SubElement(loopback, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        interface_area = ET.SubElement(interface_ospfv3_conf, "interface-area")
        interface_area.text = kwargs.pop('interface_area')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ipv6_interface_ospfv3_conf_active(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ipv6 = ET.SubElement(loopback, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        active = ET.SubElement(interface_ospfv3_conf, "active")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ipv6_interface_ospfv3_conf_passive(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ipv6 = ET.SubElement(loopback, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        passive = ET.SubElement(interface_ospfv3_conf, "passive")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ipv6_interface_ospfv3_conf_bfd(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ipv6 = ET.SubElement(loopback, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        bfd = ET.SubElement(interface_ospfv3_conf, "bfd")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ipv6_interface_ospfv3_conf_cost(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ipv6 = ET.SubElement(loopback, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        cost = ET.SubElement(interface_ospfv3_conf, "cost")
        cost.text = kwargs.pop('cost')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ipv6_interface_ospfv3_conf_instance(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ipv6 = ET.SubElement(loopback, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        instance = ET.SubElement(interface_ospfv3_conf, "instance")
        instance.text = kwargs.pop('instance')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ipv6_interface_ospfv3_conf_mtu_ignore(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ipv6 = ET.SubElement(loopback, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        mtu_ignore = ET.SubElement(interface_ospfv3_conf, "mtu-ignore")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ipv6_interface_ospfv3_conf_network(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ipv6 = ET.SubElement(loopback, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        network = ET.SubElement(interface_ospfv3_conf, "network")
        network.text = kwargs.pop('network')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ipv6_interface_ospfv3_conf_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ipv6 = ET.SubElement(loopback, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        priority = ET.SubElement(interface_ospfv3_conf, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ipv6_interface_ospfv3_conf_suppress_linklsa(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ipv6 = ET.SubElement(loopback, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        suppress_linklsa = ET.SubElement(interface_ospfv3_conf, "suppress-linklsa")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_spi(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ipv6 = ET.SubElement(loopback, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        spi = ET.SubElement(ipsec_auth_key_config, "spi")
        spi.text = kwargs.pop('spi')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_ah_algorithm_ah(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ipv6 = ET.SubElement(loopback, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_ah_algorithm = ET.SubElement(ch_algorithm, "ca-ah-algorithm")
        ah = ET.SubElement(ca_ah_algorithm, "ah")
        ah.text = kwargs.pop('ah')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_ah_algorithm_ah_no_encrypt(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ipv6 = ET.SubElement(loopback, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_ah_algorithm = ET.SubElement(ch_algorithm, "ca-ah-algorithm")
        ah_no_encrypt = ET.SubElement(ca_ah_algorithm, "ah-no-encrypt")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_ah_algorithm_ah_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ipv6 = ET.SubElement(loopback, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_ah_algorithm = ET.SubElement(ch_algorithm, "ca-ah-algorithm")
        ah_key = ET.SubElement(ca_ah_algorithm, "ah-key")
        ah_key.text = kwargs.pop('ah_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ipv6 = ET.SubElement(loopback, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp = ET.SubElement(ca_esp_algorithm, "esp")
        esp.text = kwargs.pop('esp')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp_no_encrypt(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ipv6 = ET.SubElement(loopback, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp_no_encrypt = ET.SubElement(ca_esp_algorithm, "esp-no-encrypt")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ipv6 = ET.SubElement(loopback, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp_key = ET.SubElement(ca_esp_algorithm, "esp-key")
        esp_key.text = kwargs.pop('esp_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp_auth(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ipv6 = ET.SubElement(loopback, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp_auth = ET.SubElement(ca_esp_algorithm, "esp-auth")
        esp_auth.text = kwargs.pop('esp_auth')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp_auth_no_encrypt(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ipv6 = ET.SubElement(loopback, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp_auth_no_encrypt = ET.SubElement(ca_esp_algorithm, "esp-auth-no-encrypt")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp_auth_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ipv6 = ET.SubElement(loopback, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp_auth_key = ET.SubElement(ca_esp_algorithm, "esp-auth-key")
        esp_auth_key.text = kwargs.pop('esp_auth_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ipv6_interface_ospfv3_conf_authentication_ipsec_ipsec_authentication_disable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ipv6 = ET.SubElement(loopback, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec = ET.SubElement(authentication, "ipsec")
        ipsec_authentication_disable = ET.SubElement(ipsec, "ipsec-authentication-disable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ipv6_interface_ospfv3_conf_authentication_ipsec_ifc_key_add_remove_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ipv6 = ET.SubElement(loopback, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec = ET.SubElement(authentication, "ipsec")
        ifc_key_add_remove_interval = ET.SubElement(ipsec, "ifc-key-add-remove-interval")
        ifc_key_add_remove_interval.text = kwargs.pop('ifc_key_add_remove_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ipv6_interface_ospfv3_conf_link_interval_properties_hello_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ipv6 = ET.SubElement(loopback, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        link_interval_properties = ET.SubElement(interface_ospfv3_conf, "link-interval-properties")
        hello_interval = ET.SubElement(link_interval_properties, "hello-interval")
        hello_interval.text = kwargs.pop('hello_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ipv6_interface_ospfv3_conf_link_interval_properties_dead_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ipv6 = ET.SubElement(loopback, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        link_interval_properties = ET.SubElement(interface_ospfv3_conf, "link-interval-properties")
        dead_interval = ET.SubElement(link_interval_properties, "dead-interval")
        dead_interval.text = kwargs.pop('dead_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ipv6_interface_ospfv3_conf_link_interval_properties_hello_jitter(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ipv6 = ET.SubElement(loopback, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        link_interval_properties = ET.SubElement(interface_ospfv3_conf, "link-interval-properties")
        hello_jitter = ET.SubElement(link_interval_properties, "hello-jitter")
        hello_jitter.text = kwargs.pop('hello_jitter')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ipv6_interface_ospfv3_conf_link_interval_properties_retransmit_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ipv6 = ET.SubElement(loopback, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        link_interval_properties = ET.SubElement(interface_ospfv3_conf, "link-interval-properties")
        retransmit_interval = ET.SubElement(link_interval_properties, "retransmit-interval")
        retransmit_interval.text = kwargs.pop('retransmit_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_interface_loopback_ipv6_interface_ospfv3_conf_link_interval_properties_transmit_delay(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        interface = ET.SubElement(rbridge_id, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        loopback = ET.SubElement(interface, "loopback", xmlns="urn:brocade.com:mgmt:brocade-intf-loopback")
        id_key = ET.SubElement(loopback, "id")
        id_key.text = kwargs.pop('id')
        ipv6 = ET.SubElement(loopback, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        link_interval_properties = ET.SubElement(interface_ospfv3_conf, "link-interval-properties")
        transmit_delay = ET.SubElement(link_interval_properties, "transmit-delay")
        transmit_delay.text = kwargs.pop('transmit_delay')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_fcoe_config_fcoe_enode_fabric_map_fcoe_enode_fabric_map_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        fcoe_config = ET.SubElement(rbridge_id, "fcoe-config", xmlns="urn:brocade.com:mgmt:brocade-fcoe")
        fcoe_enode_fabric_map = ET.SubElement(fcoe_config, "fcoe-enode-fabric-map")
        fcoe_enode_fabric_map_name = ET.SubElement(fcoe_enode_fabric_map, "fcoe-enode-fabric-map-name")
        fcoe_enode_fabric_map_name.text = kwargs.pop('fcoe_enode_fabric_map_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_fcoe_config_fcoe_max_enode(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        fcoe_config = ET.SubElement(rbridge_id, "fcoe-config", xmlns="urn:brocade.com:mgmt:brocade-fcoe")
        fcoe_max_enode = ET.SubElement(fcoe_config, "fcoe-max-enode")
        fcoe_max_enode.text = kwargs.pop('fcoe_max_enode')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_root_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        root = ET.SubElement(rbridge_id, "root", xmlns="urn:brocade.com:mgmt:brocade-aaa")
        enable = ET.SubElement(root, "enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_root_access(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        root = ET.SubElement(rbridge_id, "root", xmlns="urn:brocade.com:mgmt:brocade-aaa")
        access = ET.SubElement(root, "access")
        access.text = kwargs.pop('access')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ag_nport_menu_nport_interface_nport_agNPortNb(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ag = ET.SubElement(rbridge_id, "ag", xmlns="urn:brocade.com:mgmt:brocade-ag")
        nport_menu = ET.SubElement(ag, "nport-menu")
        nport_interface = ET.SubElement(nport_menu, "nport-interface")
        nport = ET.SubElement(nport_interface, "nport")
        agNPortNb = ET.SubElement(nport, "agNPortNb")
        agNPortNb.text = kwargs.pop('agNPortNb')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ag_pg_pgid(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ag = ET.SubElement(rbridge_id, "ag", xmlns="urn:brocade.com:mgmt:brocade-ag")
        pg = ET.SubElement(ag, "pg")
        pgid = ET.SubElement(pg, "pgid")
        pgid.text = kwargs.pop('pgid')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ag_pg_rename(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ag = ET.SubElement(rbridge_id, "ag", xmlns="urn:brocade.com:mgmt:brocade-ag")
        pg = ET.SubElement(ag, "pg")
        pgid_key = ET.SubElement(pg, "pgid")
        pgid_key.text = kwargs.pop('pgid')
        rename = ET.SubElement(pg, "rename")
        rename.text = kwargs.pop('rename')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ag_timeout_fnmtovalue(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ag = ET.SubElement(rbridge_id, "ag", xmlns="urn:brocade.com:mgmt:brocade-ag")
        timeout = ET.SubElement(ag, "timeout")
        fnmtovalue = ET.SubElement(timeout, "fnmtovalue")
        fnmtovalue.text = kwargs.pop('fnmtovalue')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ag_counter_reliabilitycountervalue(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ag = ET.SubElement(rbridge_id, "ag", xmlns="urn:brocade.com:mgmt:brocade-ag")
        counter = ET.SubElement(ag, "counter")
        reliabilitycountervalue = ET.SubElement(counter, "reliabilitycountervalue")
        reliabilitycountervalue.text = kwargs.pop('reliabilitycountervalue')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_vrf_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name = ET.SubElement(vrf, "vrf-name")
        vrf_name.text = kwargs.pop('vrf_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_route_distiniguisher(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        route_distiniguisher = ET.SubElement(vrf, "route-distiniguisher")
        route_distiniguisher.text = kwargs.pop('route_distiniguisher')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_route_target_action(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        route_target = ET.SubElement(vrf, "route-target")
        target_community_key = ET.SubElement(route_target, "target-community")
        target_community_key.text = kwargs.pop('target_community')
        action = ET.SubElement(route_target, "action")
        action.text = kwargs.pop('action')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_route_target_target_community(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        route_target = ET.SubElement(vrf, "route-target")
        action_key = ET.SubElement(route_target, "action")
        action_key.text = kwargs.pop('action')
        target_community = ET.SubElement(route_target, "target-community")
        target_community.text = kwargs.pop('target_community')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ipv4_max_route(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        max_route = ET.SubElement(ipv4, "max-route")
        max_route.text = kwargs.pop('max_route')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ipv4_route_target_action(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        max_route_key = ET.SubElement(ipv4, "max-route")
        max_route_key.text = kwargs.pop('max_route')
        route_target = ET.SubElement(ipv4, "route-target")
        target_community_key = ET.SubElement(route_target, "target-community")
        target_community_key.text = kwargs.pop('target_community')
        action = ET.SubElement(route_target, "action")
        action.text = kwargs.pop('action')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ipv4_route_target_target_community(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ipv4 = ET.SubElement(address_family, "ipv4")
        max_route_key = ET.SubElement(ipv4, "max-route")
        max_route_key.text = kwargs.pop('max_route')
        route_target = ET.SubElement(ipv4, "route-target")
        action_key = ET.SubElement(route_target, "action")
        action_key.text = kwargs.pop('action')
        target_community = ET.SubElement(route_target, "target-community")
        target_community.text = kwargs.pop('target_community')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ip_unicast_max_route(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ip = ET.SubElement(address_family, "ip")
        unicast = ET.SubElement(ip, "unicast")
        max_route = ET.SubElement(unicast, "max-route")
        max_route.text = kwargs.pop('max_route')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ip_unicast_arp_entry_arp_ip_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ip = ET.SubElement(address_family, "ip")
        unicast = ET.SubElement(ip, "unicast")
        arp_entry = ET.SubElement(unicast, "arp-entry", xmlns="urn:brocade.com:mgmt:brocade-arp")
        arp_ip_address = ET.SubElement(arp_entry, "arp-ip-address")
        arp_ip_address.text = kwargs.pop('arp_ip_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ip_unicast_arp_entry_mac_address_value(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ip = ET.SubElement(address_family, "ip")
        unicast = ET.SubElement(ip, "unicast")
        arp_entry = ET.SubElement(unicast, "arp-entry", xmlns="urn:brocade.com:mgmt:brocade-arp")
        arp_ip_address_key = ET.SubElement(arp_entry, "arp-ip-address")
        arp_ip_address_key.text = kwargs.pop('arp_ip_address')
        mac_address_value = ET.SubElement(arp_entry, "mac-address-value")
        mac_address_value.text = kwargs.pop('mac_address_value')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ip_unicast_arp_entry_interfacename(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ip = ET.SubElement(address_family, "ip")
        unicast = ET.SubElement(ip, "unicast")
        arp_entry = ET.SubElement(unicast, "arp-entry", xmlns="urn:brocade.com:mgmt:brocade-arp")
        arp_ip_address_key = ET.SubElement(arp_entry, "arp-ip-address")
        arp_ip_address_key.text = kwargs.pop('arp_ip_address')
        interfacename = ET.SubElement(arp_entry, "interfacename")
        interfacename.text = kwargs.pop('interfacename')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ip_unicast_arp_entry_interfacetype_GigabitEthernet_GigabitEthernet(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ip = ET.SubElement(address_family, "ip")
        unicast = ET.SubElement(ip, "unicast")
        arp_entry = ET.SubElement(unicast, "arp-entry", xmlns="urn:brocade.com:mgmt:brocade-arp")
        arp_ip_address_key = ET.SubElement(arp_entry, "arp-ip-address")
        arp_ip_address_key.text = kwargs.pop('arp_ip_address')
        interfacetype = ET.SubElement(arp_entry, "interfacetype")
        GigabitEthernet = ET.SubElement(interfacetype, "GigabitEthernet")
        GigabitEthernet = ET.SubElement(GigabitEthernet, "GigabitEthernet")
        GigabitEthernet.text = kwargs.pop('GigabitEthernet')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ip_unicast_arp_entry_interfacetype_TenGigabitEthernet_TenGigabitEthernet(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ip = ET.SubElement(address_family, "ip")
        unicast = ET.SubElement(ip, "unicast")
        arp_entry = ET.SubElement(unicast, "arp-entry", xmlns="urn:brocade.com:mgmt:brocade-arp")
        arp_ip_address_key = ET.SubElement(arp_entry, "arp-ip-address")
        arp_ip_address_key.text = kwargs.pop('arp_ip_address')
        interfacetype = ET.SubElement(arp_entry, "interfacetype")
        TenGigabitEthernet = ET.SubElement(interfacetype, "TenGigabitEthernet")
        TenGigabitEthernet = ET.SubElement(TenGigabitEthernet, "TenGigabitEthernet")
        TenGigabitEthernet.text = kwargs.pop('TenGigabitEthernet')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ip_unicast_arp_entry_interfacetype_FortyGigabitEthernet_FortyGigabitEthernet(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ip = ET.SubElement(address_family, "ip")
        unicast = ET.SubElement(ip, "unicast")
        arp_entry = ET.SubElement(unicast, "arp-entry", xmlns="urn:brocade.com:mgmt:brocade-arp")
        arp_ip_address_key = ET.SubElement(arp_entry, "arp-ip-address")
        arp_ip_address_key.text = kwargs.pop('arp_ip_address')
        interfacetype = ET.SubElement(arp_entry, "interfacetype")
        FortyGigabitEthernet = ET.SubElement(interfacetype, "FortyGigabitEthernet")
        FortyGigabitEthernet = ET.SubElement(FortyGigabitEthernet, "FortyGigabitEthernet")
        FortyGigabitEthernet.text = kwargs.pop('FortyGigabitEthernet')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ip_unicast_arp_entry_interfacetype_HundredGigabitEthernet_HundredGigabitEthernet(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ip = ET.SubElement(address_family, "ip")
        unicast = ET.SubElement(ip, "unicast")
        arp_entry = ET.SubElement(unicast, "arp-entry", xmlns="urn:brocade.com:mgmt:brocade-arp")
        arp_ip_address_key = ET.SubElement(arp_entry, "arp-ip-address")
        arp_ip_address_key.text = kwargs.pop('arp_ip_address')
        interfacetype = ET.SubElement(arp_entry, "interfacetype")
        HundredGigabitEthernet = ET.SubElement(interfacetype, "HundredGigabitEthernet")
        HundredGigabitEthernet = ET.SubElement(HundredGigabitEthernet, "HundredGigabitEthernet")
        HundredGigabitEthernet.text = kwargs.pop('HundredGigabitEthernet')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ip_unicast_arp_entry_interfacetype_Ve_Ve(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ip = ET.SubElement(address_family, "ip")
        unicast = ET.SubElement(ip, "unicast")
        arp_entry = ET.SubElement(unicast, "arp-entry", xmlns="urn:brocade.com:mgmt:brocade-arp")
        arp_ip_address_key = ET.SubElement(arp_entry, "arp-ip-address")
        arp_ip_address_key.text = kwargs.pop('arp_ip_address')
        interfacetype = ET.SubElement(arp_entry, "interfacetype")
        Ve = ET.SubElement(interfacetype, "Ve")
        Ve = ET.SubElement(Ve, "Ve")
        Ve.text = kwargs.pop('Ve')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ip_unicast_ip_route_static_route_nh_static_route_dest(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ip = ET.SubElement(address_family, "ip")
        unicast = ET.SubElement(ip, "unicast")
        ip = ET.SubElement(unicast, "ip", xmlns="urn:brocade.com:mgmt:brocade-rtm")
        route = ET.SubElement(ip, "route")
        static_route_nh = ET.SubElement(route, "static-route-nh")
        static_route_next_hop_key = ET.SubElement(static_route_nh, "static-route-next-hop")
        static_route_next_hop_key.text = kwargs.pop('static_route_next_hop')
        static_route_dest = ET.SubElement(static_route_nh, "static-route-dest")
        static_route_dest.text = kwargs.pop('static_route_dest')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ip_unicast_ip_route_static_route_nh_static_route_next_hop(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ip = ET.SubElement(address_family, "ip")
        unicast = ET.SubElement(ip, "unicast")
        ip = ET.SubElement(unicast, "ip", xmlns="urn:brocade.com:mgmt:brocade-rtm")
        route = ET.SubElement(ip, "route")
        static_route_nh = ET.SubElement(route, "static-route-nh")
        static_route_dest_key = ET.SubElement(static_route_nh, "static-route-dest")
        static_route_dest_key.text = kwargs.pop('static_route_dest')
        static_route_next_hop = ET.SubElement(static_route_nh, "static-route-next-hop")
        static_route_next_hop.text = kwargs.pop('static_route_next_hop')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ip_unicast_ip_route_static_route_nh_route_attributes_metric(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ip = ET.SubElement(address_family, "ip")
        unicast = ET.SubElement(ip, "unicast")
        ip = ET.SubElement(unicast, "ip", xmlns="urn:brocade.com:mgmt:brocade-rtm")
        route = ET.SubElement(ip, "route")
        static_route_nh = ET.SubElement(route, "static-route-nh")
        static_route_dest_key = ET.SubElement(static_route_nh, "static-route-dest")
        static_route_dest_key.text = kwargs.pop('static_route_dest')
        static_route_next_hop_key = ET.SubElement(static_route_nh, "static-route-next-hop")
        static_route_next_hop_key.text = kwargs.pop('static_route_next_hop')
        route_attributes = ET.SubElement(static_route_nh, "route-attributes")
        metric = ET.SubElement(route_attributes, "metric")
        metric.text = kwargs.pop('metric')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ip_unicast_ip_route_static_route_nh_route_attributes_distance(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ip = ET.SubElement(address_family, "ip")
        unicast = ET.SubElement(ip, "unicast")
        ip = ET.SubElement(unicast, "ip", xmlns="urn:brocade.com:mgmt:brocade-rtm")
        route = ET.SubElement(ip, "route")
        static_route_nh = ET.SubElement(route, "static-route-nh")
        static_route_dest_key = ET.SubElement(static_route_nh, "static-route-dest")
        static_route_dest_key.text = kwargs.pop('static_route_dest')
        static_route_next_hop_key = ET.SubElement(static_route_nh, "static-route-next-hop")
        static_route_next_hop_key.text = kwargs.pop('static_route_next_hop')
        route_attributes = ET.SubElement(static_route_nh, "route-attributes")
        distance = ET.SubElement(route_attributes, "distance")
        distance.text = kwargs.pop('distance')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ip_unicast_ip_route_static_route_nh_route_attributes_tag(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ip = ET.SubElement(address_family, "ip")
        unicast = ET.SubElement(ip, "unicast")
        ip = ET.SubElement(unicast, "ip", xmlns="urn:brocade.com:mgmt:brocade-rtm")
        route = ET.SubElement(ip, "route")
        static_route_nh = ET.SubElement(route, "static-route-nh")
        static_route_dest_key = ET.SubElement(static_route_nh, "static-route-dest")
        static_route_dest_key.text = kwargs.pop('static_route_dest')
        static_route_next_hop_key = ET.SubElement(static_route_nh, "static-route-next-hop")
        static_route_next_hop_key.text = kwargs.pop('static_route_next_hop')
        route_attributes = ET.SubElement(static_route_nh, "route-attributes")
        tag = ET.SubElement(route_attributes, "tag")
        tag.text = kwargs.pop('tag')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ip_unicast_ip_route_static_route_nh_vrf_static_route_next_vrf_dest(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ip = ET.SubElement(address_family, "ip")
        unicast = ET.SubElement(ip, "unicast")
        ip = ET.SubElement(unicast, "ip", xmlns="urn:brocade.com:mgmt:brocade-rtm")
        route = ET.SubElement(ip, "route")
        static_route_nh_vrf = ET.SubElement(route, "static-route-nh-vrf")
        next_hop_vrf_key = ET.SubElement(static_route_nh_vrf, "next-hop-vrf")
        next_hop_vrf_key.text = kwargs.pop('next_hop_vrf')
        static_route_next_hop_key = ET.SubElement(static_route_nh_vrf, "static-route-next-hop")
        static_route_next_hop_key.text = kwargs.pop('static_route_next_hop')
        static_route_next_vrf_dest = ET.SubElement(static_route_nh_vrf, "static-route-next-vrf-dest")
        static_route_next_vrf_dest.text = kwargs.pop('static_route_next_vrf_dest')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ip_unicast_ip_route_static_route_nh_vrf_next_hop_vrf(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ip = ET.SubElement(address_family, "ip")
        unicast = ET.SubElement(ip, "unicast")
        ip = ET.SubElement(unicast, "ip", xmlns="urn:brocade.com:mgmt:brocade-rtm")
        route = ET.SubElement(ip, "route")
        static_route_nh_vrf = ET.SubElement(route, "static-route-nh-vrf")
        static_route_next_vrf_dest_key = ET.SubElement(static_route_nh_vrf, "static-route-next-vrf-dest")
        static_route_next_vrf_dest_key.text = kwargs.pop('static_route_next_vrf_dest')
        static_route_next_hop_key = ET.SubElement(static_route_nh_vrf, "static-route-next-hop")
        static_route_next_hop_key.text = kwargs.pop('static_route_next_hop')
        next_hop_vrf = ET.SubElement(static_route_nh_vrf, "next-hop-vrf")
        next_hop_vrf.text = kwargs.pop('next_hop_vrf')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ip_unicast_ip_route_static_route_nh_vrf_static_route_next_hop(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ip = ET.SubElement(address_family, "ip")
        unicast = ET.SubElement(ip, "unicast")
        ip = ET.SubElement(unicast, "ip", xmlns="urn:brocade.com:mgmt:brocade-rtm")
        route = ET.SubElement(ip, "route")
        static_route_nh_vrf = ET.SubElement(route, "static-route-nh-vrf")
        static_route_next_vrf_dest_key = ET.SubElement(static_route_nh_vrf, "static-route-next-vrf-dest")
        static_route_next_vrf_dest_key.text = kwargs.pop('static_route_next_vrf_dest')
        next_hop_vrf_key = ET.SubElement(static_route_nh_vrf, "next-hop-vrf")
        next_hop_vrf_key.text = kwargs.pop('next_hop_vrf')
        static_route_next_hop = ET.SubElement(static_route_nh_vrf, "static-route-next-hop")
        static_route_next_hop.text = kwargs.pop('static_route_next_hop')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ip_unicast_ip_route_static_route_oif_static_route_dest(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ip = ET.SubElement(address_family, "ip")
        unicast = ET.SubElement(ip, "unicast")
        ip = ET.SubElement(unicast, "ip", xmlns="urn:brocade.com:mgmt:brocade-rtm")
        route = ET.SubElement(ip, "route")
        static_route_oif = ET.SubElement(route, "static-route-oif")
        static_route_oif_type_key = ET.SubElement(static_route_oif, "static-route-oif-type")
        static_route_oif_type_key.text = kwargs.pop('static_route_oif_type')
        static_route_oif_name_key = ET.SubElement(static_route_oif, "static-route-oif-name")
        static_route_oif_name_key.text = kwargs.pop('static_route_oif_name')
        static_route_dest = ET.SubElement(static_route_oif, "static-route-dest")
        static_route_dest.text = kwargs.pop('static_route_dest')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ip_unicast_ip_route_static_route_oif_static_route_oif_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ip = ET.SubElement(address_family, "ip")
        unicast = ET.SubElement(ip, "unicast")
        ip = ET.SubElement(unicast, "ip", xmlns="urn:brocade.com:mgmt:brocade-rtm")
        route = ET.SubElement(ip, "route")
        static_route_oif = ET.SubElement(route, "static-route-oif")
        static_route_dest_key = ET.SubElement(static_route_oif, "static-route-dest")
        static_route_dest_key.text = kwargs.pop('static_route_dest')
        static_route_oif_name_key = ET.SubElement(static_route_oif, "static-route-oif-name")
        static_route_oif_name_key.text = kwargs.pop('static_route_oif_name')
        static_route_oif_type = ET.SubElement(static_route_oif, "static-route-oif-type")
        static_route_oif_type.text = kwargs.pop('static_route_oif_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ip_unicast_ip_route_static_route_oif_static_route_oif_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ip = ET.SubElement(address_family, "ip")
        unicast = ET.SubElement(ip, "unicast")
        ip = ET.SubElement(unicast, "ip", xmlns="urn:brocade.com:mgmt:brocade-rtm")
        route = ET.SubElement(ip, "route")
        static_route_oif = ET.SubElement(route, "static-route-oif")
        static_route_dest_key = ET.SubElement(static_route_oif, "static-route-dest")
        static_route_dest_key.text = kwargs.pop('static_route_dest')
        static_route_oif_type_key = ET.SubElement(static_route_oif, "static-route-oif-type")
        static_route_oif_type_key.text = kwargs.pop('static_route_oif_type')
        static_route_oif_name = ET.SubElement(static_route_oif, "static-route-oif-name")
        static_route_oif_name.text = kwargs.pop('static_route_oif_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ip_unicast_ip_route_static_route_oif_route_attributes_metric(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ip = ET.SubElement(address_family, "ip")
        unicast = ET.SubElement(ip, "unicast")
        ip = ET.SubElement(unicast, "ip", xmlns="urn:brocade.com:mgmt:brocade-rtm")
        route = ET.SubElement(ip, "route")
        static_route_oif = ET.SubElement(route, "static-route-oif")
        static_route_dest_key = ET.SubElement(static_route_oif, "static-route-dest")
        static_route_dest_key.text = kwargs.pop('static_route_dest')
        static_route_oif_type_key = ET.SubElement(static_route_oif, "static-route-oif-type")
        static_route_oif_type_key.text = kwargs.pop('static_route_oif_type')
        static_route_oif_name_key = ET.SubElement(static_route_oif, "static-route-oif-name")
        static_route_oif_name_key.text = kwargs.pop('static_route_oif_name')
        route_attributes = ET.SubElement(static_route_oif, "route-attributes")
        metric = ET.SubElement(route_attributes, "metric")
        metric.text = kwargs.pop('metric')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ip_unicast_ip_route_static_route_oif_route_attributes_distance(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ip = ET.SubElement(address_family, "ip")
        unicast = ET.SubElement(ip, "unicast")
        ip = ET.SubElement(unicast, "ip", xmlns="urn:brocade.com:mgmt:brocade-rtm")
        route = ET.SubElement(ip, "route")
        static_route_oif = ET.SubElement(route, "static-route-oif")
        static_route_dest_key = ET.SubElement(static_route_oif, "static-route-dest")
        static_route_dest_key.text = kwargs.pop('static_route_dest')
        static_route_oif_type_key = ET.SubElement(static_route_oif, "static-route-oif-type")
        static_route_oif_type_key.text = kwargs.pop('static_route_oif_type')
        static_route_oif_name_key = ET.SubElement(static_route_oif, "static-route-oif-name")
        static_route_oif_name_key.text = kwargs.pop('static_route_oif_name')
        route_attributes = ET.SubElement(static_route_oif, "route-attributes")
        distance = ET.SubElement(route_attributes, "distance")
        distance.text = kwargs.pop('distance')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ip_unicast_ip_route_static_route_oif_route_attributes_tag(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ip = ET.SubElement(address_family, "ip")
        unicast = ET.SubElement(ip, "unicast")
        ip = ET.SubElement(unicast, "ip", xmlns="urn:brocade.com:mgmt:brocade-rtm")
        route = ET.SubElement(ip, "route")
        static_route_oif = ET.SubElement(route, "static-route-oif")
        static_route_dest_key = ET.SubElement(static_route_oif, "static-route-dest")
        static_route_dest_key.text = kwargs.pop('static_route_dest')
        static_route_oif_type_key = ET.SubElement(static_route_oif, "static-route-oif-type")
        static_route_oif_type_key.text = kwargs.pop('static_route_oif_type')
        static_route_oif_name_key = ET.SubElement(static_route_oif, "static-route-oif-name")
        static_route_oif_name_key.text = kwargs.pop('static_route_oif_name')
        route_attributes = ET.SubElement(static_route_oif, "route-attributes")
        tag = ET.SubElement(route_attributes, "tag")
        tag.text = kwargs.pop('tag')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ip_unicast_ip_imprt_routes_src_vrf(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ip = ET.SubElement(address_family, "ip")
        unicast = ET.SubElement(ip, "unicast")
        ip = ET.SubElement(unicast, "ip", xmlns="urn:brocade.com:mgmt:brocade-rtm")
        imprt = ET.SubElement(ip, "import")
        routes = ET.SubElement(imprt, "routes")
        route_map_key = ET.SubElement(routes, "route-map")
        route_map_key.text = kwargs.pop('route_map')
        src_vrf = ET.SubElement(routes, "src-vrf")
        src_vrf.text = kwargs.pop('src_vrf')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ip_unicast_ip_imprt_routes_route_map(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ip = ET.SubElement(address_family, "ip")
        unicast = ET.SubElement(ip, "unicast")
        ip = ET.SubElement(unicast, "ip", xmlns="urn:brocade.com:mgmt:brocade-rtm")
        imprt = ET.SubElement(ip, "import")
        routes = ET.SubElement(imprt, "routes")
        src_vrf_key = ET.SubElement(routes, "src-vrf")
        src_vrf_key.text = kwargs.pop('src_vrf')
        route_map = ET.SubElement(routes, "route-map")
        route_map.text = kwargs.pop('route_map')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ipv6_unicast_max_route(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        unicast = ET.SubElement(ipv6, "unicast")
        max_route = ET.SubElement(unicast, "max-route")
        max_route.text = kwargs.pop('max_route')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ipv6_unicast_ipv6_route_static_route_nh_static_route_dest(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        unicast = ET.SubElement(ipv6, "unicast")
        ipv6 = ET.SubElement(unicast, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-rtm")
        route = ET.SubElement(ipv6, "route")
        static_route_nh = ET.SubElement(route, "static-route-nh")
        static_route_next_hop_key = ET.SubElement(static_route_nh, "static-route-next-hop")
        static_route_next_hop_key.text = kwargs.pop('static_route_next_hop')
        static_route_dest = ET.SubElement(static_route_nh, "static-route-dest")
        static_route_dest.text = kwargs.pop('static_route_dest')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ipv6_unicast_ipv6_route_static_route_nh_static_route_next_hop(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        unicast = ET.SubElement(ipv6, "unicast")
        ipv6 = ET.SubElement(unicast, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-rtm")
        route = ET.SubElement(ipv6, "route")
        static_route_nh = ET.SubElement(route, "static-route-nh")
        static_route_dest_key = ET.SubElement(static_route_nh, "static-route-dest")
        static_route_dest_key.text = kwargs.pop('static_route_dest')
        static_route_next_hop = ET.SubElement(static_route_nh, "static-route-next-hop")
        static_route_next_hop.text = kwargs.pop('static_route_next_hop')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ipv6_unicast_ipv6_route_static_route_nh_route_attributes_metric(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        unicast = ET.SubElement(ipv6, "unicast")
        ipv6 = ET.SubElement(unicast, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-rtm")
        route = ET.SubElement(ipv6, "route")
        static_route_nh = ET.SubElement(route, "static-route-nh")
        static_route_dest_key = ET.SubElement(static_route_nh, "static-route-dest")
        static_route_dest_key.text = kwargs.pop('static_route_dest')
        static_route_next_hop_key = ET.SubElement(static_route_nh, "static-route-next-hop")
        static_route_next_hop_key.text = kwargs.pop('static_route_next_hop')
        route_attributes = ET.SubElement(static_route_nh, "route-attributes")
        metric = ET.SubElement(route_attributes, "metric")
        metric.text = kwargs.pop('metric')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ipv6_unicast_ipv6_route_static_route_nh_route_attributes_distance(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        unicast = ET.SubElement(ipv6, "unicast")
        ipv6 = ET.SubElement(unicast, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-rtm")
        route = ET.SubElement(ipv6, "route")
        static_route_nh = ET.SubElement(route, "static-route-nh")
        static_route_dest_key = ET.SubElement(static_route_nh, "static-route-dest")
        static_route_dest_key.text = kwargs.pop('static_route_dest')
        static_route_next_hop_key = ET.SubElement(static_route_nh, "static-route-next-hop")
        static_route_next_hop_key.text = kwargs.pop('static_route_next_hop')
        route_attributes = ET.SubElement(static_route_nh, "route-attributes")
        distance = ET.SubElement(route_attributes, "distance")
        distance.text = kwargs.pop('distance')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ipv6_unicast_ipv6_route_static_route_nh_route_attributes_tag(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        unicast = ET.SubElement(ipv6, "unicast")
        ipv6 = ET.SubElement(unicast, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-rtm")
        route = ET.SubElement(ipv6, "route")
        static_route_nh = ET.SubElement(route, "static-route-nh")
        static_route_dest_key = ET.SubElement(static_route_nh, "static-route-dest")
        static_route_dest_key.text = kwargs.pop('static_route_dest')
        static_route_next_hop_key = ET.SubElement(static_route_nh, "static-route-next-hop")
        static_route_next_hop_key.text = kwargs.pop('static_route_next_hop')
        route_attributes = ET.SubElement(static_route_nh, "route-attributes")
        tag = ET.SubElement(route_attributes, "tag")
        tag.text = kwargs.pop('tag')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ipv6_unicast_ipv6_route_static_route_oif_static_route_dest(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        unicast = ET.SubElement(ipv6, "unicast")
        ipv6 = ET.SubElement(unicast, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-rtm")
        route = ET.SubElement(ipv6, "route")
        static_route_oif = ET.SubElement(route, "static-route-oif")
        static_route_oif_type_key = ET.SubElement(static_route_oif, "static-route-oif-type")
        static_route_oif_type_key.text = kwargs.pop('static_route_oif_type')
        static_route_oif_name_key = ET.SubElement(static_route_oif, "static-route-oif-name")
        static_route_oif_name_key.text = kwargs.pop('static_route_oif_name')
        static_route_dest = ET.SubElement(static_route_oif, "static-route-dest")
        static_route_dest.text = kwargs.pop('static_route_dest')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ipv6_unicast_ipv6_route_static_route_oif_static_route_oif_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        unicast = ET.SubElement(ipv6, "unicast")
        ipv6 = ET.SubElement(unicast, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-rtm")
        route = ET.SubElement(ipv6, "route")
        static_route_oif = ET.SubElement(route, "static-route-oif")
        static_route_dest_key = ET.SubElement(static_route_oif, "static-route-dest")
        static_route_dest_key.text = kwargs.pop('static_route_dest')
        static_route_oif_name_key = ET.SubElement(static_route_oif, "static-route-oif-name")
        static_route_oif_name_key.text = kwargs.pop('static_route_oif_name')
        static_route_oif_type = ET.SubElement(static_route_oif, "static-route-oif-type")
        static_route_oif_type.text = kwargs.pop('static_route_oif_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ipv6_unicast_ipv6_route_static_route_oif_static_route_oif_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        unicast = ET.SubElement(ipv6, "unicast")
        ipv6 = ET.SubElement(unicast, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-rtm")
        route = ET.SubElement(ipv6, "route")
        static_route_oif = ET.SubElement(route, "static-route-oif")
        static_route_dest_key = ET.SubElement(static_route_oif, "static-route-dest")
        static_route_dest_key.text = kwargs.pop('static_route_dest')
        static_route_oif_type_key = ET.SubElement(static_route_oif, "static-route-oif-type")
        static_route_oif_type_key.text = kwargs.pop('static_route_oif_type')
        static_route_oif_name = ET.SubElement(static_route_oif, "static-route-oif-name")
        static_route_oif_name.text = kwargs.pop('static_route_oif_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ipv6_unicast_ipv6_route_static_route_oif_route_attributes_metric(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        unicast = ET.SubElement(ipv6, "unicast")
        ipv6 = ET.SubElement(unicast, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-rtm")
        route = ET.SubElement(ipv6, "route")
        static_route_oif = ET.SubElement(route, "static-route-oif")
        static_route_dest_key = ET.SubElement(static_route_oif, "static-route-dest")
        static_route_dest_key.text = kwargs.pop('static_route_dest')
        static_route_oif_type_key = ET.SubElement(static_route_oif, "static-route-oif-type")
        static_route_oif_type_key.text = kwargs.pop('static_route_oif_type')
        static_route_oif_name_key = ET.SubElement(static_route_oif, "static-route-oif-name")
        static_route_oif_name_key.text = kwargs.pop('static_route_oif_name')
        route_attributes = ET.SubElement(static_route_oif, "route-attributes")
        metric = ET.SubElement(route_attributes, "metric")
        metric.text = kwargs.pop('metric')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ipv6_unicast_ipv6_route_static_route_oif_route_attributes_distance(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        unicast = ET.SubElement(ipv6, "unicast")
        ipv6 = ET.SubElement(unicast, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-rtm")
        route = ET.SubElement(ipv6, "route")
        static_route_oif = ET.SubElement(route, "static-route-oif")
        static_route_dest_key = ET.SubElement(static_route_oif, "static-route-dest")
        static_route_dest_key.text = kwargs.pop('static_route_dest')
        static_route_oif_type_key = ET.SubElement(static_route_oif, "static-route-oif-type")
        static_route_oif_type_key.text = kwargs.pop('static_route_oif_type')
        static_route_oif_name_key = ET.SubElement(static_route_oif, "static-route-oif-name")
        static_route_oif_name_key.text = kwargs.pop('static_route_oif_name')
        route_attributes = ET.SubElement(static_route_oif, "route-attributes")
        distance = ET.SubElement(route_attributes, "distance")
        distance.text = kwargs.pop('distance')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ipv6_unicast_ipv6_route_static_route_oif_route_attributes_tag(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        unicast = ET.SubElement(ipv6, "unicast")
        ipv6 = ET.SubElement(unicast, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-rtm")
        route = ET.SubElement(ipv6, "route")
        static_route_oif = ET.SubElement(route, "static-route-oif")
        static_route_dest_key = ET.SubElement(static_route_oif, "static-route-dest")
        static_route_dest_key.text = kwargs.pop('static_route_dest')
        static_route_oif_type_key = ET.SubElement(static_route_oif, "static-route-oif-type")
        static_route_oif_type_key.text = kwargs.pop('static_route_oif_type')
        static_route_oif_name_key = ET.SubElement(static_route_oif, "static-route-oif-name")
        static_route_oif_name_key.text = kwargs.pop('static_route_oif_name')
        route_attributes = ET.SubElement(static_route_oif, "route-attributes")
        tag = ET.SubElement(route_attributes, "tag")
        tag.text = kwargs.pop('tag')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ipv6_unicast_ipv6_route_link_local_static_route_nh_link_local_static_route_dest(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        unicast = ET.SubElement(ipv6, "unicast")
        ipv6 = ET.SubElement(unicast, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-rtm")
        route = ET.SubElement(ipv6, "route")
        link_local_static_route_nh = ET.SubElement(route, "link-local-static-route-nh")
        link_local_nexthop_key = ET.SubElement(link_local_static_route_nh, "link-local-nexthop")
        link_local_nexthop_key.text = kwargs.pop('link_local_nexthop')
        link_local_route_oif_type_key = ET.SubElement(link_local_static_route_nh, "link-local-route-oif-type")
        link_local_route_oif_type_key.text = kwargs.pop('link_local_route_oif_type')
        link_local_route_oif_name_key = ET.SubElement(link_local_static_route_nh, "link-local-route-oif-name")
        link_local_route_oif_name_key.text = kwargs.pop('link_local_route_oif_name')
        link_local_static_route_dest = ET.SubElement(link_local_static_route_nh, "link-local-static-route-dest")
        link_local_static_route_dest.text = kwargs.pop('link_local_static_route_dest')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ipv6_unicast_ipv6_route_link_local_static_route_nh_link_local_nexthop(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        unicast = ET.SubElement(ipv6, "unicast")
        ipv6 = ET.SubElement(unicast, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-rtm")
        route = ET.SubElement(ipv6, "route")
        link_local_static_route_nh = ET.SubElement(route, "link-local-static-route-nh")
        link_local_static_route_dest_key = ET.SubElement(link_local_static_route_nh, "link-local-static-route-dest")
        link_local_static_route_dest_key.text = kwargs.pop('link_local_static_route_dest')
        link_local_route_oif_type_key = ET.SubElement(link_local_static_route_nh, "link-local-route-oif-type")
        link_local_route_oif_type_key.text = kwargs.pop('link_local_route_oif_type')
        link_local_route_oif_name_key = ET.SubElement(link_local_static_route_nh, "link-local-route-oif-name")
        link_local_route_oif_name_key.text = kwargs.pop('link_local_route_oif_name')
        link_local_nexthop = ET.SubElement(link_local_static_route_nh, "link-local-nexthop")
        link_local_nexthop.text = kwargs.pop('link_local_nexthop')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ipv6_unicast_ipv6_route_link_local_static_route_nh_link_local_route_oif_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        unicast = ET.SubElement(ipv6, "unicast")
        ipv6 = ET.SubElement(unicast, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-rtm")
        route = ET.SubElement(ipv6, "route")
        link_local_static_route_nh = ET.SubElement(route, "link-local-static-route-nh")
        link_local_static_route_dest_key = ET.SubElement(link_local_static_route_nh, "link-local-static-route-dest")
        link_local_static_route_dest_key.text = kwargs.pop('link_local_static_route_dest')
        link_local_nexthop_key = ET.SubElement(link_local_static_route_nh, "link-local-nexthop")
        link_local_nexthop_key.text = kwargs.pop('link_local_nexthop')
        link_local_route_oif_name_key = ET.SubElement(link_local_static_route_nh, "link-local-route-oif-name")
        link_local_route_oif_name_key.text = kwargs.pop('link_local_route_oif_name')
        link_local_route_oif_type = ET.SubElement(link_local_static_route_nh, "link-local-route-oif-type")
        link_local_route_oif_type.text = kwargs.pop('link_local_route_oif_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ipv6_unicast_ipv6_route_link_local_static_route_nh_link_local_route_oif_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        unicast = ET.SubElement(ipv6, "unicast")
        ipv6 = ET.SubElement(unicast, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-rtm")
        route = ET.SubElement(ipv6, "route")
        link_local_static_route_nh = ET.SubElement(route, "link-local-static-route-nh")
        link_local_static_route_dest_key = ET.SubElement(link_local_static_route_nh, "link-local-static-route-dest")
        link_local_static_route_dest_key.text = kwargs.pop('link_local_static_route_dest')
        link_local_nexthop_key = ET.SubElement(link_local_static_route_nh, "link-local-nexthop")
        link_local_nexthop_key.text = kwargs.pop('link_local_nexthop')
        link_local_route_oif_type_key = ET.SubElement(link_local_static_route_nh, "link-local-route-oif-type")
        link_local_route_oif_type_key.text = kwargs.pop('link_local_route_oif_type')
        link_local_route_oif_name = ET.SubElement(link_local_static_route_nh, "link-local-route-oif-name")
        link_local_route_oif_name.text = kwargs.pop('link_local_route_oif_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ipv6_unicast_ipv6_route_link_local_static_route_nh_route_attributes_metric(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        unicast = ET.SubElement(ipv6, "unicast")
        ipv6 = ET.SubElement(unicast, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-rtm")
        route = ET.SubElement(ipv6, "route")
        link_local_static_route_nh = ET.SubElement(route, "link-local-static-route-nh")
        link_local_static_route_dest_key = ET.SubElement(link_local_static_route_nh, "link-local-static-route-dest")
        link_local_static_route_dest_key.text = kwargs.pop('link_local_static_route_dest')
        link_local_nexthop_key = ET.SubElement(link_local_static_route_nh, "link-local-nexthop")
        link_local_nexthop_key.text = kwargs.pop('link_local_nexthop')
        link_local_route_oif_type_key = ET.SubElement(link_local_static_route_nh, "link-local-route-oif-type")
        link_local_route_oif_type_key.text = kwargs.pop('link_local_route_oif_type')
        link_local_route_oif_name_key = ET.SubElement(link_local_static_route_nh, "link-local-route-oif-name")
        link_local_route_oif_name_key.text = kwargs.pop('link_local_route_oif_name')
        route_attributes = ET.SubElement(link_local_static_route_nh, "route-attributes")
        metric = ET.SubElement(route_attributes, "metric")
        metric.text = kwargs.pop('metric')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ipv6_unicast_ipv6_route_link_local_static_route_nh_route_attributes_distance(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        unicast = ET.SubElement(ipv6, "unicast")
        ipv6 = ET.SubElement(unicast, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-rtm")
        route = ET.SubElement(ipv6, "route")
        link_local_static_route_nh = ET.SubElement(route, "link-local-static-route-nh")
        link_local_static_route_dest_key = ET.SubElement(link_local_static_route_nh, "link-local-static-route-dest")
        link_local_static_route_dest_key.text = kwargs.pop('link_local_static_route_dest')
        link_local_nexthop_key = ET.SubElement(link_local_static_route_nh, "link-local-nexthop")
        link_local_nexthop_key.text = kwargs.pop('link_local_nexthop')
        link_local_route_oif_type_key = ET.SubElement(link_local_static_route_nh, "link-local-route-oif-type")
        link_local_route_oif_type_key.text = kwargs.pop('link_local_route_oif_type')
        link_local_route_oif_name_key = ET.SubElement(link_local_static_route_nh, "link-local-route-oif-name")
        link_local_route_oif_name_key.text = kwargs.pop('link_local_route_oif_name')
        route_attributes = ET.SubElement(link_local_static_route_nh, "route-attributes")
        distance = ET.SubElement(route_attributes, "distance")
        distance.text = kwargs.pop('distance')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ipv6_unicast_ipv6_route_link_local_static_route_nh_route_attributes_tag(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        unicast = ET.SubElement(ipv6, "unicast")
        ipv6 = ET.SubElement(unicast, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-rtm")
        route = ET.SubElement(ipv6, "route")
        link_local_static_route_nh = ET.SubElement(route, "link-local-static-route-nh")
        link_local_static_route_dest_key = ET.SubElement(link_local_static_route_nh, "link-local-static-route-dest")
        link_local_static_route_dest_key.text = kwargs.pop('link_local_static_route_dest')
        link_local_nexthop_key = ET.SubElement(link_local_static_route_nh, "link-local-nexthop")
        link_local_nexthop_key.text = kwargs.pop('link_local_nexthop')
        link_local_route_oif_type_key = ET.SubElement(link_local_static_route_nh, "link-local-route-oif-type")
        link_local_route_oif_type_key.text = kwargs.pop('link_local_route_oif_type')
        link_local_route_oif_name_key = ET.SubElement(link_local_static_route_nh, "link-local-route-oif-name")
        link_local_route_oif_name_key.text = kwargs.pop('link_local_route_oif_name')
        route_attributes = ET.SubElement(link_local_static_route_nh, "route-attributes")
        tag = ET.SubElement(route_attributes, "tag")
        tag.text = kwargs.pop('tag')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ipv6_unicast_ipv6_route_static_route_nh_vrf_static_route_next_vrf_dest(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        unicast = ET.SubElement(ipv6, "unicast")
        ipv6 = ET.SubElement(unicast, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-rtm")
        route = ET.SubElement(ipv6, "route")
        static_route_nh_vrf = ET.SubElement(route, "static-route-nh-vrf")
        next_hop_vrf_key = ET.SubElement(static_route_nh_vrf, "next-hop-vrf")
        next_hop_vrf_key.text = kwargs.pop('next_hop_vrf')
        static_route_next_hop_key = ET.SubElement(static_route_nh_vrf, "static-route-next-hop")
        static_route_next_hop_key.text = kwargs.pop('static_route_next_hop')
        static_route_next_vrf_dest = ET.SubElement(static_route_nh_vrf, "static-route-next-vrf-dest")
        static_route_next_vrf_dest.text = kwargs.pop('static_route_next_vrf_dest')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ipv6_unicast_ipv6_route_static_route_nh_vrf_next_hop_vrf(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        unicast = ET.SubElement(ipv6, "unicast")
        ipv6 = ET.SubElement(unicast, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-rtm")
        route = ET.SubElement(ipv6, "route")
        static_route_nh_vrf = ET.SubElement(route, "static-route-nh-vrf")
        static_route_next_vrf_dest_key = ET.SubElement(static_route_nh_vrf, "static-route-next-vrf-dest")
        static_route_next_vrf_dest_key.text = kwargs.pop('static_route_next_vrf_dest')
        static_route_next_hop_key = ET.SubElement(static_route_nh_vrf, "static-route-next-hop")
        static_route_next_hop_key.text = kwargs.pop('static_route_next_hop')
        next_hop_vrf = ET.SubElement(static_route_nh_vrf, "next-hop-vrf")
        next_hop_vrf.text = kwargs.pop('next_hop_vrf')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ipv6_unicast_ipv6_route_static_route_nh_vrf_static_route_next_hop(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        unicast = ET.SubElement(ipv6, "unicast")
        ipv6 = ET.SubElement(unicast, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-rtm")
        route = ET.SubElement(ipv6, "route")
        static_route_nh_vrf = ET.SubElement(route, "static-route-nh-vrf")
        static_route_next_vrf_dest_key = ET.SubElement(static_route_nh_vrf, "static-route-next-vrf-dest")
        static_route_next_vrf_dest_key.text = kwargs.pop('static_route_next_vrf_dest')
        next_hop_vrf_key = ET.SubElement(static_route_nh_vrf, "next-hop-vrf")
        next_hop_vrf_key.text = kwargs.pop('next_hop_vrf')
        static_route_next_hop = ET.SubElement(static_route_nh_vrf, "static-route-next-hop")
        static_route_next_hop.text = kwargs.pop('static_route_next_hop')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ipv6_unicast_ipv6_imprt_routes_src_vrf(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        unicast = ET.SubElement(ipv6, "unicast")
        ipv6 = ET.SubElement(unicast, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-rtm")
        imprt = ET.SubElement(ipv6, "import")
        routes = ET.SubElement(imprt, "routes")
        route_map_key = ET.SubElement(routes, "route-map")
        route_map_key.text = kwargs.pop('route_map')
        src_vrf = ET.SubElement(routes, "src-vrf")
        src_vrf.text = kwargs.pop('src_vrf')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_address_family_ipv6_unicast_ipv6_imprt_routes_route_map(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        address_family = ET.SubElement(vrf, "address-family")
        ipv6 = ET.SubElement(address_family, "ipv6")
        unicast = ET.SubElement(ipv6, "unicast")
        ipv6 = ET.SubElement(unicast, "ipv6", xmlns="urn:brocade.com:mgmt:brocade-ipv6-rtm")
        imprt = ET.SubElement(ipv6, "import")
        routes = ET.SubElement(imprt, "routes")
        src_vrf_key = ET.SubElement(routes, "src-vrf")
        src_vrf_key.text = kwargs.pop('src_vrf')
        route_map = ET.SubElement(routes, "route-map")
        route_map.text = kwargs.pop('route_map')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrf_ip_vrf_router_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrf = ET.SubElement(rbridge_id, "vrf", xmlns="urn:brocade.com:mgmt:brocade-vrf")
        vrf_name_key = ET.SubElement(vrf, "vrf-name")
        vrf_name_key.text = kwargs.pop('vrf_name')
        ip = ET.SubElement(vrf, "ip")
        vrf_router_id = ET.SubElement(ip, "vrf-router-id")
        vrf_router_id.text = kwargs.pop('vrf_router_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_system_max_arp(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        system_max = ET.SubElement(rbridge_id, "system-max", xmlns="urn:brocade.com:mgmt:brocade-arp")
        arp = ET.SubElement(system_max, "arp")
        arp.text = kwargs.pop('arp')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_arp_entry_arp_ip_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        arp_entry = ET.SubElement(rbridge_id, "arp-entry", xmlns="urn:brocade.com:mgmt:brocade-arp")
        arp_ip_address = ET.SubElement(arp_entry, "arp-ip-address")
        arp_ip_address.text = kwargs.pop('arp_ip_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_arp_entry_mac_address_value(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        arp_entry = ET.SubElement(rbridge_id, "arp-entry", xmlns="urn:brocade.com:mgmt:brocade-arp")
        arp_ip_address_key = ET.SubElement(arp_entry, "arp-ip-address")
        arp_ip_address_key.text = kwargs.pop('arp_ip_address')
        mac_address_value = ET.SubElement(arp_entry, "mac-address-value")
        mac_address_value.text = kwargs.pop('mac_address_value')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_arp_entry_interfacename(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        arp_entry = ET.SubElement(rbridge_id, "arp-entry", xmlns="urn:brocade.com:mgmt:brocade-arp")
        arp_ip_address_key = ET.SubElement(arp_entry, "arp-ip-address")
        arp_ip_address_key.text = kwargs.pop('arp_ip_address')
        interfacename = ET.SubElement(arp_entry, "interfacename")
        interfacename.text = kwargs.pop('interfacename')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_arp_entry_interfacetype_GigabitEthernet_GigabitEthernet(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        arp_entry = ET.SubElement(rbridge_id, "arp-entry", xmlns="urn:brocade.com:mgmt:brocade-arp")
        arp_ip_address_key = ET.SubElement(arp_entry, "arp-ip-address")
        arp_ip_address_key.text = kwargs.pop('arp_ip_address')
        interfacetype = ET.SubElement(arp_entry, "interfacetype")
        GigabitEthernet = ET.SubElement(interfacetype, "GigabitEthernet")
        GigabitEthernet = ET.SubElement(GigabitEthernet, "GigabitEthernet")
        GigabitEthernet.text = kwargs.pop('GigabitEthernet')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_arp_entry_interfacetype_TenGigabitEthernet_TenGigabitEthernet(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        arp_entry = ET.SubElement(rbridge_id, "arp-entry", xmlns="urn:brocade.com:mgmt:brocade-arp")
        arp_ip_address_key = ET.SubElement(arp_entry, "arp-ip-address")
        arp_ip_address_key.text = kwargs.pop('arp_ip_address')
        interfacetype = ET.SubElement(arp_entry, "interfacetype")
        TenGigabitEthernet = ET.SubElement(interfacetype, "TenGigabitEthernet")
        TenGigabitEthernet = ET.SubElement(TenGigabitEthernet, "TenGigabitEthernet")
        TenGigabitEthernet.text = kwargs.pop('TenGigabitEthernet')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_arp_entry_interfacetype_FortyGigabitEthernet_FortyGigabitEthernet(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        arp_entry = ET.SubElement(rbridge_id, "arp-entry", xmlns="urn:brocade.com:mgmt:brocade-arp")
        arp_ip_address_key = ET.SubElement(arp_entry, "arp-ip-address")
        arp_ip_address_key.text = kwargs.pop('arp_ip_address')
        interfacetype = ET.SubElement(arp_entry, "interfacetype")
        FortyGigabitEthernet = ET.SubElement(interfacetype, "FortyGigabitEthernet")
        FortyGigabitEthernet = ET.SubElement(FortyGigabitEthernet, "FortyGigabitEthernet")
        FortyGigabitEthernet.text = kwargs.pop('FortyGigabitEthernet')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_arp_entry_interfacetype_HundredGigabitEthernet_HundredGigabitEthernet(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        arp_entry = ET.SubElement(rbridge_id, "arp-entry", xmlns="urn:brocade.com:mgmt:brocade-arp")
        arp_ip_address_key = ET.SubElement(arp_entry, "arp-ip-address")
        arp_ip_address_key.text = kwargs.pop('arp_ip_address')
        interfacetype = ET.SubElement(arp_entry, "interfacetype")
        HundredGigabitEthernet = ET.SubElement(interfacetype, "HundredGigabitEthernet")
        HundredGigabitEthernet = ET.SubElement(HundredGigabitEthernet, "HundredGigabitEthernet")
        HundredGigabitEthernet.text = kwargs.pop('HundredGigabitEthernet')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_arp_entry_interfacetype_Ve_Ve(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        arp_entry = ET.SubElement(rbridge_id, "arp-entry", xmlns="urn:brocade.com:mgmt:brocade-arp")
        arp_ip_address_key = ET.SubElement(arp_entry, "arp-ip-address")
        arp_ip_address_key.text = kwargs.pop('arp_ip_address')
        interfacetype = ET.SubElement(arp_entry, "interfacetype")
        Ve = ET.SubElement(interfacetype, "Ve")
        Ve = ET.SubElement(Ve, "Ve")
        Ve.text = kwargs.pop('Ve')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vcs_auto_shut_lag(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vcs = ET.SubElement(rbridge_id, "vcs", xmlns="http://brocade.com/ns/brocade-auto-shut-edge-port")
        auto_shut = ET.SubElement(vcs, "auto-shut")
        lag = ET.SubElement(auto_shut, "lag")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_chassis_virtual_ip(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        chassis = ET.SubElement(rbridge_id, "chassis", xmlns="urn:brocade.com:mgmt:brocade-chassis")
        virtual_ip = ET.SubElement(chassis, "virtual-ip")
        virtual_ip.text = kwargs.pop('virtual_ip')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_chassis_virtual_ipv6(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        chassis = ET.SubElement(rbridge_id, "chassis", xmlns="urn:brocade.com:mgmt:brocade-chassis")
        virtual_ipv6 = ET.SubElement(chassis, "virtual-ipv6")
        virtual_ipv6.text = kwargs.pop('virtual_ipv6')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_chassis_oper_address_virtual_oper_Vip_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        chassis = ET.SubElement(rbridge_id, "chassis", xmlns="urn:brocade.com:mgmt:brocade-chassis")
        oper_address = ET.SubElement(chassis, "oper-address")
        virtual_oper_Vip_address = ET.SubElement(oper_address, "virtual-oper-Vip-address")
        virtual_oper_Vip_address.text = kwargs.pop('virtual_oper_Vip_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_clock_timezone(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        clock = ET.SubElement(rbridge_id, "clock", xmlns="urn:brocade.com:mgmt:brocade-clock")
        timezone = ET.SubElement(clock, "timezone")
        timezone.text = kwargs.pop('timezone')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_fabric_ecmp_ecmp_load_balance(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        fabric = ET.SubElement(rbridge_id, "fabric", xmlns="urn:brocade.com:mgmt:brocade-fabric-service")
        ecmp = ET.SubElement(fabric, "ecmp")
        ecmp_load_balance = ET.SubElement(ecmp, "ecmp-load-balance")
        ecmp_load_balance.text = kwargs.pop('ecmp_load_balance')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_fabric_ecmp_load_balance_hash_swap(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        fabric = ET.SubElement(rbridge_id, "fabric", xmlns="urn:brocade.com:mgmt:brocade-fabric-service")
        ecmp = ET.SubElement(fabric, "ecmp")
        load_balance_hash_swap = ET.SubElement(ecmp, "load-balance-hash-swap")
        load_balance_hash_swap.text = kwargs.pop('load_balance_hash_swap')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_fabric_route_mcast_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        fabric = ET.SubElement(rbridge_id, "fabric", xmlns="urn:brocade.com:mgmt:brocade-fabric-service")
        route = ET.SubElement(fabric, "route")
        mcast = ET.SubElement(route, "mcast")
        priority = ET.SubElement(mcast, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_fabric_port_channel_po_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        fabric = ET.SubElement(rbridge_id, "fabric", xmlns="urn:brocade.com:mgmt:brocade-fabric-service")
        port_channel = ET.SubElement(fabric, "port-channel")
        po_id = ET.SubElement(port_channel, "po-id")
        po_id.text = kwargs.pop('po_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_fabric_port_channel_vlag_load_balance(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        fabric = ET.SubElement(rbridge_id, "fabric", xmlns="urn:brocade.com:mgmt:brocade-fabric-service")
        port_channel = ET.SubElement(fabric, "port-channel")
        po_id_key = ET.SubElement(port_channel, "po-id")
        po_id_key.text = kwargs.pop('po_id')
        vlag_load_balance = ET.SubElement(port_channel, "vlag-load-balance")
        vlag_load_balance.text = kwargs.pop('vlag_load_balance')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_fcsp_auth_proto_auth_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        fcsp = ET.SubElement(rbridge_id, "fcsp", xmlns="urn:brocade.com:mgmt:brocade-fc-auth")
        auth = ET.SubElement(fcsp, "auth")
        proto = ET.SubElement(auth, "proto")
        auth_type = ET.SubElement(proto, "auth-type")
        auth_type.text = kwargs.pop('auth_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_fcsp_auth_proto_group(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        fcsp = ET.SubElement(rbridge_id, "fcsp", xmlns="urn:brocade.com:mgmt:brocade-fc-auth")
        auth = ET.SubElement(fcsp, "auth")
        proto = ET.SubElement(auth, "proto")
        group = ET.SubElement(proto, "group")
        group.text = kwargs.pop('group')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_fcsp_auth_proto_hash(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        fcsp = ET.SubElement(rbridge_id, "fcsp", xmlns="urn:brocade.com:mgmt:brocade-fc-auth")
        auth = ET.SubElement(fcsp, "auth")
        proto = ET.SubElement(auth, "proto")
        hash = ET.SubElement(proto, "hash")
        hash.text = kwargs.pop('hash')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_fcsp_auth_policy_switch(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        fcsp = ET.SubElement(rbridge_id, "fcsp", xmlns="urn:brocade.com:mgmt:brocade-fc-auth")
        auth = ET.SubElement(fcsp, "auth")
        policy = ET.SubElement(auth, "policy")
        switch = ET.SubElement(policy, "switch")
        switch.text = kwargs.pop('switch')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_secpolicy_defined_policy_policies_policy(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        secpolicy = ET.SubElement(rbridge_id, "secpolicy", xmlns="urn:brocade.com:mgmt:brocade-fc-auth")
        defined_policy = ET.SubElement(secpolicy, "defined-policy")
        policies = ET.SubElement(defined_policy, "policies")
        policy = ET.SubElement(policies, "policy")
        policy.text = kwargs.pop('policy')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_secpolicy_defined_policy_policies_member_entry_member(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        secpolicy = ET.SubElement(rbridge_id, "secpolicy", xmlns="urn:brocade.com:mgmt:brocade-fc-auth")
        defined_policy = ET.SubElement(secpolicy, "defined-policy")
        policies = ET.SubElement(defined_policy, "policies")
        policy_key = ET.SubElement(policies, "policy")
        policy_key.text = kwargs.pop('policy')
        member_entry = ET.SubElement(policies, "member-entry")
        member = ET.SubElement(member_entry, "member")
        member.text = kwargs.pop('member')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_secpolicy_active_policy_policies_policy(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        secpolicy = ET.SubElement(rbridge_id, "secpolicy", xmlns="urn:brocade.com:mgmt:brocade-fc-auth")
        active_policy = ET.SubElement(secpolicy, "active-policy")
        policies = ET.SubElement(active_policy, "policies")
        policy = ET.SubElement(policies, "policy")
        policy.text = kwargs.pop('policy')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_secpolicy_active_policy_policies_member_entry_member(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        secpolicy = ET.SubElement(rbridge_id, "secpolicy", xmlns="urn:brocade.com:mgmt:brocade-fc-auth")
        active_policy = ET.SubElement(secpolicy, "active-policy")
        policies = ET.SubElement(active_policy, "policies")
        policy_key = ET.SubElement(policies, "policy")
        policy_key.text = kwargs.pop('policy')
        member_entry = ET.SubElement(policies, "member-entry")
        member = ET.SubElement(member_entry, "member")
        member.text = kwargs.pop('member')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_hardware_profile_tcam_predefined_tcam_profiletype(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        hardware_profile = ET.SubElement(rbridge_id, "hardware-profile", xmlns="urn:brocade.com:mgmt:brocade-hardware")
        tcam = ET.SubElement(hardware_profile, "tcam")
        predefined = ET.SubElement(tcam, "predefined")
        tcam_profiletype = ET.SubElement(predefined, "tcam_profiletype")
        tcam_profiletype.text = kwargs.pop('tcam_profiletype')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_hardware_profile_route_table_predefined_routing_profiletype(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        hardware_profile = ET.SubElement(rbridge_id, "hardware-profile", xmlns="urn:brocade.com:mgmt:brocade-hardware")
        route_table = ET.SubElement(hardware_profile, "route-table")
        predefined = ET.SubElement(route_table, "predefined")
        routing_profiletype = ET.SubElement(predefined, "routing_profiletype")
        routing_profiletype.text = kwargs.pop('routing_profiletype')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_http_server_shutdown(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        http = ET.SubElement(rbridge_id, "http", xmlns="urn:brocade.com:mgmt:brocade-http")
        server = ET.SubElement(http, "server")
        shutdown = ET.SubElement(server, "shutdown")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        name = ET.SubElement(route_map, "name")
        name.text = kwargs.pop('name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_action_rm(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        action_rm = ET.SubElement(route_map, "action-rm")
        action_rm.text = kwargs.pop('action_rm')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_instance(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance = ET.SubElement(route_map, "instance")
        instance.text = kwargs.pop('instance')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_match_ipv6_address_ipv6_prefix_list_rmm(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        match = ET.SubElement(content, "match")
        ipv6 = ET.SubElement(match, "ipv6")
        address = ET.SubElement(ipv6, "address")
        ipv6_prefix_list_rmm = ET.SubElement(address, "ipv6-prefix-list-rmm")
        ipv6_prefix_list_rmm.text = kwargs.pop('ipv6_prefix_list_rmm')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_match_ipv6_address_ipv6_acl_rmm(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        match = ET.SubElement(content, "match")
        ipv6 = ET.SubElement(match, "ipv6")
        address = ET.SubElement(ipv6, "address")
        ipv6_acl_rmm = ET.SubElement(address, "ipv6-acl-rmm")
        ipv6_acl_rmm.text = kwargs.pop('ipv6_acl_rmm')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_match_ipv6_next_hop_ipv6_prefix_list_rmm_n(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        match = ET.SubElement(content, "match")
        ipv6 = ET.SubElement(match, "ipv6")
        next_hop = ET.SubElement(ipv6, "next-hop")
        ipv6_prefix_list_rmm_n = ET.SubElement(next_hop, "ipv6-prefix-list-rmm-n")
        ipv6_prefix_list_rmm_n.text = kwargs.pop('ipv6_prefix_list_rmm_n')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_match_ipv6_route_source_ipv6_prefix_list_rmrs(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        match = ET.SubElement(content, "match")
        ipv6 = ET.SubElement(match, "ipv6")
        route_source = ET.SubElement(ipv6, "route-source")
        ipv6_prefix_list_rmrs = ET.SubElement(route_source, "ipv6-prefix-list-rmrs")
        ipv6_prefix_list_rmrs.text = kwargs.pop('ipv6_prefix_list_rmrs')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_match_ip_address_prefix_list_rmm(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        match = ET.SubElement(content, "match")
        ip = ET.SubElement(match, "ip")
        address = ET.SubElement(ip, "address")
        prefix_list_rmm = ET.SubElement(address, "prefix-list-rmm")
        prefix_list_rmm.text = kwargs.pop('prefix_list_rmm')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_match_ip_address_acl_rmm(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        match = ET.SubElement(content, "match")
        ip = ET.SubElement(match, "ip")
        address = ET.SubElement(ip, "address")
        acl_rmm = ET.SubElement(address, "acl-rmm")
        acl_rmm.text = kwargs.pop('acl_rmm')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_match_ip_next_hop_prefix_list_rmm_n(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        match = ET.SubElement(content, "match")
        ip = ET.SubElement(match, "ip")
        next_hop = ET.SubElement(ip, "next-hop")
        prefix_list_rmm_n = ET.SubElement(next_hop, "prefix-list-rmm-n")
        prefix_list_rmm_n.text = kwargs.pop('prefix_list_rmm_n')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_match_ip_route_source_prefix_list_rmrs(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        match = ET.SubElement(content, "match")
        ip = ET.SubElement(match, "ip")
        route_source = ET.SubElement(ip, "route-source")
        prefix_list_rmrs = ET.SubElement(route_source, "prefix-list-rmrs")
        prefix_list_rmrs.text = kwargs.pop('prefix_list_rmrs')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_match_extcommunity_extcommunity_num(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        match = ET.SubElement(content, "match")
        extcommunity = ET.SubElement(match, "extcommunity")
        extcommunity_num = ET.SubElement(extcommunity, "extcommunity-num")
        extcommunity_num.text = kwargs.pop('extcommunity_num')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_match_metric_metric_rmm(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        match = ET.SubElement(content, "match")
        metric = ET.SubElement(match, "metric")
        metric_rmm = ET.SubElement(metric, "metric-rmm")
        metric_rmm.text = kwargs.pop('metric_rmm')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_match_route_type_route_type_rmm(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        match = ET.SubElement(content, "match")
        route_type = ET.SubElement(match, "route-type")
        route_type_rmm = ET.SubElement(route_type, "route-type-rmm")
        route_type_rmm.text = kwargs.pop('route_type_rmm')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_match_as_path_as_path_access_list_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        match = ET.SubElement(content, "match")
        as_path = ET.SubElement(match, "as-path")
        as_path_access_list_name = ET.SubElement(as_path, "as-path-access-list-name")
        as_path_access_list_name.text = kwargs.pop('as_path_access_list_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_match_community_community_access_list_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        match = ET.SubElement(content, "match")
        community = ET.SubElement(match, "community")
        community_access_list_name = ET.SubElement(community, "community-access-list-name")
        community_access_list_name.text = kwargs.pop('community_access_list_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_match_next_hop_next_hop_filter_val(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        match = ET.SubElement(content, "match")
        next_hop = ET.SubElement(match, "next-hop")
        next_hop_filter_val = ET.SubElement(next_hop, "next-hop-filter-val")
        next_hop_filter_val.text = kwargs.pop('next_hop_filter_val')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_match_protocol_protocol_static_container_static(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        match = ET.SubElement(content, "match")
        protocol = ET.SubElement(match, "protocol")
        protocol_static_container = ET.SubElement(protocol, "protocol-static-container")
        static = ET.SubElement(protocol_static_container, "static")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_match_protocol_bgp_protocol_container_protocol_bgp(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        match = ET.SubElement(content, "match")
        protocol = ET.SubElement(match, "protocol")
        bgp_protocol_container = ET.SubElement(protocol, "bgp-protocol-container")
        protocol_bgp = ET.SubElement(bgp_protocol_container, "protocol-bgp")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_match_protocol_bgp_protocol_container_bgp_route_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        match = ET.SubElement(content, "match")
        protocol = ET.SubElement(match, "protocol")
        bgp_protocol_container = ET.SubElement(protocol, "bgp-protocol-container")
        bgp_route_type = ET.SubElement(bgp_protocol_container, "bgp-route-type")
        bgp_route_type.text = kwargs.pop('bgp_route_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_set_ip_dscp_dscp_rms(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        set = ET.SubElement(content, "set")
        ip = ET.SubElement(set, "ip")
        dscp = ET.SubElement(ip, "dscp")
        dscp_rms = ET.SubElement(dscp, "dscp-rms")
        dscp_rms.text = kwargs.pop('dscp_rms')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_set_ip_interface_null0(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        set = ET.SubElement(content, "set")
        ip = ET.SubElement(set, "ip")
        interface = ET.SubElement(ip, "interface")
        null0 = ET.SubElement(interface, "null0")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_set_ip_next_hop_peer_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        set = ET.SubElement(content, "set")
        ip = ET.SubElement(set, "ip")
        next_hop = ET.SubElement(ip, "next-hop")
        peer_address = ET.SubElement(next_hop, "peer-address")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_set_ip_globl_next_global_hop_next_hop(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        set = ET.SubElement(content, "set")
        ip = ET.SubElement(set, "ip")
        globl = ET.SubElement(ip, "global")
        next_global_hop = ET.SubElement(globl, "next-global-hop")
        next_hop = ET.SubElement(next_global_hop, "next-hop")
        next_hop.text = kwargs.pop('next_hop')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_set_ip_next_ip_next_hop_next_hop(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        set = ET.SubElement(content, "set")
        ip = ET.SubElement(set, "ip")
        next_ip = ET.SubElement(ip, "next-ip")
        next_hop = ET.SubElement(next_ip, "next-hop")
        next_hop = ET.SubElement(next_hop, "next-hop")
        next_hop.text = kwargs.pop('next_hop')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_set_ip_next_vrf_next_vrf_list_vrf(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        set = ET.SubElement(content, "set")
        ip = ET.SubElement(set, "ip")
        next_vrf = ET.SubElement(ip, "next-vrf")
        next_vrf_list = ET.SubElement(next_vrf, "next-vrf-list")
        next_hop_key = ET.SubElement(next_vrf_list, "next-hop")
        next_hop_key.text = kwargs.pop('next_hop')
        vrf = ET.SubElement(next_vrf_list, "vrf")
        vrf.text = kwargs.pop('vrf')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_set_ip_next_vrf_next_vrf_list_next_hop(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        set = ET.SubElement(content, "set")
        ip = ET.SubElement(set, "ip")
        next_vrf = ET.SubElement(ip, "next-vrf")
        next_vrf_list = ET.SubElement(next_vrf, "next-vrf-list")
        vrf_key = ET.SubElement(next_vrf_list, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        next_hop = ET.SubElement(next_vrf_list, "next-hop")
        next_hop.text = kwargs.pop('next_hop')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_set_ipv6_globl_next_global_hop_next_hop(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        set = ET.SubElement(content, "set")
        ipv6 = ET.SubElement(set, "ipv6")
        globl = ET.SubElement(ipv6, "global")
        next_global_hop = ET.SubElement(globl, "next-global-hop")
        next_hop = ET.SubElement(next_global_hop, "next-hop")
        next_hop.text = kwargs.pop('next_hop')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_set_ipv6_next_ip_next_hop_next_hop(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        set = ET.SubElement(content, "set")
        ipv6 = ET.SubElement(set, "ipv6")
        next_ip = ET.SubElement(ipv6, "next-ip")
        next_hop = ET.SubElement(next_ip, "next-hop")
        next_hop = ET.SubElement(next_hop, "next-hop")
        next_hop.text = kwargs.pop('next_hop')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_set_ipv6_next_vrf_next_vrf_list_vrf(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        set = ET.SubElement(content, "set")
        ipv6 = ET.SubElement(set, "ipv6")
        next_vrf = ET.SubElement(ipv6, "next-vrf")
        next_vrf_list = ET.SubElement(next_vrf, "next-vrf-list")
        next_hop_key = ET.SubElement(next_vrf_list, "next-hop")
        next_hop_key.text = kwargs.pop('next_hop')
        vrf = ET.SubElement(next_vrf_list, "vrf")
        vrf.text = kwargs.pop('vrf')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_set_ipv6_next_vrf_next_vrf_list_next_hop(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        set = ET.SubElement(content, "set")
        ipv6 = ET.SubElement(set, "ipv6")
        next_vrf = ET.SubElement(ipv6, "next-vrf")
        next_vrf_list = ET.SubElement(next_vrf, "next-vrf-list")
        vrf_key = ET.SubElement(next_vrf_list, "vrf")
        vrf_key.text = kwargs.pop('vrf')
        next_hop = ET.SubElement(next_vrf_list, "next-hop")
        next_hop.text = kwargs.pop('next_hop')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_set_extcommunity_rt_ASN_NN_rt(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        set = ET.SubElement(content, "set")
        extcommunity = ET.SubElement(set, "extcommunity")
        rt = ET.SubElement(extcommunity, "rt")
        ASN_NN_rt = ET.SubElement(rt, "ASN-NN-rt")
        ASN_NN_rt.text = kwargs.pop('ASN_NN_rt')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_set_extcommunity_soo_ASN_NN_soo(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        set = ET.SubElement(content, "set")
        extcommunity = ET.SubElement(set, "extcommunity")
        soo = ET.SubElement(extcommunity, "soo")
        ASN_NN_soo = ET.SubElement(soo, "ASN-NN-soo")
        ASN_NN_soo.text = kwargs.pop('ASN_NN_soo')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_set_community_set_community_expr(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        set = ET.SubElement(content, "set")
        community = ET.SubElement(set, "community")
        set_community_expr = ET.SubElement(community, "set-community-expr")
        set_community_expr.text = kwargs.pop('set_community_expr')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_set_metric_delta_rms(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        set = ET.SubElement(content, "set")
        metric = ET.SubElement(set, "metric")
        delta_rms = ET.SubElement(metric, "delta-rms")
        delta_rms.text = kwargs.pop('delta_rms')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_set_metric_metric_rms(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        set = ET.SubElement(content, "set")
        metric = ET.SubElement(set, "metric")
        metric_rms = ET.SubElement(metric, "metric-rms")
        metric_rms.text = kwargs.pop('metric_rms')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_set_distance_dist_rms(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        set = ET.SubElement(content, "set")
        distance = ET.SubElement(set, "distance")
        dist_rms = ET.SubElement(distance, "dist-rms")
        dist_rms.text = kwargs.pop('dist_rms')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_set_route_type_route_type_rms(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        set = ET.SubElement(content, "set")
        route_type = ET.SubElement(set, "route-type")
        route_type_rms = ET.SubElement(route_type, "route-type-rms")
        route_type_rms.text = kwargs.pop('route_type_rms')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_set_tag_tag_rms(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        set = ET.SubElement(content, "set")
        tag = ET.SubElement(set, "tag")
        tag_rms = ET.SubElement(tag, "tag-rms")
        tag_rms.text = kwargs.pop('tag_rms')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_set_weight_weight_value(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        set = ET.SubElement(content, "set")
        weight = ET.SubElement(set, "weight")
        weight_value = ET.SubElement(weight, "weight-value")
        weight_value.text = kwargs.pop('weight_value')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_set_as_path_aspath_tag(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        set = ET.SubElement(content, "set")
        as_path = ET.SubElement(set, "as-path")
        aspath_tag = ET.SubElement(as_path, "aspath-tag")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_set_as_path_prepend(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        set = ET.SubElement(content, "set")
        as_path = ET.SubElement(set, "as-path")
        prepend = ET.SubElement(as_path, "prepend")
        prepend.text = kwargs.pop('prepend')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_set_automatic_tag_tag_empty(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        set = ET.SubElement(content, "set")
        automatic_tag = ET.SubElement(set, "automatic-tag")
        tag_empty = ET.SubElement(automatic_tag, "tag-empty")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_set_comm_list_comm_list_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        set = ET.SubElement(content, "set")
        comm_list = ET.SubElement(set, "comm-list")
        comm_list_name = ET.SubElement(comm_list, "comm-list-name")
        comm_list_name.text = kwargs.pop('comm_list_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_set_comm_list_match_comm_delete(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        set = ET.SubElement(content, "set")
        comm_list = ET.SubElement(set, "comm-list")
        match_comm_delete = ET.SubElement(comm_list, "match-comm-delete")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_set_dampening_half_life(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        set = ET.SubElement(content, "set")
        dampening = ET.SubElement(set, "dampening")
        half_life = ET.SubElement(dampening, "half-life")
        half_life.text = kwargs.pop('half_life')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_set_dampening_reuse(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        set = ET.SubElement(content, "set")
        dampening = ET.SubElement(set, "dampening")
        reuse = ET.SubElement(dampening, "reuse")
        reuse.text = kwargs.pop('reuse')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_set_dampening_suppress(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        set = ET.SubElement(content, "set")
        dampening = ET.SubElement(set, "dampening")
        suppress = ET.SubElement(dampening, "suppress")
        suppress.text = kwargs.pop('suppress')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_set_dampening_max_suppress_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        set = ET.SubElement(content, "set")
        dampening = ET.SubElement(set, "dampening")
        max_suppress_time = ET.SubElement(dampening, "max-suppress-time")
        max_suppress_time.text = kwargs.pop('max_suppress_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_set_local_preference_local_preference_value(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        set = ET.SubElement(content, "set")
        local_preference = ET.SubElement(set, "local-preference")
        local_preference_value = ET.SubElement(local_preference, "local-preference-value")
        local_preference_value.text = kwargs.pop('local_preference_value')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_set_origin_origin_igp(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        set = ET.SubElement(content, "set")
        origin = ET.SubElement(set, "origin")
        origin_igp = ET.SubElement(origin, "origin-igp")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_set_origin_origin_incomplete(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        set = ET.SubElement(content, "set")
        origin = ET.SubElement(set, "origin")
        origin_incomplete = ET.SubElement(origin, "origin-incomplete")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_set_metric_type_external(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        set = ET.SubElement(content, "set")
        metric_type = ET.SubElement(set, "metric-type")
        external = ET.SubElement(metric_type, "external")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_set_metric_type_internal(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        set = ET.SubElement(content, "set")
        metric_type = ET.SubElement(set, "metric-type")
        internal = ET.SubElement(metric_type, "internal")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_set_metric_type_type_1(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        set = ET.SubElement(content, "set")
        metric_type = ET.SubElement(set, "metric-type")
        type_1 = ET.SubElement(metric_type, "type-1")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_set_metric_type_type_2(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        set = ET.SubElement(content, "set")
        metric_type = ET.SubElement(set, "metric-type")
        type_2 = ET.SubElement(metric_type, "type-2")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_continue_holder_cont(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        continue_holder = ET.SubElement(content, "continue-holder")
        cont = ET.SubElement(continue_holder, "continue")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_route_map_content_continue_holder_continue_val(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        route_map = ET.SubElement(rbridge_id, "route-map", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        name_key = ET.SubElement(route_map, "name")
        name_key.text = kwargs.pop('name')
        action_rm_key = ET.SubElement(route_map, "action-rm")
        action_rm_key.text = kwargs.pop('action_rm')
        instance_key = ET.SubElement(route_map, "instance")
        instance_key.text = kwargs.pop('instance')
        content = ET.SubElement(route_map, "content")
        continue_holder = ET.SubElement(content, "continue-holder")
        continue_val = ET.SubElement(continue_holder, "continue-val")
        continue_val.text = kwargs.pop('continue_val')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_filter_change_update_delay_filter_delay_value(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        filter_change_update_delay = ET.SubElement(rbridge_id, "filter-change-update-delay", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        filter_delay_value = ET.SubElement(filter_change_update_delay, "filter-delay-value")
        filter_delay_value.text = kwargs.pop('filter_delay_value')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_global_lc_holder_linecard_linecards_linecardName(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        global_lc_holder = ET.SubElement(rbridge_id, "global-lc-holder", xmlns="urn:brocade.com:mgmt:brocade-linecard-management")
        linecard = ET.SubElement(global_lc_holder, "linecard")
        linecards = ET.SubElement(linecard, "linecards")
        linecardName = ET.SubElement(linecards, "linecardName")
        linecardName.text = kwargs.pop('linecardName')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_global_lc_holder_linecard_linecards_linecardType(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        global_lc_holder = ET.SubElement(rbridge_id, "global-lc-holder", xmlns="urn:brocade.com:mgmt:brocade-linecard-management")
        linecard = ET.SubElement(global_lc_holder, "linecard")
        linecards = ET.SubElement(linecard, "linecards")
        linecardName_key = ET.SubElement(linecards, "linecardName")
        linecardName_key.text = kwargs.pop('linecardName')
        linecardType = ET.SubElement(linecards, "linecardType")
        linecardType.text = kwargs.pop('linecardType')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_logical_chassis_principal_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        logical_chassis = ET.SubElement(rbridge_id, "logical-chassis", xmlns="http://brocade.com/ns/brocade-logical-chassis")
        principal_priority = ET.SubElement(logical_chassis, "principal-priority")
        principal_priority.text = kwargs.pop('principal_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_qos_tx_queue_tx_queue_limit(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        qos = ET.SubElement(rbridge_id, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        tx_queue = ET.SubElement(qos, "tx-queue")
        tx_queue_limit = ET.SubElement(tx_queue, "tx-queue-limit")
        tx_queue_limit.text = kwargs.pop('tx_queue_limit')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_qos_rcv_queue_rcv_queue_limit(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        qos = ET.SubElement(rbridge_id, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        rcv_queue = ET.SubElement(qos, "rcv-queue")
        rcv_queue_limit = ET.SubElement(rcv_queue, "rcv-queue-limit")
        rcv_queue_limit.text = kwargs.pop('rcv_queue_limit')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_telnet_server_shutdown(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        telnet = ET.SubElement(rbridge_id, "telnet", xmlns="urn:brocade.com:mgmt:brocade-sec-services")
        server = ET.SubElement(telnet, "server")
        shutdown = ET.SubElement(server, "shutdown")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_telnet_server_standby_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        telnet = ET.SubElement(rbridge_id, "telnet", xmlns="urn:brocade.com:mgmt:brocade-sec-services")
        server = ET.SubElement(telnet, "server")
        standby = ET.SubElement(server, "standby")
        enable = ET.SubElement(standby, "enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ssh_server_shutdown(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ssh = ET.SubElement(rbridge_id, "ssh", xmlns="urn:brocade.com:mgmt:brocade-sec-services")
        server = ET.SubElement(ssh, "server")
        shutdown = ET.SubElement(server, "shutdown")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ssh_server_key_exchange_protocol(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ssh = ET.SubElement(rbridge_id, "ssh", xmlns="urn:brocade.com:mgmt:brocade-sec-services")
        server = ET.SubElement(ssh, "server")
        key_exchange = ET.SubElement(server, "key-exchange")
        protocol = ET.SubElement(key_exchange, "protocol")
        protocol.text = kwargs.pop('protocol')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ssh_server_rekey_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ssh = ET.SubElement(rbridge_id, "ssh", xmlns="urn:brocade.com:mgmt:brocade-sec-services")
        server = ET.SubElement(ssh, "server")
        rekey_interval = ET.SubElement(server, "rekey-interval")
        rekey_interval.text = kwargs.pop('rekey_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ssh_server_cipher(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ssh = ET.SubElement(rbridge_id, "ssh", xmlns="urn:brocade.com:mgmt:brocade-sec-services")
        server = ET.SubElement(ssh, "server")
        cipher = ET.SubElement(server, "cipher")
        cipher.text = kwargs.pop('cipher')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ssh_server_standby_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ssh = ET.SubElement(rbridge_id, "ssh", xmlns="urn:brocade.com:mgmt:brocade-sec-services")
        server = ET.SubElement(ssh, "server")
        standby = ET.SubElement(server, "standby")
        enable = ET.SubElement(standby, "enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ssh_server_key_rsa(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ssh = ET.SubElement(rbridge_id, "ssh", xmlns="urn:brocade.com:mgmt:brocade-sec-services")
        server = ET.SubElement(ssh, "server")
        key = ET.SubElement(server, "key")
        rsa = ET.SubElement(key, "rsa")
        rsa.text = kwargs.pop('rsa')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ssh_server_key_ecdsa(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ssh = ET.SubElement(rbridge_id, "ssh", xmlns="urn:brocade.com:mgmt:brocade-sec-services")
        server = ET.SubElement(ssh, "server")
        key = ET.SubElement(server, "key")
        ecdsa = ET.SubElement(key, "ecdsa")
        ecdsa.text = kwargs.pop('ecdsa')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ssh_server_key_dsa(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ssh = ET.SubElement(rbridge_id, "ssh", xmlns="urn:brocade.com:mgmt:brocade-sec-services")
        server = ET.SubElement(ssh, "server")
        key = ET.SubElement(server, "key")
        dsa = ET.SubElement(key, "dsa")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_ssh_client_cipher(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        ssh = ET.SubElement(rbridge_id, "ssh", xmlns="urn:brocade.com:mgmt:brocade-sec-services")
        client = ET.SubElement(ssh, "client")
        cipher = ET.SubElement(client, "cipher")
        cipher.text = kwargs.pop('cipher')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_snmp_server_engineID_local(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        snmp_server = ET.SubElement(rbridge_id, "snmp-server", xmlns="urn:brocade.com:mgmt:brocade-snmp")
        engineID = ET.SubElement(snmp_server, "engineID")
        local = ET.SubElement(engineID, "local")
        local.text = kwargs.pop('local')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_snmp_server_user_username(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        snmp_server = ET.SubElement(rbridge_id, "snmp-server", xmlns="urn:brocade.com:mgmt:brocade-snmp")
        user = ET.SubElement(snmp_server, "user")
        username = ET.SubElement(user, "username")
        username.text = kwargs.pop('username')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_snmp_server_user_groupname(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        snmp_server = ET.SubElement(rbridge_id, "snmp-server", xmlns="urn:brocade.com:mgmt:brocade-snmp")
        user = ET.SubElement(snmp_server, "user")
        username_key = ET.SubElement(user, "username")
        username_key.text = kwargs.pop('username')
        groupname = ET.SubElement(user, "groupname")
        groupname.text = kwargs.pop('groupname')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_snmp_server_user_auth(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        snmp_server = ET.SubElement(rbridge_id, "snmp-server", xmlns="urn:brocade.com:mgmt:brocade-snmp")
        user = ET.SubElement(snmp_server, "user")
        username_key = ET.SubElement(user, "username")
        username_key.text = kwargs.pop('username')
        auth = ET.SubElement(user, "auth")
        auth.text = kwargs.pop('auth')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_snmp_server_user_auth_password(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        snmp_server = ET.SubElement(rbridge_id, "snmp-server", xmlns="urn:brocade.com:mgmt:brocade-snmp")
        user = ET.SubElement(snmp_server, "user")
        username_key = ET.SubElement(user, "username")
        username_key.text = kwargs.pop('username')
        auth_password = ET.SubElement(user, "auth-password")
        auth_password.text = kwargs.pop('auth_password')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_snmp_server_user_priv(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        snmp_server = ET.SubElement(rbridge_id, "snmp-server", xmlns="urn:brocade.com:mgmt:brocade-snmp")
        user = ET.SubElement(snmp_server, "user")
        username_key = ET.SubElement(user, "username")
        username_key.text = kwargs.pop('username')
        priv = ET.SubElement(user, "priv")
        priv.text = kwargs.pop('priv')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_snmp_server_user_priv_password(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        snmp_server = ET.SubElement(rbridge_id, "snmp-server", xmlns="urn:brocade.com:mgmt:brocade-snmp")
        user = ET.SubElement(snmp_server, "user")
        username_key = ET.SubElement(user, "username")
        username_key.text = kwargs.pop('username')
        priv_password = ET.SubElement(user, "priv-password")
        priv_password.text = kwargs.pop('priv_password')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_snmp_server_user_encrypted(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        snmp_server = ET.SubElement(rbridge_id, "snmp-server", xmlns="urn:brocade.com:mgmt:brocade-snmp")
        user = ET.SubElement(snmp_server, "user")
        username_key = ET.SubElement(user, "username")
        username_key.text = kwargs.pop('username')
        encrypted = ET.SubElement(user, "encrypted")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_snmp_server_v3host_hostip(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        snmp_server = ET.SubElement(rbridge_id, "snmp-server", xmlns="urn:brocade.com:mgmt:brocade-snmp")
        v3host = ET.SubElement(snmp_server, "v3host")
        username_key = ET.SubElement(v3host, "username")
        username_key.text = kwargs.pop('username')
        hostip = ET.SubElement(v3host, "hostip")
        hostip.text = kwargs.pop('hostip')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_snmp_server_v3host_username(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        snmp_server = ET.SubElement(rbridge_id, "snmp-server", xmlns="urn:brocade.com:mgmt:brocade-snmp")
        v3host = ET.SubElement(snmp_server, "v3host")
        hostip_key = ET.SubElement(v3host, "hostip")
        hostip_key.text = kwargs.pop('hostip')
        username = ET.SubElement(v3host, "username")
        username.text = kwargs.pop('username')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_snmp_server_v3host_udp_port(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        snmp_server = ET.SubElement(rbridge_id, "snmp-server", xmlns="urn:brocade.com:mgmt:brocade-snmp")
        v3host = ET.SubElement(snmp_server, "v3host")
        hostip_key = ET.SubElement(v3host, "hostip")
        hostip_key.text = kwargs.pop('hostip')
        username_key = ET.SubElement(v3host, "username")
        username_key.text = kwargs.pop('username')
        udp_port = ET.SubElement(v3host, "udp-port")
        udp_port.text = kwargs.pop('udp_port')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_snmp_server_v3host_notifytype(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        snmp_server = ET.SubElement(rbridge_id, "snmp-server", xmlns="urn:brocade.com:mgmt:brocade-snmp")
        v3host = ET.SubElement(snmp_server, "v3host")
        hostip_key = ET.SubElement(v3host, "hostip")
        hostip_key.text = kwargs.pop('hostip')
        username_key = ET.SubElement(v3host, "username")
        username_key.text = kwargs.pop('username')
        notifytype = ET.SubElement(v3host, "notifytype")
        notifytype.text = kwargs.pop('notifytype')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_snmp_server_v3host_engineid(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        snmp_server = ET.SubElement(rbridge_id, "snmp-server", xmlns="urn:brocade.com:mgmt:brocade-snmp")
        v3host = ET.SubElement(snmp_server, "v3host")
        hostip_key = ET.SubElement(v3host, "hostip")
        hostip_key.text = kwargs.pop('hostip')
        username_key = ET.SubElement(v3host, "username")
        username_key.text = kwargs.pop('username')
        engineid = ET.SubElement(v3host, "engineid")
        engineid.text = kwargs.pop('engineid')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_snmp_server_v3host_severity_level(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        snmp_server = ET.SubElement(rbridge_id, "snmp-server", xmlns="urn:brocade.com:mgmt:brocade-snmp")
        v3host = ET.SubElement(snmp_server, "v3host")
        hostip_key = ET.SubElement(v3host, "hostip")
        hostip_key.text = kwargs.pop('hostip')
        username_key = ET.SubElement(v3host, "username")
        username_key.text = kwargs.pop('username')
        severity_level = ET.SubElement(v3host, "severity-level")
        severity_level.text = kwargs.pop('severity_level')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_system_monitor_fan_threshold_marginal_threshold(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        system_monitor = ET.SubElement(rbridge_id, "system-monitor", xmlns="urn:brocade.com:mgmt:brocade-system-monitor")
        fan = ET.SubElement(system_monitor, "fan")
        threshold = ET.SubElement(fan, "threshold")
        marginal_threshold = ET.SubElement(threshold, "marginal-threshold")
        marginal_threshold.text = kwargs.pop('marginal_threshold')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_system_monitor_fan_threshold_down_threshold(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        system_monitor = ET.SubElement(rbridge_id, "system-monitor", xmlns="urn:brocade.com:mgmt:brocade-system-monitor")
        fan = ET.SubElement(system_monitor, "fan")
        threshold = ET.SubElement(fan, "threshold")
        down_threshold = ET.SubElement(threshold, "down-threshold")
        down_threshold.text = kwargs.pop('down_threshold')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_system_monitor_fan_alert_state(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        system_monitor = ET.SubElement(rbridge_id, "system-monitor", xmlns="urn:brocade.com:mgmt:brocade-system-monitor")
        fan = ET.SubElement(system_monitor, "fan")
        alert = ET.SubElement(fan, "alert")
        state = ET.SubElement(alert, "state")
        state.text = kwargs.pop('state')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_system_monitor_fan_alert_action(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        system_monitor = ET.SubElement(rbridge_id, "system-monitor", xmlns="urn:brocade.com:mgmt:brocade-system-monitor")
        fan = ET.SubElement(system_monitor, "fan")
        alert = ET.SubElement(fan, "alert")
        action = ET.SubElement(alert, "action")
        action.text = kwargs.pop('action')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_system_monitor_power_threshold_marginal_threshold(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        system_monitor = ET.SubElement(rbridge_id, "system-monitor", xmlns="urn:brocade.com:mgmt:brocade-system-monitor")
        power = ET.SubElement(system_monitor, "power")
        threshold = ET.SubElement(power, "threshold")
        marginal_threshold = ET.SubElement(threshold, "marginal-threshold")
        marginal_threshold.text = kwargs.pop('marginal_threshold')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_system_monitor_power_threshold_down_threshold(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        system_monitor = ET.SubElement(rbridge_id, "system-monitor", xmlns="urn:brocade.com:mgmt:brocade-system-monitor")
        power = ET.SubElement(system_monitor, "power")
        threshold = ET.SubElement(power, "threshold")
        down_threshold = ET.SubElement(threshold, "down-threshold")
        down_threshold.text = kwargs.pop('down_threshold')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_system_monitor_power_alert_state(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        system_monitor = ET.SubElement(rbridge_id, "system-monitor", xmlns="urn:brocade.com:mgmt:brocade-system-monitor")
        power = ET.SubElement(system_monitor, "power")
        alert = ET.SubElement(power, "alert")
        state = ET.SubElement(alert, "state")
        state.text = kwargs.pop('state')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_system_monitor_power_alert_action(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        system_monitor = ET.SubElement(rbridge_id, "system-monitor", xmlns="urn:brocade.com:mgmt:brocade-system-monitor")
        power = ET.SubElement(system_monitor, "power")
        alert = ET.SubElement(power, "alert")
        action = ET.SubElement(alert, "action")
        action.text = kwargs.pop('action')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_system_monitor_temp_threshold_marginal_threshold(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        system_monitor = ET.SubElement(rbridge_id, "system-monitor", xmlns="urn:brocade.com:mgmt:brocade-system-monitor")
        temp = ET.SubElement(system_monitor, "temp")
        threshold = ET.SubElement(temp, "threshold")
        marginal_threshold = ET.SubElement(threshold, "marginal-threshold")
        marginal_threshold.text = kwargs.pop('marginal_threshold')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_system_monitor_temp_threshold_down_threshold(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        system_monitor = ET.SubElement(rbridge_id, "system-monitor", xmlns="urn:brocade.com:mgmt:brocade-system-monitor")
        temp = ET.SubElement(system_monitor, "temp")
        threshold = ET.SubElement(temp, "threshold")
        down_threshold = ET.SubElement(threshold, "down-threshold")
        down_threshold.text = kwargs.pop('down_threshold')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_system_monitor_cid_card_threshold_marginal_threshold(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        system_monitor = ET.SubElement(rbridge_id, "system-monitor", xmlns="urn:brocade.com:mgmt:brocade-system-monitor")
        cid_card = ET.SubElement(system_monitor, "cid-card")
        threshold = ET.SubElement(cid_card, "threshold")
        marginal_threshold = ET.SubElement(threshold, "marginal-threshold")
        marginal_threshold.text = kwargs.pop('marginal_threshold')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_system_monitor_cid_card_threshold_down_threshold(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        system_monitor = ET.SubElement(rbridge_id, "system-monitor", xmlns="urn:brocade.com:mgmt:brocade-system-monitor")
        cid_card = ET.SubElement(system_monitor, "cid-card")
        threshold = ET.SubElement(cid_card, "threshold")
        down_threshold = ET.SubElement(threshold, "down-threshold")
        down_threshold.text = kwargs.pop('down_threshold')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_system_monitor_cid_card_alert_state(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        system_monitor = ET.SubElement(rbridge_id, "system-monitor", xmlns="urn:brocade.com:mgmt:brocade-system-monitor")
        cid_card = ET.SubElement(system_monitor, "cid-card")
        alert = ET.SubElement(cid_card, "alert")
        state = ET.SubElement(alert, "state")
        state.text = kwargs.pop('state')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_system_monitor_cid_card_alert_action(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        system_monitor = ET.SubElement(rbridge_id, "system-monitor", xmlns="urn:brocade.com:mgmt:brocade-system-monitor")
        cid_card = ET.SubElement(system_monitor, "cid-card")
        alert = ET.SubElement(cid_card, "alert")
        action = ET.SubElement(alert, "action")
        action.text = kwargs.pop('action')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_system_monitor_sfp_alert_state(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        system_monitor = ET.SubElement(rbridge_id, "system-monitor", xmlns="urn:brocade.com:mgmt:brocade-system-monitor")
        sfp = ET.SubElement(system_monitor, "sfp")
        alert = ET.SubElement(sfp, "alert")
        state = ET.SubElement(alert, "state")
        state.text = kwargs.pop('state')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_system_monitor_sfp_alert_action(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        system_monitor = ET.SubElement(rbridge_id, "system-monitor", xmlns="urn:brocade.com:mgmt:brocade-system-monitor")
        sfp = ET.SubElement(system_monitor, "sfp")
        alert = ET.SubElement(sfp, "alert")
        action = ET.SubElement(alert, "action")
        action.text = kwargs.pop('action')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_system_monitor_compact_flash_threshold_marginal_threshold(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        system_monitor = ET.SubElement(rbridge_id, "system-monitor", xmlns="urn:brocade.com:mgmt:brocade-system-monitor")
        compact_flash = ET.SubElement(system_monitor, "compact-flash")
        threshold = ET.SubElement(compact_flash, "threshold")
        marginal_threshold = ET.SubElement(threshold, "marginal-threshold")
        marginal_threshold.text = kwargs.pop('marginal_threshold')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_system_monitor_compact_flash_threshold_down_threshold(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        system_monitor = ET.SubElement(rbridge_id, "system-monitor", xmlns="urn:brocade.com:mgmt:brocade-system-monitor")
        compact_flash = ET.SubElement(system_monitor, "compact-flash")
        threshold = ET.SubElement(compact_flash, "threshold")
        down_threshold = ET.SubElement(threshold, "down-threshold")
        down_threshold.text = kwargs.pop('down_threshold')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_system_monitor_MM_threshold_marginal_threshold(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        system_monitor = ET.SubElement(rbridge_id, "system-monitor", xmlns="urn:brocade.com:mgmt:brocade-system-monitor")
        MM = ET.SubElement(system_monitor, "MM")
        threshold = ET.SubElement(MM, "threshold")
        marginal_threshold = ET.SubElement(threshold, "marginal-threshold")
        marginal_threshold.text = kwargs.pop('marginal_threshold')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_system_monitor_MM_threshold_down_threshold(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        system_monitor = ET.SubElement(rbridge_id, "system-monitor", xmlns="urn:brocade.com:mgmt:brocade-system-monitor")
        MM = ET.SubElement(system_monitor, "MM")
        threshold = ET.SubElement(MM, "threshold")
        down_threshold = ET.SubElement(threshold, "down-threshold")
        down_threshold.text = kwargs.pop('down_threshold')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_system_monitor_LineCard_threshold_marginal_threshold(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        system_monitor = ET.SubElement(rbridge_id, "system-monitor", xmlns="urn:brocade.com:mgmt:brocade-system-monitor")
        LineCard = ET.SubElement(system_monitor, "LineCard")
        threshold = ET.SubElement(LineCard, "threshold")
        marginal_threshold = ET.SubElement(threshold, "marginal-threshold")
        marginal_threshold.text = kwargs.pop('marginal_threshold')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_system_monitor_LineCard_threshold_down_threshold(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        system_monitor = ET.SubElement(rbridge_id, "system-monitor", xmlns="urn:brocade.com:mgmt:brocade-system-monitor")
        LineCard = ET.SubElement(system_monitor, "LineCard")
        threshold = ET.SubElement(LineCard, "threshold")
        down_threshold = ET.SubElement(threshold, "down-threshold")
        down_threshold.text = kwargs.pop('down_threshold')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_system_monitor_LineCard_alert_state(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        system_monitor = ET.SubElement(rbridge_id, "system-monitor", xmlns="urn:brocade.com:mgmt:brocade-system-monitor")
        LineCard = ET.SubElement(system_monitor, "LineCard")
        alert = ET.SubElement(LineCard, "alert")
        state = ET.SubElement(alert, "state")
        state.text = kwargs.pop('state')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_system_monitor_LineCard_alert_action(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        system_monitor = ET.SubElement(rbridge_id, "system-monitor", xmlns="urn:brocade.com:mgmt:brocade-system-monitor")
        LineCard = ET.SubElement(system_monitor, "LineCard")
        alert = ET.SubElement(LineCard, "alert")
        action = ET.SubElement(alert, "action")
        action.text = kwargs.pop('action')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_system_monitor_SFM_threshold_marginal_threshold(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        system_monitor = ET.SubElement(rbridge_id, "system-monitor", xmlns="urn:brocade.com:mgmt:brocade-system-monitor")
        SFM = ET.SubElement(system_monitor, "SFM")
        threshold = ET.SubElement(SFM, "threshold")
        marginal_threshold = ET.SubElement(threshold, "marginal-threshold")
        marginal_threshold.text = kwargs.pop('marginal_threshold')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_system_monitor_SFM_threshold_down_threshold(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        system_monitor = ET.SubElement(rbridge_id, "system-monitor", xmlns="urn:brocade.com:mgmt:brocade-system-monitor")
        SFM = ET.SubElement(system_monitor, "SFM")
        threshold = ET.SubElement(SFM, "threshold")
        down_threshold = ET.SubElement(threshold, "down-threshold")
        down_threshold.text = kwargs.pop('down_threshold')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_threshold_monitor_sfp_apply(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        threshold_monitor = ET.SubElement(rbridge_id, "threshold-monitor", xmlns="urn:brocade.com:mgmt:brocade-threshold-monitor")
        sfp = ET.SubElement(threshold_monitor, "sfp")
        apply = ET.SubElement(sfp, "apply")
        apply.text = kwargs.pop('apply')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_threshold_monitor_sfp_pause(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        threshold_monitor = ET.SubElement(rbridge_id, "threshold-monitor", xmlns="urn:brocade.com:mgmt:brocade-threshold-monitor")
        sfp = ET.SubElement(threshold_monitor, "sfp")
        pause = ET.SubElement(sfp, "pause")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_threshold_monitor_sfp_policy_policy_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        threshold_monitor = ET.SubElement(rbridge_id, "threshold-monitor", xmlns="urn:brocade.com:mgmt:brocade-threshold-monitor")
        sfp = ET.SubElement(threshold_monitor, "sfp")
        policy = ET.SubElement(sfp, "policy")
        policy_name = ET.SubElement(policy, "policy_name")
        policy_name.text = kwargs.pop('policy_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_threshold_monitor_sfp_policy_area_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        threshold_monitor = ET.SubElement(rbridge_id, "threshold-monitor", xmlns="urn:brocade.com:mgmt:brocade-threshold-monitor")
        sfp = ET.SubElement(threshold_monitor, "sfp")
        policy = ET.SubElement(sfp, "policy")
        policy_name_key = ET.SubElement(policy, "policy_name")
        policy_name_key.text = kwargs.pop('policy_name')
        area = ET.SubElement(policy, "area")
        area_value_key = ET.SubElement(area, "area_value")
        area_value_key.text = kwargs.pop('area_value')
        type = ET.SubElement(area, "type")
        type.text = kwargs.pop('type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_threshold_monitor_sfp_policy_area_area_value(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        threshold_monitor = ET.SubElement(rbridge_id, "threshold-monitor", xmlns="urn:brocade.com:mgmt:brocade-threshold-monitor")
        sfp = ET.SubElement(threshold_monitor, "sfp")
        policy = ET.SubElement(sfp, "policy")
        policy_name_key = ET.SubElement(policy, "policy_name")
        policy_name_key.text = kwargs.pop('policy_name')
        area = ET.SubElement(policy, "area")
        type_key = ET.SubElement(area, "type")
        type_key.text = kwargs.pop('type')
        area_value = ET.SubElement(area, "area_value")
        area_value.text = kwargs.pop('area_value')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_threshold_monitor_sfp_policy_area_threshold_high_threshold(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        threshold_monitor = ET.SubElement(rbridge_id, "threshold-monitor", xmlns="urn:brocade.com:mgmt:brocade-threshold-monitor")
        sfp = ET.SubElement(threshold_monitor, "sfp")
        policy = ET.SubElement(sfp, "policy")
        policy_name_key = ET.SubElement(policy, "policy_name")
        policy_name_key.text = kwargs.pop('policy_name')
        area = ET.SubElement(policy, "area")
        type_key = ET.SubElement(area, "type")
        type_key.text = kwargs.pop('type')
        area_value_key = ET.SubElement(area, "area_value")
        area_value_key.text = kwargs.pop('area_value')
        threshold = ET.SubElement(area, "threshold")
        high_threshold = ET.SubElement(threshold, "high-threshold")
        high_threshold.text = kwargs.pop('high_threshold')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_threshold_monitor_sfp_policy_area_threshold_low_threshold(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        threshold_monitor = ET.SubElement(rbridge_id, "threshold-monitor", xmlns="urn:brocade.com:mgmt:brocade-threshold-monitor")
        sfp = ET.SubElement(threshold_monitor, "sfp")
        policy = ET.SubElement(sfp, "policy")
        policy_name_key = ET.SubElement(policy, "policy_name")
        policy_name_key.text = kwargs.pop('policy_name')
        area = ET.SubElement(policy, "area")
        type_key = ET.SubElement(area, "type")
        type_key.text = kwargs.pop('type')
        area_value_key = ET.SubElement(area, "area_value")
        area_value_key.text = kwargs.pop('area_value')
        threshold = ET.SubElement(area, "threshold")
        low_threshold = ET.SubElement(threshold, "low-threshold")
        low_threshold.text = kwargs.pop('low_threshold')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_threshold_monitor_sfp_policy_area_threshold_buffer(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        threshold_monitor = ET.SubElement(rbridge_id, "threshold-monitor", xmlns="urn:brocade.com:mgmt:brocade-threshold-monitor")
        sfp = ET.SubElement(threshold_monitor, "sfp")
        policy = ET.SubElement(sfp, "policy")
        policy_name_key = ET.SubElement(policy, "policy_name")
        policy_name_key.text = kwargs.pop('policy_name')
        area = ET.SubElement(policy, "area")
        type_key = ET.SubElement(area, "type")
        type_key.text = kwargs.pop('type')
        area_value_key = ET.SubElement(area, "area_value")
        area_value_key.text = kwargs.pop('area_value')
        threshold = ET.SubElement(area, "threshold")
        buffer = ET.SubElement(threshold, "buffer")
        buffer.text = kwargs.pop('buffer')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_threshold_monitor_sfp_policy_area_alert_above_above_highthresh_action(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        threshold_monitor = ET.SubElement(rbridge_id, "threshold-monitor", xmlns="urn:brocade.com:mgmt:brocade-threshold-monitor")
        sfp = ET.SubElement(threshold_monitor, "sfp")
        policy = ET.SubElement(sfp, "policy")
        policy_name_key = ET.SubElement(policy, "policy_name")
        policy_name_key.text = kwargs.pop('policy_name')
        area = ET.SubElement(policy, "area")
        type_key = ET.SubElement(area, "type")
        type_key.text = kwargs.pop('type')
        area_value_key = ET.SubElement(area, "area_value")
        area_value_key.text = kwargs.pop('area_value')
        alert = ET.SubElement(area, "alert")
        above = ET.SubElement(alert, "above")
        above_highthresh_action = ET.SubElement(above, "above-highthresh-action")
        above_highthresh_action.text = kwargs.pop('above_highthresh_action')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_threshold_monitor_sfp_policy_area_alert_below_below_highthresh_action(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        threshold_monitor = ET.SubElement(rbridge_id, "threshold-monitor", xmlns="urn:brocade.com:mgmt:brocade-threshold-monitor")
        sfp = ET.SubElement(threshold_monitor, "sfp")
        policy = ET.SubElement(sfp, "policy")
        policy_name_key = ET.SubElement(policy, "policy_name")
        policy_name_key.text = kwargs.pop('policy_name')
        area = ET.SubElement(policy, "area")
        type_key = ET.SubElement(area, "type")
        type_key.text = kwargs.pop('type')
        area_value_key = ET.SubElement(area, "area_value")
        area_value_key.text = kwargs.pop('area_value')
        alert = ET.SubElement(area, "alert")
        below = ET.SubElement(alert, "below")
        below_highthresh_action = ET.SubElement(below, "below-highthresh-action")
        below_highthresh_action.text = kwargs.pop('below_highthresh_action')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_threshold_monitor_sfp_policy_area_alert_below_below_lowthresh_action(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        threshold_monitor = ET.SubElement(rbridge_id, "threshold-monitor", xmlns="urn:brocade.com:mgmt:brocade-threshold-monitor")
        sfp = ET.SubElement(threshold_monitor, "sfp")
        policy = ET.SubElement(sfp, "policy")
        policy_name_key = ET.SubElement(policy, "policy_name")
        policy_name_key.text = kwargs.pop('policy_name')
        area = ET.SubElement(policy, "area")
        type_key = ET.SubElement(area, "type")
        type_key.text = kwargs.pop('type')
        area_value_key = ET.SubElement(area, "area_value")
        area_value_key.text = kwargs.pop('area_value')
        alert = ET.SubElement(area, "alert")
        below = ET.SubElement(alert, "below")
        below_lowthresh_action = ET.SubElement(below, "below-lowthresh-action")
        below_lowthresh_action.text = kwargs.pop('below_lowthresh_action')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_threshold_monitor_security_apply(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        threshold_monitor = ET.SubElement(rbridge_id, "threshold-monitor", xmlns="urn:brocade.com:mgmt:brocade-threshold-monitor")
        security = ET.SubElement(threshold_monitor, "security")
        apply = ET.SubElement(security, "apply")
        apply.text = kwargs.pop('apply')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_threshold_monitor_security_pause(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        threshold_monitor = ET.SubElement(rbridge_id, "threshold-monitor", xmlns="urn:brocade.com:mgmt:brocade-threshold-monitor")
        security = ET.SubElement(threshold_monitor, "security")
        pause = ET.SubElement(security, "pause")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_threshold_monitor_security_policy_sec_policy_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        threshold_monitor = ET.SubElement(rbridge_id, "threshold-monitor", xmlns="urn:brocade.com:mgmt:brocade-threshold-monitor")
        security = ET.SubElement(threshold_monitor, "security")
        policy = ET.SubElement(security, "policy")
        sec_policy_name = ET.SubElement(policy, "sec_policy_name")
        sec_policy_name.text = kwargs.pop('sec_policy_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_threshold_monitor_security_policy_area_sec_area_value(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        threshold_monitor = ET.SubElement(rbridge_id, "threshold-monitor", xmlns="urn:brocade.com:mgmt:brocade-threshold-monitor")
        security = ET.SubElement(threshold_monitor, "security")
        policy = ET.SubElement(security, "policy")
        sec_policy_name_key = ET.SubElement(policy, "sec_policy_name")
        sec_policy_name_key.text = kwargs.pop('sec_policy_name')
        area = ET.SubElement(policy, "area")
        sec_area_value = ET.SubElement(area, "sec_area_value")
        sec_area_value.text = kwargs.pop('sec_area_value')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_threshold_monitor_security_policy_area_timebase(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        threshold_monitor = ET.SubElement(rbridge_id, "threshold-monitor", xmlns="urn:brocade.com:mgmt:brocade-threshold-monitor")
        security = ET.SubElement(threshold_monitor, "security")
        policy = ET.SubElement(security, "policy")
        sec_policy_name_key = ET.SubElement(policy, "sec_policy_name")
        sec_policy_name_key.text = kwargs.pop('sec_policy_name')
        area = ET.SubElement(policy, "area")
        sec_area_value_key = ET.SubElement(area, "sec_area_value")
        sec_area_value_key.text = kwargs.pop('sec_area_value')
        timebase = ET.SubElement(area, "timebase")
        timebase.text = kwargs.pop('timebase')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_threshold_monitor_security_policy_area_threshold_sec_high_threshold(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        threshold_monitor = ET.SubElement(rbridge_id, "threshold-monitor", xmlns="urn:brocade.com:mgmt:brocade-threshold-monitor")
        security = ET.SubElement(threshold_monitor, "security")
        policy = ET.SubElement(security, "policy")
        sec_policy_name_key = ET.SubElement(policy, "sec_policy_name")
        sec_policy_name_key.text = kwargs.pop('sec_policy_name')
        area = ET.SubElement(policy, "area")
        sec_area_value_key = ET.SubElement(area, "sec_area_value")
        sec_area_value_key.text = kwargs.pop('sec_area_value')
        threshold = ET.SubElement(area, "threshold")
        sec_high_threshold = ET.SubElement(threshold, "sec-high-threshold")
        sec_high_threshold.text = kwargs.pop('sec_high_threshold')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_threshold_monitor_security_policy_area_threshold_sec_low_threshold(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        threshold_monitor = ET.SubElement(rbridge_id, "threshold-monitor", xmlns="urn:brocade.com:mgmt:brocade-threshold-monitor")
        security = ET.SubElement(threshold_monitor, "security")
        policy = ET.SubElement(security, "policy")
        sec_policy_name_key = ET.SubElement(policy, "sec_policy_name")
        sec_policy_name_key.text = kwargs.pop('sec_policy_name')
        area = ET.SubElement(policy, "area")
        sec_area_value_key = ET.SubElement(area, "sec_area_value")
        sec_area_value_key.text = kwargs.pop('sec_area_value')
        threshold = ET.SubElement(area, "threshold")
        sec_low_threshold = ET.SubElement(threshold, "sec-low-threshold")
        sec_low_threshold.text = kwargs.pop('sec_low_threshold')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_threshold_monitor_security_policy_area_threshold_sec_buffer(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        threshold_monitor = ET.SubElement(rbridge_id, "threshold-monitor", xmlns="urn:brocade.com:mgmt:brocade-threshold-monitor")
        security = ET.SubElement(threshold_monitor, "security")
        policy = ET.SubElement(security, "policy")
        sec_policy_name_key = ET.SubElement(policy, "sec_policy_name")
        sec_policy_name_key.text = kwargs.pop('sec_policy_name')
        area = ET.SubElement(policy, "area")
        sec_area_value_key = ET.SubElement(area, "sec_area_value")
        sec_area_value_key.text = kwargs.pop('sec_area_value')
        threshold = ET.SubElement(area, "threshold")
        sec_buffer = ET.SubElement(threshold, "sec-buffer")
        sec_buffer.text = kwargs.pop('sec_buffer')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_threshold_monitor_security_policy_area_alert_above_sec_above_highthresh_action(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        threshold_monitor = ET.SubElement(rbridge_id, "threshold-monitor", xmlns="urn:brocade.com:mgmt:brocade-threshold-monitor")
        security = ET.SubElement(threshold_monitor, "security")
        policy = ET.SubElement(security, "policy")
        sec_policy_name_key = ET.SubElement(policy, "sec_policy_name")
        sec_policy_name_key.text = kwargs.pop('sec_policy_name')
        area = ET.SubElement(policy, "area")
        sec_area_value_key = ET.SubElement(area, "sec_area_value")
        sec_area_value_key.text = kwargs.pop('sec_area_value')
        alert = ET.SubElement(area, "alert")
        above = ET.SubElement(alert, "above")
        sec_above_highthresh_action = ET.SubElement(above, "sec-above-highthresh-action")
        sec_above_highthresh_action.text = kwargs.pop('sec_above_highthresh_action')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_threshold_monitor_security_policy_area_alert_below_sec_below_highthresh_action(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        threshold_monitor = ET.SubElement(rbridge_id, "threshold-monitor", xmlns="urn:brocade.com:mgmt:brocade-threshold-monitor")
        security = ET.SubElement(threshold_monitor, "security")
        policy = ET.SubElement(security, "policy")
        sec_policy_name_key = ET.SubElement(policy, "sec_policy_name")
        sec_policy_name_key.text = kwargs.pop('sec_policy_name')
        area = ET.SubElement(policy, "area")
        sec_area_value_key = ET.SubElement(area, "sec_area_value")
        sec_area_value_key.text = kwargs.pop('sec_area_value')
        alert = ET.SubElement(area, "alert")
        below = ET.SubElement(alert, "below")
        sec_below_highthresh_action = ET.SubElement(below, "sec-below-highthresh-action")
        sec_below_highthresh_action.text = kwargs.pop('sec_below_highthresh_action')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_threshold_monitor_security_policy_area_alert_below_sec_below_lowthresh_action(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        threshold_monitor = ET.SubElement(rbridge_id, "threshold-monitor", xmlns="urn:brocade.com:mgmt:brocade-threshold-monitor")
        security = ET.SubElement(threshold_monitor, "security")
        policy = ET.SubElement(security, "policy")
        sec_policy_name_key = ET.SubElement(policy, "sec_policy_name")
        sec_policy_name_key.text = kwargs.pop('sec_policy_name')
        area = ET.SubElement(policy, "area")
        sec_area_value_key = ET.SubElement(area, "sec_area_value")
        sec_area_value_key.text = kwargs.pop('sec_area_value')
        alert = ET.SubElement(area, "alert")
        below = ET.SubElement(alert, "below")
        sec_below_lowthresh_action = ET.SubElement(below, "sec-below-lowthresh-action")
        sec_below_lowthresh_action.text = kwargs.pop('sec_below_lowthresh_action')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_threshold_monitor_Cpu_poll(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        threshold_monitor = ET.SubElement(rbridge_id, "threshold-monitor", xmlns="urn:brocade.com:mgmt:brocade-threshold-monitor")
        Cpu = ET.SubElement(threshold_monitor, "Cpu")
        poll = ET.SubElement(Cpu, "poll")
        poll.text = kwargs.pop('poll')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_threshold_monitor_Cpu_retry(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        threshold_monitor = ET.SubElement(rbridge_id, "threshold-monitor", xmlns="urn:brocade.com:mgmt:brocade-threshold-monitor")
        Cpu = ET.SubElement(threshold_monitor, "Cpu")
        retry = ET.SubElement(Cpu, "retry")
        retry.text = kwargs.pop('retry')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_threshold_monitor_Cpu_limit(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        threshold_monitor = ET.SubElement(rbridge_id, "threshold-monitor", xmlns="urn:brocade.com:mgmt:brocade-threshold-monitor")
        Cpu = ET.SubElement(threshold_monitor, "Cpu")
        limit = ET.SubElement(Cpu, "limit")
        limit.text = kwargs.pop('limit')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_threshold_monitor_Cpu_actions(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        threshold_monitor = ET.SubElement(rbridge_id, "threshold-monitor", xmlns="urn:brocade.com:mgmt:brocade-threshold-monitor")
        Cpu = ET.SubElement(threshold_monitor, "Cpu")
        actions = ET.SubElement(Cpu, "actions")
        actions.text = kwargs.pop('actions')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_threshold_monitor_Memory_poll(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        threshold_monitor = ET.SubElement(rbridge_id, "threshold-monitor", xmlns="urn:brocade.com:mgmt:brocade-threshold-monitor")
        Memory = ET.SubElement(threshold_monitor, "Memory")
        poll = ET.SubElement(Memory, "poll")
        poll.text = kwargs.pop('poll')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_threshold_monitor_Memory_retry(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        threshold_monitor = ET.SubElement(rbridge_id, "threshold-monitor", xmlns="urn:brocade.com:mgmt:brocade-threshold-monitor")
        Memory = ET.SubElement(threshold_monitor, "Memory")
        retry = ET.SubElement(Memory, "retry")
        retry.text = kwargs.pop('retry')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_threshold_monitor_Memory_limit(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        threshold_monitor = ET.SubElement(rbridge_id, "threshold-monitor", xmlns="urn:brocade.com:mgmt:brocade-threshold-monitor")
        Memory = ET.SubElement(threshold_monitor, "Memory")
        limit = ET.SubElement(Memory, "limit")
        limit.text = kwargs.pop('limit')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_threshold_monitor_Memory_high_limit(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        threshold_monitor = ET.SubElement(rbridge_id, "threshold-monitor", xmlns="urn:brocade.com:mgmt:brocade-threshold-monitor")
        Memory = ET.SubElement(threshold_monitor, "Memory")
        high_limit = ET.SubElement(Memory, "high-limit")
        high_limit.text = kwargs.pop('high_limit')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_threshold_monitor_Memory_low_limit(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        threshold_monitor = ET.SubElement(rbridge_id, "threshold-monitor", xmlns="urn:brocade.com:mgmt:brocade-threshold-monitor")
        Memory = ET.SubElement(threshold_monitor, "Memory")
        low_limit = ET.SubElement(Memory, "low-limit")
        low_limit.text = kwargs.pop('low_limit')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_threshold_monitor_Memory_actions(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        threshold_monitor = ET.SubElement(rbridge_id, "threshold-monitor", xmlns="urn:brocade.com:mgmt:brocade-threshold-monitor")
        Memory = ET.SubElement(threshold_monitor, "Memory")
        actions = ET.SubElement(Memory, "actions")
        actions.text = kwargs.pop('actions')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_threshold_monitor_interface_apply(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        threshold_monitor = ET.SubElement(rbridge_id, "threshold-monitor", xmlns="urn:brocade.com:mgmt:brocade-threshold-monitor")
        interface = ET.SubElement(threshold_monitor, "interface")
        apply = ET.SubElement(interface, "apply")
        apply.text = kwargs.pop('apply')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_threshold_monitor_interface_pause(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        threshold_monitor = ET.SubElement(rbridge_id, "threshold-monitor", xmlns="urn:brocade.com:mgmt:brocade-threshold-monitor")
        interface = ET.SubElement(threshold_monitor, "interface")
        pause = ET.SubElement(interface, "pause")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_threshold_monitor_interface_policy_policy_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        threshold_monitor = ET.SubElement(rbridge_id, "threshold-monitor", xmlns="urn:brocade.com:mgmt:brocade-threshold-monitor")
        interface = ET.SubElement(threshold_monitor, "interface")
        policy = ET.SubElement(interface, "policy")
        policy_name = ET.SubElement(policy, "policy_name")
        policy_name.text = kwargs.pop('policy_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_threshold_monitor_interface_policy_area_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        threshold_monitor = ET.SubElement(rbridge_id, "threshold-monitor", xmlns="urn:brocade.com:mgmt:brocade-threshold-monitor")
        interface = ET.SubElement(threshold_monitor, "interface")
        policy = ET.SubElement(interface, "policy")
        policy_name_key = ET.SubElement(policy, "policy_name")
        policy_name_key.text = kwargs.pop('policy_name')
        area = ET.SubElement(policy, "area")
        area_value_key = ET.SubElement(area, "area_value")
        area_value_key.text = kwargs.pop('area_value')
        type = ET.SubElement(area, "type")
        type.text = kwargs.pop('type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_threshold_monitor_interface_policy_area_area_value(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        threshold_monitor = ET.SubElement(rbridge_id, "threshold-monitor", xmlns="urn:brocade.com:mgmt:brocade-threshold-monitor")
        interface = ET.SubElement(threshold_monitor, "interface")
        policy = ET.SubElement(interface, "policy")
        policy_name_key = ET.SubElement(policy, "policy_name")
        policy_name_key.text = kwargs.pop('policy_name')
        area = ET.SubElement(policy, "area")
        type_key = ET.SubElement(area, "type")
        type_key.text = kwargs.pop('type')
        area_value = ET.SubElement(area, "area_value")
        area_value.text = kwargs.pop('area_value')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_threshold_monitor_interface_policy_area_threshold_timebase_value(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        threshold_monitor = ET.SubElement(rbridge_id, "threshold-monitor", xmlns="urn:brocade.com:mgmt:brocade-threshold-monitor")
        interface = ET.SubElement(threshold_monitor, "interface")
        policy = ET.SubElement(interface, "policy")
        policy_name_key = ET.SubElement(policy, "policy_name")
        policy_name_key.text = kwargs.pop('policy_name')
        area = ET.SubElement(policy, "area")
        type_key = ET.SubElement(area, "type")
        type_key.text = kwargs.pop('type')
        area_value_key = ET.SubElement(area, "area_value")
        area_value_key.text = kwargs.pop('area_value')
        threshold = ET.SubElement(area, "threshold")
        timebase_value = ET.SubElement(threshold, "timebase_value")
        timebase_value.text = kwargs.pop('timebase_value')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_threshold_monitor_interface_policy_area_threshold_high_threshold(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        threshold_monitor = ET.SubElement(rbridge_id, "threshold-monitor", xmlns="urn:brocade.com:mgmt:brocade-threshold-monitor")
        interface = ET.SubElement(threshold_monitor, "interface")
        policy = ET.SubElement(interface, "policy")
        policy_name_key = ET.SubElement(policy, "policy_name")
        policy_name_key.text = kwargs.pop('policy_name')
        area = ET.SubElement(policy, "area")
        type_key = ET.SubElement(area, "type")
        type_key.text = kwargs.pop('type')
        area_value_key = ET.SubElement(area, "area_value")
        area_value_key.text = kwargs.pop('area_value')
        threshold = ET.SubElement(area, "threshold")
        high_threshold = ET.SubElement(threshold, "high-threshold")
        high_threshold.text = kwargs.pop('high_threshold')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_threshold_monitor_interface_policy_area_threshold_low_threshold(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        threshold_monitor = ET.SubElement(rbridge_id, "threshold-monitor", xmlns="urn:brocade.com:mgmt:brocade-threshold-monitor")
        interface = ET.SubElement(threshold_monitor, "interface")
        policy = ET.SubElement(interface, "policy")
        policy_name_key = ET.SubElement(policy, "policy_name")
        policy_name_key.text = kwargs.pop('policy_name')
        area = ET.SubElement(policy, "area")
        type_key = ET.SubElement(area, "type")
        type_key.text = kwargs.pop('type')
        area_value_key = ET.SubElement(area, "area_value")
        area_value_key.text = kwargs.pop('area_value')
        threshold = ET.SubElement(area, "threshold")
        low_threshold = ET.SubElement(threshold, "low-threshold")
        low_threshold.text = kwargs.pop('low_threshold')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_threshold_monitor_interface_policy_area_threshold_buffer(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        threshold_monitor = ET.SubElement(rbridge_id, "threshold-monitor", xmlns="urn:brocade.com:mgmt:brocade-threshold-monitor")
        interface = ET.SubElement(threshold_monitor, "interface")
        policy = ET.SubElement(interface, "policy")
        policy_name_key = ET.SubElement(policy, "policy_name")
        policy_name_key.text = kwargs.pop('policy_name')
        area = ET.SubElement(policy, "area")
        type_key = ET.SubElement(area, "type")
        type_key.text = kwargs.pop('type')
        area_value_key = ET.SubElement(area, "area_value")
        area_value_key.text = kwargs.pop('area_value')
        threshold = ET.SubElement(area, "threshold")
        buffer = ET.SubElement(threshold, "buffer")
        buffer.text = kwargs.pop('buffer')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_threshold_monitor_interface_policy_area_alert_above_above_highthresh_action(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        threshold_monitor = ET.SubElement(rbridge_id, "threshold-monitor", xmlns="urn:brocade.com:mgmt:brocade-threshold-monitor")
        interface = ET.SubElement(threshold_monitor, "interface")
        policy = ET.SubElement(interface, "policy")
        policy_name_key = ET.SubElement(policy, "policy_name")
        policy_name_key.text = kwargs.pop('policy_name')
        area = ET.SubElement(policy, "area")
        type_key = ET.SubElement(area, "type")
        type_key.text = kwargs.pop('type')
        area_value_key = ET.SubElement(area, "area_value")
        area_value_key.text = kwargs.pop('area_value')
        alert = ET.SubElement(area, "alert")
        above = ET.SubElement(alert, "above")
        above_highthresh_action = ET.SubElement(above, "above-highthresh-action")
        above_highthresh_action.text = kwargs.pop('above_highthresh_action')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_threshold_monitor_interface_policy_area_alert_above_above_lowthresh_action(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        threshold_monitor = ET.SubElement(rbridge_id, "threshold-monitor", xmlns="urn:brocade.com:mgmt:brocade-threshold-monitor")
        interface = ET.SubElement(threshold_monitor, "interface")
        policy = ET.SubElement(interface, "policy")
        policy_name_key = ET.SubElement(policy, "policy_name")
        policy_name_key.text = kwargs.pop('policy_name')
        area = ET.SubElement(policy, "area")
        type_key = ET.SubElement(area, "type")
        type_key.text = kwargs.pop('type')
        area_value_key = ET.SubElement(area, "area_value")
        area_value_key.text = kwargs.pop('area_value')
        alert = ET.SubElement(area, "alert")
        above = ET.SubElement(alert, "above")
        above_lowthresh_action = ET.SubElement(above, "above-lowthresh-action")
        above_lowthresh_action.text = kwargs.pop('above_lowthresh_action')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_threshold_monitor_interface_policy_area_alert_below_below_highthresh_action(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        threshold_monitor = ET.SubElement(rbridge_id, "threshold-monitor", xmlns="urn:brocade.com:mgmt:brocade-threshold-monitor")
        interface = ET.SubElement(threshold_monitor, "interface")
        policy = ET.SubElement(interface, "policy")
        policy_name_key = ET.SubElement(policy, "policy_name")
        policy_name_key.text = kwargs.pop('policy_name')
        area = ET.SubElement(policy, "area")
        type_key = ET.SubElement(area, "type")
        type_key.text = kwargs.pop('type')
        area_value_key = ET.SubElement(area, "area_value")
        area_value_key.text = kwargs.pop('area_value')
        alert = ET.SubElement(area, "alert")
        below = ET.SubElement(alert, "below")
        below_highthresh_action = ET.SubElement(below, "below-highthresh-action")
        below_highthresh_action.text = kwargs.pop('below_highthresh_action')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_threshold_monitor_interface_policy_area_alert_below_below_lowthresh_action(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        threshold_monitor = ET.SubElement(rbridge_id, "threshold-monitor", xmlns="urn:brocade.com:mgmt:brocade-threshold-monitor")
        interface = ET.SubElement(threshold_monitor, "interface")
        policy = ET.SubElement(interface, "policy")
        policy_name_key = ET.SubElement(policy, "policy_name")
        policy_name_key.text = kwargs.pop('policy_name')
        area = ET.SubElement(policy, "area")
        type_key = ET.SubElement(area, "type")
        type_key.text = kwargs.pop('type')
        area_value_key = ET.SubElement(area, "area_value")
        area_value_key.text = kwargs.pop('area_value')
        alert = ET.SubElement(area, "alert")
        below = ET.SubElement(alert, "below")
        below_lowthresh_action = ET.SubElement(below, "below-lowthresh-action")
        below_lowthresh_action.text = kwargs.pop('below_lowthresh_action')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def rbridge_id_vrrp_rbridge_global_vrrp_acceptmode_disable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        rbridge_id = ET.SubElement(config, "rbridge-id", xmlns="urn:brocade.com:mgmt:brocade-rbridge")
        rbridge_id_key = ET.SubElement(rbridge_id, "rbridge-id")
        rbridge_id_key.text = kwargs.pop('rbridge_id')
        vrrp_rbridge_global = ET.SubElement(rbridge_id, "vrrp-rbridge-global", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrrp_acceptmode_disable = ET.SubElement(vrrp_rbridge_global, "vrrp-acceptmode-disable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        