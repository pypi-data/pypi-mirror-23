#!/usr/bin/env python
import xml.etree.ElementTree as ET


class brocade_interface(object):
    """Auto generated class.
    """
    def __init__(self, **kwargs):
        self._callback = kwargs.pop('callback')

            
    def interface_gigabitethernet_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name = ET.SubElement(gigabitethernet, "name")
        name.text = kwargs.pop('name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ifindex(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ifindex = ET.SubElement(gigabitethernet, "ifindex")
        ifindex.text = kwargs.pop('ifindex')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_description(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        description = ET.SubElement(gigabitethernet, "description")
        description.text = kwargs.pop('description')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_shutdown(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        shutdown = ET.SubElement(gigabitethernet, "shutdown")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_channel_group_port_int(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        channel_group = ET.SubElement(gigabitethernet, "channel-group")
        port_int = ET.SubElement(channel_group, "port-int")
        port_int.text = kwargs.pop('port_int')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_channel_group_mode(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        channel_group = ET.SubElement(gigabitethernet, "channel-group")
        mode = ET.SubElement(channel_group, "mode")
        mode.text = kwargs.pop('mode')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_channel_group_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        channel_group = ET.SubElement(gigabitethernet, "channel-group")
        type = ET.SubElement(channel_group, "type")
        type.text = kwargs.pop('type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_mtu(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        mtu = ET.SubElement(gigabitethernet, "mtu")
        mtu.text = kwargs.pop('mtu')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_basic_basic(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport_basic = ET.SubElement(gigabitethernet, "switchport-basic")
        basic = ET.SubElement(switchport_basic, "basic")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_mode_vlan_mode(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        mode = ET.SubElement(switchport, "mode")
        vlan_mode = ET.SubElement(mode, "vlan-mode")
        vlan_mode.text = kwargs.pop('vlan_mode')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_mode_private_vlan_private_vlan_trunk_trunk_basic(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        mode = ET.SubElement(switchport, "mode")
        private_vlan = ET.SubElement(mode, "private-vlan")
        private_vlan_trunk = ET.SubElement(private_vlan, "private-vlan-trunk")
        trunk_basic = ET.SubElement(private_vlan_trunk, "trunk-basic")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_mode_private_vlan_private_vlan_trunk_trunk_promiscuous(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        mode = ET.SubElement(switchport, "mode")
        private_vlan = ET.SubElement(mode, "private-vlan")
        private_vlan_trunk = ET.SubElement(private_vlan, "private-vlan-trunk")
        trunk_promiscuous = ET.SubElement(private_vlan_trunk, "trunk-promiscuous")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_mode_private_vlan_private_vlan_trunk_trunk_host(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        mode = ET.SubElement(switchport, "mode")
        private_vlan = ET.SubElement(mode, "private-vlan")
        private_vlan_trunk = ET.SubElement(private_vlan, "private-vlan-trunk")
        trunk_host = ET.SubElement(private_vlan_trunk, "trunk-host")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_mode_private_vlan_promiscuous(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        mode = ET.SubElement(switchport, "mode")
        private_vlan = ET.SubElement(mode, "private-vlan")
        promiscuous = ET.SubElement(private_vlan, "promiscuous")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_mode_private_vlan_host(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        mode = ET.SubElement(switchport, "mode")
        private_vlan = ET.SubElement(mode, "private-vlan")
        host = ET.SubElement(private_vlan, "host")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_port_security_port_sec_max(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        port_security = ET.SubElement(switchport, "port-security")
        port_sec_max = ET.SubElement(port_security, "port-sec-max")
        port_sec_max.text = kwargs.pop('port_sec_max')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_port_security_port_sec_violation(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        port_security = ET.SubElement(switchport, "port-security")
        port_sec_violation = ET.SubElement(port_security, "port-sec-violation")
        port_sec_violation.text = kwargs.pop('port_sec_violation')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_port_security_port_secutiry_mac_address_mac_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        port_security = ET.SubElement(switchport, "port-security")
        port_secutiry_mac_address = ET.SubElement(port_security, "port-secutiry-mac-address")
        port_sec_vlan_key = ET.SubElement(port_secutiry_mac_address, "port-sec-vlan")
        port_sec_vlan_key.text = kwargs.pop('port_sec_vlan')
        mac_address = ET.SubElement(port_secutiry_mac_address, "mac-address")
        mac_address.text = kwargs.pop('mac_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_port_security_port_secutiry_mac_address_port_sec_vlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        port_security = ET.SubElement(switchport, "port-security")
        port_secutiry_mac_address = ET.SubElement(port_security, "port-secutiry-mac-address")
        mac_address_key = ET.SubElement(port_secutiry_mac_address, "mac-address")
        mac_address_key.text = kwargs.pop('mac_address')
        port_sec_vlan = ET.SubElement(port_secutiry_mac_address, "port-sec-vlan")
        port_sec_vlan.text = kwargs.pop('port_sec_vlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_port_security_sticky_sticky_flag(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        port_security = ET.SubElement(switchport, "port-security")
        sticky = ET.SubElement(port_security, "sticky")
        sticky_flag = ET.SubElement(sticky, "sticky-flag")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_port_security_sticky_port_secutiry_mac_address_mac_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        port_security = ET.SubElement(switchport, "port-security")
        sticky = ET.SubElement(port_security, "sticky")
        port_secutiry_mac_address = ET.SubElement(sticky, "port-secutiry-mac-address")
        port_sec_vlan_key = ET.SubElement(port_secutiry_mac_address, "port-sec-vlan")
        port_sec_vlan_key.text = kwargs.pop('port_sec_vlan')
        mac_address = ET.SubElement(port_secutiry_mac_address, "mac-address")
        mac_address.text = kwargs.pop('mac_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_port_security_sticky_port_secutiry_mac_address_port_sec_vlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        port_security = ET.SubElement(switchport, "port-security")
        sticky = ET.SubElement(port_security, "sticky")
        port_secutiry_mac_address = ET.SubElement(sticky, "port-secutiry-mac-address")
        mac_address_key = ET.SubElement(port_secutiry_mac_address, "mac-address")
        mac_address_key.text = kwargs.pop('mac_address')
        port_sec_vlan = ET.SubElement(port_secutiry_mac_address, "port-sec-vlan")
        port_sec_vlan.text = kwargs.pop('port_sec_vlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_port_security_allowed_ouis_oui(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        port_security = ET.SubElement(switchport, "port-security")
        allowed_ouis = ET.SubElement(port_security, "allowed-ouis")
        oui = ET.SubElement(allowed_ouis, "oui")
        oui.text = kwargs.pop('oui')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_port_security_shutdown_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        port_security = ET.SubElement(switchport, "port-security")
        shutdown_time = ET.SubElement(port_security, "shutdown-time")
        shutdown_time.text = kwargs.pop('shutdown_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_access_accessvlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        access = ET.SubElement(switchport, "access")
        accessvlan = ET.SubElement(access, "accessvlan")
        accessvlan.text = kwargs.pop('accessvlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_access_rspan_access_rspan_access_vlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        access = ET.SubElement(switchport, "access")
        rspan_access = ET.SubElement(access, "rspan-access")
        rspan_access_vlan = ET.SubElement(rspan_access, "rspan-access-vlan")
        rspan_access_vlan.text = kwargs.pop('rspan_access_vlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_access_mac_vlan_classification_access_vlan_access_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        access_mac_vlan_classification = ET.SubElement(switchport, "access-mac-vlan-classification")
        access = ET.SubElement(access_mac_vlan_classification, "access")
        vlan = ET.SubElement(access, "vlan")
        access_mac_address_key = ET.SubElement(vlan, "access-mac-address")
        access_mac_address_key.text = kwargs.pop('access_mac_address')
        access_vlan_id = ET.SubElement(vlan, "access-vlan-id")
        access_vlan_id.text = kwargs.pop('access_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_access_mac_vlan_classification_access_vlan_access_mac_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        access_mac_vlan_classification = ET.SubElement(switchport, "access-mac-vlan-classification")
        access = ET.SubElement(access_mac_vlan_classification, "access")
        vlan = ET.SubElement(access, "vlan")
        access_vlan_id_key = ET.SubElement(vlan, "access-vlan-id")
        access_vlan_id_key.text = kwargs.pop('access_vlan_id')
        access_mac_address = ET.SubElement(vlan, "access-mac-address")
        access_mac_address.text = kwargs.pop('access_mac_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_trunk_private_vlan_classification_private_vlan_trunk_allowed_vlan_add_trunk_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        trunk_private_vlan_classification = ET.SubElement(switchport, "trunk-private-vlan-classification")
        private_vlan = ET.SubElement(trunk_private_vlan_classification, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        add = ET.SubElement(vlan, "add")
        trunk_ctag_id_key = ET.SubElement(add, "trunk-ctag-id")
        trunk_ctag_id_key.text = kwargs.pop('trunk_ctag_id')
        trunk_vlan_id = ET.SubElement(add, "trunk-vlan-id")
        trunk_vlan_id.text = kwargs.pop('trunk_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_trunk_private_vlan_classification_private_vlan_trunk_allowed_vlan_add_trunk_ctag_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        trunk_private_vlan_classification = ET.SubElement(switchport, "trunk-private-vlan-classification")
        private_vlan = ET.SubElement(trunk_private_vlan_classification, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        add = ET.SubElement(vlan, "add")
        trunk_vlan_id_key = ET.SubElement(add, "trunk-vlan-id")
        trunk_vlan_id_key.text = kwargs.pop('trunk_vlan_id')
        trunk_ctag_id = ET.SubElement(add, "trunk-ctag-id")
        trunk_ctag_id.text = kwargs.pop('trunk_ctag_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_trunk_private_vlan_classification_private_vlan_trunk_allowed_vlan_remove_trunk_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        trunk_private_vlan_classification = ET.SubElement(switchport, "trunk-private-vlan-classification")
        private_vlan = ET.SubElement(trunk_private_vlan_classification, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        remove = ET.SubElement(vlan, "remove")
        trunk_ctag_id_key = ET.SubElement(remove, "trunk-ctag-id")
        trunk_ctag_id_key.text = kwargs.pop('trunk_ctag_id')
        trunk_vlan_id = ET.SubElement(remove, "trunk-vlan-id")
        trunk_vlan_id.text = kwargs.pop('trunk_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_trunk_private_vlan_classification_private_vlan_trunk_allowed_vlan_remove_trunk_ctag_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        trunk_private_vlan_classification = ET.SubElement(switchport, "trunk-private-vlan-classification")
        private_vlan = ET.SubElement(trunk_private_vlan_classification, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        remove = ET.SubElement(vlan, "remove")
        trunk_vlan_id_key = ET.SubElement(remove, "trunk-vlan-id")
        trunk_vlan_id_key.text = kwargs.pop('trunk_vlan_id')
        trunk_ctag_id = ET.SubElement(remove, "trunk-ctag-id")
        trunk_ctag_id.text = kwargs.pop('trunk_ctag_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_access_mac_group_vlan_classification_access_vlan_access_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        access_mac_group_vlan_classification = ET.SubElement(switchport, "access-mac-group-vlan-classification")
        access = ET.SubElement(access_mac_group_vlan_classification, "access")
        vlan = ET.SubElement(access, "vlan")
        access_mac_group_key = ET.SubElement(vlan, "access-mac-group")
        access_mac_group_key.text = kwargs.pop('access_mac_group')
        access_vlan_id = ET.SubElement(vlan, "access-vlan-id")
        access_vlan_id.text = kwargs.pop('access_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_access_mac_group_vlan_classification_access_vlan_access_mac_group(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        access_mac_group_vlan_classification = ET.SubElement(switchport, "access-mac-group-vlan-classification")
        access = ET.SubElement(access_mac_group_vlan_classification, "access")
        vlan = ET.SubElement(access, "vlan")
        access_vlan_id_key = ET.SubElement(vlan, "access-vlan-id")
        access_vlan_id_key.text = kwargs.pop('access_vlan_id')
        access_mac_group = ET.SubElement(vlan, "access-mac-group")
        access_mac_group.text = kwargs.pop('access_mac_group')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_trunk_allowed_vlan_all(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        all = ET.SubElement(vlan, "all")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_trunk_allowed_vlan_none(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        none = ET.SubElement(vlan, "none")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_trunk_allowed_vlan_add(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        add = ET.SubElement(vlan, "add")
        add.text = kwargs.pop('add')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_trunk_allowed_vlan_excpt(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        excpt = ET.SubElement(vlan, "except")
        excpt.text = kwargs.pop('excpt')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_trunk_allowed_vlan_remove(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        remove = ET.SubElement(vlan, "remove")
        remove.text = kwargs.pop('remove')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_trunk_allowed_vlanoper_vlan_add(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlanoper = ET.SubElement(allowed, "vlanoper")
        vlan = ET.SubElement(vlanoper, "vlan")
        add = ET.SubElement(vlan, "add")
        add.text = kwargs.pop('add')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_trunk_allowed_vlanoper_vlan_remove(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlanoper = ET.SubElement(allowed, "vlanoper")
        vlan = ET.SubElement(vlanoper, "vlan")
        remove = ET.SubElement(vlan, "remove")
        remove.text = kwargs.pop('remove')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_trunk_allowed_rspan_vlan_add_rspan_trunk_vlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        rspan_vlan = ET.SubElement(allowed, "rspan-vlan")
        add_rspan_trunk_vlan = ET.SubElement(rspan_vlan, "add-rspan-trunk-vlan")
        add_rspan_trunk_vlan.text = kwargs.pop('add_rspan_trunk_vlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_trunk_allowed_rspan_vlan_remove_rspan_trunk_vlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        rspan_vlan = ET.SubElement(allowed, "rspan-vlan")
        remove_rspan_trunk_vlan = ET.SubElement(rspan_vlan, "remove-rspan-trunk-vlan")
        remove_rspan_trunk_vlan.text = kwargs.pop('remove_rspan_trunk_vlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_trunk_allowed_trunk_rspan_vlan_classification_rspan_vlan_add_trunk_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        trunk_rspan_vlan_classification = ET.SubElement(allowed, "trunk-rspan-vlan-classification")
        rspan_vlan = ET.SubElement(trunk_rspan_vlan_classification, "rspan-vlan")
        add = ET.SubElement(rspan_vlan, "add")
        trunk_ctag_id_key = ET.SubElement(add, "trunk-ctag-id")
        trunk_ctag_id_key.text = kwargs.pop('trunk_ctag_id')
        trunk_vlan_id = ET.SubElement(add, "trunk-vlan-id")
        trunk_vlan_id.text = kwargs.pop('trunk_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_trunk_allowed_trunk_rspan_vlan_classification_rspan_vlan_add_trunk_ctag_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        trunk_rspan_vlan_classification = ET.SubElement(allowed, "trunk-rspan-vlan-classification")
        rspan_vlan = ET.SubElement(trunk_rspan_vlan_classification, "rspan-vlan")
        add = ET.SubElement(rspan_vlan, "add")
        trunk_vlan_id_key = ET.SubElement(add, "trunk-vlan-id")
        trunk_vlan_id_key.text = kwargs.pop('trunk_vlan_id')
        trunk_ctag_id = ET.SubElement(add, "trunk-ctag-id")
        trunk_ctag_id.text = kwargs.pop('trunk_ctag_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_trunk_allowed_trunk_rspan_vlan_classification_rspan_vlan_remove_trunk_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        trunk_rspan_vlan_classification = ET.SubElement(allowed, "trunk-rspan-vlan-classification")
        rspan_vlan = ET.SubElement(trunk_rspan_vlan_classification, "rspan-vlan")
        remove = ET.SubElement(rspan_vlan, "remove")
        trunk_ctag_id_key = ET.SubElement(remove, "trunk-ctag-id")
        trunk_ctag_id_key.text = kwargs.pop('trunk_ctag_id')
        trunk_vlan_id = ET.SubElement(remove, "trunk-vlan-id")
        trunk_vlan_id.text = kwargs.pop('trunk_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_trunk_allowed_trunk_rspan_vlan_classification_rspan_vlan_remove_trunk_ctag_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        trunk_rspan_vlan_classification = ET.SubElement(allowed, "trunk-rspan-vlan-classification")
        rspan_vlan = ET.SubElement(trunk_rspan_vlan_classification, "rspan-vlan")
        remove = ET.SubElement(rspan_vlan, "remove")
        trunk_vlan_id_key = ET.SubElement(remove, "trunk-vlan-id")
        trunk_vlan_id_key.text = kwargs.pop('trunk_vlan_id')
        trunk_ctag_id = ET.SubElement(remove, "trunk-ctag-id")
        trunk_ctag_id.text = kwargs.pop('trunk_ctag_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_trunk_trunk_vlan_classification_allowed_vlan_add_trunk_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        trunk_vlan_classification = ET.SubElement(trunk, "trunk-vlan-classification")
        allowed = ET.SubElement(trunk_vlan_classification, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        add = ET.SubElement(vlan, "add")
        trunk_vlan_id = ET.SubElement(add, "trunk-vlan-id")
        trunk_vlan_id.text = kwargs.pop('trunk_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_trunk_trunk_vlan_classification_allowed_vlan_add_trunk_ctag_range(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        trunk_vlan_classification = ET.SubElement(trunk, "trunk-vlan-classification")
        allowed = ET.SubElement(trunk_vlan_classification, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        add = ET.SubElement(vlan, "add")
        trunk_vlan_id_key = ET.SubElement(add, "trunk-vlan-id")
        trunk_vlan_id_key.text = kwargs.pop('trunk_vlan_id')
        trunk_ctag_range = ET.SubElement(add, "trunk-ctag-range")
        trunk_ctag_range.text = kwargs.pop('trunk_ctag_range')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_trunk_trunk_vlan_classification_allowed_vlan_remove_trunk_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        trunk_vlan_classification = ET.SubElement(trunk, "trunk-vlan-classification")
        allowed = ET.SubElement(trunk_vlan_classification, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        remove = ET.SubElement(vlan, "remove")
        trunk_vlan_id = ET.SubElement(remove, "trunk-vlan-id")
        trunk_vlan_id.text = kwargs.pop('trunk_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_trunk_trunk_vlan_classification_allowed_vlan_remove_trunk_ctag_range(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        trunk_vlan_classification = ET.SubElement(trunk, "trunk-vlan-classification")
        allowed = ET.SubElement(trunk_vlan_classification, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        remove = ET.SubElement(vlan, "remove")
        trunk_vlan_id_key = ET.SubElement(remove, "trunk-vlan-id")
        trunk_vlan_id_key.text = kwargs.pop('trunk_vlan_id')
        trunk_ctag_range = ET.SubElement(remove, "trunk-ctag-range")
        trunk_ctag_range.text = kwargs.pop('trunk_ctag_range')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_trunk_default_vlan_config_default_transparent_vlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        default_vlan_config = ET.SubElement(trunk, "default-vlan-config")
        default_transparent_vlan = ET.SubElement(default_vlan_config, "default-transparent-vlan")
        default_transparent_vlan.text = kwargs.pop('default_transparent_vlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_trunk_tag_native_vlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        tag = ET.SubElement(trunk, "tag")
        native_vlan = ET.SubElement(tag, "native-vlan")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_trunk_native_vlan_classification_native_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        native_vlan_classification = ET.SubElement(trunk, "native-vlan-classification")
        native_vlan_id = ET.SubElement(native_vlan_classification, "native-vlan-id")
        native_vlan_id.text = kwargs.pop('native_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_trunk_native_vlan_classification_native_vlan_ctag_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        native_vlan_classification = ET.SubElement(trunk, "native-vlan-classification")
        native_vlan_ctag_id = ET.SubElement(native_vlan_classification, "native-vlan-ctag-id")
        native_vlan_ctag_id.text = kwargs.pop('native_vlan_ctag_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_trunk_native_vlan_xtagged_config_native_vlan_id_xtagged(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        native_vlan_xtagged_config = ET.SubElement(trunk, "native-vlan-xtagged-config")
        native_vlan_id_xtagged = ET.SubElement(native_vlan_xtagged_config, "native-vlan-id-xtagged")
        native_vlan_id_xtagged.text = kwargs.pop('native_vlan_id_xtagged')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_trunk_native_vlan_xtagged_config_native_vlan_ctag_id_xtagged(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        native_vlan_xtagged_config = ET.SubElement(trunk, "native-vlan-xtagged-config")
        native_vlan_ctag_id_xtagged = ET.SubElement(native_vlan_xtagged_config, "native-vlan-ctag-id-xtagged")
        native_vlan_ctag_id_xtagged.text = kwargs.pop('native_vlan_ctag_id_xtagged')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_trunk_native_vlan_xtagged_config_native_vlan_egress_type_xtagged(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        native_vlan_xtagged_config = ET.SubElement(trunk, "native-vlan-xtagged-config")
        native_vlan_egress_type_xtagged = ET.SubElement(native_vlan_xtagged_config, "native-vlan-egress-type-xtagged")
        native_vlan_egress_type_xtagged.text = kwargs.pop('native_vlan_egress_type_xtagged')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_trunk_native_vlan_untagged_config_native_vlan_id_untagged(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        native_vlan_untagged_config = ET.SubElement(trunk, "native-vlan-untagged-config")
        native_vlan_id_untagged = ET.SubElement(native_vlan_untagged_config, "native-vlan-id-untagged")
        native_vlan_id_untagged.text = kwargs.pop('native_vlan_id_untagged')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_private_vlan_trunk_pvlan_tag_pvlan_tag_native_vlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        pvlan_tag = ET.SubElement(trunk, "pvlan-tag")
        pvlan_tag_native_vlan = ET.SubElement(pvlan_tag, "pvlan-tag-native-vlan")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_private_vlan_trunk_native_pvlanNativevlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        native = ET.SubElement(trunk, "native")
        pvlanNativevlan = ET.SubElement(native, "pvlanNativevlan")
        pvlanNativevlan.text = kwargs.pop('pvlanNativevlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_private_vlan_trunk_native_pvlan_native_vlan_ctag_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        native = ET.SubElement(trunk, "native")
        pvlan_native_vlan_ctag_id = ET.SubElement(native, "pvlan-native-vlan-ctag-id")
        pvlan_native_vlan_ctag_id.text = kwargs.pop('pvlan_native_vlan_ctag_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_private_vlan_trunk_allowed_vlan_pvlan_all(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        pvlan_all = ET.SubElement(vlan, "pvlan_all")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_private_vlan_trunk_allowed_vlan_pvlan_none(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        pvlan_none = ET.SubElement(vlan, "pvlan_none")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_private_vlan_trunk_allowed_vlan_pvlan_add(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        pvlan_add = ET.SubElement(vlan, "pvlan_add")
        pvlan_add.text = kwargs.pop('pvlan_add')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_private_vlan_trunk_allowed_vlan_pvlan_except(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        pvlan_except = ET.SubElement(vlan, "pvlan_except")
        pvlan_except.text = kwargs.pop('pvlan_except')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_private_vlan_trunk_allowed_vlan_pvlan_remove(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        pvlan_remove = ET.SubElement(vlan, "pvlan_remove")
        pvlan_remove.text = kwargs.pop('pvlan_remove')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_private_vlan_host_association_host_pri_pvlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        host_association = ET.SubElement(private_vlan, "host-association")
        host_pri_pvlan = ET.SubElement(host_association, "host-pri-pvlan")
        host_pri_pvlan.text = kwargs.pop('host_pri_pvlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_private_vlan_host_association_host_sec_pvlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        host_association = ET.SubElement(private_vlan, "host-association")
        host_sec_pvlan = ET.SubElement(host_association, "host-sec-pvlan")
        host_sec_pvlan.text = kwargs.pop('host_sec_pvlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_private_vlan_association_trunk_trunk_pri_pvlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        association = ET.SubElement(private_vlan, "association")
        trunk = ET.SubElement(association, "trunk")
        trunk_sec_pvlan_key = ET.SubElement(trunk, "trunk-sec-pvlan")
        trunk_sec_pvlan_key.text = kwargs.pop('trunk_sec_pvlan')
        trunk_pri_pvlan = ET.SubElement(trunk, "trunk-pri-pvlan")
        trunk_pri_pvlan.text = kwargs.pop('trunk_pri_pvlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_private_vlan_association_trunk_trunk_sec_pvlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        association = ET.SubElement(private_vlan, "association")
        trunk = ET.SubElement(association, "trunk")
        trunk_pri_pvlan_key = ET.SubElement(trunk, "trunk-pri-pvlan")
        trunk_pri_pvlan_key.text = kwargs.pop('trunk_pri_pvlan')
        trunk_sec_pvlan = ET.SubElement(trunk, "trunk-sec-pvlan")
        trunk_sec_pvlan.text = kwargs.pop('trunk_sec_pvlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_private_vlan_mapping_promis_pri_pvlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        mapping = ET.SubElement(private_vlan, "mapping")
        promis_pri_pvlan = ET.SubElement(mapping, "promis-pri-pvlan")
        promis_pri_pvlan.text = kwargs.pop('promis_pri_pvlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_private_vlan_mapping_oper(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        mapping = ET.SubElement(private_vlan, "mapping")
        promis_pri_pvlan_key = ET.SubElement(mapping, "promis-pri-pvlan")
        promis_pri_pvlan_key.text = kwargs.pop('promis_pri_pvlan')
        oper = ET.SubElement(mapping, "oper")
        oper.text = kwargs.pop('oper')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_private_vlan_mapping_promis_sec_pvlan_range(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        mapping = ET.SubElement(private_vlan, "mapping")
        promis_pri_pvlan_key = ET.SubElement(mapping, "promis-pri-pvlan")
        promis_pri_pvlan_key.text = kwargs.pop('promis_pri_pvlan')
        promis_sec_pvlan_range = ET.SubElement(mapping, "promis-sec-pvlan-range")
        promis_sec_pvlan_range.text = kwargs.pop('promis_sec_pvlan_range')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_access_mac_rspan_vlan_classification_access_vlan_access_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        access_mac_rspan_vlan_classification = ET.SubElement(switchport, "access-mac-rspan-vlan-classification")
        access = ET.SubElement(access_mac_rspan_vlan_classification, "access")
        vlan = ET.SubElement(access, "vlan")
        access_mac_address_key = ET.SubElement(vlan, "access-mac-address")
        access_mac_address_key.text = kwargs.pop('access_mac_address')
        access_vlan_id = ET.SubElement(vlan, "access-vlan-id")
        access_vlan_id.text = kwargs.pop('access_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_access_mac_rspan_vlan_classification_access_vlan_access_mac_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        access_mac_rspan_vlan_classification = ET.SubElement(switchport, "access-mac-rspan-vlan-classification")
        access = ET.SubElement(access_mac_rspan_vlan_classification, "access")
        vlan = ET.SubElement(access, "vlan")
        access_vlan_id_key = ET.SubElement(vlan, "access-vlan-id")
        access_vlan_id_key.text = kwargs.pop('access_vlan_id')
        access_mac_address = ET.SubElement(vlan, "access-mac-address")
        access_mac_address.text = kwargs.pop('access_mac_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_access_mac_group_rspan_vlan_classification_access_vlan_access_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        access_mac_group_rspan_vlan_classification = ET.SubElement(switchport, "access-mac-group-rspan-vlan-classification")
        access = ET.SubElement(access_mac_group_rspan_vlan_classification, "access")
        vlan = ET.SubElement(access, "vlan")
        access_mac_group_key = ET.SubElement(vlan, "access-mac-group")
        access_mac_group_key.text = kwargs.pop('access_mac_group')
        access_vlan_id = ET.SubElement(vlan, "access-vlan-id")
        access_vlan_id.text = kwargs.pop('access_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_access_mac_group_rspan_vlan_classification_access_vlan_access_mac_group(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        access_mac_group_rspan_vlan_classification = ET.SubElement(switchport, "access-mac-group-rspan-vlan-classification")
        access = ET.SubElement(access_mac_group_rspan_vlan_classification, "access")
        vlan = ET.SubElement(access, "vlan")
        access_vlan_id_key = ET.SubElement(vlan, "access-vlan-id")
        access_vlan_id_key.text = kwargs.pop('access_vlan_id')
        access_mac_group = ET.SubElement(vlan, "access-mac-group")
        access_mac_group.text = kwargs.pop('access_mac_group')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_mac_learning_mac_learn_disable_vlan_mac_learning_vlan_add(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        mac_learning = ET.SubElement(gigabitethernet, "mac-learning")
        mac_learn_disable = ET.SubElement(mac_learning, "mac-learn-disable")
        vlan = ET.SubElement(mac_learn_disable, "vlan")
        mac_learning_vlan_add = ET.SubElement(vlan, "mac-learning-vlan-add")
        mac_learning_vlan_add.text = kwargs.pop('mac_learning_vlan_add')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_mac_learning_mac_learn_disable_vlan_mac_learning_vlan_remove(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        mac_learning = ET.SubElement(gigabitethernet, "mac-learning")
        mac_learn_disable = ET.SubElement(mac_learning, "mac-learn-disable")
        vlan = ET.SubElement(mac_learn_disable, "vlan")
        mac_learning_vlan_remove = ET.SubElement(vlan, "mac-learning-vlan-remove")
        mac_learning_vlan_remove.text = kwargs.pop('mac_learning_vlan_remove')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_ip_config_mtu(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        ip_config = ET.SubElement(ip, "ip-config", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        mtu = ET.SubElement(ip_config, "mtu")
        mtu.text = kwargs.pop('mtu')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_ip_config_directed_broadcast(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        ip_config = ET.SubElement(ip, "ip-config", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        directed_broadcast = ET.SubElement(ip_config, "directed-broadcast")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_ip_config_proxy_arp(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        ip_config = ET.SubElement(ip, "ip-config", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        proxy_arp = ET.SubElement(ip_config, "proxy-arp")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_ip_config_arp_aging_timeout(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        ip_config = ET.SubElement(ip, "ip-config", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        arp_aging_timeout = ET.SubElement(ip_config, "arp-aging-timeout")
        arp_aging_timeout.text = kwargs.pop('arp_aging_timeout')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_ip_config_address_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        ip_config = ET.SubElement(ip, "ip-config", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        address = ET.SubElement(ip_config, "address")
        address = ET.SubElement(address, "address")
        address.text = kwargs.pop('address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_ip_config_address_secondary(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        ip_config = ET.SubElement(ip, "ip-config", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        address = ET.SubElement(ip_config, "address")
        address_key = ET.SubElement(address, "address")
        address_key.text = kwargs.pop('address')
        secondary = ET.SubElement(address, "secondary")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_ip_config_address_ospf_passive(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        ip_config = ET.SubElement(ip, "ip-config", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        address = ET.SubElement(ip_config, "address")
        address_key = ET.SubElement(address, "address")
        address_key.text = kwargs.pop('address')
        ospf_passive = ET.SubElement(address, "ospf-passive")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_ip_config_address_ospf_ignore(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        ip_config = ET.SubElement(ip, "ip-config", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        address = ET.SubElement(ip_config, "address")
        address_key = ET.SubElement(address, "address")
        address_key.text = kwargs.pop('address')
        ospf_ignore = ET.SubElement(address, "ospf-ignore")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_arp_node_config_arp_inspection_trust(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        arp_node_config = ET.SubElement(ip, "arp-node-config", xmlns="urn:brocade.com:mgmt:brocade-dai")
        arp = ET.SubElement(arp_node_config, "arp")
        inspection = ET.SubElement(arp, "inspection")
        trust = ET.SubElement(inspection, "trust")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_interface_gi_dhcp_conf_dhcp_relay_servers_relay_ip_addr(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        interface_gi_dhcp_conf = ET.SubElement(ip, "interface-gi-dhcp-conf", xmlns="urn:brocade.com:mgmt:brocade-dhcp")
        dhcp = ET.SubElement(interface_gi_dhcp_conf, "dhcp")
        relay = ET.SubElement(dhcp, "relay")
        servers = ET.SubElement(relay, "servers")
        server_vrf_name_key = ET.SubElement(servers, "server-vrf-name")
        server_vrf_name_key.text = kwargs.pop('server_vrf_name')
        relay_ip_addr = ET.SubElement(servers, "relay-ip-addr")
        relay_ip_addr.text = kwargs.pop('relay_ip_addr')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_interface_gi_dhcp_conf_dhcp_relay_servers_server_vrf_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        interface_gi_dhcp_conf = ET.SubElement(ip, "interface-gi-dhcp-conf", xmlns="urn:brocade.com:mgmt:brocade-dhcp")
        dhcp = ET.SubElement(interface_gi_dhcp_conf, "dhcp")
        relay = ET.SubElement(dhcp, "relay")
        servers = ET.SubElement(relay, "servers")
        relay_ip_addr_key = ET.SubElement(servers, "relay-ip-addr")
        relay_ip_addr_key.text = kwargs.pop('relay_ip_addr')
        server_vrf_name = ET.SubElement(servers, "server-vrf-name")
        server_vrf_name.text = kwargs.pop('server_vrf_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_interface_gi_dhcp_conf_dhcp_relay_gateway(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        interface_gi_dhcp_conf = ET.SubElement(ip, "interface-gi-dhcp-conf", xmlns="urn:brocade.com:mgmt:brocade-dhcp")
        dhcp = ET.SubElement(interface_gi_dhcp_conf, "dhcp")
        relay = ET.SubElement(dhcp, "relay")
        gateway = ET.SubElement(relay, "gateway")
        gateway.text = kwargs.pop('gateway')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_icmp_echo_reply(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        icmp = ET.SubElement(ip, "icmp", xmlns="urn:brocade.com:mgmt:brocade-icmp")
        echo_reply = ET.SubElement(icmp, "echo-reply")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_icmp_rate_limiting(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        icmp = ET.SubElement(ip, "icmp", xmlns="urn:brocade.com:mgmt:brocade-icmp")
        rate_limiting = ET.SubElement(icmp, "rate-limiting")
        rate_limiting.text = kwargs.pop('rate_limiting')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_icmp_unreachable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        icmp = ET.SubElement(ip, "icmp", xmlns="urn:brocade.com:mgmt:brocade-icmp")
        unreachable = ET.SubElement(icmp, "unreachable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_icmp_redirect(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        icmp = ET.SubElement(ip, "icmp", xmlns="urn:brocade.com:mgmt:brocade-icmp")
        redirect = ET.SubElement(icmp, "redirect")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_icmp_address_mask(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        icmp = ET.SubElement(ip, "icmp", xmlns="urn:brocade.com:mgmt:brocade-icmp")
        address_mask = ET.SubElement(icmp, "address-mask")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_igmp_phy_intf_cfg_igmp_last_member_query_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        igmp_phy_intf_cfg = ET.SubElement(ip, "igmp-phy-intf-cfg", xmlns="urn:brocade.com:mgmt:brocade-igmp")
        igmp = ET.SubElement(igmp_phy_intf_cfg, "igmp")
        last_member_query_interval = ET.SubElement(igmp, "last-member-query-interval")
        last_member_query_interval.text = kwargs.pop('last_member_query_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_igmp_phy_intf_cfg_igmp_query_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        igmp_phy_intf_cfg = ET.SubElement(ip, "igmp-phy-intf-cfg", xmlns="urn:brocade.com:mgmt:brocade-igmp")
        igmp = ET.SubElement(igmp_phy_intf_cfg, "igmp")
        query_interval = ET.SubElement(igmp, "query-interval")
        query_interval.text = kwargs.pop('query_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_igmp_phy_intf_cfg_igmp_query_max_response_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        igmp_phy_intf_cfg = ET.SubElement(ip, "igmp-phy-intf-cfg", xmlns="urn:brocade.com:mgmt:brocade-igmp")
        igmp = ET.SubElement(igmp_phy_intf_cfg, "igmp")
        query_max_response_time = ET.SubElement(igmp, "query-max-response-time")
        query_max_response_time.text = kwargs.pop('query_max_response_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_igmp_phy_intf_cfg_igmp_immediate_leave(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        igmp_phy_intf_cfg = ET.SubElement(ip, "igmp-phy-intf-cfg", xmlns="urn:brocade.com:mgmt:brocade-igmp")
        igmp = ET.SubElement(igmp_phy_intf_cfg, "igmp")
        immediate_leave = ET.SubElement(igmp, "immediate-leave")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_igmp_phy_intf_cfg_igmp_static_group_sg_addr(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        igmp_phy_intf_cfg = ET.SubElement(ip, "igmp-phy-intf-cfg", xmlns="urn:brocade.com:mgmt:brocade-igmp")
        igmp = ET.SubElement(igmp_phy_intf_cfg, "igmp")
        static_group = ET.SubElement(igmp, "static-group")
        sg_addr = ET.SubElement(static_group, "sg-addr")
        sg_addr.text = kwargs.pop('sg_addr')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_interface_gi_ospf_conf_ospf1_area(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        interface_gi_ospf_conf = ET.SubElement(ip, "interface-gi-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_gi_ospf_conf, "ospf1")
        area = ET.SubElement(ospf1, "area")
        area.text = kwargs.pop('area')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_interface_gi_ospf_conf_ospf1_auth_change_wait_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        interface_gi_ospf_conf = ET.SubElement(ip, "interface-gi-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_gi_ospf_conf, "ospf1")
        auth_change_wait_time = ET.SubElement(ospf1, "auth-change-wait-time")
        auth_change_wait_time.text = kwargs.pop('auth_change_wait_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_interface_gi_ospf_conf_ospf1_authentication_key_no_encrypt_auth_key_table_no_encrypt_auth_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        interface_gi_ospf_conf = ET.SubElement(ip, "interface-gi-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_gi_ospf_conf, "ospf1")
        authentication_key = ET.SubElement(ospf1, "authentication-key")
        no_encrypt_auth_key_table = ET.SubElement(authentication_key, "no-encrypt-auth-key-table")
        no_encrypt_auth_key = ET.SubElement(no_encrypt_auth_key_table, "no-encrypt-auth-key")
        no_encrypt_auth_key.text = kwargs.pop('no_encrypt_auth_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_interface_gi_ospf_conf_ospf1_authentication_key_auth_key_table_encrypttype(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        interface_gi_ospf_conf = ET.SubElement(ip, "interface-gi-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_gi_ospf_conf, "ospf1")
        authentication_key = ET.SubElement(ospf1, "authentication-key")
        auth_key_table = ET.SubElement(authentication_key, "auth-key-table")
        encrypttype = ET.SubElement(auth_key_table, "encrypttype")
        encrypttype.text = kwargs.pop('encrypttype')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_interface_gi_ospf_conf_ospf1_authentication_key_auth_key_table_auth_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        interface_gi_ospf_conf = ET.SubElement(ip, "interface-gi-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_gi_ospf_conf, "ospf1")
        authentication_key = ET.SubElement(ospf1, "authentication-key")
        auth_key_table = ET.SubElement(authentication_key, "auth-key-table")
        auth_key = ET.SubElement(auth_key_table, "auth-key")
        auth_key.text = kwargs.pop('auth_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_interface_gi_ospf_conf_ospf1_dead_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        interface_gi_ospf_conf = ET.SubElement(ip, "interface-gi-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_gi_ospf_conf, "ospf1")
        dead_interval = ET.SubElement(ospf1, "dead-interval")
        dead_interval.text = kwargs.pop('dead_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_interface_gi_ospf_conf_ospf1_hello_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        interface_gi_ospf_conf = ET.SubElement(ip, "interface-gi-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_gi_ospf_conf, "ospf1")
        hello_interval = ET.SubElement(ospf1, "hello-interval")
        hello_interval.text = kwargs.pop('hello_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_interface_gi_ospf_conf_ospf1_retransmit_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        interface_gi_ospf_conf = ET.SubElement(ip, "interface-gi-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_gi_ospf_conf, "ospf1")
        retransmit_interval = ET.SubElement(ospf1, "retransmit-interval")
        retransmit_interval.text = kwargs.pop('retransmit_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_interface_gi_ospf_conf_ospf1_transmit_delay(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        interface_gi_ospf_conf = ET.SubElement(ip, "interface-gi-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_gi_ospf_conf, "ospf1")
        transmit_delay = ET.SubElement(ospf1, "transmit-delay")
        transmit_delay.text = kwargs.pop('transmit_delay')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_interface_gi_ospf_conf_ospf1_md5_authentication_key_activation_wait_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        interface_gi_ospf_conf = ET.SubElement(ip, "interface-gi-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_gi_ospf_conf, "ospf1")
        md5_authentication = ET.SubElement(ospf1, "md5-authentication")
        key_activation_wait_time = ET.SubElement(md5_authentication, "key-activation-wait-time")
        key_activation_wait_time.text = kwargs.pop('key_activation_wait_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_interface_gi_ospf_conf_ospf1_md5_authentication_no_encrypt_key_table_no_encrypt_key_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        interface_gi_ospf_conf = ET.SubElement(ip, "interface-gi-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_gi_ospf_conf, "ospf1")
        md5_authentication = ET.SubElement(ospf1, "md5-authentication")
        no_encrypt_key_table = ET.SubElement(md5_authentication, "no-encrypt-key-table")
        no_encrypt_key_id = ET.SubElement(no_encrypt_key_table, "no-encrypt-key-id")
        no_encrypt_key_id.text = kwargs.pop('no_encrypt_key_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_interface_gi_ospf_conf_ospf1_md5_authentication_no_encrypt_key_table_no_encrypt_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        interface_gi_ospf_conf = ET.SubElement(ip, "interface-gi-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_gi_ospf_conf, "ospf1")
        md5_authentication = ET.SubElement(ospf1, "md5-authentication")
        no_encrypt_key_table = ET.SubElement(md5_authentication, "no-encrypt-key-table")
        no_encrypt_key = ET.SubElement(no_encrypt_key_table, "no-encrypt-key")
        no_encrypt_key.text = kwargs.pop('no_encrypt_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_interface_gi_ospf_conf_ospf1_md5_authentication_key_table_key_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        interface_gi_ospf_conf = ET.SubElement(ip, "interface-gi-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_gi_ospf_conf, "ospf1")
        md5_authentication = ET.SubElement(ospf1, "md5-authentication")
        key_table = ET.SubElement(md5_authentication, "key-table")
        key_id = ET.SubElement(key_table, "key-id")
        key_id.text = kwargs.pop('key_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_interface_gi_ospf_conf_ospf1_md5_authentication_key_table_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        interface_gi_ospf_conf = ET.SubElement(ip, "interface-gi-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_gi_ospf_conf, "ospf1")
        md5_authentication = ET.SubElement(ospf1, "md5-authentication")
        key_table = ET.SubElement(md5_authentication, "key-table")
        key = ET.SubElement(key_table, "key")
        key.text = kwargs.pop('key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_interface_gi_ospf_conf_ospf1_md5_authentication_key_table_md5_authentication_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        interface_gi_ospf_conf = ET.SubElement(ip, "interface-gi-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_gi_ospf_conf, "ospf1")
        md5_authentication = ET.SubElement(ospf1, "md5-authentication")
        key_table = ET.SubElement(md5_authentication, "key-table")
        md5_authentication_key = ET.SubElement(key_table, "md5-authentication-key")
        md5_authentication_key.text = kwargs.pop('md5_authentication_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_interface_gi_ospf_conf_ospf1_cost(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        interface_gi_ospf_conf = ET.SubElement(ip, "interface-gi-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_gi_ospf_conf, "ospf1")
        cost = ET.SubElement(ospf1, "cost")
        cost.text = kwargs.pop('cost')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_interface_gi_ospf_conf_ospf1_database_filter_all_out(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        interface_gi_ospf_conf = ET.SubElement(ip, "interface-gi-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_gi_ospf_conf, "ospf1")
        database_filter = ET.SubElement(ospf1, "database-filter")
        all_out = ET.SubElement(database_filter, "all-out")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_interface_gi_ospf_conf_ospf1_database_filter_all_external(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        interface_gi_ospf_conf = ET.SubElement(ip, "interface-gi-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_gi_ospf_conf, "ospf1")
        database_filter = ET.SubElement(ospf1, "database-filter")
        all_external = ET.SubElement(database_filter, "all-external")
        all_external.text = kwargs.pop('all_external')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_interface_gi_ospf_conf_ospf1_database_filter_all_summary_external(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        interface_gi_ospf_conf = ET.SubElement(ip, "interface-gi-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_gi_ospf_conf, "ospf1")
        database_filter = ET.SubElement(ospf1, "database-filter")
        all_summary_external = ET.SubElement(database_filter, "all-summary-external")
        all_summary_external.text = kwargs.pop('all_summary_external')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_interface_gi_ospf_conf_ospf1_mtu_ignore(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        interface_gi_ospf_conf = ET.SubElement(ip, "interface-gi-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_gi_ospf_conf, "ospf1")
        mtu_ignore = ET.SubElement(ospf1, "mtu-ignore")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_interface_gi_ospf_conf_ospf1_network(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        interface_gi_ospf_conf = ET.SubElement(ip, "interface-gi-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_gi_ospf_conf, "ospf1")
        network = ET.SubElement(ospf1, "network")
        network.text = kwargs.pop('network')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_interface_gi_ospf_conf_ospf1_active(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        interface_gi_ospf_conf = ET.SubElement(ip, "interface-gi-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_gi_ospf_conf, "ospf1")
        active = ET.SubElement(ospf1, "active")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_interface_gi_ospf_conf_ospf1_passive(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        interface_gi_ospf_conf = ET.SubElement(ip, "interface-gi-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_gi_ospf_conf, "ospf1")
        passive = ET.SubElement(ospf1, "passive")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_interface_gi_ospf_conf_ospf1_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        interface_gi_ospf_conf = ET.SubElement(ip, "interface-gi-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_gi_ospf_conf, "ospf1")
        priority = ET.SubElement(ospf1, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_interface_gi_ospf_conf_ospf1_bfd_intf_bfd_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        interface_gi_ospf_conf = ET.SubElement(ip, "interface-gi-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_gi_ospf_conf, "ospf1")
        bfd = ET.SubElement(ospf1, "bfd")
        intf_bfd_enable = ET.SubElement(bfd, "intf-bfd-enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_pim_intf_phy_cont_pim_int_cmd_pim_sparse(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        pim_intf_phy_cont = ET.SubElement(ip, "pim-intf-phy-cont", xmlns="urn:brocade.com:mgmt:brocade-pim")
        pim_int_cmd = ET.SubElement(pim_intf_phy_cont, "pim-int-cmd")
        pim_sparse = ET.SubElement(pim_int_cmd, "pim-sparse")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_pim_intf_phy_cont_pim_int_cmd_pim_neighbor_filter(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        pim_intf_phy_cont = ET.SubElement(ip, "pim-intf-phy-cont", xmlns="urn:brocade.com:mgmt:brocade-pim")
        pim_int_cmd = ET.SubElement(pim_intf_phy_cont, "pim-int-cmd")
        pim = ET.SubElement(pim_int_cmd, "pim")
        neighbor_filter = ET.SubElement(pim, "neighbor-filter")
        neighbor_filter.text = kwargs.pop('neighbor_filter')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_pim_intf_phy_cont_pim_int_cmd_pim_dr_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        pim_intf_phy_cont = ET.SubElement(ip, "pim-intf-phy-cont", xmlns="urn:brocade.com:mgmt:brocade-pim")
        pim_int_cmd = ET.SubElement(pim_intf_phy_cont, "pim-int-cmd")
        pim = ET.SubElement(pim_int_cmd, "pim")
        dr_priority = ET.SubElement(pim, "dr-priority")
        dr_priority.text = kwargs.pop('dr_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_pim_intf_phy_cont_pim_int_cmd_mcast_bdry_prefix_list(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        pim_intf_phy_cont = ET.SubElement(ip, "pim-intf-phy-cont", xmlns="urn:brocade.com:mgmt:brocade-pim")
        pim_int_cmd = ET.SubElement(pim_intf_phy_cont, "pim-int-cmd")
        mcast_bdry_prefix_list = ET.SubElement(pim_int_cmd, "mcast-bdry-prefix-list")
        mcast_bdry_prefix_list.text = kwargs.pop('mcast_bdry_prefix_list')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_vrf_forwarding(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrf = ET.SubElement(gigabitethernet, "vrf")
        forwarding = ET.SubElement(vrf, "forwarding")
        forwarding.text = kwargs.pop('forwarding')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_raguard(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        raguard = ET.SubElement(ipv6, "raguard")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_ipv6_config_address_use_link_local_only(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        address = ET.SubElement(ipv6_config, "address")
        use_link_local_only = ET.SubElement(address, "use-link-local-only")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_ipv6_config_address_link_local_config_link_local_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        address = ET.SubElement(ipv6_config, "address")
        link_local_config = ET.SubElement(address, "link-local-config")
        link_local_address = ET.SubElement(link_local_config, "link-local-address")
        link_local_address.text = kwargs.pop('link_local_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_ipv6_config_address_link_local_config_link_local(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        address = ET.SubElement(ipv6_config, "address")
        link_local_config = ET.SubElement(address, "link-local-config")
        link_local = ET.SubElement(link_local_config, "link-local")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_ipv6_config_address_ipv6_address_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        address = ET.SubElement(ipv6_config, "address")
        ipv6_address = ET.SubElement(address, "ipv6-address")
        address = ET.SubElement(ipv6_address, "address")
        address.text = kwargs.pop('address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_ipv6_config_address_ipv6_address_secondary(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        address = ET.SubElement(ipv6_config, "address")
        ipv6_address = ET.SubElement(address, "ipv6-address")
        address_key = ET.SubElement(ipv6_address, "address")
        address_key.text = kwargs.pop('address')
        secondary = ET.SubElement(ipv6_address, "secondary")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_ipv6_config_address_ipv6_address_eui_config_eui64(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        address = ET.SubElement(ipv6_config, "address")
        ipv6_address = ET.SubElement(address, "ipv6-address")
        address_key = ET.SubElement(ipv6_address, "address")
        address_key.text = kwargs.pop('address')
        eui_config = ET.SubElement(ipv6_address, "eui-config")
        eui64 = ET.SubElement(eui_config, "eui64")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_ipv6_config_address_ipv6_address_eui_config_eui_secondary(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        address = ET.SubElement(ipv6_config, "address")
        ipv6_address = ET.SubElement(address, "ipv6-address")
        address_key = ET.SubElement(ipv6_address, "address")
        address_key.text = kwargs.pop('address')
        eui_config = ET.SubElement(ipv6_address, "eui-config")
        eui_secondary = ET.SubElement(eui_config, "eui-secondary")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_ipv6_config_address_ipv6_address_anycast(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        address = ET.SubElement(ipv6_config, "address")
        ipv6_address = ET.SubElement(address, "ipv6-address")
        address_key = ET.SubElement(ipv6_address, "address")
        address_key.text = kwargs.pop('address')
        anycast = ET.SubElement(ipv6_address, "anycast")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_ipv6_config_mtu(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        mtu = ET.SubElement(ipv6_config, "mtu")
        mtu.text = kwargs.pop('mtu')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_interface_phy_dhcp_conf_dhcp_relay_servers_relay_ip_addr(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        interface_phy_dhcp_conf = ET.SubElement(ipv6, "interface-phy-dhcp-conf", xmlns="urn:brocade.com:mgmt:brocade-dhcpv6")
        dhcp = ET.SubElement(interface_phy_dhcp_conf, "dhcp")
        relay = ET.SubElement(dhcp, "relay")
        servers = ET.SubElement(relay, "servers")
        relay_ip_addr = ET.SubElement(servers, "relay-ip-addr")
        relay_ip_addr.text = kwargs.pop('relay_ip_addr')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_interface_phy_dhcp_conf_dhcp_relay_servers_server_vrf_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        interface_phy_dhcp_conf = ET.SubElement(ipv6, "interface-phy-dhcp-conf", xmlns="urn:brocade.com:mgmt:brocade-dhcpv6")
        dhcp = ET.SubElement(interface_phy_dhcp_conf, "dhcp")
        relay = ET.SubElement(dhcp, "relay")
        servers = ET.SubElement(relay, "servers")
        relay_ip_addr_key = ET.SubElement(servers, "relay-ip-addr")
        relay_ip_addr_key.text = kwargs.pop('relay_ip_addr')
        server_vrf_name = ET.SubElement(servers, "server-vrf-name")
        server_vrf_name.text = kwargs.pop('server_vrf_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_interface_phy_dhcp_conf_dhcp_relay_servers_interface_interface_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        interface_phy_dhcp_conf = ET.SubElement(ipv6, "interface-phy-dhcp-conf", xmlns="urn:brocade.com:mgmt:brocade-dhcpv6")
        dhcp = ET.SubElement(interface_phy_dhcp_conf, "dhcp")
        relay = ET.SubElement(dhcp, "relay")
        servers = ET.SubElement(relay, "servers")
        relay_ip_addr_key = ET.SubElement(servers, "relay-ip-addr")
        relay_ip_addr_key.text = kwargs.pop('relay_ip_addr')
        interface = ET.SubElement(servers, "interface")
        interface_type = ET.SubElement(interface, "interface-type")
        interface_type.text = kwargs.pop('interface_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_interface_phy_dhcp_conf_dhcp_relay_servers_interface_interface_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        interface_phy_dhcp_conf = ET.SubElement(ipv6, "interface-phy-dhcp-conf", xmlns="urn:brocade.com:mgmt:brocade-dhcpv6")
        dhcp = ET.SubElement(interface_phy_dhcp_conf, "dhcp")
        relay = ET.SubElement(dhcp, "relay")
        servers = ET.SubElement(relay, "servers")
        relay_ip_addr_key = ET.SubElement(servers, "relay-ip-addr")
        relay_ip_addr_key.text = kwargs.pop('relay_ip_addr')
        interface = ET.SubElement(servers, "interface")
        interface_name = ET.SubElement(interface, "interface-name")
        interface_name.text = kwargs.pop('interface_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_icmpv6_echo_reply(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        icmpv6 = ET.SubElement(ipv6, "icmpv6", xmlns="urn:brocade.com:mgmt:brocade-icmp")
        echo_reply = ET.SubElement(icmpv6, "echo-reply")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_icmpv6_rate_limiting(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        icmpv6 = ET.SubElement(ipv6, "icmpv6", xmlns="urn:brocade.com:mgmt:brocade-icmp")
        rate_limiting = ET.SubElement(icmpv6, "rate-limiting")
        rate_limiting.text = kwargs.pop('rate_limiting')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_icmpv6_unreachable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        icmpv6 = ET.SubElement(ipv6, "icmpv6", xmlns="urn:brocade.com:mgmt:brocade-icmp")
        unreachable = ET.SubElement(icmpv6, "unreachable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_icmpv6_redirect(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        icmpv6 = ET.SubElement(ipv6, "icmpv6", xmlns="urn:brocade.com:mgmt:brocade-icmp")
        redirect = ET.SubElement(icmpv6, "redirect")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_access_group_ipv6_access_list(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        access_group = ET.SubElement(ipv6, "access-group", xmlns="urn:brocade.com:mgmt:brocade-ipv6-access-list")
        ip_direction_key = ET.SubElement(access_group, "ip-direction")
        ip_direction_key.text = kwargs.pop('ip_direction')
        ipv6_access_list = ET.SubElement(access_group, "ipv6-access-list")
        ipv6_access_list.text = kwargs.pop('ipv6_access_list')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_access_group_ip_direction(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        access_group = ET.SubElement(ipv6, "access-group", xmlns="urn:brocade.com:mgmt:brocade-ipv6-access-list")
        ipv6_access_list_key = ET.SubElement(access_group, "ipv6-access-list")
        ipv6_access_list_key.text = kwargs.pop('ipv6_access_list')
        ip_direction = ET.SubElement(access_group, "ip-direction")
        ip_direction.text = kwargs.pop('ip_direction')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_access_group_traffic_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        access_group = ET.SubElement(ipv6, "access-group", xmlns="urn:brocade.com:mgmt:brocade-ipv6-access-list")
        ipv6_access_list_key = ET.SubElement(access_group, "ipv6-access-list")
        ipv6_access_list_key.text = kwargs.pop('ipv6_access_list')
        ip_direction_key = ET.SubElement(access_group, "ip-direction")
        ip_direction_key.text = kwargs.pop('ip_direction')
        traffic_type = ET.SubElement(access_group, "traffic-type")
        traffic_type.text = kwargs.pop('traffic_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_policy_route_map_ipv6_route_map_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        policy = ET.SubElement(ipv6, "policy", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        route_map = ET.SubElement(policy, "route-map")
        ipv6_route_map_name = ET.SubElement(route_map, "ipv6-route-map-name")
        ipv6_route_map_name.text = kwargs.pop('ipv6_route_map_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_vrrp_suppress_interface_ra(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        vrrp_suppress_interface_ra = ET.SubElement(ipv6_intf_cmds, "vrrp-suppress-interface-ra")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_managed_config_flag(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        managed_config_flag = ET.SubElement(nd, "managed-config-flag")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_other_config_flag(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        other_config_flag = ET.SubElement(nd, "other-config-flag")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_broadcast_mac_trap(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        broadcast_mac_trap = ET.SubElement(nd, "broadcast-mac-trap")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_ra_lifetime(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        ra_lifetime = ET.SubElement(nd, "ra-lifetime")
        ra_lifetime.text = kwargs.pop('ra_lifetime')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_reachable_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        reachable_time = ET.SubElement(nd, "reachable-time")
        reachable_time.text = kwargs.pop('reachable_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_mtu(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        mtu = ET.SubElement(nd, "mtu")
        mtu.text = kwargs.pop('mtu')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_retrans_timer(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        retrans_timer = ET.SubElement(nd, "retrans-timer")
        retrans_timer.text = kwargs.pop('retrans_timer')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_hoplimit(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        hoplimit = ET.SubElement(nd, "hoplimit")
        hoplimit.text = kwargs.pop('hoplimit')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_ns_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        ns_interval = ET.SubElement(nd, "ns-interval")
        ns_interval.text = kwargs.pop('ns_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_proxy(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        proxy = ET.SubElement(nd, "proxy")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_suppress_ra_suppress_ra_flag(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        suppress_ra = ET.SubElement(nd, "suppress-ra")
        suppress_ra_flag = ET.SubElement(suppress_ra, "suppress-ra-flag")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_suppress_ra_suppress_ra_mtu(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        suppress_ra = ET.SubElement(nd, "suppress-ra")
        suppress_ra_mtu = ET.SubElement(suppress_ra, "suppress-ra-mtu")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_suppress_ra_suppress_ra_all(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        suppress_ra = ET.SubElement(nd, "suppress-ra")
        suppress_ra_all = ET.SubElement(suppress_ra, "suppress-ra-all")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_ra_interval_max_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        ra_interval = ET.SubElement(nd, "ra-interval")
        max_interval = ET.SubElement(ra_interval, "max-interval")
        max_interval.text = kwargs.pop('max_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_ra_interval_min(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        ra_interval = ET.SubElement(nd, "ra-interval")
        min = ET.SubElement(ra_interval, "min")
        min.text = kwargs.pop('min')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_dad_attempts(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        dad = ET.SubElement(nd, "dad")
        attempts = ET.SubElement(dad, "attempts")
        attempts.text = kwargs.pop('attempts')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_dad_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        dad = ET.SubElement(nd, "dad")
        time = ET.SubElement(dad, "time")
        time.text = kwargs.pop('time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_nud_retry_base(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        nud = ET.SubElement(nd, "nud")
        retry = ET.SubElement(nud, "retry")
        base = ET.SubElement(retry, "base")
        base.text = kwargs.pop('base')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_nud_retry_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        nud = ET.SubElement(nd, "nud")
        retry = ET.SubElement(nud, "retry")
        interval = ET.SubElement(retry, "interval")
        interval.text = kwargs.pop('interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_nud_retry_max_attempts(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        nud = ET.SubElement(nd, "nud")
        retry = ET.SubElement(nud, "retry")
        max_attempts = ET.SubElement(retry, "max-attempts")
        max_attempts.text = kwargs.pop('max_attempts')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_cache_expire(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        cache = ET.SubElement(nd, "cache")
        expire = ET.SubElement(cache, "expire")
        expire.text = kwargs.pop('expire')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_prefix_prefix_ipv6_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        prefix = ET.SubElement(nd, "prefix")
        prefix_ipv6_address = ET.SubElement(prefix, "prefix-ipv6-address")
        prefix_ipv6_address.text = kwargs.pop('prefix_ipv6_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_prefix_lifetime_ch_valid_type_ca_no_advertise_no_advertise(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        prefix = ET.SubElement(nd, "prefix")
        prefix_ipv6_address_key = ET.SubElement(prefix, "prefix-ipv6-address")
        prefix_ipv6_address_key.text = kwargs.pop('prefix_ipv6_address')
        lifetime = ET.SubElement(prefix, "lifetime")
        ch_valid_type = ET.SubElement(lifetime, "ch-valid-type")
        ca_no_advertise = ET.SubElement(ch_valid_type, "ca-no-advertise")
        no_advertise = ET.SubElement(ca_no_advertise, "no-advertise")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_prefix_lifetime_ch_valid_type_ca_valid_lifetime_valid_lifetime(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        prefix = ET.SubElement(nd, "prefix")
        prefix_ipv6_address_key = ET.SubElement(prefix, "prefix-ipv6-address")
        prefix_ipv6_address_key.text = kwargs.pop('prefix_ipv6_address')
        lifetime = ET.SubElement(prefix, "lifetime")
        ch_valid_type = ET.SubElement(lifetime, "ch-valid-type")
        ca_valid_lifetime = ET.SubElement(ch_valid_type, "ca-valid-lifetime")
        valid_lifetime = ET.SubElement(ca_valid_lifetime, "valid-lifetime")
        valid_lifetime.text = kwargs.pop('valid_lifetime')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_prefix_lifetime_ch_valid_type_ca_valid_infinite_valid_infinite(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        prefix = ET.SubElement(nd, "prefix")
        prefix_ipv6_address_key = ET.SubElement(prefix, "prefix-ipv6-address")
        prefix_ipv6_address_key.text = kwargs.pop('prefix_ipv6_address')
        lifetime = ET.SubElement(prefix, "lifetime")
        ch_valid_type = ET.SubElement(lifetime, "ch-valid-type")
        ca_valid_infinite = ET.SubElement(ch_valid_type, "ca-valid-infinite")
        valid_infinite = ET.SubElement(ca_valid_infinite, "valid-infinite")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_prefix_lifetime_preferred_ch_preferred_type_ca_preferred_lifetime_preferred_lifetime(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        prefix = ET.SubElement(nd, "prefix")
        prefix_ipv6_address_key = ET.SubElement(prefix, "prefix-ipv6-address")
        prefix_ipv6_address_key.text = kwargs.pop('prefix_ipv6_address')
        lifetime = ET.SubElement(prefix, "lifetime")
        preferred = ET.SubElement(lifetime, "preferred")
        ch_preferred_type = ET.SubElement(preferred, "ch-preferred-type")
        ca_preferred_lifetime = ET.SubElement(ch_preferred_type, "ca-preferred-lifetime")
        preferred_lifetime = ET.SubElement(ca_preferred_lifetime, "preferred-lifetime")
        preferred_lifetime.text = kwargs.pop('preferred_lifetime')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_prefix_lifetime_preferred_ch_preferred_type_ca_preferred_infinite_preferred_infinite(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        prefix = ET.SubElement(nd, "prefix")
        prefix_ipv6_address_key = ET.SubElement(prefix, "prefix-ipv6-address")
        prefix_ipv6_address_key.text = kwargs.pop('prefix_ipv6_address')
        lifetime = ET.SubElement(prefix, "lifetime")
        preferred = ET.SubElement(lifetime, "preferred")
        ch_preferred_type = ET.SubElement(preferred, "ch-preferred-type")
        ca_preferred_infinite = ET.SubElement(ch_preferred_type, "ca-preferred-infinite")
        preferred_infinite = ET.SubElement(ca_preferred_infinite, "preferred-infinite")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_prefix_lifetime_preferred_prefix_flags_no_autoconfig(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        prefix = ET.SubElement(nd, "prefix")
        prefix_ipv6_address_key = ET.SubElement(prefix, "prefix-ipv6-address")
        prefix_ipv6_address_key.text = kwargs.pop('prefix_ipv6_address')
        lifetime = ET.SubElement(prefix, "lifetime")
        preferred = ET.SubElement(lifetime, "preferred")
        prefix_flags = ET.SubElement(preferred, "prefix-flags")
        no_autoconfig = ET.SubElement(prefix_flags, "no-autoconfig")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_prefix_lifetime_preferred_prefix_flags_no_onlink(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        prefix = ET.SubElement(nd, "prefix")
        prefix_ipv6_address_key = ET.SubElement(prefix, "prefix-ipv6-address")
        prefix_ipv6_address_key.text = kwargs.pop('prefix_ipv6_address')
        lifetime = ET.SubElement(prefix, "lifetime")
        preferred = ET.SubElement(lifetime, "preferred")
        prefix_flags = ET.SubElement(preferred, "prefix-flags")
        no_onlink = ET.SubElement(prefix_flags, "no-onlink")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_prefix_lifetime_preferred_prefix_flags_off_link(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        prefix = ET.SubElement(nd, "prefix")
        prefix_ipv6_address_key = ET.SubElement(prefix, "prefix-ipv6-address")
        prefix_ipv6_address_key.text = kwargs.pop('prefix_ipv6_address')
        lifetime = ET.SubElement(prefix, "lifetime")
        preferred = ET.SubElement(lifetime, "preferred")
        prefix_flags = ET.SubElement(preferred, "prefix-flags")
        off_link = ET.SubElement(prefix_flags, "off-link")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_neighbor_ipv6_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        neighbor = ET.SubElement(ipv6_intf_cmds, "neighbor")
        ipv6_address = ET.SubElement(neighbor, "ipv6-address")
        ipv6_address.text = kwargs.pop('ipv6_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_neighbor_hardware_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        neighbor = ET.SubElement(ipv6_intf_cmds, "neighbor")
        ipv6_address_key = ET.SubElement(neighbor, "ipv6-address")
        ipv6_address_key.text = kwargs.pop('ipv6_address')
        hardware_address = ET.SubElement(neighbor, "hardware-address")
        hardware_address.text = kwargs.pop('hardware_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_ipv6_phy_intf_cmds_hop_by_hop_trap(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        ipv6_phy_intf_cmds = ET.SubElement(ipv6, "ipv6-phy-intf-cmds", xmlns="urn:brocade.com:mgmt:brocade-mld-snooping")
        hop_by_hop_trap = ET.SubElement(ipv6_phy_intf_cmds, "hop-by-hop-trap")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_interface_ospfv3_conf_interface_area(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        interface_area = ET.SubElement(interface_ospfv3_conf, "interface-area")
        interface_area.text = kwargs.pop('interface_area')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_interface_ospfv3_conf_active(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        active = ET.SubElement(interface_ospfv3_conf, "active")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_interface_ospfv3_conf_passive(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        passive = ET.SubElement(interface_ospfv3_conf, "passive")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_interface_ospfv3_conf_bfd_bfd_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        bfd = ET.SubElement(interface_ospfv3_conf, "bfd")
        bfd_enable = ET.SubElement(bfd, "bfd-enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_interface_ospfv3_conf_cost(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        cost = ET.SubElement(interface_ospfv3_conf, "cost")
        cost.text = kwargs.pop('cost')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_interface_ospfv3_conf_instance(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        instance = ET.SubElement(interface_ospfv3_conf, "instance")
        instance.text = kwargs.pop('instance')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_interface_ospfv3_conf_mtu_ignore(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        mtu_ignore = ET.SubElement(interface_ospfv3_conf, "mtu-ignore")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_interface_ospfv3_conf_network(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        network = ET.SubElement(interface_ospfv3_conf, "network")
        network.text = kwargs.pop('network')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_interface_ospfv3_conf_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        priority = ET.SubElement(interface_ospfv3_conf, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_interface_ospfv3_conf_suppress_linklsa(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        suppress_linklsa = ET.SubElement(interface_ospfv3_conf, "suppress-linklsa")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_spi(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        spi = ET.SubElement(ipsec_auth_key_config, "spi")
        spi.text = kwargs.pop('spi')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_ah_algorithm_ah(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_ah_algorithm = ET.SubElement(ch_algorithm, "ca-ah-algorithm")
        ah = ET.SubElement(ca_ah_algorithm, "ah")
        ah.text = kwargs.pop('ah')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_ah_algorithm_ah_no_encrypt(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_ah_algorithm = ET.SubElement(ch_algorithm, "ca-ah-algorithm")
        ah_no_encrypt = ET.SubElement(ca_ah_algorithm, "ah-no-encrypt")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_ah_algorithm_ah_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_ah_algorithm = ET.SubElement(ch_algorithm, "ca-ah-algorithm")
        ah_key = ET.SubElement(ca_ah_algorithm, "ah-key")
        ah_key.text = kwargs.pop('ah_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp = ET.SubElement(ca_esp_algorithm, "esp")
        esp.text = kwargs.pop('esp')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp_no_encrypt(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp_no_encrypt = ET.SubElement(ca_esp_algorithm, "esp-no-encrypt")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp_key = ET.SubElement(ca_esp_algorithm, "esp-key")
        esp_key.text = kwargs.pop('esp_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp_auth(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp_auth = ET.SubElement(ca_esp_algorithm, "esp-auth")
        esp_auth.text = kwargs.pop('esp_auth')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp_auth_no_encrypt(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp_auth_no_encrypt = ET.SubElement(ca_esp_algorithm, "esp-auth-no-encrypt")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp_auth_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp_auth_key = ET.SubElement(ca_esp_algorithm, "esp-auth-key")
        esp_auth_key.text = kwargs.pop('esp_auth_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_ipsec_authentication_disable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec = ET.SubElement(authentication, "ipsec")
        ipsec_authentication_disable = ET.SubElement(ipsec, "ipsec-authentication-disable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_ifc_key_add_remove_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec = ET.SubElement(authentication, "ipsec")
        ifc_key_add_remove_interval = ET.SubElement(ipsec, "ifc-key-add-remove-interval")
        ifc_key_add_remove_interval.text = kwargs.pop('ifc_key_add_remove_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_interface_ospfv3_conf_link_interval_properties_hello_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        link_interval_properties = ET.SubElement(interface_ospfv3_conf, "link-interval-properties")
        hello_interval = ET.SubElement(link_interval_properties, "hello-interval")
        hello_interval.text = kwargs.pop('hello_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_interface_ospfv3_conf_link_interval_properties_dead_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        link_interval_properties = ET.SubElement(interface_ospfv3_conf, "link-interval-properties")
        dead_interval = ET.SubElement(link_interval_properties, "dead-interval")
        dead_interval.text = kwargs.pop('dead_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_interface_ospfv3_conf_link_interval_properties_hello_jitter(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        link_interval_properties = ET.SubElement(interface_ospfv3_conf, "link-interval-properties")
        hello_jitter = ET.SubElement(link_interval_properties, "hello-jitter")
        hello_jitter.text = kwargs.pop('hello_jitter')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_interface_ospfv3_conf_link_interval_properties_retransmit_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        link_interval_properties = ET.SubElement(interface_ospfv3_conf, "link-interval-properties")
        retransmit_interval = ET.SubElement(link_interval_properties, "retransmit-interval")
        retransmit_interval.text = kwargs.pop('retransmit_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_interface_ospfv3_conf_link_interval_properties_transmit_delay(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        link_interval_properties = ET.SubElement(interface_ospfv3_conf, "link-interval-properties")
        transmit_delay = ET.SubElement(link_interval_properties, "transmit-delay")
        transmit_delay.text = kwargs.pop('transmit_delay')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_vrrpv3_group_vrid(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        vrrpv3_group = ET.SubElement(ipv6, "vrrpv3-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid = ET.SubElement(vrrpv3_group, "vrid")
        vrid.text = kwargs.pop('vrid')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_vrrpv3_group_use_v2_checksum(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        vrrpv3_group = ET.SubElement(ipv6, "vrrpv3-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        use_v2_checksum = ET.SubElement(vrrpv3_group, "use-v2-checksum")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_vrrpv3_group_virtual_ip_virtual_ipaddr(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        vrrpv3_group = ET.SubElement(ipv6, "vrrpv3-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        virtual_ip = ET.SubElement(vrrpv3_group, "virtual-ip")
        virtual_ipaddr = ET.SubElement(virtual_ip, "virtual-ipaddr")
        virtual_ipaddr.text = kwargs.pop('virtual_ipaddr')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_vrrpv3_group_track_interface_interface_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        vrrpv3_group = ET.SubElement(ipv6, "vrrpv3-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        track = ET.SubElement(vrrpv3_group, "track")
        interface = ET.SubElement(track, "interface")
        interface_name_key = ET.SubElement(interface, "interface-name")
        interface_name_key.text = kwargs.pop('interface_name')
        interface_type = ET.SubElement(interface, "interface-type")
        interface_type.text = kwargs.pop('interface_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_vrrpv3_group_track_interface_interface_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        vrrpv3_group = ET.SubElement(ipv6, "vrrpv3-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        track = ET.SubElement(vrrpv3_group, "track")
        interface = ET.SubElement(track, "interface")
        interface_type_key = ET.SubElement(interface, "interface-type")
        interface_type_key.text = kwargs.pop('interface_type')
        interface_name = ET.SubElement(interface, "interface-name")
        interface_name.text = kwargs.pop('interface_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_vrrpv3_group_track_interface_track_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        vrrpv3_group = ET.SubElement(ipv6, "vrrpv3-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        track = ET.SubElement(vrrpv3_group, "track")
        interface = ET.SubElement(track, "interface")
        interface_type_key = ET.SubElement(interface, "interface-type")
        interface_type_key.text = kwargs.pop('interface_type')
        interface_name_key = ET.SubElement(interface, "interface-name")
        interface_name_key.text = kwargs.pop('interface_name')
        track_priority = ET.SubElement(interface, "track-priority")
        track_priority.text = kwargs.pop('track_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_vrrpv3_group_advertisement_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        vrrpv3_group = ET.SubElement(ipv6, "vrrpv3-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        advertisement_interval = ET.SubElement(vrrpv3_group, "advertisement-interval")
        advertisement_interval.text = kwargs.pop('advertisement_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_vrrpv3_group_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        vrrpv3_group = ET.SubElement(ipv6, "vrrpv3-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        enable = ET.SubElement(vrrpv3_group, "enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_vrrpv3_group_hold_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        vrrpv3_group = ET.SubElement(ipv6, "vrrpv3-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        hold_time = ET.SubElement(vrrpv3_group, "hold-time")
        hold_time.text = kwargs.pop('hold_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_vrrpv3_group_preempt_mode(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        vrrpv3_group = ET.SubElement(ipv6, "vrrpv3-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        preempt_mode = ET.SubElement(vrrpv3_group, "preempt-mode")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_vrrpv3_group_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        vrrpv3_group = ET.SubElement(ipv6, "vrrpv3-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        priority = ET.SubElement(vrrpv3_group, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_vrrpv3_group_description(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        vrrpv3_group = ET.SubElement(ipv6, "vrrpv3-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        description = ET.SubElement(vrrpv3_group, "description")
        description.text = kwargs.pop('description')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_vrrpv3e_group_vrid(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid = ET.SubElement(vrrpv3e_group, "vrid")
        vrid.text = kwargs.pop('vrid')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_vrrpv3e_group_virtual_ip_virtual_ipaddr(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        virtual_ip = ET.SubElement(vrrpv3e_group, "virtual-ip")
        virtual_ipaddr = ET.SubElement(virtual_ip, "virtual-ipaddr")
        virtual_ipaddr.text = kwargs.pop('virtual_ipaddr')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_vrrpv3e_group_track_interface_interface_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        track = ET.SubElement(vrrpv3e_group, "track")
        interface = ET.SubElement(track, "interface")
        interface_name_key = ET.SubElement(interface, "interface-name")
        interface_name_key.text = kwargs.pop('interface_name')
        interface_type = ET.SubElement(interface, "interface-type")
        interface_type.text = kwargs.pop('interface_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_vrrpv3e_group_track_interface_interface_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        track = ET.SubElement(vrrpv3e_group, "track")
        interface = ET.SubElement(track, "interface")
        interface_type_key = ET.SubElement(interface, "interface-type")
        interface_type_key.text = kwargs.pop('interface_type')
        interface_name = ET.SubElement(interface, "interface-name")
        interface_name.text = kwargs.pop('interface_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_vrrpv3e_group_track_interface_track_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        track = ET.SubElement(vrrpv3e_group, "track")
        interface = ET.SubElement(track, "interface")
        interface_type_key = ET.SubElement(interface, "interface-type")
        interface_type_key.text = kwargs.pop('interface_type')
        interface_name_key = ET.SubElement(interface, "interface-name")
        interface_name_key.text = kwargs.pop('interface_name')
        track_priority = ET.SubElement(interface, "track-priority")
        track_priority.text = kwargs.pop('track_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_vrrpv3e_group_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        enable = ET.SubElement(vrrpv3e_group, "enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_vrrpv3e_group_hold_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        hold_time = ET.SubElement(vrrpv3e_group, "hold-time")
        hold_time.text = kwargs.pop('hold_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_vrrpv3e_group_preempt_mode(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        preempt_mode = ET.SubElement(vrrpv3e_group, "preempt-mode")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_vrrpv3e_group_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        priority = ET.SubElement(vrrpv3e_group, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_vrrpv3e_group_description(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        description = ET.SubElement(vrrpv3e_group, "description")
        description.text = kwargs.pop('description')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_vrrpv3e_group_advertise_backup(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        advertise_backup = ET.SubElement(vrrpv3e_group, "advertise-backup")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_vrrpv3e_group_nd_advertisement_timer(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        nd_advertisement_timer = ET.SubElement(vrrpv3e_group, "nd-advertisement-timer")
        nd_advertisement_timer.text = kwargs.pop('nd_advertisement_timer')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_vrrpv3e_group_advertisement_interval_scale(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        advertisement_interval_scale = ET.SubElement(vrrpv3e_group, "advertisement-interval-scale")
        advertisement_interval_scale.text = kwargs.pop('advertisement_interval_scale')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_vrrpv3e_group_backup_advertisement_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        backup_advertisement_interval = ET.SubElement(vrrpv3e_group, "backup-advertisement-interval")
        backup_advertisement_interval.text = kwargs.pop('backup_advertisement_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_vrrpv3e_group_vrrpe_advertisement_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        vrrpe_advertisement_interval = ET.SubElement(vrrpv3e_group, "vrrpe-advertisement-interval")
        vrrpe_advertisement_interval.text = kwargs.pop('vrrpe_advertisement_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_vrrpv3e_group_short_path_forwarding_basic(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        short_path_forwarding = ET.SubElement(vrrpv3e_group, "short-path-forwarding")
        basic = ET.SubElement(short_path_forwarding, "basic")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_vrrpv3e_group_short_path_forwarding_revert_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        short_path_forwarding = ET.SubElement(vrrpv3e_group, "short-path-forwarding")
        revert_priority = ET.SubElement(short_path_forwarding, "revert-priority")
        revert_priority.text = kwargs.pop('revert_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_track_track_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        track = ET.SubElement(gigabitethernet, "track")
        track_enable = ET.SubElement(track, "track_enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_track_min_link(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        track = ET.SubElement(gigabitethernet, "track")
        min_link = ET.SubElement(track, "min-link")
        min_link.text = kwargs.pop('min_link')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_track_interface_track_interface_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        track = ET.SubElement(gigabitethernet, "track")
        interface = ET.SubElement(track, "interface")
        track_interface_name_key = ET.SubElement(interface, "track-interface-name")
        track_interface_name_key.text = kwargs.pop('track_interface_name')
        track_interface_type = ET.SubElement(interface, "track-interface-type")
        track_interface_type.text = kwargs.pop('track_interface_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_track_interface_track_interface_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        track = ET.SubElement(gigabitethernet, "track")
        interface = ET.SubElement(track, "interface")
        track_interface_type_key = ET.SubElement(interface, "track-interface-type")
        track_interface_type_key.text = kwargs.pop('track_interface_type')
        track_interface_name = ET.SubElement(interface, "track-interface-name")
        track_interface_name.text = kwargs.pop('track_interface_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_track_remove_remove_all_track_interfaces(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        track = ET.SubElement(gigabitethernet, "track")
        remove = ET.SubElement(track, "remove")
        remove_all_track_interfaces = ET.SubElement(remove, "remove-all-track-interfaces")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_bfd_interval_min_tx(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        bfd = ET.SubElement(gigabitethernet, "bfd")
        interval = ET.SubElement(bfd, "interval")
        min_tx = ET.SubElement(interval, "min-tx")
        min_tx.text = kwargs.pop('min_tx')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_bfd_interval_min_rx(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        bfd = ET.SubElement(gigabitethernet, "bfd")
        interval = ET.SubElement(bfd, "interval")
        min_rx = ET.SubElement(interval, "min-rx")
        min_rx.text = kwargs.pop('min_rx')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_bfd_interval_multiplier(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        bfd = ET.SubElement(gigabitethernet, "bfd")
        interval = ET.SubElement(bfd, "interval")
        multiplier = ET.SubElement(interval, "multiplier")
        multiplier.text = kwargs.pop('multiplier')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_bfd_bfd_shutdown(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        bfd = ET.SubElement(gigabitethernet, "bfd")
        bfd_shutdown = ET.SubElement(bfd, "bfd-shutdown")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_edge_loop_detection_eldprio(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        edge_loop_detection = ET.SubElement(gigabitethernet, "edge-loop-detection")
        eldprio = ET.SubElement(edge_loop_detection, "eldprio")
        eldprio.text = kwargs.pop('eldprio')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_edge_loop_detection_eldvlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        edge_loop_detection = ET.SubElement(gigabitethernet, "edge-loop-detection")
        eldvlan = ET.SubElement(edge_loop_detection, "eldvlan")
        eldvlan.text = kwargs.pop('eldvlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_mac_access_group_mac_access_list(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        mac = ET.SubElement(gigabitethernet, "mac", xmlns="urn:brocade.com:mgmt:brocade-mac-access-list")
        access_group = ET.SubElement(mac, "access-group")
        mac_direction_key = ET.SubElement(access_group, "mac-direction")
        mac_direction_key.text = kwargs.pop('mac_direction')
        mac_access_list = ET.SubElement(access_group, "mac-access-list")
        mac_access_list.text = kwargs.pop('mac_access_list')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_mac_access_group_mac_direction(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        mac = ET.SubElement(gigabitethernet, "mac", xmlns="urn:brocade.com:mgmt:brocade-mac-access-list")
        access_group = ET.SubElement(mac, "access-group")
        mac_access_list_key = ET.SubElement(access_group, "mac-access-list")
        mac_access_list_key.text = kwargs.pop('mac_access_list')
        mac_direction = ET.SubElement(access_group, "mac-direction")
        mac_direction.text = kwargs.pop('mac_direction')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_mac_access_group_traffic_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        mac = ET.SubElement(gigabitethernet, "mac", xmlns="urn:brocade.com:mgmt:brocade-mac-access-list")
        access_group = ET.SubElement(mac, "access-group")
        mac_access_list_key = ET.SubElement(access_group, "mac-access-list")
        mac_access_list_key.text = kwargs.pop('mac_access_list')
        mac_direction_key = ET.SubElement(access_group, "mac-direction")
        mac_direction_key.text = kwargs.pop('mac_direction')
        traffic_type = ET.SubElement(access_group, "traffic-type")
        traffic_type.text = kwargs.pop('traffic_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_vrrp_vrid(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(gigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        vrid = ET.SubElement(vrrp, "vrid")
        vrid.text = kwargs.pop('vrid')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_vrrp_version(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(gigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version = ET.SubElement(vrrp, "version")
        version.text = kwargs.pop('version')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_vrrp_use_v2_checksum(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(gigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        use_v2_checksum = ET.SubElement(vrrp, "use-v2-checksum")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_vrrp_virtual_ip_virtual_ipaddr(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(gigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        virtual_ip = ET.SubElement(vrrp, "virtual-ip")
        virtual_ipaddr = ET.SubElement(virtual_ip, "virtual-ipaddr")
        virtual_ipaddr.text = kwargs.pop('virtual_ipaddr')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_vrrp_track_interface_interface_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(gigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        track = ET.SubElement(vrrp, "track")
        interface = ET.SubElement(track, "interface")
        interface_name_key = ET.SubElement(interface, "interface-name")
        interface_name_key.text = kwargs.pop('interface_name')
        interface_type = ET.SubElement(interface, "interface-type")
        interface_type.text = kwargs.pop('interface_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_vrrp_track_interface_interface_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(gigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        track = ET.SubElement(vrrp, "track")
        interface = ET.SubElement(track, "interface")
        interface_type_key = ET.SubElement(interface, "interface-type")
        interface_type_key.text = kwargs.pop('interface_type')
        interface_name = ET.SubElement(interface, "interface-name")
        interface_name.text = kwargs.pop('interface_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_vrrp_track_interface_track_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(gigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        track = ET.SubElement(vrrp, "track")
        interface = ET.SubElement(track, "interface")
        interface_type_key = ET.SubElement(interface, "interface-type")
        interface_type_key.text = kwargs.pop('interface_type')
        interface_name_key = ET.SubElement(interface, "interface-name")
        interface_name_key.text = kwargs.pop('interface_name')
        track_priority = ET.SubElement(interface, "track-priority")
        track_priority.text = kwargs.pop('track_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_vrrp_advertisement_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(gigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        advertisement_interval = ET.SubElement(vrrp, "advertisement-interval")
        advertisement_interval.text = kwargs.pop('advertisement_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_vrrp_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(gigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        enable = ET.SubElement(vrrp, "enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_vrrp_hold_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(gigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        hold_time = ET.SubElement(vrrp, "hold-time")
        hold_time.text = kwargs.pop('hold_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_vrrp_preempt_mode(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(gigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        preempt_mode = ET.SubElement(vrrp, "preempt-mode")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_vrrp_arp_unicast_request_receive(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(gigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        arp = ET.SubElement(vrrp, "arp")
        unicast_request = ET.SubElement(arp, "unicast-request")
        receive = ET.SubElement(unicast_request, "receive")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_vrrp_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(gigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        priority = ET.SubElement(vrrp, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_vrrp_description(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(gigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        description = ET.SubElement(vrrp, "description")
        description.text = kwargs.pop('description')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_fabric_neighbor_discovery_disable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        fabric = ET.SubElement(gigabitethernet, "fabric", xmlns="urn:brocade.com:mgmt:brocade-fcoe")
        neighbor_discovery = ET.SubElement(fabric, "neighbor-discovery")
        disable = ET.SubElement(neighbor_discovery, "disable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_openflow_interface_cfg_logical_instance_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        openflow_interface_cfg = ET.SubElement(gigabitethernet, "openflow-interface-cfg", xmlns="urn:brocade.com:mgmt:brocade-openflow")
        logical_instance_id = ET.SubElement(openflow_interface_cfg, "logical-instance-id")
        logical_instance_id.text = kwargs.pop('logical_instance_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_openflow_interface_cfg_openflow_enable_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        openflow_interface_cfg = ET.SubElement(gigabitethernet, "openflow-interface-cfg", xmlns="urn:brocade.com:mgmt:brocade-openflow")
        openflow_enable = ET.SubElement(openflow_interface_cfg, "openflow-enable")
        enable = ET.SubElement(openflow_enable, "enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_openflow_interface_cfg_openflow_enable_match_profile(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        openflow_interface_cfg = ET.SubElement(gigabitethernet, "openflow-interface-cfg", xmlns="urn:brocade.com:mgmt:brocade-openflow")
        openflow_enable = ET.SubElement(openflow_interface_cfg, "openflow-enable")
        match_profile = ET.SubElement(openflow_enable, "match-profile")
        match_profile.text = kwargs.pop('match_profile')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_sflow_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        sflow = ET.SubElement(gigabitethernet, "sflow", xmlns="urn:brocade.com:mgmt:brocade-sflow")
        enable = ET.SubElement(sflow, "enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_sflow_polling_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        sflow = ET.SubElement(gigabitethernet, "sflow", xmlns="urn:brocade.com:mgmt:brocade-sflow")
        polling_interval = ET.SubElement(sflow, "polling-interval")
        polling_interval.text = kwargs.pop('polling_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_sflow_sample_rate(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        sflow = ET.SubElement(gigabitethernet, "sflow", xmlns="urn:brocade.com:mgmt:brocade-sflow")
        sample_rate = ET.SubElement(sflow, "sample-rate")
        sample_rate.text = kwargs.pop('sample_rate')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_acl_interface_ip_access_group_ip_access_list(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip_acl_interface = ET.SubElement(gigabitethernet, "ip-acl-interface", xmlns="urn:brocade.com:mgmt:brocade-ip-access-list")
        ip = ET.SubElement(ip_acl_interface, "ip")
        access_group = ET.SubElement(ip, "access-group")
        ip_direction_key = ET.SubElement(access_group, "ip-direction")
        ip_direction_key.text = kwargs.pop('ip_direction')
        ip_access_list = ET.SubElement(access_group, "ip-access-list")
        ip_access_list.text = kwargs.pop('ip_access_list')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_acl_interface_ip_access_group_ip_direction(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip_acl_interface = ET.SubElement(gigabitethernet, "ip-acl-interface", xmlns="urn:brocade.com:mgmt:brocade-ip-access-list")
        ip = ET.SubElement(ip_acl_interface, "ip")
        access_group = ET.SubElement(ip, "access-group")
        ip_access_list_key = ET.SubElement(access_group, "ip-access-list")
        ip_access_list_key.text = kwargs.pop('ip_access_list')
        ip_direction = ET.SubElement(access_group, "ip-direction")
        ip_direction.text = kwargs.pop('ip_direction')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_acl_interface_ip_access_group_traffic_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip_acl_interface = ET.SubElement(gigabitethernet, "ip-acl-interface", xmlns="urn:brocade.com:mgmt:brocade-ip-access-list")
        ip = ET.SubElement(ip_acl_interface, "ip")
        access_group = ET.SubElement(ip, "access-group")
        ip_access_list_key = ET.SubElement(access_group, "ip-access-list")
        ip_access_list_key.text = kwargs.pop('ip_access_list')
        ip_direction_key = ET.SubElement(access_group, "ip-direction")
        ip_direction_key.text = kwargs.pop('ip_direction')
        traffic_type = ET.SubElement(access_group, "traffic-type")
        traffic_type.text = kwargs.pop('traffic_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_storm_control_ingress_protocol_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        storm_control = ET.SubElement(gigabitethernet, "storm-control", xmlns="urn:brocade.com:mgmt:brocade-bum-storm-control")
        ingress = ET.SubElement(storm_control, "ingress")
        protocol_type = ET.SubElement(ingress, "protocol-type")
        protocol_type.text = kwargs.pop('protocol_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_storm_control_ingress_rate_format(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        storm_control = ET.SubElement(gigabitethernet, "storm-control", xmlns="urn:brocade.com:mgmt:brocade-bum-storm-control")
        ingress = ET.SubElement(storm_control, "ingress")
        protocol_type_key = ET.SubElement(ingress, "protocol-type")
        protocol_type_key.text = kwargs.pop('protocol_type')
        rate_format = ET.SubElement(ingress, "rate-format")
        rate_format.text = kwargs.pop('rate_format')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_storm_control_ingress_rate_bps(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        storm_control = ET.SubElement(gigabitethernet, "storm-control", xmlns="urn:brocade.com:mgmt:brocade-bum-storm-control")
        ingress = ET.SubElement(storm_control, "ingress")
        protocol_type_key = ET.SubElement(ingress, "protocol-type")
        protocol_type_key.text = kwargs.pop('protocol_type')
        rate_bps = ET.SubElement(ingress, "rate-bps")
        rate_bps.text = kwargs.pop('rate_bps')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_storm_control_ingress_rate_percent(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        storm_control = ET.SubElement(gigabitethernet, "storm-control", xmlns="urn:brocade.com:mgmt:brocade-bum-storm-control")
        ingress = ET.SubElement(storm_control, "ingress")
        protocol_type_key = ET.SubElement(ingress, "protocol-type")
        protocol_type_key.text = kwargs.pop('protocol_type')
        rate_percent = ET.SubElement(ingress, "rate-percent")
        rate_percent.text = kwargs.pop('rate_percent')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_storm_control_ingress_bum_action(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        storm_control = ET.SubElement(gigabitethernet, "storm-control", xmlns="urn:brocade.com:mgmt:brocade-bum-storm-control")
        ingress = ET.SubElement(storm_control, "ingress")
        protocol_type_key = ET.SubElement(ingress, "protocol-type")
        protocol_type_key.text = kwargs.pop('protocol_type')
        bum_action = ET.SubElement(ingress, "bum-action")
        bum_action.text = kwargs.pop('bum_action')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_dot1x_authentication(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        dot1x = ET.SubElement(gigabitethernet, "dot1x", xmlns="urn:brocade.com:mgmt:brocade-dot1x")
        authentication = ET.SubElement(dot1x, "authentication")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_dot1x_port_control(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        dot1x = ET.SubElement(gigabitethernet, "dot1x", xmlns="urn:brocade.com:mgmt:brocade-dot1x")
        port_control = ET.SubElement(dot1x, "port-control")
        port_control.text = kwargs.pop('port_control')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_dot1x_protocol_version(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        dot1x = ET.SubElement(gigabitethernet, "dot1x", xmlns="urn:brocade.com:mgmt:brocade-dot1x")
        protocol_version = ET.SubElement(dot1x, "protocol-version")
        protocol_version.text = kwargs.pop('protocol_version')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_dot1x_quiet_period(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        dot1x = ET.SubElement(gigabitethernet, "dot1x", xmlns="urn:brocade.com:mgmt:brocade-dot1x")
        quiet_period = ET.SubElement(dot1x, "quiet-period")
        quiet_period.text = kwargs.pop('quiet_period')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_dot1x_reauthMax(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        dot1x = ET.SubElement(gigabitethernet, "dot1x", xmlns="urn:brocade.com:mgmt:brocade-dot1x")
        reauthMax = ET.SubElement(dot1x, "reauthMax")
        reauthMax.text = kwargs.pop('reauthMax')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_dot1x_reauthentication(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        dot1x = ET.SubElement(gigabitethernet, "dot1x", xmlns="urn:brocade.com:mgmt:brocade-dot1x")
        reauthentication = ET.SubElement(dot1x, "reauthentication")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_dot1x_timeout_re_authperiod(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        dot1x = ET.SubElement(gigabitethernet, "dot1x", xmlns="urn:brocade.com:mgmt:brocade-dot1x")
        timeout = ET.SubElement(dot1x, "timeout")
        re_authperiod = ET.SubElement(timeout, "re-authperiod")
        re_authperiod.text = kwargs.pop('re_authperiod')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_dot1x_timeout_server_timeout(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        dot1x = ET.SubElement(gigabitethernet, "dot1x", xmlns="urn:brocade.com:mgmt:brocade-dot1x")
        timeout = ET.SubElement(dot1x, "timeout")
        server_timeout = ET.SubElement(timeout, "server-timeout")
        server_timeout.text = kwargs.pop('server_timeout')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_dot1x_timeout_supp_timeout(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        dot1x = ET.SubElement(gigabitethernet, "dot1x", xmlns="urn:brocade.com:mgmt:brocade-dot1x")
        timeout = ET.SubElement(dot1x, "timeout")
        supp_timeout = ET.SubElement(timeout, "supp-timeout")
        supp_timeout.text = kwargs.pop('supp_timeout')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_dot1x_timeout_tx_period(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        dot1x = ET.SubElement(gigabitethernet, "dot1x", xmlns="urn:brocade.com:mgmt:brocade-dot1x")
        timeout = ET.SubElement(dot1x, "timeout")
        tx_period = ET.SubElement(timeout, "tx-period")
        tx_period.text = kwargs.pop('tx_period')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_pbr_interface_ip_policy_route_map_route_map_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip_pbr_interface = ET.SubElement(gigabitethernet, "ip-pbr-interface", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        ip = ET.SubElement(ip_pbr_interface, "ip")
        policy = ET.SubElement(ip, "policy")
        route_map = ET.SubElement(policy, "route-map")
        route_map_name = ET.SubElement(route_map, "route-map-name")
        route_map_name.text = kwargs.pop('route_map_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_lacp_timeout(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        lacp = ET.SubElement(gigabitethernet, "lacp", xmlns="urn:brocade.com:mgmt:brocade-lacp")
        timeout = ET.SubElement(lacp, "timeout")
        timeout.text = kwargs.pop('timeout')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_lacp_std_port_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        lacp = ET.SubElement(gigabitethernet, "lacp", xmlns="urn:brocade.com:mgmt:brocade-lacp")
        std_port_priority = ET.SubElement(lacp, "std_port-priority")
        std_port_priority.text = kwargs.pop('std_port_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_lacp_default_up(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        lacp = ET.SubElement(gigabitethernet, "lacp", xmlns="urn:brocade.com:mgmt:brocade-lacp")
        default_up = ET.SubElement(lacp, "default-up")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_lldp_cee_lldp_cee_on_off(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        lldp = ET.SubElement(gigabitethernet, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        cee = ET.SubElement(lldp, "cee")
        lldp_cee_on_off = ET.SubElement(cee, "lldp-cee-on-off")
        lldp_cee_on_off.text = kwargs.pop('lldp_cee_on_off')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_lldp_dcbx_version(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        lldp = ET.SubElement(gigabitethernet, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        dcbx_version = ET.SubElement(lldp, "dcbx-version")
        dcbx_version.text = kwargs.pop('dcbx_version')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_lldp_disable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        lldp = ET.SubElement(gigabitethernet, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        disable = ET.SubElement(lldp, "disable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_lldp_iscsi_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        lldp = ET.SubElement(gigabitethernet, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        iscsi_priority = ET.SubElement(lldp, "iscsi-priority")
        iscsi_priority.text = kwargs.pop('iscsi_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_lldp_profile(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        lldp = ET.SubElement(gigabitethernet, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        profile = ET.SubElement(lldp, "profile")
        profile.text = kwargs.pop('profile')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_connectivity_deviceconnectivity(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        connectivity = ET.SubElement(gigabitethernet, "connectivity", xmlns="urn:brocade.com:mgmt:brocade-maps")
        deviceconnectivity = ET.SubElement(connectivity, "deviceconnectivity")
        deviceconnectivity.text = kwargs.pop('deviceconnectivity')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_service_policy_in_cg(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        service_policy = ET.SubElement(gigabitethernet, "service-policy", xmlns="urn:brocade.com:mgmt:brocade-policer")
        in_cg = ET.SubElement(service_policy, "in")
        in_cg.text = kwargs.pop('in_cg')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_service_policy_out(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        service_policy = ET.SubElement(gigabitethernet, "service-policy", xmlns="urn:brocade.com:mgmt:brocade-policer")
        out = ET.SubElement(service_policy, "out")
        out.text = kwargs.pop('out')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_port_profile_port(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        port_profile_port = ET.SubElement(gigabitethernet, "port-profile-port", xmlns="urn:brocade.com:mgmt:brocade-port-profile")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_port_profile_to_interface_associations_port_profile_port_port_to_port_profile_domain_association_profile_domain_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        port_profile_to_interface_associations = ET.SubElement(gigabitethernet, "port-profile-to-interface-associations", xmlns="urn:brocade.com:mgmt:brocade-port-profile")
        port_profile_port = ET.SubElement(port_profile_to_interface_associations, "port-profile-port")
        port_to_port_profile_domain_association = ET.SubElement(port_profile_port, "port-to-port-profile-domain-association")
        profile_domain_name = ET.SubElement(port_to_port_profile_domain_association, "profile-domain-name")
        profile_domain_name.text = kwargs.pop('profile_domain_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_port_profile_to_interface_associations_port_profile_port_port_to_port_profile_associations_port_to_port_profile_association(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        port_profile_to_interface_associations = ET.SubElement(gigabitethernet, "port-profile-to-interface-associations", xmlns="urn:brocade.com:mgmt:brocade-port-profile")
        port_profile_port = ET.SubElement(port_profile_to_interface_associations, "port-profile-port")
        port_to_port_profile_associations = ET.SubElement(port_profile_port, "port-to-port-profile-associations")
        port_to_port_profile_association = ET.SubElement(port_to_port_profile_associations, "port-to-port-profile-association")
        port_to_port_profile_association.text = kwargs.pop('port_to_port_profile_association')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_priority_tag_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        priority_tag_enable = ET.SubElement(gigabitethernet, "priority-tag-enable", xmlns="urn:brocade.com:mgmt:brocade-qos")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_qos_default_cos(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(gigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        default_cos = ET.SubElement(qos, "default-cos")
        default_cos.text = kwargs.pop('default_cos')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_qos_trust_trust_cos(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(gigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        trust = ET.SubElement(qos, "trust")
        trust_cos = ET.SubElement(trust, "trust-cos")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_qos_trust_trust_dscp(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(gigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        trust = ET.SubElement(qos, "trust")
        trust_dscp = ET.SubElement(trust, "trust-dscp")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_qos_cos_mutation(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(gigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        cos_mutation = ET.SubElement(qos, "cos-mutation")
        cos_mutation.text = kwargs.pop('cos_mutation')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_qos_cos_traffic_class(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(gigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        cos_traffic_class = ET.SubElement(qos, "cos-traffic-class")
        cos_traffic_class.text = kwargs.pop('cos_traffic_class')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_qos_dscp_mutation(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(gigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        dscp_mutation = ET.SubElement(qos, "dscp-mutation")
        dscp_mutation.text = kwargs.pop('dscp_mutation')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_qos_dscp_traffic_class(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(gigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        dscp_traffic_class = ET.SubElement(qos, "dscp-traffic-class")
        dscp_traffic_class.text = kwargs.pop('dscp_traffic_class')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_qos_dscp_cos(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(gigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        dscp_cos = ET.SubElement(qos, "dscp-cos")
        dscp_cos.text = kwargs.pop('dscp_cos')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_qos_random_detect_traffic_class_red_tc_value(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(gigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        random_detect = ET.SubElement(qos, "random-detect")
        traffic_class = ET.SubElement(random_detect, "traffic-class")
        red_tc_value = ET.SubElement(traffic_class, "red-tc-value")
        red_tc_value.text = kwargs.pop('red_tc_value')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_qos_random_detect_traffic_class_red_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(gigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        random_detect = ET.SubElement(qos, "random-detect")
        traffic_class = ET.SubElement(random_detect, "traffic-class")
        red_tc_value_key = ET.SubElement(traffic_class, "red-tc-value")
        red_tc_value_key.text = kwargs.pop('red_tc_value')
        red_enable = ET.SubElement(traffic_class, "red-enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_qos_random_detect_traffic_class_red_profile_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(gigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        random_detect = ET.SubElement(qos, "random-detect")
        traffic_class = ET.SubElement(random_detect, "traffic-class")
        red_tc_value_key = ET.SubElement(traffic_class, "red-tc-value")
        red_tc_value_key.text = kwargs.pop('red_tc_value')
        red_profile_id = ET.SubElement(traffic_class, "red-profile-id")
        red_profile_id.text = kwargs.pop('red_profile_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_qos_drop_monitor_drop_monitor_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(gigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        drop_monitor = ET.SubElement(qos, "drop-monitor")
        drop_monitor_enable = ET.SubElement(drop_monitor, "drop-monitor-enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_qos_rcv_queue_cos_threshold_cos0_threshold(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(gigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        rcv_queue = ET.SubElement(qos, "rcv-queue")
        cos_threshold = ET.SubElement(rcv_queue, "cos-threshold")
        cos0_threshold = ET.SubElement(cos_threshold, "cos0-threshold")
        cos0_threshold.text = kwargs.pop('cos0_threshold')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_qos_rcv_queue_cos_threshold_cos1_threshold(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(gigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        rcv_queue = ET.SubElement(qos, "rcv-queue")
        cos_threshold = ET.SubElement(rcv_queue, "cos-threshold")
        cos1_threshold = ET.SubElement(cos_threshold, "cos1-threshold")
        cos1_threshold.text = kwargs.pop('cos1_threshold')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_qos_rcv_queue_cos_threshold_cos2_threshold(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(gigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        rcv_queue = ET.SubElement(qos, "rcv-queue")
        cos_threshold = ET.SubElement(rcv_queue, "cos-threshold")
        cos2_threshold = ET.SubElement(cos_threshold, "cos2-threshold")
        cos2_threshold.text = kwargs.pop('cos2_threshold')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_qos_rcv_queue_cos_threshold_cos3_threshold(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(gigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        rcv_queue = ET.SubElement(qos, "rcv-queue")
        cos_threshold = ET.SubElement(rcv_queue, "cos-threshold")
        cos3_threshold = ET.SubElement(cos_threshold, "cos3-threshold")
        cos3_threshold.text = kwargs.pop('cos3_threshold')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_qos_rcv_queue_cos_threshold_cos4_threshold(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(gigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        rcv_queue = ET.SubElement(qos, "rcv-queue")
        cos_threshold = ET.SubElement(rcv_queue, "cos-threshold")
        cos4_threshold = ET.SubElement(cos_threshold, "cos4-threshold")
        cos4_threshold.text = kwargs.pop('cos4_threshold')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_qos_rcv_queue_cos_threshold_cos5_threshold(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(gigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        rcv_queue = ET.SubElement(qos, "rcv-queue")
        cos_threshold = ET.SubElement(rcv_queue, "cos-threshold")
        cos5_threshold = ET.SubElement(cos_threshold, "cos5-threshold")
        cos5_threshold.text = kwargs.pop('cos5_threshold')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_qos_rcv_queue_cos_threshold_cos6_threshold(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(gigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        rcv_queue = ET.SubElement(qos, "rcv-queue")
        cos_threshold = ET.SubElement(rcv_queue, "cos-threshold")
        cos6_threshold = ET.SubElement(cos_threshold, "cos6-threshold")
        cos6_threshold.text = kwargs.pop('cos6_threshold')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_qos_rcv_queue_cos_threshold_cos7_threshold(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(gigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        rcv_queue = ET.SubElement(qos, "rcv-queue")
        cos_threshold = ET.SubElement(rcv_queue, "cos-threshold")
        cos7_threshold = ET.SubElement(cos_threshold, "cos7-threshold")
        cos7_threshold.text = kwargs.pop('cos7_threshold')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_qos_flowcontrol_link_level_flowcontrol_flowcontrol_tx(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(gigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        flowcontrol = ET.SubElement(qos, "flowcontrol")
        link_level_flowcontrol = ET.SubElement(flowcontrol, "link-level-flowcontrol")
        flowcontrol_tx = ET.SubElement(link_level_flowcontrol, "flowcontrol-tx")
        flowcontrol_tx.text = kwargs.pop('flowcontrol_tx')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_qos_flowcontrol_link_level_flowcontrol_flowcontrol_rx(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(gigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        flowcontrol = ET.SubElement(qos, "flowcontrol")
        link_level_flowcontrol = ET.SubElement(flowcontrol, "link-level-flowcontrol")
        flowcontrol_rx = ET.SubElement(link_level_flowcontrol, "flowcontrol-rx")
        flowcontrol_rx.text = kwargs.pop('flowcontrol_rx')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_rmon_collection_ether_stats_entry_ether_stats_index(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        rmon = ET.SubElement(gigabitethernet, "rmon", xmlns="urn:brocade.com:mgmt:brocade-rmon")
        collection = ET.SubElement(rmon, "collection")
        ether_stats_entry = ET.SubElement(collection, "ether-stats-entry")
        ether_stats_index = ET.SubElement(ether_stats_entry, "ether-stats-index")
        ether_stats_index.text = kwargs.pop('ether_stats_index')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_rmon_collection_ether_stats_entry_ether_stats_owner(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        rmon = ET.SubElement(gigabitethernet, "rmon", xmlns="urn:brocade.com:mgmt:brocade-rmon")
        collection = ET.SubElement(rmon, "collection")
        ether_stats_entry = ET.SubElement(collection, "ether-stats-entry")
        ether_stats_index_key = ET.SubElement(ether_stats_entry, "ether-stats-index")
        ether_stats_index_key.text = kwargs.pop('ether_stats_index')
        ether_stats_owner = ET.SubElement(ether_stats_entry, "ether-stats-owner")
        ether_stats_owner.text = kwargs.pop('ether_stats_owner')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_rmon_collection_history_control_entry_history_control_index(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        rmon = ET.SubElement(gigabitethernet, "rmon", xmlns="urn:brocade.com:mgmt:brocade-rmon")
        collection = ET.SubElement(rmon, "collection")
        history_control_entry = ET.SubElement(collection, "history-control-entry")
        history_control_index = ET.SubElement(history_control_entry, "history-control-index")
        history_control_index.text = kwargs.pop('history_control_index')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_rmon_collection_history_control_entry_history_control_buckets_requested(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        rmon = ET.SubElement(gigabitethernet, "rmon", xmlns="urn:brocade.com:mgmt:brocade-rmon")
        collection = ET.SubElement(rmon, "collection")
        history_control_entry = ET.SubElement(collection, "history-control-entry")
        history_control_index_key = ET.SubElement(history_control_entry, "history-control-index")
        history_control_index_key.text = kwargs.pop('history_control_index')
        history_control_buckets_requested = ET.SubElement(history_control_entry, "history-control-buckets-requested")
        history_control_buckets_requested.text = kwargs.pop('history_control_buckets_requested')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_rmon_collection_history_control_entry_history_control_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        rmon = ET.SubElement(gigabitethernet, "rmon", xmlns="urn:brocade.com:mgmt:brocade-rmon")
        collection = ET.SubElement(rmon, "collection")
        history_control_entry = ET.SubElement(collection, "history-control-entry")
        history_control_index_key = ET.SubElement(history_control_entry, "history-control-index")
        history_control_index_key.text = kwargs.pop('history_control_index')
        history_control_interval = ET.SubElement(history_control_entry, "history-control-interval")
        history_control_interval.text = kwargs.pop('history_control_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_rmon_collection_history_control_entry_history_control_owner(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        rmon = ET.SubElement(gigabitethernet, "rmon", xmlns="urn:brocade.com:mgmt:brocade-rmon")
        collection = ET.SubElement(rmon, "collection")
        history_control_entry = ET.SubElement(collection, "history-control-entry")
        history_control_index_key = ET.SubElement(history_control_entry, "history-control-index")
        history_control_index_key.text = kwargs.pop('history_control_index')
        history_control_owner = ET.SubElement(history_control_entry, "history-control-owner")
        history_control_owner.text = kwargs.pop('history_control_owner')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_udld_udld_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        udld = ET.SubElement(gigabitethernet, "udld", xmlns="urn:brocade.com:mgmt:brocade-udld")
        udld_enable = ET.SubElement(udld, "udld-enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_vlan_classifier_activate_group_groupid(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vlan = ET.SubElement(gigabitethernet, "vlan", xmlns="urn:brocade.com:mgmt:brocade-vlan")
        classifier = ET.SubElement(vlan, "classifier")
        activate = ET.SubElement(classifier, "activate")
        group = ET.SubElement(activate, "group")
        groupid = ET.SubElement(group, "groupid")
        groupid.text = kwargs.pop('groupid')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_vlan_classifier_activate_group_vlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vlan = ET.SubElement(gigabitethernet, "vlan", xmlns="urn:brocade.com:mgmt:brocade-vlan")
        classifier = ET.SubElement(vlan, "classifier")
        activate = ET.SubElement(classifier, "activate")
        group = ET.SubElement(activate, "group")
        groupid_key = ET.SubElement(group, "groupid")
        groupid_key.text = kwargs.pop('groupid')
        vlan = ET.SubElement(group, "vlan")
        vlan.text = kwargs.pop('vlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_bpdu_drop_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        bpdu_drop = ET.SubElement(gigabitethernet, "bpdu-drop", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        enable = ET.SubElement(bpdu_drop, "enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_bpdu_drop_direction(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        bpdu_drop = ET.SubElement(gigabitethernet, "bpdu-drop", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        direction = ET.SubElement(bpdu_drop, "direction")
        direction.text = kwargs.pop('direction')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_tunnel_tagged_ieee_bpdu(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        tunnel = ET.SubElement(gigabitethernet, "tunnel", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        tagged_ieee_bpdu = ET.SubElement(tunnel, "tagged-ieee-bpdu")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_spanning_tree_autoedge(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(gigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        autoedge = ET.SubElement(spanning_tree, "autoedge")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_spanning_tree_cost(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(gigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        cost = ET.SubElement(spanning_tree, "cost")
        cost.text = kwargs.pop('cost')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_spanning_tree_portfast_portfastbasic(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(gigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        portfast = ET.SubElement(spanning_tree, "portfast")
        portfastbasic = ET.SubElement(portfast, "portfastbasic")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_spanning_tree_portfast_bpdu_guard(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(gigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        portfast = ET.SubElement(spanning_tree, "portfast")
        bpdu_guard = ET.SubElement(portfast, "bpdu-guard")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_spanning_tree_portfast_bpdu_filter(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(gigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        portfast = ET.SubElement(spanning_tree, "portfast")
        bpdu_filter = ET.SubElement(portfast, "bpdu-filter")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_spanning_tree_edgeport_edgeportbasic(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(gigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        edgeport = ET.SubElement(spanning_tree, "edgeport")
        edgeportbasic = ET.SubElement(edgeport, "edgeportbasic")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_spanning_tree_edgeport_bpdu_guard(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(gigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        edgeport = ET.SubElement(spanning_tree, "edgeport")
        bpdu_guard = ET.SubElement(edgeport, "bpdu-guard")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_spanning_tree_edgeport_bpdu_filter(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(gigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        edgeport = ET.SubElement(spanning_tree, "edgeport")
        bpdu_filter = ET.SubElement(edgeport, "bpdu-filter")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_spanning_tree_guard_root(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(gigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        guard = ET.SubElement(spanning_tree, "guard")
        root = ET.SubElement(guard, "root")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_spanning_tree_hello_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(gigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        hello_time = ET.SubElement(spanning_tree, "hello-time")
        hello_time.text = kwargs.pop('hello_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_spanning_tree_bpdu_mac(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(gigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        bpdu_mac = ET.SubElement(spanning_tree, "bpdu-mac")
        bpdu_mac.text = kwargs.pop('bpdu_mac')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_spanning_tree_link_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(gigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        link_type = ET.SubElement(spanning_tree, "link-type")
        link_type.text = kwargs.pop('link_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_spanning_tree_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(gigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        priority = ET.SubElement(spanning_tree, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_spanning_tree_restricted_role(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(gigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        restricted_role = ET.SubElement(spanning_tree, "restricted-role")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_spanning_tree_restricted_tcn(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(gigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        restricted_tcn = ET.SubElement(spanning_tree, "restricted-tcn")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_spanning_tree_shutdown(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(gigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        shutdown = ET.SubElement(spanning_tree, "shutdown")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_spanning_tree_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(gigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        vlan = ET.SubElement(spanning_tree, "vlan")
        id = ET.SubElement(vlan, "id")
        id.text = kwargs.pop('id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_spanning_tree_vlan_cost(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(gigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        vlan = ET.SubElement(spanning_tree, "vlan")
        id_key = ET.SubElement(vlan, "id")
        id_key.text = kwargs.pop('id')
        cost = ET.SubElement(vlan, "cost")
        cost.text = kwargs.pop('cost')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_spanning_tree_vlan_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(gigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        vlan = ET.SubElement(spanning_tree, "vlan")
        id_key = ET.SubElement(vlan, "id")
        id_key.text = kwargs.pop('id')
        priority = ET.SubElement(vlan, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_spanning_tree_vlan_guard_root(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(gigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        vlan = ET.SubElement(spanning_tree, "vlan")
        id_key = ET.SubElement(vlan, "id")
        id_key.text = kwargs.pop('id')
        guard = ET.SubElement(vlan, "guard")
        root = ET.SubElement(guard, "root")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_spanning_tree_instance_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(gigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        instance = ET.SubElement(spanning_tree, "instance")
        id = ET.SubElement(instance, "id")
        id.text = kwargs.pop('id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_spanning_tree_instance_cost(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(gigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        instance = ET.SubElement(spanning_tree, "instance")
        id_key = ET.SubElement(instance, "id")
        id_key.text = kwargs.pop('id')
        cost = ET.SubElement(instance, "cost")
        cost.text = kwargs.pop('cost')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_spanning_tree_instance_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(gigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        instance = ET.SubElement(spanning_tree, "instance")
        id_key = ET.SubElement(instance, "id")
        id_key.text = kwargs.pop('id')
        priority = ET.SubElement(instance, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_spanning_tree_instance_restricted_role(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(gigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        instance = ET.SubElement(spanning_tree, "instance")
        id_key = ET.SubElement(instance, "id")
        id_key.text = kwargs.pop('id')
        restricted_role = ET.SubElement(instance, "restricted-role")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_spanning_tree_instance_restricted_tcn(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(gigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        instance = ET.SubElement(spanning_tree, "instance")
        id_key = ET.SubElement(instance, "id")
        id_key.text = kwargs.pop('id')
        restricted_tcn = ET.SubElement(instance, "restricted-tcn")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name = ET.SubElement(tengigabitethernet, "name")
        name.text = kwargs.pop('name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_long_distance_isl(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        long_distance_isl = ET.SubElement(tengigabitethernet, "long-distance-isl")
        long_distance_isl.text = kwargs.pop('long_distance_isl')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_cee(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        cee = ET.SubElement(tengigabitethernet, "cee")
        cee.text = kwargs.pop('cee')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_speed(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        speed = ET.SubElement(tengigabitethernet, "speed")
        speed.text = kwargs.pop('speed')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ifindex(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ifindex = ET.SubElement(tengigabitethernet, "ifindex")
        ifindex.text = kwargs.pop('ifindex')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_description(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        description = ET.SubElement(tengigabitethernet, "description")
        description.text = kwargs.pop('description')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_shutdown(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        shutdown = ET.SubElement(tengigabitethernet, "shutdown")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_channel_group_port_int(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        channel_group = ET.SubElement(tengigabitethernet, "channel-group")
        port_int = ET.SubElement(channel_group, "port-int")
        port_int.text = kwargs.pop('port_int')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_channel_group_mode(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        channel_group = ET.SubElement(tengigabitethernet, "channel-group")
        mode = ET.SubElement(channel_group, "mode")
        mode.text = kwargs.pop('mode')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_channel_group_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        channel_group = ET.SubElement(tengigabitethernet, "channel-group")
        type = ET.SubElement(channel_group, "type")
        type.text = kwargs.pop('type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_mtu(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        mtu = ET.SubElement(tengigabitethernet, "mtu")
        mtu.text = kwargs.pop('mtu')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_basic_basic(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport_basic = ET.SubElement(tengigabitethernet, "switchport-basic")
        basic = ET.SubElement(switchport_basic, "basic")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_mode_vlan_mode(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        mode = ET.SubElement(switchport, "mode")
        vlan_mode = ET.SubElement(mode, "vlan-mode")
        vlan_mode.text = kwargs.pop('vlan_mode')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_mode_private_vlan_private_vlan_trunk_trunk_basic(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        mode = ET.SubElement(switchport, "mode")
        private_vlan = ET.SubElement(mode, "private-vlan")
        private_vlan_trunk = ET.SubElement(private_vlan, "private-vlan-trunk")
        trunk_basic = ET.SubElement(private_vlan_trunk, "trunk-basic")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_mode_private_vlan_private_vlan_trunk_trunk_promiscuous(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        mode = ET.SubElement(switchport, "mode")
        private_vlan = ET.SubElement(mode, "private-vlan")
        private_vlan_trunk = ET.SubElement(private_vlan, "private-vlan-trunk")
        trunk_promiscuous = ET.SubElement(private_vlan_trunk, "trunk-promiscuous")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_mode_private_vlan_private_vlan_trunk_trunk_host(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        mode = ET.SubElement(switchport, "mode")
        private_vlan = ET.SubElement(mode, "private-vlan")
        private_vlan_trunk = ET.SubElement(private_vlan, "private-vlan-trunk")
        trunk_host = ET.SubElement(private_vlan_trunk, "trunk-host")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_mode_private_vlan_promiscuous(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        mode = ET.SubElement(switchport, "mode")
        private_vlan = ET.SubElement(mode, "private-vlan")
        promiscuous = ET.SubElement(private_vlan, "promiscuous")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_mode_private_vlan_host(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        mode = ET.SubElement(switchport, "mode")
        private_vlan = ET.SubElement(mode, "private-vlan")
        host = ET.SubElement(private_vlan, "host")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_port_security_port_sec_max(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        port_security = ET.SubElement(switchport, "port-security")
        port_sec_max = ET.SubElement(port_security, "port-sec-max")
        port_sec_max.text = kwargs.pop('port_sec_max')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_port_security_port_sec_violation(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        port_security = ET.SubElement(switchport, "port-security")
        port_sec_violation = ET.SubElement(port_security, "port-sec-violation")
        port_sec_violation.text = kwargs.pop('port_sec_violation')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_port_security_port_secutiry_mac_address_mac_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        port_security = ET.SubElement(switchport, "port-security")
        port_secutiry_mac_address = ET.SubElement(port_security, "port-secutiry-mac-address")
        port_sec_vlan_key = ET.SubElement(port_secutiry_mac_address, "port-sec-vlan")
        port_sec_vlan_key.text = kwargs.pop('port_sec_vlan')
        mac_address = ET.SubElement(port_secutiry_mac_address, "mac-address")
        mac_address.text = kwargs.pop('mac_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_port_security_port_secutiry_mac_address_port_sec_vlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        port_security = ET.SubElement(switchport, "port-security")
        port_secutiry_mac_address = ET.SubElement(port_security, "port-secutiry-mac-address")
        mac_address_key = ET.SubElement(port_secutiry_mac_address, "mac-address")
        mac_address_key.text = kwargs.pop('mac_address')
        port_sec_vlan = ET.SubElement(port_secutiry_mac_address, "port-sec-vlan")
        port_sec_vlan.text = kwargs.pop('port_sec_vlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_port_security_sticky_sticky_flag(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        port_security = ET.SubElement(switchport, "port-security")
        sticky = ET.SubElement(port_security, "sticky")
        sticky_flag = ET.SubElement(sticky, "sticky-flag")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_port_security_sticky_port_secutiry_mac_address_mac_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        port_security = ET.SubElement(switchport, "port-security")
        sticky = ET.SubElement(port_security, "sticky")
        port_secutiry_mac_address = ET.SubElement(sticky, "port-secutiry-mac-address")
        port_sec_vlan_key = ET.SubElement(port_secutiry_mac_address, "port-sec-vlan")
        port_sec_vlan_key.text = kwargs.pop('port_sec_vlan')
        mac_address = ET.SubElement(port_secutiry_mac_address, "mac-address")
        mac_address.text = kwargs.pop('mac_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_port_security_sticky_port_secutiry_mac_address_port_sec_vlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        port_security = ET.SubElement(switchport, "port-security")
        sticky = ET.SubElement(port_security, "sticky")
        port_secutiry_mac_address = ET.SubElement(sticky, "port-secutiry-mac-address")
        mac_address_key = ET.SubElement(port_secutiry_mac_address, "mac-address")
        mac_address_key.text = kwargs.pop('mac_address')
        port_sec_vlan = ET.SubElement(port_secutiry_mac_address, "port-sec-vlan")
        port_sec_vlan.text = kwargs.pop('port_sec_vlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_port_security_allowed_ouis_oui(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        port_security = ET.SubElement(switchport, "port-security")
        allowed_ouis = ET.SubElement(port_security, "allowed-ouis")
        oui = ET.SubElement(allowed_ouis, "oui")
        oui.text = kwargs.pop('oui')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_port_security_shutdown_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        port_security = ET.SubElement(switchport, "port-security")
        shutdown_time = ET.SubElement(port_security, "shutdown-time")
        shutdown_time.text = kwargs.pop('shutdown_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_access_accessvlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        access = ET.SubElement(switchport, "access")
        accessvlan = ET.SubElement(access, "accessvlan")
        accessvlan.text = kwargs.pop('accessvlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_access_rspan_access_rspan_access_vlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        access = ET.SubElement(switchport, "access")
        rspan_access = ET.SubElement(access, "rspan-access")
        rspan_access_vlan = ET.SubElement(rspan_access, "rspan-access-vlan")
        rspan_access_vlan.text = kwargs.pop('rspan_access_vlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_access_mac_vlan_classification_access_vlan_access_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        access_mac_vlan_classification = ET.SubElement(switchport, "access-mac-vlan-classification")
        access = ET.SubElement(access_mac_vlan_classification, "access")
        vlan = ET.SubElement(access, "vlan")
        access_mac_address_key = ET.SubElement(vlan, "access-mac-address")
        access_mac_address_key.text = kwargs.pop('access_mac_address')
        access_vlan_id = ET.SubElement(vlan, "access-vlan-id")
        access_vlan_id.text = kwargs.pop('access_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_access_mac_vlan_classification_access_vlan_access_mac_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        access_mac_vlan_classification = ET.SubElement(switchport, "access-mac-vlan-classification")
        access = ET.SubElement(access_mac_vlan_classification, "access")
        vlan = ET.SubElement(access, "vlan")
        access_vlan_id_key = ET.SubElement(vlan, "access-vlan-id")
        access_vlan_id_key.text = kwargs.pop('access_vlan_id')
        access_mac_address = ET.SubElement(vlan, "access-mac-address")
        access_mac_address.text = kwargs.pop('access_mac_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_trunk_private_vlan_classification_private_vlan_trunk_allowed_vlan_add_trunk_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        trunk_private_vlan_classification = ET.SubElement(switchport, "trunk-private-vlan-classification")
        private_vlan = ET.SubElement(trunk_private_vlan_classification, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        add = ET.SubElement(vlan, "add")
        trunk_ctag_id_key = ET.SubElement(add, "trunk-ctag-id")
        trunk_ctag_id_key.text = kwargs.pop('trunk_ctag_id')
        trunk_vlan_id = ET.SubElement(add, "trunk-vlan-id")
        trunk_vlan_id.text = kwargs.pop('trunk_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_trunk_private_vlan_classification_private_vlan_trunk_allowed_vlan_add_trunk_ctag_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        trunk_private_vlan_classification = ET.SubElement(switchport, "trunk-private-vlan-classification")
        private_vlan = ET.SubElement(trunk_private_vlan_classification, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        add = ET.SubElement(vlan, "add")
        trunk_vlan_id_key = ET.SubElement(add, "trunk-vlan-id")
        trunk_vlan_id_key.text = kwargs.pop('trunk_vlan_id')
        trunk_ctag_id = ET.SubElement(add, "trunk-ctag-id")
        trunk_ctag_id.text = kwargs.pop('trunk_ctag_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_trunk_private_vlan_classification_private_vlan_trunk_allowed_vlan_remove_trunk_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        trunk_private_vlan_classification = ET.SubElement(switchport, "trunk-private-vlan-classification")
        private_vlan = ET.SubElement(trunk_private_vlan_classification, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        remove = ET.SubElement(vlan, "remove")
        trunk_ctag_id_key = ET.SubElement(remove, "trunk-ctag-id")
        trunk_ctag_id_key.text = kwargs.pop('trunk_ctag_id')
        trunk_vlan_id = ET.SubElement(remove, "trunk-vlan-id")
        trunk_vlan_id.text = kwargs.pop('trunk_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_trunk_private_vlan_classification_private_vlan_trunk_allowed_vlan_remove_trunk_ctag_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        trunk_private_vlan_classification = ET.SubElement(switchport, "trunk-private-vlan-classification")
        private_vlan = ET.SubElement(trunk_private_vlan_classification, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        remove = ET.SubElement(vlan, "remove")
        trunk_vlan_id_key = ET.SubElement(remove, "trunk-vlan-id")
        trunk_vlan_id_key.text = kwargs.pop('trunk_vlan_id')
        trunk_ctag_id = ET.SubElement(remove, "trunk-ctag-id")
        trunk_ctag_id.text = kwargs.pop('trunk_ctag_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_access_mac_group_vlan_classification_access_vlan_access_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        access_mac_group_vlan_classification = ET.SubElement(switchport, "access-mac-group-vlan-classification")
        access = ET.SubElement(access_mac_group_vlan_classification, "access")
        vlan = ET.SubElement(access, "vlan")
        access_mac_group_key = ET.SubElement(vlan, "access-mac-group")
        access_mac_group_key.text = kwargs.pop('access_mac_group')
        access_vlan_id = ET.SubElement(vlan, "access-vlan-id")
        access_vlan_id.text = kwargs.pop('access_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_access_mac_group_vlan_classification_access_vlan_access_mac_group(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        access_mac_group_vlan_classification = ET.SubElement(switchport, "access-mac-group-vlan-classification")
        access = ET.SubElement(access_mac_group_vlan_classification, "access")
        vlan = ET.SubElement(access, "vlan")
        access_vlan_id_key = ET.SubElement(vlan, "access-vlan-id")
        access_vlan_id_key.text = kwargs.pop('access_vlan_id')
        access_mac_group = ET.SubElement(vlan, "access-mac-group")
        access_mac_group.text = kwargs.pop('access_mac_group')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_trunk_allowed_vlan_all(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        all = ET.SubElement(vlan, "all")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_trunk_allowed_vlan_none(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        none = ET.SubElement(vlan, "none")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_trunk_allowed_vlan_add(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        add = ET.SubElement(vlan, "add")
        add.text = kwargs.pop('add')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_trunk_allowed_vlan_excpt(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        excpt = ET.SubElement(vlan, "except")
        excpt.text = kwargs.pop('excpt')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_trunk_allowed_vlan_remove(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        remove = ET.SubElement(vlan, "remove")
        remove.text = kwargs.pop('remove')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_trunk_allowed_vlanoper_vlan_add(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlanoper = ET.SubElement(allowed, "vlanoper")
        vlan = ET.SubElement(vlanoper, "vlan")
        add = ET.SubElement(vlan, "add")
        add.text = kwargs.pop('add')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_trunk_allowed_vlanoper_vlan_remove(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlanoper = ET.SubElement(allowed, "vlanoper")
        vlan = ET.SubElement(vlanoper, "vlan")
        remove = ET.SubElement(vlan, "remove")
        remove.text = kwargs.pop('remove')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_trunk_allowed_rspan_vlan_add_rspan_trunk_vlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        rspan_vlan = ET.SubElement(allowed, "rspan-vlan")
        add_rspan_trunk_vlan = ET.SubElement(rspan_vlan, "add-rspan-trunk-vlan")
        add_rspan_trunk_vlan.text = kwargs.pop('add_rspan_trunk_vlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_trunk_allowed_rspan_vlan_remove_rspan_trunk_vlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        rspan_vlan = ET.SubElement(allowed, "rspan-vlan")
        remove_rspan_trunk_vlan = ET.SubElement(rspan_vlan, "remove-rspan-trunk-vlan")
        remove_rspan_trunk_vlan.text = kwargs.pop('remove_rspan_trunk_vlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_trunk_allowed_trunk_rspan_vlan_classification_rspan_vlan_add_trunk_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        trunk_rspan_vlan_classification = ET.SubElement(allowed, "trunk-rspan-vlan-classification")
        rspan_vlan = ET.SubElement(trunk_rspan_vlan_classification, "rspan-vlan")
        add = ET.SubElement(rspan_vlan, "add")
        trunk_ctag_id_key = ET.SubElement(add, "trunk-ctag-id")
        trunk_ctag_id_key.text = kwargs.pop('trunk_ctag_id')
        trunk_vlan_id = ET.SubElement(add, "trunk-vlan-id")
        trunk_vlan_id.text = kwargs.pop('trunk_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_trunk_allowed_trunk_rspan_vlan_classification_rspan_vlan_add_trunk_ctag_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        trunk_rspan_vlan_classification = ET.SubElement(allowed, "trunk-rspan-vlan-classification")
        rspan_vlan = ET.SubElement(trunk_rspan_vlan_classification, "rspan-vlan")
        add = ET.SubElement(rspan_vlan, "add")
        trunk_vlan_id_key = ET.SubElement(add, "trunk-vlan-id")
        trunk_vlan_id_key.text = kwargs.pop('trunk_vlan_id')
        trunk_ctag_id = ET.SubElement(add, "trunk-ctag-id")
        trunk_ctag_id.text = kwargs.pop('trunk_ctag_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_trunk_allowed_trunk_rspan_vlan_classification_rspan_vlan_remove_trunk_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        trunk_rspan_vlan_classification = ET.SubElement(allowed, "trunk-rspan-vlan-classification")
        rspan_vlan = ET.SubElement(trunk_rspan_vlan_classification, "rspan-vlan")
        remove = ET.SubElement(rspan_vlan, "remove")
        trunk_ctag_id_key = ET.SubElement(remove, "trunk-ctag-id")
        trunk_ctag_id_key.text = kwargs.pop('trunk_ctag_id')
        trunk_vlan_id = ET.SubElement(remove, "trunk-vlan-id")
        trunk_vlan_id.text = kwargs.pop('trunk_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_trunk_allowed_trunk_rspan_vlan_classification_rspan_vlan_remove_trunk_ctag_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        trunk_rspan_vlan_classification = ET.SubElement(allowed, "trunk-rspan-vlan-classification")
        rspan_vlan = ET.SubElement(trunk_rspan_vlan_classification, "rspan-vlan")
        remove = ET.SubElement(rspan_vlan, "remove")
        trunk_vlan_id_key = ET.SubElement(remove, "trunk-vlan-id")
        trunk_vlan_id_key.text = kwargs.pop('trunk_vlan_id')
        trunk_ctag_id = ET.SubElement(remove, "trunk-ctag-id")
        trunk_ctag_id.text = kwargs.pop('trunk_ctag_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_trunk_trunk_vlan_classification_allowed_vlan_add_trunk_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        trunk_vlan_classification = ET.SubElement(trunk, "trunk-vlan-classification")
        allowed = ET.SubElement(trunk_vlan_classification, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        add = ET.SubElement(vlan, "add")
        trunk_vlan_id = ET.SubElement(add, "trunk-vlan-id")
        trunk_vlan_id.text = kwargs.pop('trunk_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_trunk_trunk_vlan_classification_allowed_vlan_add_trunk_ctag_range(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        trunk_vlan_classification = ET.SubElement(trunk, "trunk-vlan-classification")
        allowed = ET.SubElement(trunk_vlan_classification, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        add = ET.SubElement(vlan, "add")
        trunk_vlan_id_key = ET.SubElement(add, "trunk-vlan-id")
        trunk_vlan_id_key.text = kwargs.pop('trunk_vlan_id')
        trunk_ctag_range = ET.SubElement(add, "trunk-ctag-range")
        trunk_ctag_range.text = kwargs.pop('trunk_ctag_range')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_trunk_trunk_vlan_classification_allowed_vlan_remove_trunk_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        trunk_vlan_classification = ET.SubElement(trunk, "trunk-vlan-classification")
        allowed = ET.SubElement(trunk_vlan_classification, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        remove = ET.SubElement(vlan, "remove")
        trunk_vlan_id = ET.SubElement(remove, "trunk-vlan-id")
        trunk_vlan_id.text = kwargs.pop('trunk_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_trunk_trunk_vlan_classification_allowed_vlan_remove_trunk_ctag_range(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        trunk_vlan_classification = ET.SubElement(trunk, "trunk-vlan-classification")
        allowed = ET.SubElement(trunk_vlan_classification, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        remove = ET.SubElement(vlan, "remove")
        trunk_vlan_id_key = ET.SubElement(remove, "trunk-vlan-id")
        trunk_vlan_id_key.text = kwargs.pop('trunk_vlan_id')
        trunk_ctag_range = ET.SubElement(remove, "trunk-ctag-range")
        trunk_ctag_range.text = kwargs.pop('trunk_ctag_range')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_trunk_default_vlan_config_default_transparent_vlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        default_vlan_config = ET.SubElement(trunk, "default-vlan-config")
        default_transparent_vlan = ET.SubElement(default_vlan_config, "default-transparent-vlan")
        default_transparent_vlan.text = kwargs.pop('default_transparent_vlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_trunk_tag_native_vlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        tag = ET.SubElement(trunk, "tag")
        native_vlan = ET.SubElement(tag, "native-vlan")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_trunk_native_vlan_classification_native_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        native_vlan_classification = ET.SubElement(trunk, "native-vlan-classification")
        native_vlan_id = ET.SubElement(native_vlan_classification, "native-vlan-id")
        native_vlan_id.text = kwargs.pop('native_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_trunk_native_vlan_classification_native_vlan_ctag_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        native_vlan_classification = ET.SubElement(trunk, "native-vlan-classification")
        native_vlan_ctag_id = ET.SubElement(native_vlan_classification, "native-vlan-ctag-id")
        native_vlan_ctag_id.text = kwargs.pop('native_vlan_ctag_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_trunk_native_vlan_xtagged_config_native_vlan_id_xtagged(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        native_vlan_xtagged_config = ET.SubElement(trunk, "native-vlan-xtagged-config")
        native_vlan_id_xtagged = ET.SubElement(native_vlan_xtagged_config, "native-vlan-id-xtagged")
        native_vlan_id_xtagged.text = kwargs.pop('native_vlan_id_xtagged')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_trunk_native_vlan_xtagged_config_native_vlan_ctag_id_xtagged(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        native_vlan_xtagged_config = ET.SubElement(trunk, "native-vlan-xtagged-config")
        native_vlan_ctag_id_xtagged = ET.SubElement(native_vlan_xtagged_config, "native-vlan-ctag-id-xtagged")
        native_vlan_ctag_id_xtagged.text = kwargs.pop('native_vlan_ctag_id_xtagged')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_trunk_native_vlan_xtagged_config_native_vlan_egress_type_xtagged(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        native_vlan_xtagged_config = ET.SubElement(trunk, "native-vlan-xtagged-config")
        native_vlan_egress_type_xtagged = ET.SubElement(native_vlan_xtagged_config, "native-vlan-egress-type-xtagged")
        native_vlan_egress_type_xtagged.text = kwargs.pop('native_vlan_egress_type_xtagged')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_trunk_native_vlan_untagged_config_native_vlan_id_untagged(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        native_vlan_untagged_config = ET.SubElement(trunk, "native-vlan-untagged-config")
        native_vlan_id_untagged = ET.SubElement(native_vlan_untagged_config, "native-vlan-id-untagged")
        native_vlan_id_untagged.text = kwargs.pop('native_vlan_id_untagged')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_private_vlan_trunk_pvlan_tag_pvlan_tag_native_vlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        pvlan_tag = ET.SubElement(trunk, "pvlan-tag")
        pvlan_tag_native_vlan = ET.SubElement(pvlan_tag, "pvlan-tag-native-vlan")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_private_vlan_trunk_native_pvlanNativevlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        native = ET.SubElement(trunk, "native")
        pvlanNativevlan = ET.SubElement(native, "pvlanNativevlan")
        pvlanNativevlan.text = kwargs.pop('pvlanNativevlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_private_vlan_trunk_native_pvlan_native_vlan_ctag_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        native = ET.SubElement(trunk, "native")
        pvlan_native_vlan_ctag_id = ET.SubElement(native, "pvlan-native-vlan-ctag-id")
        pvlan_native_vlan_ctag_id.text = kwargs.pop('pvlan_native_vlan_ctag_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_private_vlan_trunk_allowed_vlan_pvlan_all(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        pvlan_all = ET.SubElement(vlan, "pvlan_all")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_private_vlan_trunk_allowed_vlan_pvlan_none(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        pvlan_none = ET.SubElement(vlan, "pvlan_none")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_private_vlan_trunk_allowed_vlan_pvlan_add(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        pvlan_add = ET.SubElement(vlan, "pvlan_add")
        pvlan_add.text = kwargs.pop('pvlan_add')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_private_vlan_trunk_allowed_vlan_pvlan_except(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        pvlan_except = ET.SubElement(vlan, "pvlan_except")
        pvlan_except.text = kwargs.pop('pvlan_except')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_private_vlan_trunk_allowed_vlan_pvlan_remove(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        pvlan_remove = ET.SubElement(vlan, "pvlan_remove")
        pvlan_remove.text = kwargs.pop('pvlan_remove')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_private_vlan_host_association_host_pri_pvlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        host_association = ET.SubElement(private_vlan, "host-association")
        host_pri_pvlan = ET.SubElement(host_association, "host-pri-pvlan")
        host_pri_pvlan.text = kwargs.pop('host_pri_pvlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_private_vlan_host_association_host_sec_pvlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        host_association = ET.SubElement(private_vlan, "host-association")
        host_sec_pvlan = ET.SubElement(host_association, "host-sec-pvlan")
        host_sec_pvlan.text = kwargs.pop('host_sec_pvlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_private_vlan_association_trunk_trunk_pri_pvlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        association = ET.SubElement(private_vlan, "association")
        trunk = ET.SubElement(association, "trunk")
        trunk_sec_pvlan_key = ET.SubElement(trunk, "trunk-sec-pvlan")
        trunk_sec_pvlan_key.text = kwargs.pop('trunk_sec_pvlan')
        trunk_pri_pvlan = ET.SubElement(trunk, "trunk-pri-pvlan")
        trunk_pri_pvlan.text = kwargs.pop('trunk_pri_pvlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_private_vlan_association_trunk_trunk_sec_pvlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        association = ET.SubElement(private_vlan, "association")
        trunk = ET.SubElement(association, "trunk")
        trunk_pri_pvlan_key = ET.SubElement(trunk, "trunk-pri-pvlan")
        trunk_pri_pvlan_key.text = kwargs.pop('trunk_pri_pvlan')
        trunk_sec_pvlan = ET.SubElement(trunk, "trunk-sec-pvlan")
        trunk_sec_pvlan.text = kwargs.pop('trunk_sec_pvlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_private_vlan_mapping_promis_pri_pvlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        mapping = ET.SubElement(private_vlan, "mapping")
        promis_pri_pvlan = ET.SubElement(mapping, "promis-pri-pvlan")
        promis_pri_pvlan.text = kwargs.pop('promis_pri_pvlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_private_vlan_mapping_oper(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        mapping = ET.SubElement(private_vlan, "mapping")
        promis_pri_pvlan_key = ET.SubElement(mapping, "promis-pri-pvlan")
        promis_pri_pvlan_key.text = kwargs.pop('promis_pri_pvlan')
        oper = ET.SubElement(mapping, "oper")
        oper.text = kwargs.pop('oper')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_private_vlan_mapping_promis_sec_pvlan_range(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        mapping = ET.SubElement(private_vlan, "mapping")
        promis_pri_pvlan_key = ET.SubElement(mapping, "promis-pri-pvlan")
        promis_pri_pvlan_key.text = kwargs.pop('promis_pri_pvlan')
        promis_sec_pvlan_range = ET.SubElement(mapping, "promis-sec-pvlan-range")
        promis_sec_pvlan_range.text = kwargs.pop('promis_sec_pvlan_range')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_access_mac_rspan_vlan_classification_access_vlan_access_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        access_mac_rspan_vlan_classification = ET.SubElement(switchport, "access-mac-rspan-vlan-classification")
        access = ET.SubElement(access_mac_rspan_vlan_classification, "access")
        vlan = ET.SubElement(access, "vlan")
        access_mac_address_key = ET.SubElement(vlan, "access-mac-address")
        access_mac_address_key.text = kwargs.pop('access_mac_address')
        access_vlan_id = ET.SubElement(vlan, "access-vlan-id")
        access_vlan_id.text = kwargs.pop('access_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_access_mac_rspan_vlan_classification_access_vlan_access_mac_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        access_mac_rspan_vlan_classification = ET.SubElement(switchport, "access-mac-rspan-vlan-classification")
        access = ET.SubElement(access_mac_rspan_vlan_classification, "access")
        vlan = ET.SubElement(access, "vlan")
        access_vlan_id_key = ET.SubElement(vlan, "access-vlan-id")
        access_vlan_id_key.text = kwargs.pop('access_vlan_id')
        access_mac_address = ET.SubElement(vlan, "access-mac-address")
        access_mac_address.text = kwargs.pop('access_mac_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_access_mac_group_rspan_vlan_classification_access_vlan_access_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        access_mac_group_rspan_vlan_classification = ET.SubElement(switchport, "access-mac-group-rspan-vlan-classification")
        access = ET.SubElement(access_mac_group_rspan_vlan_classification, "access")
        vlan = ET.SubElement(access, "vlan")
        access_mac_group_key = ET.SubElement(vlan, "access-mac-group")
        access_mac_group_key.text = kwargs.pop('access_mac_group')
        access_vlan_id = ET.SubElement(vlan, "access-vlan-id")
        access_vlan_id.text = kwargs.pop('access_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_access_mac_group_rspan_vlan_classification_access_vlan_access_mac_group(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        access_mac_group_rspan_vlan_classification = ET.SubElement(switchport, "access-mac-group-rspan-vlan-classification")
        access = ET.SubElement(access_mac_group_rspan_vlan_classification, "access")
        vlan = ET.SubElement(access, "vlan")
        access_vlan_id_key = ET.SubElement(vlan, "access-vlan-id")
        access_vlan_id_key.text = kwargs.pop('access_vlan_id')
        access_mac_group = ET.SubElement(vlan, "access-mac-group")
        access_mac_group.text = kwargs.pop('access_mac_group')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_mac_learning_mac_learn_disable_vlan_mac_learning_vlan_add(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        mac_learning = ET.SubElement(tengigabitethernet, "mac-learning")
        mac_learn_disable = ET.SubElement(mac_learning, "mac-learn-disable")
        vlan = ET.SubElement(mac_learn_disable, "vlan")
        mac_learning_vlan_add = ET.SubElement(vlan, "mac-learning-vlan-add")
        mac_learning_vlan_add.text = kwargs.pop('mac_learning_vlan_add')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_mac_learning_mac_learn_disable_vlan_mac_learning_vlan_remove(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        mac_learning = ET.SubElement(tengigabitethernet, "mac-learning")
        mac_learn_disable = ET.SubElement(mac_learning, "mac-learn-disable")
        vlan = ET.SubElement(mac_learn_disable, "vlan")
        mac_learning_vlan_remove = ET.SubElement(vlan, "mac-learning-vlan-remove")
        mac_learning_vlan_remove.text = kwargs.pop('mac_learning_vlan_remove')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_ip_config_mtu(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        ip_config = ET.SubElement(ip, "ip-config", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        mtu = ET.SubElement(ip_config, "mtu")
        mtu.text = kwargs.pop('mtu')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_ip_config_directed_broadcast(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        ip_config = ET.SubElement(ip, "ip-config", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        directed_broadcast = ET.SubElement(ip_config, "directed-broadcast")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_ip_config_proxy_arp(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        ip_config = ET.SubElement(ip, "ip-config", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        proxy_arp = ET.SubElement(ip_config, "proxy-arp")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_ip_config_arp_aging_timeout(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        ip_config = ET.SubElement(ip, "ip-config", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        arp_aging_timeout = ET.SubElement(ip_config, "arp-aging-timeout")
        arp_aging_timeout.text = kwargs.pop('arp_aging_timeout')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_ip_config_address_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        ip_config = ET.SubElement(ip, "ip-config", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        address = ET.SubElement(ip_config, "address")
        address = ET.SubElement(address, "address")
        address.text = kwargs.pop('address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_ip_config_address_secondary(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        ip_config = ET.SubElement(ip, "ip-config", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        address = ET.SubElement(ip_config, "address")
        address_key = ET.SubElement(address, "address")
        address_key.text = kwargs.pop('address')
        secondary = ET.SubElement(address, "secondary")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_ip_config_address_ospf_passive(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        ip_config = ET.SubElement(ip, "ip-config", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        address = ET.SubElement(ip_config, "address")
        address_key = ET.SubElement(address, "address")
        address_key.text = kwargs.pop('address')
        ospf_passive = ET.SubElement(address, "ospf-passive")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_ip_config_address_ospf_ignore(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        ip_config = ET.SubElement(ip, "ip-config", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        address = ET.SubElement(ip_config, "address")
        address_key = ET.SubElement(address, "address")
        address_key.text = kwargs.pop('address')
        ospf_ignore = ET.SubElement(address, "ospf-ignore")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_arp_node_config_arp_inspection_trust(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        arp_node_config = ET.SubElement(ip, "arp-node-config", xmlns="urn:brocade.com:mgmt:brocade-dai")
        arp = ET.SubElement(arp_node_config, "arp")
        inspection = ET.SubElement(arp, "inspection")
        trust = ET.SubElement(inspection, "trust")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_interface_te_dhcp_conf_dhcp_relay_servers_relay_ip_addr(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        interface_te_dhcp_conf = ET.SubElement(ip, "interface-te-dhcp-conf", xmlns="urn:brocade.com:mgmt:brocade-dhcp")
        dhcp = ET.SubElement(interface_te_dhcp_conf, "dhcp")
        relay = ET.SubElement(dhcp, "relay")
        servers = ET.SubElement(relay, "servers")
        server_vrf_name_key = ET.SubElement(servers, "server-vrf-name")
        server_vrf_name_key.text = kwargs.pop('server_vrf_name')
        relay_ip_addr = ET.SubElement(servers, "relay-ip-addr")
        relay_ip_addr.text = kwargs.pop('relay_ip_addr')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_interface_te_dhcp_conf_dhcp_relay_servers_server_vrf_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        interface_te_dhcp_conf = ET.SubElement(ip, "interface-te-dhcp-conf", xmlns="urn:brocade.com:mgmt:brocade-dhcp")
        dhcp = ET.SubElement(interface_te_dhcp_conf, "dhcp")
        relay = ET.SubElement(dhcp, "relay")
        servers = ET.SubElement(relay, "servers")
        relay_ip_addr_key = ET.SubElement(servers, "relay-ip-addr")
        relay_ip_addr_key.text = kwargs.pop('relay_ip_addr')
        server_vrf_name = ET.SubElement(servers, "server-vrf-name")
        server_vrf_name.text = kwargs.pop('server_vrf_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_interface_te_dhcp_conf_dhcp_relay_gateway(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        interface_te_dhcp_conf = ET.SubElement(ip, "interface-te-dhcp-conf", xmlns="urn:brocade.com:mgmt:brocade-dhcp")
        dhcp = ET.SubElement(interface_te_dhcp_conf, "dhcp")
        relay = ET.SubElement(dhcp, "relay")
        gateway = ET.SubElement(relay, "gateway")
        gateway.text = kwargs.pop('gateway')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_icmp_echo_reply(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        icmp = ET.SubElement(ip, "icmp", xmlns="urn:brocade.com:mgmt:brocade-icmp")
        echo_reply = ET.SubElement(icmp, "echo-reply")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_icmp_rate_limiting(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        icmp = ET.SubElement(ip, "icmp", xmlns="urn:brocade.com:mgmt:brocade-icmp")
        rate_limiting = ET.SubElement(icmp, "rate-limiting")
        rate_limiting.text = kwargs.pop('rate_limiting')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_icmp_unreachable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        icmp = ET.SubElement(ip, "icmp", xmlns="urn:brocade.com:mgmt:brocade-icmp")
        unreachable = ET.SubElement(icmp, "unreachable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_icmp_redirect(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        icmp = ET.SubElement(ip, "icmp", xmlns="urn:brocade.com:mgmt:brocade-icmp")
        redirect = ET.SubElement(icmp, "redirect")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_icmp_address_mask(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        icmp = ET.SubElement(ip, "icmp", xmlns="urn:brocade.com:mgmt:brocade-icmp")
        address_mask = ET.SubElement(icmp, "address-mask")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_igmp_phy_intf_cfg_igmp_last_member_query_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        igmp_phy_intf_cfg = ET.SubElement(ip, "igmp-phy-intf-cfg", xmlns="urn:brocade.com:mgmt:brocade-igmp")
        igmp = ET.SubElement(igmp_phy_intf_cfg, "igmp")
        last_member_query_interval = ET.SubElement(igmp, "last-member-query-interval")
        last_member_query_interval.text = kwargs.pop('last_member_query_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_igmp_phy_intf_cfg_igmp_query_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        igmp_phy_intf_cfg = ET.SubElement(ip, "igmp-phy-intf-cfg", xmlns="urn:brocade.com:mgmt:brocade-igmp")
        igmp = ET.SubElement(igmp_phy_intf_cfg, "igmp")
        query_interval = ET.SubElement(igmp, "query-interval")
        query_interval.text = kwargs.pop('query_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_igmp_phy_intf_cfg_igmp_query_max_response_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        igmp_phy_intf_cfg = ET.SubElement(ip, "igmp-phy-intf-cfg", xmlns="urn:brocade.com:mgmt:brocade-igmp")
        igmp = ET.SubElement(igmp_phy_intf_cfg, "igmp")
        query_max_response_time = ET.SubElement(igmp, "query-max-response-time")
        query_max_response_time.text = kwargs.pop('query_max_response_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_igmp_phy_intf_cfg_igmp_immediate_leave(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        igmp_phy_intf_cfg = ET.SubElement(ip, "igmp-phy-intf-cfg", xmlns="urn:brocade.com:mgmt:brocade-igmp")
        igmp = ET.SubElement(igmp_phy_intf_cfg, "igmp")
        immediate_leave = ET.SubElement(igmp, "immediate-leave")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_igmp_phy_intf_cfg_igmp_static_group_sg_addr(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        igmp_phy_intf_cfg = ET.SubElement(ip, "igmp-phy-intf-cfg", xmlns="urn:brocade.com:mgmt:brocade-igmp")
        igmp = ET.SubElement(igmp_phy_intf_cfg, "igmp")
        static_group = ET.SubElement(igmp, "static-group")
        sg_addr = ET.SubElement(static_group, "sg-addr")
        sg_addr.text = kwargs.pop('sg_addr')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_interface_te_ospf_conf_ospf1_area(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        interface_te_ospf_conf = ET.SubElement(ip, "interface-te-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_te_ospf_conf, "ospf1")
        area = ET.SubElement(ospf1, "area")
        area.text = kwargs.pop('area')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_interface_te_ospf_conf_ospf1_auth_change_wait_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        interface_te_ospf_conf = ET.SubElement(ip, "interface-te-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_te_ospf_conf, "ospf1")
        auth_change_wait_time = ET.SubElement(ospf1, "auth-change-wait-time")
        auth_change_wait_time.text = kwargs.pop('auth_change_wait_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_interface_te_ospf_conf_ospf1_authentication_key_no_encrypt_auth_key_table_no_encrypt_auth_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        interface_te_ospf_conf = ET.SubElement(ip, "interface-te-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_te_ospf_conf, "ospf1")
        authentication_key = ET.SubElement(ospf1, "authentication-key")
        no_encrypt_auth_key_table = ET.SubElement(authentication_key, "no-encrypt-auth-key-table")
        no_encrypt_auth_key = ET.SubElement(no_encrypt_auth_key_table, "no-encrypt-auth-key")
        no_encrypt_auth_key.text = kwargs.pop('no_encrypt_auth_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_interface_te_ospf_conf_ospf1_authentication_key_auth_key_table_encrypttype(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        interface_te_ospf_conf = ET.SubElement(ip, "interface-te-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_te_ospf_conf, "ospf1")
        authentication_key = ET.SubElement(ospf1, "authentication-key")
        auth_key_table = ET.SubElement(authentication_key, "auth-key-table")
        encrypttype = ET.SubElement(auth_key_table, "encrypttype")
        encrypttype.text = kwargs.pop('encrypttype')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_interface_te_ospf_conf_ospf1_authentication_key_auth_key_table_auth_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        interface_te_ospf_conf = ET.SubElement(ip, "interface-te-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_te_ospf_conf, "ospf1")
        authentication_key = ET.SubElement(ospf1, "authentication-key")
        auth_key_table = ET.SubElement(authentication_key, "auth-key-table")
        auth_key = ET.SubElement(auth_key_table, "auth-key")
        auth_key.text = kwargs.pop('auth_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_interface_te_ospf_conf_ospf1_dead_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        interface_te_ospf_conf = ET.SubElement(ip, "interface-te-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_te_ospf_conf, "ospf1")
        dead_interval = ET.SubElement(ospf1, "dead-interval")
        dead_interval.text = kwargs.pop('dead_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_interface_te_ospf_conf_ospf1_hello_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        interface_te_ospf_conf = ET.SubElement(ip, "interface-te-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_te_ospf_conf, "ospf1")
        hello_interval = ET.SubElement(ospf1, "hello-interval")
        hello_interval.text = kwargs.pop('hello_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_interface_te_ospf_conf_ospf1_retransmit_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        interface_te_ospf_conf = ET.SubElement(ip, "interface-te-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_te_ospf_conf, "ospf1")
        retransmit_interval = ET.SubElement(ospf1, "retransmit-interval")
        retransmit_interval.text = kwargs.pop('retransmit_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_interface_te_ospf_conf_ospf1_transmit_delay(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        interface_te_ospf_conf = ET.SubElement(ip, "interface-te-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_te_ospf_conf, "ospf1")
        transmit_delay = ET.SubElement(ospf1, "transmit-delay")
        transmit_delay.text = kwargs.pop('transmit_delay')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_interface_te_ospf_conf_ospf1_md5_authentication_key_activation_wait_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        interface_te_ospf_conf = ET.SubElement(ip, "interface-te-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_te_ospf_conf, "ospf1")
        md5_authentication = ET.SubElement(ospf1, "md5-authentication")
        key_activation_wait_time = ET.SubElement(md5_authentication, "key-activation-wait-time")
        key_activation_wait_time.text = kwargs.pop('key_activation_wait_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_interface_te_ospf_conf_ospf1_md5_authentication_no_encrypt_key_table_no_encrypt_key_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        interface_te_ospf_conf = ET.SubElement(ip, "interface-te-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_te_ospf_conf, "ospf1")
        md5_authentication = ET.SubElement(ospf1, "md5-authentication")
        no_encrypt_key_table = ET.SubElement(md5_authentication, "no-encrypt-key-table")
        no_encrypt_key_id = ET.SubElement(no_encrypt_key_table, "no-encrypt-key-id")
        no_encrypt_key_id.text = kwargs.pop('no_encrypt_key_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_interface_te_ospf_conf_ospf1_md5_authentication_no_encrypt_key_table_no_encrypt_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        interface_te_ospf_conf = ET.SubElement(ip, "interface-te-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_te_ospf_conf, "ospf1")
        md5_authentication = ET.SubElement(ospf1, "md5-authentication")
        no_encrypt_key_table = ET.SubElement(md5_authentication, "no-encrypt-key-table")
        no_encrypt_key = ET.SubElement(no_encrypt_key_table, "no-encrypt-key")
        no_encrypt_key.text = kwargs.pop('no_encrypt_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_interface_te_ospf_conf_ospf1_md5_authentication_key_table_key_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        interface_te_ospf_conf = ET.SubElement(ip, "interface-te-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_te_ospf_conf, "ospf1")
        md5_authentication = ET.SubElement(ospf1, "md5-authentication")
        key_table = ET.SubElement(md5_authentication, "key-table")
        key_id = ET.SubElement(key_table, "key-id")
        key_id.text = kwargs.pop('key_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_interface_te_ospf_conf_ospf1_md5_authentication_key_table_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        interface_te_ospf_conf = ET.SubElement(ip, "interface-te-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_te_ospf_conf, "ospf1")
        md5_authentication = ET.SubElement(ospf1, "md5-authentication")
        key_table = ET.SubElement(md5_authentication, "key-table")
        key = ET.SubElement(key_table, "key")
        key.text = kwargs.pop('key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_interface_te_ospf_conf_ospf1_md5_authentication_key_table_md5_authentication_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        interface_te_ospf_conf = ET.SubElement(ip, "interface-te-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_te_ospf_conf, "ospf1")
        md5_authentication = ET.SubElement(ospf1, "md5-authentication")
        key_table = ET.SubElement(md5_authentication, "key-table")
        md5_authentication_key = ET.SubElement(key_table, "md5-authentication-key")
        md5_authentication_key.text = kwargs.pop('md5_authentication_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_interface_te_ospf_conf_ospf1_cost(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        interface_te_ospf_conf = ET.SubElement(ip, "interface-te-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_te_ospf_conf, "ospf1")
        cost = ET.SubElement(ospf1, "cost")
        cost.text = kwargs.pop('cost')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_interface_te_ospf_conf_ospf1_database_filter_all_out(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        interface_te_ospf_conf = ET.SubElement(ip, "interface-te-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_te_ospf_conf, "ospf1")
        database_filter = ET.SubElement(ospf1, "database-filter")
        all_out = ET.SubElement(database_filter, "all-out")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_interface_te_ospf_conf_ospf1_database_filter_all_external(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        interface_te_ospf_conf = ET.SubElement(ip, "interface-te-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_te_ospf_conf, "ospf1")
        database_filter = ET.SubElement(ospf1, "database-filter")
        all_external = ET.SubElement(database_filter, "all-external")
        all_external.text = kwargs.pop('all_external')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_interface_te_ospf_conf_ospf1_database_filter_all_summary_external(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        interface_te_ospf_conf = ET.SubElement(ip, "interface-te-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_te_ospf_conf, "ospf1")
        database_filter = ET.SubElement(ospf1, "database-filter")
        all_summary_external = ET.SubElement(database_filter, "all-summary-external")
        all_summary_external.text = kwargs.pop('all_summary_external')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_interface_te_ospf_conf_ospf1_mtu_ignore(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        interface_te_ospf_conf = ET.SubElement(ip, "interface-te-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_te_ospf_conf, "ospf1")
        mtu_ignore = ET.SubElement(ospf1, "mtu-ignore")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_interface_te_ospf_conf_ospf1_network(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        interface_te_ospf_conf = ET.SubElement(ip, "interface-te-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_te_ospf_conf, "ospf1")
        network = ET.SubElement(ospf1, "network")
        network.text = kwargs.pop('network')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_interface_te_ospf_conf_ospf1_active(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        interface_te_ospf_conf = ET.SubElement(ip, "interface-te-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_te_ospf_conf, "ospf1")
        active = ET.SubElement(ospf1, "active")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_interface_te_ospf_conf_ospf1_passive(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        interface_te_ospf_conf = ET.SubElement(ip, "interface-te-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_te_ospf_conf, "ospf1")
        passive = ET.SubElement(ospf1, "passive")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_interface_te_ospf_conf_ospf1_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        interface_te_ospf_conf = ET.SubElement(ip, "interface-te-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_te_ospf_conf, "ospf1")
        priority = ET.SubElement(ospf1, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_interface_te_ospf_conf_ospf1_bfd_intf_bfd_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        interface_te_ospf_conf = ET.SubElement(ip, "interface-te-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_te_ospf_conf, "ospf1")
        bfd = ET.SubElement(ospf1, "bfd")
        intf_bfd_enable = ET.SubElement(bfd, "intf-bfd-enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_pim_intf_phy_cont_pim_int_cmd_pim_sparse(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        pim_intf_phy_cont = ET.SubElement(ip, "pim-intf-phy-cont", xmlns="urn:brocade.com:mgmt:brocade-pim")
        pim_int_cmd = ET.SubElement(pim_intf_phy_cont, "pim-int-cmd")
        pim_sparse = ET.SubElement(pim_int_cmd, "pim-sparse")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_pim_intf_phy_cont_pim_int_cmd_pim_neighbor_filter(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        pim_intf_phy_cont = ET.SubElement(ip, "pim-intf-phy-cont", xmlns="urn:brocade.com:mgmt:brocade-pim")
        pim_int_cmd = ET.SubElement(pim_intf_phy_cont, "pim-int-cmd")
        pim = ET.SubElement(pim_int_cmd, "pim")
        neighbor_filter = ET.SubElement(pim, "neighbor-filter")
        neighbor_filter.text = kwargs.pop('neighbor_filter')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_pim_intf_phy_cont_pim_int_cmd_pim_dr_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        pim_intf_phy_cont = ET.SubElement(ip, "pim-intf-phy-cont", xmlns="urn:brocade.com:mgmt:brocade-pim")
        pim_int_cmd = ET.SubElement(pim_intf_phy_cont, "pim-int-cmd")
        pim = ET.SubElement(pim_int_cmd, "pim")
        dr_priority = ET.SubElement(pim, "dr-priority")
        dr_priority.text = kwargs.pop('dr_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_pim_intf_phy_cont_pim_int_cmd_mcast_bdry_prefix_list(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        pim_intf_phy_cont = ET.SubElement(ip, "pim-intf-phy-cont", xmlns="urn:brocade.com:mgmt:brocade-pim")
        pim_int_cmd = ET.SubElement(pim_intf_phy_cont, "pim-int-cmd")
        mcast_bdry_prefix_list = ET.SubElement(pim_int_cmd, "mcast-bdry-prefix-list")
        mcast_bdry_prefix_list.text = kwargs.pop('mcast_bdry_prefix_list')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_vrf_forwarding(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrf = ET.SubElement(tengigabitethernet, "vrf")
        forwarding = ET.SubElement(vrf, "forwarding")
        forwarding.text = kwargs.pop('forwarding')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_raguard(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        raguard = ET.SubElement(ipv6, "raguard")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_ipv6_config_address_use_link_local_only(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        address = ET.SubElement(ipv6_config, "address")
        use_link_local_only = ET.SubElement(address, "use-link-local-only")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_ipv6_config_address_link_local_config_link_local_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        address = ET.SubElement(ipv6_config, "address")
        link_local_config = ET.SubElement(address, "link-local-config")
        link_local_address = ET.SubElement(link_local_config, "link-local-address")
        link_local_address.text = kwargs.pop('link_local_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_ipv6_config_address_link_local_config_link_local(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        address = ET.SubElement(ipv6_config, "address")
        link_local_config = ET.SubElement(address, "link-local-config")
        link_local = ET.SubElement(link_local_config, "link-local")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_ipv6_config_address_ipv6_address_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        address = ET.SubElement(ipv6_config, "address")
        ipv6_address = ET.SubElement(address, "ipv6-address")
        address = ET.SubElement(ipv6_address, "address")
        address.text = kwargs.pop('address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_ipv6_config_address_ipv6_address_secondary(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        address = ET.SubElement(ipv6_config, "address")
        ipv6_address = ET.SubElement(address, "ipv6-address")
        address_key = ET.SubElement(ipv6_address, "address")
        address_key.text = kwargs.pop('address')
        secondary = ET.SubElement(ipv6_address, "secondary")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_ipv6_config_address_ipv6_address_eui_config_eui64(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        address = ET.SubElement(ipv6_config, "address")
        ipv6_address = ET.SubElement(address, "ipv6-address")
        address_key = ET.SubElement(ipv6_address, "address")
        address_key.text = kwargs.pop('address')
        eui_config = ET.SubElement(ipv6_address, "eui-config")
        eui64 = ET.SubElement(eui_config, "eui64")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_ipv6_config_address_ipv6_address_eui_config_eui_secondary(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        address = ET.SubElement(ipv6_config, "address")
        ipv6_address = ET.SubElement(address, "ipv6-address")
        address_key = ET.SubElement(ipv6_address, "address")
        address_key.text = kwargs.pop('address')
        eui_config = ET.SubElement(ipv6_address, "eui-config")
        eui_secondary = ET.SubElement(eui_config, "eui-secondary")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_ipv6_config_address_ipv6_address_anycast(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        address = ET.SubElement(ipv6_config, "address")
        ipv6_address = ET.SubElement(address, "ipv6-address")
        address_key = ET.SubElement(ipv6_address, "address")
        address_key.text = kwargs.pop('address')
        anycast = ET.SubElement(ipv6_address, "anycast")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_ipv6_config_mtu(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        mtu = ET.SubElement(ipv6_config, "mtu")
        mtu.text = kwargs.pop('mtu')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_interface_phy_dhcp_conf_dhcp_relay_servers_relay_ip_addr(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        interface_phy_dhcp_conf = ET.SubElement(ipv6, "interface-phy-dhcp-conf", xmlns="urn:brocade.com:mgmt:brocade-dhcpv6")
        dhcp = ET.SubElement(interface_phy_dhcp_conf, "dhcp")
        relay = ET.SubElement(dhcp, "relay")
        servers = ET.SubElement(relay, "servers")
        relay_ip_addr = ET.SubElement(servers, "relay-ip-addr")
        relay_ip_addr.text = kwargs.pop('relay_ip_addr')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_interface_phy_dhcp_conf_dhcp_relay_servers_server_vrf_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        interface_phy_dhcp_conf = ET.SubElement(ipv6, "interface-phy-dhcp-conf", xmlns="urn:brocade.com:mgmt:brocade-dhcpv6")
        dhcp = ET.SubElement(interface_phy_dhcp_conf, "dhcp")
        relay = ET.SubElement(dhcp, "relay")
        servers = ET.SubElement(relay, "servers")
        relay_ip_addr_key = ET.SubElement(servers, "relay-ip-addr")
        relay_ip_addr_key.text = kwargs.pop('relay_ip_addr')
        server_vrf_name = ET.SubElement(servers, "server-vrf-name")
        server_vrf_name.text = kwargs.pop('server_vrf_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_interface_phy_dhcp_conf_dhcp_relay_servers_interface_interface_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        interface_phy_dhcp_conf = ET.SubElement(ipv6, "interface-phy-dhcp-conf", xmlns="urn:brocade.com:mgmt:brocade-dhcpv6")
        dhcp = ET.SubElement(interface_phy_dhcp_conf, "dhcp")
        relay = ET.SubElement(dhcp, "relay")
        servers = ET.SubElement(relay, "servers")
        relay_ip_addr_key = ET.SubElement(servers, "relay-ip-addr")
        relay_ip_addr_key.text = kwargs.pop('relay_ip_addr')
        interface = ET.SubElement(servers, "interface")
        interface_type = ET.SubElement(interface, "interface-type")
        interface_type.text = kwargs.pop('interface_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_interface_phy_dhcp_conf_dhcp_relay_servers_interface_interface_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        interface_phy_dhcp_conf = ET.SubElement(ipv6, "interface-phy-dhcp-conf", xmlns="urn:brocade.com:mgmt:brocade-dhcpv6")
        dhcp = ET.SubElement(interface_phy_dhcp_conf, "dhcp")
        relay = ET.SubElement(dhcp, "relay")
        servers = ET.SubElement(relay, "servers")
        relay_ip_addr_key = ET.SubElement(servers, "relay-ip-addr")
        relay_ip_addr_key.text = kwargs.pop('relay_ip_addr')
        interface = ET.SubElement(servers, "interface")
        interface_name = ET.SubElement(interface, "interface-name")
        interface_name.text = kwargs.pop('interface_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_icmpv6_echo_reply(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        icmpv6 = ET.SubElement(ipv6, "icmpv6", xmlns="urn:brocade.com:mgmt:brocade-icmp")
        echo_reply = ET.SubElement(icmpv6, "echo-reply")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_icmpv6_rate_limiting(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        icmpv6 = ET.SubElement(ipv6, "icmpv6", xmlns="urn:brocade.com:mgmt:brocade-icmp")
        rate_limiting = ET.SubElement(icmpv6, "rate-limiting")
        rate_limiting.text = kwargs.pop('rate_limiting')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_icmpv6_unreachable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        icmpv6 = ET.SubElement(ipv6, "icmpv6", xmlns="urn:brocade.com:mgmt:brocade-icmp")
        unreachable = ET.SubElement(icmpv6, "unreachable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_icmpv6_redirect(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        icmpv6 = ET.SubElement(ipv6, "icmpv6", xmlns="urn:brocade.com:mgmt:brocade-icmp")
        redirect = ET.SubElement(icmpv6, "redirect")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_access_group_ipv6_access_list(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        access_group = ET.SubElement(ipv6, "access-group", xmlns="urn:brocade.com:mgmt:brocade-ipv6-access-list")
        ip_direction_key = ET.SubElement(access_group, "ip-direction")
        ip_direction_key.text = kwargs.pop('ip_direction')
        ipv6_access_list = ET.SubElement(access_group, "ipv6-access-list")
        ipv6_access_list.text = kwargs.pop('ipv6_access_list')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_access_group_ip_direction(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        access_group = ET.SubElement(ipv6, "access-group", xmlns="urn:brocade.com:mgmt:brocade-ipv6-access-list")
        ipv6_access_list_key = ET.SubElement(access_group, "ipv6-access-list")
        ipv6_access_list_key.text = kwargs.pop('ipv6_access_list')
        ip_direction = ET.SubElement(access_group, "ip-direction")
        ip_direction.text = kwargs.pop('ip_direction')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_access_group_traffic_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        access_group = ET.SubElement(ipv6, "access-group", xmlns="urn:brocade.com:mgmt:brocade-ipv6-access-list")
        ipv6_access_list_key = ET.SubElement(access_group, "ipv6-access-list")
        ipv6_access_list_key.text = kwargs.pop('ipv6_access_list')
        ip_direction_key = ET.SubElement(access_group, "ip-direction")
        ip_direction_key.text = kwargs.pop('ip_direction')
        traffic_type = ET.SubElement(access_group, "traffic-type")
        traffic_type.text = kwargs.pop('traffic_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_policy_route_map_ipv6_route_map_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        policy = ET.SubElement(ipv6, "policy", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        route_map = ET.SubElement(policy, "route-map")
        ipv6_route_map_name = ET.SubElement(route_map, "ipv6-route-map-name")
        ipv6_route_map_name.text = kwargs.pop('ipv6_route_map_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_vrrp_suppress_interface_ra(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        vrrp_suppress_interface_ra = ET.SubElement(ipv6_intf_cmds, "vrrp-suppress-interface-ra")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_managed_config_flag(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        managed_config_flag = ET.SubElement(nd, "managed-config-flag")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_other_config_flag(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        other_config_flag = ET.SubElement(nd, "other-config-flag")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_broadcast_mac_trap(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        broadcast_mac_trap = ET.SubElement(nd, "broadcast-mac-trap")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_ra_lifetime(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        ra_lifetime = ET.SubElement(nd, "ra-lifetime")
        ra_lifetime.text = kwargs.pop('ra_lifetime')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_reachable_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        reachable_time = ET.SubElement(nd, "reachable-time")
        reachable_time.text = kwargs.pop('reachable_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_mtu(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        mtu = ET.SubElement(nd, "mtu")
        mtu.text = kwargs.pop('mtu')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_retrans_timer(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        retrans_timer = ET.SubElement(nd, "retrans-timer")
        retrans_timer.text = kwargs.pop('retrans_timer')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_hoplimit(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        hoplimit = ET.SubElement(nd, "hoplimit")
        hoplimit.text = kwargs.pop('hoplimit')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_ns_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        ns_interval = ET.SubElement(nd, "ns-interval")
        ns_interval.text = kwargs.pop('ns_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_proxy(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        proxy = ET.SubElement(nd, "proxy")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_suppress_ra_suppress_ra_flag(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        suppress_ra = ET.SubElement(nd, "suppress-ra")
        suppress_ra_flag = ET.SubElement(suppress_ra, "suppress-ra-flag")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_suppress_ra_suppress_ra_mtu(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        suppress_ra = ET.SubElement(nd, "suppress-ra")
        suppress_ra_mtu = ET.SubElement(suppress_ra, "suppress-ra-mtu")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_suppress_ra_suppress_ra_all(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        suppress_ra = ET.SubElement(nd, "suppress-ra")
        suppress_ra_all = ET.SubElement(suppress_ra, "suppress-ra-all")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_ra_interval_max_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        ra_interval = ET.SubElement(nd, "ra-interval")
        max_interval = ET.SubElement(ra_interval, "max-interval")
        max_interval.text = kwargs.pop('max_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_ra_interval_min(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        ra_interval = ET.SubElement(nd, "ra-interval")
        min = ET.SubElement(ra_interval, "min")
        min.text = kwargs.pop('min')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_dad_attempts(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        dad = ET.SubElement(nd, "dad")
        attempts = ET.SubElement(dad, "attempts")
        attempts.text = kwargs.pop('attempts')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_dad_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        dad = ET.SubElement(nd, "dad")
        time = ET.SubElement(dad, "time")
        time.text = kwargs.pop('time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_nud_retry_base(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        nud = ET.SubElement(nd, "nud")
        retry = ET.SubElement(nud, "retry")
        base = ET.SubElement(retry, "base")
        base.text = kwargs.pop('base')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_nud_retry_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        nud = ET.SubElement(nd, "nud")
        retry = ET.SubElement(nud, "retry")
        interval = ET.SubElement(retry, "interval")
        interval.text = kwargs.pop('interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_nud_retry_max_attempts(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        nud = ET.SubElement(nd, "nud")
        retry = ET.SubElement(nud, "retry")
        max_attempts = ET.SubElement(retry, "max-attempts")
        max_attempts.text = kwargs.pop('max_attempts')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_cache_expire(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        cache = ET.SubElement(nd, "cache")
        expire = ET.SubElement(cache, "expire")
        expire.text = kwargs.pop('expire')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_prefix_prefix_ipv6_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        prefix = ET.SubElement(nd, "prefix")
        prefix_ipv6_address = ET.SubElement(prefix, "prefix-ipv6-address")
        prefix_ipv6_address.text = kwargs.pop('prefix_ipv6_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_prefix_lifetime_ch_valid_type_ca_no_advertise_no_advertise(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        prefix = ET.SubElement(nd, "prefix")
        prefix_ipv6_address_key = ET.SubElement(prefix, "prefix-ipv6-address")
        prefix_ipv6_address_key.text = kwargs.pop('prefix_ipv6_address')
        lifetime = ET.SubElement(prefix, "lifetime")
        ch_valid_type = ET.SubElement(lifetime, "ch-valid-type")
        ca_no_advertise = ET.SubElement(ch_valid_type, "ca-no-advertise")
        no_advertise = ET.SubElement(ca_no_advertise, "no-advertise")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_prefix_lifetime_ch_valid_type_ca_valid_lifetime_valid_lifetime(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        prefix = ET.SubElement(nd, "prefix")
        prefix_ipv6_address_key = ET.SubElement(prefix, "prefix-ipv6-address")
        prefix_ipv6_address_key.text = kwargs.pop('prefix_ipv6_address')
        lifetime = ET.SubElement(prefix, "lifetime")
        ch_valid_type = ET.SubElement(lifetime, "ch-valid-type")
        ca_valid_lifetime = ET.SubElement(ch_valid_type, "ca-valid-lifetime")
        valid_lifetime = ET.SubElement(ca_valid_lifetime, "valid-lifetime")
        valid_lifetime.text = kwargs.pop('valid_lifetime')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_prefix_lifetime_ch_valid_type_ca_valid_infinite_valid_infinite(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        prefix = ET.SubElement(nd, "prefix")
        prefix_ipv6_address_key = ET.SubElement(prefix, "prefix-ipv6-address")
        prefix_ipv6_address_key.text = kwargs.pop('prefix_ipv6_address')
        lifetime = ET.SubElement(prefix, "lifetime")
        ch_valid_type = ET.SubElement(lifetime, "ch-valid-type")
        ca_valid_infinite = ET.SubElement(ch_valid_type, "ca-valid-infinite")
        valid_infinite = ET.SubElement(ca_valid_infinite, "valid-infinite")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_prefix_lifetime_preferred_ch_preferred_type_ca_preferred_lifetime_preferred_lifetime(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        prefix = ET.SubElement(nd, "prefix")
        prefix_ipv6_address_key = ET.SubElement(prefix, "prefix-ipv6-address")
        prefix_ipv6_address_key.text = kwargs.pop('prefix_ipv6_address')
        lifetime = ET.SubElement(prefix, "lifetime")
        preferred = ET.SubElement(lifetime, "preferred")
        ch_preferred_type = ET.SubElement(preferred, "ch-preferred-type")
        ca_preferred_lifetime = ET.SubElement(ch_preferred_type, "ca-preferred-lifetime")
        preferred_lifetime = ET.SubElement(ca_preferred_lifetime, "preferred-lifetime")
        preferred_lifetime.text = kwargs.pop('preferred_lifetime')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_prefix_lifetime_preferred_ch_preferred_type_ca_preferred_infinite_preferred_infinite(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        prefix = ET.SubElement(nd, "prefix")
        prefix_ipv6_address_key = ET.SubElement(prefix, "prefix-ipv6-address")
        prefix_ipv6_address_key.text = kwargs.pop('prefix_ipv6_address')
        lifetime = ET.SubElement(prefix, "lifetime")
        preferred = ET.SubElement(lifetime, "preferred")
        ch_preferred_type = ET.SubElement(preferred, "ch-preferred-type")
        ca_preferred_infinite = ET.SubElement(ch_preferred_type, "ca-preferred-infinite")
        preferred_infinite = ET.SubElement(ca_preferred_infinite, "preferred-infinite")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_prefix_lifetime_preferred_prefix_flags_no_autoconfig(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        prefix = ET.SubElement(nd, "prefix")
        prefix_ipv6_address_key = ET.SubElement(prefix, "prefix-ipv6-address")
        prefix_ipv6_address_key.text = kwargs.pop('prefix_ipv6_address')
        lifetime = ET.SubElement(prefix, "lifetime")
        preferred = ET.SubElement(lifetime, "preferred")
        prefix_flags = ET.SubElement(preferred, "prefix-flags")
        no_autoconfig = ET.SubElement(prefix_flags, "no-autoconfig")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_prefix_lifetime_preferred_prefix_flags_no_onlink(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        prefix = ET.SubElement(nd, "prefix")
        prefix_ipv6_address_key = ET.SubElement(prefix, "prefix-ipv6-address")
        prefix_ipv6_address_key.text = kwargs.pop('prefix_ipv6_address')
        lifetime = ET.SubElement(prefix, "lifetime")
        preferred = ET.SubElement(lifetime, "preferred")
        prefix_flags = ET.SubElement(preferred, "prefix-flags")
        no_onlink = ET.SubElement(prefix_flags, "no-onlink")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_prefix_lifetime_preferred_prefix_flags_off_link(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        prefix = ET.SubElement(nd, "prefix")
        prefix_ipv6_address_key = ET.SubElement(prefix, "prefix-ipv6-address")
        prefix_ipv6_address_key.text = kwargs.pop('prefix_ipv6_address')
        lifetime = ET.SubElement(prefix, "lifetime")
        preferred = ET.SubElement(lifetime, "preferred")
        prefix_flags = ET.SubElement(preferred, "prefix-flags")
        off_link = ET.SubElement(prefix_flags, "off-link")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_neighbor_ipv6_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        neighbor = ET.SubElement(ipv6_intf_cmds, "neighbor")
        ipv6_address = ET.SubElement(neighbor, "ipv6-address")
        ipv6_address.text = kwargs.pop('ipv6_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_neighbor_hardware_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        neighbor = ET.SubElement(ipv6_intf_cmds, "neighbor")
        ipv6_address_key = ET.SubElement(neighbor, "ipv6-address")
        ipv6_address_key.text = kwargs.pop('ipv6_address')
        hardware_address = ET.SubElement(neighbor, "hardware-address")
        hardware_address.text = kwargs.pop('hardware_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_ipv6_phy_intf_cmds_hop_by_hop_trap(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        ipv6_phy_intf_cmds = ET.SubElement(ipv6, "ipv6-phy-intf-cmds", xmlns="urn:brocade.com:mgmt:brocade-mld-snooping")
        hop_by_hop_trap = ET.SubElement(ipv6_phy_intf_cmds, "hop-by-hop-trap")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_interface_ospfv3_conf_interface_area(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        interface_area = ET.SubElement(interface_ospfv3_conf, "interface-area")
        interface_area.text = kwargs.pop('interface_area')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_interface_ospfv3_conf_active(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        active = ET.SubElement(interface_ospfv3_conf, "active")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_interface_ospfv3_conf_passive(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        passive = ET.SubElement(interface_ospfv3_conf, "passive")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_interface_ospfv3_conf_bfd_bfd_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        bfd = ET.SubElement(interface_ospfv3_conf, "bfd")
        bfd_enable = ET.SubElement(bfd, "bfd-enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_interface_ospfv3_conf_cost(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        cost = ET.SubElement(interface_ospfv3_conf, "cost")
        cost.text = kwargs.pop('cost')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_interface_ospfv3_conf_instance(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        instance = ET.SubElement(interface_ospfv3_conf, "instance")
        instance.text = kwargs.pop('instance')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_interface_ospfv3_conf_mtu_ignore(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        mtu_ignore = ET.SubElement(interface_ospfv3_conf, "mtu-ignore")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_interface_ospfv3_conf_network(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        network = ET.SubElement(interface_ospfv3_conf, "network")
        network.text = kwargs.pop('network')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_interface_ospfv3_conf_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        priority = ET.SubElement(interface_ospfv3_conf, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_interface_ospfv3_conf_suppress_linklsa(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        suppress_linklsa = ET.SubElement(interface_ospfv3_conf, "suppress-linklsa")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_spi(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        spi = ET.SubElement(ipsec_auth_key_config, "spi")
        spi.text = kwargs.pop('spi')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_ah_algorithm_ah(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_ah_algorithm = ET.SubElement(ch_algorithm, "ca-ah-algorithm")
        ah = ET.SubElement(ca_ah_algorithm, "ah")
        ah.text = kwargs.pop('ah')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_ah_algorithm_ah_no_encrypt(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_ah_algorithm = ET.SubElement(ch_algorithm, "ca-ah-algorithm")
        ah_no_encrypt = ET.SubElement(ca_ah_algorithm, "ah-no-encrypt")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_ah_algorithm_ah_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_ah_algorithm = ET.SubElement(ch_algorithm, "ca-ah-algorithm")
        ah_key = ET.SubElement(ca_ah_algorithm, "ah-key")
        ah_key.text = kwargs.pop('ah_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp = ET.SubElement(ca_esp_algorithm, "esp")
        esp.text = kwargs.pop('esp')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp_no_encrypt(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp_no_encrypt = ET.SubElement(ca_esp_algorithm, "esp-no-encrypt")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp_key = ET.SubElement(ca_esp_algorithm, "esp-key")
        esp_key.text = kwargs.pop('esp_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp_auth(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp_auth = ET.SubElement(ca_esp_algorithm, "esp-auth")
        esp_auth.text = kwargs.pop('esp_auth')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp_auth_no_encrypt(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp_auth_no_encrypt = ET.SubElement(ca_esp_algorithm, "esp-auth-no-encrypt")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp_auth_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp_auth_key = ET.SubElement(ca_esp_algorithm, "esp-auth-key")
        esp_auth_key.text = kwargs.pop('esp_auth_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_ipsec_authentication_disable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec = ET.SubElement(authentication, "ipsec")
        ipsec_authentication_disable = ET.SubElement(ipsec, "ipsec-authentication-disable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_ifc_key_add_remove_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec = ET.SubElement(authentication, "ipsec")
        ifc_key_add_remove_interval = ET.SubElement(ipsec, "ifc-key-add-remove-interval")
        ifc_key_add_remove_interval.text = kwargs.pop('ifc_key_add_remove_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_interface_ospfv3_conf_link_interval_properties_hello_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        link_interval_properties = ET.SubElement(interface_ospfv3_conf, "link-interval-properties")
        hello_interval = ET.SubElement(link_interval_properties, "hello-interval")
        hello_interval.text = kwargs.pop('hello_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_interface_ospfv3_conf_link_interval_properties_dead_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        link_interval_properties = ET.SubElement(interface_ospfv3_conf, "link-interval-properties")
        dead_interval = ET.SubElement(link_interval_properties, "dead-interval")
        dead_interval.text = kwargs.pop('dead_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_interface_ospfv3_conf_link_interval_properties_hello_jitter(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        link_interval_properties = ET.SubElement(interface_ospfv3_conf, "link-interval-properties")
        hello_jitter = ET.SubElement(link_interval_properties, "hello-jitter")
        hello_jitter.text = kwargs.pop('hello_jitter')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_interface_ospfv3_conf_link_interval_properties_retransmit_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        link_interval_properties = ET.SubElement(interface_ospfv3_conf, "link-interval-properties")
        retransmit_interval = ET.SubElement(link_interval_properties, "retransmit-interval")
        retransmit_interval.text = kwargs.pop('retransmit_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_interface_ospfv3_conf_link_interval_properties_transmit_delay(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        link_interval_properties = ET.SubElement(interface_ospfv3_conf, "link-interval-properties")
        transmit_delay = ET.SubElement(link_interval_properties, "transmit-delay")
        transmit_delay.text = kwargs.pop('transmit_delay')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_vrrpv3_group_vrid(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        vrrpv3_group = ET.SubElement(ipv6, "vrrpv3-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid = ET.SubElement(vrrpv3_group, "vrid")
        vrid.text = kwargs.pop('vrid')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_vrrpv3_group_use_v2_checksum(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        vrrpv3_group = ET.SubElement(ipv6, "vrrpv3-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        use_v2_checksum = ET.SubElement(vrrpv3_group, "use-v2-checksum")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_vrrpv3_group_virtual_ip_virtual_ipaddr(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        vrrpv3_group = ET.SubElement(ipv6, "vrrpv3-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        virtual_ip = ET.SubElement(vrrpv3_group, "virtual-ip")
        virtual_ipaddr = ET.SubElement(virtual_ip, "virtual-ipaddr")
        virtual_ipaddr.text = kwargs.pop('virtual_ipaddr')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_vrrpv3_group_track_interface_interface_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        vrrpv3_group = ET.SubElement(ipv6, "vrrpv3-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        track = ET.SubElement(vrrpv3_group, "track")
        interface = ET.SubElement(track, "interface")
        interface_name_key = ET.SubElement(interface, "interface-name")
        interface_name_key.text = kwargs.pop('interface_name')
        interface_type = ET.SubElement(interface, "interface-type")
        interface_type.text = kwargs.pop('interface_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_vrrpv3_group_track_interface_interface_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        vrrpv3_group = ET.SubElement(ipv6, "vrrpv3-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        track = ET.SubElement(vrrpv3_group, "track")
        interface = ET.SubElement(track, "interface")
        interface_type_key = ET.SubElement(interface, "interface-type")
        interface_type_key.text = kwargs.pop('interface_type')
        interface_name = ET.SubElement(interface, "interface-name")
        interface_name.text = kwargs.pop('interface_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_vrrpv3_group_track_interface_track_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        vrrpv3_group = ET.SubElement(ipv6, "vrrpv3-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        track = ET.SubElement(vrrpv3_group, "track")
        interface = ET.SubElement(track, "interface")
        interface_type_key = ET.SubElement(interface, "interface-type")
        interface_type_key.text = kwargs.pop('interface_type')
        interface_name_key = ET.SubElement(interface, "interface-name")
        interface_name_key.text = kwargs.pop('interface_name')
        track_priority = ET.SubElement(interface, "track-priority")
        track_priority.text = kwargs.pop('track_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_vrrpv3_group_advertisement_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        vrrpv3_group = ET.SubElement(ipv6, "vrrpv3-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        advertisement_interval = ET.SubElement(vrrpv3_group, "advertisement-interval")
        advertisement_interval.text = kwargs.pop('advertisement_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_vrrpv3_group_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        vrrpv3_group = ET.SubElement(ipv6, "vrrpv3-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        enable = ET.SubElement(vrrpv3_group, "enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_vrrpv3_group_hold_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        vrrpv3_group = ET.SubElement(ipv6, "vrrpv3-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        hold_time = ET.SubElement(vrrpv3_group, "hold-time")
        hold_time.text = kwargs.pop('hold_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_vrrpv3_group_preempt_mode(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        vrrpv3_group = ET.SubElement(ipv6, "vrrpv3-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        preempt_mode = ET.SubElement(vrrpv3_group, "preempt-mode")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_vrrpv3_group_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        vrrpv3_group = ET.SubElement(ipv6, "vrrpv3-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        priority = ET.SubElement(vrrpv3_group, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_vrrpv3_group_description(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        vrrpv3_group = ET.SubElement(ipv6, "vrrpv3-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        description = ET.SubElement(vrrpv3_group, "description")
        description.text = kwargs.pop('description')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_vrrpv3e_group_vrid(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid = ET.SubElement(vrrpv3e_group, "vrid")
        vrid.text = kwargs.pop('vrid')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_vrrpv3e_group_virtual_ip_virtual_ipaddr(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        virtual_ip = ET.SubElement(vrrpv3e_group, "virtual-ip")
        virtual_ipaddr = ET.SubElement(virtual_ip, "virtual-ipaddr")
        virtual_ipaddr.text = kwargs.pop('virtual_ipaddr')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_vrrpv3e_group_track_interface_interface_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        track = ET.SubElement(vrrpv3e_group, "track")
        interface = ET.SubElement(track, "interface")
        interface_name_key = ET.SubElement(interface, "interface-name")
        interface_name_key.text = kwargs.pop('interface_name')
        interface_type = ET.SubElement(interface, "interface-type")
        interface_type.text = kwargs.pop('interface_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_vrrpv3e_group_track_interface_interface_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        track = ET.SubElement(vrrpv3e_group, "track")
        interface = ET.SubElement(track, "interface")
        interface_type_key = ET.SubElement(interface, "interface-type")
        interface_type_key.text = kwargs.pop('interface_type')
        interface_name = ET.SubElement(interface, "interface-name")
        interface_name.text = kwargs.pop('interface_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_vrrpv3e_group_track_interface_track_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        track = ET.SubElement(vrrpv3e_group, "track")
        interface = ET.SubElement(track, "interface")
        interface_type_key = ET.SubElement(interface, "interface-type")
        interface_type_key.text = kwargs.pop('interface_type')
        interface_name_key = ET.SubElement(interface, "interface-name")
        interface_name_key.text = kwargs.pop('interface_name')
        track_priority = ET.SubElement(interface, "track-priority")
        track_priority.text = kwargs.pop('track_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_vrrpv3e_group_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        enable = ET.SubElement(vrrpv3e_group, "enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_vrrpv3e_group_hold_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        hold_time = ET.SubElement(vrrpv3e_group, "hold-time")
        hold_time.text = kwargs.pop('hold_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_vrrpv3e_group_preempt_mode(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        preempt_mode = ET.SubElement(vrrpv3e_group, "preempt-mode")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_vrrpv3e_group_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        priority = ET.SubElement(vrrpv3e_group, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_vrrpv3e_group_description(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        description = ET.SubElement(vrrpv3e_group, "description")
        description.text = kwargs.pop('description')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_vrrpv3e_group_advertise_backup(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        advertise_backup = ET.SubElement(vrrpv3e_group, "advertise-backup")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_vrrpv3e_group_nd_advertisement_timer(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        nd_advertisement_timer = ET.SubElement(vrrpv3e_group, "nd-advertisement-timer")
        nd_advertisement_timer.text = kwargs.pop('nd_advertisement_timer')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_vrrpv3e_group_advertisement_interval_scale(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        advertisement_interval_scale = ET.SubElement(vrrpv3e_group, "advertisement-interval-scale")
        advertisement_interval_scale.text = kwargs.pop('advertisement_interval_scale')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_vrrpv3e_group_backup_advertisement_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        backup_advertisement_interval = ET.SubElement(vrrpv3e_group, "backup-advertisement-interval")
        backup_advertisement_interval.text = kwargs.pop('backup_advertisement_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_vrrpv3e_group_vrrpe_advertisement_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        vrrpe_advertisement_interval = ET.SubElement(vrrpv3e_group, "vrrpe-advertisement-interval")
        vrrpe_advertisement_interval.text = kwargs.pop('vrrpe_advertisement_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_vrrpv3e_group_short_path_forwarding_basic(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        short_path_forwarding = ET.SubElement(vrrpv3e_group, "short-path-forwarding")
        basic = ET.SubElement(short_path_forwarding, "basic")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_vrrpv3e_group_short_path_forwarding_revert_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        short_path_forwarding = ET.SubElement(vrrpv3e_group, "short-path-forwarding")
        revert_priority = ET.SubElement(short_path_forwarding, "revert-priority")
        revert_priority.text = kwargs.pop('revert_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_track_track_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        track = ET.SubElement(tengigabitethernet, "track")
        track_enable = ET.SubElement(track, "track_enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_track_min_link(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        track = ET.SubElement(tengigabitethernet, "track")
        min_link = ET.SubElement(track, "min-link")
        min_link.text = kwargs.pop('min_link')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_track_interface_track_interface_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        track = ET.SubElement(tengigabitethernet, "track")
        interface = ET.SubElement(track, "interface")
        track_interface_name_key = ET.SubElement(interface, "track-interface-name")
        track_interface_name_key.text = kwargs.pop('track_interface_name')
        track_interface_type = ET.SubElement(interface, "track-interface-type")
        track_interface_type.text = kwargs.pop('track_interface_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_track_interface_track_interface_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        track = ET.SubElement(tengigabitethernet, "track")
        interface = ET.SubElement(track, "interface")
        track_interface_type_key = ET.SubElement(interface, "track-interface-type")
        track_interface_type_key.text = kwargs.pop('track_interface_type')
        track_interface_name = ET.SubElement(interface, "track-interface-name")
        track_interface_name.text = kwargs.pop('track_interface_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_track_remove_remove_all_track_interfaces(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        track = ET.SubElement(tengigabitethernet, "track")
        remove = ET.SubElement(track, "remove")
        remove_all_track_interfaces = ET.SubElement(remove, "remove-all-track-interfaces")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_bfd_interval_min_tx(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        bfd = ET.SubElement(tengigabitethernet, "bfd")
        interval = ET.SubElement(bfd, "interval")
        min_tx = ET.SubElement(interval, "min-tx")
        min_tx.text = kwargs.pop('min_tx')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_bfd_interval_min_rx(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        bfd = ET.SubElement(tengigabitethernet, "bfd")
        interval = ET.SubElement(bfd, "interval")
        min_rx = ET.SubElement(interval, "min-rx")
        min_rx.text = kwargs.pop('min_rx')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_bfd_interval_multiplier(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        bfd = ET.SubElement(tengigabitethernet, "bfd")
        interval = ET.SubElement(bfd, "interval")
        multiplier = ET.SubElement(interval, "multiplier")
        multiplier.text = kwargs.pop('multiplier')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_bfd_bfd_shutdown(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        bfd = ET.SubElement(tengigabitethernet, "bfd")
        bfd_shutdown = ET.SubElement(bfd, "bfd-shutdown")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_vepa_vepa_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vepa = ET.SubElement(tengigabitethernet, "vepa")
        vepa_enable = ET.SubElement(vepa, "vepa-enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_edge_loop_detection_eldprio(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        edge_loop_detection = ET.SubElement(tengigabitethernet, "edge-loop-detection")
        eldprio = ET.SubElement(edge_loop_detection, "eldprio")
        eldprio.text = kwargs.pop('eldprio')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_edge_loop_detection_eldvlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        edge_loop_detection = ET.SubElement(tengigabitethernet, "edge-loop-detection")
        eldvlan = ET.SubElement(edge_loop_detection, "eldvlan")
        eldvlan.text = kwargs.pop('eldvlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_mac_access_group_mac_access_list(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        mac = ET.SubElement(tengigabitethernet, "mac", xmlns="urn:brocade.com:mgmt:brocade-mac-access-list")
        access_group = ET.SubElement(mac, "access-group")
        mac_direction_key = ET.SubElement(access_group, "mac-direction")
        mac_direction_key.text = kwargs.pop('mac_direction')
        mac_access_list = ET.SubElement(access_group, "mac-access-list")
        mac_access_list.text = kwargs.pop('mac_access_list')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_mac_access_group_mac_direction(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        mac = ET.SubElement(tengigabitethernet, "mac", xmlns="urn:brocade.com:mgmt:brocade-mac-access-list")
        access_group = ET.SubElement(mac, "access-group")
        mac_access_list_key = ET.SubElement(access_group, "mac-access-list")
        mac_access_list_key.text = kwargs.pop('mac_access_list')
        mac_direction = ET.SubElement(access_group, "mac-direction")
        mac_direction.text = kwargs.pop('mac_direction')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_mac_access_group_traffic_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        mac = ET.SubElement(tengigabitethernet, "mac", xmlns="urn:brocade.com:mgmt:brocade-mac-access-list")
        access_group = ET.SubElement(mac, "access-group")
        mac_access_list_key = ET.SubElement(access_group, "mac-access-list")
        mac_access_list_key.text = kwargs.pop('mac_access_list')
        mac_direction_key = ET.SubElement(access_group, "mac-direction")
        mac_direction_key.text = kwargs.pop('mac_direction')
        traffic_type = ET.SubElement(access_group, "traffic-type")
        traffic_type.text = kwargs.pop('traffic_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_vrrp_vrid(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(tengigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        vrid = ET.SubElement(vrrp, "vrid")
        vrid.text = kwargs.pop('vrid')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_vrrp_version(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(tengigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version = ET.SubElement(vrrp, "version")
        version.text = kwargs.pop('version')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_vrrp_use_v2_checksum(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(tengigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        use_v2_checksum = ET.SubElement(vrrp, "use-v2-checksum")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_vrrp_virtual_ip_virtual_ipaddr(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(tengigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        virtual_ip = ET.SubElement(vrrp, "virtual-ip")
        virtual_ipaddr = ET.SubElement(virtual_ip, "virtual-ipaddr")
        virtual_ipaddr.text = kwargs.pop('virtual_ipaddr')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_vrrp_track_interface_interface_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(tengigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        track = ET.SubElement(vrrp, "track")
        interface = ET.SubElement(track, "interface")
        interface_name_key = ET.SubElement(interface, "interface-name")
        interface_name_key.text = kwargs.pop('interface_name')
        interface_type = ET.SubElement(interface, "interface-type")
        interface_type.text = kwargs.pop('interface_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_vrrp_track_interface_interface_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(tengigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        track = ET.SubElement(vrrp, "track")
        interface = ET.SubElement(track, "interface")
        interface_type_key = ET.SubElement(interface, "interface-type")
        interface_type_key.text = kwargs.pop('interface_type')
        interface_name = ET.SubElement(interface, "interface-name")
        interface_name.text = kwargs.pop('interface_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_vrrp_track_interface_track_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(tengigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        track = ET.SubElement(vrrp, "track")
        interface = ET.SubElement(track, "interface")
        interface_type_key = ET.SubElement(interface, "interface-type")
        interface_type_key.text = kwargs.pop('interface_type')
        interface_name_key = ET.SubElement(interface, "interface-name")
        interface_name_key.text = kwargs.pop('interface_name')
        track_priority = ET.SubElement(interface, "track-priority")
        track_priority.text = kwargs.pop('track_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_vrrp_advertisement_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(tengigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        advertisement_interval = ET.SubElement(vrrp, "advertisement-interval")
        advertisement_interval.text = kwargs.pop('advertisement_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_vrrp_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(tengigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        enable = ET.SubElement(vrrp, "enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_vrrp_hold_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(tengigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        hold_time = ET.SubElement(vrrp, "hold-time")
        hold_time.text = kwargs.pop('hold_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_vrrp_preempt_mode(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(tengigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        preempt_mode = ET.SubElement(vrrp, "preempt-mode")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_vrrp_arp_unicast_request_receive(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(tengigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        arp = ET.SubElement(vrrp, "arp")
        unicast_request = ET.SubElement(arp, "unicast-request")
        receive = ET.SubElement(unicast_request, "receive")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_vrrp_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(tengigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        priority = ET.SubElement(vrrp, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_vrrp_description(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(tengigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        description = ET.SubElement(vrrp, "description")
        description.text = kwargs.pop('description')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_fabric_fabric_isl_fabric_isl_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        fabric = ET.SubElement(tengigabitethernet, "fabric", xmlns="urn:brocade.com:mgmt:brocade-fcoe")
        fabric_isl = ET.SubElement(fabric, "fabric-isl")
        fabric_isl_enable = ET.SubElement(fabric_isl, "fabric-isl-enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_fabric_fabric_trunk_fabric_trunk_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        fabric = ET.SubElement(tengigabitethernet, "fabric", xmlns="urn:brocade.com:mgmt:brocade-fcoe")
        fabric_trunk = ET.SubElement(fabric, "fabric-trunk")
        fabric_trunk_enable = ET.SubElement(fabric_trunk, "fabric-trunk-enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_fabric_neighbor_discovery_disable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        fabric = ET.SubElement(tengigabitethernet, "fabric", xmlns="urn:brocade.com:mgmt:brocade-fcoe")
        neighbor_discovery = ET.SubElement(fabric, "neighbor-discovery")
        disable = ET.SubElement(neighbor_discovery, "disable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_fabric_fabric_dport_fabric_dport_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        fabric = ET.SubElement(tengigabitethernet, "fabric", xmlns="urn:brocade.com:mgmt:brocade-fcoe")
        fabric_dport = ET.SubElement(fabric, "fabric-dport")
        fabric_dport_enable = ET.SubElement(fabric_dport, "fabric-dport-enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_fcoeport_fcoeport_map(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        fcoeport = ET.SubElement(tengigabitethernet, "fcoeport", xmlns="urn:brocade.com:mgmt:brocade-fcoe")
        fcoeport_map = ET.SubElement(fcoeport, "fcoeport-map")
        fcoeport_map.text = kwargs.pop('fcoeport_map')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_openflow_interface_cfg_logical_instance_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        openflow_interface_cfg = ET.SubElement(tengigabitethernet, "openflow-interface-cfg", xmlns="urn:brocade.com:mgmt:brocade-openflow")
        logical_instance_id = ET.SubElement(openflow_interface_cfg, "logical-instance-id")
        logical_instance_id.text = kwargs.pop('logical_instance_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_openflow_interface_cfg_openflow_enable_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        openflow_interface_cfg = ET.SubElement(tengigabitethernet, "openflow-interface-cfg", xmlns="urn:brocade.com:mgmt:brocade-openflow")
        openflow_enable = ET.SubElement(openflow_interface_cfg, "openflow-enable")
        enable = ET.SubElement(openflow_enable, "enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_openflow_interface_cfg_openflow_enable_match_profile(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        openflow_interface_cfg = ET.SubElement(tengigabitethernet, "openflow-interface-cfg", xmlns="urn:brocade.com:mgmt:brocade-openflow")
        openflow_enable = ET.SubElement(openflow_interface_cfg, "openflow-enable")
        match_profile = ET.SubElement(openflow_enable, "match-profile")
        match_profile.text = kwargs.pop('match_profile')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_sflow_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        sflow = ET.SubElement(tengigabitethernet, "sflow", xmlns="urn:brocade.com:mgmt:brocade-sflow")
        enable = ET.SubElement(sflow, "enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_sflow_polling_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        sflow = ET.SubElement(tengigabitethernet, "sflow", xmlns="urn:brocade.com:mgmt:brocade-sflow")
        polling_interval = ET.SubElement(sflow, "polling-interval")
        polling_interval.text = kwargs.pop('polling_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_sflow_sample_rate(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        sflow = ET.SubElement(tengigabitethernet, "sflow", xmlns="urn:brocade.com:mgmt:brocade-sflow")
        sample_rate = ET.SubElement(sflow, "sample-rate")
        sample_rate.text = kwargs.pop('sample_rate')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_acl_interface_ip_access_group_ip_access_list(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip_acl_interface = ET.SubElement(tengigabitethernet, "ip-acl-interface", xmlns="urn:brocade.com:mgmt:brocade-ip-access-list")
        ip = ET.SubElement(ip_acl_interface, "ip")
        access_group = ET.SubElement(ip, "access-group")
        ip_direction_key = ET.SubElement(access_group, "ip-direction")
        ip_direction_key.text = kwargs.pop('ip_direction')
        ip_access_list = ET.SubElement(access_group, "ip-access-list")
        ip_access_list.text = kwargs.pop('ip_access_list')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_acl_interface_ip_access_group_ip_direction(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip_acl_interface = ET.SubElement(tengigabitethernet, "ip-acl-interface", xmlns="urn:brocade.com:mgmt:brocade-ip-access-list")
        ip = ET.SubElement(ip_acl_interface, "ip")
        access_group = ET.SubElement(ip, "access-group")
        ip_access_list_key = ET.SubElement(access_group, "ip-access-list")
        ip_access_list_key.text = kwargs.pop('ip_access_list')
        ip_direction = ET.SubElement(access_group, "ip-direction")
        ip_direction.text = kwargs.pop('ip_direction')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_acl_interface_ip_access_group_traffic_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip_acl_interface = ET.SubElement(tengigabitethernet, "ip-acl-interface", xmlns="urn:brocade.com:mgmt:brocade-ip-access-list")
        ip = ET.SubElement(ip_acl_interface, "ip")
        access_group = ET.SubElement(ip, "access-group")
        ip_access_list_key = ET.SubElement(access_group, "ip-access-list")
        ip_access_list_key.text = kwargs.pop('ip_access_list')
        ip_direction_key = ET.SubElement(access_group, "ip-direction")
        ip_direction_key.text = kwargs.pop('ip_direction')
        traffic_type = ET.SubElement(access_group, "traffic-type")
        traffic_type.text = kwargs.pop('traffic_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_storm_control_ingress_protocol_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        storm_control = ET.SubElement(tengigabitethernet, "storm-control", xmlns="urn:brocade.com:mgmt:brocade-bum-storm-control")
        ingress = ET.SubElement(storm_control, "ingress")
        protocol_type = ET.SubElement(ingress, "protocol-type")
        protocol_type.text = kwargs.pop('protocol_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_storm_control_ingress_rate_format(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        storm_control = ET.SubElement(tengigabitethernet, "storm-control", xmlns="urn:brocade.com:mgmt:brocade-bum-storm-control")
        ingress = ET.SubElement(storm_control, "ingress")
        protocol_type_key = ET.SubElement(ingress, "protocol-type")
        protocol_type_key.text = kwargs.pop('protocol_type')
        rate_format = ET.SubElement(ingress, "rate-format")
        rate_format.text = kwargs.pop('rate_format')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_storm_control_ingress_rate_bps(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        storm_control = ET.SubElement(tengigabitethernet, "storm-control", xmlns="urn:brocade.com:mgmt:brocade-bum-storm-control")
        ingress = ET.SubElement(storm_control, "ingress")
        protocol_type_key = ET.SubElement(ingress, "protocol-type")
        protocol_type_key.text = kwargs.pop('protocol_type')
        rate_bps = ET.SubElement(ingress, "rate-bps")
        rate_bps.text = kwargs.pop('rate_bps')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_storm_control_ingress_rate_percent(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        storm_control = ET.SubElement(tengigabitethernet, "storm-control", xmlns="urn:brocade.com:mgmt:brocade-bum-storm-control")
        ingress = ET.SubElement(storm_control, "ingress")
        protocol_type_key = ET.SubElement(ingress, "protocol-type")
        protocol_type_key.text = kwargs.pop('protocol_type')
        rate_percent = ET.SubElement(ingress, "rate-percent")
        rate_percent.text = kwargs.pop('rate_percent')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_storm_control_ingress_bum_action(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        storm_control = ET.SubElement(tengigabitethernet, "storm-control", xmlns="urn:brocade.com:mgmt:brocade-bum-storm-control")
        ingress = ET.SubElement(storm_control, "ingress")
        protocol_type_key = ET.SubElement(ingress, "protocol-type")
        protocol_type_key.text = kwargs.pop('protocol_type')
        bum_action = ET.SubElement(ingress, "bum-action")
        bum_action.text = kwargs.pop('bum_action')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_dot1x_authentication(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        dot1x = ET.SubElement(tengigabitethernet, "dot1x", xmlns="urn:brocade.com:mgmt:brocade-dot1x")
        authentication = ET.SubElement(dot1x, "authentication")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_dot1x_port_control(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        dot1x = ET.SubElement(tengigabitethernet, "dot1x", xmlns="urn:brocade.com:mgmt:brocade-dot1x")
        port_control = ET.SubElement(dot1x, "port-control")
        port_control.text = kwargs.pop('port_control')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_dot1x_protocol_version(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        dot1x = ET.SubElement(tengigabitethernet, "dot1x", xmlns="urn:brocade.com:mgmt:brocade-dot1x")
        protocol_version = ET.SubElement(dot1x, "protocol-version")
        protocol_version.text = kwargs.pop('protocol_version')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_dot1x_quiet_period(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        dot1x = ET.SubElement(tengigabitethernet, "dot1x", xmlns="urn:brocade.com:mgmt:brocade-dot1x")
        quiet_period = ET.SubElement(dot1x, "quiet-period")
        quiet_period.text = kwargs.pop('quiet_period')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_dot1x_reauthMax(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        dot1x = ET.SubElement(tengigabitethernet, "dot1x", xmlns="urn:brocade.com:mgmt:brocade-dot1x")
        reauthMax = ET.SubElement(dot1x, "reauthMax")
        reauthMax.text = kwargs.pop('reauthMax')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_dot1x_reauthentication(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        dot1x = ET.SubElement(tengigabitethernet, "dot1x", xmlns="urn:brocade.com:mgmt:brocade-dot1x")
        reauthentication = ET.SubElement(dot1x, "reauthentication")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_dot1x_timeout_re_authperiod(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        dot1x = ET.SubElement(tengigabitethernet, "dot1x", xmlns="urn:brocade.com:mgmt:brocade-dot1x")
        timeout = ET.SubElement(dot1x, "timeout")
        re_authperiod = ET.SubElement(timeout, "re-authperiod")
        re_authperiod.text = kwargs.pop('re_authperiod')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_dot1x_timeout_server_timeout(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        dot1x = ET.SubElement(tengigabitethernet, "dot1x", xmlns="urn:brocade.com:mgmt:brocade-dot1x")
        timeout = ET.SubElement(dot1x, "timeout")
        server_timeout = ET.SubElement(timeout, "server-timeout")
        server_timeout.text = kwargs.pop('server_timeout')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_dot1x_timeout_supp_timeout(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        dot1x = ET.SubElement(tengigabitethernet, "dot1x", xmlns="urn:brocade.com:mgmt:brocade-dot1x")
        timeout = ET.SubElement(dot1x, "timeout")
        supp_timeout = ET.SubElement(timeout, "supp-timeout")
        supp_timeout.text = kwargs.pop('supp_timeout')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_dot1x_timeout_tx_period(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        dot1x = ET.SubElement(tengigabitethernet, "dot1x", xmlns="urn:brocade.com:mgmt:brocade-dot1x")
        timeout = ET.SubElement(dot1x, "timeout")
        tx_period = ET.SubElement(timeout, "tx-period")
        tx_period.text = kwargs.pop('tx_period')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_pbr_interface_ip_policy_route_map_route_map_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip_pbr_interface = ET.SubElement(tengigabitethernet, "ip-pbr-interface", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        ip = ET.SubElement(ip_pbr_interface, "ip")
        policy = ET.SubElement(ip, "policy")
        route_map = ET.SubElement(policy, "route-map")
        route_map_name = ET.SubElement(route_map, "route-map-name")
        route_map_name.text = kwargs.pop('route_map_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_lacp_timeout(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        lacp = ET.SubElement(tengigabitethernet, "lacp", xmlns="urn:brocade.com:mgmt:brocade-lacp")
        timeout = ET.SubElement(lacp, "timeout")
        timeout.text = kwargs.pop('timeout')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_lacp_std_port_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        lacp = ET.SubElement(tengigabitethernet, "lacp", xmlns="urn:brocade.com:mgmt:brocade-lacp")
        std_port_priority = ET.SubElement(lacp, "std_port-priority")
        std_port_priority.text = kwargs.pop('std_port_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_lacp_default_up(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        lacp = ET.SubElement(tengigabitethernet, "lacp", xmlns="urn:brocade.com:mgmt:brocade-lacp")
        default_up = ET.SubElement(lacp, "default-up")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_lldp_cee_lldp_cee_on_off(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        lldp = ET.SubElement(tengigabitethernet, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        cee = ET.SubElement(lldp, "cee")
        lldp_cee_on_off = ET.SubElement(cee, "lldp-cee-on-off")
        lldp_cee_on_off.text = kwargs.pop('lldp_cee_on_off')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_lldp_dcbx_version(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        lldp = ET.SubElement(tengigabitethernet, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        dcbx_version = ET.SubElement(lldp, "dcbx-version")
        dcbx_version.text = kwargs.pop('dcbx_version')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_lldp_disable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        lldp = ET.SubElement(tengigabitethernet, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        disable = ET.SubElement(lldp, "disable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_lldp_iscsi_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        lldp = ET.SubElement(tengigabitethernet, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        iscsi_priority = ET.SubElement(lldp, "iscsi-priority")
        iscsi_priority.text = kwargs.pop('iscsi_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_lldp_profile(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        lldp = ET.SubElement(tengigabitethernet, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        profile = ET.SubElement(lldp, "profile")
        profile.text = kwargs.pop('profile')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_connectivity_deviceconnectivity(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        connectivity = ET.SubElement(tengigabitethernet, "connectivity", xmlns="urn:brocade.com:mgmt:brocade-maps")
        deviceconnectivity = ET.SubElement(connectivity, "deviceconnectivity")
        deviceconnectivity.text = kwargs.pop('deviceconnectivity')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_service_policy_in_cg(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        service_policy = ET.SubElement(tengigabitethernet, "service-policy", xmlns="urn:brocade.com:mgmt:brocade-policer")
        in_cg = ET.SubElement(service_policy, "in")
        in_cg.text = kwargs.pop('in_cg')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_service_policy_out(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        service_policy = ET.SubElement(tengigabitethernet, "service-policy", xmlns="urn:brocade.com:mgmt:brocade-policer")
        out = ET.SubElement(service_policy, "out")
        out.text = kwargs.pop('out')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_port_profile_port(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        port_profile_port = ET.SubElement(tengigabitethernet, "port-profile-port", xmlns="urn:brocade.com:mgmt:brocade-port-profile")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_port_profile_to_interface_associations_port_profile_port_port_to_port_profile_domain_association_profile_domain_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        port_profile_to_interface_associations = ET.SubElement(tengigabitethernet, "port-profile-to-interface-associations", xmlns="urn:brocade.com:mgmt:brocade-port-profile")
        port_profile_port = ET.SubElement(port_profile_to_interface_associations, "port-profile-port")
        port_to_port_profile_domain_association = ET.SubElement(port_profile_port, "port-to-port-profile-domain-association")
        profile_domain_name = ET.SubElement(port_to_port_profile_domain_association, "profile-domain-name")
        profile_domain_name.text = kwargs.pop('profile_domain_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_port_profile_to_interface_associations_port_profile_port_port_to_port_profile_associations_port_to_port_profile_association(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        port_profile_to_interface_associations = ET.SubElement(tengigabitethernet, "port-profile-to-interface-associations", xmlns="urn:brocade.com:mgmt:brocade-port-profile")
        port_profile_port = ET.SubElement(port_profile_to_interface_associations, "port-profile-port")
        port_to_port_profile_associations = ET.SubElement(port_profile_port, "port-to-port-profile-associations")
        port_to_port_profile_association = ET.SubElement(port_to_port_profile_associations, "port-to-port-profile-association")
        port_to_port_profile_association.text = kwargs.pop('port_to_port_profile_association')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_priority_tag_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        priority_tag_enable = ET.SubElement(tengigabitethernet, "priority-tag-enable", xmlns="urn:brocade.com:mgmt:brocade-qos")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_qos_default_cos(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(tengigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        default_cos = ET.SubElement(qos, "default-cos")
        default_cos.text = kwargs.pop('default_cos')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_qos_trust_trust_cos(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(tengigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        trust = ET.SubElement(qos, "trust")
        trust_cos = ET.SubElement(trust, "trust-cos")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_qos_trust_trust_dscp(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(tengigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        trust = ET.SubElement(qos, "trust")
        trust_dscp = ET.SubElement(trust, "trust-dscp")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_qos_cos_mutation(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(tengigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        cos_mutation = ET.SubElement(qos, "cos-mutation")
        cos_mutation.text = kwargs.pop('cos_mutation')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_qos_cos_traffic_class(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(tengigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        cos_traffic_class = ET.SubElement(qos, "cos-traffic-class")
        cos_traffic_class.text = kwargs.pop('cos_traffic_class')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_qos_dscp_mutation(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(tengigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        dscp_mutation = ET.SubElement(qos, "dscp-mutation")
        dscp_mutation.text = kwargs.pop('dscp_mutation')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_qos_dscp_traffic_class(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(tengigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        dscp_traffic_class = ET.SubElement(qos, "dscp-traffic-class")
        dscp_traffic_class.text = kwargs.pop('dscp_traffic_class')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_qos_dscp_cos(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(tengigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        dscp_cos = ET.SubElement(qos, "dscp-cos")
        dscp_cos.text = kwargs.pop('dscp_cos')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_qos_random_detect_traffic_class_red_tc_value(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(tengigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        random_detect = ET.SubElement(qos, "random-detect")
        traffic_class = ET.SubElement(random_detect, "traffic-class")
        red_tc_value = ET.SubElement(traffic_class, "red-tc-value")
        red_tc_value.text = kwargs.pop('red_tc_value')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_qos_random_detect_traffic_class_red_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(tengigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        random_detect = ET.SubElement(qos, "random-detect")
        traffic_class = ET.SubElement(random_detect, "traffic-class")
        red_tc_value_key = ET.SubElement(traffic_class, "red-tc-value")
        red_tc_value_key.text = kwargs.pop('red_tc_value')
        red_enable = ET.SubElement(traffic_class, "red-enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_qos_random_detect_traffic_class_red_profile_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(tengigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        random_detect = ET.SubElement(qos, "random-detect")
        traffic_class = ET.SubElement(random_detect, "traffic-class")
        red_tc_value_key = ET.SubElement(traffic_class, "red-tc-value")
        red_tc_value_key.text = kwargs.pop('red_tc_value')
        red_profile_id = ET.SubElement(traffic_class, "red-profile-id")
        red_profile_id.text = kwargs.pop('red_profile_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_qos_drop_monitor_drop_monitor_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(tengigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        drop_monitor = ET.SubElement(qos, "drop-monitor")
        drop_monitor_enable = ET.SubElement(drop_monitor, "drop-monitor-enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_qos_rcv_queue_cos_threshold_cos0_threshold(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(tengigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        rcv_queue = ET.SubElement(qos, "rcv-queue")
        cos_threshold = ET.SubElement(rcv_queue, "cos-threshold")
        cos0_threshold = ET.SubElement(cos_threshold, "cos0-threshold")
        cos0_threshold.text = kwargs.pop('cos0_threshold')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_qos_rcv_queue_cos_threshold_cos1_threshold(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(tengigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        rcv_queue = ET.SubElement(qos, "rcv-queue")
        cos_threshold = ET.SubElement(rcv_queue, "cos-threshold")
        cos1_threshold = ET.SubElement(cos_threshold, "cos1-threshold")
        cos1_threshold.text = kwargs.pop('cos1_threshold')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_qos_rcv_queue_cos_threshold_cos2_threshold(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(tengigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        rcv_queue = ET.SubElement(qos, "rcv-queue")
        cos_threshold = ET.SubElement(rcv_queue, "cos-threshold")
        cos2_threshold = ET.SubElement(cos_threshold, "cos2-threshold")
        cos2_threshold.text = kwargs.pop('cos2_threshold')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_qos_rcv_queue_cos_threshold_cos3_threshold(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(tengigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        rcv_queue = ET.SubElement(qos, "rcv-queue")
        cos_threshold = ET.SubElement(rcv_queue, "cos-threshold")
        cos3_threshold = ET.SubElement(cos_threshold, "cos3-threshold")
        cos3_threshold.text = kwargs.pop('cos3_threshold')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_qos_rcv_queue_cos_threshold_cos4_threshold(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(tengigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        rcv_queue = ET.SubElement(qos, "rcv-queue")
        cos_threshold = ET.SubElement(rcv_queue, "cos-threshold")
        cos4_threshold = ET.SubElement(cos_threshold, "cos4-threshold")
        cos4_threshold.text = kwargs.pop('cos4_threshold')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_qos_rcv_queue_cos_threshold_cos5_threshold(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(tengigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        rcv_queue = ET.SubElement(qos, "rcv-queue")
        cos_threshold = ET.SubElement(rcv_queue, "cos-threshold")
        cos5_threshold = ET.SubElement(cos_threshold, "cos5-threshold")
        cos5_threshold.text = kwargs.pop('cos5_threshold')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_qos_rcv_queue_cos_threshold_cos6_threshold(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(tengigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        rcv_queue = ET.SubElement(qos, "rcv-queue")
        cos_threshold = ET.SubElement(rcv_queue, "cos-threshold")
        cos6_threshold = ET.SubElement(cos_threshold, "cos6-threshold")
        cos6_threshold.text = kwargs.pop('cos6_threshold')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_qos_rcv_queue_cos_threshold_cos7_threshold(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(tengigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        rcv_queue = ET.SubElement(qos, "rcv-queue")
        cos_threshold = ET.SubElement(rcv_queue, "cos-threshold")
        cos7_threshold = ET.SubElement(cos_threshold, "cos7-threshold")
        cos7_threshold.text = kwargs.pop('cos7_threshold')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_qos_flowcontrol_link_level_flowcontrol_flowcontrol_tx(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(tengigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        flowcontrol = ET.SubElement(qos, "flowcontrol")
        link_level_flowcontrol = ET.SubElement(flowcontrol, "link-level-flowcontrol")
        flowcontrol_tx = ET.SubElement(link_level_flowcontrol, "flowcontrol-tx")
        flowcontrol_tx.text = kwargs.pop('flowcontrol_tx')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_qos_flowcontrol_link_level_flowcontrol_flowcontrol_rx(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(tengigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        flowcontrol = ET.SubElement(qos, "flowcontrol")
        link_level_flowcontrol = ET.SubElement(flowcontrol, "link-level-flowcontrol")
        flowcontrol_rx = ET.SubElement(link_level_flowcontrol, "flowcontrol-rx")
        flowcontrol_rx.text = kwargs.pop('flowcontrol_rx')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_qos_flowcontrol_pfc_pfc_cos(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(tengigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        flowcontrol = ET.SubElement(qos, "flowcontrol")
        pfc = ET.SubElement(flowcontrol, "pfc")
        pfc_cos = ET.SubElement(pfc, "pfc-cos")
        pfc_cos.text = kwargs.pop('pfc_cos')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_qos_flowcontrol_pfc_pfc_flowcontrol_tx(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(tengigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        flowcontrol = ET.SubElement(qos, "flowcontrol")
        pfc = ET.SubElement(flowcontrol, "pfc")
        pfc_cos_key = ET.SubElement(pfc, "pfc-cos")
        pfc_cos_key.text = kwargs.pop('pfc_cos')
        pfc_flowcontrol_tx = ET.SubElement(pfc, "pfc-flowcontrol-tx")
        pfc_flowcontrol_tx.text = kwargs.pop('pfc_flowcontrol_tx')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_qos_flowcontrol_pfc_pfc_flowcontrol_rx(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(tengigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        flowcontrol = ET.SubElement(qos, "flowcontrol")
        pfc = ET.SubElement(flowcontrol, "pfc")
        pfc_cos_key = ET.SubElement(pfc, "pfc-cos")
        pfc_cos_key.text = kwargs.pop('pfc_cos')
        pfc_flowcontrol_rx = ET.SubElement(pfc, "pfc-flowcontrol-rx")
        pfc_flowcontrol_rx.text = kwargs.pop('pfc_flowcontrol_rx')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_rmon_collection_ether_stats_entry_ether_stats_index(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        rmon = ET.SubElement(tengigabitethernet, "rmon", xmlns="urn:brocade.com:mgmt:brocade-rmon")
        collection = ET.SubElement(rmon, "collection")
        ether_stats_entry = ET.SubElement(collection, "ether-stats-entry")
        ether_stats_index = ET.SubElement(ether_stats_entry, "ether-stats-index")
        ether_stats_index.text = kwargs.pop('ether_stats_index')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_rmon_collection_ether_stats_entry_ether_stats_owner(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        rmon = ET.SubElement(tengigabitethernet, "rmon", xmlns="urn:brocade.com:mgmt:brocade-rmon")
        collection = ET.SubElement(rmon, "collection")
        ether_stats_entry = ET.SubElement(collection, "ether-stats-entry")
        ether_stats_index_key = ET.SubElement(ether_stats_entry, "ether-stats-index")
        ether_stats_index_key.text = kwargs.pop('ether_stats_index')
        ether_stats_owner = ET.SubElement(ether_stats_entry, "ether-stats-owner")
        ether_stats_owner.text = kwargs.pop('ether_stats_owner')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_rmon_collection_history_control_entry_history_control_index(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        rmon = ET.SubElement(tengigabitethernet, "rmon", xmlns="urn:brocade.com:mgmt:brocade-rmon")
        collection = ET.SubElement(rmon, "collection")
        history_control_entry = ET.SubElement(collection, "history-control-entry")
        history_control_index = ET.SubElement(history_control_entry, "history-control-index")
        history_control_index.text = kwargs.pop('history_control_index')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_rmon_collection_history_control_entry_history_control_buckets_requested(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        rmon = ET.SubElement(tengigabitethernet, "rmon", xmlns="urn:brocade.com:mgmt:brocade-rmon")
        collection = ET.SubElement(rmon, "collection")
        history_control_entry = ET.SubElement(collection, "history-control-entry")
        history_control_index_key = ET.SubElement(history_control_entry, "history-control-index")
        history_control_index_key.text = kwargs.pop('history_control_index')
        history_control_buckets_requested = ET.SubElement(history_control_entry, "history-control-buckets-requested")
        history_control_buckets_requested.text = kwargs.pop('history_control_buckets_requested')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_rmon_collection_history_control_entry_history_control_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        rmon = ET.SubElement(tengigabitethernet, "rmon", xmlns="urn:brocade.com:mgmt:brocade-rmon")
        collection = ET.SubElement(rmon, "collection")
        history_control_entry = ET.SubElement(collection, "history-control-entry")
        history_control_index_key = ET.SubElement(history_control_entry, "history-control-index")
        history_control_index_key.text = kwargs.pop('history_control_index')
        history_control_interval = ET.SubElement(history_control_entry, "history-control-interval")
        history_control_interval.text = kwargs.pop('history_control_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_rmon_collection_history_control_entry_history_control_owner(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        rmon = ET.SubElement(tengigabitethernet, "rmon", xmlns="urn:brocade.com:mgmt:brocade-rmon")
        collection = ET.SubElement(rmon, "collection")
        history_control_entry = ET.SubElement(collection, "history-control-entry")
        history_control_index_key = ET.SubElement(history_control_entry, "history-control-index")
        history_control_index_key.text = kwargs.pop('history_control_index')
        history_control_owner = ET.SubElement(history_control_entry, "history-control-owner")
        history_control_owner.text = kwargs.pop('history_control_owner')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_udld_udld_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        udld = ET.SubElement(tengigabitethernet, "udld", xmlns="urn:brocade.com:mgmt:brocade-udld")
        udld_enable = ET.SubElement(udld, "udld-enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_vlan_classifier_activate_group_groupid(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vlan = ET.SubElement(tengigabitethernet, "vlan", xmlns="urn:brocade.com:mgmt:brocade-vlan")
        classifier = ET.SubElement(vlan, "classifier")
        activate = ET.SubElement(classifier, "activate")
        group = ET.SubElement(activate, "group")
        groupid = ET.SubElement(group, "groupid")
        groupid.text = kwargs.pop('groupid')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_vlan_classifier_activate_group_vlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vlan = ET.SubElement(tengigabitethernet, "vlan", xmlns="urn:brocade.com:mgmt:brocade-vlan")
        classifier = ET.SubElement(vlan, "classifier")
        activate = ET.SubElement(classifier, "activate")
        group = ET.SubElement(activate, "group")
        groupid_key = ET.SubElement(group, "groupid")
        groupid_key.text = kwargs.pop('groupid')
        vlan = ET.SubElement(group, "vlan")
        vlan.text = kwargs.pop('vlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_bpdu_drop_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        bpdu_drop = ET.SubElement(tengigabitethernet, "bpdu-drop", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        enable = ET.SubElement(bpdu_drop, "enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_bpdu_drop_direction(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        bpdu_drop = ET.SubElement(tengigabitethernet, "bpdu-drop", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        direction = ET.SubElement(bpdu_drop, "direction")
        direction.text = kwargs.pop('direction')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_tunnel_tagged_ieee_bpdu(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        tunnel = ET.SubElement(tengigabitethernet, "tunnel", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        tagged_ieee_bpdu = ET.SubElement(tunnel, "tagged-ieee-bpdu")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_spanning_tree_autoedge(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(tengigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        autoedge = ET.SubElement(spanning_tree, "autoedge")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_spanning_tree_cost(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(tengigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        cost = ET.SubElement(spanning_tree, "cost")
        cost.text = kwargs.pop('cost')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_spanning_tree_portfast_portfastbasic(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(tengigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        portfast = ET.SubElement(spanning_tree, "portfast")
        portfastbasic = ET.SubElement(portfast, "portfastbasic")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_spanning_tree_portfast_bpdu_guard(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(tengigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        portfast = ET.SubElement(spanning_tree, "portfast")
        bpdu_guard = ET.SubElement(portfast, "bpdu-guard")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_spanning_tree_portfast_bpdu_filter(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(tengigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        portfast = ET.SubElement(spanning_tree, "portfast")
        bpdu_filter = ET.SubElement(portfast, "bpdu-filter")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_spanning_tree_edgeport_edgeportbasic(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(tengigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        edgeport = ET.SubElement(spanning_tree, "edgeport")
        edgeportbasic = ET.SubElement(edgeport, "edgeportbasic")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_spanning_tree_edgeport_bpdu_guard(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(tengigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        edgeport = ET.SubElement(spanning_tree, "edgeport")
        bpdu_guard = ET.SubElement(edgeport, "bpdu-guard")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_spanning_tree_edgeport_bpdu_filter(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(tengigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        edgeport = ET.SubElement(spanning_tree, "edgeport")
        bpdu_filter = ET.SubElement(edgeport, "bpdu-filter")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_spanning_tree_guard_root(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(tengigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        guard = ET.SubElement(spanning_tree, "guard")
        root = ET.SubElement(guard, "root")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_spanning_tree_hello_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(tengigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        hello_time = ET.SubElement(spanning_tree, "hello-time")
        hello_time.text = kwargs.pop('hello_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_spanning_tree_bpdu_mac(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(tengigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        bpdu_mac = ET.SubElement(spanning_tree, "bpdu-mac")
        bpdu_mac.text = kwargs.pop('bpdu_mac')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_spanning_tree_link_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(tengigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        link_type = ET.SubElement(spanning_tree, "link-type")
        link_type.text = kwargs.pop('link_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_spanning_tree_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(tengigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        priority = ET.SubElement(spanning_tree, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_spanning_tree_restricted_role(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(tengigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        restricted_role = ET.SubElement(spanning_tree, "restricted-role")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_spanning_tree_restricted_tcn(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(tengigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        restricted_tcn = ET.SubElement(spanning_tree, "restricted-tcn")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_spanning_tree_shutdown(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(tengigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        shutdown = ET.SubElement(spanning_tree, "shutdown")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_spanning_tree_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(tengigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        vlan = ET.SubElement(spanning_tree, "vlan")
        id = ET.SubElement(vlan, "id")
        id.text = kwargs.pop('id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_spanning_tree_vlan_cost(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(tengigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        vlan = ET.SubElement(spanning_tree, "vlan")
        id_key = ET.SubElement(vlan, "id")
        id_key.text = kwargs.pop('id')
        cost = ET.SubElement(vlan, "cost")
        cost.text = kwargs.pop('cost')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_spanning_tree_vlan_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(tengigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        vlan = ET.SubElement(spanning_tree, "vlan")
        id_key = ET.SubElement(vlan, "id")
        id_key.text = kwargs.pop('id')
        priority = ET.SubElement(vlan, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_spanning_tree_vlan_guard_root(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(tengigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        vlan = ET.SubElement(spanning_tree, "vlan")
        id_key = ET.SubElement(vlan, "id")
        id_key.text = kwargs.pop('id')
        guard = ET.SubElement(vlan, "guard")
        root = ET.SubElement(guard, "root")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_spanning_tree_instance_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(tengigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        instance = ET.SubElement(spanning_tree, "instance")
        id = ET.SubElement(instance, "id")
        id.text = kwargs.pop('id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_spanning_tree_instance_cost(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(tengigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        instance = ET.SubElement(spanning_tree, "instance")
        id_key = ET.SubElement(instance, "id")
        id_key.text = kwargs.pop('id')
        cost = ET.SubElement(instance, "cost")
        cost.text = kwargs.pop('cost')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_spanning_tree_instance_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(tengigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        instance = ET.SubElement(spanning_tree, "instance")
        id_key = ET.SubElement(instance, "id")
        id_key.text = kwargs.pop('id')
        priority = ET.SubElement(instance, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_spanning_tree_instance_restricted_role(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(tengigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        instance = ET.SubElement(spanning_tree, "instance")
        id_key = ET.SubElement(instance, "id")
        id_key.text = kwargs.pop('id')
        restricted_role = ET.SubElement(instance, "restricted-role")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_spanning_tree_instance_restricted_tcn(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(tengigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        instance = ET.SubElement(spanning_tree, "instance")
        id_key = ET.SubElement(instance, "id")
        id_key.text = kwargs.pop('id')
        restricted_tcn = ET.SubElement(instance, "restricted-tcn")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name = ET.SubElement(fortygigabitethernet, "name")
        name.text = kwargs.pop('name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_cee(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        cee = ET.SubElement(fortygigabitethernet, "cee")
        cee.text = kwargs.pop('cee')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ifindex(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ifindex = ET.SubElement(fortygigabitethernet, "ifindex")
        ifindex.text = kwargs.pop('ifindex')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_description(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        description = ET.SubElement(fortygigabitethernet, "description")
        description.text = kwargs.pop('description')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_shutdown(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        shutdown = ET.SubElement(fortygigabitethernet, "shutdown")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_channel_group_port_int(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        channel_group = ET.SubElement(fortygigabitethernet, "channel-group")
        port_int = ET.SubElement(channel_group, "port-int")
        port_int.text = kwargs.pop('port_int')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_channel_group_mode(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        channel_group = ET.SubElement(fortygigabitethernet, "channel-group")
        mode = ET.SubElement(channel_group, "mode")
        mode.text = kwargs.pop('mode')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_channel_group_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        channel_group = ET.SubElement(fortygigabitethernet, "channel-group")
        type = ET.SubElement(channel_group, "type")
        type.text = kwargs.pop('type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_mtu(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        mtu = ET.SubElement(fortygigabitethernet, "mtu")
        mtu.text = kwargs.pop('mtu')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_basic_basic(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport_basic = ET.SubElement(fortygigabitethernet, "switchport-basic")
        basic = ET.SubElement(switchport_basic, "basic")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_mode_vlan_mode(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        mode = ET.SubElement(switchport, "mode")
        vlan_mode = ET.SubElement(mode, "vlan-mode")
        vlan_mode.text = kwargs.pop('vlan_mode')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_mode_private_vlan_private_vlan_trunk_trunk_basic(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        mode = ET.SubElement(switchport, "mode")
        private_vlan = ET.SubElement(mode, "private-vlan")
        private_vlan_trunk = ET.SubElement(private_vlan, "private-vlan-trunk")
        trunk_basic = ET.SubElement(private_vlan_trunk, "trunk-basic")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_mode_private_vlan_private_vlan_trunk_trunk_promiscuous(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        mode = ET.SubElement(switchport, "mode")
        private_vlan = ET.SubElement(mode, "private-vlan")
        private_vlan_trunk = ET.SubElement(private_vlan, "private-vlan-trunk")
        trunk_promiscuous = ET.SubElement(private_vlan_trunk, "trunk-promiscuous")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_mode_private_vlan_private_vlan_trunk_trunk_host(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        mode = ET.SubElement(switchport, "mode")
        private_vlan = ET.SubElement(mode, "private-vlan")
        private_vlan_trunk = ET.SubElement(private_vlan, "private-vlan-trunk")
        trunk_host = ET.SubElement(private_vlan_trunk, "trunk-host")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_mode_private_vlan_promiscuous(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        mode = ET.SubElement(switchport, "mode")
        private_vlan = ET.SubElement(mode, "private-vlan")
        promiscuous = ET.SubElement(private_vlan, "promiscuous")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_mode_private_vlan_host(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        mode = ET.SubElement(switchport, "mode")
        private_vlan = ET.SubElement(mode, "private-vlan")
        host = ET.SubElement(private_vlan, "host")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_port_security_port_sec_max(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        port_security = ET.SubElement(switchport, "port-security")
        port_sec_max = ET.SubElement(port_security, "port-sec-max")
        port_sec_max.text = kwargs.pop('port_sec_max')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_port_security_port_sec_violation(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        port_security = ET.SubElement(switchport, "port-security")
        port_sec_violation = ET.SubElement(port_security, "port-sec-violation")
        port_sec_violation.text = kwargs.pop('port_sec_violation')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_port_security_port_secutiry_mac_address_mac_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        port_security = ET.SubElement(switchport, "port-security")
        port_secutiry_mac_address = ET.SubElement(port_security, "port-secutiry-mac-address")
        port_sec_vlan_key = ET.SubElement(port_secutiry_mac_address, "port-sec-vlan")
        port_sec_vlan_key.text = kwargs.pop('port_sec_vlan')
        mac_address = ET.SubElement(port_secutiry_mac_address, "mac-address")
        mac_address.text = kwargs.pop('mac_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_port_security_port_secutiry_mac_address_port_sec_vlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        port_security = ET.SubElement(switchport, "port-security")
        port_secutiry_mac_address = ET.SubElement(port_security, "port-secutiry-mac-address")
        mac_address_key = ET.SubElement(port_secutiry_mac_address, "mac-address")
        mac_address_key.text = kwargs.pop('mac_address')
        port_sec_vlan = ET.SubElement(port_secutiry_mac_address, "port-sec-vlan")
        port_sec_vlan.text = kwargs.pop('port_sec_vlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_port_security_sticky_sticky_flag(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        port_security = ET.SubElement(switchport, "port-security")
        sticky = ET.SubElement(port_security, "sticky")
        sticky_flag = ET.SubElement(sticky, "sticky-flag")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_port_security_sticky_port_secutiry_mac_address_mac_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        port_security = ET.SubElement(switchport, "port-security")
        sticky = ET.SubElement(port_security, "sticky")
        port_secutiry_mac_address = ET.SubElement(sticky, "port-secutiry-mac-address")
        port_sec_vlan_key = ET.SubElement(port_secutiry_mac_address, "port-sec-vlan")
        port_sec_vlan_key.text = kwargs.pop('port_sec_vlan')
        mac_address = ET.SubElement(port_secutiry_mac_address, "mac-address")
        mac_address.text = kwargs.pop('mac_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_port_security_sticky_port_secutiry_mac_address_port_sec_vlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        port_security = ET.SubElement(switchport, "port-security")
        sticky = ET.SubElement(port_security, "sticky")
        port_secutiry_mac_address = ET.SubElement(sticky, "port-secutiry-mac-address")
        mac_address_key = ET.SubElement(port_secutiry_mac_address, "mac-address")
        mac_address_key.text = kwargs.pop('mac_address')
        port_sec_vlan = ET.SubElement(port_secutiry_mac_address, "port-sec-vlan")
        port_sec_vlan.text = kwargs.pop('port_sec_vlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_port_security_allowed_ouis_oui(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        port_security = ET.SubElement(switchport, "port-security")
        allowed_ouis = ET.SubElement(port_security, "allowed-ouis")
        oui = ET.SubElement(allowed_ouis, "oui")
        oui.text = kwargs.pop('oui')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_port_security_shutdown_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        port_security = ET.SubElement(switchport, "port-security")
        shutdown_time = ET.SubElement(port_security, "shutdown-time")
        shutdown_time.text = kwargs.pop('shutdown_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_access_accessvlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        access = ET.SubElement(switchport, "access")
        accessvlan = ET.SubElement(access, "accessvlan")
        accessvlan.text = kwargs.pop('accessvlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_access_rspan_access_rspan_access_vlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        access = ET.SubElement(switchport, "access")
        rspan_access = ET.SubElement(access, "rspan-access")
        rspan_access_vlan = ET.SubElement(rspan_access, "rspan-access-vlan")
        rspan_access_vlan.text = kwargs.pop('rspan_access_vlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_access_mac_vlan_classification_access_vlan_access_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        access_mac_vlan_classification = ET.SubElement(switchport, "access-mac-vlan-classification")
        access = ET.SubElement(access_mac_vlan_classification, "access")
        vlan = ET.SubElement(access, "vlan")
        access_mac_address_key = ET.SubElement(vlan, "access-mac-address")
        access_mac_address_key.text = kwargs.pop('access_mac_address')
        access_vlan_id = ET.SubElement(vlan, "access-vlan-id")
        access_vlan_id.text = kwargs.pop('access_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_access_mac_vlan_classification_access_vlan_access_mac_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        access_mac_vlan_classification = ET.SubElement(switchport, "access-mac-vlan-classification")
        access = ET.SubElement(access_mac_vlan_classification, "access")
        vlan = ET.SubElement(access, "vlan")
        access_vlan_id_key = ET.SubElement(vlan, "access-vlan-id")
        access_vlan_id_key.text = kwargs.pop('access_vlan_id')
        access_mac_address = ET.SubElement(vlan, "access-mac-address")
        access_mac_address.text = kwargs.pop('access_mac_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_trunk_private_vlan_classification_private_vlan_trunk_allowed_vlan_add_trunk_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        trunk_private_vlan_classification = ET.SubElement(switchport, "trunk-private-vlan-classification")
        private_vlan = ET.SubElement(trunk_private_vlan_classification, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        add = ET.SubElement(vlan, "add")
        trunk_ctag_id_key = ET.SubElement(add, "trunk-ctag-id")
        trunk_ctag_id_key.text = kwargs.pop('trunk_ctag_id')
        trunk_vlan_id = ET.SubElement(add, "trunk-vlan-id")
        trunk_vlan_id.text = kwargs.pop('trunk_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_trunk_private_vlan_classification_private_vlan_trunk_allowed_vlan_add_trunk_ctag_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        trunk_private_vlan_classification = ET.SubElement(switchport, "trunk-private-vlan-classification")
        private_vlan = ET.SubElement(trunk_private_vlan_classification, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        add = ET.SubElement(vlan, "add")
        trunk_vlan_id_key = ET.SubElement(add, "trunk-vlan-id")
        trunk_vlan_id_key.text = kwargs.pop('trunk_vlan_id')
        trunk_ctag_id = ET.SubElement(add, "trunk-ctag-id")
        trunk_ctag_id.text = kwargs.pop('trunk_ctag_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_trunk_private_vlan_classification_private_vlan_trunk_allowed_vlan_remove_trunk_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        trunk_private_vlan_classification = ET.SubElement(switchport, "trunk-private-vlan-classification")
        private_vlan = ET.SubElement(trunk_private_vlan_classification, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        remove = ET.SubElement(vlan, "remove")
        trunk_ctag_id_key = ET.SubElement(remove, "trunk-ctag-id")
        trunk_ctag_id_key.text = kwargs.pop('trunk_ctag_id')
        trunk_vlan_id = ET.SubElement(remove, "trunk-vlan-id")
        trunk_vlan_id.text = kwargs.pop('trunk_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_trunk_private_vlan_classification_private_vlan_trunk_allowed_vlan_remove_trunk_ctag_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        trunk_private_vlan_classification = ET.SubElement(switchport, "trunk-private-vlan-classification")
        private_vlan = ET.SubElement(trunk_private_vlan_classification, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        remove = ET.SubElement(vlan, "remove")
        trunk_vlan_id_key = ET.SubElement(remove, "trunk-vlan-id")
        trunk_vlan_id_key.text = kwargs.pop('trunk_vlan_id')
        trunk_ctag_id = ET.SubElement(remove, "trunk-ctag-id")
        trunk_ctag_id.text = kwargs.pop('trunk_ctag_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_access_mac_group_vlan_classification_access_vlan_access_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        access_mac_group_vlan_classification = ET.SubElement(switchport, "access-mac-group-vlan-classification")
        access = ET.SubElement(access_mac_group_vlan_classification, "access")
        vlan = ET.SubElement(access, "vlan")
        access_mac_group_key = ET.SubElement(vlan, "access-mac-group")
        access_mac_group_key.text = kwargs.pop('access_mac_group')
        access_vlan_id = ET.SubElement(vlan, "access-vlan-id")
        access_vlan_id.text = kwargs.pop('access_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_access_mac_group_vlan_classification_access_vlan_access_mac_group(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        access_mac_group_vlan_classification = ET.SubElement(switchport, "access-mac-group-vlan-classification")
        access = ET.SubElement(access_mac_group_vlan_classification, "access")
        vlan = ET.SubElement(access, "vlan")
        access_vlan_id_key = ET.SubElement(vlan, "access-vlan-id")
        access_vlan_id_key.text = kwargs.pop('access_vlan_id')
        access_mac_group = ET.SubElement(vlan, "access-mac-group")
        access_mac_group.text = kwargs.pop('access_mac_group')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_trunk_allowed_vlan_all(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        all = ET.SubElement(vlan, "all")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_trunk_allowed_vlan_none(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        none = ET.SubElement(vlan, "none")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_trunk_allowed_vlan_add(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        add = ET.SubElement(vlan, "add")
        add.text = kwargs.pop('add')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_trunk_allowed_vlan_excpt(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        excpt = ET.SubElement(vlan, "except")
        excpt.text = kwargs.pop('excpt')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_trunk_allowed_vlan_remove(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        remove = ET.SubElement(vlan, "remove")
        remove.text = kwargs.pop('remove')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_trunk_allowed_vlanoper_vlan_add(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlanoper = ET.SubElement(allowed, "vlanoper")
        vlan = ET.SubElement(vlanoper, "vlan")
        add = ET.SubElement(vlan, "add")
        add.text = kwargs.pop('add')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_trunk_allowed_vlanoper_vlan_remove(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlanoper = ET.SubElement(allowed, "vlanoper")
        vlan = ET.SubElement(vlanoper, "vlan")
        remove = ET.SubElement(vlan, "remove")
        remove.text = kwargs.pop('remove')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_trunk_allowed_rspan_vlan_add_rspan_trunk_vlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        rspan_vlan = ET.SubElement(allowed, "rspan-vlan")
        add_rspan_trunk_vlan = ET.SubElement(rspan_vlan, "add-rspan-trunk-vlan")
        add_rspan_trunk_vlan.text = kwargs.pop('add_rspan_trunk_vlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_trunk_allowed_rspan_vlan_remove_rspan_trunk_vlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        rspan_vlan = ET.SubElement(allowed, "rspan-vlan")
        remove_rspan_trunk_vlan = ET.SubElement(rspan_vlan, "remove-rspan-trunk-vlan")
        remove_rspan_trunk_vlan.text = kwargs.pop('remove_rspan_trunk_vlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_trunk_allowed_trunk_rspan_vlan_classification_rspan_vlan_add_trunk_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        trunk_rspan_vlan_classification = ET.SubElement(allowed, "trunk-rspan-vlan-classification")
        rspan_vlan = ET.SubElement(trunk_rspan_vlan_classification, "rspan-vlan")
        add = ET.SubElement(rspan_vlan, "add")
        trunk_ctag_id_key = ET.SubElement(add, "trunk-ctag-id")
        trunk_ctag_id_key.text = kwargs.pop('trunk_ctag_id')
        trunk_vlan_id = ET.SubElement(add, "trunk-vlan-id")
        trunk_vlan_id.text = kwargs.pop('trunk_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_trunk_allowed_trunk_rspan_vlan_classification_rspan_vlan_add_trunk_ctag_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        trunk_rspan_vlan_classification = ET.SubElement(allowed, "trunk-rspan-vlan-classification")
        rspan_vlan = ET.SubElement(trunk_rspan_vlan_classification, "rspan-vlan")
        add = ET.SubElement(rspan_vlan, "add")
        trunk_vlan_id_key = ET.SubElement(add, "trunk-vlan-id")
        trunk_vlan_id_key.text = kwargs.pop('trunk_vlan_id')
        trunk_ctag_id = ET.SubElement(add, "trunk-ctag-id")
        trunk_ctag_id.text = kwargs.pop('trunk_ctag_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_trunk_allowed_trunk_rspan_vlan_classification_rspan_vlan_remove_trunk_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        trunk_rspan_vlan_classification = ET.SubElement(allowed, "trunk-rspan-vlan-classification")
        rspan_vlan = ET.SubElement(trunk_rspan_vlan_classification, "rspan-vlan")
        remove = ET.SubElement(rspan_vlan, "remove")
        trunk_ctag_id_key = ET.SubElement(remove, "trunk-ctag-id")
        trunk_ctag_id_key.text = kwargs.pop('trunk_ctag_id')
        trunk_vlan_id = ET.SubElement(remove, "trunk-vlan-id")
        trunk_vlan_id.text = kwargs.pop('trunk_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_trunk_allowed_trunk_rspan_vlan_classification_rspan_vlan_remove_trunk_ctag_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        trunk_rspan_vlan_classification = ET.SubElement(allowed, "trunk-rspan-vlan-classification")
        rspan_vlan = ET.SubElement(trunk_rspan_vlan_classification, "rspan-vlan")
        remove = ET.SubElement(rspan_vlan, "remove")
        trunk_vlan_id_key = ET.SubElement(remove, "trunk-vlan-id")
        trunk_vlan_id_key.text = kwargs.pop('trunk_vlan_id')
        trunk_ctag_id = ET.SubElement(remove, "trunk-ctag-id")
        trunk_ctag_id.text = kwargs.pop('trunk_ctag_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_trunk_trunk_vlan_classification_allowed_vlan_add_trunk_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        trunk_vlan_classification = ET.SubElement(trunk, "trunk-vlan-classification")
        allowed = ET.SubElement(trunk_vlan_classification, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        add = ET.SubElement(vlan, "add")
        trunk_vlan_id = ET.SubElement(add, "trunk-vlan-id")
        trunk_vlan_id.text = kwargs.pop('trunk_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_trunk_trunk_vlan_classification_allowed_vlan_add_trunk_ctag_range(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        trunk_vlan_classification = ET.SubElement(trunk, "trunk-vlan-classification")
        allowed = ET.SubElement(trunk_vlan_classification, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        add = ET.SubElement(vlan, "add")
        trunk_vlan_id_key = ET.SubElement(add, "trunk-vlan-id")
        trunk_vlan_id_key.text = kwargs.pop('trunk_vlan_id')
        trunk_ctag_range = ET.SubElement(add, "trunk-ctag-range")
        trunk_ctag_range.text = kwargs.pop('trunk_ctag_range')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_trunk_trunk_vlan_classification_allowed_vlan_remove_trunk_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        trunk_vlan_classification = ET.SubElement(trunk, "trunk-vlan-classification")
        allowed = ET.SubElement(trunk_vlan_classification, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        remove = ET.SubElement(vlan, "remove")
        trunk_vlan_id = ET.SubElement(remove, "trunk-vlan-id")
        trunk_vlan_id.text = kwargs.pop('trunk_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_trunk_trunk_vlan_classification_allowed_vlan_remove_trunk_ctag_range(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        trunk_vlan_classification = ET.SubElement(trunk, "trunk-vlan-classification")
        allowed = ET.SubElement(trunk_vlan_classification, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        remove = ET.SubElement(vlan, "remove")
        trunk_vlan_id_key = ET.SubElement(remove, "trunk-vlan-id")
        trunk_vlan_id_key.text = kwargs.pop('trunk_vlan_id')
        trunk_ctag_range = ET.SubElement(remove, "trunk-ctag-range")
        trunk_ctag_range.text = kwargs.pop('trunk_ctag_range')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_trunk_default_vlan_config_default_transparent_vlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        default_vlan_config = ET.SubElement(trunk, "default-vlan-config")
        default_transparent_vlan = ET.SubElement(default_vlan_config, "default-transparent-vlan")
        default_transparent_vlan.text = kwargs.pop('default_transparent_vlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_trunk_tag_native_vlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        tag = ET.SubElement(trunk, "tag")
        native_vlan = ET.SubElement(tag, "native-vlan")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_trunk_native_vlan_classification_native_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        native_vlan_classification = ET.SubElement(trunk, "native-vlan-classification")
        native_vlan_id = ET.SubElement(native_vlan_classification, "native-vlan-id")
        native_vlan_id.text = kwargs.pop('native_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_trunk_native_vlan_classification_native_vlan_ctag_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        native_vlan_classification = ET.SubElement(trunk, "native-vlan-classification")
        native_vlan_ctag_id = ET.SubElement(native_vlan_classification, "native-vlan-ctag-id")
        native_vlan_ctag_id.text = kwargs.pop('native_vlan_ctag_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_trunk_native_vlan_xtagged_config_native_vlan_id_xtagged(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        native_vlan_xtagged_config = ET.SubElement(trunk, "native-vlan-xtagged-config")
        native_vlan_id_xtagged = ET.SubElement(native_vlan_xtagged_config, "native-vlan-id-xtagged")
        native_vlan_id_xtagged.text = kwargs.pop('native_vlan_id_xtagged')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_trunk_native_vlan_xtagged_config_native_vlan_ctag_id_xtagged(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        native_vlan_xtagged_config = ET.SubElement(trunk, "native-vlan-xtagged-config")
        native_vlan_ctag_id_xtagged = ET.SubElement(native_vlan_xtagged_config, "native-vlan-ctag-id-xtagged")
        native_vlan_ctag_id_xtagged.text = kwargs.pop('native_vlan_ctag_id_xtagged')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_trunk_native_vlan_xtagged_config_native_vlan_egress_type_xtagged(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        native_vlan_xtagged_config = ET.SubElement(trunk, "native-vlan-xtagged-config")
        native_vlan_egress_type_xtagged = ET.SubElement(native_vlan_xtagged_config, "native-vlan-egress-type-xtagged")
        native_vlan_egress_type_xtagged.text = kwargs.pop('native_vlan_egress_type_xtagged')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_trunk_native_vlan_untagged_config_native_vlan_id_untagged(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        native_vlan_untagged_config = ET.SubElement(trunk, "native-vlan-untagged-config")
        native_vlan_id_untagged = ET.SubElement(native_vlan_untagged_config, "native-vlan-id-untagged")
        native_vlan_id_untagged.text = kwargs.pop('native_vlan_id_untagged')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_private_vlan_trunk_pvlan_tag_pvlan_tag_native_vlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        pvlan_tag = ET.SubElement(trunk, "pvlan-tag")
        pvlan_tag_native_vlan = ET.SubElement(pvlan_tag, "pvlan-tag-native-vlan")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_private_vlan_trunk_native_pvlanNativevlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        native = ET.SubElement(trunk, "native")
        pvlanNativevlan = ET.SubElement(native, "pvlanNativevlan")
        pvlanNativevlan.text = kwargs.pop('pvlanNativevlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_private_vlan_trunk_native_pvlan_native_vlan_ctag_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        native = ET.SubElement(trunk, "native")
        pvlan_native_vlan_ctag_id = ET.SubElement(native, "pvlan-native-vlan-ctag-id")
        pvlan_native_vlan_ctag_id.text = kwargs.pop('pvlan_native_vlan_ctag_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_private_vlan_trunk_allowed_vlan_pvlan_all(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        pvlan_all = ET.SubElement(vlan, "pvlan_all")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_private_vlan_trunk_allowed_vlan_pvlan_none(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        pvlan_none = ET.SubElement(vlan, "pvlan_none")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_private_vlan_trunk_allowed_vlan_pvlan_add(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        pvlan_add = ET.SubElement(vlan, "pvlan_add")
        pvlan_add.text = kwargs.pop('pvlan_add')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_private_vlan_trunk_allowed_vlan_pvlan_except(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        pvlan_except = ET.SubElement(vlan, "pvlan_except")
        pvlan_except.text = kwargs.pop('pvlan_except')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_private_vlan_trunk_allowed_vlan_pvlan_remove(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        pvlan_remove = ET.SubElement(vlan, "pvlan_remove")
        pvlan_remove.text = kwargs.pop('pvlan_remove')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_private_vlan_host_association_host_pri_pvlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        host_association = ET.SubElement(private_vlan, "host-association")
        host_pri_pvlan = ET.SubElement(host_association, "host-pri-pvlan")
        host_pri_pvlan.text = kwargs.pop('host_pri_pvlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_private_vlan_host_association_host_sec_pvlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        host_association = ET.SubElement(private_vlan, "host-association")
        host_sec_pvlan = ET.SubElement(host_association, "host-sec-pvlan")
        host_sec_pvlan.text = kwargs.pop('host_sec_pvlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_private_vlan_association_trunk_trunk_pri_pvlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        association = ET.SubElement(private_vlan, "association")
        trunk = ET.SubElement(association, "trunk")
        trunk_sec_pvlan_key = ET.SubElement(trunk, "trunk-sec-pvlan")
        trunk_sec_pvlan_key.text = kwargs.pop('trunk_sec_pvlan')
        trunk_pri_pvlan = ET.SubElement(trunk, "trunk-pri-pvlan")
        trunk_pri_pvlan.text = kwargs.pop('trunk_pri_pvlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_private_vlan_association_trunk_trunk_sec_pvlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        association = ET.SubElement(private_vlan, "association")
        trunk = ET.SubElement(association, "trunk")
        trunk_pri_pvlan_key = ET.SubElement(trunk, "trunk-pri-pvlan")
        trunk_pri_pvlan_key.text = kwargs.pop('trunk_pri_pvlan')
        trunk_sec_pvlan = ET.SubElement(trunk, "trunk-sec-pvlan")
        trunk_sec_pvlan.text = kwargs.pop('trunk_sec_pvlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_private_vlan_mapping_promis_pri_pvlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        mapping = ET.SubElement(private_vlan, "mapping")
        promis_pri_pvlan = ET.SubElement(mapping, "promis-pri-pvlan")
        promis_pri_pvlan.text = kwargs.pop('promis_pri_pvlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_private_vlan_mapping_oper(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        mapping = ET.SubElement(private_vlan, "mapping")
        promis_pri_pvlan_key = ET.SubElement(mapping, "promis-pri-pvlan")
        promis_pri_pvlan_key.text = kwargs.pop('promis_pri_pvlan')
        oper = ET.SubElement(mapping, "oper")
        oper.text = kwargs.pop('oper')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_private_vlan_mapping_promis_sec_pvlan_range(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        mapping = ET.SubElement(private_vlan, "mapping")
        promis_pri_pvlan_key = ET.SubElement(mapping, "promis-pri-pvlan")
        promis_pri_pvlan_key.text = kwargs.pop('promis_pri_pvlan')
        promis_sec_pvlan_range = ET.SubElement(mapping, "promis-sec-pvlan-range")
        promis_sec_pvlan_range.text = kwargs.pop('promis_sec_pvlan_range')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_access_mac_rspan_vlan_classification_access_vlan_access_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        access_mac_rspan_vlan_classification = ET.SubElement(switchport, "access-mac-rspan-vlan-classification")
        access = ET.SubElement(access_mac_rspan_vlan_classification, "access")
        vlan = ET.SubElement(access, "vlan")
        access_mac_address_key = ET.SubElement(vlan, "access-mac-address")
        access_mac_address_key.text = kwargs.pop('access_mac_address')
        access_vlan_id = ET.SubElement(vlan, "access-vlan-id")
        access_vlan_id.text = kwargs.pop('access_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_access_mac_rspan_vlan_classification_access_vlan_access_mac_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        access_mac_rspan_vlan_classification = ET.SubElement(switchport, "access-mac-rspan-vlan-classification")
        access = ET.SubElement(access_mac_rspan_vlan_classification, "access")
        vlan = ET.SubElement(access, "vlan")
        access_vlan_id_key = ET.SubElement(vlan, "access-vlan-id")
        access_vlan_id_key.text = kwargs.pop('access_vlan_id')
        access_mac_address = ET.SubElement(vlan, "access-mac-address")
        access_mac_address.text = kwargs.pop('access_mac_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_access_mac_group_rspan_vlan_classification_access_vlan_access_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        access_mac_group_rspan_vlan_classification = ET.SubElement(switchport, "access-mac-group-rspan-vlan-classification")
        access = ET.SubElement(access_mac_group_rspan_vlan_classification, "access")
        vlan = ET.SubElement(access, "vlan")
        access_mac_group_key = ET.SubElement(vlan, "access-mac-group")
        access_mac_group_key.text = kwargs.pop('access_mac_group')
        access_vlan_id = ET.SubElement(vlan, "access-vlan-id")
        access_vlan_id.text = kwargs.pop('access_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_access_mac_group_rspan_vlan_classification_access_vlan_access_mac_group(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        access_mac_group_rspan_vlan_classification = ET.SubElement(switchport, "access-mac-group-rspan-vlan-classification")
        access = ET.SubElement(access_mac_group_rspan_vlan_classification, "access")
        vlan = ET.SubElement(access, "vlan")
        access_vlan_id_key = ET.SubElement(vlan, "access-vlan-id")
        access_vlan_id_key.text = kwargs.pop('access_vlan_id')
        access_mac_group = ET.SubElement(vlan, "access-mac-group")
        access_mac_group.text = kwargs.pop('access_mac_group')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_mac_learning_mac_learn_disable_vlan_mac_learning_vlan_add(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        mac_learning = ET.SubElement(fortygigabitethernet, "mac-learning")
        mac_learn_disable = ET.SubElement(mac_learning, "mac-learn-disable")
        vlan = ET.SubElement(mac_learn_disable, "vlan")
        mac_learning_vlan_add = ET.SubElement(vlan, "mac-learning-vlan-add")
        mac_learning_vlan_add.text = kwargs.pop('mac_learning_vlan_add')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_mac_learning_mac_learn_disable_vlan_mac_learning_vlan_remove(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        mac_learning = ET.SubElement(fortygigabitethernet, "mac-learning")
        mac_learn_disable = ET.SubElement(mac_learning, "mac-learn-disable")
        vlan = ET.SubElement(mac_learn_disable, "vlan")
        mac_learning_vlan_remove = ET.SubElement(vlan, "mac-learning-vlan-remove")
        mac_learning_vlan_remove.text = kwargs.pop('mac_learning_vlan_remove')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_ip_config_mtu(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        ip_config = ET.SubElement(ip, "ip-config", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        mtu = ET.SubElement(ip_config, "mtu")
        mtu.text = kwargs.pop('mtu')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_ip_config_directed_broadcast(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        ip_config = ET.SubElement(ip, "ip-config", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        directed_broadcast = ET.SubElement(ip_config, "directed-broadcast")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_ip_config_proxy_arp(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        ip_config = ET.SubElement(ip, "ip-config", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        proxy_arp = ET.SubElement(ip_config, "proxy-arp")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_ip_config_arp_aging_timeout(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        ip_config = ET.SubElement(ip, "ip-config", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        arp_aging_timeout = ET.SubElement(ip_config, "arp-aging-timeout")
        arp_aging_timeout.text = kwargs.pop('arp_aging_timeout')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_ip_config_address_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        ip_config = ET.SubElement(ip, "ip-config", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        address = ET.SubElement(ip_config, "address")
        address = ET.SubElement(address, "address")
        address.text = kwargs.pop('address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_ip_config_address_secondary(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        ip_config = ET.SubElement(ip, "ip-config", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        address = ET.SubElement(ip_config, "address")
        address_key = ET.SubElement(address, "address")
        address_key.text = kwargs.pop('address')
        secondary = ET.SubElement(address, "secondary")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_ip_config_address_ospf_passive(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        ip_config = ET.SubElement(ip, "ip-config", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        address = ET.SubElement(ip_config, "address")
        address_key = ET.SubElement(address, "address")
        address_key.text = kwargs.pop('address')
        ospf_passive = ET.SubElement(address, "ospf-passive")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_ip_config_address_ospf_ignore(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        ip_config = ET.SubElement(ip, "ip-config", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        address = ET.SubElement(ip_config, "address")
        address_key = ET.SubElement(address, "address")
        address_key.text = kwargs.pop('address')
        ospf_ignore = ET.SubElement(address, "ospf-ignore")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_arp_node_config_arp_inspection_trust(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        arp_node_config = ET.SubElement(ip, "arp-node-config", xmlns="urn:brocade.com:mgmt:brocade-dai")
        arp = ET.SubElement(arp_node_config, "arp")
        inspection = ET.SubElement(arp, "inspection")
        trust = ET.SubElement(inspection, "trust")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_interface_fo_dhcp_conf_dhcp_relay_servers_relay_ip_addr(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        interface_fo_dhcp_conf = ET.SubElement(ip, "interface-fo-dhcp-conf", xmlns="urn:brocade.com:mgmt:brocade-dhcp")
        dhcp = ET.SubElement(interface_fo_dhcp_conf, "dhcp")
        relay = ET.SubElement(dhcp, "relay")
        servers = ET.SubElement(relay, "servers")
        server_vrf_name_key = ET.SubElement(servers, "server-vrf-name")
        server_vrf_name_key.text = kwargs.pop('server_vrf_name')
        relay_ip_addr = ET.SubElement(servers, "relay-ip-addr")
        relay_ip_addr.text = kwargs.pop('relay_ip_addr')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_interface_fo_dhcp_conf_dhcp_relay_servers_server_vrf_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        interface_fo_dhcp_conf = ET.SubElement(ip, "interface-fo-dhcp-conf", xmlns="urn:brocade.com:mgmt:brocade-dhcp")
        dhcp = ET.SubElement(interface_fo_dhcp_conf, "dhcp")
        relay = ET.SubElement(dhcp, "relay")
        servers = ET.SubElement(relay, "servers")
        relay_ip_addr_key = ET.SubElement(servers, "relay-ip-addr")
        relay_ip_addr_key.text = kwargs.pop('relay_ip_addr')
        server_vrf_name = ET.SubElement(servers, "server-vrf-name")
        server_vrf_name.text = kwargs.pop('server_vrf_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_interface_fo_dhcp_conf_dhcp_relay_gateway(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        interface_fo_dhcp_conf = ET.SubElement(ip, "interface-fo-dhcp-conf", xmlns="urn:brocade.com:mgmt:brocade-dhcp")
        dhcp = ET.SubElement(interface_fo_dhcp_conf, "dhcp")
        relay = ET.SubElement(dhcp, "relay")
        gateway = ET.SubElement(relay, "gateway")
        gateway.text = kwargs.pop('gateway')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_icmp_echo_reply(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        icmp = ET.SubElement(ip, "icmp", xmlns="urn:brocade.com:mgmt:brocade-icmp")
        echo_reply = ET.SubElement(icmp, "echo-reply")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_icmp_rate_limiting(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        icmp = ET.SubElement(ip, "icmp", xmlns="urn:brocade.com:mgmt:brocade-icmp")
        rate_limiting = ET.SubElement(icmp, "rate-limiting")
        rate_limiting.text = kwargs.pop('rate_limiting')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_icmp_unreachable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        icmp = ET.SubElement(ip, "icmp", xmlns="urn:brocade.com:mgmt:brocade-icmp")
        unreachable = ET.SubElement(icmp, "unreachable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_icmp_redirect(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        icmp = ET.SubElement(ip, "icmp", xmlns="urn:brocade.com:mgmt:brocade-icmp")
        redirect = ET.SubElement(icmp, "redirect")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_icmp_address_mask(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        icmp = ET.SubElement(ip, "icmp", xmlns="urn:brocade.com:mgmt:brocade-icmp")
        address_mask = ET.SubElement(icmp, "address-mask")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_igmp_phy_intf_cfg_igmp_last_member_query_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        igmp_phy_intf_cfg = ET.SubElement(ip, "igmp-phy-intf-cfg", xmlns="urn:brocade.com:mgmt:brocade-igmp")
        igmp = ET.SubElement(igmp_phy_intf_cfg, "igmp")
        last_member_query_interval = ET.SubElement(igmp, "last-member-query-interval")
        last_member_query_interval.text = kwargs.pop('last_member_query_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_igmp_phy_intf_cfg_igmp_query_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        igmp_phy_intf_cfg = ET.SubElement(ip, "igmp-phy-intf-cfg", xmlns="urn:brocade.com:mgmt:brocade-igmp")
        igmp = ET.SubElement(igmp_phy_intf_cfg, "igmp")
        query_interval = ET.SubElement(igmp, "query-interval")
        query_interval.text = kwargs.pop('query_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_igmp_phy_intf_cfg_igmp_query_max_response_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        igmp_phy_intf_cfg = ET.SubElement(ip, "igmp-phy-intf-cfg", xmlns="urn:brocade.com:mgmt:brocade-igmp")
        igmp = ET.SubElement(igmp_phy_intf_cfg, "igmp")
        query_max_response_time = ET.SubElement(igmp, "query-max-response-time")
        query_max_response_time.text = kwargs.pop('query_max_response_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_igmp_phy_intf_cfg_igmp_immediate_leave(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        igmp_phy_intf_cfg = ET.SubElement(ip, "igmp-phy-intf-cfg", xmlns="urn:brocade.com:mgmt:brocade-igmp")
        igmp = ET.SubElement(igmp_phy_intf_cfg, "igmp")
        immediate_leave = ET.SubElement(igmp, "immediate-leave")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_igmp_phy_intf_cfg_igmp_static_group_sg_addr(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        igmp_phy_intf_cfg = ET.SubElement(ip, "igmp-phy-intf-cfg", xmlns="urn:brocade.com:mgmt:brocade-igmp")
        igmp = ET.SubElement(igmp_phy_intf_cfg, "igmp")
        static_group = ET.SubElement(igmp, "static-group")
        sg_addr = ET.SubElement(static_group, "sg-addr")
        sg_addr.text = kwargs.pop('sg_addr')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_interface_fo_ospf_conf_ospf1_area(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        area = ET.SubElement(ospf1, "area")
        area.text = kwargs.pop('area')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_interface_fo_ospf_conf_ospf1_auth_change_wait_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        auth_change_wait_time = ET.SubElement(ospf1, "auth-change-wait-time")
        auth_change_wait_time.text = kwargs.pop('auth_change_wait_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_interface_fo_ospf_conf_ospf1_authentication_key_no_encrypt_auth_key_table_no_encrypt_auth_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        authentication_key = ET.SubElement(ospf1, "authentication-key")
        no_encrypt_auth_key_table = ET.SubElement(authentication_key, "no-encrypt-auth-key-table")
        no_encrypt_auth_key = ET.SubElement(no_encrypt_auth_key_table, "no-encrypt-auth-key")
        no_encrypt_auth_key.text = kwargs.pop('no_encrypt_auth_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_interface_fo_ospf_conf_ospf1_authentication_key_auth_key_table_encrypttype(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        authentication_key = ET.SubElement(ospf1, "authentication-key")
        auth_key_table = ET.SubElement(authentication_key, "auth-key-table")
        encrypttype = ET.SubElement(auth_key_table, "encrypttype")
        encrypttype.text = kwargs.pop('encrypttype')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_interface_fo_ospf_conf_ospf1_authentication_key_auth_key_table_auth_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        authentication_key = ET.SubElement(ospf1, "authentication-key")
        auth_key_table = ET.SubElement(authentication_key, "auth-key-table")
        auth_key = ET.SubElement(auth_key_table, "auth-key")
        auth_key.text = kwargs.pop('auth_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_interface_fo_ospf_conf_ospf1_dead_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        dead_interval = ET.SubElement(ospf1, "dead-interval")
        dead_interval.text = kwargs.pop('dead_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_interface_fo_ospf_conf_ospf1_hello_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        hello_interval = ET.SubElement(ospf1, "hello-interval")
        hello_interval.text = kwargs.pop('hello_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_interface_fo_ospf_conf_ospf1_retransmit_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        retransmit_interval = ET.SubElement(ospf1, "retransmit-interval")
        retransmit_interval.text = kwargs.pop('retransmit_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_interface_fo_ospf_conf_ospf1_transmit_delay(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        transmit_delay = ET.SubElement(ospf1, "transmit-delay")
        transmit_delay.text = kwargs.pop('transmit_delay')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_interface_fo_ospf_conf_ospf1_md5_authentication_key_activation_wait_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        md5_authentication = ET.SubElement(ospf1, "md5-authentication")
        key_activation_wait_time = ET.SubElement(md5_authentication, "key-activation-wait-time")
        key_activation_wait_time.text = kwargs.pop('key_activation_wait_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_interface_fo_ospf_conf_ospf1_md5_authentication_no_encrypt_key_table_no_encrypt_key_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        md5_authentication = ET.SubElement(ospf1, "md5-authentication")
        no_encrypt_key_table = ET.SubElement(md5_authentication, "no-encrypt-key-table")
        no_encrypt_key_id = ET.SubElement(no_encrypt_key_table, "no-encrypt-key-id")
        no_encrypt_key_id.text = kwargs.pop('no_encrypt_key_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_interface_fo_ospf_conf_ospf1_md5_authentication_no_encrypt_key_table_no_encrypt_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        md5_authentication = ET.SubElement(ospf1, "md5-authentication")
        no_encrypt_key_table = ET.SubElement(md5_authentication, "no-encrypt-key-table")
        no_encrypt_key = ET.SubElement(no_encrypt_key_table, "no-encrypt-key")
        no_encrypt_key.text = kwargs.pop('no_encrypt_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_interface_fo_ospf_conf_ospf1_md5_authentication_key_table_key_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        md5_authentication = ET.SubElement(ospf1, "md5-authentication")
        key_table = ET.SubElement(md5_authentication, "key-table")
        key_id = ET.SubElement(key_table, "key-id")
        key_id.text = kwargs.pop('key_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_interface_fo_ospf_conf_ospf1_md5_authentication_key_table_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        md5_authentication = ET.SubElement(ospf1, "md5-authentication")
        key_table = ET.SubElement(md5_authentication, "key-table")
        key = ET.SubElement(key_table, "key")
        key.text = kwargs.pop('key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_interface_fo_ospf_conf_ospf1_md5_authentication_key_table_md5_authentication_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        md5_authentication = ET.SubElement(ospf1, "md5-authentication")
        key_table = ET.SubElement(md5_authentication, "key-table")
        md5_authentication_key = ET.SubElement(key_table, "md5-authentication-key")
        md5_authentication_key.text = kwargs.pop('md5_authentication_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_interface_fo_ospf_conf_ospf1_cost(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        cost = ET.SubElement(ospf1, "cost")
        cost.text = kwargs.pop('cost')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_interface_fo_ospf_conf_ospf1_database_filter_all_out(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        database_filter = ET.SubElement(ospf1, "database-filter")
        all_out = ET.SubElement(database_filter, "all-out")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_interface_fo_ospf_conf_ospf1_database_filter_all_external(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        database_filter = ET.SubElement(ospf1, "database-filter")
        all_external = ET.SubElement(database_filter, "all-external")
        all_external.text = kwargs.pop('all_external')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_interface_fo_ospf_conf_ospf1_database_filter_all_summary_external(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        database_filter = ET.SubElement(ospf1, "database-filter")
        all_summary_external = ET.SubElement(database_filter, "all-summary-external")
        all_summary_external.text = kwargs.pop('all_summary_external')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_interface_fo_ospf_conf_ospf1_mtu_ignore(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        mtu_ignore = ET.SubElement(ospf1, "mtu-ignore")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_interface_fo_ospf_conf_ospf1_network(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        network = ET.SubElement(ospf1, "network")
        network.text = kwargs.pop('network')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_interface_fo_ospf_conf_ospf1_active(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        active = ET.SubElement(ospf1, "active")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_interface_fo_ospf_conf_ospf1_passive(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        passive = ET.SubElement(ospf1, "passive")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_interface_fo_ospf_conf_ospf1_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        priority = ET.SubElement(ospf1, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_interface_fo_ospf_conf_ospf1_bfd_intf_bfd_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        bfd = ET.SubElement(ospf1, "bfd")
        intf_bfd_enable = ET.SubElement(bfd, "intf-bfd-enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_pim_intf_phy_cont_pim_int_cmd_pim_sparse(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        pim_intf_phy_cont = ET.SubElement(ip, "pim-intf-phy-cont", xmlns="urn:brocade.com:mgmt:brocade-pim")
        pim_int_cmd = ET.SubElement(pim_intf_phy_cont, "pim-int-cmd")
        pim_sparse = ET.SubElement(pim_int_cmd, "pim-sparse")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_pim_intf_phy_cont_pim_int_cmd_pim_neighbor_filter(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        pim_intf_phy_cont = ET.SubElement(ip, "pim-intf-phy-cont", xmlns="urn:brocade.com:mgmt:brocade-pim")
        pim_int_cmd = ET.SubElement(pim_intf_phy_cont, "pim-int-cmd")
        pim = ET.SubElement(pim_int_cmd, "pim")
        neighbor_filter = ET.SubElement(pim, "neighbor-filter")
        neighbor_filter.text = kwargs.pop('neighbor_filter')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_pim_intf_phy_cont_pim_int_cmd_pim_dr_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        pim_intf_phy_cont = ET.SubElement(ip, "pim-intf-phy-cont", xmlns="urn:brocade.com:mgmt:brocade-pim")
        pim_int_cmd = ET.SubElement(pim_intf_phy_cont, "pim-int-cmd")
        pim = ET.SubElement(pim_int_cmd, "pim")
        dr_priority = ET.SubElement(pim, "dr-priority")
        dr_priority.text = kwargs.pop('dr_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_pim_intf_phy_cont_pim_int_cmd_mcast_bdry_prefix_list(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        pim_intf_phy_cont = ET.SubElement(ip, "pim-intf-phy-cont", xmlns="urn:brocade.com:mgmt:brocade-pim")
        pim_int_cmd = ET.SubElement(pim_intf_phy_cont, "pim-int-cmd")
        mcast_bdry_prefix_list = ET.SubElement(pim_int_cmd, "mcast-bdry-prefix-list")
        mcast_bdry_prefix_list.text = kwargs.pop('mcast_bdry_prefix_list')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_vrf_forwarding(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrf = ET.SubElement(fortygigabitethernet, "vrf")
        forwarding = ET.SubElement(vrf, "forwarding")
        forwarding.text = kwargs.pop('forwarding')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_raguard(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        raguard = ET.SubElement(ipv6, "raguard")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_ipv6_config_address_use_link_local_only(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        address = ET.SubElement(ipv6_config, "address")
        use_link_local_only = ET.SubElement(address, "use-link-local-only")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_ipv6_config_address_link_local_config_link_local_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        address = ET.SubElement(ipv6_config, "address")
        link_local_config = ET.SubElement(address, "link-local-config")
        link_local_address = ET.SubElement(link_local_config, "link-local-address")
        link_local_address.text = kwargs.pop('link_local_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_ipv6_config_address_link_local_config_link_local(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        address = ET.SubElement(ipv6_config, "address")
        link_local_config = ET.SubElement(address, "link-local-config")
        link_local = ET.SubElement(link_local_config, "link-local")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_ipv6_config_address_ipv6_address_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        address = ET.SubElement(ipv6_config, "address")
        ipv6_address = ET.SubElement(address, "ipv6-address")
        address = ET.SubElement(ipv6_address, "address")
        address.text = kwargs.pop('address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_ipv6_config_address_ipv6_address_secondary(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        address = ET.SubElement(ipv6_config, "address")
        ipv6_address = ET.SubElement(address, "ipv6-address")
        address_key = ET.SubElement(ipv6_address, "address")
        address_key.text = kwargs.pop('address')
        secondary = ET.SubElement(ipv6_address, "secondary")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_ipv6_config_address_ipv6_address_eui_config_eui64(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        address = ET.SubElement(ipv6_config, "address")
        ipv6_address = ET.SubElement(address, "ipv6-address")
        address_key = ET.SubElement(ipv6_address, "address")
        address_key.text = kwargs.pop('address')
        eui_config = ET.SubElement(ipv6_address, "eui-config")
        eui64 = ET.SubElement(eui_config, "eui64")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_ipv6_config_address_ipv6_address_eui_config_eui_secondary(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        address = ET.SubElement(ipv6_config, "address")
        ipv6_address = ET.SubElement(address, "ipv6-address")
        address_key = ET.SubElement(ipv6_address, "address")
        address_key.text = kwargs.pop('address')
        eui_config = ET.SubElement(ipv6_address, "eui-config")
        eui_secondary = ET.SubElement(eui_config, "eui-secondary")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_ipv6_config_address_ipv6_address_anycast(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        address = ET.SubElement(ipv6_config, "address")
        ipv6_address = ET.SubElement(address, "ipv6-address")
        address_key = ET.SubElement(ipv6_address, "address")
        address_key.text = kwargs.pop('address')
        anycast = ET.SubElement(ipv6_address, "anycast")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_ipv6_config_mtu(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        mtu = ET.SubElement(ipv6_config, "mtu")
        mtu.text = kwargs.pop('mtu')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_interface_phy_dhcp_conf_dhcp_relay_servers_relay_ip_addr(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        interface_phy_dhcp_conf = ET.SubElement(ipv6, "interface-phy-dhcp-conf", xmlns="urn:brocade.com:mgmt:brocade-dhcpv6")
        dhcp = ET.SubElement(interface_phy_dhcp_conf, "dhcp")
        relay = ET.SubElement(dhcp, "relay")
        servers = ET.SubElement(relay, "servers")
        relay_ip_addr = ET.SubElement(servers, "relay-ip-addr")
        relay_ip_addr.text = kwargs.pop('relay_ip_addr')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_interface_phy_dhcp_conf_dhcp_relay_servers_server_vrf_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        interface_phy_dhcp_conf = ET.SubElement(ipv6, "interface-phy-dhcp-conf", xmlns="urn:brocade.com:mgmt:brocade-dhcpv6")
        dhcp = ET.SubElement(interface_phy_dhcp_conf, "dhcp")
        relay = ET.SubElement(dhcp, "relay")
        servers = ET.SubElement(relay, "servers")
        relay_ip_addr_key = ET.SubElement(servers, "relay-ip-addr")
        relay_ip_addr_key.text = kwargs.pop('relay_ip_addr')
        server_vrf_name = ET.SubElement(servers, "server-vrf-name")
        server_vrf_name.text = kwargs.pop('server_vrf_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_interface_phy_dhcp_conf_dhcp_relay_servers_interface_interface_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        interface_phy_dhcp_conf = ET.SubElement(ipv6, "interface-phy-dhcp-conf", xmlns="urn:brocade.com:mgmt:brocade-dhcpv6")
        dhcp = ET.SubElement(interface_phy_dhcp_conf, "dhcp")
        relay = ET.SubElement(dhcp, "relay")
        servers = ET.SubElement(relay, "servers")
        relay_ip_addr_key = ET.SubElement(servers, "relay-ip-addr")
        relay_ip_addr_key.text = kwargs.pop('relay_ip_addr')
        interface = ET.SubElement(servers, "interface")
        interface_type = ET.SubElement(interface, "interface-type")
        interface_type.text = kwargs.pop('interface_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_interface_phy_dhcp_conf_dhcp_relay_servers_interface_interface_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        interface_phy_dhcp_conf = ET.SubElement(ipv6, "interface-phy-dhcp-conf", xmlns="urn:brocade.com:mgmt:brocade-dhcpv6")
        dhcp = ET.SubElement(interface_phy_dhcp_conf, "dhcp")
        relay = ET.SubElement(dhcp, "relay")
        servers = ET.SubElement(relay, "servers")
        relay_ip_addr_key = ET.SubElement(servers, "relay-ip-addr")
        relay_ip_addr_key.text = kwargs.pop('relay_ip_addr')
        interface = ET.SubElement(servers, "interface")
        interface_name = ET.SubElement(interface, "interface-name")
        interface_name.text = kwargs.pop('interface_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_icmpv6_echo_reply(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        icmpv6 = ET.SubElement(ipv6, "icmpv6", xmlns="urn:brocade.com:mgmt:brocade-icmp")
        echo_reply = ET.SubElement(icmpv6, "echo-reply")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_icmpv6_rate_limiting(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        icmpv6 = ET.SubElement(ipv6, "icmpv6", xmlns="urn:brocade.com:mgmt:brocade-icmp")
        rate_limiting = ET.SubElement(icmpv6, "rate-limiting")
        rate_limiting.text = kwargs.pop('rate_limiting')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_icmpv6_unreachable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        icmpv6 = ET.SubElement(ipv6, "icmpv6", xmlns="urn:brocade.com:mgmt:brocade-icmp")
        unreachable = ET.SubElement(icmpv6, "unreachable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_icmpv6_redirect(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        icmpv6 = ET.SubElement(ipv6, "icmpv6", xmlns="urn:brocade.com:mgmt:brocade-icmp")
        redirect = ET.SubElement(icmpv6, "redirect")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_access_group_ipv6_access_list(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        access_group = ET.SubElement(ipv6, "access-group", xmlns="urn:brocade.com:mgmt:brocade-ipv6-access-list")
        ip_direction_key = ET.SubElement(access_group, "ip-direction")
        ip_direction_key.text = kwargs.pop('ip_direction')
        ipv6_access_list = ET.SubElement(access_group, "ipv6-access-list")
        ipv6_access_list.text = kwargs.pop('ipv6_access_list')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_access_group_ip_direction(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        access_group = ET.SubElement(ipv6, "access-group", xmlns="urn:brocade.com:mgmt:brocade-ipv6-access-list")
        ipv6_access_list_key = ET.SubElement(access_group, "ipv6-access-list")
        ipv6_access_list_key.text = kwargs.pop('ipv6_access_list')
        ip_direction = ET.SubElement(access_group, "ip-direction")
        ip_direction.text = kwargs.pop('ip_direction')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_access_group_traffic_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        access_group = ET.SubElement(ipv6, "access-group", xmlns="urn:brocade.com:mgmt:brocade-ipv6-access-list")
        ipv6_access_list_key = ET.SubElement(access_group, "ipv6-access-list")
        ipv6_access_list_key.text = kwargs.pop('ipv6_access_list')
        ip_direction_key = ET.SubElement(access_group, "ip-direction")
        ip_direction_key.text = kwargs.pop('ip_direction')
        traffic_type = ET.SubElement(access_group, "traffic-type")
        traffic_type.text = kwargs.pop('traffic_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_policy_route_map_ipv6_route_map_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        policy = ET.SubElement(ipv6, "policy", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        route_map = ET.SubElement(policy, "route-map")
        ipv6_route_map_name = ET.SubElement(route_map, "ipv6-route-map-name")
        ipv6_route_map_name.text = kwargs.pop('ipv6_route_map_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_vrrp_suppress_interface_ra(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        vrrp_suppress_interface_ra = ET.SubElement(ipv6_intf_cmds, "vrrp-suppress-interface-ra")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_managed_config_flag(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        managed_config_flag = ET.SubElement(nd, "managed-config-flag")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_other_config_flag(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        other_config_flag = ET.SubElement(nd, "other-config-flag")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_broadcast_mac_trap(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        broadcast_mac_trap = ET.SubElement(nd, "broadcast-mac-trap")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_ra_lifetime(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        ra_lifetime = ET.SubElement(nd, "ra-lifetime")
        ra_lifetime.text = kwargs.pop('ra_lifetime')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_reachable_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        reachable_time = ET.SubElement(nd, "reachable-time")
        reachable_time.text = kwargs.pop('reachable_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_mtu(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        mtu = ET.SubElement(nd, "mtu")
        mtu.text = kwargs.pop('mtu')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_retrans_timer(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        retrans_timer = ET.SubElement(nd, "retrans-timer")
        retrans_timer.text = kwargs.pop('retrans_timer')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_hoplimit(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        hoplimit = ET.SubElement(nd, "hoplimit")
        hoplimit.text = kwargs.pop('hoplimit')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_ns_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        ns_interval = ET.SubElement(nd, "ns-interval")
        ns_interval.text = kwargs.pop('ns_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_proxy(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        proxy = ET.SubElement(nd, "proxy")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_suppress_ra_suppress_ra_flag(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        suppress_ra = ET.SubElement(nd, "suppress-ra")
        suppress_ra_flag = ET.SubElement(suppress_ra, "suppress-ra-flag")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_suppress_ra_suppress_ra_mtu(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        suppress_ra = ET.SubElement(nd, "suppress-ra")
        suppress_ra_mtu = ET.SubElement(suppress_ra, "suppress-ra-mtu")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_suppress_ra_suppress_ra_all(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        suppress_ra = ET.SubElement(nd, "suppress-ra")
        suppress_ra_all = ET.SubElement(suppress_ra, "suppress-ra-all")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_ra_interval_max_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        ra_interval = ET.SubElement(nd, "ra-interval")
        max_interval = ET.SubElement(ra_interval, "max-interval")
        max_interval.text = kwargs.pop('max_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_ra_interval_min(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        ra_interval = ET.SubElement(nd, "ra-interval")
        min = ET.SubElement(ra_interval, "min")
        min.text = kwargs.pop('min')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_dad_attempts(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        dad = ET.SubElement(nd, "dad")
        attempts = ET.SubElement(dad, "attempts")
        attempts.text = kwargs.pop('attempts')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_dad_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        dad = ET.SubElement(nd, "dad")
        time = ET.SubElement(dad, "time")
        time.text = kwargs.pop('time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_nud_retry_base(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        nud = ET.SubElement(nd, "nud")
        retry = ET.SubElement(nud, "retry")
        base = ET.SubElement(retry, "base")
        base.text = kwargs.pop('base')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_nud_retry_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        nud = ET.SubElement(nd, "nud")
        retry = ET.SubElement(nud, "retry")
        interval = ET.SubElement(retry, "interval")
        interval.text = kwargs.pop('interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_nud_retry_max_attempts(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        nud = ET.SubElement(nd, "nud")
        retry = ET.SubElement(nud, "retry")
        max_attempts = ET.SubElement(retry, "max-attempts")
        max_attempts.text = kwargs.pop('max_attempts')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_cache_expire(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        cache = ET.SubElement(nd, "cache")
        expire = ET.SubElement(cache, "expire")
        expire.text = kwargs.pop('expire')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_prefix_prefix_ipv6_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        prefix = ET.SubElement(nd, "prefix")
        prefix_ipv6_address = ET.SubElement(prefix, "prefix-ipv6-address")
        prefix_ipv6_address.text = kwargs.pop('prefix_ipv6_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_prefix_lifetime_ch_valid_type_ca_no_advertise_no_advertise(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        prefix = ET.SubElement(nd, "prefix")
        prefix_ipv6_address_key = ET.SubElement(prefix, "prefix-ipv6-address")
        prefix_ipv6_address_key.text = kwargs.pop('prefix_ipv6_address')
        lifetime = ET.SubElement(prefix, "lifetime")
        ch_valid_type = ET.SubElement(lifetime, "ch-valid-type")
        ca_no_advertise = ET.SubElement(ch_valid_type, "ca-no-advertise")
        no_advertise = ET.SubElement(ca_no_advertise, "no-advertise")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_prefix_lifetime_ch_valid_type_ca_valid_lifetime_valid_lifetime(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        prefix = ET.SubElement(nd, "prefix")
        prefix_ipv6_address_key = ET.SubElement(prefix, "prefix-ipv6-address")
        prefix_ipv6_address_key.text = kwargs.pop('prefix_ipv6_address')
        lifetime = ET.SubElement(prefix, "lifetime")
        ch_valid_type = ET.SubElement(lifetime, "ch-valid-type")
        ca_valid_lifetime = ET.SubElement(ch_valid_type, "ca-valid-lifetime")
        valid_lifetime = ET.SubElement(ca_valid_lifetime, "valid-lifetime")
        valid_lifetime.text = kwargs.pop('valid_lifetime')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_prefix_lifetime_ch_valid_type_ca_valid_infinite_valid_infinite(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        prefix = ET.SubElement(nd, "prefix")
        prefix_ipv6_address_key = ET.SubElement(prefix, "prefix-ipv6-address")
        prefix_ipv6_address_key.text = kwargs.pop('prefix_ipv6_address')
        lifetime = ET.SubElement(prefix, "lifetime")
        ch_valid_type = ET.SubElement(lifetime, "ch-valid-type")
        ca_valid_infinite = ET.SubElement(ch_valid_type, "ca-valid-infinite")
        valid_infinite = ET.SubElement(ca_valid_infinite, "valid-infinite")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_prefix_lifetime_preferred_ch_preferred_type_ca_preferred_lifetime_preferred_lifetime(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        prefix = ET.SubElement(nd, "prefix")
        prefix_ipv6_address_key = ET.SubElement(prefix, "prefix-ipv6-address")
        prefix_ipv6_address_key.text = kwargs.pop('prefix_ipv6_address')
        lifetime = ET.SubElement(prefix, "lifetime")
        preferred = ET.SubElement(lifetime, "preferred")
        ch_preferred_type = ET.SubElement(preferred, "ch-preferred-type")
        ca_preferred_lifetime = ET.SubElement(ch_preferred_type, "ca-preferred-lifetime")
        preferred_lifetime = ET.SubElement(ca_preferred_lifetime, "preferred-lifetime")
        preferred_lifetime.text = kwargs.pop('preferred_lifetime')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_prefix_lifetime_preferred_ch_preferred_type_ca_preferred_infinite_preferred_infinite(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        prefix = ET.SubElement(nd, "prefix")
        prefix_ipv6_address_key = ET.SubElement(prefix, "prefix-ipv6-address")
        prefix_ipv6_address_key.text = kwargs.pop('prefix_ipv6_address')
        lifetime = ET.SubElement(prefix, "lifetime")
        preferred = ET.SubElement(lifetime, "preferred")
        ch_preferred_type = ET.SubElement(preferred, "ch-preferred-type")
        ca_preferred_infinite = ET.SubElement(ch_preferred_type, "ca-preferred-infinite")
        preferred_infinite = ET.SubElement(ca_preferred_infinite, "preferred-infinite")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_prefix_lifetime_preferred_prefix_flags_no_autoconfig(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        prefix = ET.SubElement(nd, "prefix")
        prefix_ipv6_address_key = ET.SubElement(prefix, "prefix-ipv6-address")
        prefix_ipv6_address_key.text = kwargs.pop('prefix_ipv6_address')
        lifetime = ET.SubElement(prefix, "lifetime")
        preferred = ET.SubElement(lifetime, "preferred")
        prefix_flags = ET.SubElement(preferred, "prefix-flags")
        no_autoconfig = ET.SubElement(prefix_flags, "no-autoconfig")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_prefix_lifetime_preferred_prefix_flags_no_onlink(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        prefix = ET.SubElement(nd, "prefix")
        prefix_ipv6_address_key = ET.SubElement(prefix, "prefix-ipv6-address")
        prefix_ipv6_address_key.text = kwargs.pop('prefix_ipv6_address')
        lifetime = ET.SubElement(prefix, "lifetime")
        preferred = ET.SubElement(lifetime, "preferred")
        prefix_flags = ET.SubElement(preferred, "prefix-flags")
        no_onlink = ET.SubElement(prefix_flags, "no-onlink")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_prefix_lifetime_preferred_prefix_flags_off_link(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        prefix = ET.SubElement(nd, "prefix")
        prefix_ipv6_address_key = ET.SubElement(prefix, "prefix-ipv6-address")
        prefix_ipv6_address_key.text = kwargs.pop('prefix_ipv6_address')
        lifetime = ET.SubElement(prefix, "lifetime")
        preferred = ET.SubElement(lifetime, "preferred")
        prefix_flags = ET.SubElement(preferred, "prefix-flags")
        off_link = ET.SubElement(prefix_flags, "off-link")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_neighbor_ipv6_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        neighbor = ET.SubElement(ipv6_intf_cmds, "neighbor")
        ipv6_address = ET.SubElement(neighbor, "ipv6-address")
        ipv6_address.text = kwargs.pop('ipv6_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_neighbor_hardware_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        neighbor = ET.SubElement(ipv6_intf_cmds, "neighbor")
        ipv6_address_key = ET.SubElement(neighbor, "ipv6-address")
        ipv6_address_key.text = kwargs.pop('ipv6_address')
        hardware_address = ET.SubElement(neighbor, "hardware-address")
        hardware_address.text = kwargs.pop('hardware_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_ipv6_phy_intf_cmds_hop_by_hop_trap(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        ipv6_phy_intf_cmds = ET.SubElement(ipv6, "ipv6-phy-intf-cmds", xmlns="urn:brocade.com:mgmt:brocade-mld-snooping")
        hop_by_hop_trap = ET.SubElement(ipv6_phy_intf_cmds, "hop-by-hop-trap")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_interface_ospfv3_conf_interface_area(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        interface_area = ET.SubElement(interface_ospfv3_conf, "interface-area")
        interface_area.text = kwargs.pop('interface_area')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_interface_ospfv3_conf_active(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        active = ET.SubElement(interface_ospfv3_conf, "active")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_interface_ospfv3_conf_passive(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        passive = ET.SubElement(interface_ospfv3_conf, "passive")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_interface_ospfv3_conf_bfd_bfd_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        bfd = ET.SubElement(interface_ospfv3_conf, "bfd")
        bfd_enable = ET.SubElement(bfd, "bfd-enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_interface_ospfv3_conf_cost(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        cost = ET.SubElement(interface_ospfv3_conf, "cost")
        cost.text = kwargs.pop('cost')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_interface_ospfv3_conf_instance(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        instance = ET.SubElement(interface_ospfv3_conf, "instance")
        instance.text = kwargs.pop('instance')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_interface_ospfv3_conf_mtu_ignore(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        mtu_ignore = ET.SubElement(interface_ospfv3_conf, "mtu-ignore")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_interface_ospfv3_conf_network(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        network = ET.SubElement(interface_ospfv3_conf, "network")
        network.text = kwargs.pop('network')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_interface_ospfv3_conf_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        priority = ET.SubElement(interface_ospfv3_conf, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_interface_ospfv3_conf_suppress_linklsa(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        suppress_linklsa = ET.SubElement(interface_ospfv3_conf, "suppress-linklsa")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_spi(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        spi = ET.SubElement(ipsec_auth_key_config, "spi")
        spi.text = kwargs.pop('spi')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_ah_algorithm_ah(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_ah_algorithm = ET.SubElement(ch_algorithm, "ca-ah-algorithm")
        ah = ET.SubElement(ca_ah_algorithm, "ah")
        ah.text = kwargs.pop('ah')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_ah_algorithm_ah_no_encrypt(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_ah_algorithm = ET.SubElement(ch_algorithm, "ca-ah-algorithm")
        ah_no_encrypt = ET.SubElement(ca_ah_algorithm, "ah-no-encrypt")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_ah_algorithm_ah_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_ah_algorithm = ET.SubElement(ch_algorithm, "ca-ah-algorithm")
        ah_key = ET.SubElement(ca_ah_algorithm, "ah-key")
        ah_key.text = kwargs.pop('ah_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp = ET.SubElement(ca_esp_algorithm, "esp")
        esp.text = kwargs.pop('esp')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp_no_encrypt(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp_no_encrypt = ET.SubElement(ca_esp_algorithm, "esp-no-encrypt")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp_key = ET.SubElement(ca_esp_algorithm, "esp-key")
        esp_key.text = kwargs.pop('esp_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp_auth(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp_auth = ET.SubElement(ca_esp_algorithm, "esp-auth")
        esp_auth.text = kwargs.pop('esp_auth')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp_auth_no_encrypt(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp_auth_no_encrypt = ET.SubElement(ca_esp_algorithm, "esp-auth-no-encrypt")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp_auth_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp_auth_key = ET.SubElement(ca_esp_algorithm, "esp-auth-key")
        esp_auth_key.text = kwargs.pop('esp_auth_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_ipsec_authentication_disable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec = ET.SubElement(authentication, "ipsec")
        ipsec_authentication_disable = ET.SubElement(ipsec, "ipsec-authentication-disable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_ifc_key_add_remove_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec = ET.SubElement(authentication, "ipsec")
        ifc_key_add_remove_interval = ET.SubElement(ipsec, "ifc-key-add-remove-interval")
        ifc_key_add_remove_interval.text = kwargs.pop('ifc_key_add_remove_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_interface_ospfv3_conf_link_interval_properties_hello_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        link_interval_properties = ET.SubElement(interface_ospfv3_conf, "link-interval-properties")
        hello_interval = ET.SubElement(link_interval_properties, "hello-interval")
        hello_interval.text = kwargs.pop('hello_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_interface_ospfv3_conf_link_interval_properties_dead_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        link_interval_properties = ET.SubElement(interface_ospfv3_conf, "link-interval-properties")
        dead_interval = ET.SubElement(link_interval_properties, "dead-interval")
        dead_interval.text = kwargs.pop('dead_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_interface_ospfv3_conf_link_interval_properties_hello_jitter(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        link_interval_properties = ET.SubElement(interface_ospfv3_conf, "link-interval-properties")
        hello_jitter = ET.SubElement(link_interval_properties, "hello-jitter")
        hello_jitter.text = kwargs.pop('hello_jitter')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_interface_ospfv3_conf_link_interval_properties_retransmit_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        link_interval_properties = ET.SubElement(interface_ospfv3_conf, "link-interval-properties")
        retransmit_interval = ET.SubElement(link_interval_properties, "retransmit-interval")
        retransmit_interval.text = kwargs.pop('retransmit_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_interface_ospfv3_conf_link_interval_properties_transmit_delay(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        link_interval_properties = ET.SubElement(interface_ospfv3_conf, "link-interval-properties")
        transmit_delay = ET.SubElement(link_interval_properties, "transmit-delay")
        transmit_delay.text = kwargs.pop('transmit_delay')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_vrrpv3_group_vrid(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        vrrpv3_group = ET.SubElement(ipv6, "vrrpv3-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid = ET.SubElement(vrrpv3_group, "vrid")
        vrid.text = kwargs.pop('vrid')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_vrrpv3_group_use_v2_checksum(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        vrrpv3_group = ET.SubElement(ipv6, "vrrpv3-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        use_v2_checksum = ET.SubElement(vrrpv3_group, "use-v2-checksum")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_vrrpv3_group_virtual_ip_virtual_ipaddr(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        vrrpv3_group = ET.SubElement(ipv6, "vrrpv3-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        virtual_ip = ET.SubElement(vrrpv3_group, "virtual-ip")
        virtual_ipaddr = ET.SubElement(virtual_ip, "virtual-ipaddr")
        virtual_ipaddr.text = kwargs.pop('virtual_ipaddr')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_vrrpv3_group_track_interface_interface_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        vrrpv3_group = ET.SubElement(ipv6, "vrrpv3-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        track = ET.SubElement(vrrpv3_group, "track")
        interface = ET.SubElement(track, "interface")
        interface_name_key = ET.SubElement(interface, "interface-name")
        interface_name_key.text = kwargs.pop('interface_name')
        interface_type = ET.SubElement(interface, "interface-type")
        interface_type.text = kwargs.pop('interface_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_vrrpv3_group_track_interface_interface_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        vrrpv3_group = ET.SubElement(ipv6, "vrrpv3-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        track = ET.SubElement(vrrpv3_group, "track")
        interface = ET.SubElement(track, "interface")
        interface_type_key = ET.SubElement(interface, "interface-type")
        interface_type_key.text = kwargs.pop('interface_type')
        interface_name = ET.SubElement(interface, "interface-name")
        interface_name.text = kwargs.pop('interface_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_vrrpv3_group_track_interface_track_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        vrrpv3_group = ET.SubElement(ipv6, "vrrpv3-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        track = ET.SubElement(vrrpv3_group, "track")
        interface = ET.SubElement(track, "interface")
        interface_type_key = ET.SubElement(interface, "interface-type")
        interface_type_key.text = kwargs.pop('interface_type')
        interface_name_key = ET.SubElement(interface, "interface-name")
        interface_name_key.text = kwargs.pop('interface_name')
        track_priority = ET.SubElement(interface, "track-priority")
        track_priority.text = kwargs.pop('track_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_vrrpv3_group_advertisement_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        vrrpv3_group = ET.SubElement(ipv6, "vrrpv3-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        advertisement_interval = ET.SubElement(vrrpv3_group, "advertisement-interval")
        advertisement_interval.text = kwargs.pop('advertisement_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_vrrpv3_group_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        vrrpv3_group = ET.SubElement(ipv6, "vrrpv3-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        enable = ET.SubElement(vrrpv3_group, "enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_vrrpv3_group_hold_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        vrrpv3_group = ET.SubElement(ipv6, "vrrpv3-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        hold_time = ET.SubElement(vrrpv3_group, "hold-time")
        hold_time.text = kwargs.pop('hold_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_vrrpv3_group_preempt_mode(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        vrrpv3_group = ET.SubElement(ipv6, "vrrpv3-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        preempt_mode = ET.SubElement(vrrpv3_group, "preempt-mode")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_vrrpv3_group_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        vrrpv3_group = ET.SubElement(ipv6, "vrrpv3-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        priority = ET.SubElement(vrrpv3_group, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_vrrpv3_group_description(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        vrrpv3_group = ET.SubElement(ipv6, "vrrpv3-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        description = ET.SubElement(vrrpv3_group, "description")
        description.text = kwargs.pop('description')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_vrrpv3e_group_vrid(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid = ET.SubElement(vrrpv3e_group, "vrid")
        vrid.text = kwargs.pop('vrid')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_vrrpv3e_group_virtual_ip_virtual_ipaddr(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        virtual_ip = ET.SubElement(vrrpv3e_group, "virtual-ip")
        virtual_ipaddr = ET.SubElement(virtual_ip, "virtual-ipaddr")
        virtual_ipaddr.text = kwargs.pop('virtual_ipaddr')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_vrrpv3e_group_track_interface_interface_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        track = ET.SubElement(vrrpv3e_group, "track")
        interface = ET.SubElement(track, "interface")
        interface_name_key = ET.SubElement(interface, "interface-name")
        interface_name_key.text = kwargs.pop('interface_name')
        interface_type = ET.SubElement(interface, "interface-type")
        interface_type.text = kwargs.pop('interface_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_vrrpv3e_group_track_interface_interface_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        track = ET.SubElement(vrrpv3e_group, "track")
        interface = ET.SubElement(track, "interface")
        interface_type_key = ET.SubElement(interface, "interface-type")
        interface_type_key.text = kwargs.pop('interface_type')
        interface_name = ET.SubElement(interface, "interface-name")
        interface_name.text = kwargs.pop('interface_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_vrrpv3e_group_track_interface_track_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        track = ET.SubElement(vrrpv3e_group, "track")
        interface = ET.SubElement(track, "interface")
        interface_type_key = ET.SubElement(interface, "interface-type")
        interface_type_key.text = kwargs.pop('interface_type')
        interface_name_key = ET.SubElement(interface, "interface-name")
        interface_name_key.text = kwargs.pop('interface_name')
        track_priority = ET.SubElement(interface, "track-priority")
        track_priority.text = kwargs.pop('track_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_vrrpv3e_group_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        enable = ET.SubElement(vrrpv3e_group, "enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_vrrpv3e_group_hold_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        hold_time = ET.SubElement(vrrpv3e_group, "hold-time")
        hold_time.text = kwargs.pop('hold_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_vrrpv3e_group_preempt_mode(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        preempt_mode = ET.SubElement(vrrpv3e_group, "preempt-mode")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_vrrpv3e_group_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        priority = ET.SubElement(vrrpv3e_group, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_vrrpv3e_group_description(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        description = ET.SubElement(vrrpv3e_group, "description")
        description.text = kwargs.pop('description')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_vrrpv3e_group_advertise_backup(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        advertise_backup = ET.SubElement(vrrpv3e_group, "advertise-backup")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_vrrpv3e_group_nd_advertisement_timer(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        nd_advertisement_timer = ET.SubElement(vrrpv3e_group, "nd-advertisement-timer")
        nd_advertisement_timer.text = kwargs.pop('nd_advertisement_timer')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_vrrpv3e_group_advertisement_interval_scale(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        advertisement_interval_scale = ET.SubElement(vrrpv3e_group, "advertisement-interval-scale")
        advertisement_interval_scale.text = kwargs.pop('advertisement_interval_scale')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_vrrpv3e_group_backup_advertisement_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        backup_advertisement_interval = ET.SubElement(vrrpv3e_group, "backup-advertisement-interval")
        backup_advertisement_interval.text = kwargs.pop('backup_advertisement_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_vrrpv3e_group_vrrpe_advertisement_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        vrrpe_advertisement_interval = ET.SubElement(vrrpv3e_group, "vrrpe-advertisement-interval")
        vrrpe_advertisement_interval.text = kwargs.pop('vrrpe_advertisement_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_vrrpv3e_group_short_path_forwarding_basic(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        short_path_forwarding = ET.SubElement(vrrpv3e_group, "short-path-forwarding")
        basic = ET.SubElement(short_path_forwarding, "basic")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_vrrpv3e_group_short_path_forwarding_revert_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        short_path_forwarding = ET.SubElement(vrrpv3e_group, "short-path-forwarding")
        revert_priority = ET.SubElement(short_path_forwarding, "revert-priority")
        revert_priority.text = kwargs.pop('revert_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_track_track_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        track = ET.SubElement(fortygigabitethernet, "track")
        track_enable = ET.SubElement(track, "track_enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_track_min_link(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        track = ET.SubElement(fortygigabitethernet, "track")
        min_link = ET.SubElement(track, "min-link")
        min_link.text = kwargs.pop('min_link')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_track_interface_track_interface_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        track = ET.SubElement(fortygigabitethernet, "track")
        interface = ET.SubElement(track, "interface")
        track_interface_name_key = ET.SubElement(interface, "track-interface-name")
        track_interface_name_key.text = kwargs.pop('track_interface_name')
        track_interface_type = ET.SubElement(interface, "track-interface-type")
        track_interface_type.text = kwargs.pop('track_interface_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_track_interface_track_interface_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        track = ET.SubElement(fortygigabitethernet, "track")
        interface = ET.SubElement(track, "interface")
        track_interface_type_key = ET.SubElement(interface, "track-interface-type")
        track_interface_type_key.text = kwargs.pop('track_interface_type')
        track_interface_name = ET.SubElement(interface, "track-interface-name")
        track_interface_name.text = kwargs.pop('track_interface_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_track_remove_remove_all_track_interfaces(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        track = ET.SubElement(fortygigabitethernet, "track")
        remove = ET.SubElement(track, "remove")
        remove_all_track_interfaces = ET.SubElement(remove, "remove-all-track-interfaces")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_bfd_interval_min_tx(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        bfd = ET.SubElement(fortygigabitethernet, "bfd")
        interval = ET.SubElement(bfd, "interval")
        min_tx = ET.SubElement(interval, "min-tx")
        min_tx.text = kwargs.pop('min_tx')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_bfd_interval_min_rx(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        bfd = ET.SubElement(fortygigabitethernet, "bfd")
        interval = ET.SubElement(bfd, "interval")
        min_rx = ET.SubElement(interval, "min-rx")
        min_rx.text = kwargs.pop('min_rx')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_bfd_interval_multiplier(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        bfd = ET.SubElement(fortygigabitethernet, "bfd")
        interval = ET.SubElement(bfd, "interval")
        multiplier = ET.SubElement(interval, "multiplier")
        multiplier.text = kwargs.pop('multiplier')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_bfd_bfd_shutdown(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        bfd = ET.SubElement(fortygigabitethernet, "bfd")
        bfd_shutdown = ET.SubElement(bfd, "bfd-shutdown")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_edge_loop_detection_eldprio(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        edge_loop_detection = ET.SubElement(fortygigabitethernet, "edge-loop-detection")
        eldprio = ET.SubElement(edge_loop_detection, "eldprio")
        eldprio.text = kwargs.pop('eldprio')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_edge_loop_detection_eldvlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        edge_loop_detection = ET.SubElement(fortygigabitethernet, "edge-loop-detection")
        eldvlan = ET.SubElement(edge_loop_detection, "eldvlan")
        eldvlan.text = kwargs.pop('eldvlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_mac_access_group_mac_access_list(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        mac = ET.SubElement(fortygigabitethernet, "mac", xmlns="urn:brocade.com:mgmt:brocade-mac-access-list")
        access_group = ET.SubElement(mac, "access-group")
        mac_direction_key = ET.SubElement(access_group, "mac-direction")
        mac_direction_key.text = kwargs.pop('mac_direction')
        mac_access_list = ET.SubElement(access_group, "mac-access-list")
        mac_access_list.text = kwargs.pop('mac_access_list')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_mac_access_group_mac_direction(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        mac = ET.SubElement(fortygigabitethernet, "mac", xmlns="urn:brocade.com:mgmt:brocade-mac-access-list")
        access_group = ET.SubElement(mac, "access-group")
        mac_access_list_key = ET.SubElement(access_group, "mac-access-list")
        mac_access_list_key.text = kwargs.pop('mac_access_list')
        mac_direction = ET.SubElement(access_group, "mac-direction")
        mac_direction.text = kwargs.pop('mac_direction')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_mac_access_group_traffic_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        mac = ET.SubElement(fortygigabitethernet, "mac", xmlns="urn:brocade.com:mgmt:brocade-mac-access-list")
        access_group = ET.SubElement(mac, "access-group")
        mac_access_list_key = ET.SubElement(access_group, "mac-access-list")
        mac_access_list_key.text = kwargs.pop('mac_access_list')
        mac_direction_key = ET.SubElement(access_group, "mac-direction")
        mac_direction_key.text = kwargs.pop('mac_direction')
        traffic_type = ET.SubElement(access_group, "traffic-type")
        traffic_type.text = kwargs.pop('traffic_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_vrrp_vrid(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(fortygigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        vrid = ET.SubElement(vrrp, "vrid")
        vrid.text = kwargs.pop('vrid')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_vrrp_version(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(fortygigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version = ET.SubElement(vrrp, "version")
        version.text = kwargs.pop('version')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_vrrp_use_v2_checksum(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(fortygigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        use_v2_checksum = ET.SubElement(vrrp, "use-v2-checksum")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_vrrp_virtual_ip_virtual_ipaddr(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(fortygigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        virtual_ip = ET.SubElement(vrrp, "virtual-ip")
        virtual_ipaddr = ET.SubElement(virtual_ip, "virtual-ipaddr")
        virtual_ipaddr.text = kwargs.pop('virtual_ipaddr')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_vrrp_track_interface_interface_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(fortygigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        track = ET.SubElement(vrrp, "track")
        interface = ET.SubElement(track, "interface")
        interface_name_key = ET.SubElement(interface, "interface-name")
        interface_name_key.text = kwargs.pop('interface_name')
        interface_type = ET.SubElement(interface, "interface-type")
        interface_type.text = kwargs.pop('interface_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_vrrp_track_interface_interface_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(fortygigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        track = ET.SubElement(vrrp, "track")
        interface = ET.SubElement(track, "interface")
        interface_type_key = ET.SubElement(interface, "interface-type")
        interface_type_key.text = kwargs.pop('interface_type')
        interface_name = ET.SubElement(interface, "interface-name")
        interface_name.text = kwargs.pop('interface_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_vrrp_track_interface_track_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(fortygigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        track = ET.SubElement(vrrp, "track")
        interface = ET.SubElement(track, "interface")
        interface_type_key = ET.SubElement(interface, "interface-type")
        interface_type_key.text = kwargs.pop('interface_type')
        interface_name_key = ET.SubElement(interface, "interface-name")
        interface_name_key.text = kwargs.pop('interface_name')
        track_priority = ET.SubElement(interface, "track-priority")
        track_priority.text = kwargs.pop('track_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_vrrp_advertisement_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(fortygigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        advertisement_interval = ET.SubElement(vrrp, "advertisement-interval")
        advertisement_interval.text = kwargs.pop('advertisement_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_vrrp_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(fortygigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        enable = ET.SubElement(vrrp, "enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_vrrp_hold_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(fortygigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        hold_time = ET.SubElement(vrrp, "hold-time")
        hold_time.text = kwargs.pop('hold_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_vrrp_preempt_mode(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(fortygigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        preempt_mode = ET.SubElement(vrrp, "preempt-mode")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_vrrp_arp_unicast_request_receive(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(fortygigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        arp = ET.SubElement(vrrp, "arp")
        unicast_request = ET.SubElement(arp, "unicast-request")
        receive = ET.SubElement(unicast_request, "receive")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_vrrp_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(fortygigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        priority = ET.SubElement(vrrp, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_vrrp_description(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(fortygigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        description = ET.SubElement(vrrp, "description")
        description.text = kwargs.pop('description')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_fabric_fabric_isl_fabric_isl_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        fabric = ET.SubElement(fortygigabitethernet, "fabric", xmlns="urn:brocade.com:mgmt:brocade-fcoe")
        fabric_isl = ET.SubElement(fabric, "fabric-isl")
        fabric_isl_enable = ET.SubElement(fabric_isl, "fabric-isl-enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_fabric_fabric_trunk_fabric_trunk_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        fabric = ET.SubElement(fortygigabitethernet, "fabric", xmlns="urn:brocade.com:mgmt:brocade-fcoe")
        fabric_trunk = ET.SubElement(fabric, "fabric-trunk")
        fabric_trunk_enable = ET.SubElement(fabric_trunk, "fabric-trunk-enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_fabric_neighbor_discovery_disable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        fabric = ET.SubElement(fortygigabitethernet, "fabric", xmlns="urn:brocade.com:mgmt:brocade-fcoe")
        neighbor_discovery = ET.SubElement(fabric, "neighbor-discovery")
        disable = ET.SubElement(neighbor_discovery, "disable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_fabric_fabric_dport_fabric_dport_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        fabric = ET.SubElement(fortygigabitethernet, "fabric", xmlns="urn:brocade.com:mgmt:brocade-fcoe")
        fabric_dport = ET.SubElement(fabric, "fabric-dport")
        fabric_dport_enable = ET.SubElement(fabric_dport, "fabric-dport-enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_fcoeport_fcoeport_map(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        fcoeport = ET.SubElement(fortygigabitethernet, "fcoeport", xmlns="urn:brocade.com:mgmt:brocade-fcoe")
        fcoeport_map = ET.SubElement(fcoeport, "fcoeport-map")
        fcoeport_map.text = kwargs.pop('fcoeport_map')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_openflow_interface_cfg_logical_instance_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        openflow_interface_cfg = ET.SubElement(fortygigabitethernet, "openflow-interface-cfg", xmlns="urn:brocade.com:mgmt:brocade-openflow")
        logical_instance_id = ET.SubElement(openflow_interface_cfg, "logical-instance-id")
        logical_instance_id.text = kwargs.pop('logical_instance_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_openflow_interface_cfg_openflow_enable_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        openflow_interface_cfg = ET.SubElement(fortygigabitethernet, "openflow-interface-cfg", xmlns="urn:brocade.com:mgmt:brocade-openflow")
        openflow_enable = ET.SubElement(openflow_interface_cfg, "openflow-enable")
        enable = ET.SubElement(openflow_enable, "enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_openflow_interface_cfg_openflow_enable_match_profile(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        openflow_interface_cfg = ET.SubElement(fortygigabitethernet, "openflow-interface-cfg", xmlns="urn:brocade.com:mgmt:brocade-openflow")
        openflow_enable = ET.SubElement(openflow_interface_cfg, "openflow-enable")
        match_profile = ET.SubElement(openflow_enable, "match-profile")
        match_profile.text = kwargs.pop('match_profile')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_sflow_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        sflow = ET.SubElement(fortygigabitethernet, "sflow", xmlns="urn:brocade.com:mgmt:brocade-sflow")
        enable = ET.SubElement(sflow, "enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_sflow_polling_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        sflow = ET.SubElement(fortygigabitethernet, "sflow", xmlns="urn:brocade.com:mgmt:brocade-sflow")
        polling_interval = ET.SubElement(sflow, "polling-interval")
        polling_interval.text = kwargs.pop('polling_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_sflow_sample_rate(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        sflow = ET.SubElement(fortygigabitethernet, "sflow", xmlns="urn:brocade.com:mgmt:brocade-sflow")
        sample_rate = ET.SubElement(sflow, "sample-rate")
        sample_rate.text = kwargs.pop('sample_rate')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_acl_interface_ip_access_group_ip_access_list(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip_acl_interface = ET.SubElement(fortygigabitethernet, "ip-acl-interface", xmlns="urn:brocade.com:mgmt:brocade-ip-access-list")
        ip = ET.SubElement(ip_acl_interface, "ip")
        access_group = ET.SubElement(ip, "access-group")
        ip_direction_key = ET.SubElement(access_group, "ip-direction")
        ip_direction_key.text = kwargs.pop('ip_direction')
        ip_access_list = ET.SubElement(access_group, "ip-access-list")
        ip_access_list.text = kwargs.pop('ip_access_list')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_acl_interface_ip_access_group_ip_direction(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip_acl_interface = ET.SubElement(fortygigabitethernet, "ip-acl-interface", xmlns="urn:brocade.com:mgmt:brocade-ip-access-list")
        ip = ET.SubElement(ip_acl_interface, "ip")
        access_group = ET.SubElement(ip, "access-group")
        ip_access_list_key = ET.SubElement(access_group, "ip-access-list")
        ip_access_list_key.text = kwargs.pop('ip_access_list')
        ip_direction = ET.SubElement(access_group, "ip-direction")
        ip_direction.text = kwargs.pop('ip_direction')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_acl_interface_ip_access_group_traffic_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip_acl_interface = ET.SubElement(fortygigabitethernet, "ip-acl-interface", xmlns="urn:brocade.com:mgmt:brocade-ip-access-list")
        ip = ET.SubElement(ip_acl_interface, "ip")
        access_group = ET.SubElement(ip, "access-group")
        ip_access_list_key = ET.SubElement(access_group, "ip-access-list")
        ip_access_list_key.text = kwargs.pop('ip_access_list')
        ip_direction_key = ET.SubElement(access_group, "ip-direction")
        ip_direction_key.text = kwargs.pop('ip_direction')
        traffic_type = ET.SubElement(access_group, "traffic-type")
        traffic_type.text = kwargs.pop('traffic_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_storm_control_ingress_protocol_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        storm_control = ET.SubElement(fortygigabitethernet, "storm-control", xmlns="urn:brocade.com:mgmt:brocade-bum-storm-control")
        ingress = ET.SubElement(storm_control, "ingress")
        protocol_type = ET.SubElement(ingress, "protocol-type")
        protocol_type.text = kwargs.pop('protocol_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_storm_control_ingress_rate_format(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        storm_control = ET.SubElement(fortygigabitethernet, "storm-control", xmlns="urn:brocade.com:mgmt:brocade-bum-storm-control")
        ingress = ET.SubElement(storm_control, "ingress")
        protocol_type_key = ET.SubElement(ingress, "protocol-type")
        protocol_type_key.text = kwargs.pop('protocol_type')
        rate_format = ET.SubElement(ingress, "rate-format")
        rate_format.text = kwargs.pop('rate_format')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_storm_control_ingress_rate_bps(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        storm_control = ET.SubElement(fortygigabitethernet, "storm-control", xmlns="urn:brocade.com:mgmt:brocade-bum-storm-control")
        ingress = ET.SubElement(storm_control, "ingress")
        protocol_type_key = ET.SubElement(ingress, "protocol-type")
        protocol_type_key.text = kwargs.pop('protocol_type')
        rate_bps = ET.SubElement(ingress, "rate-bps")
        rate_bps.text = kwargs.pop('rate_bps')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_storm_control_ingress_rate_percent(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        storm_control = ET.SubElement(fortygigabitethernet, "storm-control", xmlns="urn:brocade.com:mgmt:brocade-bum-storm-control")
        ingress = ET.SubElement(storm_control, "ingress")
        protocol_type_key = ET.SubElement(ingress, "protocol-type")
        protocol_type_key.text = kwargs.pop('protocol_type')
        rate_percent = ET.SubElement(ingress, "rate-percent")
        rate_percent.text = kwargs.pop('rate_percent')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_storm_control_ingress_bum_action(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        storm_control = ET.SubElement(fortygigabitethernet, "storm-control", xmlns="urn:brocade.com:mgmt:brocade-bum-storm-control")
        ingress = ET.SubElement(storm_control, "ingress")
        protocol_type_key = ET.SubElement(ingress, "protocol-type")
        protocol_type_key.text = kwargs.pop('protocol_type')
        bum_action = ET.SubElement(ingress, "bum-action")
        bum_action.text = kwargs.pop('bum_action')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_dot1x_authentication(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        dot1x = ET.SubElement(fortygigabitethernet, "dot1x", xmlns="urn:brocade.com:mgmt:brocade-dot1x")
        authentication = ET.SubElement(dot1x, "authentication")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_dot1x_port_control(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        dot1x = ET.SubElement(fortygigabitethernet, "dot1x", xmlns="urn:brocade.com:mgmt:brocade-dot1x")
        port_control = ET.SubElement(dot1x, "port-control")
        port_control.text = kwargs.pop('port_control')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_dot1x_protocol_version(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        dot1x = ET.SubElement(fortygigabitethernet, "dot1x", xmlns="urn:brocade.com:mgmt:brocade-dot1x")
        protocol_version = ET.SubElement(dot1x, "protocol-version")
        protocol_version.text = kwargs.pop('protocol_version')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_dot1x_quiet_period(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        dot1x = ET.SubElement(fortygigabitethernet, "dot1x", xmlns="urn:brocade.com:mgmt:brocade-dot1x")
        quiet_period = ET.SubElement(dot1x, "quiet-period")
        quiet_period.text = kwargs.pop('quiet_period')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_dot1x_reauthMax(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        dot1x = ET.SubElement(fortygigabitethernet, "dot1x", xmlns="urn:brocade.com:mgmt:brocade-dot1x")
        reauthMax = ET.SubElement(dot1x, "reauthMax")
        reauthMax.text = kwargs.pop('reauthMax')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_dot1x_reauthentication(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        dot1x = ET.SubElement(fortygigabitethernet, "dot1x", xmlns="urn:brocade.com:mgmt:brocade-dot1x")
        reauthentication = ET.SubElement(dot1x, "reauthentication")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_dot1x_timeout_re_authperiod(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        dot1x = ET.SubElement(fortygigabitethernet, "dot1x", xmlns="urn:brocade.com:mgmt:brocade-dot1x")
        timeout = ET.SubElement(dot1x, "timeout")
        re_authperiod = ET.SubElement(timeout, "re-authperiod")
        re_authperiod.text = kwargs.pop('re_authperiod')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_dot1x_timeout_server_timeout(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        dot1x = ET.SubElement(fortygigabitethernet, "dot1x", xmlns="urn:brocade.com:mgmt:brocade-dot1x")
        timeout = ET.SubElement(dot1x, "timeout")
        server_timeout = ET.SubElement(timeout, "server-timeout")
        server_timeout.text = kwargs.pop('server_timeout')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_dot1x_timeout_supp_timeout(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        dot1x = ET.SubElement(fortygigabitethernet, "dot1x", xmlns="urn:brocade.com:mgmt:brocade-dot1x")
        timeout = ET.SubElement(dot1x, "timeout")
        supp_timeout = ET.SubElement(timeout, "supp-timeout")
        supp_timeout.text = kwargs.pop('supp_timeout')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_dot1x_timeout_tx_period(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        dot1x = ET.SubElement(fortygigabitethernet, "dot1x", xmlns="urn:brocade.com:mgmt:brocade-dot1x")
        timeout = ET.SubElement(dot1x, "timeout")
        tx_period = ET.SubElement(timeout, "tx-period")
        tx_period.text = kwargs.pop('tx_period')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_pbr_interface_ip_policy_route_map_route_map_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip_pbr_interface = ET.SubElement(fortygigabitethernet, "ip-pbr-interface", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        ip = ET.SubElement(ip_pbr_interface, "ip")
        policy = ET.SubElement(ip, "policy")
        route_map = ET.SubElement(policy, "route-map")
        route_map_name = ET.SubElement(route_map, "route-map-name")
        route_map_name.text = kwargs.pop('route_map_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_lacp_timeout(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        lacp = ET.SubElement(fortygigabitethernet, "lacp", xmlns="urn:brocade.com:mgmt:brocade-lacp")
        timeout = ET.SubElement(lacp, "timeout")
        timeout.text = kwargs.pop('timeout')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_lacp_std_port_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        lacp = ET.SubElement(fortygigabitethernet, "lacp", xmlns="urn:brocade.com:mgmt:brocade-lacp")
        std_port_priority = ET.SubElement(lacp, "std_port-priority")
        std_port_priority.text = kwargs.pop('std_port_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_lacp_default_up(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        lacp = ET.SubElement(fortygigabitethernet, "lacp", xmlns="urn:brocade.com:mgmt:brocade-lacp")
        default_up = ET.SubElement(lacp, "default-up")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_lldp_cee_lldp_cee_on_off(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        lldp = ET.SubElement(fortygigabitethernet, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        cee = ET.SubElement(lldp, "cee")
        lldp_cee_on_off = ET.SubElement(cee, "lldp-cee-on-off")
        lldp_cee_on_off.text = kwargs.pop('lldp_cee_on_off')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_lldp_dcbx_version(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        lldp = ET.SubElement(fortygigabitethernet, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        dcbx_version = ET.SubElement(lldp, "dcbx-version")
        dcbx_version.text = kwargs.pop('dcbx_version')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_lldp_disable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        lldp = ET.SubElement(fortygigabitethernet, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        disable = ET.SubElement(lldp, "disable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_lldp_iscsi_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        lldp = ET.SubElement(fortygigabitethernet, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        iscsi_priority = ET.SubElement(lldp, "iscsi-priority")
        iscsi_priority.text = kwargs.pop('iscsi_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_lldp_profile(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        lldp = ET.SubElement(fortygigabitethernet, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        profile = ET.SubElement(lldp, "profile")
        profile.text = kwargs.pop('profile')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_connectivity_deviceconnectivity(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        connectivity = ET.SubElement(fortygigabitethernet, "connectivity", xmlns="urn:brocade.com:mgmt:brocade-maps")
        deviceconnectivity = ET.SubElement(connectivity, "deviceconnectivity")
        deviceconnectivity.text = kwargs.pop('deviceconnectivity')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_service_policy_in_cg(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        service_policy = ET.SubElement(fortygigabitethernet, "service-policy", xmlns="urn:brocade.com:mgmt:brocade-policer")
        in_cg = ET.SubElement(service_policy, "in")
        in_cg.text = kwargs.pop('in_cg')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_service_policy_out(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        service_policy = ET.SubElement(fortygigabitethernet, "service-policy", xmlns="urn:brocade.com:mgmt:brocade-policer")
        out = ET.SubElement(service_policy, "out")
        out.text = kwargs.pop('out')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_port_profile_port(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        port_profile_port = ET.SubElement(fortygigabitethernet, "port-profile-port", xmlns="urn:brocade.com:mgmt:brocade-port-profile")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_port_profile_to_interface_associations_port_profile_port_port_to_port_profile_domain_association_profile_domain_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        port_profile_to_interface_associations = ET.SubElement(fortygigabitethernet, "port-profile-to-interface-associations", xmlns="urn:brocade.com:mgmt:brocade-port-profile")
        port_profile_port = ET.SubElement(port_profile_to_interface_associations, "port-profile-port")
        port_to_port_profile_domain_association = ET.SubElement(port_profile_port, "port-to-port-profile-domain-association")
        profile_domain_name = ET.SubElement(port_to_port_profile_domain_association, "profile-domain-name")
        profile_domain_name.text = kwargs.pop('profile_domain_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_port_profile_to_interface_associations_port_profile_port_port_to_port_profile_associations_port_to_port_profile_association(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        port_profile_to_interface_associations = ET.SubElement(fortygigabitethernet, "port-profile-to-interface-associations", xmlns="urn:brocade.com:mgmt:brocade-port-profile")
        port_profile_port = ET.SubElement(port_profile_to_interface_associations, "port-profile-port")
        port_to_port_profile_associations = ET.SubElement(port_profile_port, "port-to-port-profile-associations")
        port_to_port_profile_association = ET.SubElement(port_to_port_profile_associations, "port-to-port-profile-association")
        port_to_port_profile_association.text = kwargs.pop('port_to_port_profile_association')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_priority_tag_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        priority_tag_enable = ET.SubElement(fortygigabitethernet, "priority-tag-enable", xmlns="urn:brocade.com:mgmt:brocade-qos")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_qos_default_cos(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(fortygigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        default_cos = ET.SubElement(qos, "default-cos")
        default_cos.text = kwargs.pop('default_cos')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_qos_trust_trust_cos(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(fortygigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        trust = ET.SubElement(qos, "trust")
        trust_cos = ET.SubElement(trust, "trust-cos")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_qos_trust_trust_dscp(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(fortygigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        trust = ET.SubElement(qos, "trust")
        trust_dscp = ET.SubElement(trust, "trust-dscp")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_qos_cos_mutation(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(fortygigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        cos_mutation = ET.SubElement(qos, "cos-mutation")
        cos_mutation.text = kwargs.pop('cos_mutation')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_qos_cos_traffic_class(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(fortygigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        cos_traffic_class = ET.SubElement(qos, "cos-traffic-class")
        cos_traffic_class.text = kwargs.pop('cos_traffic_class')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_qos_dscp_mutation(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(fortygigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        dscp_mutation = ET.SubElement(qos, "dscp-mutation")
        dscp_mutation.text = kwargs.pop('dscp_mutation')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_qos_dscp_traffic_class(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(fortygigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        dscp_traffic_class = ET.SubElement(qos, "dscp-traffic-class")
        dscp_traffic_class.text = kwargs.pop('dscp_traffic_class')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_qos_dscp_cos(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(fortygigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        dscp_cos = ET.SubElement(qos, "dscp-cos")
        dscp_cos.text = kwargs.pop('dscp_cos')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_qos_random_detect_traffic_class_red_tc_value(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(fortygigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        random_detect = ET.SubElement(qos, "random-detect")
        traffic_class = ET.SubElement(random_detect, "traffic-class")
        red_tc_value = ET.SubElement(traffic_class, "red-tc-value")
        red_tc_value.text = kwargs.pop('red_tc_value')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_qos_random_detect_traffic_class_red_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(fortygigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        random_detect = ET.SubElement(qos, "random-detect")
        traffic_class = ET.SubElement(random_detect, "traffic-class")
        red_tc_value_key = ET.SubElement(traffic_class, "red-tc-value")
        red_tc_value_key.text = kwargs.pop('red_tc_value')
        red_enable = ET.SubElement(traffic_class, "red-enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_qos_random_detect_traffic_class_red_profile_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(fortygigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        random_detect = ET.SubElement(qos, "random-detect")
        traffic_class = ET.SubElement(random_detect, "traffic-class")
        red_tc_value_key = ET.SubElement(traffic_class, "red-tc-value")
        red_tc_value_key.text = kwargs.pop('red_tc_value')
        red_profile_id = ET.SubElement(traffic_class, "red-profile-id")
        red_profile_id.text = kwargs.pop('red_profile_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_qos_drop_monitor_drop_monitor_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(fortygigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        drop_monitor = ET.SubElement(qos, "drop-monitor")
        drop_monitor_enable = ET.SubElement(drop_monitor, "drop-monitor-enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_qos_flowcontrol_link_level_flowcontrol_flowcontrol_tx(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(fortygigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        flowcontrol = ET.SubElement(qos, "flowcontrol")
        link_level_flowcontrol = ET.SubElement(flowcontrol, "link-level-flowcontrol")
        flowcontrol_tx = ET.SubElement(link_level_flowcontrol, "flowcontrol-tx")
        flowcontrol_tx.text = kwargs.pop('flowcontrol_tx')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_qos_flowcontrol_link_level_flowcontrol_flowcontrol_rx(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(fortygigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        flowcontrol = ET.SubElement(qos, "flowcontrol")
        link_level_flowcontrol = ET.SubElement(flowcontrol, "link-level-flowcontrol")
        flowcontrol_rx = ET.SubElement(link_level_flowcontrol, "flowcontrol-rx")
        flowcontrol_rx.text = kwargs.pop('flowcontrol_rx')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_qos_flowcontrol_pfc_pfc_cos(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(fortygigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        flowcontrol = ET.SubElement(qos, "flowcontrol")
        pfc = ET.SubElement(flowcontrol, "pfc")
        pfc_cos = ET.SubElement(pfc, "pfc-cos")
        pfc_cos.text = kwargs.pop('pfc_cos')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_qos_flowcontrol_pfc_pfc_flowcontrol_tx(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(fortygigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        flowcontrol = ET.SubElement(qos, "flowcontrol")
        pfc = ET.SubElement(flowcontrol, "pfc")
        pfc_cos_key = ET.SubElement(pfc, "pfc-cos")
        pfc_cos_key.text = kwargs.pop('pfc_cos')
        pfc_flowcontrol_tx = ET.SubElement(pfc, "pfc-flowcontrol-tx")
        pfc_flowcontrol_tx.text = kwargs.pop('pfc_flowcontrol_tx')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_qos_flowcontrol_pfc_pfc_flowcontrol_rx(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(fortygigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        flowcontrol = ET.SubElement(qos, "flowcontrol")
        pfc = ET.SubElement(flowcontrol, "pfc")
        pfc_cos_key = ET.SubElement(pfc, "pfc-cos")
        pfc_cos_key.text = kwargs.pop('pfc_cos')
        pfc_flowcontrol_rx = ET.SubElement(pfc, "pfc-flowcontrol-rx")
        pfc_flowcontrol_rx.text = kwargs.pop('pfc_flowcontrol_rx')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_rmon_collection_ether_stats_entry_ether_stats_index(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        rmon = ET.SubElement(fortygigabitethernet, "rmon", xmlns="urn:brocade.com:mgmt:brocade-rmon")
        collection = ET.SubElement(rmon, "collection")
        ether_stats_entry = ET.SubElement(collection, "ether-stats-entry")
        ether_stats_index = ET.SubElement(ether_stats_entry, "ether-stats-index")
        ether_stats_index.text = kwargs.pop('ether_stats_index')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_rmon_collection_ether_stats_entry_ether_stats_owner(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        rmon = ET.SubElement(fortygigabitethernet, "rmon", xmlns="urn:brocade.com:mgmt:brocade-rmon")
        collection = ET.SubElement(rmon, "collection")
        ether_stats_entry = ET.SubElement(collection, "ether-stats-entry")
        ether_stats_index_key = ET.SubElement(ether_stats_entry, "ether-stats-index")
        ether_stats_index_key.text = kwargs.pop('ether_stats_index')
        ether_stats_owner = ET.SubElement(ether_stats_entry, "ether-stats-owner")
        ether_stats_owner.text = kwargs.pop('ether_stats_owner')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_rmon_collection_history_control_entry_history_control_index(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        rmon = ET.SubElement(fortygigabitethernet, "rmon", xmlns="urn:brocade.com:mgmt:brocade-rmon")
        collection = ET.SubElement(rmon, "collection")
        history_control_entry = ET.SubElement(collection, "history-control-entry")
        history_control_index = ET.SubElement(history_control_entry, "history-control-index")
        history_control_index.text = kwargs.pop('history_control_index')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_rmon_collection_history_control_entry_history_control_buckets_requested(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        rmon = ET.SubElement(fortygigabitethernet, "rmon", xmlns="urn:brocade.com:mgmt:brocade-rmon")
        collection = ET.SubElement(rmon, "collection")
        history_control_entry = ET.SubElement(collection, "history-control-entry")
        history_control_index_key = ET.SubElement(history_control_entry, "history-control-index")
        history_control_index_key.text = kwargs.pop('history_control_index')
        history_control_buckets_requested = ET.SubElement(history_control_entry, "history-control-buckets-requested")
        history_control_buckets_requested.text = kwargs.pop('history_control_buckets_requested')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_rmon_collection_history_control_entry_history_control_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        rmon = ET.SubElement(fortygigabitethernet, "rmon", xmlns="urn:brocade.com:mgmt:brocade-rmon")
        collection = ET.SubElement(rmon, "collection")
        history_control_entry = ET.SubElement(collection, "history-control-entry")
        history_control_index_key = ET.SubElement(history_control_entry, "history-control-index")
        history_control_index_key.text = kwargs.pop('history_control_index')
        history_control_interval = ET.SubElement(history_control_entry, "history-control-interval")
        history_control_interval.text = kwargs.pop('history_control_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_rmon_collection_history_control_entry_history_control_owner(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        rmon = ET.SubElement(fortygigabitethernet, "rmon", xmlns="urn:brocade.com:mgmt:brocade-rmon")
        collection = ET.SubElement(rmon, "collection")
        history_control_entry = ET.SubElement(collection, "history-control-entry")
        history_control_index_key = ET.SubElement(history_control_entry, "history-control-index")
        history_control_index_key.text = kwargs.pop('history_control_index')
        history_control_owner = ET.SubElement(history_control_entry, "history-control-owner")
        history_control_owner.text = kwargs.pop('history_control_owner')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_udld_udld_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        udld = ET.SubElement(fortygigabitethernet, "udld", xmlns="urn:brocade.com:mgmt:brocade-udld")
        udld_enable = ET.SubElement(udld, "udld-enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_vlan_classifier_activate_group_groupid(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vlan = ET.SubElement(fortygigabitethernet, "vlan", xmlns="urn:brocade.com:mgmt:brocade-vlan")
        classifier = ET.SubElement(vlan, "classifier")
        activate = ET.SubElement(classifier, "activate")
        group = ET.SubElement(activate, "group")
        groupid = ET.SubElement(group, "groupid")
        groupid.text = kwargs.pop('groupid')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_vlan_classifier_activate_group_vlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vlan = ET.SubElement(fortygigabitethernet, "vlan", xmlns="urn:brocade.com:mgmt:brocade-vlan")
        classifier = ET.SubElement(vlan, "classifier")
        activate = ET.SubElement(classifier, "activate")
        group = ET.SubElement(activate, "group")
        groupid_key = ET.SubElement(group, "groupid")
        groupid_key.text = kwargs.pop('groupid')
        vlan = ET.SubElement(group, "vlan")
        vlan.text = kwargs.pop('vlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_bpdu_drop_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        bpdu_drop = ET.SubElement(fortygigabitethernet, "bpdu-drop", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        enable = ET.SubElement(bpdu_drop, "enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_bpdu_drop_direction(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        bpdu_drop = ET.SubElement(fortygigabitethernet, "bpdu-drop", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        direction = ET.SubElement(bpdu_drop, "direction")
        direction.text = kwargs.pop('direction')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_tunnel_tagged_ieee_bpdu(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        tunnel = ET.SubElement(fortygigabitethernet, "tunnel", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        tagged_ieee_bpdu = ET.SubElement(tunnel, "tagged-ieee-bpdu")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_spanning_tree_autoedge(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(fortygigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        autoedge = ET.SubElement(spanning_tree, "autoedge")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_spanning_tree_cost(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(fortygigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        cost = ET.SubElement(spanning_tree, "cost")
        cost.text = kwargs.pop('cost')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_spanning_tree_portfast_portfastbasic(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(fortygigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        portfast = ET.SubElement(spanning_tree, "portfast")
        portfastbasic = ET.SubElement(portfast, "portfastbasic")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_spanning_tree_portfast_bpdu_guard(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(fortygigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        portfast = ET.SubElement(spanning_tree, "portfast")
        bpdu_guard = ET.SubElement(portfast, "bpdu-guard")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_spanning_tree_portfast_bpdu_filter(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(fortygigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        portfast = ET.SubElement(spanning_tree, "portfast")
        bpdu_filter = ET.SubElement(portfast, "bpdu-filter")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_spanning_tree_edgeport_edgeportbasic(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(fortygigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        edgeport = ET.SubElement(spanning_tree, "edgeport")
        edgeportbasic = ET.SubElement(edgeport, "edgeportbasic")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_spanning_tree_edgeport_bpdu_guard(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(fortygigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        edgeport = ET.SubElement(spanning_tree, "edgeport")
        bpdu_guard = ET.SubElement(edgeport, "bpdu-guard")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_spanning_tree_edgeport_bpdu_filter(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(fortygigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        edgeport = ET.SubElement(spanning_tree, "edgeport")
        bpdu_filter = ET.SubElement(edgeport, "bpdu-filter")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_spanning_tree_guard_root(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(fortygigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        guard = ET.SubElement(spanning_tree, "guard")
        root = ET.SubElement(guard, "root")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_spanning_tree_hello_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(fortygigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        hello_time = ET.SubElement(spanning_tree, "hello-time")
        hello_time.text = kwargs.pop('hello_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_spanning_tree_bpdu_mac(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(fortygigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        bpdu_mac = ET.SubElement(spanning_tree, "bpdu-mac")
        bpdu_mac.text = kwargs.pop('bpdu_mac')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_spanning_tree_link_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(fortygigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        link_type = ET.SubElement(spanning_tree, "link-type")
        link_type.text = kwargs.pop('link_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_spanning_tree_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(fortygigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        priority = ET.SubElement(spanning_tree, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_spanning_tree_restricted_role(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(fortygigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        restricted_role = ET.SubElement(spanning_tree, "restricted-role")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_spanning_tree_restricted_tcn(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(fortygigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        restricted_tcn = ET.SubElement(spanning_tree, "restricted-tcn")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_spanning_tree_shutdown(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(fortygigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        shutdown = ET.SubElement(spanning_tree, "shutdown")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_spanning_tree_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(fortygigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        vlan = ET.SubElement(spanning_tree, "vlan")
        id = ET.SubElement(vlan, "id")
        id.text = kwargs.pop('id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_spanning_tree_vlan_cost(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(fortygigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        vlan = ET.SubElement(spanning_tree, "vlan")
        id_key = ET.SubElement(vlan, "id")
        id_key.text = kwargs.pop('id')
        cost = ET.SubElement(vlan, "cost")
        cost.text = kwargs.pop('cost')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_spanning_tree_vlan_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(fortygigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        vlan = ET.SubElement(spanning_tree, "vlan")
        id_key = ET.SubElement(vlan, "id")
        id_key.text = kwargs.pop('id')
        priority = ET.SubElement(vlan, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_spanning_tree_vlan_guard_root(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(fortygigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        vlan = ET.SubElement(spanning_tree, "vlan")
        id_key = ET.SubElement(vlan, "id")
        id_key.text = kwargs.pop('id')
        guard = ET.SubElement(vlan, "guard")
        root = ET.SubElement(guard, "root")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_spanning_tree_instance_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(fortygigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        instance = ET.SubElement(spanning_tree, "instance")
        id = ET.SubElement(instance, "id")
        id.text = kwargs.pop('id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_spanning_tree_instance_cost(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(fortygigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        instance = ET.SubElement(spanning_tree, "instance")
        id_key = ET.SubElement(instance, "id")
        id_key.text = kwargs.pop('id')
        cost = ET.SubElement(instance, "cost")
        cost.text = kwargs.pop('cost')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_spanning_tree_instance_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(fortygigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        instance = ET.SubElement(spanning_tree, "instance")
        id_key = ET.SubElement(instance, "id")
        id_key.text = kwargs.pop('id')
        priority = ET.SubElement(instance, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_spanning_tree_instance_restricted_role(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(fortygigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        instance = ET.SubElement(spanning_tree, "instance")
        id_key = ET.SubElement(instance, "id")
        id_key.text = kwargs.pop('id')
        restricted_role = ET.SubElement(instance, "restricted-role")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_spanning_tree_instance_restricted_tcn(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(fortygigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        instance = ET.SubElement(spanning_tree, "instance")
        id_key = ET.SubElement(instance, "id")
        id_key.text = kwargs.pop('id')
        restricted_tcn = ET.SubElement(instance, "restricted-tcn")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name = ET.SubElement(hundredgigabitethernet, "name")
        name.text = kwargs.pop('name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_cee(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        cee = ET.SubElement(hundredgigabitethernet, "cee")
        cee.text = kwargs.pop('cee')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ifindex(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ifindex = ET.SubElement(hundredgigabitethernet, "ifindex")
        ifindex.text = kwargs.pop('ifindex')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_description(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        description = ET.SubElement(hundredgigabitethernet, "description")
        description.text = kwargs.pop('description')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_shutdown(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        shutdown = ET.SubElement(hundredgigabitethernet, "shutdown")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_channel_group_port_int(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        channel_group = ET.SubElement(hundredgigabitethernet, "channel-group")
        port_int = ET.SubElement(channel_group, "port-int")
        port_int.text = kwargs.pop('port_int')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_channel_group_mode(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        channel_group = ET.SubElement(hundredgigabitethernet, "channel-group")
        mode = ET.SubElement(channel_group, "mode")
        mode.text = kwargs.pop('mode')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_channel_group_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        channel_group = ET.SubElement(hundredgigabitethernet, "channel-group")
        type = ET.SubElement(channel_group, "type")
        type.text = kwargs.pop('type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_mtu(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        mtu = ET.SubElement(hundredgigabitethernet, "mtu")
        mtu.text = kwargs.pop('mtu')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_basic_basic(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport_basic = ET.SubElement(hundredgigabitethernet, "switchport-basic")
        basic = ET.SubElement(switchport_basic, "basic")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_mode_vlan_mode(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        mode = ET.SubElement(switchport, "mode")
        vlan_mode = ET.SubElement(mode, "vlan-mode")
        vlan_mode.text = kwargs.pop('vlan_mode')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_mode_private_vlan_private_vlan_trunk_trunk_basic(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        mode = ET.SubElement(switchport, "mode")
        private_vlan = ET.SubElement(mode, "private-vlan")
        private_vlan_trunk = ET.SubElement(private_vlan, "private-vlan-trunk")
        trunk_basic = ET.SubElement(private_vlan_trunk, "trunk-basic")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_mode_private_vlan_private_vlan_trunk_trunk_promiscuous(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        mode = ET.SubElement(switchport, "mode")
        private_vlan = ET.SubElement(mode, "private-vlan")
        private_vlan_trunk = ET.SubElement(private_vlan, "private-vlan-trunk")
        trunk_promiscuous = ET.SubElement(private_vlan_trunk, "trunk-promiscuous")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_mode_private_vlan_private_vlan_trunk_trunk_host(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        mode = ET.SubElement(switchport, "mode")
        private_vlan = ET.SubElement(mode, "private-vlan")
        private_vlan_trunk = ET.SubElement(private_vlan, "private-vlan-trunk")
        trunk_host = ET.SubElement(private_vlan_trunk, "trunk-host")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_mode_private_vlan_promiscuous(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        mode = ET.SubElement(switchport, "mode")
        private_vlan = ET.SubElement(mode, "private-vlan")
        promiscuous = ET.SubElement(private_vlan, "promiscuous")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_mode_private_vlan_host(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        mode = ET.SubElement(switchport, "mode")
        private_vlan = ET.SubElement(mode, "private-vlan")
        host = ET.SubElement(private_vlan, "host")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_port_security_port_sec_max(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        port_security = ET.SubElement(switchport, "port-security")
        port_sec_max = ET.SubElement(port_security, "port-sec-max")
        port_sec_max.text = kwargs.pop('port_sec_max')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_port_security_port_sec_violation(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        port_security = ET.SubElement(switchport, "port-security")
        port_sec_violation = ET.SubElement(port_security, "port-sec-violation")
        port_sec_violation.text = kwargs.pop('port_sec_violation')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_port_security_port_secutiry_mac_address_mac_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        port_security = ET.SubElement(switchport, "port-security")
        port_secutiry_mac_address = ET.SubElement(port_security, "port-secutiry-mac-address")
        port_sec_vlan_key = ET.SubElement(port_secutiry_mac_address, "port-sec-vlan")
        port_sec_vlan_key.text = kwargs.pop('port_sec_vlan')
        mac_address = ET.SubElement(port_secutiry_mac_address, "mac-address")
        mac_address.text = kwargs.pop('mac_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_port_security_port_secutiry_mac_address_port_sec_vlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        port_security = ET.SubElement(switchport, "port-security")
        port_secutiry_mac_address = ET.SubElement(port_security, "port-secutiry-mac-address")
        mac_address_key = ET.SubElement(port_secutiry_mac_address, "mac-address")
        mac_address_key.text = kwargs.pop('mac_address')
        port_sec_vlan = ET.SubElement(port_secutiry_mac_address, "port-sec-vlan")
        port_sec_vlan.text = kwargs.pop('port_sec_vlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_port_security_sticky_sticky_flag(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        port_security = ET.SubElement(switchport, "port-security")
        sticky = ET.SubElement(port_security, "sticky")
        sticky_flag = ET.SubElement(sticky, "sticky-flag")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_port_security_sticky_port_secutiry_mac_address_mac_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        port_security = ET.SubElement(switchport, "port-security")
        sticky = ET.SubElement(port_security, "sticky")
        port_secutiry_mac_address = ET.SubElement(sticky, "port-secutiry-mac-address")
        port_sec_vlan_key = ET.SubElement(port_secutiry_mac_address, "port-sec-vlan")
        port_sec_vlan_key.text = kwargs.pop('port_sec_vlan')
        mac_address = ET.SubElement(port_secutiry_mac_address, "mac-address")
        mac_address.text = kwargs.pop('mac_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_port_security_sticky_port_secutiry_mac_address_port_sec_vlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        port_security = ET.SubElement(switchport, "port-security")
        sticky = ET.SubElement(port_security, "sticky")
        port_secutiry_mac_address = ET.SubElement(sticky, "port-secutiry-mac-address")
        mac_address_key = ET.SubElement(port_secutiry_mac_address, "mac-address")
        mac_address_key.text = kwargs.pop('mac_address')
        port_sec_vlan = ET.SubElement(port_secutiry_mac_address, "port-sec-vlan")
        port_sec_vlan.text = kwargs.pop('port_sec_vlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_port_security_allowed_ouis_oui(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        port_security = ET.SubElement(switchport, "port-security")
        allowed_ouis = ET.SubElement(port_security, "allowed-ouis")
        oui = ET.SubElement(allowed_ouis, "oui")
        oui.text = kwargs.pop('oui')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_port_security_shutdown_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        port_security = ET.SubElement(switchport, "port-security")
        shutdown_time = ET.SubElement(port_security, "shutdown-time")
        shutdown_time.text = kwargs.pop('shutdown_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_access_accessvlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        access = ET.SubElement(switchport, "access")
        accessvlan = ET.SubElement(access, "accessvlan")
        accessvlan.text = kwargs.pop('accessvlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_access_rspan_access_rspan_access_vlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        access = ET.SubElement(switchport, "access")
        rspan_access = ET.SubElement(access, "rspan-access")
        rspan_access_vlan = ET.SubElement(rspan_access, "rspan-access-vlan")
        rspan_access_vlan.text = kwargs.pop('rspan_access_vlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_access_mac_vlan_classification_access_vlan_access_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        access_mac_vlan_classification = ET.SubElement(switchport, "access-mac-vlan-classification")
        access = ET.SubElement(access_mac_vlan_classification, "access")
        vlan = ET.SubElement(access, "vlan")
        access_mac_address_key = ET.SubElement(vlan, "access-mac-address")
        access_mac_address_key.text = kwargs.pop('access_mac_address')
        access_vlan_id = ET.SubElement(vlan, "access-vlan-id")
        access_vlan_id.text = kwargs.pop('access_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_access_mac_vlan_classification_access_vlan_access_mac_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        access_mac_vlan_classification = ET.SubElement(switchport, "access-mac-vlan-classification")
        access = ET.SubElement(access_mac_vlan_classification, "access")
        vlan = ET.SubElement(access, "vlan")
        access_vlan_id_key = ET.SubElement(vlan, "access-vlan-id")
        access_vlan_id_key.text = kwargs.pop('access_vlan_id')
        access_mac_address = ET.SubElement(vlan, "access-mac-address")
        access_mac_address.text = kwargs.pop('access_mac_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_trunk_private_vlan_classification_private_vlan_trunk_allowed_vlan_add_trunk_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        trunk_private_vlan_classification = ET.SubElement(switchport, "trunk-private-vlan-classification")
        private_vlan = ET.SubElement(trunk_private_vlan_classification, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        add = ET.SubElement(vlan, "add")
        trunk_ctag_id_key = ET.SubElement(add, "trunk-ctag-id")
        trunk_ctag_id_key.text = kwargs.pop('trunk_ctag_id')
        trunk_vlan_id = ET.SubElement(add, "trunk-vlan-id")
        trunk_vlan_id.text = kwargs.pop('trunk_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_trunk_private_vlan_classification_private_vlan_trunk_allowed_vlan_add_trunk_ctag_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        trunk_private_vlan_classification = ET.SubElement(switchport, "trunk-private-vlan-classification")
        private_vlan = ET.SubElement(trunk_private_vlan_classification, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        add = ET.SubElement(vlan, "add")
        trunk_vlan_id_key = ET.SubElement(add, "trunk-vlan-id")
        trunk_vlan_id_key.text = kwargs.pop('trunk_vlan_id')
        trunk_ctag_id = ET.SubElement(add, "trunk-ctag-id")
        trunk_ctag_id.text = kwargs.pop('trunk_ctag_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_trunk_private_vlan_classification_private_vlan_trunk_allowed_vlan_remove_trunk_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        trunk_private_vlan_classification = ET.SubElement(switchport, "trunk-private-vlan-classification")
        private_vlan = ET.SubElement(trunk_private_vlan_classification, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        remove = ET.SubElement(vlan, "remove")
        trunk_ctag_id_key = ET.SubElement(remove, "trunk-ctag-id")
        trunk_ctag_id_key.text = kwargs.pop('trunk_ctag_id')
        trunk_vlan_id = ET.SubElement(remove, "trunk-vlan-id")
        trunk_vlan_id.text = kwargs.pop('trunk_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_trunk_private_vlan_classification_private_vlan_trunk_allowed_vlan_remove_trunk_ctag_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        trunk_private_vlan_classification = ET.SubElement(switchport, "trunk-private-vlan-classification")
        private_vlan = ET.SubElement(trunk_private_vlan_classification, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        remove = ET.SubElement(vlan, "remove")
        trunk_vlan_id_key = ET.SubElement(remove, "trunk-vlan-id")
        trunk_vlan_id_key.text = kwargs.pop('trunk_vlan_id')
        trunk_ctag_id = ET.SubElement(remove, "trunk-ctag-id")
        trunk_ctag_id.text = kwargs.pop('trunk_ctag_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_access_mac_group_vlan_classification_access_vlan_access_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        access_mac_group_vlan_classification = ET.SubElement(switchport, "access-mac-group-vlan-classification")
        access = ET.SubElement(access_mac_group_vlan_classification, "access")
        vlan = ET.SubElement(access, "vlan")
        access_mac_group_key = ET.SubElement(vlan, "access-mac-group")
        access_mac_group_key.text = kwargs.pop('access_mac_group')
        access_vlan_id = ET.SubElement(vlan, "access-vlan-id")
        access_vlan_id.text = kwargs.pop('access_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_access_mac_group_vlan_classification_access_vlan_access_mac_group(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        access_mac_group_vlan_classification = ET.SubElement(switchport, "access-mac-group-vlan-classification")
        access = ET.SubElement(access_mac_group_vlan_classification, "access")
        vlan = ET.SubElement(access, "vlan")
        access_vlan_id_key = ET.SubElement(vlan, "access-vlan-id")
        access_vlan_id_key.text = kwargs.pop('access_vlan_id')
        access_mac_group = ET.SubElement(vlan, "access-mac-group")
        access_mac_group.text = kwargs.pop('access_mac_group')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_trunk_allowed_vlan_all(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        all = ET.SubElement(vlan, "all")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_trunk_allowed_vlan_none(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        none = ET.SubElement(vlan, "none")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_trunk_allowed_vlan_add(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        add = ET.SubElement(vlan, "add")
        add.text = kwargs.pop('add')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_trunk_allowed_vlan_excpt(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        excpt = ET.SubElement(vlan, "except")
        excpt.text = kwargs.pop('excpt')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_trunk_allowed_vlan_remove(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        remove = ET.SubElement(vlan, "remove")
        remove.text = kwargs.pop('remove')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_trunk_allowed_vlanoper_vlan_add(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlanoper = ET.SubElement(allowed, "vlanoper")
        vlan = ET.SubElement(vlanoper, "vlan")
        add = ET.SubElement(vlan, "add")
        add.text = kwargs.pop('add')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_trunk_allowed_vlanoper_vlan_remove(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlanoper = ET.SubElement(allowed, "vlanoper")
        vlan = ET.SubElement(vlanoper, "vlan")
        remove = ET.SubElement(vlan, "remove")
        remove.text = kwargs.pop('remove')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_trunk_allowed_rspan_vlan_add_rspan_trunk_vlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        rspan_vlan = ET.SubElement(allowed, "rspan-vlan")
        add_rspan_trunk_vlan = ET.SubElement(rspan_vlan, "add-rspan-trunk-vlan")
        add_rspan_trunk_vlan.text = kwargs.pop('add_rspan_trunk_vlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_trunk_allowed_rspan_vlan_remove_rspan_trunk_vlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        rspan_vlan = ET.SubElement(allowed, "rspan-vlan")
        remove_rspan_trunk_vlan = ET.SubElement(rspan_vlan, "remove-rspan-trunk-vlan")
        remove_rspan_trunk_vlan.text = kwargs.pop('remove_rspan_trunk_vlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_trunk_allowed_trunk_rspan_vlan_classification_rspan_vlan_add_trunk_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        trunk_rspan_vlan_classification = ET.SubElement(allowed, "trunk-rspan-vlan-classification")
        rspan_vlan = ET.SubElement(trunk_rspan_vlan_classification, "rspan-vlan")
        add = ET.SubElement(rspan_vlan, "add")
        trunk_ctag_id_key = ET.SubElement(add, "trunk-ctag-id")
        trunk_ctag_id_key.text = kwargs.pop('trunk_ctag_id')
        trunk_vlan_id = ET.SubElement(add, "trunk-vlan-id")
        trunk_vlan_id.text = kwargs.pop('trunk_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_trunk_allowed_trunk_rspan_vlan_classification_rspan_vlan_add_trunk_ctag_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        trunk_rspan_vlan_classification = ET.SubElement(allowed, "trunk-rspan-vlan-classification")
        rspan_vlan = ET.SubElement(trunk_rspan_vlan_classification, "rspan-vlan")
        add = ET.SubElement(rspan_vlan, "add")
        trunk_vlan_id_key = ET.SubElement(add, "trunk-vlan-id")
        trunk_vlan_id_key.text = kwargs.pop('trunk_vlan_id')
        trunk_ctag_id = ET.SubElement(add, "trunk-ctag-id")
        trunk_ctag_id.text = kwargs.pop('trunk_ctag_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_trunk_allowed_trunk_rspan_vlan_classification_rspan_vlan_remove_trunk_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        trunk_rspan_vlan_classification = ET.SubElement(allowed, "trunk-rspan-vlan-classification")
        rspan_vlan = ET.SubElement(trunk_rspan_vlan_classification, "rspan-vlan")
        remove = ET.SubElement(rspan_vlan, "remove")
        trunk_ctag_id_key = ET.SubElement(remove, "trunk-ctag-id")
        trunk_ctag_id_key.text = kwargs.pop('trunk_ctag_id')
        trunk_vlan_id = ET.SubElement(remove, "trunk-vlan-id")
        trunk_vlan_id.text = kwargs.pop('trunk_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_trunk_allowed_trunk_rspan_vlan_classification_rspan_vlan_remove_trunk_ctag_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        trunk_rspan_vlan_classification = ET.SubElement(allowed, "trunk-rspan-vlan-classification")
        rspan_vlan = ET.SubElement(trunk_rspan_vlan_classification, "rspan-vlan")
        remove = ET.SubElement(rspan_vlan, "remove")
        trunk_vlan_id_key = ET.SubElement(remove, "trunk-vlan-id")
        trunk_vlan_id_key.text = kwargs.pop('trunk_vlan_id')
        trunk_ctag_id = ET.SubElement(remove, "trunk-ctag-id")
        trunk_ctag_id.text = kwargs.pop('trunk_ctag_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_trunk_trunk_vlan_classification_allowed_vlan_add_trunk_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        trunk_vlan_classification = ET.SubElement(trunk, "trunk-vlan-classification")
        allowed = ET.SubElement(trunk_vlan_classification, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        add = ET.SubElement(vlan, "add")
        trunk_vlan_id = ET.SubElement(add, "trunk-vlan-id")
        trunk_vlan_id.text = kwargs.pop('trunk_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_trunk_trunk_vlan_classification_allowed_vlan_add_trunk_ctag_range(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        trunk_vlan_classification = ET.SubElement(trunk, "trunk-vlan-classification")
        allowed = ET.SubElement(trunk_vlan_classification, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        add = ET.SubElement(vlan, "add")
        trunk_vlan_id_key = ET.SubElement(add, "trunk-vlan-id")
        trunk_vlan_id_key.text = kwargs.pop('trunk_vlan_id')
        trunk_ctag_range = ET.SubElement(add, "trunk-ctag-range")
        trunk_ctag_range.text = kwargs.pop('trunk_ctag_range')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_trunk_trunk_vlan_classification_allowed_vlan_remove_trunk_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        trunk_vlan_classification = ET.SubElement(trunk, "trunk-vlan-classification")
        allowed = ET.SubElement(trunk_vlan_classification, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        remove = ET.SubElement(vlan, "remove")
        trunk_vlan_id = ET.SubElement(remove, "trunk-vlan-id")
        trunk_vlan_id.text = kwargs.pop('trunk_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_trunk_trunk_vlan_classification_allowed_vlan_remove_trunk_ctag_range(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        trunk_vlan_classification = ET.SubElement(trunk, "trunk-vlan-classification")
        allowed = ET.SubElement(trunk_vlan_classification, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        remove = ET.SubElement(vlan, "remove")
        trunk_vlan_id_key = ET.SubElement(remove, "trunk-vlan-id")
        trunk_vlan_id_key.text = kwargs.pop('trunk_vlan_id')
        trunk_ctag_range = ET.SubElement(remove, "trunk-ctag-range")
        trunk_ctag_range.text = kwargs.pop('trunk_ctag_range')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_trunk_default_vlan_config_default_transparent_vlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        default_vlan_config = ET.SubElement(trunk, "default-vlan-config")
        default_transparent_vlan = ET.SubElement(default_vlan_config, "default-transparent-vlan")
        default_transparent_vlan.text = kwargs.pop('default_transparent_vlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_trunk_tag_native_vlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        tag = ET.SubElement(trunk, "tag")
        native_vlan = ET.SubElement(tag, "native-vlan")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_trunk_native_vlan_classification_native_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        native_vlan_classification = ET.SubElement(trunk, "native-vlan-classification")
        native_vlan_id = ET.SubElement(native_vlan_classification, "native-vlan-id")
        native_vlan_id.text = kwargs.pop('native_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_trunk_native_vlan_classification_native_vlan_ctag_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        native_vlan_classification = ET.SubElement(trunk, "native-vlan-classification")
        native_vlan_ctag_id = ET.SubElement(native_vlan_classification, "native-vlan-ctag-id")
        native_vlan_ctag_id.text = kwargs.pop('native_vlan_ctag_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_trunk_native_vlan_xtagged_config_native_vlan_id_xtagged(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        native_vlan_xtagged_config = ET.SubElement(trunk, "native-vlan-xtagged-config")
        native_vlan_id_xtagged = ET.SubElement(native_vlan_xtagged_config, "native-vlan-id-xtagged")
        native_vlan_id_xtagged.text = kwargs.pop('native_vlan_id_xtagged')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_trunk_native_vlan_xtagged_config_native_vlan_ctag_id_xtagged(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        native_vlan_xtagged_config = ET.SubElement(trunk, "native-vlan-xtagged-config")
        native_vlan_ctag_id_xtagged = ET.SubElement(native_vlan_xtagged_config, "native-vlan-ctag-id-xtagged")
        native_vlan_ctag_id_xtagged.text = kwargs.pop('native_vlan_ctag_id_xtagged')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_trunk_native_vlan_xtagged_config_native_vlan_egress_type_xtagged(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        native_vlan_xtagged_config = ET.SubElement(trunk, "native-vlan-xtagged-config")
        native_vlan_egress_type_xtagged = ET.SubElement(native_vlan_xtagged_config, "native-vlan-egress-type-xtagged")
        native_vlan_egress_type_xtagged.text = kwargs.pop('native_vlan_egress_type_xtagged')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_trunk_native_vlan_untagged_config_native_vlan_id_untagged(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        native_vlan_untagged_config = ET.SubElement(trunk, "native-vlan-untagged-config")
        native_vlan_id_untagged = ET.SubElement(native_vlan_untagged_config, "native-vlan-id-untagged")
        native_vlan_id_untagged.text = kwargs.pop('native_vlan_id_untagged')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_private_vlan_trunk_pvlan_tag_pvlan_tag_native_vlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        pvlan_tag = ET.SubElement(trunk, "pvlan-tag")
        pvlan_tag_native_vlan = ET.SubElement(pvlan_tag, "pvlan-tag-native-vlan")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_private_vlan_trunk_native_pvlanNativevlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        native = ET.SubElement(trunk, "native")
        pvlanNativevlan = ET.SubElement(native, "pvlanNativevlan")
        pvlanNativevlan.text = kwargs.pop('pvlanNativevlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_private_vlan_trunk_native_pvlan_native_vlan_ctag_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        native = ET.SubElement(trunk, "native")
        pvlan_native_vlan_ctag_id = ET.SubElement(native, "pvlan-native-vlan-ctag-id")
        pvlan_native_vlan_ctag_id.text = kwargs.pop('pvlan_native_vlan_ctag_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_private_vlan_trunk_allowed_vlan_pvlan_all(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        pvlan_all = ET.SubElement(vlan, "pvlan_all")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_private_vlan_trunk_allowed_vlan_pvlan_none(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        pvlan_none = ET.SubElement(vlan, "pvlan_none")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_private_vlan_trunk_allowed_vlan_pvlan_add(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        pvlan_add = ET.SubElement(vlan, "pvlan_add")
        pvlan_add.text = kwargs.pop('pvlan_add')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_private_vlan_trunk_allowed_vlan_pvlan_except(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        pvlan_except = ET.SubElement(vlan, "pvlan_except")
        pvlan_except.text = kwargs.pop('pvlan_except')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_private_vlan_trunk_allowed_vlan_pvlan_remove(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        pvlan_remove = ET.SubElement(vlan, "pvlan_remove")
        pvlan_remove.text = kwargs.pop('pvlan_remove')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_private_vlan_host_association_host_pri_pvlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        host_association = ET.SubElement(private_vlan, "host-association")
        host_pri_pvlan = ET.SubElement(host_association, "host-pri-pvlan")
        host_pri_pvlan.text = kwargs.pop('host_pri_pvlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_private_vlan_host_association_host_sec_pvlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        host_association = ET.SubElement(private_vlan, "host-association")
        host_sec_pvlan = ET.SubElement(host_association, "host-sec-pvlan")
        host_sec_pvlan.text = kwargs.pop('host_sec_pvlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_private_vlan_association_trunk_trunk_pri_pvlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        association = ET.SubElement(private_vlan, "association")
        trunk = ET.SubElement(association, "trunk")
        trunk_sec_pvlan_key = ET.SubElement(trunk, "trunk-sec-pvlan")
        trunk_sec_pvlan_key.text = kwargs.pop('trunk_sec_pvlan')
        trunk_pri_pvlan = ET.SubElement(trunk, "trunk-pri-pvlan")
        trunk_pri_pvlan.text = kwargs.pop('trunk_pri_pvlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_private_vlan_association_trunk_trunk_sec_pvlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        association = ET.SubElement(private_vlan, "association")
        trunk = ET.SubElement(association, "trunk")
        trunk_pri_pvlan_key = ET.SubElement(trunk, "trunk-pri-pvlan")
        trunk_pri_pvlan_key.text = kwargs.pop('trunk_pri_pvlan')
        trunk_sec_pvlan = ET.SubElement(trunk, "trunk-sec-pvlan")
        trunk_sec_pvlan.text = kwargs.pop('trunk_sec_pvlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_private_vlan_mapping_promis_pri_pvlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        mapping = ET.SubElement(private_vlan, "mapping")
        promis_pri_pvlan = ET.SubElement(mapping, "promis-pri-pvlan")
        promis_pri_pvlan.text = kwargs.pop('promis_pri_pvlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_private_vlan_mapping_oper(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        mapping = ET.SubElement(private_vlan, "mapping")
        promis_pri_pvlan_key = ET.SubElement(mapping, "promis-pri-pvlan")
        promis_pri_pvlan_key.text = kwargs.pop('promis_pri_pvlan')
        oper = ET.SubElement(mapping, "oper")
        oper.text = kwargs.pop('oper')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_private_vlan_mapping_promis_sec_pvlan_range(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        mapping = ET.SubElement(private_vlan, "mapping")
        promis_pri_pvlan_key = ET.SubElement(mapping, "promis-pri-pvlan")
        promis_pri_pvlan_key.text = kwargs.pop('promis_pri_pvlan')
        promis_sec_pvlan_range = ET.SubElement(mapping, "promis-sec-pvlan-range")
        promis_sec_pvlan_range.text = kwargs.pop('promis_sec_pvlan_range')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_access_mac_rspan_vlan_classification_access_vlan_access_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        access_mac_rspan_vlan_classification = ET.SubElement(switchport, "access-mac-rspan-vlan-classification")
        access = ET.SubElement(access_mac_rspan_vlan_classification, "access")
        vlan = ET.SubElement(access, "vlan")
        access_mac_address_key = ET.SubElement(vlan, "access-mac-address")
        access_mac_address_key.text = kwargs.pop('access_mac_address')
        access_vlan_id = ET.SubElement(vlan, "access-vlan-id")
        access_vlan_id.text = kwargs.pop('access_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_access_mac_rspan_vlan_classification_access_vlan_access_mac_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        access_mac_rspan_vlan_classification = ET.SubElement(switchport, "access-mac-rspan-vlan-classification")
        access = ET.SubElement(access_mac_rspan_vlan_classification, "access")
        vlan = ET.SubElement(access, "vlan")
        access_vlan_id_key = ET.SubElement(vlan, "access-vlan-id")
        access_vlan_id_key.text = kwargs.pop('access_vlan_id')
        access_mac_address = ET.SubElement(vlan, "access-mac-address")
        access_mac_address.text = kwargs.pop('access_mac_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_access_mac_group_rspan_vlan_classification_access_vlan_access_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        access_mac_group_rspan_vlan_classification = ET.SubElement(switchport, "access-mac-group-rspan-vlan-classification")
        access = ET.SubElement(access_mac_group_rspan_vlan_classification, "access")
        vlan = ET.SubElement(access, "vlan")
        access_mac_group_key = ET.SubElement(vlan, "access-mac-group")
        access_mac_group_key.text = kwargs.pop('access_mac_group')
        access_vlan_id = ET.SubElement(vlan, "access-vlan-id")
        access_vlan_id.text = kwargs.pop('access_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_access_mac_group_rspan_vlan_classification_access_vlan_access_mac_group(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        access_mac_group_rspan_vlan_classification = ET.SubElement(switchport, "access-mac-group-rspan-vlan-classification")
        access = ET.SubElement(access_mac_group_rspan_vlan_classification, "access")
        vlan = ET.SubElement(access, "vlan")
        access_vlan_id_key = ET.SubElement(vlan, "access-vlan-id")
        access_vlan_id_key.text = kwargs.pop('access_vlan_id')
        access_mac_group = ET.SubElement(vlan, "access-mac-group")
        access_mac_group.text = kwargs.pop('access_mac_group')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_mac_learning_mac_learn_disable_vlan_mac_learning_vlan_add(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        mac_learning = ET.SubElement(hundredgigabitethernet, "mac-learning")
        mac_learn_disable = ET.SubElement(mac_learning, "mac-learn-disable")
        vlan = ET.SubElement(mac_learn_disable, "vlan")
        mac_learning_vlan_add = ET.SubElement(vlan, "mac-learning-vlan-add")
        mac_learning_vlan_add.text = kwargs.pop('mac_learning_vlan_add')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_mac_learning_mac_learn_disable_vlan_mac_learning_vlan_remove(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        mac_learning = ET.SubElement(hundredgigabitethernet, "mac-learning")
        mac_learn_disable = ET.SubElement(mac_learning, "mac-learn-disable")
        vlan = ET.SubElement(mac_learn_disable, "vlan")
        mac_learning_vlan_remove = ET.SubElement(vlan, "mac-learning-vlan-remove")
        mac_learning_vlan_remove.text = kwargs.pop('mac_learning_vlan_remove')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_ip_config_mtu(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        ip_config = ET.SubElement(ip, "ip-config", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        mtu = ET.SubElement(ip_config, "mtu")
        mtu.text = kwargs.pop('mtu')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_ip_config_directed_broadcast(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        ip_config = ET.SubElement(ip, "ip-config", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        directed_broadcast = ET.SubElement(ip_config, "directed-broadcast")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_ip_config_proxy_arp(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        ip_config = ET.SubElement(ip, "ip-config", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        proxy_arp = ET.SubElement(ip_config, "proxy-arp")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_ip_config_arp_aging_timeout(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        ip_config = ET.SubElement(ip, "ip-config", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        arp_aging_timeout = ET.SubElement(ip_config, "arp-aging-timeout")
        arp_aging_timeout.text = kwargs.pop('arp_aging_timeout')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_ip_config_address_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        ip_config = ET.SubElement(ip, "ip-config", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        address = ET.SubElement(ip_config, "address")
        address = ET.SubElement(address, "address")
        address.text = kwargs.pop('address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_ip_config_address_secondary(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        ip_config = ET.SubElement(ip, "ip-config", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        address = ET.SubElement(ip_config, "address")
        address_key = ET.SubElement(address, "address")
        address_key.text = kwargs.pop('address')
        secondary = ET.SubElement(address, "secondary")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_ip_config_address_ospf_passive(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        ip_config = ET.SubElement(ip, "ip-config", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        address = ET.SubElement(ip_config, "address")
        address_key = ET.SubElement(address, "address")
        address_key.text = kwargs.pop('address')
        ospf_passive = ET.SubElement(address, "ospf-passive")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_ip_config_address_ospf_ignore(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        ip_config = ET.SubElement(ip, "ip-config", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        address = ET.SubElement(ip_config, "address")
        address_key = ET.SubElement(address, "address")
        address_key.text = kwargs.pop('address')
        ospf_ignore = ET.SubElement(address, "ospf-ignore")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_arp_node_config_arp_inspection_trust(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        arp_node_config = ET.SubElement(ip, "arp-node-config", xmlns="urn:brocade.com:mgmt:brocade-dai")
        arp = ET.SubElement(arp_node_config, "arp")
        inspection = ET.SubElement(arp, "inspection")
        trust = ET.SubElement(inspection, "trust")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_interface_hu_dhcp_conf_dhcp_relay_servers_relay_ip_addr(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        interface_hu_dhcp_conf = ET.SubElement(ip, "interface-hu-dhcp-conf", xmlns="urn:brocade.com:mgmt:brocade-dhcp")
        dhcp = ET.SubElement(interface_hu_dhcp_conf, "dhcp")
        relay = ET.SubElement(dhcp, "relay")
        servers = ET.SubElement(relay, "servers")
        server_vrf_name_key = ET.SubElement(servers, "server-vrf-name")
        server_vrf_name_key.text = kwargs.pop('server_vrf_name')
        relay_ip_addr = ET.SubElement(servers, "relay-ip-addr")
        relay_ip_addr.text = kwargs.pop('relay_ip_addr')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_interface_hu_dhcp_conf_dhcp_relay_servers_server_vrf_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        interface_hu_dhcp_conf = ET.SubElement(ip, "interface-hu-dhcp-conf", xmlns="urn:brocade.com:mgmt:brocade-dhcp")
        dhcp = ET.SubElement(interface_hu_dhcp_conf, "dhcp")
        relay = ET.SubElement(dhcp, "relay")
        servers = ET.SubElement(relay, "servers")
        relay_ip_addr_key = ET.SubElement(servers, "relay-ip-addr")
        relay_ip_addr_key.text = kwargs.pop('relay_ip_addr')
        server_vrf_name = ET.SubElement(servers, "server-vrf-name")
        server_vrf_name.text = kwargs.pop('server_vrf_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_interface_hu_dhcp_conf_dhcp_relay_gateway(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        interface_hu_dhcp_conf = ET.SubElement(ip, "interface-hu-dhcp-conf", xmlns="urn:brocade.com:mgmt:brocade-dhcp")
        dhcp = ET.SubElement(interface_hu_dhcp_conf, "dhcp")
        relay = ET.SubElement(dhcp, "relay")
        gateway = ET.SubElement(relay, "gateway")
        gateway.text = kwargs.pop('gateway')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_icmp_echo_reply(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        icmp = ET.SubElement(ip, "icmp", xmlns="urn:brocade.com:mgmt:brocade-icmp")
        echo_reply = ET.SubElement(icmp, "echo-reply")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_icmp_rate_limiting(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        icmp = ET.SubElement(ip, "icmp", xmlns="urn:brocade.com:mgmt:brocade-icmp")
        rate_limiting = ET.SubElement(icmp, "rate-limiting")
        rate_limiting.text = kwargs.pop('rate_limiting')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_icmp_unreachable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        icmp = ET.SubElement(ip, "icmp", xmlns="urn:brocade.com:mgmt:brocade-icmp")
        unreachable = ET.SubElement(icmp, "unreachable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_icmp_redirect(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        icmp = ET.SubElement(ip, "icmp", xmlns="urn:brocade.com:mgmt:brocade-icmp")
        redirect = ET.SubElement(icmp, "redirect")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_icmp_address_mask(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        icmp = ET.SubElement(ip, "icmp", xmlns="urn:brocade.com:mgmt:brocade-icmp")
        address_mask = ET.SubElement(icmp, "address-mask")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_igmp_phy_intf_cfg_igmp_last_member_query_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        igmp_phy_intf_cfg = ET.SubElement(ip, "igmp-phy-intf-cfg", xmlns="urn:brocade.com:mgmt:brocade-igmp")
        igmp = ET.SubElement(igmp_phy_intf_cfg, "igmp")
        last_member_query_interval = ET.SubElement(igmp, "last-member-query-interval")
        last_member_query_interval.text = kwargs.pop('last_member_query_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_igmp_phy_intf_cfg_igmp_query_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        igmp_phy_intf_cfg = ET.SubElement(ip, "igmp-phy-intf-cfg", xmlns="urn:brocade.com:mgmt:brocade-igmp")
        igmp = ET.SubElement(igmp_phy_intf_cfg, "igmp")
        query_interval = ET.SubElement(igmp, "query-interval")
        query_interval.text = kwargs.pop('query_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_igmp_phy_intf_cfg_igmp_query_max_response_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        igmp_phy_intf_cfg = ET.SubElement(ip, "igmp-phy-intf-cfg", xmlns="urn:brocade.com:mgmt:brocade-igmp")
        igmp = ET.SubElement(igmp_phy_intf_cfg, "igmp")
        query_max_response_time = ET.SubElement(igmp, "query-max-response-time")
        query_max_response_time.text = kwargs.pop('query_max_response_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_igmp_phy_intf_cfg_igmp_immediate_leave(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        igmp_phy_intf_cfg = ET.SubElement(ip, "igmp-phy-intf-cfg", xmlns="urn:brocade.com:mgmt:brocade-igmp")
        igmp = ET.SubElement(igmp_phy_intf_cfg, "igmp")
        immediate_leave = ET.SubElement(igmp, "immediate-leave")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_igmp_phy_intf_cfg_igmp_static_group_sg_addr(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        igmp_phy_intf_cfg = ET.SubElement(ip, "igmp-phy-intf-cfg", xmlns="urn:brocade.com:mgmt:brocade-igmp")
        igmp = ET.SubElement(igmp_phy_intf_cfg, "igmp")
        static_group = ET.SubElement(igmp, "static-group")
        sg_addr = ET.SubElement(static_group, "sg-addr")
        sg_addr.text = kwargs.pop('sg_addr')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_interface_fo_ospf_conf_ospf1_area(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        area = ET.SubElement(ospf1, "area")
        area.text = kwargs.pop('area')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_interface_fo_ospf_conf_ospf1_auth_change_wait_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        auth_change_wait_time = ET.SubElement(ospf1, "auth-change-wait-time")
        auth_change_wait_time.text = kwargs.pop('auth_change_wait_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_interface_fo_ospf_conf_ospf1_authentication_key_no_encrypt_auth_key_table_no_encrypt_auth_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        authentication_key = ET.SubElement(ospf1, "authentication-key")
        no_encrypt_auth_key_table = ET.SubElement(authentication_key, "no-encrypt-auth-key-table")
        no_encrypt_auth_key = ET.SubElement(no_encrypt_auth_key_table, "no-encrypt-auth-key")
        no_encrypt_auth_key.text = kwargs.pop('no_encrypt_auth_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_interface_fo_ospf_conf_ospf1_authentication_key_auth_key_table_encrypttype(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        authentication_key = ET.SubElement(ospf1, "authentication-key")
        auth_key_table = ET.SubElement(authentication_key, "auth-key-table")
        encrypttype = ET.SubElement(auth_key_table, "encrypttype")
        encrypttype.text = kwargs.pop('encrypttype')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_interface_fo_ospf_conf_ospf1_authentication_key_auth_key_table_auth_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        authentication_key = ET.SubElement(ospf1, "authentication-key")
        auth_key_table = ET.SubElement(authentication_key, "auth-key-table")
        auth_key = ET.SubElement(auth_key_table, "auth-key")
        auth_key.text = kwargs.pop('auth_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_interface_fo_ospf_conf_ospf1_dead_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        dead_interval = ET.SubElement(ospf1, "dead-interval")
        dead_interval.text = kwargs.pop('dead_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_interface_fo_ospf_conf_ospf1_hello_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        hello_interval = ET.SubElement(ospf1, "hello-interval")
        hello_interval.text = kwargs.pop('hello_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_interface_fo_ospf_conf_ospf1_retransmit_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        retransmit_interval = ET.SubElement(ospf1, "retransmit-interval")
        retransmit_interval.text = kwargs.pop('retransmit_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_interface_fo_ospf_conf_ospf1_transmit_delay(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        transmit_delay = ET.SubElement(ospf1, "transmit-delay")
        transmit_delay.text = kwargs.pop('transmit_delay')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_interface_fo_ospf_conf_ospf1_md5_authentication_key_activation_wait_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        md5_authentication = ET.SubElement(ospf1, "md5-authentication")
        key_activation_wait_time = ET.SubElement(md5_authentication, "key-activation-wait-time")
        key_activation_wait_time.text = kwargs.pop('key_activation_wait_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_interface_fo_ospf_conf_ospf1_md5_authentication_no_encrypt_key_table_no_encrypt_key_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        md5_authentication = ET.SubElement(ospf1, "md5-authentication")
        no_encrypt_key_table = ET.SubElement(md5_authentication, "no-encrypt-key-table")
        no_encrypt_key_id = ET.SubElement(no_encrypt_key_table, "no-encrypt-key-id")
        no_encrypt_key_id.text = kwargs.pop('no_encrypt_key_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_interface_fo_ospf_conf_ospf1_md5_authentication_no_encrypt_key_table_no_encrypt_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        md5_authentication = ET.SubElement(ospf1, "md5-authentication")
        no_encrypt_key_table = ET.SubElement(md5_authentication, "no-encrypt-key-table")
        no_encrypt_key = ET.SubElement(no_encrypt_key_table, "no-encrypt-key")
        no_encrypt_key.text = kwargs.pop('no_encrypt_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_interface_fo_ospf_conf_ospf1_md5_authentication_key_table_key_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        md5_authentication = ET.SubElement(ospf1, "md5-authentication")
        key_table = ET.SubElement(md5_authentication, "key-table")
        key_id = ET.SubElement(key_table, "key-id")
        key_id.text = kwargs.pop('key_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_interface_fo_ospf_conf_ospf1_md5_authentication_key_table_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        md5_authentication = ET.SubElement(ospf1, "md5-authentication")
        key_table = ET.SubElement(md5_authentication, "key-table")
        key = ET.SubElement(key_table, "key")
        key.text = kwargs.pop('key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_interface_fo_ospf_conf_ospf1_md5_authentication_key_table_md5_authentication_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        md5_authentication = ET.SubElement(ospf1, "md5-authentication")
        key_table = ET.SubElement(md5_authentication, "key-table")
        md5_authentication_key = ET.SubElement(key_table, "md5-authentication-key")
        md5_authentication_key.text = kwargs.pop('md5_authentication_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_interface_fo_ospf_conf_ospf1_cost(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        cost = ET.SubElement(ospf1, "cost")
        cost.text = kwargs.pop('cost')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_interface_fo_ospf_conf_ospf1_database_filter_all_out(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        database_filter = ET.SubElement(ospf1, "database-filter")
        all_out = ET.SubElement(database_filter, "all-out")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_interface_fo_ospf_conf_ospf1_database_filter_all_external(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        database_filter = ET.SubElement(ospf1, "database-filter")
        all_external = ET.SubElement(database_filter, "all-external")
        all_external.text = kwargs.pop('all_external')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_interface_fo_ospf_conf_ospf1_database_filter_all_summary_external(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        database_filter = ET.SubElement(ospf1, "database-filter")
        all_summary_external = ET.SubElement(database_filter, "all-summary-external")
        all_summary_external.text = kwargs.pop('all_summary_external')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_interface_fo_ospf_conf_ospf1_mtu_ignore(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        mtu_ignore = ET.SubElement(ospf1, "mtu-ignore")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_interface_fo_ospf_conf_ospf1_network(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        network = ET.SubElement(ospf1, "network")
        network.text = kwargs.pop('network')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_interface_fo_ospf_conf_ospf1_active(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        active = ET.SubElement(ospf1, "active")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_interface_fo_ospf_conf_ospf1_passive(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        passive = ET.SubElement(ospf1, "passive")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_interface_fo_ospf_conf_ospf1_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        priority = ET.SubElement(ospf1, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_interface_fo_ospf_conf_ospf1_bfd_intf_bfd_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        bfd = ET.SubElement(ospf1, "bfd")
        intf_bfd_enable = ET.SubElement(bfd, "intf-bfd-enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_pim_intf_phy_cont_pim_int_cmd_pim_sparse(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        pim_intf_phy_cont = ET.SubElement(ip, "pim-intf-phy-cont", xmlns="urn:brocade.com:mgmt:brocade-pim")
        pim_int_cmd = ET.SubElement(pim_intf_phy_cont, "pim-int-cmd")
        pim_sparse = ET.SubElement(pim_int_cmd, "pim-sparse")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_pim_intf_phy_cont_pim_int_cmd_pim_neighbor_filter(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        pim_intf_phy_cont = ET.SubElement(ip, "pim-intf-phy-cont", xmlns="urn:brocade.com:mgmt:brocade-pim")
        pim_int_cmd = ET.SubElement(pim_intf_phy_cont, "pim-int-cmd")
        pim = ET.SubElement(pim_int_cmd, "pim")
        neighbor_filter = ET.SubElement(pim, "neighbor-filter")
        neighbor_filter.text = kwargs.pop('neighbor_filter')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_pim_intf_phy_cont_pim_int_cmd_pim_dr_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        pim_intf_phy_cont = ET.SubElement(ip, "pim-intf-phy-cont", xmlns="urn:brocade.com:mgmt:brocade-pim")
        pim_int_cmd = ET.SubElement(pim_intf_phy_cont, "pim-int-cmd")
        pim = ET.SubElement(pim_int_cmd, "pim")
        dr_priority = ET.SubElement(pim, "dr-priority")
        dr_priority.text = kwargs.pop('dr_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_pim_intf_phy_cont_pim_int_cmd_mcast_bdry_prefix_list(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        pim_intf_phy_cont = ET.SubElement(ip, "pim-intf-phy-cont", xmlns="urn:brocade.com:mgmt:brocade-pim")
        pim_int_cmd = ET.SubElement(pim_intf_phy_cont, "pim-int-cmd")
        mcast_bdry_prefix_list = ET.SubElement(pim_int_cmd, "mcast-bdry-prefix-list")
        mcast_bdry_prefix_list.text = kwargs.pop('mcast_bdry_prefix_list')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_vrf_forwarding(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrf = ET.SubElement(hundredgigabitethernet, "vrf")
        forwarding = ET.SubElement(vrf, "forwarding")
        forwarding.text = kwargs.pop('forwarding')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_raguard(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        raguard = ET.SubElement(ipv6, "raguard")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_ipv6_config_address_use_link_local_only(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        address = ET.SubElement(ipv6_config, "address")
        use_link_local_only = ET.SubElement(address, "use-link-local-only")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_ipv6_config_address_link_local_config_link_local_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        address = ET.SubElement(ipv6_config, "address")
        link_local_config = ET.SubElement(address, "link-local-config")
        link_local_address = ET.SubElement(link_local_config, "link-local-address")
        link_local_address.text = kwargs.pop('link_local_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_ipv6_config_address_link_local_config_link_local(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        address = ET.SubElement(ipv6_config, "address")
        link_local_config = ET.SubElement(address, "link-local-config")
        link_local = ET.SubElement(link_local_config, "link-local")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_ipv6_config_address_ipv6_address_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        address = ET.SubElement(ipv6_config, "address")
        ipv6_address = ET.SubElement(address, "ipv6-address")
        address = ET.SubElement(ipv6_address, "address")
        address.text = kwargs.pop('address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_ipv6_config_address_ipv6_address_secondary(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        address = ET.SubElement(ipv6_config, "address")
        ipv6_address = ET.SubElement(address, "ipv6-address")
        address_key = ET.SubElement(ipv6_address, "address")
        address_key.text = kwargs.pop('address')
        secondary = ET.SubElement(ipv6_address, "secondary")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_ipv6_config_address_ipv6_address_eui_config_eui64(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        address = ET.SubElement(ipv6_config, "address")
        ipv6_address = ET.SubElement(address, "ipv6-address")
        address_key = ET.SubElement(ipv6_address, "address")
        address_key.text = kwargs.pop('address')
        eui_config = ET.SubElement(ipv6_address, "eui-config")
        eui64 = ET.SubElement(eui_config, "eui64")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_ipv6_config_address_ipv6_address_eui_config_eui_secondary(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        address = ET.SubElement(ipv6_config, "address")
        ipv6_address = ET.SubElement(address, "ipv6-address")
        address_key = ET.SubElement(ipv6_address, "address")
        address_key.text = kwargs.pop('address')
        eui_config = ET.SubElement(ipv6_address, "eui-config")
        eui_secondary = ET.SubElement(eui_config, "eui-secondary")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_ipv6_config_address_ipv6_address_anycast(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        address = ET.SubElement(ipv6_config, "address")
        ipv6_address = ET.SubElement(address, "ipv6-address")
        address_key = ET.SubElement(ipv6_address, "address")
        address_key.text = kwargs.pop('address')
        anycast = ET.SubElement(ipv6_address, "anycast")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_ipv6_config_mtu(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        mtu = ET.SubElement(ipv6_config, "mtu")
        mtu.text = kwargs.pop('mtu')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_interface_phy_dhcp_conf_dhcp_relay_servers_relay_ip_addr(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        interface_phy_dhcp_conf = ET.SubElement(ipv6, "interface-phy-dhcp-conf", xmlns="urn:brocade.com:mgmt:brocade-dhcpv6")
        dhcp = ET.SubElement(interface_phy_dhcp_conf, "dhcp")
        relay = ET.SubElement(dhcp, "relay")
        servers = ET.SubElement(relay, "servers")
        relay_ip_addr = ET.SubElement(servers, "relay-ip-addr")
        relay_ip_addr.text = kwargs.pop('relay_ip_addr')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_interface_phy_dhcp_conf_dhcp_relay_servers_server_vrf_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        interface_phy_dhcp_conf = ET.SubElement(ipv6, "interface-phy-dhcp-conf", xmlns="urn:brocade.com:mgmt:brocade-dhcpv6")
        dhcp = ET.SubElement(interface_phy_dhcp_conf, "dhcp")
        relay = ET.SubElement(dhcp, "relay")
        servers = ET.SubElement(relay, "servers")
        relay_ip_addr_key = ET.SubElement(servers, "relay-ip-addr")
        relay_ip_addr_key.text = kwargs.pop('relay_ip_addr')
        server_vrf_name = ET.SubElement(servers, "server-vrf-name")
        server_vrf_name.text = kwargs.pop('server_vrf_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_interface_phy_dhcp_conf_dhcp_relay_servers_interface_interface_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        interface_phy_dhcp_conf = ET.SubElement(ipv6, "interface-phy-dhcp-conf", xmlns="urn:brocade.com:mgmt:brocade-dhcpv6")
        dhcp = ET.SubElement(interface_phy_dhcp_conf, "dhcp")
        relay = ET.SubElement(dhcp, "relay")
        servers = ET.SubElement(relay, "servers")
        relay_ip_addr_key = ET.SubElement(servers, "relay-ip-addr")
        relay_ip_addr_key.text = kwargs.pop('relay_ip_addr')
        interface = ET.SubElement(servers, "interface")
        interface_type = ET.SubElement(interface, "interface-type")
        interface_type.text = kwargs.pop('interface_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_interface_phy_dhcp_conf_dhcp_relay_servers_interface_interface_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        interface_phy_dhcp_conf = ET.SubElement(ipv6, "interface-phy-dhcp-conf", xmlns="urn:brocade.com:mgmt:brocade-dhcpv6")
        dhcp = ET.SubElement(interface_phy_dhcp_conf, "dhcp")
        relay = ET.SubElement(dhcp, "relay")
        servers = ET.SubElement(relay, "servers")
        relay_ip_addr_key = ET.SubElement(servers, "relay-ip-addr")
        relay_ip_addr_key.text = kwargs.pop('relay_ip_addr')
        interface = ET.SubElement(servers, "interface")
        interface_name = ET.SubElement(interface, "interface-name")
        interface_name.text = kwargs.pop('interface_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_icmpv6_echo_reply(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        icmpv6 = ET.SubElement(ipv6, "icmpv6", xmlns="urn:brocade.com:mgmt:brocade-icmp")
        echo_reply = ET.SubElement(icmpv6, "echo-reply")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_icmpv6_rate_limiting(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        icmpv6 = ET.SubElement(ipv6, "icmpv6", xmlns="urn:brocade.com:mgmt:brocade-icmp")
        rate_limiting = ET.SubElement(icmpv6, "rate-limiting")
        rate_limiting.text = kwargs.pop('rate_limiting')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_icmpv6_unreachable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        icmpv6 = ET.SubElement(ipv6, "icmpv6", xmlns="urn:brocade.com:mgmt:brocade-icmp")
        unreachable = ET.SubElement(icmpv6, "unreachable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_icmpv6_redirect(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        icmpv6 = ET.SubElement(ipv6, "icmpv6", xmlns="urn:brocade.com:mgmt:brocade-icmp")
        redirect = ET.SubElement(icmpv6, "redirect")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_access_group_ipv6_access_list(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        access_group = ET.SubElement(ipv6, "access-group", xmlns="urn:brocade.com:mgmt:brocade-ipv6-access-list")
        ip_direction_key = ET.SubElement(access_group, "ip-direction")
        ip_direction_key.text = kwargs.pop('ip_direction')
        ipv6_access_list = ET.SubElement(access_group, "ipv6-access-list")
        ipv6_access_list.text = kwargs.pop('ipv6_access_list')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_access_group_ip_direction(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        access_group = ET.SubElement(ipv6, "access-group", xmlns="urn:brocade.com:mgmt:brocade-ipv6-access-list")
        ipv6_access_list_key = ET.SubElement(access_group, "ipv6-access-list")
        ipv6_access_list_key.text = kwargs.pop('ipv6_access_list')
        ip_direction = ET.SubElement(access_group, "ip-direction")
        ip_direction.text = kwargs.pop('ip_direction')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_access_group_traffic_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        access_group = ET.SubElement(ipv6, "access-group", xmlns="urn:brocade.com:mgmt:brocade-ipv6-access-list")
        ipv6_access_list_key = ET.SubElement(access_group, "ipv6-access-list")
        ipv6_access_list_key.text = kwargs.pop('ipv6_access_list')
        ip_direction_key = ET.SubElement(access_group, "ip-direction")
        ip_direction_key.text = kwargs.pop('ip_direction')
        traffic_type = ET.SubElement(access_group, "traffic-type")
        traffic_type.text = kwargs.pop('traffic_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_policy_route_map_ipv6_route_map_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        policy = ET.SubElement(ipv6, "policy", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        route_map = ET.SubElement(policy, "route-map")
        ipv6_route_map_name = ET.SubElement(route_map, "ipv6-route-map-name")
        ipv6_route_map_name.text = kwargs.pop('ipv6_route_map_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_vrrp_suppress_interface_ra(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        vrrp_suppress_interface_ra = ET.SubElement(ipv6_intf_cmds, "vrrp-suppress-interface-ra")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_managed_config_flag(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        managed_config_flag = ET.SubElement(nd, "managed-config-flag")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_other_config_flag(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        other_config_flag = ET.SubElement(nd, "other-config-flag")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_broadcast_mac_trap(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        broadcast_mac_trap = ET.SubElement(nd, "broadcast-mac-trap")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_ra_lifetime(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        ra_lifetime = ET.SubElement(nd, "ra-lifetime")
        ra_lifetime.text = kwargs.pop('ra_lifetime')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_reachable_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        reachable_time = ET.SubElement(nd, "reachable-time")
        reachable_time.text = kwargs.pop('reachable_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_mtu(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        mtu = ET.SubElement(nd, "mtu")
        mtu.text = kwargs.pop('mtu')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_retrans_timer(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        retrans_timer = ET.SubElement(nd, "retrans-timer")
        retrans_timer.text = kwargs.pop('retrans_timer')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_hoplimit(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        hoplimit = ET.SubElement(nd, "hoplimit")
        hoplimit.text = kwargs.pop('hoplimit')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_ns_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        ns_interval = ET.SubElement(nd, "ns-interval")
        ns_interval.text = kwargs.pop('ns_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_proxy(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        proxy = ET.SubElement(nd, "proxy")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_suppress_ra_suppress_ra_flag(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        suppress_ra = ET.SubElement(nd, "suppress-ra")
        suppress_ra_flag = ET.SubElement(suppress_ra, "suppress-ra-flag")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_suppress_ra_suppress_ra_mtu(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        suppress_ra = ET.SubElement(nd, "suppress-ra")
        suppress_ra_mtu = ET.SubElement(suppress_ra, "suppress-ra-mtu")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_suppress_ra_suppress_ra_all(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        suppress_ra = ET.SubElement(nd, "suppress-ra")
        suppress_ra_all = ET.SubElement(suppress_ra, "suppress-ra-all")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_ra_interval_max_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        ra_interval = ET.SubElement(nd, "ra-interval")
        max_interval = ET.SubElement(ra_interval, "max-interval")
        max_interval.text = kwargs.pop('max_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_ra_interval_min(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        ra_interval = ET.SubElement(nd, "ra-interval")
        min = ET.SubElement(ra_interval, "min")
        min.text = kwargs.pop('min')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_dad_attempts(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        dad = ET.SubElement(nd, "dad")
        attempts = ET.SubElement(dad, "attempts")
        attempts.text = kwargs.pop('attempts')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_dad_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        dad = ET.SubElement(nd, "dad")
        time = ET.SubElement(dad, "time")
        time.text = kwargs.pop('time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_nud_retry_base(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        nud = ET.SubElement(nd, "nud")
        retry = ET.SubElement(nud, "retry")
        base = ET.SubElement(retry, "base")
        base.text = kwargs.pop('base')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_nud_retry_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        nud = ET.SubElement(nd, "nud")
        retry = ET.SubElement(nud, "retry")
        interval = ET.SubElement(retry, "interval")
        interval.text = kwargs.pop('interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_nud_retry_max_attempts(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        nud = ET.SubElement(nd, "nud")
        retry = ET.SubElement(nud, "retry")
        max_attempts = ET.SubElement(retry, "max-attempts")
        max_attempts.text = kwargs.pop('max_attempts')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_cache_expire(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        cache = ET.SubElement(nd, "cache")
        expire = ET.SubElement(cache, "expire")
        expire.text = kwargs.pop('expire')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_prefix_prefix_ipv6_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        prefix = ET.SubElement(nd, "prefix")
        prefix_ipv6_address = ET.SubElement(prefix, "prefix-ipv6-address")
        prefix_ipv6_address.text = kwargs.pop('prefix_ipv6_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_prefix_lifetime_ch_valid_type_ca_no_advertise_no_advertise(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        prefix = ET.SubElement(nd, "prefix")
        prefix_ipv6_address_key = ET.SubElement(prefix, "prefix-ipv6-address")
        prefix_ipv6_address_key.text = kwargs.pop('prefix_ipv6_address')
        lifetime = ET.SubElement(prefix, "lifetime")
        ch_valid_type = ET.SubElement(lifetime, "ch-valid-type")
        ca_no_advertise = ET.SubElement(ch_valid_type, "ca-no-advertise")
        no_advertise = ET.SubElement(ca_no_advertise, "no-advertise")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_prefix_lifetime_ch_valid_type_ca_valid_lifetime_valid_lifetime(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        prefix = ET.SubElement(nd, "prefix")
        prefix_ipv6_address_key = ET.SubElement(prefix, "prefix-ipv6-address")
        prefix_ipv6_address_key.text = kwargs.pop('prefix_ipv6_address')
        lifetime = ET.SubElement(prefix, "lifetime")
        ch_valid_type = ET.SubElement(lifetime, "ch-valid-type")
        ca_valid_lifetime = ET.SubElement(ch_valid_type, "ca-valid-lifetime")
        valid_lifetime = ET.SubElement(ca_valid_lifetime, "valid-lifetime")
        valid_lifetime.text = kwargs.pop('valid_lifetime')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_prefix_lifetime_ch_valid_type_ca_valid_infinite_valid_infinite(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        prefix = ET.SubElement(nd, "prefix")
        prefix_ipv6_address_key = ET.SubElement(prefix, "prefix-ipv6-address")
        prefix_ipv6_address_key.text = kwargs.pop('prefix_ipv6_address')
        lifetime = ET.SubElement(prefix, "lifetime")
        ch_valid_type = ET.SubElement(lifetime, "ch-valid-type")
        ca_valid_infinite = ET.SubElement(ch_valid_type, "ca-valid-infinite")
        valid_infinite = ET.SubElement(ca_valid_infinite, "valid-infinite")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_prefix_lifetime_preferred_ch_preferred_type_ca_preferred_lifetime_preferred_lifetime(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        prefix = ET.SubElement(nd, "prefix")
        prefix_ipv6_address_key = ET.SubElement(prefix, "prefix-ipv6-address")
        prefix_ipv6_address_key.text = kwargs.pop('prefix_ipv6_address')
        lifetime = ET.SubElement(prefix, "lifetime")
        preferred = ET.SubElement(lifetime, "preferred")
        ch_preferred_type = ET.SubElement(preferred, "ch-preferred-type")
        ca_preferred_lifetime = ET.SubElement(ch_preferred_type, "ca-preferred-lifetime")
        preferred_lifetime = ET.SubElement(ca_preferred_lifetime, "preferred-lifetime")
        preferred_lifetime.text = kwargs.pop('preferred_lifetime')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_prefix_lifetime_preferred_ch_preferred_type_ca_preferred_infinite_preferred_infinite(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        prefix = ET.SubElement(nd, "prefix")
        prefix_ipv6_address_key = ET.SubElement(prefix, "prefix-ipv6-address")
        prefix_ipv6_address_key.text = kwargs.pop('prefix_ipv6_address')
        lifetime = ET.SubElement(prefix, "lifetime")
        preferred = ET.SubElement(lifetime, "preferred")
        ch_preferred_type = ET.SubElement(preferred, "ch-preferred-type")
        ca_preferred_infinite = ET.SubElement(ch_preferred_type, "ca-preferred-infinite")
        preferred_infinite = ET.SubElement(ca_preferred_infinite, "preferred-infinite")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_prefix_lifetime_preferred_prefix_flags_no_autoconfig(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        prefix = ET.SubElement(nd, "prefix")
        prefix_ipv6_address_key = ET.SubElement(prefix, "prefix-ipv6-address")
        prefix_ipv6_address_key.text = kwargs.pop('prefix_ipv6_address')
        lifetime = ET.SubElement(prefix, "lifetime")
        preferred = ET.SubElement(lifetime, "preferred")
        prefix_flags = ET.SubElement(preferred, "prefix-flags")
        no_autoconfig = ET.SubElement(prefix_flags, "no-autoconfig")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_prefix_lifetime_preferred_prefix_flags_no_onlink(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        prefix = ET.SubElement(nd, "prefix")
        prefix_ipv6_address_key = ET.SubElement(prefix, "prefix-ipv6-address")
        prefix_ipv6_address_key.text = kwargs.pop('prefix_ipv6_address')
        lifetime = ET.SubElement(prefix, "lifetime")
        preferred = ET.SubElement(lifetime, "preferred")
        prefix_flags = ET.SubElement(preferred, "prefix-flags")
        no_onlink = ET.SubElement(prefix_flags, "no-onlink")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_prefix_lifetime_preferred_prefix_flags_off_link(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        prefix = ET.SubElement(nd, "prefix")
        prefix_ipv6_address_key = ET.SubElement(prefix, "prefix-ipv6-address")
        prefix_ipv6_address_key.text = kwargs.pop('prefix_ipv6_address')
        lifetime = ET.SubElement(prefix, "lifetime")
        preferred = ET.SubElement(lifetime, "preferred")
        prefix_flags = ET.SubElement(preferred, "prefix-flags")
        off_link = ET.SubElement(prefix_flags, "off-link")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_neighbor_ipv6_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        neighbor = ET.SubElement(ipv6_intf_cmds, "neighbor")
        ipv6_address = ET.SubElement(neighbor, "ipv6-address")
        ipv6_address.text = kwargs.pop('ipv6_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_neighbor_hardware_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        neighbor = ET.SubElement(ipv6_intf_cmds, "neighbor")
        ipv6_address_key = ET.SubElement(neighbor, "ipv6-address")
        ipv6_address_key.text = kwargs.pop('ipv6_address')
        hardware_address = ET.SubElement(neighbor, "hardware-address")
        hardware_address.text = kwargs.pop('hardware_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_ipv6_phy_intf_cmds_hop_by_hop_trap(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        ipv6_phy_intf_cmds = ET.SubElement(ipv6, "ipv6-phy-intf-cmds", xmlns="urn:brocade.com:mgmt:brocade-mld-snooping")
        hop_by_hop_trap = ET.SubElement(ipv6_phy_intf_cmds, "hop-by-hop-trap")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_interface_ospfv3_conf_interface_area(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        interface_area = ET.SubElement(interface_ospfv3_conf, "interface-area")
        interface_area.text = kwargs.pop('interface_area')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_interface_ospfv3_conf_active(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        active = ET.SubElement(interface_ospfv3_conf, "active")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_interface_ospfv3_conf_passive(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        passive = ET.SubElement(interface_ospfv3_conf, "passive")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_interface_ospfv3_conf_bfd_bfd_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        bfd = ET.SubElement(interface_ospfv3_conf, "bfd")
        bfd_enable = ET.SubElement(bfd, "bfd-enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_interface_ospfv3_conf_cost(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        cost = ET.SubElement(interface_ospfv3_conf, "cost")
        cost.text = kwargs.pop('cost')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_interface_ospfv3_conf_instance(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        instance = ET.SubElement(interface_ospfv3_conf, "instance")
        instance.text = kwargs.pop('instance')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_interface_ospfv3_conf_mtu_ignore(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        mtu_ignore = ET.SubElement(interface_ospfv3_conf, "mtu-ignore")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_interface_ospfv3_conf_network(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        network = ET.SubElement(interface_ospfv3_conf, "network")
        network.text = kwargs.pop('network')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_interface_ospfv3_conf_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        priority = ET.SubElement(interface_ospfv3_conf, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_interface_ospfv3_conf_suppress_linklsa(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        suppress_linklsa = ET.SubElement(interface_ospfv3_conf, "suppress-linklsa")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_spi(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        spi = ET.SubElement(ipsec_auth_key_config, "spi")
        spi.text = kwargs.pop('spi')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_ah_algorithm_ah(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_ah_algorithm = ET.SubElement(ch_algorithm, "ca-ah-algorithm")
        ah = ET.SubElement(ca_ah_algorithm, "ah")
        ah.text = kwargs.pop('ah')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_ah_algorithm_ah_no_encrypt(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_ah_algorithm = ET.SubElement(ch_algorithm, "ca-ah-algorithm")
        ah_no_encrypt = ET.SubElement(ca_ah_algorithm, "ah-no-encrypt")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_ah_algorithm_ah_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_ah_algorithm = ET.SubElement(ch_algorithm, "ca-ah-algorithm")
        ah_key = ET.SubElement(ca_ah_algorithm, "ah-key")
        ah_key.text = kwargs.pop('ah_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp = ET.SubElement(ca_esp_algorithm, "esp")
        esp.text = kwargs.pop('esp')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp_no_encrypt(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp_no_encrypt = ET.SubElement(ca_esp_algorithm, "esp-no-encrypt")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp_key = ET.SubElement(ca_esp_algorithm, "esp-key")
        esp_key.text = kwargs.pop('esp_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp_auth(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp_auth = ET.SubElement(ca_esp_algorithm, "esp-auth")
        esp_auth.text = kwargs.pop('esp_auth')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp_auth_no_encrypt(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp_auth_no_encrypt = ET.SubElement(ca_esp_algorithm, "esp-auth-no-encrypt")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp_auth_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp_auth_key = ET.SubElement(ca_esp_algorithm, "esp-auth-key")
        esp_auth_key.text = kwargs.pop('esp_auth_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_ipsec_authentication_disable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec = ET.SubElement(authentication, "ipsec")
        ipsec_authentication_disable = ET.SubElement(ipsec, "ipsec-authentication-disable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_ifc_key_add_remove_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec = ET.SubElement(authentication, "ipsec")
        ifc_key_add_remove_interval = ET.SubElement(ipsec, "ifc-key-add-remove-interval")
        ifc_key_add_remove_interval.text = kwargs.pop('ifc_key_add_remove_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_interface_ospfv3_conf_link_interval_properties_hello_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        link_interval_properties = ET.SubElement(interface_ospfv3_conf, "link-interval-properties")
        hello_interval = ET.SubElement(link_interval_properties, "hello-interval")
        hello_interval.text = kwargs.pop('hello_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_interface_ospfv3_conf_link_interval_properties_dead_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        link_interval_properties = ET.SubElement(interface_ospfv3_conf, "link-interval-properties")
        dead_interval = ET.SubElement(link_interval_properties, "dead-interval")
        dead_interval.text = kwargs.pop('dead_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_interface_ospfv3_conf_link_interval_properties_hello_jitter(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        link_interval_properties = ET.SubElement(interface_ospfv3_conf, "link-interval-properties")
        hello_jitter = ET.SubElement(link_interval_properties, "hello-jitter")
        hello_jitter.text = kwargs.pop('hello_jitter')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_interface_ospfv3_conf_link_interval_properties_retransmit_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        link_interval_properties = ET.SubElement(interface_ospfv3_conf, "link-interval-properties")
        retransmit_interval = ET.SubElement(link_interval_properties, "retransmit-interval")
        retransmit_interval.text = kwargs.pop('retransmit_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_interface_ospfv3_conf_link_interval_properties_transmit_delay(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        link_interval_properties = ET.SubElement(interface_ospfv3_conf, "link-interval-properties")
        transmit_delay = ET.SubElement(link_interval_properties, "transmit-delay")
        transmit_delay.text = kwargs.pop('transmit_delay')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_track_track_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        track = ET.SubElement(hundredgigabitethernet, "track")
        track_enable = ET.SubElement(track, "track_enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_track_min_link(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        track = ET.SubElement(hundredgigabitethernet, "track")
        min_link = ET.SubElement(track, "min-link")
        min_link.text = kwargs.pop('min_link')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_track_interface_track_interface_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        track = ET.SubElement(hundredgigabitethernet, "track")
        interface = ET.SubElement(track, "interface")
        track_interface_name_key = ET.SubElement(interface, "track-interface-name")
        track_interface_name_key.text = kwargs.pop('track_interface_name')
        track_interface_type = ET.SubElement(interface, "track-interface-type")
        track_interface_type.text = kwargs.pop('track_interface_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_track_interface_track_interface_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        track = ET.SubElement(hundredgigabitethernet, "track")
        interface = ET.SubElement(track, "interface")
        track_interface_type_key = ET.SubElement(interface, "track-interface-type")
        track_interface_type_key.text = kwargs.pop('track_interface_type')
        track_interface_name = ET.SubElement(interface, "track-interface-name")
        track_interface_name.text = kwargs.pop('track_interface_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_track_remove_remove_all_track_interfaces(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        track = ET.SubElement(hundredgigabitethernet, "track")
        remove = ET.SubElement(track, "remove")
        remove_all_track_interfaces = ET.SubElement(remove, "remove-all-track-interfaces")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_bfd_interval_min_tx(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        bfd = ET.SubElement(hundredgigabitethernet, "bfd")
        interval = ET.SubElement(bfd, "interval")
        min_tx = ET.SubElement(interval, "min-tx")
        min_tx.text = kwargs.pop('min_tx')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_bfd_interval_min_rx(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        bfd = ET.SubElement(hundredgigabitethernet, "bfd")
        interval = ET.SubElement(bfd, "interval")
        min_rx = ET.SubElement(interval, "min-rx")
        min_rx.text = kwargs.pop('min_rx')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_bfd_interval_multiplier(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        bfd = ET.SubElement(hundredgigabitethernet, "bfd")
        interval = ET.SubElement(bfd, "interval")
        multiplier = ET.SubElement(interval, "multiplier")
        multiplier.text = kwargs.pop('multiplier')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_bfd_bfd_shutdown(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        bfd = ET.SubElement(hundredgigabitethernet, "bfd")
        bfd_shutdown = ET.SubElement(bfd, "bfd-shutdown")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_edge_loop_detection_eldprio(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        edge_loop_detection = ET.SubElement(hundredgigabitethernet, "edge-loop-detection")
        eldprio = ET.SubElement(edge_loop_detection, "eldprio")
        eldprio.text = kwargs.pop('eldprio')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_edge_loop_detection_eldvlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        edge_loop_detection = ET.SubElement(hundredgigabitethernet, "edge-loop-detection")
        eldvlan = ET.SubElement(edge_loop_detection, "eldvlan")
        eldvlan.text = kwargs.pop('eldvlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_mac_access_group_mac_access_list(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        mac = ET.SubElement(hundredgigabitethernet, "mac", xmlns="urn:brocade.com:mgmt:brocade-mac-access-list")
        access_group = ET.SubElement(mac, "access-group")
        mac_direction_key = ET.SubElement(access_group, "mac-direction")
        mac_direction_key.text = kwargs.pop('mac_direction')
        mac_access_list = ET.SubElement(access_group, "mac-access-list")
        mac_access_list.text = kwargs.pop('mac_access_list')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_mac_access_group_mac_direction(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        mac = ET.SubElement(hundredgigabitethernet, "mac", xmlns="urn:brocade.com:mgmt:brocade-mac-access-list")
        access_group = ET.SubElement(mac, "access-group")
        mac_access_list_key = ET.SubElement(access_group, "mac-access-list")
        mac_access_list_key.text = kwargs.pop('mac_access_list')
        mac_direction = ET.SubElement(access_group, "mac-direction")
        mac_direction.text = kwargs.pop('mac_direction')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_mac_access_group_traffic_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        mac = ET.SubElement(hundredgigabitethernet, "mac", xmlns="urn:brocade.com:mgmt:brocade-mac-access-list")
        access_group = ET.SubElement(mac, "access-group")
        mac_access_list_key = ET.SubElement(access_group, "mac-access-list")
        mac_access_list_key.text = kwargs.pop('mac_access_list')
        mac_direction_key = ET.SubElement(access_group, "mac-direction")
        mac_direction_key.text = kwargs.pop('mac_direction')
        traffic_type = ET.SubElement(access_group, "traffic-type")
        traffic_type.text = kwargs.pop('traffic_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_vrrp_vrid(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(hundredgigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        vrid = ET.SubElement(vrrp, "vrid")
        vrid.text = kwargs.pop('vrid')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_vrrp_version(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(hundredgigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version = ET.SubElement(vrrp, "version")
        version.text = kwargs.pop('version')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_vrrp_use_v2_checksum(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(hundredgigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        use_v2_checksum = ET.SubElement(vrrp, "use-v2-checksum")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_vrrp_virtual_ip_virtual_ipaddr(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(hundredgigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        virtual_ip = ET.SubElement(vrrp, "virtual-ip")
        virtual_ipaddr = ET.SubElement(virtual_ip, "virtual-ipaddr")
        virtual_ipaddr.text = kwargs.pop('virtual_ipaddr')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_vrrp_track_interface_interface_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(hundredgigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        track = ET.SubElement(vrrp, "track")
        interface = ET.SubElement(track, "interface")
        interface_name_key = ET.SubElement(interface, "interface-name")
        interface_name_key.text = kwargs.pop('interface_name')
        interface_type = ET.SubElement(interface, "interface-type")
        interface_type.text = kwargs.pop('interface_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_vrrp_track_interface_interface_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(hundredgigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        track = ET.SubElement(vrrp, "track")
        interface = ET.SubElement(track, "interface")
        interface_type_key = ET.SubElement(interface, "interface-type")
        interface_type_key.text = kwargs.pop('interface_type')
        interface_name = ET.SubElement(interface, "interface-name")
        interface_name.text = kwargs.pop('interface_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_vrrp_track_interface_track_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(hundredgigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        track = ET.SubElement(vrrp, "track")
        interface = ET.SubElement(track, "interface")
        interface_type_key = ET.SubElement(interface, "interface-type")
        interface_type_key.text = kwargs.pop('interface_type')
        interface_name_key = ET.SubElement(interface, "interface-name")
        interface_name_key.text = kwargs.pop('interface_name')
        track_priority = ET.SubElement(interface, "track-priority")
        track_priority.text = kwargs.pop('track_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_vrrp_advertisement_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(hundredgigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        advertisement_interval = ET.SubElement(vrrp, "advertisement-interval")
        advertisement_interval.text = kwargs.pop('advertisement_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_vrrp_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(hundredgigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        enable = ET.SubElement(vrrp, "enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_vrrp_hold_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(hundredgigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        hold_time = ET.SubElement(vrrp, "hold-time")
        hold_time.text = kwargs.pop('hold_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_vrrp_preempt_mode(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(hundredgigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        preempt_mode = ET.SubElement(vrrp, "preempt-mode")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_vrrp_arp_unicast_request_receive(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(hundredgigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        arp = ET.SubElement(vrrp, "arp")
        unicast_request = ET.SubElement(arp, "unicast-request")
        receive = ET.SubElement(unicast_request, "receive")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_vrrp_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(hundredgigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        priority = ET.SubElement(vrrp, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_vrrp_description(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(hundredgigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        description = ET.SubElement(vrrp, "description")
        description.text = kwargs.pop('description')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_fabric_fabric_isl_fabric_isl_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        fabric = ET.SubElement(hundredgigabitethernet, "fabric", xmlns="urn:brocade.com:mgmt:brocade-fcoe")
        fabric_isl = ET.SubElement(fabric, "fabric-isl")
        fabric_isl_enable = ET.SubElement(fabric_isl, "fabric-isl-enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_fabric_fabric_trunk_fabric_trunk_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        fabric = ET.SubElement(hundredgigabitethernet, "fabric", xmlns="urn:brocade.com:mgmt:brocade-fcoe")
        fabric_trunk = ET.SubElement(fabric, "fabric-trunk")
        fabric_trunk_enable = ET.SubElement(fabric_trunk, "fabric-trunk-enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_fabric_neighbor_discovery_disable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        fabric = ET.SubElement(hundredgigabitethernet, "fabric", xmlns="urn:brocade.com:mgmt:brocade-fcoe")
        neighbor_discovery = ET.SubElement(fabric, "neighbor-discovery")
        disable = ET.SubElement(neighbor_discovery, "disable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_fabric_fabric_dport_fabric_dport_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        fabric = ET.SubElement(hundredgigabitethernet, "fabric", xmlns="urn:brocade.com:mgmt:brocade-fcoe")
        fabric_dport = ET.SubElement(fabric, "fabric-dport")
        fabric_dport_enable = ET.SubElement(fabric_dport, "fabric-dport-enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_fcoeport_fcoeport_map(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        fcoeport = ET.SubElement(hundredgigabitethernet, "fcoeport", xmlns="urn:brocade.com:mgmt:brocade-fcoe")
        fcoeport_map = ET.SubElement(fcoeport, "fcoeport-map")
        fcoeport_map.text = kwargs.pop('fcoeport_map')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_openflow_interface_cfg_logical_instance_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        openflow_interface_cfg = ET.SubElement(hundredgigabitethernet, "openflow-interface-cfg", xmlns="urn:brocade.com:mgmt:brocade-openflow")
        logical_instance_id = ET.SubElement(openflow_interface_cfg, "logical-instance-id")
        logical_instance_id.text = kwargs.pop('logical_instance_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_openflow_interface_cfg_openflow_enable_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        openflow_interface_cfg = ET.SubElement(hundredgigabitethernet, "openflow-interface-cfg", xmlns="urn:brocade.com:mgmt:brocade-openflow")
        openflow_enable = ET.SubElement(openflow_interface_cfg, "openflow-enable")
        enable = ET.SubElement(openflow_enable, "enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_openflow_interface_cfg_openflow_enable_match_profile(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        openflow_interface_cfg = ET.SubElement(hundredgigabitethernet, "openflow-interface-cfg", xmlns="urn:brocade.com:mgmt:brocade-openflow")
        openflow_enable = ET.SubElement(openflow_interface_cfg, "openflow-enable")
        match_profile = ET.SubElement(openflow_enable, "match-profile")
        match_profile.text = kwargs.pop('match_profile')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_sflow_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        sflow = ET.SubElement(hundredgigabitethernet, "sflow", xmlns="urn:brocade.com:mgmt:brocade-sflow")
        enable = ET.SubElement(sflow, "enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_sflow_polling_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        sflow = ET.SubElement(hundredgigabitethernet, "sflow", xmlns="urn:brocade.com:mgmt:brocade-sflow")
        polling_interval = ET.SubElement(sflow, "polling-interval")
        polling_interval.text = kwargs.pop('polling_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_sflow_sample_rate(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        sflow = ET.SubElement(hundredgigabitethernet, "sflow", xmlns="urn:brocade.com:mgmt:brocade-sflow")
        sample_rate = ET.SubElement(sflow, "sample-rate")
        sample_rate.text = kwargs.pop('sample_rate')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_acl_interface_ip_access_group_ip_access_list(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip_acl_interface = ET.SubElement(hundredgigabitethernet, "ip-acl-interface", xmlns="urn:brocade.com:mgmt:brocade-ip-access-list")
        ip = ET.SubElement(ip_acl_interface, "ip")
        access_group = ET.SubElement(ip, "access-group")
        ip_direction_key = ET.SubElement(access_group, "ip-direction")
        ip_direction_key.text = kwargs.pop('ip_direction')
        ip_access_list = ET.SubElement(access_group, "ip-access-list")
        ip_access_list.text = kwargs.pop('ip_access_list')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_acl_interface_ip_access_group_ip_direction(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip_acl_interface = ET.SubElement(hundredgigabitethernet, "ip-acl-interface", xmlns="urn:brocade.com:mgmt:brocade-ip-access-list")
        ip = ET.SubElement(ip_acl_interface, "ip")
        access_group = ET.SubElement(ip, "access-group")
        ip_access_list_key = ET.SubElement(access_group, "ip-access-list")
        ip_access_list_key.text = kwargs.pop('ip_access_list')
        ip_direction = ET.SubElement(access_group, "ip-direction")
        ip_direction.text = kwargs.pop('ip_direction')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_acl_interface_ip_access_group_traffic_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip_acl_interface = ET.SubElement(hundredgigabitethernet, "ip-acl-interface", xmlns="urn:brocade.com:mgmt:brocade-ip-access-list")
        ip = ET.SubElement(ip_acl_interface, "ip")
        access_group = ET.SubElement(ip, "access-group")
        ip_access_list_key = ET.SubElement(access_group, "ip-access-list")
        ip_access_list_key.text = kwargs.pop('ip_access_list')
        ip_direction_key = ET.SubElement(access_group, "ip-direction")
        ip_direction_key.text = kwargs.pop('ip_direction')
        traffic_type = ET.SubElement(access_group, "traffic-type")
        traffic_type.text = kwargs.pop('traffic_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_storm_control_ingress_protocol_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        storm_control = ET.SubElement(hundredgigabitethernet, "storm-control", xmlns="urn:brocade.com:mgmt:brocade-bum-storm-control")
        ingress = ET.SubElement(storm_control, "ingress")
        protocol_type = ET.SubElement(ingress, "protocol-type")
        protocol_type.text = kwargs.pop('protocol_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_storm_control_ingress_rate_format(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        storm_control = ET.SubElement(hundredgigabitethernet, "storm-control", xmlns="urn:brocade.com:mgmt:brocade-bum-storm-control")
        ingress = ET.SubElement(storm_control, "ingress")
        protocol_type_key = ET.SubElement(ingress, "protocol-type")
        protocol_type_key.text = kwargs.pop('protocol_type')
        rate_format = ET.SubElement(ingress, "rate-format")
        rate_format.text = kwargs.pop('rate_format')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_storm_control_ingress_rate_bps(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        storm_control = ET.SubElement(hundredgigabitethernet, "storm-control", xmlns="urn:brocade.com:mgmt:brocade-bum-storm-control")
        ingress = ET.SubElement(storm_control, "ingress")
        protocol_type_key = ET.SubElement(ingress, "protocol-type")
        protocol_type_key.text = kwargs.pop('protocol_type')
        rate_bps = ET.SubElement(ingress, "rate-bps")
        rate_bps.text = kwargs.pop('rate_bps')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_storm_control_ingress_rate_percent(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        storm_control = ET.SubElement(hundredgigabitethernet, "storm-control", xmlns="urn:brocade.com:mgmt:brocade-bum-storm-control")
        ingress = ET.SubElement(storm_control, "ingress")
        protocol_type_key = ET.SubElement(ingress, "protocol-type")
        protocol_type_key.text = kwargs.pop('protocol_type')
        rate_percent = ET.SubElement(ingress, "rate-percent")
        rate_percent.text = kwargs.pop('rate_percent')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_storm_control_ingress_bum_action(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        storm_control = ET.SubElement(hundredgigabitethernet, "storm-control", xmlns="urn:brocade.com:mgmt:brocade-bum-storm-control")
        ingress = ET.SubElement(storm_control, "ingress")
        protocol_type_key = ET.SubElement(ingress, "protocol-type")
        protocol_type_key.text = kwargs.pop('protocol_type')
        bum_action = ET.SubElement(ingress, "bum-action")
        bum_action.text = kwargs.pop('bum_action')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_dot1x_authentication(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        dot1x = ET.SubElement(hundredgigabitethernet, "dot1x", xmlns="urn:brocade.com:mgmt:brocade-dot1x")
        authentication = ET.SubElement(dot1x, "authentication")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_dot1x_port_control(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        dot1x = ET.SubElement(hundredgigabitethernet, "dot1x", xmlns="urn:brocade.com:mgmt:brocade-dot1x")
        port_control = ET.SubElement(dot1x, "port-control")
        port_control.text = kwargs.pop('port_control')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_dot1x_protocol_version(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        dot1x = ET.SubElement(hundredgigabitethernet, "dot1x", xmlns="urn:brocade.com:mgmt:brocade-dot1x")
        protocol_version = ET.SubElement(dot1x, "protocol-version")
        protocol_version.text = kwargs.pop('protocol_version')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_dot1x_quiet_period(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        dot1x = ET.SubElement(hundredgigabitethernet, "dot1x", xmlns="urn:brocade.com:mgmt:brocade-dot1x")
        quiet_period = ET.SubElement(dot1x, "quiet-period")
        quiet_period.text = kwargs.pop('quiet_period')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_dot1x_reauthMax(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        dot1x = ET.SubElement(hundredgigabitethernet, "dot1x", xmlns="urn:brocade.com:mgmt:brocade-dot1x")
        reauthMax = ET.SubElement(dot1x, "reauthMax")
        reauthMax.text = kwargs.pop('reauthMax')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_dot1x_reauthentication(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        dot1x = ET.SubElement(hundredgigabitethernet, "dot1x", xmlns="urn:brocade.com:mgmt:brocade-dot1x")
        reauthentication = ET.SubElement(dot1x, "reauthentication")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_dot1x_timeout_re_authperiod(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        dot1x = ET.SubElement(hundredgigabitethernet, "dot1x", xmlns="urn:brocade.com:mgmt:brocade-dot1x")
        timeout = ET.SubElement(dot1x, "timeout")
        re_authperiod = ET.SubElement(timeout, "re-authperiod")
        re_authperiod.text = kwargs.pop('re_authperiod')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_dot1x_timeout_server_timeout(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        dot1x = ET.SubElement(hundredgigabitethernet, "dot1x", xmlns="urn:brocade.com:mgmt:brocade-dot1x")
        timeout = ET.SubElement(dot1x, "timeout")
        server_timeout = ET.SubElement(timeout, "server-timeout")
        server_timeout.text = kwargs.pop('server_timeout')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_dot1x_timeout_supp_timeout(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        dot1x = ET.SubElement(hundredgigabitethernet, "dot1x", xmlns="urn:brocade.com:mgmt:brocade-dot1x")
        timeout = ET.SubElement(dot1x, "timeout")
        supp_timeout = ET.SubElement(timeout, "supp-timeout")
        supp_timeout.text = kwargs.pop('supp_timeout')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_dot1x_timeout_tx_period(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        dot1x = ET.SubElement(hundredgigabitethernet, "dot1x", xmlns="urn:brocade.com:mgmt:brocade-dot1x")
        timeout = ET.SubElement(dot1x, "timeout")
        tx_period = ET.SubElement(timeout, "tx-period")
        tx_period.text = kwargs.pop('tx_period')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_pbr_interface_ip_policy_route_map_route_map_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip_pbr_interface = ET.SubElement(hundredgigabitethernet, "ip-pbr-interface", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        ip = ET.SubElement(ip_pbr_interface, "ip")
        policy = ET.SubElement(ip, "policy")
        route_map = ET.SubElement(policy, "route-map")
        route_map_name = ET.SubElement(route_map, "route-map-name")
        route_map_name.text = kwargs.pop('route_map_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_lacp_timeout(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        lacp = ET.SubElement(hundredgigabitethernet, "lacp", xmlns="urn:brocade.com:mgmt:brocade-lacp")
        timeout = ET.SubElement(lacp, "timeout")
        timeout.text = kwargs.pop('timeout')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_lacp_std_port_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        lacp = ET.SubElement(hundredgigabitethernet, "lacp", xmlns="urn:brocade.com:mgmt:brocade-lacp")
        std_port_priority = ET.SubElement(lacp, "std_port-priority")
        std_port_priority.text = kwargs.pop('std_port_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_lacp_default_up(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        lacp = ET.SubElement(hundredgigabitethernet, "lacp", xmlns="urn:brocade.com:mgmt:brocade-lacp")
        default_up = ET.SubElement(lacp, "default-up")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_lldp_cee_lldp_cee_on_off(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        lldp = ET.SubElement(hundredgigabitethernet, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        cee = ET.SubElement(lldp, "cee")
        lldp_cee_on_off = ET.SubElement(cee, "lldp-cee-on-off")
        lldp_cee_on_off.text = kwargs.pop('lldp_cee_on_off')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_lldp_dcbx_version(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        lldp = ET.SubElement(hundredgigabitethernet, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        dcbx_version = ET.SubElement(lldp, "dcbx-version")
        dcbx_version.text = kwargs.pop('dcbx_version')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_lldp_disable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        lldp = ET.SubElement(hundredgigabitethernet, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        disable = ET.SubElement(lldp, "disable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_lldp_iscsi_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        lldp = ET.SubElement(hundredgigabitethernet, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        iscsi_priority = ET.SubElement(lldp, "iscsi-priority")
        iscsi_priority.text = kwargs.pop('iscsi_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_lldp_profile(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        lldp = ET.SubElement(hundredgigabitethernet, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        profile = ET.SubElement(lldp, "profile")
        profile.text = kwargs.pop('profile')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_connectivity_deviceconnectivity(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        connectivity = ET.SubElement(hundredgigabitethernet, "connectivity", xmlns="urn:brocade.com:mgmt:brocade-maps")
        deviceconnectivity = ET.SubElement(connectivity, "deviceconnectivity")
        deviceconnectivity.text = kwargs.pop('deviceconnectivity')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_service_policy_in_cg(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        service_policy = ET.SubElement(hundredgigabitethernet, "service-policy", xmlns="urn:brocade.com:mgmt:brocade-policer")
        in_cg = ET.SubElement(service_policy, "in")
        in_cg.text = kwargs.pop('in_cg')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_service_policy_out(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        service_policy = ET.SubElement(hundredgigabitethernet, "service-policy", xmlns="urn:brocade.com:mgmt:brocade-policer")
        out = ET.SubElement(service_policy, "out")
        out.text = kwargs.pop('out')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_port_profile_port(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        port_profile_port = ET.SubElement(hundredgigabitethernet, "port-profile-port", xmlns="urn:brocade.com:mgmt:brocade-port-profile")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_port_profile_to_interface_associations_port_profile_port_port_to_port_profile_domain_association_profile_domain_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        port_profile_to_interface_associations = ET.SubElement(hundredgigabitethernet, "port-profile-to-interface-associations", xmlns="urn:brocade.com:mgmt:brocade-port-profile")
        port_profile_port = ET.SubElement(port_profile_to_interface_associations, "port-profile-port")
        port_to_port_profile_domain_association = ET.SubElement(port_profile_port, "port-to-port-profile-domain-association")
        profile_domain_name = ET.SubElement(port_to_port_profile_domain_association, "profile-domain-name")
        profile_domain_name.text = kwargs.pop('profile_domain_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_port_profile_to_interface_associations_port_profile_port_port_to_port_profile_associations_port_to_port_profile_association(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        port_profile_to_interface_associations = ET.SubElement(hundredgigabitethernet, "port-profile-to-interface-associations", xmlns="urn:brocade.com:mgmt:brocade-port-profile")
        port_profile_port = ET.SubElement(port_profile_to_interface_associations, "port-profile-port")
        port_to_port_profile_associations = ET.SubElement(port_profile_port, "port-to-port-profile-associations")
        port_to_port_profile_association = ET.SubElement(port_to_port_profile_associations, "port-to-port-profile-association")
        port_to_port_profile_association.text = kwargs.pop('port_to_port_profile_association')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_priority_tag_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        priority_tag_enable = ET.SubElement(hundredgigabitethernet, "priority-tag-enable", xmlns="urn:brocade.com:mgmt:brocade-qos")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_qos_default_cos(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(hundredgigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        default_cos = ET.SubElement(qos, "default-cos")
        default_cos.text = kwargs.pop('default_cos')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_qos_trust_trust_cos(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(hundredgigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        trust = ET.SubElement(qos, "trust")
        trust_cos = ET.SubElement(trust, "trust-cos")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_qos_trust_trust_dscp(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(hundredgigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        trust = ET.SubElement(qos, "trust")
        trust_dscp = ET.SubElement(trust, "trust-dscp")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_qos_cos_mutation(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(hundredgigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        cos_mutation = ET.SubElement(qos, "cos-mutation")
        cos_mutation.text = kwargs.pop('cos_mutation')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_qos_cos_traffic_class(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(hundredgigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        cos_traffic_class = ET.SubElement(qos, "cos-traffic-class")
        cos_traffic_class.text = kwargs.pop('cos_traffic_class')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_qos_dscp_mutation(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(hundredgigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        dscp_mutation = ET.SubElement(qos, "dscp-mutation")
        dscp_mutation.text = kwargs.pop('dscp_mutation')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_qos_dscp_traffic_class(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(hundredgigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        dscp_traffic_class = ET.SubElement(qos, "dscp-traffic-class")
        dscp_traffic_class.text = kwargs.pop('dscp_traffic_class')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_qos_dscp_cos(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(hundredgigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        dscp_cos = ET.SubElement(qos, "dscp-cos")
        dscp_cos.text = kwargs.pop('dscp_cos')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_qos_random_detect_traffic_class_red_tc_value(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(hundredgigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        random_detect = ET.SubElement(qos, "random-detect")
        traffic_class = ET.SubElement(random_detect, "traffic-class")
        red_tc_value = ET.SubElement(traffic_class, "red-tc-value")
        red_tc_value.text = kwargs.pop('red_tc_value')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_qos_random_detect_traffic_class_red_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(hundredgigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        random_detect = ET.SubElement(qos, "random-detect")
        traffic_class = ET.SubElement(random_detect, "traffic-class")
        red_tc_value_key = ET.SubElement(traffic_class, "red-tc-value")
        red_tc_value_key.text = kwargs.pop('red_tc_value')
        red_enable = ET.SubElement(traffic_class, "red-enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_qos_random_detect_traffic_class_red_profile_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(hundredgigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        random_detect = ET.SubElement(qos, "random-detect")
        traffic_class = ET.SubElement(random_detect, "traffic-class")
        red_tc_value_key = ET.SubElement(traffic_class, "red-tc-value")
        red_tc_value_key.text = kwargs.pop('red_tc_value')
        red_profile_id = ET.SubElement(traffic_class, "red-profile-id")
        red_profile_id.text = kwargs.pop('red_profile_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_qos_drop_monitor_drop_monitor_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(hundredgigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        drop_monitor = ET.SubElement(qos, "drop-monitor")
        drop_monitor_enable = ET.SubElement(drop_monitor, "drop-monitor-enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_qos_flowcontrol_link_level_flowcontrol_flowcontrol_tx(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(hundredgigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        flowcontrol = ET.SubElement(qos, "flowcontrol")
        link_level_flowcontrol = ET.SubElement(flowcontrol, "link-level-flowcontrol")
        flowcontrol_tx = ET.SubElement(link_level_flowcontrol, "flowcontrol-tx")
        flowcontrol_tx.text = kwargs.pop('flowcontrol_tx')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_qos_flowcontrol_link_level_flowcontrol_flowcontrol_rx(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(hundredgigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        flowcontrol = ET.SubElement(qos, "flowcontrol")
        link_level_flowcontrol = ET.SubElement(flowcontrol, "link-level-flowcontrol")
        flowcontrol_rx = ET.SubElement(link_level_flowcontrol, "flowcontrol-rx")
        flowcontrol_rx.text = kwargs.pop('flowcontrol_rx')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_qos_flowcontrol_pfc_pfc_cos(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(hundredgigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        flowcontrol = ET.SubElement(qos, "flowcontrol")
        pfc = ET.SubElement(flowcontrol, "pfc")
        pfc_cos = ET.SubElement(pfc, "pfc-cos")
        pfc_cos.text = kwargs.pop('pfc_cos')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_qos_flowcontrol_pfc_pfc_flowcontrol_tx(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(hundredgigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        flowcontrol = ET.SubElement(qos, "flowcontrol")
        pfc = ET.SubElement(flowcontrol, "pfc")
        pfc_cos_key = ET.SubElement(pfc, "pfc-cos")
        pfc_cos_key.text = kwargs.pop('pfc_cos')
        pfc_flowcontrol_tx = ET.SubElement(pfc, "pfc-flowcontrol-tx")
        pfc_flowcontrol_tx.text = kwargs.pop('pfc_flowcontrol_tx')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_qos_flowcontrol_pfc_pfc_flowcontrol_rx(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(hundredgigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        flowcontrol = ET.SubElement(qos, "flowcontrol")
        pfc = ET.SubElement(flowcontrol, "pfc")
        pfc_cos_key = ET.SubElement(pfc, "pfc-cos")
        pfc_cos_key.text = kwargs.pop('pfc_cos')
        pfc_flowcontrol_rx = ET.SubElement(pfc, "pfc-flowcontrol-rx")
        pfc_flowcontrol_rx.text = kwargs.pop('pfc_flowcontrol_rx')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_rmon_collection_ether_stats_entry_ether_stats_index(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        rmon = ET.SubElement(hundredgigabitethernet, "rmon", xmlns="urn:brocade.com:mgmt:brocade-rmon")
        collection = ET.SubElement(rmon, "collection")
        ether_stats_entry = ET.SubElement(collection, "ether-stats-entry")
        ether_stats_index = ET.SubElement(ether_stats_entry, "ether-stats-index")
        ether_stats_index.text = kwargs.pop('ether_stats_index')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_rmon_collection_ether_stats_entry_ether_stats_owner(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        rmon = ET.SubElement(hundredgigabitethernet, "rmon", xmlns="urn:brocade.com:mgmt:brocade-rmon")
        collection = ET.SubElement(rmon, "collection")
        ether_stats_entry = ET.SubElement(collection, "ether-stats-entry")
        ether_stats_index_key = ET.SubElement(ether_stats_entry, "ether-stats-index")
        ether_stats_index_key.text = kwargs.pop('ether_stats_index')
        ether_stats_owner = ET.SubElement(ether_stats_entry, "ether-stats-owner")
        ether_stats_owner.text = kwargs.pop('ether_stats_owner')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_rmon_collection_history_control_entry_history_control_index(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        rmon = ET.SubElement(hundredgigabitethernet, "rmon", xmlns="urn:brocade.com:mgmt:brocade-rmon")
        collection = ET.SubElement(rmon, "collection")
        history_control_entry = ET.SubElement(collection, "history-control-entry")
        history_control_index = ET.SubElement(history_control_entry, "history-control-index")
        history_control_index.text = kwargs.pop('history_control_index')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_rmon_collection_history_control_entry_history_control_buckets_requested(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        rmon = ET.SubElement(hundredgigabitethernet, "rmon", xmlns="urn:brocade.com:mgmt:brocade-rmon")
        collection = ET.SubElement(rmon, "collection")
        history_control_entry = ET.SubElement(collection, "history-control-entry")
        history_control_index_key = ET.SubElement(history_control_entry, "history-control-index")
        history_control_index_key.text = kwargs.pop('history_control_index')
        history_control_buckets_requested = ET.SubElement(history_control_entry, "history-control-buckets-requested")
        history_control_buckets_requested.text = kwargs.pop('history_control_buckets_requested')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_rmon_collection_history_control_entry_history_control_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        rmon = ET.SubElement(hundredgigabitethernet, "rmon", xmlns="urn:brocade.com:mgmt:brocade-rmon")
        collection = ET.SubElement(rmon, "collection")
        history_control_entry = ET.SubElement(collection, "history-control-entry")
        history_control_index_key = ET.SubElement(history_control_entry, "history-control-index")
        history_control_index_key.text = kwargs.pop('history_control_index')
        history_control_interval = ET.SubElement(history_control_entry, "history-control-interval")
        history_control_interval.text = kwargs.pop('history_control_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_rmon_collection_history_control_entry_history_control_owner(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        rmon = ET.SubElement(hundredgigabitethernet, "rmon", xmlns="urn:brocade.com:mgmt:brocade-rmon")
        collection = ET.SubElement(rmon, "collection")
        history_control_entry = ET.SubElement(collection, "history-control-entry")
        history_control_index_key = ET.SubElement(history_control_entry, "history-control-index")
        history_control_index_key.text = kwargs.pop('history_control_index')
        history_control_owner = ET.SubElement(history_control_entry, "history-control-owner")
        history_control_owner.text = kwargs.pop('history_control_owner')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_udld_udld_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        udld = ET.SubElement(hundredgigabitethernet, "udld", xmlns="urn:brocade.com:mgmt:brocade-udld")
        udld_enable = ET.SubElement(udld, "udld-enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_vlan_classifier_activate_group_groupid(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vlan = ET.SubElement(hundredgigabitethernet, "vlan", xmlns="urn:brocade.com:mgmt:brocade-vlan")
        classifier = ET.SubElement(vlan, "classifier")
        activate = ET.SubElement(classifier, "activate")
        group = ET.SubElement(activate, "group")
        groupid = ET.SubElement(group, "groupid")
        groupid.text = kwargs.pop('groupid')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_vlan_classifier_activate_group_vlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vlan = ET.SubElement(hundredgigabitethernet, "vlan", xmlns="urn:brocade.com:mgmt:brocade-vlan")
        classifier = ET.SubElement(vlan, "classifier")
        activate = ET.SubElement(classifier, "activate")
        group = ET.SubElement(activate, "group")
        groupid_key = ET.SubElement(group, "groupid")
        groupid_key.text = kwargs.pop('groupid')
        vlan = ET.SubElement(group, "vlan")
        vlan.text = kwargs.pop('vlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_bpdu_drop_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        bpdu_drop = ET.SubElement(hundredgigabitethernet, "bpdu-drop", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        enable = ET.SubElement(bpdu_drop, "enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_bpdu_drop_direction(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        bpdu_drop = ET.SubElement(hundredgigabitethernet, "bpdu-drop", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        direction = ET.SubElement(bpdu_drop, "direction")
        direction.text = kwargs.pop('direction')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_spanning_tree_autoedge(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(hundredgigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        autoedge = ET.SubElement(spanning_tree, "autoedge")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_spanning_tree_cost(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(hundredgigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        cost = ET.SubElement(spanning_tree, "cost")
        cost.text = kwargs.pop('cost')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_spanning_tree_portfast_portfastbasic(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(hundredgigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        portfast = ET.SubElement(spanning_tree, "portfast")
        portfastbasic = ET.SubElement(portfast, "portfastbasic")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_spanning_tree_portfast_bpdu_guard(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(hundredgigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        portfast = ET.SubElement(spanning_tree, "portfast")
        bpdu_guard = ET.SubElement(portfast, "bpdu-guard")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_spanning_tree_portfast_bpdu_filter(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(hundredgigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        portfast = ET.SubElement(spanning_tree, "portfast")
        bpdu_filter = ET.SubElement(portfast, "bpdu-filter")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_spanning_tree_edgeport_edgeportbasic(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(hundredgigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        edgeport = ET.SubElement(spanning_tree, "edgeport")
        edgeportbasic = ET.SubElement(edgeport, "edgeportbasic")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_spanning_tree_edgeport_bpdu_guard(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(hundredgigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        edgeport = ET.SubElement(spanning_tree, "edgeport")
        bpdu_guard = ET.SubElement(edgeport, "bpdu-guard")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_spanning_tree_edgeport_bpdu_filter(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(hundredgigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        edgeport = ET.SubElement(spanning_tree, "edgeport")
        bpdu_filter = ET.SubElement(edgeport, "bpdu-filter")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_spanning_tree_guard_root(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(hundredgigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        guard = ET.SubElement(spanning_tree, "guard")
        root = ET.SubElement(guard, "root")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_spanning_tree_hello_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(hundredgigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        hello_time = ET.SubElement(spanning_tree, "hello-time")
        hello_time.text = kwargs.pop('hello_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_spanning_tree_bpdu_mac(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(hundredgigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        bpdu_mac = ET.SubElement(spanning_tree, "bpdu-mac")
        bpdu_mac.text = kwargs.pop('bpdu_mac')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_spanning_tree_link_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(hundredgigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        link_type = ET.SubElement(spanning_tree, "link-type")
        link_type.text = kwargs.pop('link_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_spanning_tree_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(hundredgigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        priority = ET.SubElement(spanning_tree, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_spanning_tree_restricted_role(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(hundredgigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        restricted_role = ET.SubElement(spanning_tree, "restricted-role")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_spanning_tree_restricted_tcn(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(hundredgigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        restricted_tcn = ET.SubElement(spanning_tree, "restricted-tcn")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_spanning_tree_shutdown(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(hundredgigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        shutdown = ET.SubElement(spanning_tree, "shutdown")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_spanning_tree_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(hundredgigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        vlan = ET.SubElement(spanning_tree, "vlan")
        id = ET.SubElement(vlan, "id")
        id.text = kwargs.pop('id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_spanning_tree_vlan_cost(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(hundredgigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        vlan = ET.SubElement(spanning_tree, "vlan")
        id_key = ET.SubElement(vlan, "id")
        id_key.text = kwargs.pop('id')
        cost = ET.SubElement(vlan, "cost")
        cost.text = kwargs.pop('cost')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_spanning_tree_vlan_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(hundredgigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        vlan = ET.SubElement(spanning_tree, "vlan")
        id_key = ET.SubElement(vlan, "id")
        id_key.text = kwargs.pop('id')
        priority = ET.SubElement(vlan, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_spanning_tree_vlan_guard_root(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(hundredgigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        vlan = ET.SubElement(spanning_tree, "vlan")
        id_key = ET.SubElement(vlan, "id")
        id_key.text = kwargs.pop('id')
        guard = ET.SubElement(vlan, "guard")
        root = ET.SubElement(guard, "root")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_spanning_tree_instance_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(hundredgigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        instance = ET.SubElement(spanning_tree, "instance")
        id = ET.SubElement(instance, "id")
        id.text = kwargs.pop('id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_spanning_tree_instance_cost(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(hundredgigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        instance = ET.SubElement(spanning_tree, "instance")
        id_key = ET.SubElement(instance, "id")
        id_key.text = kwargs.pop('id')
        cost = ET.SubElement(instance, "cost")
        cost.text = kwargs.pop('cost')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_spanning_tree_instance_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(hundredgigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        instance = ET.SubElement(spanning_tree, "instance")
        id_key = ET.SubElement(instance, "id")
        id_key.text = kwargs.pop('id')
        priority = ET.SubElement(instance, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_spanning_tree_instance_restricted_role(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(hundredgigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        instance = ET.SubElement(spanning_tree, "instance")
        id_key = ET.SubElement(instance, "id")
        id_key.text = kwargs.pop('id')
        restricted_role = ET.SubElement(instance, "restricted-role")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_spanning_tree_instance_restricted_tcn(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(hundredgigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        instance = ET.SubElement(spanning_tree, "instance")
        id_key = ET.SubElement(instance, "id")
        id_key.text = kwargs.pop('id')
        restricted_tcn = ET.SubElement(instance, "restricted-tcn")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name = ET.SubElement(port_channel, "name")
        name.text = kwargs.pop('name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_cee(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        cee = ET.SubElement(port_channel, "cee")
        cee.text = kwargs.pop('cee')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_vlag_ignore_split(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        vlag = ET.SubElement(port_channel, "vlag")
        ignore_split = ET.SubElement(vlag, "ignore-split")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_po_speed(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        po_speed = ET.SubElement(port_channel, "po-speed")
        po_speed.text = kwargs.pop('po_speed')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_ifindex(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        ifindex = ET.SubElement(port_channel, "ifindex")
        ifindex.text = kwargs.pop('ifindex')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_description(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        description = ET.SubElement(port_channel, "description")
        description.text = kwargs.pop('description')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_shutdown(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        shutdown = ET.SubElement(port_channel, "shutdown")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_minimum_links(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        minimum_links = ET.SubElement(port_channel, "minimum-links")
        minimum_links.text = kwargs.pop('minimum_links')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_mtu(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        mtu = ET.SubElement(port_channel, "mtu")
        mtu.text = kwargs.pop('mtu')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_basic_basic(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport_basic = ET.SubElement(port_channel, "switchport-basic")
        basic = ET.SubElement(switchport_basic, "basic")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_mode_vlan_mode(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        mode = ET.SubElement(switchport, "mode")
        vlan_mode = ET.SubElement(mode, "vlan-mode")
        vlan_mode.text = kwargs.pop('vlan_mode')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_mode_private_vlan_private_vlan_trunk_trunk_basic(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        mode = ET.SubElement(switchport, "mode")
        private_vlan = ET.SubElement(mode, "private-vlan")
        private_vlan_trunk = ET.SubElement(private_vlan, "private-vlan-trunk")
        trunk_basic = ET.SubElement(private_vlan_trunk, "trunk-basic")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_mode_private_vlan_private_vlan_trunk_trunk_promiscuous(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        mode = ET.SubElement(switchport, "mode")
        private_vlan = ET.SubElement(mode, "private-vlan")
        private_vlan_trunk = ET.SubElement(private_vlan, "private-vlan-trunk")
        trunk_promiscuous = ET.SubElement(private_vlan_trunk, "trunk-promiscuous")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_mode_private_vlan_private_vlan_trunk_trunk_host(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        mode = ET.SubElement(switchport, "mode")
        private_vlan = ET.SubElement(mode, "private-vlan")
        private_vlan_trunk = ET.SubElement(private_vlan, "private-vlan-trunk")
        trunk_host = ET.SubElement(private_vlan_trunk, "trunk-host")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_mode_private_vlan_promiscuous(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        mode = ET.SubElement(switchport, "mode")
        private_vlan = ET.SubElement(mode, "private-vlan")
        promiscuous = ET.SubElement(private_vlan, "promiscuous")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_mode_private_vlan_host(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        mode = ET.SubElement(switchport, "mode")
        private_vlan = ET.SubElement(mode, "private-vlan")
        host = ET.SubElement(private_vlan, "host")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_port_security_port_sec_max(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        port_security = ET.SubElement(switchport, "port-security")
        port_sec_max = ET.SubElement(port_security, "port-sec-max")
        port_sec_max.text = kwargs.pop('port_sec_max')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_port_security_port_sec_violation(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        port_security = ET.SubElement(switchport, "port-security")
        port_sec_violation = ET.SubElement(port_security, "port-sec-violation")
        port_sec_violation.text = kwargs.pop('port_sec_violation')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_port_security_port_secutiry_mac_address_mac_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        port_security = ET.SubElement(switchport, "port-security")
        port_secutiry_mac_address = ET.SubElement(port_security, "port-secutiry-mac-address")
        port_sec_vlan_key = ET.SubElement(port_secutiry_mac_address, "port-sec-vlan")
        port_sec_vlan_key.text = kwargs.pop('port_sec_vlan')
        mac_address = ET.SubElement(port_secutiry_mac_address, "mac-address")
        mac_address.text = kwargs.pop('mac_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_port_security_port_secutiry_mac_address_port_sec_vlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        port_security = ET.SubElement(switchport, "port-security")
        port_secutiry_mac_address = ET.SubElement(port_security, "port-secutiry-mac-address")
        mac_address_key = ET.SubElement(port_secutiry_mac_address, "mac-address")
        mac_address_key.text = kwargs.pop('mac_address')
        port_sec_vlan = ET.SubElement(port_secutiry_mac_address, "port-sec-vlan")
        port_sec_vlan.text = kwargs.pop('port_sec_vlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_port_security_sticky_sticky_flag(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        port_security = ET.SubElement(switchport, "port-security")
        sticky = ET.SubElement(port_security, "sticky")
        sticky_flag = ET.SubElement(sticky, "sticky-flag")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_port_security_sticky_port_secutiry_mac_address_mac_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        port_security = ET.SubElement(switchport, "port-security")
        sticky = ET.SubElement(port_security, "sticky")
        port_secutiry_mac_address = ET.SubElement(sticky, "port-secutiry-mac-address")
        port_sec_vlan_key = ET.SubElement(port_secutiry_mac_address, "port-sec-vlan")
        port_sec_vlan_key.text = kwargs.pop('port_sec_vlan')
        mac_address = ET.SubElement(port_secutiry_mac_address, "mac-address")
        mac_address.text = kwargs.pop('mac_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_port_security_sticky_port_secutiry_mac_address_port_sec_vlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        port_security = ET.SubElement(switchport, "port-security")
        sticky = ET.SubElement(port_security, "sticky")
        port_secutiry_mac_address = ET.SubElement(sticky, "port-secutiry-mac-address")
        mac_address_key = ET.SubElement(port_secutiry_mac_address, "mac-address")
        mac_address_key.text = kwargs.pop('mac_address')
        port_sec_vlan = ET.SubElement(port_secutiry_mac_address, "port-sec-vlan")
        port_sec_vlan.text = kwargs.pop('port_sec_vlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_port_security_allowed_ouis_oui(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        port_security = ET.SubElement(switchport, "port-security")
        allowed_ouis = ET.SubElement(port_security, "allowed-ouis")
        oui = ET.SubElement(allowed_ouis, "oui")
        oui.text = kwargs.pop('oui')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_port_security_shutdown_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        port_security = ET.SubElement(switchport, "port-security")
        shutdown_time = ET.SubElement(port_security, "shutdown-time")
        shutdown_time.text = kwargs.pop('shutdown_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_access_accessvlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        access = ET.SubElement(switchport, "access")
        accessvlan = ET.SubElement(access, "accessvlan")
        accessvlan.text = kwargs.pop('accessvlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_access_mac_vlan_classification_access_vlan_access_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        access_mac_vlan_classification = ET.SubElement(switchport, "access-mac-vlan-classification")
        access = ET.SubElement(access_mac_vlan_classification, "access")
        vlan = ET.SubElement(access, "vlan")
        access_mac_address_key = ET.SubElement(vlan, "access-mac-address")
        access_mac_address_key.text = kwargs.pop('access_mac_address')
        access_vlan_id = ET.SubElement(vlan, "access-vlan-id")
        access_vlan_id.text = kwargs.pop('access_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_access_mac_vlan_classification_access_vlan_access_mac_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        access_mac_vlan_classification = ET.SubElement(switchport, "access-mac-vlan-classification")
        access = ET.SubElement(access_mac_vlan_classification, "access")
        vlan = ET.SubElement(access, "vlan")
        access_vlan_id_key = ET.SubElement(vlan, "access-vlan-id")
        access_vlan_id_key.text = kwargs.pop('access_vlan_id')
        access_mac_address = ET.SubElement(vlan, "access-mac-address")
        access_mac_address.text = kwargs.pop('access_mac_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_trunk_private_vlan_classification_private_vlan_trunk_allowed_vlan_add_trunk_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        trunk_private_vlan_classification = ET.SubElement(switchport, "trunk-private-vlan-classification")
        private_vlan = ET.SubElement(trunk_private_vlan_classification, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        add = ET.SubElement(vlan, "add")
        trunk_ctag_id_key = ET.SubElement(add, "trunk-ctag-id")
        trunk_ctag_id_key.text = kwargs.pop('trunk_ctag_id')
        trunk_vlan_id = ET.SubElement(add, "trunk-vlan-id")
        trunk_vlan_id.text = kwargs.pop('trunk_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_trunk_private_vlan_classification_private_vlan_trunk_allowed_vlan_add_trunk_ctag_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        trunk_private_vlan_classification = ET.SubElement(switchport, "trunk-private-vlan-classification")
        private_vlan = ET.SubElement(trunk_private_vlan_classification, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        add = ET.SubElement(vlan, "add")
        trunk_vlan_id_key = ET.SubElement(add, "trunk-vlan-id")
        trunk_vlan_id_key.text = kwargs.pop('trunk_vlan_id')
        trunk_ctag_id = ET.SubElement(add, "trunk-ctag-id")
        trunk_ctag_id.text = kwargs.pop('trunk_ctag_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_trunk_private_vlan_classification_private_vlan_trunk_allowed_vlan_remove_trunk_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        trunk_private_vlan_classification = ET.SubElement(switchport, "trunk-private-vlan-classification")
        private_vlan = ET.SubElement(trunk_private_vlan_classification, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        remove = ET.SubElement(vlan, "remove")
        trunk_ctag_id_key = ET.SubElement(remove, "trunk-ctag-id")
        trunk_ctag_id_key.text = kwargs.pop('trunk_ctag_id')
        trunk_vlan_id = ET.SubElement(remove, "trunk-vlan-id")
        trunk_vlan_id.text = kwargs.pop('trunk_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_trunk_private_vlan_classification_private_vlan_trunk_allowed_vlan_remove_trunk_ctag_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        trunk_private_vlan_classification = ET.SubElement(switchport, "trunk-private-vlan-classification")
        private_vlan = ET.SubElement(trunk_private_vlan_classification, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        remove = ET.SubElement(vlan, "remove")
        trunk_vlan_id_key = ET.SubElement(remove, "trunk-vlan-id")
        trunk_vlan_id_key.text = kwargs.pop('trunk_vlan_id')
        trunk_ctag_id = ET.SubElement(remove, "trunk-ctag-id")
        trunk_ctag_id.text = kwargs.pop('trunk_ctag_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_access_mac_group_vlan_classification_access_vlan_access_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        access_mac_group_vlan_classification = ET.SubElement(switchport, "access-mac-group-vlan-classification")
        access = ET.SubElement(access_mac_group_vlan_classification, "access")
        vlan = ET.SubElement(access, "vlan")
        access_mac_group_key = ET.SubElement(vlan, "access-mac-group")
        access_mac_group_key.text = kwargs.pop('access_mac_group')
        access_vlan_id = ET.SubElement(vlan, "access-vlan-id")
        access_vlan_id.text = kwargs.pop('access_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_access_mac_group_vlan_classification_access_vlan_access_mac_group(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        access_mac_group_vlan_classification = ET.SubElement(switchport, "access-mac-group-vlan-classification")
        access = ET.SubElement(access_mac_group_vlan_classification, "access")
        vlan = ET.SubElement(access, "vlan")
        access_vlan_id_key = ET.SubElement(vlan, "access-vlan-id")
        access_vlan_id_key.text = kwargs.pop('access_vlan_id')
        access_mac_group = ET.SubElement(vlan, "access-mac-group")
        access_mac_group.text = kwargs.pop('access_mac_group')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_trunk_allowed_vlan_all(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        all = ET.SubElement(vlan, "all")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_trunk_allowed_vlan_none(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        none = ET.SubElement(vlan, "none")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_trunk_allowed_vlan_add(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        add = ET.SubElement(vlan, "add")
        add.text = kwargs.pop('add')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_trunk_allowed_vlan_excpt(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        excpt = ET.SubElement(vlan, "except")
        excpt.text = kwargs.pop('excpt')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_trunk_allowed_vlan_remove(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        remove = ET.SubElement(vlan, "remove")
        remove.text = kwargs.pop('remove')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_trunk_allowed_vlanoper_vlan_add(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlanoper = ET.SubElement(allowed, "vlanoper")
        vlan = ET.SubElement(vlanoper, "vlan")
        add = ET.SubElement(vlan, "add")
        add.text = kwargs.pop('add')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_trunk_allowed_vlanoper_vlan_remove(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlanoper = ET.SubElement(allowed, "vlanoper")
        vlan = ET.SubElement(vlanoper, "vlan")
        remove = ET.SubElement(vlan, "remove")
        remove.text = kwargs.pop('remove')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_trunk_trunk_vlan_classification_allowed_vlan_add_trunk_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        trunk_vlan_classification = ET.SubElement(trunk, "trunk-vlan-classification")
        allowed = ET.SubElement(trunk_vlan_classification, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        add = ET.SubElement(vlan, "add")
        trunk_vlan_id = ET.SubElement(add, "trunk-vlan-id")
        trunk_vlan_id.text = kwargs.pop('trunk_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_trunk_trunk_vlan_classification_allowed_vlan_add_trunk_ctag_range(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        trunk_vlan_classification = ET.SubElement(trunk, "trunk-vlan-classification")
        allowed = ET.SubElement(trunk_vlan_classification, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        add = ET.SubElement(vlan, "add")
        trunk_vlan_id_key = ET.SubElement(add, "trunk-vlan-id")
        trunk_vlan_id_key.text = kwargs.pop('trunk_vlan_id')
        trunk_ctag_range = ET.SubElement(add, "trunk-ctag-range")
        trunk_ctag_range.text = kwargs.pop('trunk_ctag_range')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_trunk_trunk_vlan_classification_allowed_vlan_remove_trunk_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        trunk_vlan_classification = ET.SubElement(trunk, "trunk-vlan-classification")
        allowed = ET.SubElement(trunk_vlan_classification, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        remove = ET.SubElement(vlan, "remove")
        trunk_vlan_id = ET.SubElement(remove, "trunk-vlan-id")
        trunk_vlan_id.text = kwargs.pop('trunk_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_trunk_trunk_vlan_classification_allowed_vlan_remove_trunk_ctag_range(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        trunk_vlan_classification = ET.SubElement(trunk, "trunk-vlan-classification")
        allowed = ET.SubElement(trunk_vlan_classification, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        remove = ET.SubElement(vlan, "remove")
        trunk_vlan_id_key = ET.SubElement(remove, "trunk-vlan-id")
        trunk_vlan_id_key.text = kwargs.pop('trunk_vlan_id')
        trunk_ctag_range = ET.SubElement(remove, "trunk-ctag-range")
        trunk_ctag_range.text = kwargs.pop('trunk_ctag_range')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_trunk_default_vlan_config_default_transparent_vlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        default_vlan_config = ET.SubElement(trunk, "default-vlan-config")
        default_transparent_vlan = ET.SubElement(default_vlan_config, "default-transparent-vlan")
        default_transparent_vlan.text = kwargs.pop('default_transparent_vlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_trunk_tag_native_vlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        tag = ET.SubElement(trunk, "tag")
        native_vlan = ET.SubElement(tag, "native-vlan")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_trunk_native_vlan_classification_native_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        native_vlan_classification = ET.SubElement(trunk, "native-vlan-classification")
        native_vlan_id = ET.SubElement(native_vlan_classification, "native-vlan-id")
        native_vlan_id.text = kwargs.pop('native_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_trunk_native_vlan_classification_native_vlan_ctag_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        native_vlan_classification = ET.SubElement(trunk, "native-vlan-classification")
        native_vlan_ctag_id = ET.SubElement(native_vlan_classification, "native-vlan-ctag-id")
        native_vlan_ctag_id.text = kwargs.pop('native_vlan_ctag_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_trunk_native_vlan_xtagged_config_native_vlan_id_xtagged(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        native_vlan_xtagged_config = ET.SubElement(trunk, "native-vlan-xtagged-config")
        native_vlan_id_xtagged = ET.SubElement(native_vlan_xtagged_config, "native-vlan-id-xtagged")
        native_vlan_id_xtagged.text = kwargs.pop('native_vlan_id_xtagged')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_trunk_native_vlan_xtagged_config_native_vlan_ctag_id_xtagged(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        native_vlan_xtagged_config = ET.SubElement(trunk, "native-vlan-xtagged-config")
        native_vlan_ctag_id_xtagged = ET.SubElement(native_vlan_xtagged_config, "native-vlan-ctag-id-xtagged")
        native_vlan_ctag_id_xtagged.text = kwargs.pop('native_vlan_ctag_id_xtagged')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_trunk_native_vlan_xtagged_config_native_vlan_egress_type_xtagged(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        native_vlan_xtagged_config = ET.SubElement(trunk, "native-vlan-xtagged-config")
        native_vlan_egress_type_xtagged = ET.SubElement(native_vlan_xtagged_config, "native-vlan-egress-type-xtagged")
        native_vlan_egress_type_xtagged.text = kwargs.pop('native_vlan_egress_type_xtagged')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_trunk_native_vlan_untagged_config_native_vlan_id_untagged(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        native_vlan_untagged_config = ET.SubElement(trunk, "native-vlan-untagged-config")
        native_vlan_id_untagged = ET.SubElement(native_vlan_untagged_config, "native-vlan-id-untagged")
        native_vlan_id_untagged.text = kwargs.pop('native_vlan_id_untagged')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_private_vlan_trunk_pvlan_tag_pvlan_tag_native_vlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        pvlan_tag = ET.SubElement(trunk, "pvlan-tag")
        pvlan_tag_native_vlan = ET.SubElement(pvlan_tag, "pvlan-tag-native-vlan")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_private_vlan_trunk_native_pvlanNativevlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        native = ET.SubElement(trunk, "native")
        pvlanNativevlan = ET.SubElement(native, "pvlanNativevlan")
        pvlanNativevlan.text = kwargs.pop('pvlanNativevlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_private_vlan_trunk_native_pvlan_native_vlan_ctag_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        native = ET.SubElement(trunk, "native")
        pvlan_native_vlan_ctag_id = ET.SubElement(native, "pvlan-native-vlan-ctag-id")
        pvlan_native_vlan_ctag_id.text = kwargs.pop('pvlan_native_vlan_ctag_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_private_vlan_trunk_allowed_vlan_pvlan_all(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        pvlan_all = ET.SubElement(vlan, "pvlan_all")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_private_vlan_trunk_allowed_vlan_pvlan_none(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        pvlan_none = ET.SubElement(vlan, "pvlan_none")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_private_vlan_trunk_allowed_vlan_pvlan_add(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        pvlan_add = ET.SubElement(vlan, "pvlan_add")
        pvlan_add.text = kwargs.pop('pvlan_add')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_private_vlan_trunk_allowed_vlan_pvlan_except(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        pvlan_except = ET.SubElement(vlan, "pvlan_except")
        pvlan_except.text = kwargs.pop('pvlan_except')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_private_vlan_trunk_allowed_vlan_pvlan_remove(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        pvlan_remove = ET.SubElement(vlan, "pvlan_remove")
        pvlan_remove.text = kwargs.pop('pvlan_remove')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_private_vlan_host_association_host_pri_pvlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        host_association = ET.SubElement(private_vlan, "host-association")
        host_pri_pvlan = ET.SubElement(host_association, "host-pri-pvlan")
        host_pri_pvlan.text = kwargs.pop('host_pri_pvlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_private_vlan_host_association_host_sec_pvlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        host_association = ET.SubElement(private_vlan, "host-association")
        host_sec_pvlan = ET.SubElement(host_association, "host-sec-pvlan")
        host_sec_pvlan.text = kwargs.pop('host_sec_pvlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_private_vlan_association_trunk_trunk_pri_pvlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        association = ET.SubElement(private_vlan, "association")
        trunk = ET.SubElement(association, "trunk")
        trunk_sec_pvlan_key = ET.SubElement(trunk, "trunk-sec-pvlan")
        trunk_sec_pvlan_key.text = kwargs.pop('trunk_sec_pvlan')
        trunk_pri_pvlan = ET.SubElement(trunk, "trunk-pri-pvlan")
        trunk_pri_pvlan.text = kwargs.pop('trunk_pri_pvlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_private_vlan_association_trunk_trunk_sec_pvlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        association = ET.SubElement(private_vlan, "association")
        trunk = ET.SubElement(association, "trunk")
        trunk_pri_pvlan_key = ET.SubElement(trunk, "trunk-pri-pvlan")
        trunk_pri_pvlan_key.text = kwargs.pop('trunk_pri_pvlan')
        trunk_sec_pvlan = ET.SubElement(trunk, "trunk-sec-pvlan")
        trunk_sec_pvlan.text = kwargs.pop('trunk_sec_pvlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_private_vlan_mapping_promis_pri_pvlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        mapping = ET.SubElement(private_vlan, "mapping")
        promis_pri_pvlan = ET.SubElement(mapping, "promis-pri-pvlan")
        promis_pri_pvlan.text = kwargs.pop('promis_pri_pvlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_private_vlan_mapping_oper(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        mapping = ET.SubElement(private_vlan, "mapping")
        promis_pri_pvlan_key = ET.SubElement(mapping, "promis-pri-pvlan")
        promis_pri_pvlan_key.text = kwargs.pop('promis_pri_pvlan')
        oper = ET.SubElement(mapping, "oper")
        oper.text = kwargs.pop('oper')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_private_vlan_mapping_promis_sec_pvlan_range(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        mapping = ET.SubElement(private_vlan, "mapping")
        promis_pri_pvlan_key = ET.SubElement(mapping, "promis-pri-pvlan")
        promis_pri_pvlan_key.text = kwargs.pop('promis_pri_pvlan')
        promis_sec_pvlan_range = ET.SubElement(mapping, "promis-sec-pvlan-range")
        promis_sec_pvlan_range.text = kwargs.pop('promis_sec_pvlan_range')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_mac_learning_mac_learn_disable_vlan_mac_learning_vlan_add(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        mac_learning = ET.SubElement(port_channel, "mac-learning")
        mac_learn_disable = ET.SubElement(mac_learning, "mac-learn-disable")
        vlan = ET.SubElement(mac_learn_disable, "vlan")
        mac_learning_vlan_add = ET.SubElement(vlan, "mac-learning-vlan-add")
        mac_learning_vlan_add.text = kwargs.pop('mac_learning_vlan_add')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_mac_learning_mac_learn_disable_vlan_mac_learning_vlan_remove(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        mac_learning = ET.SubElement(port_channel, "mac-learning")
        mac_learn_disable = ET.SubElement(mac_learning, "mac-learn-disable")
        vlan = ET.SubElement(mac_learn_disable, "vlan")
        mac_learning_vlan_remove = ET.SubElement(vlan, "mac-learning-vlan-remove")
        mac_learning_vlan_remove.text = kwargs.pop('mac_learning_vlan_remove')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_ip_hide_ip_holder_ip_config_mtu(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(port_channel, "ip")
        hide_ip_holder = ET.SubElement(ip, "hide-ip-holder", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        ip_config = ET.SubElement(hide_ip_holder, "ip-config")
        mtu = ET.SubElement(ip_config, "mtu")
        mtu.text = kwargs.pop('mtu')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_ip_hide_ip_holder_ip_config_directed_broadcast(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(port_channel, "ip")
        hide_ip_holder = ET.SubElement(ip, "hide-ip-holder", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        ip_config = ET.SubElement(hide_ip_holder, "ip-config")
        directed_broadcast = ET.SubElement(ip_config, "directed-broadcast")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_ip_hide_ip_holder_ip_config_proxy_arp(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(port_channel, "ip")
        hide_ip_holder = ET.SubElement(ip, "hide-ip-holder", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        ip_config = ET.SubElement(hide_ip_holder, "ip-config")
        proxy_arp = ET.SubElement(ip_config, "proxy-arp")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_ip_hide_ip_holder_ip_config_arp_aging_timeout(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(port_channel, "ip")
        hide_ip_holder = ET.SubElement(ip, "hide-ip-holder", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        ip_config = ET.SubElement(hide_ip_holder, "ip-config")
        arp_aging_timeout = ET.SubElement(ip_config, "arp-aging-timeout")
        arp_aging_timeout.text = kwargs.pop('arp_aging_timeout')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_ip_hide_ip_holder_ip_config_address_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(port_channel, "ip")
        hide_ip_holder = ET.SubElement(ip, "hide-ip-holder", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        ip_config = ET.SubElement(hide_ip_holder, "ip-config")
        address = ET.SubElement(ip_config, "address")
        address = ET.SubElement(address, "address")
        address.text = kwargs.pop('address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_ip_hide_ip_holder_ip_config_address_secondary(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(port_channel, "ip")
        hide_ip_holder = ET.SubElement(ip, "hide-ip-holder", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        ip_config = ET.SubElement(hide_ip_holder, "ip-config")
        address = ET.SubElement(ip_config, "address")
        address_key = ET.SubElement(address, "address")
        address_key.text = kwargs.pop('address')
        secondary = ET.SubElement(address, "secondary")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_ip_arp_inspection_trust(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(port_channel, "ip")
        arp = ET.SubElement(ip, "arp", xmlns="urn:brocade.com:mgmt:brocade-dai")
        inspection = ET.SubElement(arp, "inspection")
        trust = ET.SubElement(inspection, "trust")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_ipv6_raguard(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(port_channel, "ipv6")
        raguard = ET.SubElement(ipv6, "raguard")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_ipv6_access_group_ipv6_access_list(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(port_channel, "ipv6")
        access_group = ET.SubElement(ipv6, "access-group", xmlns="urn:brocade.com:mgmt:brocade-ipv6-access-list")
        ip_direction_key = ET.SubElement(access_group, "ip-direction")
        ip_direction_key.text = kwargs.pop('ip_direction')
        ipv6_access_list = ET.SubElement(access_group, "ipv6-access-list")
        ipv6_access_list.text = kwargs.pop('ipv6_access_list')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_ipv6_access_group_ip_direction(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(port_channel, "ipv6")
        access_group = ET.SubElement(ipv6, "access-group", xmlns="urn:brocade.com:mgmt:brocade-ipv6-access-list")
        ipv6_access_list_key = ET.SubElement(access_group, "ipv6-access-list")
        ipv6_access_list_key.text = kwargs.pop('ipv6_access_list')
        ip_direction = ET.SubElement(access_group, "ip-direction")
        ip_direction.text = kwargs.pop('ip_direction')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_ipv6_access_group_traffic_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(port_channel, "ipv6")
        access_group = ET.SubElement(ipv6, "access-group", xmlns="urn:brocade.com:mgmt:brocade-ipv6-access-list")
        ipv6_access_list_key = ET.SubElement(access_group, "ipv6-access-list")
        ipv6_access_list_key.text = kwargs.pop('ipv6_access_list')
        ip_direction_key = ET.SubElement(access_group, "ip-direction")
        ip_direction_key.text = kwargs.pop('ip_direction')
        traffic_type = ET.SubElement(access_group, "traffic-type")
        traffic_type.text = kwargs.pop('traffic_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_ipv6_hide_vrrpv3_holder_vrrpv3_vrid(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(port_channel, "ipv6")
        hide_vrrpv3_holder = ET.SubElement(ipv6, "hide-vrrpv3-holder", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrrpv3 = ET.SubElement(hide_vrrpv3_holder, "vrrpv3")
        vrid = ET.SubElement(vrrpv3, "vrid")
        vrid.text = kwargs.pop('vrid')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_ipv6_hide_vrrpv3_holder_vrrpv3_virtual_ip_virtual_ipaddr(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(port_channel, "ipv6")
        hide_vrrpv3_holder = ET.SubElement(ipv6, "hide-vrrpv3-holder", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrrpv3 = ET.SubElement(hide_vrrpv3_holder, "vrrpv3")
        vrid_key = ET.SubElement(vrrpv3, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        virtual_ip = ET.SubElement(vrrpv3, "virtual-ip")
        virtual_ipaddr = ET.SubElement(virtual_ip, "virtual-ipaddr")
        virtual_ipaddr.text = kwargs.pop('virtual_ipaddr')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_ipv6_hide_vrrpv3_holder_vrrpv3_track_interface_interface_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(port_channel, "ipv6")
        hide_vrrpv3_holder = ET.SubElement(ipv6, "hide-vrrpv3-holder", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrrpv3 = ET.SubElement(hide_vrrpv3_holder, "vrrpv3")
        vrid_key = ET.SubElement(vrrpv3, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        track = ET.SubElement(vrrpv3, "track")
        interface = ET.SubElement(track, "interface")
        interface_name_key = ET.SubElement(interface, "interface-name")
        interface_name_key.text = kwargs.pop('interface_name')
        interface_type = ET.SubElement(interface, "interface-type")
        interface_type.text = kwargs.pop('interface_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_ipv6_hide_vrrpv3_holder_vrrpv3_track_interface_interface_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(port_channel, "ipv6")
        hide_vrrpv3_holder = ET.SubElement(ipv6, "hide-vrrpv3-holder", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrrpv3 = ET.SubElement(hide_vrrpv3_holder, "vrrpv3")
        vrid_key = ET.SubElement(vrrpv3, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        track = ET.SubElement(vrrpv3, "track")
        interface = ET.SubElement(track, "interface")
        interface_type_key = ET.SubElement(interface, "interface-type")
        interface_type_key.text = kwargs.pop('interface_type')
        interface_name = ET.SubElement(interface, "interface-name")
        interface_name.text = kwargs.pop('interface_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_ipv6_hide_vrrpv3_holder_vrrpv3_track_interface_track_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(port_channel, "ipv6")
        hide_vrrpv3_holder = ET.SubElement(ipv6, "hide-vrrpv3-holder", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrrpv3 = ET.SubElement(hide_vrrpv3_holder, "vrrpv3")
        vrid_key = ET.SubElement(vrrpv3, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        track = ET.SubElement(vrrpv3, "track")
        interface = ET.SubElement(track, "interface")
        interface_type_key = ET.SubElement(interface, "interface-type")
        interface_type_key.text = kwargs.pop('interface_type')
        interface_name_key = ET.SubElement(interface, "interface-name")
        interface_name_key.text = kwargs.pop('interface_name')
        track_priority = ET.SubElement(interface, "track-priority")
        track_priority.text = kwargs.pop('track_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_ipv6_hide_vrrpv3_holder_vrrpv3_advertisement_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(port_channel, "ipv6")
        hide_vrrpv3_holder = ET.SubElement(ipv6, "hide-vrrpv3-holder", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrrpv3 = ET.SubElement(hide_vrrpv3_holder, "vrrpv3")
        vrid_key = ET.SubElement(vrrpv3, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        advertisement_interval = ET.SubElement(vrrpv3, "advertisement-interval")
        advertisement_interval.text = kwargs.pop('advertisement_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_ipv6_hide_vrrpv3_holder_vrrpv3_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(port_channel, "ipv6")
        hide_vrrpv3_holder = ET.SubElement(ipv6, "hide-vrrpv3-holder", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrrpv3 = ET.SubElement(hide_vrrpv3_holder, "vrrpv3")
        vrid_key = ET.SubElement(vrrpv3, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        enable = ET.SubElement(vrrpv3, "enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_ipv6_hide_vrrpv3_holder_vrrpv3_hold_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(port_channel, "ipv6")
        hide_vrrpv3_holder = ET.SubElement(ipv6, "hide-vrrpv3-holder", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrrpv3 = ET.SubElement(hide_vrrpv3_holder, "vrrpv3")
        vrid_key = ET.SubElement(vrrpv3, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        hold_time = ET.SubElement(vrrpv3, "hold-time")
        hold_time.text = kwargs.pop('hold_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_ipv6_hide_vrrpv3_holder_vrrpv3_preempt_mode(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(port_channel, "ipv6")
        hide_vrrpv3_holder = ET.SubElement(ipv6, "hide-vrrpv3-holder", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrrpv3 = ET.SubElement(hide_vrrpv3_holder, "vrrpv3")
        vrid_key = ET.SubElement(vrrpv3, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        preempt_mode = ET.SubElement(vrrpv3, "preempt-mode")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_ipv6_hide_vrrpv3_holder_vrrpv3_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(port_channel, "ipv6")
        hide_vrrpv3_holder = ET.SubElement(ipv6, "hide-vrrpv3-holder", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrrpv3 = ET.SubElement(hide_vrrpv3_holder, "vrrpv3")
        vrid_key = ET.SubElement(vrrpv3, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        priority = ET.SubElement(vrrpv3, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_ipv6_hide_vrrpv3_holder_vrrpv3_description(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(port_channel, "ipv6")
        hide_vrrpv3_holder = ET.SubElement(ipv6, "hide-vrrpv3-holder", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrrpv3 = ET.SubElement(hide_vrrpv3_holder, "vrrpv3")
        vrid_key = ET.SubElement(vrrpv3, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        description = ET.SubElement(vrrpv3, "description")
        description.text = kwargs.pop('description')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_ipv6_hide_vrrpv3_holder_vrrpv3e_vrid(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(port_channel, "ipv6")
        hide_vrrpv3_holder = ET.SubElement(ipv6, "hide-vrrpv3-holder", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrrpv3e = ET.SubElement(hide_vrrpv3_holder, "vrrpv3e")
        vrid = ET.SubElement(vrrpv3e, "vrid")
        vrid.text = kwargs.pop('vrid')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_ipv6_hide_vrrpv3_holder_vrrpv3e_virtual_ip_virtual_ipaddr(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(port_channel, "ipv6")
        hide_vrrpv3_holder = ET.SubElement(ipv6, "hide-vrrpv3-holder", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrrpv3e = ET.SubElement(hide_vrrpv3_holder, "vrrpv3e")
        vrid_key = ET.SubElement(vrrpv3e, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        virtual_ip = ET.SubElement(vrrpv3e, "virtual-ip")
        virtual_ipaddr = ET.SubElement(virtual_ip, "virtual-ipaddr")
        virtual_ipaddr.text = kwargs.pop('virtual_ipaddr')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_ipv6_hide_vrrpv3_holder_vrrpv3e_track_interface_interface_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(port_channel, "ipv6")
        hide_vrrpv3_holder = ET.SubElement(ipv6, "hide-vrrpv3-holder", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrrpv3e = ET.SubElement(hide_vrrpv3_holder, "vrrpv3e")
        vrid_key = ET.SubElement(vrrpv3e, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        track = ET.SubElement(vrrpv3e, "track")
        interface = ET.SubElement(track, "interface")
        interface_name_key = ET.SubElement(interface, "interface-name")
        interface_name_key.text = kwargs.pop('interface_name')
        interface_type = ET.SubElement(interface, "interface-type")
        interface_type.text = kwargs.pop('interface_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_ipv6_hide_vrrpv3_holder_vrrpv3e_track_interface_interface_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(port_channel, "ipv6")
        hide_vrrpv3_holder = ET.SubElement(ipv6, "hide-vrrpv3-holder", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrrpv3e = ET.SubElement(hide_vrrpv3_holder, "vrrpv3e")
        vrid_key = ET.SubElement(vrrpv3e, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        track = ET.SubElement(vrrpv3e, "track")
        interface = ET.SubElement(track, "interface")
        interface_type_key = ET.SubElement(interface, "interface-type")
        interface_type_key.text = kwargs.pop('interface_type')
        interface_name = ET.SubElement(interface, "interface-name")
        interface_name.text = kwargs.pop('interface_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_ipv6_hide_vrrpv3_holder_vrrpv3e_track_interface_track_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(port_channel, "ipv6")
        hide_vrrpv3_holder = ET.SubElement(ipv6, "hide-vrrpv3-holder", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrrpv3e = ET.SubElement(hide_vrrpv3_holder, "vrrpv3e")
        vrid_key = ET.SubElement(vrrpv3e, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        track = ET.SubElement(vrrpv3e, "track")
        interface = ET.SubElement(track, "interface")
        interface_type_key = ET.SubElement(interface, "interface-type")
        interface_type_key.text = kwargs.pop('interface_type')
        interface_name_key = ET.SubElement(interface, "interface-name")
        interface_name_key.text = kwargs.pop('interface_name')
        track_priority = ET.SubElement(interface, "track-priority")
        track_priority.text = kwargs.pop('track_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_ipv6_hide_vrrpv3_holder_vrrpv3e_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(port_channel, "ipv6")
        hide_vrrpv3_holder = ET.SubElement(ipv6, "hide-vrrpv3-holder", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrrpv3e = ET.SubElement(hide_vrrpv3_holder, "vrrpv3e")
        vrid_key = ET.SubElement(vrrpv3e, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        enable = ET.SubElement(vrrpv3e, "enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_ipv6_hide_vrrpv3_holder_vrrpv3e_hold_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(port_channel, "ipv6")
        hide_vrrpv3_holder = ET.SubElement(ipv6, "hide-vrrpv3-holder", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrrpv3e = ET.SubElement(hide_vrrpv3_holder, "vrrpv3e")
        vrid_key = ET.SubElement(vrrpv3e, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        hold_time = ET.SubElement(vrrpv3e, "hold-time")
        hold_time.text = kwargs.pop('hold_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_ipv6_hide_vrrpv3_holder_vrrpv3e_preempt_mode(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(port_channel, "ipv6")
        hide_vrrpv3_holder = ET.SubElement(ipv6, "hide-vrrpv3-holder", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrrpv3e = ET.SubElement(hide_vrrpv3_holder, "vrrpv3e")
        vrid_key = ET.SubElement(vrrpv3e, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        preempt_mode = ET.SubElement(vrrpv3e, "preempt-mode")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_ipv6_hide_vrrpv3_holder_vrrpv3e_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(port_channel, "ipv6")
        hide_vrrpv3_holder = ET.SubElement(ipv6, "hide-vrrpv3-holder", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrrpv3e = ET.SubElement(hide_vrrpv3_holder, "vrrpv3e")
        vrid_key = ET.SubElement(vrrpv3e, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        priority = ET.SubElement(vrrpv3e, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_ipv6_hide_vrrpv3_holder_vrrpv3e_description(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(port_channel, "ipv6")
        hide_vrrpv3_holder = ET.SubElement(ipv6, "hide-vrrpv3-holder", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrrpv3e = ET.SubElement(hide_vrrpv3_holder, "vrrpv3e")
        vrid_key = ET.SubElement(vrrpv3e, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        description = ET.SubElement(vrrpv3e, "description")
        description.text = kwargs.pop('description')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_ipv6_hide_vrrpv3_holder_vrrpv3e_advertise_backup(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(port_channel, "ipv6")
        hide_vrrpv3_holder = ET.SubElement(ipv6, "hide-vrrpv3-holder", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrrpv3e = ET.SubElement(hide_vrrpv3_holder, "vrrpv3e")
        vrid_key = ET.SubElement(vrrpv3e, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        advertise_backup = ET.SubElement(vrrpv3e, "advertise-backup")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_ipv6_hide_vrrpv3_holder_vrrpv3e_nd_advertisement_timer(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(port_channel, "ipv6")
        hide_vrrpv3_holder = ET.SubElement(ipv6, "hide-vrrpv3-holder", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrrpv3e = ET.SubElement(hide_vrrpv3_holder, "vrrpv3e")
        vrid_key = ET.SubElement(vrrpv3e, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        nd_advertisement_timer = ET.SubElement(vrrpv3e, "nd-advertisement-timer")
        nd_advertisement_timer.text = kwargs.pop('nd_advertisement_timer')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_ipv6_hide_vrrpv3_holder_vrrpv3e_advertisement_interval_scale(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(port_channel, "ipv6")
        hide_vrrpv3_holder = ET.SubElement(ipv6, "hide-vrrpv3-holder", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrrpv3e = ET.SubElement(hide_vrrpv3_holder, "vrrpv3e")
        vrid_key = ET.SubElement(vrrpv3e, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        advertisement_interval_scale = ET.SubElement(vrrpv3e, "advertisement-interval-scale")
        advertisement_interval_scale.text = kwargs.pop('advertisement_interval_scale')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_ipv6_hide_vrrpv3_holder_vrrpv3e_backup_advertisement_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(port_channel, "ipv6")
        hide_vrrpv3_holder = ET.SubElement(ipv6, "hide-vrrpv3-holder", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrrpv3e = ET.SubElement(hide_vrrpv3_holder, "vrrpv3e")
        vrid_key = ET.SubElement(vrrpv3e, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        backup_advertisement_interval = ET.SubElement(vrrpv3e, "backup-advertisement-interval")
        backup_advertisement_interval.text = kwargs.pop('backup_advertisement_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_ipv6_hide_vrrpv3_holder_vrrpv3e_vrrpe_advertisement_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(port_channel, "ipv6")
        hide_vrrpv3_holder = ET.SubElement(ipv6, "hide-vrrpv3-holder", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrrpv3e = ET.SubElement(hide_vrrpv3_holder, "vrrpv3e")
        vrid_key = ET.SubElement(vrrpv3e, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        vrrpe_advertisement_interval = ET.SubElement(vrrpv3e, "vrrpe-advertisement-interval")
        vrrpe_advertisement_interval.text = kwargs.pop('vrrpe_advertisement_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_ipv6_hide_vrrpv3_holder_vrrpv3e_short_path_forwarding_basic(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(port_channel, "ipv6")
        hide_vrrpv3_holder = ET.SubElement(ipv6, "hide-vrrpv3-holder", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrrpv3e = ET.SubElement(hide_vrrpv3_holder, "vrrpv3e")
        vrid_key = ET.SubElement(vrrpv3e, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        short_path_forwarding = ET.SubElement(vrrpv3e, "short-path-forwarding")
        basic = ET.SubElement(short_path_forwarding, "basic")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_ipv6_hide_vrrpv3_holder_vrrpv3e_short_path_forwarding_revert_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(port_channel, "ipv6")
        hide_vrrpv3_holder = ET.SubElement(ipv6, "hide-vrrpv3-holder", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrrpv3e = ET.SubElement(hide_vrrpv3_holder, "vrrpv3e")
        vrid_key = ET.SubElement(vrrpv3e, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        short_path_forwarding = ET.SubElement(vrrpv3e, "short-path-forwarding")
        revert_priority = ET.SubElement(short_path_forwarding, "revert-priority")
        revert_priority.text = kwargs.pop('revert_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_track_track_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        track = ET.SubElement(port_channel, "track")
        track_enable = ET.SubElement(track, "track_enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_track_min_link(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        track = ET.SubElement(port_channel, "track")
        min_link = ET.SubElement(track, "min-link")
        min_link.text = kwargs.pop('min_link')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_track_interface_track_interface_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        track = ET.SubElement(port_channel, "track")
        interface = ET.SubElement(track, "interface")
        track_interface_name_key = ET.SubElement(interface, "track-interface-name")
        track_interface_name_key.text = kwargs.pop('track_interface_name')
        track_interface_type = ET.SubElement(interface, "track-interface-type")
        track_interface_type.text = kwargs.pop('track_interface_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_track_interface_track_interface_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        track = ET.SubElement(port_channel, "track")
        interface = ET.SubElement(track, "interface")
        track_interface_type_key = ET.SubElement(interface, "track-interface-type")
        track_interface_type_key.text = kwargs.pop('track_interface_type')
        track_interface_name = ET.SubElement(interface, "track-interface-name")
        track_interface_name.text = kwargs.pop('track_interface_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_track_remove_remove_all_track_interfaces(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        track = ET.SubElement(port_channel, "track")
        remove = ET.SubElement(track, "remove")
        remove_all_track_interfaces = ET.SubElement(remove, "remove-all-track-interfaces")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_edge_loop_detection_eldprio(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        edge_loop_detection = ET.SubElement(port_channel, "edge-loop-detection")
        eldprio = ET.SubElement(edge_loop_detection, "eldprio")
        eldprio.text = kwargs.pop('eldprio')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_edge_loop_detection_eldvlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        edge_loop_detection = ET.SubElement(port_channel, "edge-loop-detection")
        eldvlan = ET.SubElement(edge_loop_detection, "eldvlan")
        eldvlan.text = kwargs.pop('eldvlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_load_balance(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        load_balance = ET.SubElement(port_channel, "load-balance")
        load_balance.text = kwargs.pop('load_balance')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_mac_access_group_mac_access_list(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        mac = ET.SubElement(port_channel, "mac", xmlns="urn:brocade.com:mgmt:brocade-mac-access-list")
        access_group = ET.SubElement(mac, "access-group")
        mac_direction_key = ET.SubElement(access_group, "mac-direction")
        mac_direction_key.text = kwargs.pop('mac_direction')
        mac_access_list = ET.SubElement(access_group, "mac-access-list")
        mac_access_list.text = kwargs.pop('mac_access_list')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_mac_access_group_mac_direction(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        mac = ET.SubElement(port_channel, "mac", xmlns="urn:brocade.com:mgmt:brocade-mac-access-list")
        access_group = ET.SubElement(mac, "access-group")
        mac_access_list_key = ET.SubElement(access_group, "mac-access-list")
        mac_access_list_key.text = kwargs.pop('mac_access_list')
        mac_direction = ET.SubElement(access_group, "mac-direction")
        mac_direction.text = kwargs.pop('mac_direction')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_mac_access_group_traffic_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        mac = ET.SubElement(port_channel, "mac", xmlns="urn:brocade.com:mgmt:brocade-mac-access-list")
        access_group = ET.SubElement(mac, "access-group")
        mac_access_list_key = ET.SubElement(access_group, "mac-access-list")
        mac_access_list_key.text = kwargs.pop('mac_access_list')
        mac_direction_key = ET.SubElement(access_group, "mac-direction")
        mac_direction_key.text = kwargs.pop('mac_direction')
        traffic_type = ET.SubElement(access_group, "traffic-type")
        traffic_type.text = kwargs.pop('traffic_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_hide_vrrp_holer_vrrp_vrid(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        hide_vrrp_holer = ET.SubElement(port_channel, "hide-vrrp-holer", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrrp = ET.SubElement(hide_vrrp_holer, "vrrp")
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        vrid = ET.SubElement(vrrp, "vrid")
        vrid.text = kwargs.pop('vrid')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_hide_vrrp_holer_vrrp_version(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        hide_vrrp_holer = ET.SubElement(port_channel, "hide-vrrp-holer", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrrp = ET.SubElement(hide_vrrp_holer, "vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version = ET.SubElement(vrrp, "version")
        version.text = kwargs.pop('version')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_hide_vrrp_holer_vrrp_virtual_ip_virtual_ipaddr(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        hide_vrrp_holer = ET.SubElement(port_channel, "hide-vrrp-holer", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrrp = ET.SubElement(hide_vrrp_holer, "vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        virtual_ip = ET.SubElement(vrrp, "virtual-ip")
        virtual_ipaddr = ET.SubElement(virtual_ip, "virtual-ipaddr")
        virtual_ipaddr.text = kwargs.pop('virtual_ipaddr')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_hide_vrrp_holer_vrrp_track_interface_interface_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        hide_vrrp_holer = ET.SubElement(port_channel, "hide-vrrp-holer", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrrp = ET.SubElement(hide_vrrp_holer, "vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        track = ET.SubElement(vrrp, "track")
        interface = ET.SubElement(track, "interface")
        interface_name_key = ET.SubElement(interface, "interface-name")
        interface_name_key.text = kwargs.pop('interface_name')
        interface_type = ET.SubElement(interface, "interface-type")
        interface_type.text = kwargs.pop('interface_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_hide_vrrp_holer_vrrp_track_interface_interface_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        hide_vrrp_holer = ET.SubElement(port_channel, "hide-vrrp-holer", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrrp = ET.SubElement(hide_vrrp_holer, "vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        track = ET.SubElement(vrrp, "track")
        interface = ET.SubElement(track, "interface")
        interface_type_key = ET.SubElement(interface, "interface-type")
        interface_type_key.text = kwargs.pop('interface_type')
        interface_name = ET.SubElement(interface, "interface-name")
        interface_name.text = kwargs.pop('interface_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_hide_vrrp_holer_vrrp_track_interface_track_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        hide_vrrp_holer = ET.SubElement(port_channel, "hide-vrrp-holer", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrrp = ET.SubElement(hide_vrrp_holer, "vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        track = ET.SubElement(vrrp, "track")
        interface = ET.SubElement(track, "interface")
        interface_type_key = ET.SubElement(interface, "interface-type")
        interface_type_key.text = kwargs.pop('interface_type')
        interface_name_key = ET.SubElement(interface, "interface-name")
        interface_name_key.text = kwargs.pop('interface_name')
        track_priority = ET.SubElement(interface, "track-priority")
        track_priority.text = kwargs.pop('track_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_hide_vrrp_holer_vrrp_advertisement_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        hide_vrrp_holer = ET.SubElement(port_channel, "hide-vrrp-holer", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrrp = ET.SubElement(hide_vrrp_holer, "vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        advertisement_interval = ET.SubElement(vrrp, "advertisement-interval")
        advertisement_interval.text = kwargs.pop('advertisement_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_hide_vrrp_holer_vrrp_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        hide_vrrp_holer = ET.SubElement(port_channel, "hide-vrrp-holer", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrrp = ET.SubElement(hide_vrrp_holer, "vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        enable = ET.SubElement(vrrp, "enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_hide_vrrp_holer_vrrp_hold_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        hide_vrrp_holer = ET.SubElement(port_channel, "hide-vrrp-holer", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrrp = ET.SubElement(hide_vrrp_holer, "vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        hold_time = ET.SubElement(vrrp, "hold-time")
        hold_time.text = kwargs.pop('hold_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_hide_vrrp_holer_vrrp_preempt_mode(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        hide_vrrp_holer = ET.SubElement(port_channel, "hide-vrrp-holer", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrrp = ET.SubElement(hide_vrrp_holer, "vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        preempt_mode = ET.SubElement(vrrp, "preempt-mode")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_hide_vrrp_holer_vrrp_arp_unicast_request_receive(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        hide_vrrp_holer = ET.SubElement(port_channel, "hide-vrrp-holer", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrrp = ET.SubElement(hide_vrrp_holer, "vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        arp = ET.SubElement(vrrp, "arp")
        unicast_request = ET.SubElement(arp, "unicast-request")
        receive = ET.SubElement(unicast_request, "receive")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_hide_vrrp_holer_vrrp_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        hide_vrrp_holer = ET.SubElement(port_channel, "hide-vrrp-holer", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrrp = ET.SubElement(hide_vrrp_holer, "vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        priority = ET.SubElement(vrrp, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_hide_vrrp_holer_vrrp_description(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        hide_vrrp_holer = ET.SubElement(port_channel, "hide-vrrp-holer", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrrp = ET.SubElement(hide_vrrp_holer, "vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        description = ET.SubElement(vrrp, "description")
        description.text = kwargs.pop('description')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_fcoeport_fcoeport_map(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        fcoeport = ET.SubElement(port_channel, "fcoeport", xmlns="urn:brocade.com:mgmt:brocade-fcoe")
        fcoeport_map = ET.SubElement(fcoeport, "fcoeport-map")
        fcoeport_map.text = kwargs.pop('fcoeport_map')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_ip_acl_interface_ip_access_group_ip_access_list(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        ip_acl_interface = ET.SubElement(port_channel, "ip-acl-interface", xmlns="urn:brocade.com:mgmt:brocade-ip-access-list")
        ip = ET.SubElement(ip_acl_interface, "ip")
        access_group = ET.SubElement(ip, "access-group")
        ip_direction_key = ET.SubElement(access_group, "ip-direction")
        ip_direction_key.text = kwargs.pop('ip_direction')
        ip_access_list = ET.SubElement(access_group, "ip-access-list")
        ip_access_list.text = kwargs.pop('ip_access_list')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_ip_acl_interface_ip_access_group_ip_direction(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        ip_acl_interface = ET.SubElement(port_channel, "ip-acl-interface", xmlns="urn:brocade.com:mgmt:brocade-ip-access-list")
        ip = ET.SubElement(ip_acl_interface, "ip")
        access_group = ET.SubElement(ip, "access-group")
        ip_access_list_key = ET.SubElement(access_group, "ip-access-list")
        ip_access_list_key.text = kwargs.pop('ip_access_list')
        ip_direction = ET.SubElement(access_group, "ip-direction")
        ip_direction.text = kwargs.pop('ip_direction')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_ip_acl_interface_ip_access_group_traffic_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        ip_acl_interface = ET.SubElement(port_channel, "ip-acl-interface", xmlns="urn:brocade.com:mgmt:brocade-ip-access-list")
        ip = ET.SubElement(ip_acl_interface, "ip")
        access_group = ET.SubElement(ip, "access-group")
        ip_access_list_key = ET.SubElement(access_group, "ip-access-list")
        ip_access_list_key.text = kwargs.pop('ip_access_list')
        ip_direction_key = ET.SubElement(access_group, "ip-direction")
        ip_direction_key.text = kwargs.pop('ip_direction')
        traffic_type = ET.SubElement(access_group, "traffic-type")
        traffic_type.text = kwargs.pop('traffic_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_service_policy_in_cg(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        service_policy = ET.SubElement(port_channel, "service-policy", xmlns="urn:brocade.com:mgmt:brocade-policer")
        in_cg = ET.SubElement(service_policy, "in")
        in_cg.text = kwargs.pop('in_cg')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_service_policy_out(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        service_policy = ET.SubElement(port_channel, "service-policy", xmlns="urn:brocade.com:mgmt:brocade-policer")
        out = ET.SubElement(service_policy, "out")
        out.text = kwargs.pop('out')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_port_profile_port(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        port_profile_port = ET.SubElement(port_channel, "port-profile-port", xmlns="urn:brocade.com:mgmt:brocade-port-profile")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_port_profile_to_interface_associations_port_profile_port_port_to_port_profile_domain_association_profile_domain_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        port_profile_to_interface_associations = ET.SubElement(port_channel, "port-profile-to-interface-associations", xmlns="urn:brocade.com:mgmt:brocade-port-profile")
        port_profile_port = ET.SubElement(port_profile_to_interface_associations, "port-profile-port")
        port_to_port_profile_domain_association = ET.SubElement(port_profile_port, "port-to-port-profile-domain-association")
        profile_domain_name = ET.SubElement(port_to_port_profile_domain_association, "profile-domain-name")
        profile_domain_name.text = kwargs.pop('profile_domain_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_port_profile_to_interface_associations_port_profile_port_port_to_port_profile_associations_port_to_port_profile_association(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        port_profile_to_interface_associations = ET.SubElement(port_channel, "port-profile-to-interface-associations", xmlns="urn:brocade.com:mgmt:brocade-port-profile")
        port_profile_port = ET.SubElement(port_profile_to_interface_associations, "port-profile-port")
        port_to_port_profile_associations = ET.SubElement(port_profile_port, "port-to-port-profile-associations")
        port_to_port_profile_association = ET.SubElement(port_to_port_profile_associations, "port-to-port-profile-association")
        port_to_port_profile_association.text = kwargs.pop('port_to_port_profile_association')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_priority_tag_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        priority_tag_enable = ET.SubElement(port_channel, "priority-tag-enable", xmlns="urn:brocade.com:mgmt:brocade-qos")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_qos_default_cos(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(port_channel, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        default_cos = ET.SubElement(qos, "default-cos")
        default_cos.text = kwargs.pop('default_cos')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_qos_trust_trust_cos(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(port_channel, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        trust = ET.SubElement(qos, "trust")
        trust_cos = ET.SubElement(trust, "trust-cos")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_qos_trust_trust_dscp(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(port_channel, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        trust = ET.SubElement(qos, "trust")
        trust_dscp = ET.SubElement(trust, "trust-dscp")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_qos_cos_mutation(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(port_channel, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        cos_mutation = ET.SubElement(qos, "cos-mutation")
        cos_mutation.text = kwargs.pop('cos_mutation')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_qos_cos_traffic_class(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(port_channel, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        cos_traffic_class = ET.SubElement(qos, "cos-traffic-class")
        cos_traffic_class.text = kwargs.pop('cos_traffic_class')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_qos_dscp_mutation(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(port_channel, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        dscp_mutation = ET.SubElement(qos, "dscp-mutation")
        dscp_mutation.text = kwargs.pop('dscp_mutation')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_qos_dscp_traffic_class(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(port_channel, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        dscp_traffic_class = ET.SubElement(qos, "dscp-traffic-class")
        dscp_traffic_class.text = kwargs.pop('dscp_traffic_class')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_qos_dscp_cos(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(port_channel, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        dscp_cos = ET.SubElement(qos, "dscp-cos")
        dscp_cos.text = kwargs.pop('dscp_cos')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_qos_random_detect_traffic_class_red_tc_value(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(port_channel, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        random_detect = ET.SubElement(qos, "random-detect")
        traffic_class = ET.SubElement(random_detect, "traffic-class")
        red_tc_value = ET.SubElement(traffic_class, "red-tc-value")
        red_tc_value.text = kwargs.pop('red_tc_value')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_qos_random_detect_traffic_class_red_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(port_channel, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        random_detect = ET.SubElement(qos, "random-detect")
        traffic_class = ET.SubElement(random_detect, "traffic-class")
        red_tc_value_key = ET.SubElement(traffic_class, "red-tc-value")
        red_tc_value_key.text = kwargs.pop('red_tc_value')
        red_enable = ET.SubElement(traffic_class, "red-enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_qos_random_detect_traffic_class_red_profile_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(port_channel, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        random_detect = ET.SubElement(qos, "random-detect")
        traffic_class = ET.SubElement(random_detect, "traffic-class")
        red_tc_value_key = ET.SubElement(traffic_class, "red-tc-value")
        red_tc_value_key.text = kwargs.pop('red_tc_value')
        red_profile_id = ET.SubElement(traffic_class, "red-profile-id")
        red_profile_id.text = kwargs.pop('red_profile_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_qos_drop_monitor_drop_monitor_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(port_channel, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        drop_monitor = ET.SubElement(qos, "drop-monitor")
        drop_monitor_enable = ET.SubElement(drop_monitor, "drop-monitor-enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_qos_flowcontrol_link_level_flowcontrol_flowcontrol_tx(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(port_channel, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        flowcontrol = ET.SubElement(qos, "flowcontrol")
        link_level_flowcontrol = ET.SubElement(flowcontrol, "link-level-flowcontrol")
        flowcontrol_tx = ET.SubElement(link_level_flowcontrol, "flowcontrol-tx")
        flowcontrol_tx.text = kwargs.pop('flowcontrol_tx')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_qos_flowcontrol_link_level_flowcontrol_flowcontrol_rx(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(port_channel, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        flowcontrol = ET.SubElement(qos, "flowcontrol")
        link_level_flowcontrol = ET.SubElement(flowcontrol, "link-level-flowcontrol")
        flowcontrol_rx = ET.SubElement(link_level_flowcontrol, "flowcontrol-rx")
        flowcontrol_rx.text = kwargs.pop('flowcontrol_rx')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_qos_flowcontrol_pfc_pfc_cos(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(port_channel, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        flowcontrol = ET.SubElement(qos, "flowcontrol")
        pfc = ET.SubElement(flowcontrol, "pfc")
        pfc_cos = ET.SubElement(pfc, "pfc-cos")
        pfc_cos.text = kwargs.pop('pfc_cos')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_qos_flowcontrol_pfc_pfc_flowcontrol_tx(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(port_channel, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        flowcontrol = ET.SubElement(qos, "flowcontrol")
        pfc = ET.SubElement(flowcontrol, "pfc")
        pfc_cos_key = ET.SubElement(pfc, "pfc-cos")
        pfc_cos_key.text = kwargs.pop('pfc_cos')
        pfc_flowcontrol_tx = ET.SubElement(pfc, "pfc-flowcontrol-tx")
        pfc_flowcontrol_tx.text = kwargs.pop('pfc_flowcontrol_tx')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_qos_flowcontrol_pfc_pfc_flowcontrol_rx(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(port_channel, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        flowcontrol = ET.SubElement(qos, "flowcontrol")
        pfc = ET.SubElement(flowcontrol, "pfc")
        pfc_cos_key = ET.SubElement(pfc, "pfc-cos")
        pfc_cos_key.text = kwargs.pop('pfc_cos')
        pfc_flowcontrol_rx = ET.SubElement(pfc, "pfc-flowcontrol-rx")
        pfc_flowcontrol_rx.text = kwargs.pop('pfc_flowcontrol_rx')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_vlan_classifier_activate_group_groupid(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        vlan = ET.SubElement(port_channel, "vlan", xmlns="urn:brocade.com:mgmt:brocade-vlan")
        classifier = ET.SubElement(vlan, "classifier")
        activate = ET.SubElement(classifier, "activate")
        group = ET.SubElement(activate, "group")
        groupid = ET.SubElement(group, "groupid")
        groupid.text = kwargs.pop('groupid')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_vlan_classifier_activate_group_vlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        vlan = ET.SubElement(port_channel, "vlan", xmlns="urn:brocade.com:mgmt:brocade-vlan")
        classifier = ET.SubElement(vlan, "classifier")
        activate = ET.SubElement(classifier, "activate")
        group = ET.SubElement(activate, "group")
        groupid_key = ET.SubElement(group, "groupid")
        groupid_key.text = kwargs.pop('groupid')
        vlan = ET.SubElement(group, "vlan")
        vlan.text = kwargs.pop('vlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_bpdu_drop_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        bpdu_drop = ET.SubElement(port_channel, "bpdu-drop", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        enable = ET.SubElement(bpdu_drop, "enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_bpdu_drop_direction(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        bpdu_drop = ET.SubElement(port_channel, "bpdu-drop", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        direction = ET.SubElement(bpdu_drop, "direction")
        direction.text = kwargs.pop('direction')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_tunnel_tagged_ieee_bpdu(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        tunnel = ET.SubElement(port_channel, "tunnel", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        tagged_ieee_bpdu = ET.SubElement(tunnel, "tagged-ieee-bpdu")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_spanning_tree_autoedge(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(port_channel, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        autoedge = ET.SubElement(spanning_tree, "autoedge")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_spanning_tree_cost(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(port_channel, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        cost = ET.SubElement(spanning_tree, "cost")
        cost.text = kwargs.pop('cost')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_spanning_tree_portfast_portfastbasic(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(port_channel, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        portfast = ET.SubElement(spanning_tree, "portfast")
        portfastbasic = ET.SubElement(portfast, "portfastbasic")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_spanning_tree_portfast_bpdu_guard(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(port_channel, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        portfast = ET.SubElement(spanning_tree, "portfast")
        bpdu_guard = ET.SubElement(portfast, "bpdu-guard")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_spanning_tree_portfast_bpdu_filter(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(port_channel, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        portfast = ET.SubElement(spanning_tree, "portfast")
        bpdu_filter = ET.SubElement(portfast, "bpdu-filter")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_spanning_tree_edgeport_edgeportbasic(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(port_channel, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        edgeport = ET.SubElement(spanning_tree, "edgeport")
        edgeportbasic = ET.SubElement(edgeport, "edgeportbasic")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_spanning_tree_edgeport_bpdu_guard(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(port_channel, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        edgeport = ET.SubElement(spanning_tree, "edgeport")
        bpdu_guard = ET.SubElement(edgeport, "bpdu-guard")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_spanning_tree_edgeport_bpdu_filter(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(port_channel, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        edgeport = ET.SubElement(spanning_tree, "edgeport")
        bpdu_filter = ET.SubElement(edgeport, "bpdu-filter")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_spanning_tree_guard_root(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(port_channel, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        guard = ET.SubElement(spanning_tree, "guard")
        root = ET.SubElement(guard, "root")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_spanning_tree_hello_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(port_channel, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        hello_time = ET.SubElement(spanning_tree, "hello-time")
        hello_time.text = kwargs.pop('hello_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_spanning_tree_bpdu_mac(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(port_channel, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        bpdu_mac = ET.SubElement(spanning_tree, "bpdu-mac")
        bpdu_mac.text = kwargs.pop('bpdu_mac')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_spanning_tree_link_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(port_channel, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        link_type = ET.SubElement(spanning_tree, "link-type")
        link_type.text = kwargs.pop('link_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_spanning_tree_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(port_channel, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        priority = ET.SubElement(spanning_tree, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_spanning_tree_restricted_role(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(port_channel, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        restricted_role = ET.SubElement(spanning_tree, "restricted-role")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_spanning_tree_restricted_tcn(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(port_channel, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        restricted_tcn = ET.SubElement(spanning_tree, "restricted-tcn")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_spanning_tree_shutdown(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(port_channel, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        shutdown = ET.SubElement(spanning_tree, "shutdown")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_spanning_tree_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(port_channel, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        vlan = ET.SubElement(spanning_tree, "vlan")
        id = ET.SubElement(vlan, "id")
        id.text = kwargs.pop('id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_spanning_tree_vlan_cost(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(port_channel, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        vlan = ET.SubElement(spanning_tree, "vlan")
        id_key = ET.SubElement(vlan, "id")
        id_key.text = kwargs.pop('id')
        cost = ET.SubElement(vlan, "cost")
        cost.text = kwargs.pop('cost')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_spanning_tree_vlan_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(port_channel, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        vlan = ET.SubElement(spanning_tree, "vlan")
        id_key = ET.SubElement(vlan, "id")
        id_key.text = kwargs.pop('id')
        priority = ET.SubElement(vlan, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_spanning_tree_vlan_guard_root(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(port_channel, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        vlan = ET.SubElement(spanning_tree, "vlan")
        id_key = ET.SubElement(vlan, "id")
        id_key.text = kwargs.pop('id')
        guard = ET.SubElement(vlan, "guard")
        root = ET.SubElement(guard, "root")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_spanning_tree_instance_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(port_channel, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        instance = ET.SubElement(spanning_tree, "instance")
        id = ET.SubElement(instance, "id")
        id.text = kwargs.pop('id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_spanning_tree_instance_cost(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(port_channel, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        instance = ET.SubElement(spanning_tree, "instance")
        id_key = ET.SubElement(instance, "id")
        id_key.text = kwargs.pop('id')
        cost = ET.SubElement(instance, "cost")
        cost.text = kwargs.pop('cost')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_spanning_tree_instance_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(port_channel, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        instance = ET.SubElement(spanning_tree, "instance")
        id_key = ET.SubElement(instance, "id")
        id_key.text = kwargs.pop('id')
        priority = ET.SubElement(instance, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_spanning_tree_instance_restricted_role(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(port_channel, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        instance = ET.SubElement(spanning_tree, "instance")
        id_key = ET.SubElement(instance, "id")
        id_key.text = kwargs.pop('id')
        restricted_role = ET.SubElement(instance, "restricted-role")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_spanning_tree_instance_restricted_tcn(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(port_channel, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        instance = ET.SubElement(spanning_tree, "instance")
        id_key = ET.SubElement(instance, "id")
        id_key.text = kwargs.pop('id')
        restricted_tcn = ET.SubElement(instance, "restricted-tcn")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_spanning_tree_peer_switch(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(port_channel, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        peer_switch = ET.SubElement(spanning_tree, "peer-switch")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_management_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        management = ET.SubElement(interface, "management")
        name = ET.SubElement(management, "name")
        name.text = kwargs.pop('name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_management_tcp_tcp_burstrate(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        management = ET.SubElement(interface, "management")
        name_key = ET.SubElement(management, "name")
        name_key.text = kwargs.pop('name')
        tcp = ET.SubElement(management, "tcp")
        tcp_burstrate = ET.SubElement(tcp, "tcp_burstrate")
        tcp_burstrate.text = kwargs.pop('tcp_burstrate')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_management_tcp_tcp_lockdown(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        management = ET.SubElement(interface, "management")
        name_key = ET.SubElement(management, "name")
        name_key.text = kwargs.pop('name')
        tcp = ET.SubElement(management, "tcp")
        tcp_lockdown = ET.SubElement(tcp, "tcp_lockdown")
        tcp_lockdown.text = kwargs.pop('tcp_lockdown')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_management_ip_icmp_unreachable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        management = ET.SubElement(interface, "management")
        name_key = ET.SubElement(management, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(management, "ip")
        icmp = ET.SubElement(ip, "icmp")
        unreachable = ET.SubElement(icmp, "unreachable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_management_ip_icmp_echo_reply(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        management = ET.SubElement(interface, "management")
        name_key = ET.SubElement(management, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(management, "ip")
        icmp = ET.SubElement(ip, "icmp")
        echo_reply = ET.SubElement(icmp, "echo_reply")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_management_ip_icmp_rate_limiting(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        management = ET.SubElement(interface, "management")
        name_key = ET.SubElement(management, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(management, "ip")
        icmp = ET.SubElement(ip, "icmp")
        rate_limiting = ET.SubElement(icmp, "rate_limiting")
        rate_limiting.text = kwargs.pop('rate_limiting')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_management_ip_address_dhcp(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        management = ET.SubElement(interface, "management")
        name_key = ET.SubElement(management, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(management, "ip")
        address = ET.SubElement(ip, "address")
        dhcp = ET.SubElement(address, "dhcp")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_management_ip_address_ip_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        management = ET.SubElement(interface, "management")
        name_key = ET.SubElement(management, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(management, "ip")
        address = ET.SubElement(ip, "address")
        ip_address = ET.SubElement(address, "ip-address")
        ip_address.text = kwargs.pop('ip_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_management_ip_gateway_gateway_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        management = ET.SubElement(interface, "management")
        name_key = ET.SubElement(management, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(management, "ip")
        gateway = ET.SubElement(ip, "gateway")
        gateway_address = ET.SubElement(gateway, "gateway-address")
        gateway_address.text = kwargs.pop('gateway_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_management_ip_oper_address_oper_ip_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        management = ET.SubElement(interface, "management")
        name_key = ET.SubElement(management, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(management, "ip")
        oper_address = ET.SubElement(ip, "oper-address")
        oper_ip_address = ET.SubElement(oper_address, "oper-ip-address")
        oper_ip_address.text = kwargs.pop('oper_ip_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_management_ip_oper_gateway_con_oper_gateway(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        management = ET.SubElement(interface, "management")
        name_key = ET.SubElement(management, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(management, "ip")
        oper_gateway_con = ET.SubElement(ip, "oper-gateway-con")
        oper_gateway = ET.SubElement(oper_gateway_con, "oper-gateway")
        oper_gateway.text = kwargs.pop('oper_gateway')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_management_ip_access_group_mgmt_ip_access_list(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        management = ET.SubElement(interface, "management")
        name_key = ET.SubElement(management, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(management, "ip")
        access_group = ET.SubElement(ip, "access-group", xmlns="urn:brocade.com:mgmt:brocade-ip-access-list")
        mgmt_ip_access_list = ET.SubElement(access_group, "mgmt-ip-access-list")
        mgmt_ip_access_list.text = kwargs.pop('mgmt_ip_access_list')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_management_ip_access_group_mgmt_ip_direction(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        management = ET.SubElement(interface, "management")
        name_key = ET.SubElement(management, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(management, "ip")
        access_group = ET.SubElement(ip, "access-group", xmlns="urn:brocade.com:mgmt:brocade-ip-access-list")
        mgmt_ip_direction = ET.SubElement(access_group, "mgmt-ip-direction")
        mgmt_ip_direction.text = kwargs.pop('mgmt_ip_direction')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_management_ipv6_icmpv6_v6_unreachable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        management = ET.SubElement(interface, "management")
        name_key = ET.SubElement(management, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(management, "ipv6")
        icmpv6 = ET.SubElement(ipv6, "icmpv6")
        v6_unreachable = ET.SubElement(icmpv6, "v6_unreachable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_management_ipv6_icmpv6_v6_echo_reply(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        management = ET.SubElement(interface, "management")
        name_key = ET.SubElement(management, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(management, "ipv6")
        icmpv6 = ET.SubElement(ipv6, "icmpv6")
        v6_echo_reply = ET.SubElement(icmpv6, "v6_echo_reply")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_management_ipv6_icmpv6_v6_rate_limiting(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        management = ET.SubElement(interface, "management")
        name_key = ET.SubElement(management, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(management, "ipv6")
        icmpv6 = ET.SubElement(ipv6, "icmpv6")
        v6_rate_limiting = ET.SubElement(icmpv6, "v6_rate_limiting")
        v6_rate_limiting.text = kwargs.pop('v6_rate_limiting')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_management_ipv6_ipv6_address_cont_ipv6_global_cont_ipv6_global_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        management = ET.SubElement(interface, "management")
        name_key = ET.SubElement(management, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(management, "ipv6")
        ipv6_address_cont = ET.SubElement(ipv6, "ipv6-address-cont")
        ipv6_global_cont = ET.SubElement(ipv6_address_cont, "ipv6-global-cont")
        ipv6_global_address = ET.SubElement(ipv6_global_cont, "ipv6-global-address")
        ipv6_global_address.text = kwargs.pop('ipv6_global_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_management_ipv6_ipv6_address_cont_ipv6_global_cont_ipv6_global_address_eui64(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        management = ET.SubElement(interface, "management")
        name_key = ET.SubElement(management, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(management, "ipv6")
        ipv6_address_cont = ET.SubElement(ipv6, "ipv6-address-cont")
        ipv6_global_cont = ET.SubElement(ipv6_address_cont, "ipv6-global-cont")
        ipv6_global_address_eui64 = ET.SubElement(ipv6_global_cont, "ipv6-global-address-eui64")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_management_ipv6_ipv6_address_cont_autoconfig(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        management = ET.SubElement(interface, "management")
        name_key = ET.SubElement(management, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(management, "ipv6")
        ipv6_address_cont = ET.SubElement(ipv6, "ipv6-address-cont")
        autoconfig = ET.SubElement(ipv6_address_cont, "autoconfig")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_management_ipv6_ipv6_address_cont_dhcpv6(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        management = ET.SubElement(interface, "management")
        name_key = ET.SubElement(management, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(management, "ipv6")
        ipv6_address_cont = ET.SubElement(ipv6, "ipv6-address-cont")
        dhcpv6 = ET.SubElement(ipv6_address_cont, "dhcpv6")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_management_ipv6_access_group_mgmt_ipv6_access_list(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        management = ET.SubElement(interface, "management")
        name_key = ET.SubElement(management, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(management, "ipv6")
        access_group = ET.SubElement(ipv6, "access-group", xmlns="urn:brocade.com:mgmt:brocade-ipv6-access-list")
        mgmt_ipv6_access_list = ET.SubElement(access_group, "mgmt-ipv6-access-list")
        mgmt_ipv6_access_list.text = kwargs.pop('mgmt_ipv6_access_list')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_management_ipv6_access_group_mgmt_ip_direction(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        management = ET.SubElement(interface, "management")
        name_key = ET.SubElement(management, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(management, "ipv6")
        access_group = ET.SubElement(ipv6, "access-group", xmlns="urn:brocade.com:mgmt:brocade-ipv6-access-list")
        mgmt_ip_direction = ET.SubElement(access_group, "mgmt-ip-direction")
        mgmt_ip_direction.text = kwargs.pop('mgmt_ip_direction')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_management_vrf_vrf_forwarding(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        management = ET.SubElement(interface, "management")
        name_key = ET.SubElement(management, "name")
        name_key.text = kwargs.pop('name')
        vrf = ET.SubElement(management, "vrf")
        vrf_forwarding = ET.SubElement(vrf, "vrf-forwarding")
        vrf_forwarding.text = kwargs.pop('vrf_forwarding')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_management_speed(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        management = ET.SubElement(interface, "management")
        name_key = ET.SubElement(management, "name")
        name_key.text = kwargs.pop('name')
        speed = ET.SubElement(management, "speed")
        speed.text = kwargs.pop('speed')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_management_line_speed_actual(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        management = ET.SubElement(interface, "management")
        name_key = ET.SubElement(management, "name")
        name_key.text = kwargs.pop('name')
        line_speed = ET.SubElement(management, "line-speed")
        actual = ET.SubElement(line_speed, "actual")
        actual.text = kwargs.pop('actual')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_management_line_speed_configured(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        management = ET.SubElement(interface, "management")
        name_key = ET.SubElement(management, "name")
        name_key.text = kwargs.pop('name')
        line_speed = ET.SubElement(management, "line-speed")
        configured = ET.SubElement(line_speed, "configured")
        configured.text = kwargs.pop('configured')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_management_shutdown_management(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        management = ET.SubElement(interface, "management")
        name_key = ET.SubElement(management, "name")
        name_key.text = kwargs.pop('name')
        shutdown_management = ET.SubElement(management, "shutdown_management")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_management_shutdown_management_oper(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        management = ET.SubElement(interface, "management")
        name_key = ET.SubElement(management, "name")
        name_key.text = kwargs.pop('name')
        shutdown_management_oper = ET.SubElement(management, "shutdown_management_oper")
        shutdown_management_oper.text = kwargs.pop('shutdown_management_oper')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fc_port_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fc_port = ET.SubElement(interface, "fc-port")
        name = ET.SubElement(fc_port, "name")
        name.text = kwargs.pop('name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fc_port_fc_speed_cfg(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fc_port = ET.SubElement(interface, "fc-port")
        name_key = ET.SubElement(fc_port, "name")
        name_key.text = kwargs.pop('name')
        fc_speed_cfg = ET.SubElement(fc_port, "fc-speed-cfg")
        fc_speed_cfg.text = kwargs.pop('fc_speed_cfg')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fc_port_fill_word(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fc_port = ET.SubElement(interface, "fc-port")
        name_key = ET.SubElement(fc_port, "name")
        name_key.text = kwargs.pop('name')
        fill_word = ET.SubElement(fc_port, "fill-word")
        fill_word.text = kwargs.pop('fill_word')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fc_port_long_distance(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fc_port = ET.SubElement(interface, "fc-port")
        name_key = ET.SubElement(fc_port, "name")
        name_key.text = kwargs.pop('name')
        long_distance = ET.SubElement(fc_port, "long-distance")
        long_distance.text = kwargs.pop('long_distance')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fc_port_vc_link_init(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fc_port = ET.SubElement(interface, "fc-port")
        name_key = ET.SubElement(fc_port, "name")
        name_key.text = kwargs.pop('name')
        vc_link_init = ET.SubElement(fc_port, "vc-link-init")
        vc_link_init.text = kwargs.pop('vc_link_init')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fc_port_desire_distance(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fc_port = ET.SubElement(interface, "fc-port")
        name_key = ET.SubElement(fc_port, "name")
        name_key.text = kwargs.pop('name')
        desire_distance = ET.SubElement(fc_port, "desire-distance")
        desire_distance.text = kwargs.pop('desire_distance')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fc_port_isl_r_rdy_mode(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fc_port = ET.SubElement(interface, "fc-port")
        name_key = ET.SubElement(fc_port, "name")
        name_key.text = kwargs.pop('name')
        isl_r_rdy_mode = ET.SubElement(fc_port, "isl-r_rdy-mode")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fc_port_trunk_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fc_port = ET.SubElement(interface, "fc-port")
        name_key = ET.SubElement(fc_port, "name")
        name_key.text = kwargs.pop('name')
        trunk_enable = ET.SubElement(fc_port, "trunk-enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fc_port_shutdown(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fc_port = ET.SubElement(interface, "fc-port")
        name_key = ET.SubElement(fc_port, "name")
        name_key.text = kwargs.pop('name')
        shutdown = ET.SubElement(fc_port, "shutdown")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fc_port_config_mode(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fc_port = ET.SubElement(interface, "fc-port")
        name_key = ET.SubElement(fc_port, "name")
        name_key.text = kwargs.pop('name')
        config_mode = ET.SubElement(fc_port, "config-mode")
        config_mode.text = kwargs.pop('config_mode')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fc_port_fec_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fc_port = ET.SubElement(interface, "fc-port")
        name_key = ET.SubElement(fc_port, "name")
        name_key.text = kwargs.pop('name')
        fec_enable = ET.SubElement(fc_port, "fec-enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fc_port_description(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fc_port = ET.SubElement(interface, "fc-port")
        name_key = ET.SubElement(fc_port, "name")
        name_key.text = kwargs.pop('name')
        description = ET.SubElement(fc_port, "description")
        description.text = kwargs.pop('description')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fcoe_fcoe_interface_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fcoe = ET.SubElement(interface, "fcoe", xmlns="urn:brocade.com:mgmt:brocade-fcoe")
        fcoe_interface_name = ET.SubElement(fcoe, "fcoe-interface-name")
        fcoe_interface_name.text = kwargs.pop('fcoe_interface_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fcoe_fcoe_interface_shutdown(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fcoe = ET.SubElement(interface, "fcoe", xmlns="urn:brocade.com:mgmt:brocade-fcoe")
        fcoe_interface_name_key = ET.SubElement(fcoe, "fcoe-interface-name")
        fcoe_interface_name_key.text = kwargs.pop('fcoe_interface_name')
        fcoe_interface_shutdown = ET.SubElement(fcoe, "fcoe-interface-shutdown")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fcoe_fcoe_interface_bind_fcoe_interface_bind_type_fcoe_interface_bind_te_fcoe_interface_bind_te(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fcoe = ET.SubElement(interface, "fcoe", xmlns="urn:brocade.com:mgmt:brocade-fcoe")
        fcoe_interface_name_key = ET.SubElement(fcoe, "fcoe-interface-name")
        fcoe_interface_name_key.text = kwargs.pop('fcoe_interface_name')
        fcoe_interface_bind = ET.SubElement(fcoe, "fcoe-interface-bind")
        fcoe_interface_bind_type = ET.SubElement(fcoe_interface_bind, "fcoe-interface-bind-type")
        fcoe_interface_bind_te = ET.SubElement(fcoe_interface_bind_type, "fcoe-interface-bind-te")
        fcoe_interface_bind_te = ET.SubElement(fcoe_interface_bind_te, "fcoe-interface-bind-te")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fcoe_fcoe_interface_bind_fcoe_interface_bind_type_fcoe_interface_bind_fo_fcoe_interface_bind_fo(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fcoe = ET.SubElement(interface, "fcoe", xmlns="urn:brocade.com:mgmt:brocade-fcoe")
        fcoe_interface_name_key = ET.SubElement(fcoe, "fcoe-interface-name")
        fcoe_interface_name_key.text = kwargs.pop('fcoe_interface_name')
        fcoe_interface_bind = ET.SubElement(fcoe, "fcoe-interface-bind")
        fcoe_interface_bind_type = ET.SubElement(fcoe_interface_bind, "fcoe-interface-bind-type")
        fcoe_interface_bind_fo = ET.SubElement(fcoe_interface_bind_type, "fcoe-interface-bind-fo")
        fcoe_interface_bind_fo = ET.SubElement(fcoe_interface_bind_fo, "fcoe-interface-bind-fo")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fcoe_fcoe_interface_bind_fcoe_interface_bind_type_fcoe_interface_bind_po_fcoe_interface_bind_po(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fcoe = ET.SubElement(interface, "fcoe", xmlns="urn:brocade.com:mgmt:brocade-fcoe")
        fcoe_interface_name_key = ET.SubElement(fcoe, "fcoe-interface-name")
        fcoe_interface_name_key.text = kwargs.pop('fcoe_interface_name')
        fcoe_interface_bind = ET.SubElement(fcoe, "fcoe-interface-bind")
        fcoe_interface_bind_type = ET.SubElement(fcoe_interface_bind, "fcoe-interface-bind-type")
        fcoe_interface_bind_po = ET.SubElement(fcoe_interface_bind_type, "fcoe-interface-bind-po")
        fcoe_interface_bind_po = ET.SubElement(fcoe_interface_bind_po, "fcoe-interface-bind-po")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fcoe_fcoe_interface_bind_fcoe_interface_bind_type_fcoe_interface_bind_mac_fcoe_interface_bind_mac(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fcoe = ET.SubElement(interface, "fcoe", xmlns="urn:brocade.com:mgmt:brocade-fcoe")
        fcoe_interface_name_key = ET.SubElement(fcoe, "fcoe-interface-name")
        fcoe_interface_name_key.text = kwargs.pop('fcoe_interface_name')
        fcoe_interface_bind = ET.SubElement(fcoe, "fcoe-interface-bind")
        fcoe_interface_bind_type = ET.SubElement(fcoe_interface_bind, "fcoe-interface-bind-type")
        fcoe_interface_bind_mac = ET.SubElement(fcoe_interface_bind_type, "fcoe-interface-bind-mac")
        fcoe_interface_bind_mac = ET.SubElement(fcoe_interface_bind_mac, "fcoe-interface-bind-mac")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fcoe_fcoe_interface_bind_fcoe_interface_bind_type_fcoe_interface_bind_hu_fcoe_interface_bind_hu(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fcoe = ET.SubElement(interface, "fcoe", xmlns="urn:brocade.com:mgmt:brocade-fcoe")
        fcoe_interface_name_key = ET.SubElement(fcoe, "fcoe-interface-name")
        fcoe_interface_name_key.text = kwargs.pop('fcoe_interface_name')
        fcoe_interface_bind = ET.SubElement(fcoe, "fcoe-interface-bind")
        fcoe_interface_bind_type = ET.SubElement(fcoe_interface_bind, "fcoe-interface-bind-type")
        fcoe_interface_bind_hu = ET.SubElement(fcoe_interface_bind_type, "fcoe-interface-bind-hu")
        fcoe_interface_bind_hu = ET.SubElement(fcoe_interface_bind_hu, "fcoe-interface-bind-hu")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fcoe_fcoe_interface_bind_fcoe_interface_bind_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fcoe = ET.SubElement(interface, "fcoe", xmlns="urn:brocade.com:mgmt:brocade-fcoe")
        fcoe_interface_name_key = ET.SubElement(fcoe, "fcoe-interface-name")
        fcoe_interface_name_key.text = kwargs.pop('fcoe_interface_name')
        fcoe_interface_bind = ET.SubElement(fcoe, "fcoe-interface-bind")
        fcoe_interface_bind_name = ET.SubElement(fcoe_interface_bind, "fcoe-interface-bind-name")
        fcoe_interface_bind_name.text = kwargs.pop('fcoe_interface_bind_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name = ET.SubElement(vlan, "name")
        name.text = kwargs.pop('name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_transport_service(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name_key = ET.SubElement(vlan, "name")
        name_key.text = kwargs.pop('name')
        transport_service = ET.SubElement(vlan, "transport-service")
        transport_service.text = kwargs.pop('transport_service')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_ifindex(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name_key = ET.SubElement(vlan, "name")
        name_key.text = kwargs.pop('name')
        ifindex = ET.SubElement(vlan, "ifindex")
        ifindex.text = kwargs.pop('ifindex')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_description(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name_key = ET.SubElement(vlan, "name")
        name_key.text = kwargs.pop('name')
        description = ET.SubElement(vlan, "description")
        description.text = kwargs.pop('description')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_vlan_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name_key = ET.SubElement(vlan, "name")
        name_key.text = kwargs.pop('name')
        vlan_name = ET.SubElement(vlan, "vlan-name")
        vlan_name.text = kwargs.pop('vlan_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_private_vlan_pvlan_type_leaf(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name_key = ET.SubElement(vlan, "name")
        name_key.text = kwargs.pop('name')
        private_vlan = ET.SubElement(vlan, "private-vlan")
        pvlan_type_leaf = ET.SubElement(private_vlan, "pvlan-type-leaf")
        pvlan_type_leaf.text = kwargs.pop('pvlan_type_leaf')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_private_vlan_association_sec_assoc_add(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name_key = ET.SubElement(vlan, "name")
        name_key.text = kwargs.pop('name')
        private_vlan = ET.SubElement(vlan, "private-vlan")
        association = ET.SubElement(private_vlan, "association")
        sec_assoc_add = ET.SubElement(association, "sec-assoc-add")
        sec_assoc_add.text = kwargs.pop('sec_assoc_add')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_private_vlan_association_sec_assoc_remove(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name_key = ET.SubElement(vlan, "name")
        name_key.text = kwargs.pop('name')
        private_vlan = ET.SubElement(vlan, "private-vlan")
        association = ET.SubElement(private_vlan, "association")
        sec_assoc_remove = ET.SubElement(association, "sec-assoc-remove")
        sec_assoc_remove.text = kwargs.pop('sec_assoc_remove')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_ip_arp_inspection_trust(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name_key = ET.SubElement(vlan, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(vlan, "ip")
        arp = ET.SubElement(ip, "arp", xmlns="urn:brocade.com:mgmt:brocade-dai")
        inspection = ET.SubElement(arp, "inspection")
        trust = ET.SubElement(inspection, "trust")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_ip_arp_inspection_filter_acl_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name_key = ET.SubElement(vlan, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(vlan, "ip")
        arp = ET.SubElement(ip, "arp", xmlns="urn:brocade.com:mgmt:brocade-dai")
        inspection = ET.SubElement(arp, "inspection")
        filter = ET.SubElement(inspection, "filter")
        acl_name = ET.SubElement(filter, "acl-name")
        acl_name.text = kwargs.pop('acl_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_ip_arp_inspection_logging_acl_match(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name_key = ET.SubElement(vlan, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(vlan, "ip")
        arp = ET.SubElement(ip, "arp", xmlns="urn:brocade.com:mgmt:brocade-dai")
        inspection = ET.SubElement(arp, "inspection")
        logging = ET.SubElement(inspection, "logging")
        acl_match = ET.SubElement(logging, "acl-match")
        acl_match.text = kwargs.pop('acl_match')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_ip_igmp_last_member_query_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name_key = ET.SubElement(vlan, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(vlan, "ip")
        igmp = ET.SubElement(ip, "igmp", xmlns="urn:brocade.com:mgmt:brocade-igmp-snooping")
        last_member_query_interval = ET.SubElement(igmp, "last-member-query-interval")
        last_member_query_interval.text = kwargs.pop('last_member_query_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_ip_igmp_query_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name_key = ET.SubElement(vlan, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(vlan, "ip")
        igmp = ET.SubElement(ip, "igmp", xmlns="urn:brocade.com:mgmt:brocade-igmp-snooping")
        query_interval = ET.SubElement(igmp, "query-interval")
        query_interval.text = kwargs.pop('query_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_ip_igmp_query_max_response_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name_key = ET.SubElement(vlan, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(vlan, "ip")
        igmp = ET.SubElement(ip, "igmp", xmlns="urn:brocade.com:mgmt:brocade-igmp-snooping")
        query_max_response_time = ET.SubElement(igmp, "query-max-response-time")
        query_max_response_time.text = kwargs.pop('query_max_response_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_ip_igmp_snooping_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name_key = ET.SubElement(vlan, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(vlan, "ip")
        igmp = ET.SubElement(ip, "igmp", xmlns="urn:brocade.com:mgmt:brocade-igmp-snooping")
        snooping = ET.SubElement(igmp, "snooping")
        enable = ET.SubElement(snooping, "enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_ip_igmp_snooping_fast_leave(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name_key = ET.SubElement(vlan, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(vlan, "ip")
        igmp = ET.SubElement(ip, "igmp", xmlns="urn:brocade.com:mgmt:brocade-igmp-snooping")
        snooping = ET.SubElement(igmp, "snooping")
        fast_leave = ET.SubElement(snooping, "fast-leave")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_ip_igmp_snooping_mrouter_timeout(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name_key = ET.SubElement(vlan, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(vlan, "ip")
        igmp = ET.SubElement(ip, "igmp", xmlns="urn:brocade.com:mgmt:brocade-igmp-snooping")
        snooping = ET.SubElement(igmp, "snooping")
        mrouter_timeout = ET.SubElement(snooping, "mrouter-timeout")
        mrouter_timeout.text = kwargs.pop('mrouter_timeout')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_ip_igmp_snooping_restrict_unknown_multicast(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name_key = ET.SubElement(vlan, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(vlan, "ip")
        igmp = ET.SubElement(ip, "igmp", xmlns="urn:brocade.com:mgmt:brocade-igmp-snooping")
        snooping = ET.SubElement(igmp, "snooping")
        restrict_unknown_multicast = ET.SubElement(snooping, "restrict-unknown-multicast")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_ip_igmp_snooping_querier_qenable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name_key = ET.SubElement(vlan, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(vlan, "ip")
        igmp = ET.SubElement(ip, "igmp", xmlns="urn:brocade.com:mgmt:brocade-igmp-snooping")
        snooping = ET.SubElement(igmp, "snooping")
        querier = ET.SubElement(snooping, "querier")
        qenable = ET.SubElement(querier, "qenable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_ip_igmp_snooping_mrouter_interface_if_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name_key = ET.SubElement(vlan, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(vlan, "ip")
        igmp = ET.SubElement(ip, "igmp", xmlns="urn:brocade.com:mgmt:brocade-igmp-snooping")
        snooping = ET.SubElement(igmp, "snooping")
        mrouter = ET.SubElement(snooping, "mrouter")
        interface = ET.SubElement(mrouter, "interface")
        value_key = ET.SubElement(interface, "value")
        value_key.text = kwargs.pop('value')
        if_type = ET.SubElement(interface, "if-type")
        if_type.text = kwargs.pop('if_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_ip_igmp_snooping_mrouter_interface_value(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name_key = ET.SubElement(vlan, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(vlan, "ip")
        igmp = ET.SubElement(ip, "igmp", xmlns="urn:brocade.com:mgmt:brocade-igmp-snooping")
        snooping = ET.SubElement(igmp, "snooping")
        mrouter = ET.SubElement(snooping, "mrouter")
        interface = ET.SubElement(mrouter, "interface")
        if_type_key = ET.SubElement(interface, "if-type")
        if_type_key.text = kwargs.pop('if_type')
        value = ET.SubElement(interface, "value")
        value.text = kwargs.pop('value')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_ip_igmp_static_group_mcast_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name_key = ET.SubElement(vlan, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(vlan, "ip")
        igmp = ET.SubElement(ip, "igmp", xmlns="urn:brocade.com:mgmt:brocade-igmp-snooping")
        static_group = ET.SubElement(igmp, "static-group")
        interface_key = ET.SubElement(static_group, "interface")
        interface_key.text = kwargs.pop('interface')
        if_type_key = ET.SubElement(static_group, "if-type")
        if_type_key.text = kwargs.pop('if_type')
        value_key = ET.SubElement(static_group, "value")
        value_key.text = kwargs.pop('value')
        mcast_address = ET.SubElement(static_group, "mcast-address")
        mcast_address.text = kwargs.pop('mcast_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_ip_igmp_static_group_interface(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name_key = ET.SubElement(vlan, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(vlan, "ip")
        igmp = ET.SubElement(ip, "igmp", xmlns="urn:brocade.com:mgmt:brocade-igmp-snooping")
        static_group = ET.SubElement(igmp, "static-group")
        mcast_address_key = ET.SubElement(static_group, "mcast-address")
        mcast_address_key.text = kwargs.pop('mcast_address')
        if_type_key = ET.SubElement(static_group, "if-type")
        if_type_key.text = kwargs.pop('if_type')
        value_key = ET.SubElement(static_group, "value")
        value_key.text = kwargs.pop('value')
        interface = ET.SubElement(static_group, "interface")
        interface.text = kwargs.pop('interface')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_ip_igmp_static_group_if_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name_key = ET.SubElement(vlan, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(vlan, "ip")
        igmp = ET.SubElement(ip, "igmp", xmlns="urn:brocade.com:mgmt:brocade-igmp-snooping")
        static_group = ET.SubElement(igmp, "static-group")
        mcast_address_key = ET.SubElement(static_group, "mcast-address")
        mcast_address_key.text = kwargs.pop('mcast_address')
        interface_key = ET.SubElement(static_group, "interface")
        interface_key.text = kwargs.pop('interface')
        value_key = ET.SubElement(static_group, "value")
        value_key.text = kwargs.pop('value')
        if_type = ET.SubElement(static_group, "if-type")
        if_type.text = kwargs.pop('if_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_ip_igmp_static_group_value(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name_key = ET.SubElement(vlan, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(vlan, "ip")
        igmp = ET.SubElement(ip, "igmp", xmlns="urn:brocade.com:mgmt:brocade-igmp-snooping")
        static_group = ET.SubElement(igmp, "static-group")
        mcast_address_key = ET.SubElement(static_group, "mcast-address")
        mcast_address_key.text = kwargs.pop('mcast_address')
        interface_key = ET.SubElement(static_group, "interface")
        interface_key.text = kwargs.pop('interface')
        if_type_key = ET.SubElement(static_group, "if-type")
        if_type_key.text = kwargs.pop('if_type')
        value = ET.SubElement(static_group, "value")
        value.text = kwargs.pop('value')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_ipv6_mldVlan_last_member_query_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name_key = ET.SubElement(vlan, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(vlan, "ipv6")
        mldVlan = ET.SubElement(ipv6, "mldVlan", xmlns="urn:brocade.com:mgmt:brocade-mld-snooping")
        last_member_query_interval = ET.SubElement(mldVlan, "last-member-query-interval")
        last_member_query_interval.text = kwargs.pop('last_member_query_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_ipv6_mldVlan_last_member_query_count(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name_key = ET.SubElement(vlan, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(vlan, "ipv6")
        mldVlan = ET.SubElement(ipv6, "mldVlan", xmlns="urn:brocade.com:mgmt:brocade-mld-snooping")
        last_member_query_count = ET.SubElement(mldVlan, "last-member-query-count")
        last_member_query_count.text = kwargs.pop('last_member_query_count')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_ipv6_mldVlan_startup_query_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name_key = ET.SubElement(vlan, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(vlan, "ipv6")
        mldVlan = ET.SubElement(ipv6, "mldVlan", xmlns="urn:brocade.com:mgmt:brocade-mld-snooping")
        startup_query_interval = ET.SubElement(mldVlan, "startup-query-interval")
        startup_query_interval.text = kwargs.pop('startup_query_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_ipv6_mldVlan_startup_query_count(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name_key = ET.SubElement(vlan, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(vlan, "ipv6")
        mldVlan = ET.SubElement(ipv6, "mldVlan", xmlns="urn:brocade.com:mgmt:brocade-mld-snooping")
        startup_query_count = ET.SubElement(mldVlan, "startup-query-count")
        startup_query_count.text = kwargs.pop('startup_query_count')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_ipv6_mldVlan_query_max_response_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name_key = ET.SubElement(vlan, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(vlan, "ipv6")
        mldVlan = ET.SubElement(ipv6, "mldVlan", xmlns="urn:brocade.com:mgmt:brocade-mld-snooping")
        query_max_response_time = ET.SubElement(mldVlan, "query-max-response-time")
        query_max_response_time.text = kwargs.pop('query_max_response_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_ipv6_mldVlan_query_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name_key = ET.SubElement(vlan, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(vlan, "ipv6")
        mldVlan = ET.SubElement(ipv6, "mldVlan", xmlns="urn:brocade.com:mgmt:brocade-mld-snooping")
        query_interval = ET.SubElement(mldVlan, "query-interval")
        query_interval.text = kwargs.pop('query_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_ipv6_mldVlan_snooping_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name_key = ET.SubElement(vlan, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(vlan, "ipv6")
        mldVlan = ET.SubElement(ipv6, "mldVlan", xmlns="urn:brocade.com:mgmt:brocade-mld-snooping")
        snooping = ET.SubElement(mldVlan, "snooping")
        enable = ET.SubElement(snooping, "enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_ipv6_mldVlan_snooping_fast_leave(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name_key = ET.SubElement(vlan, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(vlan, "ipv6")
        mldVlan = ET.SubElement(ipv6, "mldVlan", xmlns="urn:brocade.com:mgmt:brocade-mld-snooping")
        snooping = ET.SubElement(mldVlan, "snooping")
        fast_leave = ET.SubElement(snooping, "fast-leave")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_ipv6_mldVlan_snooping_restrict_unknown_multicast_vlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name_key = ET.SubElement(vlan, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(vlan, "ipv6")
        mldVlan = ET.SubElement(ipv6, "mldVlan", xmlns="urn:brocade.com:mgmt:brocade-mld-snooping")
        snooping = ET.SubElement(mldVlan, "snooping")
        restrict_unknown_multicast_vlan = ET.SubElement(snooping, "restrict-unknown-multicast-vlan")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_ipv6_mldVlan_snooping_robustness_variable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name_key = ET.SubElement(vlan, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(vlan, "ipv6")
        mldVlan = ET.SubElement(ipv6, "mldVlan", xmlns="urn:brocade.com:mgmt:brocade-mld-snooping")
        snooping = ET.SubElement(mldVlan, "snooping")
        robustness_variable = ET.SubElement(snooping, "robustness-variable")
        robustness_variable.text = kwargs.pop('robustness_variable')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_ipv6_mldVlan_snooping_querier_qenable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name_key = ET.SubElement(vlan, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(vlan, "ipv6")
        mldVlan = ET.SubElement(ipv6, "mldVlan", xmlns="urn:brocade.com:mgmt:brocade-mld-snooping")
        snooping = ET.SubElement(mldVlan, "snooping")
        querier = ET.SubElement(snooping, "querier")
        qenable = ET.SubElement(querier, "qenable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_ipv6_mldVlan_snooping_mrouter_interface_if_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name_key = ET.SubElement(vlan, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(vlan, "ipv6")
        mldVlan = ET.SubElement(ipv6, "mldVlan", xmlns="urn:brocade.com:mgmt:brocade-mld-snooping")
        snooping = ET.SubElement(mldVlan, "snooping")
        mrouter = ET.SubElement(snooping, "mrouter")
        interface = ET.SubElement(mrouter, "interface")
        value_key = ET.SubElement(interface, "value")
        value_key.text = kwargs.pop('value')
        if_type = ET.SubElement(interface, "if-type")
        if_type.text = kwargs.pop('if_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_ipv6_mldVlan_snooping_mrouter_interface_value(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name_key = ET.SubElement(vlan, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(vlan, "ipv6")
        mldVlan = ET.SubElement(ipv6, "mldVlan", xmlns="urn:brocade.com:mgmt:brocade-mld-snooping")
        snooping = ET.SubElement(mldVlan, "snooping")
        mrouter = ET.SubElement(snooping, "mrouter")
        interface = ET.SubElement(mrouter, "interface")
        if_type_key = ET.SubElement(interface, "if-type")
        if_type_key.text = kwargs.pop('if_type')
        value = ET.SubElement(interface, "value")
        value.text = kwargs.pop('value')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_ipv6_mldVlan_static_group_mcast_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name_key = ET.SubElement(vlan, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(vlan, "ipv6")
        mldVlan = ET.SubElement(ipv6, "mldVlan", xmlns="urn:brocade.com:mgmt:brocade-mld-snooping")
        static_group = ET.SubElement(mldVlan, "static-group")
        interface_key = ET.SubElement(static_group, "interface")
        interface_key.text = kwargs.pop('interface')
        if_type_key = ET.SubElement(static_group, "if-type")
        if_type_key.text = kwargs.pop('if_type')
        value_key = ET.SubElement(static_group, "value")
        value_key.text = kwargs.pop('value')
        mcast_address = ET.SubElement(static_group, "mcast-address")
        mcast_address.text = kwargs.pop('mcast_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_ipv6_mldVlan_static_group_interface(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name_key = ET.SubElement(vlan, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(vlan, "ipv6")
        mldVlan = ET.SubElement(ipv6, "mldVlan", xmlns="urn:brocade.com:mgmt:brocade-mld-snooping")
        static_group = ET.SubElement(mldVlan, "static-group")
        mcast_address_key = ET.SubElement(static_group, "mcast-address")
        mcast_address_key.text = kwargs.pop('mcast_address')
        if_type_key = ET.SubElement(static_group, "if-type")
        if_type_key.text = kwargs.pop('if_type')
        value_key = ET.SubElement(static_group, "value")
        value_key.text = kwargs.pop('value')
        interface = ET.SubElement(static_group, "interface")
        interface.text = kwargs.pop('interface')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_ipv6_mldVlan_static_group_if_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name_key = ET.SubElement(vlan, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(vlan, "ipv6")
        mldVlan = ET.SubElement(ipv6, "mldVlan", xmlns="urn:brocade.com:mgmt:brocade-mld-snooping")
        static_group = ET.SubElement(mldVlan, "static-group")
        mcast_address_key = ET.SubElement(static_group, "mcast-address")
        mcast_address_key.text = kwargs.pop('mcast_address')
        interface_key = ET.SubElement(static_group, "interface")
        interface_key.text = kwargs.pop('interface')
        value_key = ET.SubElement(static_group, "value")
        value_key.text = kwargs.pop('value')
        if_type = ET.SubElement(static_group, "if-type")
        if_type.text = kwargs.pop('if_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_ipv6_mldVlan_static_group_value(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name_key = ET.SubElement(vlan, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(vlan, "ipv6")
        mldVlan = ET.SubElement(ipv6, "mldVlan", xmlns="urn:brocade.com:mgmt:brocade-mld-snooping")
        static_group = ET.SubElement(mldVlan, "static-group")
        mcast_address_key = ET.SubElement(static_group, "mcast-address")
        mcast_address_key.text = kwargs.pop('mcast_address')
        interface_key = ET.SubElement(static_group, "interface")
        interface_key.text = kwargs.pop('interface')
        if_type_key = ET.SubElement(static_group, "if-type")
        if_type_key.text = kwargs.pop('if_type')
        value = ET.SubElement(static_group, "value")
        value.text = kwargs.pop('value')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_mac_access_group_mac_access_list(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name_key = ET.SubElement(vlan, "name")
        name_key.text = kwargs.pop('name')
        mac = ET.SubElement(vlan, "mac", xmlns="urn:brocade.com:mgmt:brocade-mac-access-list")
        access_group = ET.SubElement(mac, "access-group")
        mac_direction_key = ET.SubElement(access_group, "mac-direction")
        mac_direction_key.text = kwargs.pop('mac_direction')
        mac_access_list = ET.SubElement(access_group, "mac-access-list")
        mac_access_list.text = kwargs.pop('mac_access_list')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_mac_access_group_mac_direction(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name_key = ET.SubElement(vlan, "name")
        name_key.text = kwargs.pop('name')
        mac = ET.SubElement(vlan, "mac", xmlns="urn:brocade.com:mgmt:brocade-mac-access-list")
        access_group = ET.SubElement(mac, "access-group")
        mac_access_list_key = ET.SubElement(access_group, "mac-access-list")
        mac_access_list_key.text = kwargs.pop('mac_access_list')
        mac_direction = ET.SubElement(access_group, "mac-direction")
        mac_direction.text = kwargs.pop('mac_direction')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_mac_access_group_traffic_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name_key = ET.SubElement(vlan, "name")
        name_key.text = kwargs.pop('name')
        mac = ET.SubElement(vlan, "mac", xmlns="urn:brocade.com:mgmt:brocade-mac-access-list")
        access_group = ET.SubElement(mac, "access-group")
        mac_access_list_key = ET.SubElement(access_group, "mac-access-list")
        mac_access_list_key.text = kwargs.pop('mac_access_list')
        mac_direction_key = ET.SubElement(access_group, "mac-direction")
        mac_direction_key.text = kwargs.pop('mac_direction')
        traffic_type = ET.SubElement(access_group, "traffic-type")
        traffic_type.text = kwargs.pop('traffic_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_remote_span(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name_key = ET.SubElement(vlan, "name")
        name_key.text = kwargs.pop('name')
        remote_span = ET.SubElement(vlan, "remote-span", xmlns="urn:brocade.com:mgmt:brocade-span")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_spanning_tree_stp_shutdown(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name_key = ET.SubElement(vlan, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(vlan, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        stp_shutdown = ET.SubElement(spanning_tree, "stp-shutdown")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_ve_gve_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        ve = ET.SubElement(interface, "ve")
        gve_name = ET.SubElement(ve, "gve-name")
        gve_name.text = kwargs.pop('gve_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_ve_global_ve_shutdown(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        ve = ET.SubElement(interface, "ve")
        gve_name_key = ET.SubElement(ve, "gve-name")
        gve_name_key.text = kwargs.pop('gve_name')
        global_ve_shutdown = ET.SubElement(ve, "global-ve-shutdown")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_ve_ip_ip_anycast_gateway_ip_gw_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        ve = ET.SubElement(interface, "ve")
        gve_name_key = ET.SubElement(ve, "gve-name")
        gve_name_key.text = kwargs.pop('gve_name')
        ip = ET.SubElement(ve, "ip")
        ip_anycast_gateway = ET.SubElement(ip, "ip-anycast-gateway", xmlns="urn:brocade.com:mgmt:brocade-anycast-gateway")
        ip_gw_id = ET.SubElement(ip_anycast_gateway, "ip-gw-id")
        ip_gw_id.text = kwargs.pop('ip_gw_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_ve_ip_ip_anycast_gateway_ipv4_gateway_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        ve = ET.SubElement(interface, "ve")
        gve_name_key = ET.SubElement(ve, "gve-name")
        gve_name_key.text = kwargs.pop('gve_name')
        ip = ET.SubElement(ve, "ip")
        ip_anycast_gateway = ET.SubElement(ip, "ip-anycast-gateway", xmlns="urn:brocade.com:mgmt:brocade-anycast-gateway")
        ip_gw_id_key = ET.SubElement(ip_anycast_gateway, "ip-gw-id")
        ip_gw_id_key.text = kwargs.pop('ip_gw_id')
        ipv4_gateway_address = ET.SubElement(ip_anycast_gateway, "ipv4-gateway-address")
        ipv4_gateway_address.text = kwargs.pop('ipv4_gateway_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_ve_ip_ip_anycast_gateway_gratuitous_arp_gve_timer(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        ve = ET.SubElement(interface, "ve")
        gve_name_key = ET.SubElement(ve, "gve-name")
        gve_name_key.text = kwargs.pop('gve_name')
        ip = ET.SubElement(ve, "ip")
        ip_anycast_gateway = ET.SubElement(ip, "ip-anycast-gateway", xmlns="urn:brocade.com:mgmt:brocade-anycast-gateway")
        ip_gw_id_key = ET.SubElement(ip_anycast_gateway, "ip-gw-id")
        ip_gw_id_key.text = kwargs.pop('ip_gw_id')
        gratuitous_arp = ET.SubElement(ip_anycast_gateway, "gratuitous-arp")
        gve_timer = ET.SubElement(gratuitous_arp, "gve-timer")
        gve_timer.text = kwargs.pop('gve_timer')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_ve_ip_ip_anycast_gateway_hold_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        ve = ET.SubElement(interface, "ve")
        gve_name_key = ET.SubElement(ve, "gve-name")
        gve_name_key.text = kwargs.pop('gve_name')
        ip = ET.SubElement(ve, "ip")
        ip_anycast_gateway = ET.SubElement(ip, "ip-anycast-gateway", xmlns="urn:brocade.com:mgmt:brocade-anycast-gateway")
        ip_gw_id_key = ET.SubElement(ip_anycast_gateway, "ip-gw-id")
        ip_gw_id_key.text = kwargs.pop('ip_gw_id')
        hold_time = ET.SubElement(ip_anycast_gateway, "hold-time")
        hold_time.text = kwargs.pop('hold_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_ve_ip_ip_anycast_gateway_load_balancing_disable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        ve = ET.SubElement(interface, "ve")
        gve_name_key = ET.SubElement(ve, "gve-name")
        gve_name_key.text = kwargs.pop('gve_name')
        ip = ET.SubElement(ve, "ip")
        ip_anycast_gateway = ET.SubElement(ip, "ip-anycast-gateway", xmlns="urn:brocade.com:mgmt:brocade-anycast-gateway")
        ip_gw_id_key = ET.SubElement(ip_anycast_gateway, "ip-gw-id")
        ip_gw_id_key.text = kwargs.pop('ip_gw_id')
        load_balancing_disable = ET.SubElement(ip_anycast_gateway, "load-balancing-disable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_ve_ip_ip_anycast_gateway_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        ve = ET.SubElement(interface, "ve")
        gve_name_key = ET.SubElement(ve, "gve-name")
        gve_name_key.text = kwargs.pop('gve_name')
        ip = ET.SubElement(ve, "ip")
        ip_anycast_gateway = ET.SubElement(ip, "ip-anycast-gateway", xmlns="urn:brocade.com:mgmt:brocade-anycast-gateway")
        ip_gw_id_key = ET.SubElement(ip_anycast_gateway, "ip-gw-id")
        ip_gw_id_key.text = kwargs.pop('ip_gw_id')
        enable = ET.SubElement(ip_anycast_gateway, "enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_ve_ip_ip_anycast_gateway_description(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        ve = ET.SubElement(interface, "ve")
        gve_name_key = ET.SubElement(ve, "gve-name")
        gve_name_key.text = kwargs.pop('gve_name')
        ip = ET.SubElement(ve, "ip")
        ip_anycast_gateway = ET.SubElement(ip, "ip-anycast-gateway", xmlns="urn:brocade.com:mgmt:brocade-anycast-gateway")
        ip_gw_id_key = ET.SubElement(ip_anycast_gateway, "ip-gw-id")
        ip_gw_id_key.text = kwargs.pop('ip_gw_id')
        description = ET.SubElement(ip_anycast_gateway, "description")
        description.text = kwargs.pop('description')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_ve_ipv6_ipv6_anycast_gateway_ipv6_gw_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        ve = ET.SubElement(interface, "ve")
        gve_name_key = ET.SubElement(ve, "gve-name")
        gve_name_key.text = kwargs.pop('gve_name')
        ipv6 = ET.SubElement(ve, "ipv6")
        ipv6_anycast_gateway = ET.SubElement(ipv6, "ipv6-anycast-gateway", xmlns="urn:brocade.com:mgmt:brocade-anycast-gateway")
        ipv6_gw_id = ET.SubElement(ipv6_anycast_gateway, "ipv6-gw-id")
        ipv6_gw_id.text = kwargs.pop('ipv6_gw_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_ve_ipv6_ipv6_anycast_gateway_ipv6_gateway_address_ipv6_gw_addr(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        ve = ET.SubElement(interface, "ve")
        gve_name_key = ET.SubElement(ve, "gve-name")
        gve_name_key.text = kwargs.pop('gve_name')
        ipv6 = ET.SubElement(ve, "ipv6")
        ipv6_anycast_gateway = ET.SubElement(ipv6, "ipv6-anycast-gateway", xmlns="urn:brocade.com:mgmt:brocade-anycast-gateway")
        ipv6_gw_id_key = ET.SubElement(ipv6_anycast_gateway, "ipv6-gw-id")
        ipv6_gw_id_key.text = kwargs.pop('ipv6_gw_id')
        ipv6_gateway_address = ET.SubElement(ipv6_anycast_gateway, "ipv6-gateway-address")
        ipv6_gw_addr = ET.SubElement(ipv6_gateway_address, "ipv6-gw-addr")
        ipv6_gw_addr.text = kwargs.pop('ipv6_gw_addr')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_ve_ipv6_ipv6_anycast_gateway_gratuitous_arp_gve_timer(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        ve = ET.SubElement(interface, "ve")
        gve_name_key = ET.SubElement(ve, "gve-name")
        gve_name_key.text = kwargs.pop('gve_name')
        ipv6 = ET.SubElement(ve, "ipv6")
        ipv6_anycast_gateway = ET.SubElement(ipv6, "ipv6-anycast-gateway", xmlns="urn:brocade.com:mgmt:brocade-anycast-gateway")
        ipv6_gw_id_key = ET.SubElement(ipv6_anycast_gateway, "ipv6-gw-id")
        ipv6_gw_id_key.text = kwargs.pop('ipv6_gw_id')
        gratuitous_arp = ET.SubElement(ipv6_anycast_gateway, "gratuitous-arp")
        gve_timer = ET.SubElement(gratuitous_arp, "gve-timer")
        gve_timer.text = kwargs.pop('gve_timer')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_ve_ipv6_ipv6_anycast_gateway_hold_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        ve = ET.SubElement(interface, "ve")
        gve_name_key = ET.SubElement(ve, "gve-name")
        gve_name_key.text = kwargs.pop('gve_name')
        ipv6 = ET.SubElement(ve, "ipv6")
        ipv6_anycast_gateway = ET.SubElement(ipv6, "ipv6-anycast-gateway", xmlns="urn:brocade.com:mgmt:brocade-anycast-gateway")
        ipv6_gw_id_key = ET.SubElement(ipv6_anycast_gateway, "ipv6-gw-id")
        ipv6_gw_id_key.text = kwargs.pop('ipv6_gw_id')
        hold_time = ET.SubElement(ipv6_anycast_gateway, "hold-time")
        hold_time.text = kwargs.pop('hold_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_ve_ipv6_ipv6_anycast_gateway_load_balancing_disable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        ve = ET.SubElement(interface, "ve")
        gve_name_key = ET.SubElement(ve, "gve-name")
        gve_name_key.text = kwargs.pop('gve_name')
        ipv6 = ET.SubElement(ve, "ipv6")
        ipv6_anycast_gateway = ET.SubElement(ipv6, "ipv6-anycast-gateway", xmlns="urn:brocade.com:mgmt:brocade-anycast-gateway")
        ipv6_gw_id_key = ET.SubElement(ipv6_anycast_gateway, "ipv6-gw-id")
        ipv6_gw_id_key.text = kwargs.pop('ipv6_gw_id')
        load_balancing_disable = ET.SubElement(ipv6_anycast_gateway, "load-balancing-disable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_ve_ipv6_ipv6_anycast_gateway_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        ve = ET.SubElement(interface, "ve")
        gve_name_key = ET.SubElement(ve, "gve-name")
        gve_name_key.text = kwargs.pop('gve_name')
        ipv6 = ET.SubElement(ve, "ipv6")
        ipv6_anycast_gateway = ET.SubElement(ipv6, "ipv6-anycast-gateway", xmlns="urn:brocade.com:mgmt:brocade-anycast-gateway")
        ipv6_gw_id_key = ET.SubElement(ipv6_anycast_gateway, "ipv6-gw-id")
        ipv6_gw_id_key.text = kwargs.pop('ipv6_gw_id')
        enable = ET.SubElement(ipv6_anycast_gateway, "enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_ve_ipv6_ipv6_anycast_gateway_description(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        ve = ET.SubElement(interface, "ve")
        gve_name_key = ET.SubElement(ve, "gve-name")
        gve_name_key.text = kwargs.pop('gve_name')
        ipv6 = ET.SubElement(ve, "ipv6")
        ipv6_anycast_gateway = ET.SubElement(ipv6, "ipv6-anycast-gateway", xmlns="urn:brocade.com:mgmt:brocade-anycast-gateway")
        ipv6_gw_id_key = ET.SubElement(ipv6_anycast_gateway, "ipv6-gw-id")
        ipv6_gw_id_key.text = kwargs.pop('ipv6_gw_id')
        description = ET.SubElement(ipv6_anycast_gateway, "description")
        description.text = kwargs.pop('description')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_ve_attach_rbridge_id_rb_add(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        ve = ET.SubElement(interface, "ve")
        gve_name_key = ET.SubElement(ve, "gve-name")
        gve_name_key.text = kwargs.pop('gve_name')
        attach = ET.SubElement(ve, "attach", xmlns="urn:brocade.com:mgmt:brocade-anycast-gateway")
        rbridge_id = ET.SubElement(attach, "rbridge-id")
        rb_add = ET.SubElement(rbridge_id, "rb-add")
        rb_add.text = kwargs.pop('rb_add')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_ve_attach_rbridge_id_rb_remove(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        ve = ET.SubElement(interface, "ve")
        gve_name_key = ET.SubElement(ve, "gve-name")
        gve_name_key.text = kwargs.pop('gve_name')
        attach = ET.SubElement(ve, "attach", xmlns="urn:brocade.com:mgmt:brocade-anycast-gateway")
        rbridge_id = ET.SubElement(attach, "rbridge-id")
        rb_remove = ET.SubElement(rbridge_id, "rb-remove")
        rb_remove.text = kwargs.pop('rb_remove')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_edge_loop_detection_pdu_rx_limit(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        edge_loop_detection = ET.SubElement(protocol, "edge-loop-detection", xmlns="urn:brocade.com:mgmt:brocade-eld")
        pdu_rx_limit = ET.SubElement(edge_loop_detection, "pdu-rx-limit")
        pdu_rx_limit.text = kwargs.pop('pdu_rx_limit')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_edge_loop_detection_hello_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        edge_loop_detection = ET.SubElement(protocol, "edge-loop-detection", xmlns="urn:brocade.com:mgmt:brocade-eld")
        hello_interval = ET.SubElement(edge_loop_detection, "hello-interval")
        hello_interval.text = kwargs.pop('hello_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_edge_loop_detection_shutdown_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        edge_loop_detection = ET.SubElement(protocol, "edge-loop-detection", xmlns="urn:brocade.com:mgmt:brocade-eld")
        shutdown_time = ET.SubElement(edge_loop_detection, "shutdown-time")
        shutdown_time.text = kwargs.pop('shutdown_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_edge_loop_detection_mac_refresh_time_config_mac_refresh_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        edge_loop_detection = ET.SubElement(protocol, "edge-loop-detection", xmlns="urn:brocade.com:mgmt:brocade-eld")
        mac_refresh_time_config = ET.SubElement(edge_loop_detection, "mac-refresh-time-config")
        mac_refresh_time = ET.SubElement(mac_refresh_time_config, "mac-refresh-time")
        mac_refresh_time.text = kwargs.pop('mac_refresh_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_edge_loop_detection_mac_refresh_time_config_mac_refresh_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        edge_loop_detection = ET.SubElement(protocol, "edge-loop-detection", xmlns="urn:brocade.com:mgmt:brocade-eld")
        mac_refresh_time_config = ET.SubElement(edge_loop_detection, "mac-refresh-time-config")
        mac_refresh_type = ET.SubElement(mac_refresh_time_config, "mac-refresh-type")
        mac_refresh_type.text = kwargs.pop('mac_refresh_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_lldp_description(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        lldp = ET.SubElement(protocol, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        description = ET.SubElement(lldp, "description")
        description.text = kwargs.pop('description')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_lldp_hello(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        lldp = ET.SubElement(protocol, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        hello = ET.SubElement(lldp, "hello")
        hello.text = kwargs.pop('hello')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_lldp_mode(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        lldp = ET.SubElement(protocol, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        mode = ET.SubElement(lldp, "mode")
        mode.text = kwargs.pop('mode')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_lldp_multiplier(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        lldp = ET.SubElement(protocol, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        multiplier = ET.SubElement(lldp, "multiplier")
        multiplier.text = kwargs.pop('multiplier')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_lldp_advertise_dcbx_fcoe_app_tlv(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        lldp = ET.SubElement(protocol, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        advertise = ET.SubElement(lldp, "advertise")
        dcbx_fcoe_app_tlv = ET.SubElement(advertise, "dcbx-fcoe-app-tlv")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_lldp_advertise_dcbx_fcoe_logical_link_tlv(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        lldp = ET.SubElement(protocol, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        advertise = ET.SubElement(lldp, "advertise")
        dcbx_fcoe_logical_link_tlv = ET.SubElement(advertise, "dcbx-fcoe-logical-link-tlv")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_lldp_advertise_dcbx_iscsi_app_tlv(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        lldp = ET.SubElement(protocol, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        advertise = ET.SubElement(lldp, "advertise")
        dcbx_iscsi_app_tlv = ET.SubElement(advertise, "dcbx-iscsi-app-tlv")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_lldp_advertise_dcbx_tlv(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        lldp = ET.SubElement(protocol, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        advertise = ET.SubElement(lldp, "advertise")
        dcbx_tlv = ET.SubElement(advertise, "dcbx-tlv")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_lldp_advertise_dot1_tlv(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        lldp = ET.SubElement(protocol, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        advertise = ET.SubElement(lldp, "advertise")
        dot1_tlv = ET.SubElement(advertise, "dot1-tlv")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_lldp_advertise_dot3_tlv(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        lldp = ET.SubElement(protocol, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        advertise = ET.SubElement(lldp, "advertise")
        dot3_tlv = ET.SubElement(advertise, "dot3-tlv")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_lldp_advertise_optional_tlv_management_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        lldp = ET.SubElement(protocol, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        advertise = ET.SubElement(lldp, "advertise")
        optional_tlv = ET.SubElement(advertise, "optional-tlv")
        management_address = ET.SubElement(optional_tlv, "management-address")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_lldp_advertise_optional_tlv_port_description(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        lldp = ET.SubElement(protocol, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        advertise = ET.SubElement(lldp, "advertise")
        optional_tlv = ET.SubElement(advertise, "optional-tlv")
        port_description = ET.SubElement(optional_tlv, "port-description")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_lldp_advertise_optional_tlv_system_capabilities(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        lldp = ET.SubElement(protocol, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        advertise = ET.SubElement(lldp, "advertise")
        optional_tlv = ET.SubElement(advertise, "optional-tlv")
        system_capabilities = ET.SubElement(optional_tlv, "system-capabilities")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_lldp_advertise_optional_tlv_adv_tlv_system_description(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        lldp = ET.SubElement(protocol, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        advertise = ET.SubElement(lldp, "advertise")
        optional_tlv = ET.SubElement(advertise, "optional-tlv")
        adv_tlv_system_description = ET.SubElement(optional_tlv, "adv-tlv-system-description")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_lldp_advertise_optional_tlv_adv_tlv_system_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        lldp = ET.SubElement(protocol, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        advertise = ET.SubElement(lldp, "advertise")
        optional_tlv = ET.SubElement(advertise, "optional-tlv")
        adv_tlv_system_name = ET.SubElement(optional_tlv, "adv-tlv-system-name")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_lldp_system_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        lldp = ET.SubElement(protocol, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        system_name = ET.SubElement(lldp, "system-name")
        system_name.text = kwargs.pop('system_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_lldp_system_description(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        lldp = ET.SubElement(protocol, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        system_description = ET.SubElement(lldp, "system-description")
        system_description.text = kwargs.pop('system_description')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_lldp_iscsi_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        lldp = ET.SubElement(protocol, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        iscsi_priority = ET.SubElement(lldp, "iscsi-priority")
        iscsi_priority.text = kwargs.pop('iscsi_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_lldp_disable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        lldp = ET.SubElement(protocol, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        disable = ET.SubElement(lldp, "disable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_lldp_profile_profile_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        lldp = ET.SubElement(protocol, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        profile = ET.SubElement(lldp, "profile")
        profile_name = ET.SubElement(profile, "profile-name")
        profile_name.text = kwargs.pop('profile_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_lldp_profile_description(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        lldp = ET.SubElement(protocol, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        profile = ET.SubElement(lldp, "profile")
        profile_name_key = ET.SubElement(profile, "profile-name")
        profile_name_key.text = kwargs.pop('profile_name')
        description = ET.SubElement(profile, "description")
        description.text = kwargs.pop('description')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_lldp_profile_hello(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        lldp = ET.SubElement(protocol, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        profile = ET.SubElement(lldp, "profile")
        profile_name_key = ET.SubElement(profile, "profile-name")
        profile_name_key.text = kwargs.pop('profile_name')
        hello = ET.SubElement(profile, "hello")
        hello.text = kwargs.pop('hello')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_lldp_profile_mode(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        lldp = ET.SubElement(protocol, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        profile = ET.SubElement(lldp, "profile")
        profile_name_key = ET.SubElement(profile, "profile-name")
        profile_name_key.text = kwargs.pop('profile_name')
        mode = ET.SubElement(profile, "mode")
        mode.text = kwargs.pop('mode')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_lldp_profile_multiplier(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        lldp = ET.SubElement(protocol, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        profile = ET.SubElement(lldp, "profile")
        profile_name_key = ET.SubElement(profile, "profile-name")
        profile_name_key.text = kwargs.pop('profile_name')
        multiplier = ET.SubElement(profile, "multiplier")
        multiplier.text = kwargs.pop('multiplier')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_lldp_profile_advertise_dcbx_fcoe_app_tlv(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        lldp = ET.SubElement(protocol, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        profile = ET.SubElement(lldp, "profile")
        profile_name_key = ET.SubElement(profile, "profile-name")
        profile_name_key.text = kwargs.pop('profile_name')
        advertise = ET.SubElement(profile, "advertise")
        dcbx_fcoe_app_tlv = ET.SubElement(advertise, "dcbx-fcoe-app-tlv")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_lldp_profile_advertise_dcbx_fcoe_logical_link_tlv(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        lldp = ET.SubElement(protocol, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        profile = ET.SubElement(lldp, "profile")
        profile_name_key = ET.SubElement(profile, "profile-name")
        profile_name_key.text = kwargs.pop('profile_name')
        advertise = ET.SubElement(profile, "advertise")
        dcbx_fcoe_logical_link_tlv = ET.SubElement(advertise, "dcbx-fcoe-logical-link-tlv")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_lldp_profile_advertise_dcbx_iscsi_app_tlv(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        lldp = ET.SubElement(protocol, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        profile = ET.SubElement(lldp, "profile")
        profile_name_key = ET.SubElement(profile, "profile-name")
        profile_name_key.text = kwargs.pop('profile_name')
        advertise = ET.SubElement(profile, "advertise")
        dcbx_iscsi_app_tlv = ET.SubElement(advertise, "dcbx-iscsi-app-tlv")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_lldp_profile_advertise_dcbx_tlv(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        lldp = ET.SubElement(protocol, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        profile = ET.SubElement(lldp, "profile")
        profile_name_key = ET.SubElement(profile, "profile-name")
        profile_name_key.text = kwargs.pop('profile_name')
        advertise = ET.SubElement(profile, "advertise")
        dcbx_tlv = ET.SubElement(advertise, "dcbx-tlv")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_lldp_profile_advertise_dot1_tlv(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        lldp = ET.SubElement(protocol, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        profile = ET.SubElement(lldp, "profile")
        profile_name_key = ET.SubElement(profile, "profile-name")
        profile_name_key.text = kwargs.pop('profile_name')
        advertise = ET.SubElement(profile, "advertise")
        dot1_tlv = ET.SubElement(advertise, "dot1-tlv")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_lldp_profile_advertise_dot3_tlv(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        lldp = ET.SubElement(protocol, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        profile = ET.SubElement(lldp, "profile")
        profile_name_key = ET.SubElement(profile, "profile-name")
        profile_name_key.text = kwargs.pop('profile_name')
        advertise = ET.SubElement(profile, "advertise")
        dot3_tlv = ET.SubElement(advertise, "dot3-tlv")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_lldp_profile_advertise_optional_tlv_management_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        lldp = ET.SubElement(protocol, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        profile = ET.SubElement(lldp, "profile")
        profile_name_key = ET.SubElement(profile, "profile-name")
        profile_name_key.text = kwargs.pop('profile_name')
        advertise = ET.SubElement(profile, "advertise")
        optional_tlv = ET.SubElement(advertise, "optional-tlv")
        management_address = ET.SubElement(optional_tlv, "management-address")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_lldp_profile_advertise_optional_tlv_port_description(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        lldp = ET.SubElement(protocol, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        profile = ET.SubElement(lldp, "profile")
        profile_name_key = ET.SubElement(profile, "profile-name")
        profile_name_key.text = kwargs.pop('profile_name')
        advertise = ET.SubElement(profile, "advertise")
        optional_tlv = ET.SubElement(advertise, "optional-tlv")
        port_description = ET.SubElement(optional_tlv, "port-description")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_lldp_profile_advertise_optional_tlv_system_capabilities(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        lldp = ET.SubElement(protocol, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        profile = ET.SubElement(lldp, "profile")
        profile_name_key = ET.SubElement(profile, "profile-name")
        profile_name_key.text = kwargs.pop('profile_name')
        advertise = ET.SubElement(profile, "advertise")
        optional_tlv = ET.SubElement(advertise, "optional-tlv")
        system_capabilities = ET.SubElement(optional_tlv, "system-capabilities")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_lldp_profile_advertise_optional_tlv_adv_tlv_system_description(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        lldp = ET.SubElement(protocol, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        profile = ET.SubElement(lldp, "profile")
        profile_name_key = ET.SubElement(profile, "profile-name")
        profile_name_key.text = kwargs.pop('profile_name')
        advertise = ET.SubElement(profile, "advertise")
        optional_tlv = ET.SubElement(advertise, "optional-tlv")
        adv_tlv_system_description = ET.SubElement(optional_tlv, "adv-tlv-system-description")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_lldp_profile_advertise_optional_tlv_adv_tlv_system_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        lldp = ET.SubElement(protocol, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        profile = ET.SubElement(lldp, "profile")
        profile_name_key = ET.SubElement(profile, "profile-name")
        profile_name_key.text = kwargs.pop('profile_name')
        advertise = ET.SubElement(profile, "advertise")
        optional_tlv = ET.SubElement(advertise, "optional-tlv")
        adv_tlv_system_name = ET.SubElement(optional_tlv, "adv-tlv-system-name")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_udld_hello(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        udld = ET.SubElement(protocol, "udld", xmlns="urn:brocade.com:mgmt:brocade-udld")
        hello = ET.SubElement(udld, "hello")
        hello.text = kwargs.pop('hello')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_udld_multiplier(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        udld = ET.SubElement(protocol, "udld", xmlns="urn:brocade.com:mgmt:brocade-udld")
        multiplier = ET.SubElement(udld, "multiplier")
        multiplier.text = kwargs.pop('multiplier')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_udld_shutdown(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        udld = ET.SubElement(protocol, "udld", xmlns="urn:brocade.com:mgmt:brocade-udld")
        shutdown = ET.SubElement(udld, "shutdown")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_stp_description(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        stp = ET.SubElement(spanning_tree, "stp")
        description = ET.SubElement(stp, "description")
        description.text = kwargs.pop('description')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_stp_bridge_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        stp = ET.SubElement(spanning_tree, "stp")
        bridge_priority = ET.SubElement(stp, "bridge-priority")
        bridge_priority.text = kwargs.pop('bridge_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_stp_error_disable_timeout_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        stp = ET.SubElement(spanning_tree, "stp")
        error_disable_timeout = ET.SubElement(stp, "error-disable-timeout")
        enable = ET.SubElement(error_disable_timeout, "enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_stp_error_disable_timeout_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        stp = ET.SubElement(spanning_tree, "stp")
        error_disable_timeout = ET.SubElement(stp, "error-disable-timeout")
        interval = ET.SubElement(error_disable_timeout, "interval")
        interval.text = kwargs.pop('interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_stp_forward_delay(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        stp = ET.SubElement(spanning_tree, "stp")
        forward_delay = ET.SubElement(stp, "forward-delay")
        forward_delay.text = kwargs.pop('forward_delay')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_stp_max_age(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        stp = ET.SubElement(spanning_tree, "stp")
        max_age = ET.SubElement(stp, "max-age")
        max_age.text = kwargs.pop('max_age')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_stp_port_channel_path_cost(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        stp = ET.SubElement(spanning_tree, "stp")
        port_channel = ET.SubElement(stp, "port-channel")
        path_cost = ET.SubElement(port_channel, "path-cost")
        path_cost.text = kwargs.pop('path_cost')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_stp_shutdown(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        stp = ET.SubElement(spanning_tree, "stp")
        shutdown = ET.SubElement(stp, "shutdown")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_stp_hello_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        stp = ET.SubElement(spanning_tree, "stp")
        hello_time = ET.SubElement(stp, "hello-time")
        hello_time.text = kwargs.pop('hello_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_rstp_description(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        rstp = ET.SubElement(spanning_tree, "rstp")
        description = ET.SubElement(rstp, "description")
        description.text = kwargs.pop('description')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_rstp_bridge_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        rstp = ET.SubElement(spanning_tree, "rstp")
        bridge_priority = ET.SubElement(rstp, "bridge-priority")
        bridge_priority.text = kwargs.pop('bridge_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_rstp_error_disable_timeout_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        rstp = ET.SubElement(spanning_tree, "rstp")
        error_disable_timeout = ET.SubElement(rstp, "error-disable-timeout")
        enable = ET.SubElement(error_disable_timeout, "enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_rstp_error_disable_timeout_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        rstp = ET.SubElement(spanning_tree, "rstp")
        error_disable_timeout = ET.SubElement(rstp, "error-disable-timeout")
        interval = ET.SubElement(error_disable_timeout, "interval")
        interval.text = kwargs.pop('interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_rstp_forward_delay(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        rstp = ET.SubElement(spanning_tree, "rstp")
        forward_delay = ET.SubElement(rstp, "forward-delay")
        forward_delay.text = kwargs.pop('forward_delay')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_rstp_max_age(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        rstp = ET.SubElement(spanning_tree, "rstp")
        max_age = ET.SubElement(rstp, "max-age")
        max_age.text = kwargs.pop('max_age')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_rstp_port_channel_path_cost(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        rstp = ET.SubElement(spanning_tree, "rstp")
        port_channel = ET.SubElement(rstp, "port-channel")
        path_cost = ET.SubElement(port_channel, "path-cost")
        path_cost.text = kwargs.pop('path_cost')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_rstp_shutdown(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        rstp = ET.SubElement(spanning_tree, "rstp")
        shutdown = ET.SubElement(rstp, "shutdown")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_rstp_hello_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        rstp = ET.SubElement(spanning_tree, "rstp")
        hello_time = ET.SubElement(rstp, "hello-time")
        hello_time.text = kwargs.pop('hello_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_rstp_transmit_holdcount(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        rstp = ET.SubElement(spanning_tree, "rstp")
        transmit_holdcount = ET.SubElement(rstp, "transmit-holdcount")
        transmit_holdcount.text = kwargs.pop('transmit_holdcount')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_pvst_description(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        pvst = ET.SubElement(spanning_tree, "pvst")
        description = ET.SubElement(pvst, "description")
        description.text = kwargs.pop('description')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_pvst_bridge_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        pvst = ET.SubElement(spanning_tree, "pvst")
        bridge_priority = ET.SubElement(pvst, "bridge-priority")
        bridge_priority.text = kwargs.pop('bridge_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_pvst_error_disable_timeout_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        pvst = ET.SubElement(spanning_tree, "pvst")
        error_disable_timeout = ET.SubElement(pvst, "error-disable-timeout")
        enable = ET.SubElement(error_disable_timeout, "enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_pvst_error_disable_timeout_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        pvst = ET.SubElement(spanning_tree, "pvst")
        error_disable_timeout = ET.SubElement(pvst, "error-disable-timeout")
        interval = ET.SubElement(error_disable_timeout, "interval")
        interval.text = kwargs.pop('interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_pvst_forward_delay(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        pvst = ET.SubElement(spanning_tree, "pvst")
        forward_delay = ET.SubElement(pvst, "forward-delay")
        forward_delay.text = kwargs.pop('forward_delay')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_pvst_max_age(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        pvst = ET.SubElement(spanning_tree, "pvst")
        max_age = ET.SubElement(pvst, "max-age")
        max_age.text = kwargs.pop('max_age')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_pvst_port_channel_path_cost(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        pvst = ET.SubElement(spanning_tree, "pvst")
        port_channel = ET.SubElement(pvst, "port-channel")
        path_cost = ET.SubElement(port_channel, "path-cost")
        path_cost.text = kwargs.pop('path_cost')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_pvst_shutdown(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        pvst = ET.SubElement(spanning_tree, "pvst")
        shutdown = ET.SubElement(pvst, "shutdown")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_pvst_hello_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        pvst = ET.SubElement(spanning_tree, "pvst")
        hello_time = ET.SubElement(pvst, "hello-time")
        hello_time.text = kwargs.pop('hello_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_pvst_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        pvst = ET.SubElement(spanning_tree, "pvst")
        vlan = ET.SubElement(pvst, "vlan")
        id = ET.SubElement(vlan, "id")
        id.text = kwargs.pop('id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_pvst_vlan_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        pvst = ET.SubElement(spanning_tree, "pvst")
        vlan = ET.SubElement(pvst, "vlan")
        id_key = ET.SubElement(vlan, "id")
        id_key.text = kwargs.pop('id')
        priority = ET.SubElement(vlan, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_pvst_vlan_forward_delay(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        pvst = ET.SubElement(spanning_tree, "pvst")
        vlan = ET.SubElement(pvst, "vlan")
        id_key = ET.SubElement(vlan, "id")
        id_key.text = kwargs.pop('id')
        forward_delay = ET.SubElement(vlan, "forward-delay")
        forward_delay.text = kwargs.pop('forward_delay')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_pvst_vlan_max_age(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        pvst = ET.SubElement(spanning_tree, "pvst")
        vlan = ET.SubElement(pvst, "vlan")
        id_key = ET.SubElement(vlan, "id")
        id_key.text = kwargs.pop('id')
        max_age = ET.SubElement(vlan, "max-age")
        max_age.text = kwargs.pop('max_age')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_pvst_vlan_hello_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        pvst = ET.SubElement(spanning_tree, "pvst")
        vlan = ET.SubElement(pvst, "vlan")
        id_key = ET.SubElement(vlan, "id")
        id_key.text = kwargs.pop('id')
        hello_time = ET.SubElement(vlan, "hello-time")
        hello_time.text = kwargs.pop('hello_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_rpvst_description(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        rpvst = ET.SubElement(spanning_tree, "rpvst")
        description = ET.SubElement(rpvst, "description")
        description.text = kwargs.pop('description')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_rpvst_bridge_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        rpvst = ET.SubElement(spanning_tree, "rpvst")
        bridge_priority = ET.SubElement(rpvst, "bridge-priority")
        bridge_priority.text = kwargs.pop('bridge_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_rpvst_error_disable_timeout_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        rpvst = ET.SubElement(spanning_tree, "rpvst")
        error_disable_timeout = ET.SubElement(rpvst, "error-disable-timeout")
        enable = ET.SubElement(error_disable_timeout, "enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_rpvst_error_disable_timeout_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        rpvst = ET.SubElement(spanning_tree, "rpvst")
        error_disable_timeout = ET.SubElement(rpvst, "error-disable-timeout")
        interval = ET.SubElement(error_disable_timeout, "interval")
        interval.text = kwargs.pop('interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_rpvst_forward_delay(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        rpvst = ET.SubElement(spanning_tree, "rpvst")
        forward_delay = ET.SubElement(rpvst, "forward-delay")
        forward_delay.text = kwargs.pop('forward_delay')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_rpvst_max_age(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        rpvst = ET.SubElement(spanning_tree, "rpvst")
        max_age = ET.SubElement(rpvst, "max-age")
        max_age.text = kwargs.pop('max_age')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_rpvst_port_channel_path_cost(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        rpvst = ET.SubElement(spanning_tree, "rpvst")
        port_channel = ET.SubElement(rpvst, "port-channel")
        path_cost = ET.SubElement(port_channel, "path-cost")
        path_cost.text = kwargs.pop('path_cost')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_rpvst_shutdown(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        rpvst = ET.SubElement(spanning_tree, "rpvst")
        shutdown = ET.SubElement(rpvst, "shutdown")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_rpvst_hello_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        rpvst = ET.SubElement(spanning_tree, "rpvst")
        hello_time = ET.SubElement(rpvst, "hello-time")
        hello_time.text = kwargs.pop('hello_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_rpvst_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        rpvst = ET.SubElement(spanning_tree, "rpvst")
        vlan = ET.SubElement(rpvst, "vlan")
        id = ET.SubElement(vlan, "id")
        id.text = kwargs.pop('id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_rpvst_vlan_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        rpvst = ET.SubElement(spanning_tree, "rpvst")
        vlan = ET.SubElement(rpvst, "vlan")
        id_key = ET.SubElement(vlan, "id")
        id_key.text = kwargs.pop('id')
        priority = ET.SubElement(vlan, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_rpvst_vlan_forward_delay(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        rpvst = ET.SubElement(spanning_tree, "rpvst")
        vlan = ET.SubElement(rpvst, "vlan")
        id_key = ET.SubElement(vlan, "id")
        id_key.text = kwargs.pop('id')
        forward_delay = ET.SubElement(vlan, "forward-delay")
        forward_delay.text = kwargs.pop('forward_delay')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_rpvst_vlan_max_age(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        rpvst = ET.SubElement(spanning_tree, "rpvst")
        vlan = ET.SubElement(rpvst, "vlan")
        id_key = ET.SubElement(vlan, "id")
        id_key.text = kwargs.pop('id')
        max_age = ET.SubElement(vlan, "max-age")
        max_age.text = kwargs.pop('max_age')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_rpvst_vlan_hello_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        rpvst = ET.SubElement(spanning_tree, "rpvst")
        vlan = ET.SubElement(rpvst, "vlan")
        id_key = ET.SubElement(vlan, "id")
        id_key.text = kwargs.pop('id')
        hello_time = ET.SubElement(vlan, "hello-time")
        hello_time.text = kwargs.pop('hello_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_rpvst_transmit_holdcount(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        rpvst = ET.SubElement(spanning_tree, "rpvst")
        transmit_holdcount = ET.SubElement(rpvst, "transmit-holdcount")
        transmit_holdcount.text = kwargs.pop('transmit_holdcount')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_mstp_description(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        mstp = ET.SubElement(spanning_tree, "mstp")
        description = ET.SubElement(mstp, "description")
        description.text = kwargs.pop('description')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_mstp_bridge_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        mstp = ET.SubElement(spanning_tree, "mstp")
        bridge_priority = ET.SubElement(mstp, "bridge-priority")
        bridge_priority.text = kwargs.pop('bridge_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_mstp_error_disable_timeout_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        mstp = ET.SubElement(spanning_tree, "mstp")
        error_disable_timeout = ET.SubElement(mstp, "error-disable-timeout")
        enable = ET.SubElement(error_disable_timeout, "enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_mstp_error_disable_timeout_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        mstp = ET.SubElement(spanning_tree, "mstp")
        error_disable_timeout = ET.SubElement(mstp, "error-disable-timeout")
        interval = ET.SubElement(error_disable_timeout, "interval")
        interval.text = kwargs.pop('interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_mstp_forward_delay(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        mstp = ET.SubElement(spanning_tree, "mstp")
        forward_delay = ET.SubElement(mstp, "forward-delay")
        forward_delay.text = kwargs.pop('forward_delay')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_mstp_max_age(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        mstp = ET.SubElement(spanning_tree, "mstp")
        max_age = ET.SubElement(mstp, "max-age")
        max_age.text = kwargs.pop('max_age')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_mstp_port_channel_path_cost(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        mstp = ET.SubElement(spanning_tree, "mstp")
        port_channel = ET.SubElement(mstp, "port-channel")
        path_cost = ET.SubElement(port_channel, "path-cost")
        path_cost.text = kwargs.pop('path_cost')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_mstp_shutdown(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        mstp = ET.SubElement(spanning_tree, "mstp")
        shutdown = ET.SubElement(mstp, "shutdown")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_mstp_hello_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        mstp = ET.SubElement(spanning_tree, "mstp")
        hello_time = ET.SubElement(mstp, "hello-time")
        hello_time.text = kwargs.pop('hello_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_mstp_cisco_interoperability(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        mstp = ET.SubElement(spanning_tree, "mstp")
        cisco_interoperability = ET.SubElement(mstp, "cisco-interoperability")
        cisco_interoperability.text = kwargs.pop('cisco_interoperability')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_mstp_instance_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        mstp = ET.SubElement(spanning_tree, "mstp")
        instance = ET.SubElement(mstp, "instance")
        id = ET.SubElement(instance, "id")
        id.text = kwargs.pop('id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_mstp_instance_vlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        mstp = ET.SubElement(spanning_tree, "mstp")
        instance = ET.SubElement(mstp, "instance")
        id_key = ET.SubElement(instance, "id")
        id_key.text = kwargs.pop('id')
        vlan = ET.SubElement(instance, "vlan")
        vlan.text = kwargs.pop('vlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_mstp_instance_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        mstp = ET.SubElement(spanning_tree, "mstp")
        instance = ET.SubElement(mstp, "instance")
        id_key = ET.SubElement(instance, "id")
        id_key.text = kwargs.pop('id')
        priority = ET.SubElement(instance, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_mstp_region(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        mstp = ET.SubElement(spanning_tree, "mstp")
        region = ET.SubElement(mstp, "region")
        region.text = kwargs.pop('region')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_mstp_revision(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        mstp = ET.SubElement(spanning_tree, "mstp")
        revision = ET.SubElement(mstp, "revision")
        revision.text = kwargs.pop('revision')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_mstp_max_hops(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        mstp = ET.SubElement(spanning_tree, "mstp")
        max_hops = ET.SubElement(mstp, "max-hops")
        max_hops.text = kwargs.pop('max_hops')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_mstp_transmit_holdcount(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        mstp = ET.SubElement(spanning_tree, "mstp")
        transmit_holdcount = ET.SubElement(mstp, "transmit-holdcount")
        transmit_holdcount.text = kwargs.pop('transmit_holdcount')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def reserved_vlan_reserved_vlan_start(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        reserved_vlan = ET.SubElement(config, "reserved-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        reserved_vlan_start = ET.SubElement(reserved_vlan, "reserved-vlan-start")
        reserved_vlan_start.text = kwargs.pop('reserved_vlan_start')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def reserved_vlan_reserved_vlan_end(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        reserved_vlan = ET.SubElement(config, "reserved-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        reserved_vlan_end = ET.SubElement(reserved_vlan, "reserved-vlan-end")
        reserved_vlan_end.text = kwargs.pop('reserved_vlan_end')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name = ET.SubElement(gigabitethernet, "name")
        name.text = kwargs.pop('name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ifindex(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ifindex = ET.SubElement(gigabitethernet, "ifindex")
        ifindex.text = kwargs.pop('ifindex')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_description(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        description = ET.SubElement(gigabitethernet, "description")
        description.text = kwargs.pop('description')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_shutdown(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        shutdown = ET.SubElement(gigabitethernet, "shutdown")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_channel_group_port_int(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        channel_group = ET.SubElement(gigabitethernet, "channel-group")
        port_int = ET.SubElement(channel_group, "port-int")
        port_int.text = kwargs.pop('port_int')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_channel_group_mode(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        channel_group = ET.SubElement(gigabitethernet, "channel-group")
        mode = ET.SubElement(channel_group, "mode")
        mode.text = kwargs.pop('mode')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_channel_group_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        channel_group = ET.SubElement(gigabitethernet, "channel-group")
        type = ET.SubElement(channel_group, "type")
        type.text = kwargs.pop('type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_mtu(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        mtu = ET.SubElement(gigabitethernet, "mtu")
        mtu.text = kwargs.pop('mtu')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_basic_basic(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport_basic = ET.SubElement(gigabitethernet, "switchport-basic")
        basic = ET.SubElement(switchport_basic, "basic")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_mode_vlan_mode(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        mode = ET.SubElement(switchport, "mode")
        vlan_mode = ET.SubElement(mode, "vlan-mode")
        vlan_mode.text = kwargs.pop('vlan_mode')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_mode_private_vlan_private_vlan_trunk_trunk_basic(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        mode = ET.SubElement(switchport, "mode")
        private_vlan = ET.SubElement(mode, "private-vlan")
        private_vlan_trunk = ET.SubElement(private_vlan, "private-vlan-trunk")
        trunk_basic = ET.SubElement(private_vlan_trunk, "trunk-basic")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_mode_private_vlan_private_vlan_trunk_trunk_promiscuous(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        mode = ET.SubElement(switchport, "mode")
        private_vlan = ET.SubElement(mode, "private-vlan")
        private_vlan_trunk = ET.SubElement(private_vlan, "private-vlan-trunk")
        trunk_promiscuous = ET.SubElement(private_vlan_trunk, "trunk-promiscuous")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_mode_private_vlan_private_vlan_trunk_trunk_host(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        mode = ET.SubElement(switchport, "mode")
        private_vlan = ET.SubElement(mode, "private-vlan")
        private_vlan_trunk = ET.SubElement(private_vlan, "private-vlan-trunk")
        trunk_host = ET.SubElement(private_vlan_trunk, "trunk-host")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_mode_private_vlan_promiscuous(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        mode = ET.SubElement(switchport, "mode")
        private_vlan = ET.SubElement(mode, "private-vlan")
        promiscuous = ET.SubElement(private_vlan, "promiscuous")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_mode_private_vlan_host(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        mode = ET.SubElement(switchport, "mode")
        private_vlan = ET.SubElement(mode, "private-vlan")
        host = ET.SubElement(private_vlan, "host")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_port_security_port_sec_max(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        port_security = ET.SubElement(switchport, "port-security")
        port_sec_max = ET.SubElement(port_security, "port-sec-max")
        port_sec_max.text = kwargs.pop('port_sec_max')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_port_security_port_sec_violation(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        port_security = ET.SubElement(switchport, "port-security")
        port_sec_violation = ET.SubElement(port_security, "port-sec-violation")
        port_sec_violation.text = kwargs.pop('port_sec_violation')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_port_security_port_secutiry_mac_address_mac_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        port_security = ET.SubElement(switchport, "port-security")
        port_secutiry_mac_address = ET.SubElement(port_security, "port-secutiry-mac-address")
        port_sec_vlan_key = ET.SubElement(port_secutiry_mac_address, "port-sec-vlan")
        port_sec_vlan_key.text = kwargs.pop('port_sec_vlan')
        mac_address = ET.SubElement(port_secutiry_mac_address, "mac-address")
        mac_address.text = kwargs.pop('mac_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_port_security_port_secutiry_mac_address_port_sec_vlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        port_security = ET.SubElement(switchport, "port-security")
        port_secutiry_mac_address = ET.SubElement(port_security, "port-secutiry-mac-address")
        mac_address_key = ET.SubElement(port_secutiry_mac_address, "mac-address")
        mac_address_key.text = kwargs.pop('mac_address')
        port_sec_vlan = ET.SubElement(port_secutiry_mac_address, "port-sec-vlan")
        port_sec_vlan.text = kwargs.pop('port_sec_vlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_port_security_sticky_sticky_flag(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        port_security = ET.SubElement(switchport, "port-security")
        sticky = ET.SubElement(port_security, "sticky")
        sticky_flag = ET.SubElement(sticky, "sticky-flag")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_port_security_sticky_port_secutiry_mac_address_mac_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        port_security = ET.SubElement(switchport, "port-security")
        sticky = ET.SubElement(port_security, "sticky")
        port_secutiry_mac_address = ET.SubElement(sticky, "port-secutiry-mac-address")
        port_sec_vlan_key = ET.SubElement(port_secutiry_mac_address, "port-sec-vlan")
        port_sec_vlan_key.text = kwargs.pop('port_sec_vlan')
        mac_address = ET.SubElement(port_secutiry_mac_address, "mac-address")
        mac_address.text = kwargs.pop('mac_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_port_security_sticky_port_secutiry_mac_address_port_sec_vlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        port_security = ET.SubElement(switchport, "port-security")
        sticky = ET.SubElement(port_security, "sticky")
        port_secutiry_mac_address = ET.SubElement(sticky, "port-secutiry-mac-address")
        mac_address_key = ET.SubElement(port_secutiry_mac_address, "mac-address")
        mac_address_key.text = kwargs.pop('mac_address')
        port_sec_vlan = ET.SubElement(port_secutiry_mac_address, "port-sec-vlan")
        port_sec_vlan.text = kwargs.pop('port_sec_vlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_port_security_allowed_ouis_oui(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        port_security = ET.SubElement(switchport, "port-security")
        allowed_ouis = ET.SubElement(port_security, "allowed-ouis")
        oui = ET.SubElement(allowed_ouis, "oui")
        oui.text = kwargs.pop('oui')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_port_security_shutdown_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        port_security = ET.SubElement(switchport, "port-security")
        shutdown_time = ET.SubElement(port_security, "shutdown-time")
        shutdown_time.text = kwargs.pop('shutdown_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_access_accessvlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        access = ET.SubElement(switchport, "access")
        accessvlan = ET.SubElement(access, "accessvlan")
        accessvlan.text = kwargs.pop('accessvlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_access_rspan_access_rspan_access_vlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        access = ET.SubElement(switchport, "access")
        rspan_access = ET.SubElement(access, "rspan-access")
        rspan_access_vlan = ET.SubElement(rspan_access, "rspan-access-vlan")
        rspan_access_vlan.text = kwargs.pop('rspan_access_vlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_access_mac_vlan_classification_access_vlan_access_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        access_mac_vlan_classification = ET.SubElement(switchport, "access-mac-vlan-classification")
        access = ET.SubElement(access_mac_vlan_classification, "access")
        vlan = ET.SubElement(access, "vlan")
        access_mac_address_key = ET.SubElement(vlan, "access-mac-address")
        access_mac_address_key.text = kwargs.pop('access_mac_address')
        access_vlan_id = ET.SubElement(vlan, "access-vlan-id")
        access_vlan_id.text = kwargs.pop('access_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_access_mac_vlan_classification_access_vlan_access_mac_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        access_mac_vlan_classification = ET.SubElement(switchport, "access-mac-vlan-classification")
        access = ET.SubElement(access_mac_vlan_classification, "access")
        vlan = ET.SubElement(access, "vlan")
        access_vlan_id_key = ET.SubElement(vlan, "access-vlan-id")
        access_vlan_id_key.text = kwargs.pop('access_vlan_id')
        access_mac_address = ET.SubElement(vlan, "access-mac-address")
        access_mac_address.text = kwargs.pop('access_mac_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_trunk_private_vlan_classification_private_vlan_trunk_allowed_vlan_add_trunk_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        trunk_private_vlan_classification = ET.SubElement(switchport, "trunk-private-vlan-classification")
        private_vlan = ET.SubElement(trunk_private_vlan_classification, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        add = ET.SubElement(vlan, "add")
        trunk_ctag_id_key = ET.SubElement(add, "trunk-ctag-id")
        trunk_ctag_id_key.text = kwargs.pop('trunk_ctag_id')
        trunk_vlan_id = ET.SubElement(add, "trunk-vlan-id")
        trunk_vlan_id.text = kwargs.pop('trunk_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_trunk_private_vlan_classification_private_vlan_trunk_allowed_vlan_add_trunk_ctag_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        trunk_private_vlan_classification = ET.SubElement(switchport, "trunk-private-vlan-classification")
        private_vlan = ET.SubElement(trunk_private_vlan_classification, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        add = ET.SubElement(vlan, "add")
        trunk_vlan_id_key = ET.SubElement(add, "trunk-vlan-id")
        trunk_vlan_id_key.text = kwargs.pop('trunk_vlan_id')
        trunk_ctag_id = ET.SubElement(add, "trunk-ctag-id")
        trunk_ctag_id.text = kwargs.pop('trunk_ctag_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_trunk_private_vlan_classification_private_vlan_trunk_allowed_vlan_remove_trunk_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        trunk_private_vlan_classification = ET.SubElement(switchport, "trunk-private-vlan-classification")
        private_vlan = ET.SubElement(trunk_private_vlan_classification, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        remove = ET.SubElement(vlan, "remove")
        trunk_ctag_id_key = ET.SubElement(remove, "trunk-ctag-id")
        trunk_ctag_id_key.text = kwargs.pop('trunk_ctag_id')
        trunk_vlan_id = ET.SubElement(remove, "trunk-vlan-id")
        trunk_vlan_id.text = kwargs.pop('trunk_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_trunk_private_vlan_classification_private_vlan_trunk_allowed_vlan_remove_trunk_ctag_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        trunk_private_vlan_classification = ET.SubElement(switchport, "trunk-private-vlan-classification")
        private_vlan = ET.SubElement(trunk_private_vlan_classification, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        remove = ET.SubElement(vlan, "remove")
        trunk_vlan_id_key = ET.SubElement(remove, "trunk-vlan-id")
        trunk_vlan_id_key.text = kwargs.pop('trunk_vlan_id')
        trunk_ctag_id = ET.SubElement(remove, "trunk-ctag-id")
        trunk_ctag_id.text = kwargs.pop('trunk_ctag_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_access_mac_group_vlan_classification_access_vlan_access_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        access_mac_group_vlan_classification = ET.SubElement(switchport, "access-mac-group-vlan-classification")
        access = ET.SubElement(access_mac_group_vlan_classification, "access")
        vlan = ET.SubElement(access, "vlan")
        access_mac_group_key = ET.SubElement(vlan, "access-mac-group")
        access_mac_group_key.text = kwargs.pop('access_mac_group')
        access_vlan_id = ET.SubElement(vlan, "access-vlan-id")
        access_vlan_id.text = kwargs.pop('access_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_access_mac_group_vlan_classification_access_vlan_access_mac_group(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        access_mac_group_vlan_classification = ET.SubElement(switchport, "access-mac-group-vlan-classification")
        access = ET.SubElement(access_mac_group_vlan_classification, "access")
        vlan = ET.SubElement(access, "vlan")
        access_vlan_id_key = ET.SubElement(vlan, "access-vlan-id")
        access_vlan_id_key.text = kwargs.pop('access_vlan_id')
        access_mac_group = ET.SubElement(vlan, "access-mac-group")
        access_mac_group.text = kwargs.pop('access_mac_group')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_trunk_allowed_vlan_all(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        all = ET.SubElement(vlan, "all")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_trunk_allowed_vlan_none(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        none = ET.SubElement(vlan, "none")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_trunk_allowed_vlan_add(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        add = ET.SubElement(vlan, "add")
        add.text = kwargs.pop('add')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_trunk_allowed_vlan_excpt(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        excpt = ET.SubElement(vlan, "except")
        excpt.text = kwargs.pop('excpt')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_trunk_allowed_vlan_remove(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        remove = ET.SubElement(vlan, "remove")
        remove.text = kwargs.pop('remove')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_trunk_allowed_vlanoper_vlan_add(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlanoper = ET.SubElement(allowed, "vlanoper")
        vlan = ET.SubElement(vlanoper, "vlan")
        add = ET.SubElement(vlan, "add")
        add.text = kwargs.pop('add')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_trunk_allowed_vlanoper_vlan_remove(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlanoper = ET.SubElement(allowed, "vlanoper")
        vlan = ET.SubElement(vlanoper, "vlan")
        remove = ET.SubElement(vlan, "remove")
        remove.text = kwargs.pop('remove')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_trunk_allowed_rspan_vlan_add_rspan_trunk_vlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        rspan_vlan = ET.SubElement(allowed, "rspan-vlan")
        add_rspan_trunk_vlan = ET.SubElement(rspan_vlan, "add-rspan-trunk-vlan")
        add_rspan_trunk_vlan.text = kwargs.pop('add_rspan_trunk_vlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_trunk_allowed_rspan_vlan_remove_rspan_trunk_vlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        rspan_vlan = ET.SubElement(allowed, "rspan-vlan")
        remove_rspan_trunk_vlan = ET.SubElement(rspan_vlan, "remove-rspan-trunk-vlan")
        remove_rspan_trunk_vlan.text = kwargs.pop('remove_rspan_trunk_vlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_trunk_allowed_trunk_rspan_vlan_classification_rspan_vlan_add_trunk_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        trunk_rspan_vlan_classification = ET.SubElement(allowed, "trunk-rspan-vlan-classification")
        rspan_vlan = ET.SubElement(trunk_rspan_vlan_classification, "rspan-vlan")
        add = ET.SubElement(rspan_vlan, "add")
        trunk_ctag_id_key = ET.SubElement(add, "trunk-ctag-id")
        trunk_ctag_id_key.text = kwargs.pop('trunk_ctag_id')
        trunk_vlan_id = ET.SubElement(add, "trunk-vlan-id")
        trunk_vlan_id.text = kwargs.pop('trunk_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_trunk_allowed_trunk_rspan_vlan_classification_rspan_vlan_add_trunk_ctag_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        trunk_rspan_vlan_classification = ET.SubElement(allowed, "trunk-rspan-vlan-classification")
        rspan_vlan = ET.SubElement(trunk_rspan_vlan_classification, "rspan-vlan")
        add = ET.SubElement(rspan_vlan, "add")
        trunk_vlan_id_key = ET.SubElement(add, "trunk-vlan-id")
        trunk_vlan_id_key.text = kwargs.pop('trunk_vlan_id')
        trunk_ctag_id = ET.SubElement(add, "trunk-ctag-id")
        trunk_ctag_id.text = kwargs.pop('trunk_ctag_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_trunk_allowed_trunk_rspan_vlan_classification_rspan_vlan_remove_trunk_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        trunk_rspan_vlan_classification = ET.SubElement(allowed, "trunk-rspan-vlan-classification")
        rspan_vlan = ET.SubElement(trunk_rspan_vlan_classification, "rspan-vlan")
        remove = ET.SubElement(rspan_vlan, "remove")
        trunk_ctag_id_key = ET.SubElement(remove, "trunk-ctag-id")
        trunk_ctag_id_key.text = kwargs.pop('trunk_ctag_id')
        trunk_vlan_id = ET.SubElement(remove, "trunk-vlan-id")
        trunk_vlan_id.text = kwargs.pop('trunk_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_trunk_allowed_trunk_rspan_vlan_classification_rspan_vlan_remove_trunk_ctag_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        trunk_rspan_vlan_classification = ET.SubElement(allowed, "trunk-rspan-vlan-classification")
        rspan_vlan = ET.SubElement(trunk_rspan_vlan_classification, "rspan-vlan")
        remove = ET.SubElement(rspan_vlan, "remove")
        trunk_vlan_id_key = ET.SubElement(remove, "trunk-vlan-id")
        trunk_vlan_id_key.text = kwargs.pop('trunk_vlan_id')
        trunk_ctag_id = ET.SubElement(remove, "trunk-ctag-id")
        trunk_ctag_id.text = kwargs.pop('trunk_ctag_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_trunk_trunk_vlan_classification_allowed_vlan_add_trunk_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        trunk_vlan_classification = ET.SubElement(trunk, "trunk-vlan-classification")
        allowed = ET.SubElement(trunk_vlan_classification, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        add = ET.SubElement(vlan, "add")
        trunk_vlan_id = ET.SubElement(add, "trunk-vlan-id")
        trunk_vlan_id.text = kwargs.pop('trunk_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_trunk_trunk_vlan_classification_allowed_vlan_add_trunk_ctag_range(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        trunk_vlan_classification = ET.SubElement(trunk, "trunk-vlan-classification")
        allowed = ET.SubElement(trunk_vlan_classification, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        add = ET.SubElement(vlan, "add")
        trunk_vlan_id_key = ET.SubElement(add, "trunk-vlan-id")
        trunk_vlan_id_key.text = kwargs.pop('trunk_vlan_id')
        trunk_ctag_range = ET.SubElement(add, "trunk-ctag-range")
        trunk_ctag_range.text = kwargs.pop('trunk_ctag_range')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_trunk_trunk_vlan_classification_allowed_vlan_remove_trunk_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        trunk_vlan_classification = ET.SubElement(trunk, "trunk-vlan-classification")
        allowed = ET.SubElement(trunk_vlan_classification, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        remove = ET.SubElement(vlan, "remove")
        trunk_vlan_id = ET.SubElement(remove, "trunk-vlan-id")
        trunk_vlan_id.text = kwargs.pop('trunk_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_trunk_trunk_vlan_classification_allowed_vlan_remove_trunk_ctag_range(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        trunk_vlan_classification = ET.SubElement(trunk, "trunk-vlan-classification")
        allowed = ET.SubElement(trunk_vlan_classification, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        remove = ET.SubElement(vlan, "remove")
        trunk_vlan_id_key = ET.SubElement(remove, "trunk-vlan-id")
        trunk_vlan_id_key.text = kwargs.pop('trunk_vlan_id')
        trunk_ctag_range = ET.SubElement(remove, "trunk-ctag-range")
        trunk_ctag_range.text = kwargs.pop('trunk_ctag_range')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_trunk_default_vlan_config_default_transparent_vlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        default_vlan_config = ET.SubElement(trunk, "default-vlan-config")
        default_transparent_vlan = ET.SubElement(default_vlan_config, "default-transparent-vlan")
        default_transparent_vlan.text = kwargs.pop('default_transparent_vlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_trunk_tag_native_vlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        tag = ET.SubElement(trunk, "tag")
        native_vlan = ET.SubElement(tag, "native-vlan")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_trunk_native_vlan_classification_native_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        native_vlan_classification = ET.SubElement(trunk, "native-vlan-classification")
        native_vlan_id = ET.SubElement(native_vlan_classification, "native-vlan-id")
        native_vlan_id.text = kwargs.pop('native_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_trunk_native_vlan_classification_native_vlan_ctag_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        native_vlan_classification = ET.SubElement(trunk, "native-vlan-classification")
        native_vlan_ctag_id = ET.SubElement(native_vlan_classification, "native-vlan-ctag-id")
        native_vlan_ctag_id.text = kwargs.pop('native_vlan_ctag_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_trunk_native_vlan_xtagged_config_native_vlan_id_xtagged(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        native_vlan_xtagged_config = ET.SubElement(trunk, "native-vlan-xtagged-config")
        native_vlan_id_xtagged = ET.SubElement(native_vlan_xtagged_config, "native-vlan-id-xtagged")
        native_vlan_id_xtagged.text = kwargs.pop('native_vlan_id_xtagged')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_trunk_native_vlan_xtagged_config_native_vlan_ctag_id_xtagged(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        native_vlan_xtagged_config = ET.SubElement(trunk, "native-vlan-xtagged-config")
        native_vlan_ctag_id_xtagged = ET.SubElement(native_vlan_xtagged_config, "native-vlan-ctag-id-xtagged")
        native_vlan_ctag_id_xtagged.text = kwargs.pop('native_vlan_ctag_id_xtagged')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_trunk_native_vlan_xtagged_config_native_vlan_egress_type_xtagged(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        native_vlan_xtagged_config = ET.SubElement(trunk, "native-vlan-xtagged-config")
        native_vlan_egress_type_xtagged = ET.SubElement(native_vlan_xtagged_config, "native-vlan-egress-type-xtagged")
        native_vlan_egress_type_xtagged.text = kwargs.pop('native_vlan_egress_type_xtagged')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_trunk_native_vlan_untagged_config_native_vlan_id_untagged(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        native_vlan_untagged_config = ET.SubElement(trunk, "native-vlan-untagged-config")
        native_vlan_id_untagged = ET.SubElement(native_vlan_untagged_config, "native-vlan-id-untagged")
        native_vlan_id_untagged.text = kwargs.pop('native_vlan_id_untagged')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_private_vlan_trunk_pvlan_tag_pvlan_tag_native_vlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        pvlan_tag = ET.SubElement(trunk, "pvlan-tag")
        pvlan_tag_native_vlan = ET.SubElement(pvlan_tag, "pvlan-tag-native-vlan")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_private_vlan_trunk_native_pvlanNativevlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        native = ET.SubElement(trunk, "native")
        pvlanNativevlan = ET.SubElement(native, "pvlanNativevlan")
        pvlanNativevlan.text = kwargs.pop('pvlanNativevlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_private_vlan_trunk_native_pvlan_native_vlan_ctag_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        native = ET.SubElement(trunk, "native")
        pvlan_native_vlan_ctag_id = ET.SubElement(native, "pvlan-native-vlan-ctag-id")
        pvlan_native_vlan_ctag_id.text = kwargs.pop('pvlan_native_vlan_ctag_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_private_vlan_trunk_allowed_vlan_pvlan_all(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        pvlan_all = ET.SubElement(vlan, "pvlan_all")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_private_vlan_trunk_allowed_vlan_pvlan_none(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        pvlan_none = ET.SubElement(vlan, "pvlan_none")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_private_vlan_trunk_allowed_vlan_pvlan_add(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        pvlan_add = ET.SubElement(vlan, "pvlan_add")
        pvlan_add.text = kwargs.pop('pvlan_add')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_private_vlan_trunk_allowed_vlan_pvlan_except(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        pvlan_except = ET.SubElement(vlan, "pvlan_except")
        pvlan_except.text = kwargs.pop('pvlan_except')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_private_vlan_trunk_allowed_vlan_pvlan_remove(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        pvlan_remove = ET.SubElement(vlan, "pvlan_remove")
        pvlan_remove.text = kwargs.pop('pvlan_remove')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_private_vlan_host_association_host_pri_pvlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        host_association = ET.SubElement(private_vlan, "host-association")
        host_pri_pvlan = ET.SubElement(host_association, "host-pri-pvlan")
        host_pri_pvlan.text = kwargs.pop('host_pri_pvlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_private_vlan_host_association_host_sec_pvlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        host_association = ET.SubElement(private_vlan, "host-association")
        host_sec_pvlan = ET.SubElement(host_association, "host-sec-pvlan")
        host_sec_pvlan.text = kwargs.pop('host_sec_pvlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_private_vlan_association_trunk_trunk_pri_pvlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        association = ET.SubElement(private_vlan, "association")
        trunk = ET.SubElement(association, "trunk")
        trunk_sec_pvlan_key = ET.SubElement(trunk, "trunk-sec-pvlan")
        trunk_sec_pvlan_key.text = kwargs.pop('trunk_sec_pvlan')
        trunk_pri_pvlan = ET.SubElement(trunk, "trunk-pri-pvlan")
        trunk_pri_pvlan.text = kwargs.pop('trunk_pri_pvlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_private_vlan_association_trunk_trunk_sec_pvlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        association = ET.SubElement(private_vlan, "association")
        trunk = ET.SubElement(association, "trunk")
        trunk_pri_pvlan_key = ET.SubElement(trunk, "trunk-pri-pvlan")
        trunk_pri_pvlan_key.text = kwargs.pop('trunk_pri_pvlan')
        trunk_sec_pvlan = ET.SubElement(trunk, "trunk-sec-pvlan")
        trunk_sec_pvlan.text = kwargs.pop('trunk_sec_pvlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_private_vlan_mapping_promis_pri_pvlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        mapping = ET.SubElement(private_vlan, "mapping")
        promis_pri_pvlan = ET.SubElement(mapping, "promis-pri-pvlan")
        promis_pri_pvlan.text = kwargs.pop('promis_pri_pvlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_private_vlan_mapping_oper(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        mapping = ET.SubElement(private_vlan, "mapping")
        promis_pri_pvlan_key = ET.SubElement(mapping, "promis-pri-pvlan")
        promis_pri_pvlan_key.text = kwargs.pop('promis_pri_pvlan')
        oper = ET.SubElement(mapping, "oper")
        oper.text = kwargs.pop('oper')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_private_vlan_mapping_promis_sec_pvlan_range(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        mapping = ET.SubElement(private_vlan, "mapping")
        promis_pri_pvlan_key = ET.SubElement(mapping, "promis-pri-pvlan")
        promis_pri_pvlan_key.text = kwargs.pop('promis_pri_pvlan')
        promis_sec_pvlan_range = ET.SubElement(mapping, "promis-sec-pvlan-range")
        promis_sec_pvlan_range.text = kwargs.pop('promis_sec_pvlan_range')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_access_mac_rspan_vlan_classification_access_vlan_access_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        access_mac_rspan_vlan_classification = ET.SubElement(switchport, "access-mac-rspan-vlan-classification")
        access = ET.SubElement(access_mac_rspan_vlan_classification, "access")
        vlan = ET.SubElement(access, "vlan")
        access_mac_address_key = ET.SubElement(vlan, "access-mac-address")
        access_mac_address_key.text = kwargs.pop('access_mac_address')
        access_vlan_id = ET.SubElement(vlan, "access-vlan-id")
        access_vlan_id.text = kwargs.pop('access_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_access_mac_rspan_vlan_classification_access_vlan_access_mac_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        access_mac_rspan_vlan_classification = ET.SubElement(switchport, "access-mac-rspan-vlan-classification")
        access = ET.SubElement(access_mac_rspan_vlan_classification, "access")
        vlan = ET.SubElement(access, "vlan")
        access_vlan_id_key = ET.SubElement(vlan, "access-vlan-id")
        access_vlan_id_key.text = kwargs.pop('access_vlan_id')
        access_mac_address = ET.SubElement(vlan, "access-mac-address")
        access_mac_address.text = kwargs.pop('access_mac_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_access_mac_group_rspan_vlan_classification_access_vlan_access_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        access_mac_group_rspan_vlan_classification = ET.SubElement(switchport, "access-mac-group-rspan-vlan-classification")
        access = ET.SubElement(access_mac_group_rspan_vlan_classification, "access")
        vlan = ET.SubElement(access, "vlan")
        access_mac_group_key = ET.SubElement(vlan, "access-mac-group")
        access_mac_group_key.text = kwargs.pop('access_mac_group')
        access_vlan_id = ET.SubElement(vlan, "access-vlan-id")
        access_vlan_id.text = kwargs.pop('access_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_switchport_access_mac_group_rspan_vlan_classification_access_vlan_access_mac_group(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(gigabitethernet, "switchport")
        access_mac_group_rspan_vlan_classification = ET.SubElement(switchport, "access-mac-group-rspan-vlan-classification")
        access = ET.SubElement(access_mac_group_rspan_vlan_classification, "access")
        vlan = ET.SubElement(access, "vlan")
        access_vlan_id_key = ET.SubElement(vlan, "access-vlan-id")
        access_vlan_id_key.text = kwargs.pop('access_vlan_id')
        access_mac_group = ET.SubElement(vlan, "access-mac-group")
        access_mac_group.text = kwargs.pop('access_mac_group')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_mac_learning_mac_learn_disable_vlan_mac_learning_vlan_add(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        mac_learning = ET.SubElement(gigabitethernet, "mac-learning")
        mac_learn_disable = ET.SubElement(mac_learning, "mac-learn-disable")
        vlan = ET.SubElement(mac_learn_disable, "vlan")
        mac_learning_vlan_add = ET.SubElement(vlan, "mac-learning-vlan-add")
        mac_learning_vlan_add.text = kwargs.pop('mac_learning_vlan_add')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_mac_learning_mac_learn_disable_vlan_mac_learning_vlan_remove(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        mac_learning = ET.SubElement(gigabitethernet, "mac-learning")
        mac_learn_disable = ET.SubElement(mac_learning, "mac-learn-disable")
        vlan = ET.SubElement(mac_learn_disable, "vlan")
        mac_learning_vlan_remove = ET.SubElement(vlan, "mac-learning-vlan-remove")
        mac_learning_vlan_remove.text = kwargs.pop('mac_learning_vlan_remove')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_ip_config_mtu(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        ip_config = ET.SubElement(ip, "ip-config", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        mtu = ET.SubElement(ip_config, "mtu")
        mtu.text = kwargs.pop('mtu')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_ip_config_directed_broadcast(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        ip_config = ET.SubElement(ip, "ip-config", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        directed_broadcast = ET.SubElement(ip_config, "directed-broadcast")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_ip_config_proxy_arp(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        ip_config = ET.SubElement(ip, "ip-config", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        proxy_arp = ET.SubElement(ip_config, "proxy-arp")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_ip_config_arp_aging_timeout(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        ip_config = ET.SubElement(ip, "ip-config", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        arp_aging_timeout = ET.SubElement(ip_config, "arp-aging-timeout")
        arp_aging_timeout.text = kwargs.pop('arp_aging_timeout')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_ip_config_address_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        ip_config = ET.SubElement(ip, "ip-config", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        address = ET.SubElement(ip_config, "address")
        address = ET.SubElement(address, "address")
        address.text = kwargs.pop('address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_ip_config_address_secondary(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        ip_config = ET.SubElement(ip, "ip-config", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        address = ET.SubElement(ip_config, "address")
        address_key = ET.SubElement(address, "address")
        address_key.text = kwargs.pop('address')
        secondary = ET.SubElement(address, "secondary")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_ip_config_address_ospf_passive(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        ip_config = ET.SubElement(ip, "ip-config", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        address = ET.SubElement(ip_config, "address")
        address_key = ET.SubElement(address, "address")
        address_key.text = kwargs.pop('address')
        ospf_passive = ET.SubElement(address, "ospf-passive")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_ip_config_address_ospf_ignore(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        ip_config = ET.SubElement(ip, "ip-config", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        address = ET.SubElement(ip_config, "address")
        address_key = ET.SubElement(address, "address")
        address_key.text = kwargs.pop('address')
        ospf_ignore = ET.SubElement(address, "ospf-ignore")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_arp_node_config_arp_inspection_trust(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        arp_node_config = ET.SubElement(ip, "arp-node-config", xmlns="urn:brocade.com:mgmt:brocade-dai")
        arp = ET.SubElement(arp_node_config, "arp")
        inspection = ET.SubElement(arp, "inspection")
        trust = ET.SubElement(inspection, "trust")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_interface_gi_dhcp_conf_dhcp_relay_servers_relay_ip_addr(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        interface_gi_dhcp_conf = ET.SubElement(ip, "interface-gi-dhcp-conf", xmlns="urn:brocade.com:mgmt:brocade-dhcp")
        dhcp = ET.SubElement(interface_gi_dhcp_conf, "dhcp")
        relay = ET.SubElement(dhcp, "relay")
        servers = ET.SubElement(relay, "servers")
        server_vrf_name_key = ET.SubElement(servers, "server-vrf-name")
        server_vrf_name_key.text = kwargs.pop('server_vrf_name')
        relay_ip_addr = ET.SubElement(servers, "relay-ip-addr")
        relay_ip_addr.text = kwargs.pop('relay_ip_addr')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_interface_gi_dhcp_conf_dhcp_relay_servers_server_vrf_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        interface_gi_dhcp_conf = ET.SubElement(ip, "interface-gi-dhcp-conf", xmlns="urn:brocade.com:mgmt:brocade-dhcp")
        dhcp = ET.SubElement(interface_gi_dhcp_conf, "dhcp")
        relay = ET.SubElement(dhcp, "relay")
        servers = ET.SubElement(relay, "servers")
        relay_ip_addr_key = ET.SubElement(servers, "relay-ip-addr")
        relay_ip_addr_key.text = kwargs.pop('relay_ip_addr')
        server_vrf_name = ET.SubElement(servers, "server-vrf-name")
        server_vrf_name.text = kwargs.pop('server_vrf_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_interface_gi_dhcp_conf_dhcp_relay_gateway(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        interface_gi_dhcp_conf = ET.SubElement(ip, "interface-gi-dhcp-conf", xmlns="urn:brocade.com:mgmt:brocade-dhcp")
        dhcp = ET.SubElement(interface_gi_dhcp_conf, "dhcp")
        relay = ET.SubElement(dhcp, "relay")
        gateway = ET.SubElement(relay, "gateway")
        gateway.text = kwargs.pop('gateway')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_icmp_echo_reply(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        icmp = ET.SubElement(ip, "icmp", xmlns="urn:brocade.com:mgmt:brocade-icmp")
        echo_reply = ET.SubElement(icmp, "echo-reply")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_icmp_rate_limiting(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        icmp = ET.SubElement(ip, "icmp", xmlns="urn:brocade.com:mgmt:brocade-icmp")
        rate_limiting = ET.SubElement(icmp, "rate-limiting")
        rate_limiting.text = kwargs.pop('rate_limiting')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_icmp_unreachable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        icmp = ET.SubElement(ip, "icmp", xmlns="urn:brocade.com:mgmt:brocade-icmp")
        unreachable = ET.SubElement(icmp, "unreachable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_icmp_redirect(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        icmp = ET.SubElement(ip, "icmp", xmlns="urn:brocade.com:mgmt:brocade-icmp")
        redirect = ET.SubElement(icmp, "redirect")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_icmp_address_mask(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        icmp = ET.SubElement(ip, "icmp", xmlns="urn:brocade.com:mgmt:brocade-icmp")
        address_mask = ET.SubElement(icmp, "address-mask")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_igmp_phy_intf_cfg_igmp_last_member_query_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        igmp_phy_intf_cfg = ET.SubElement(ip, "igmp-phy-intf-cfg", xmlns="urn:brocade.com:mgmt:brocade-igmp")
        igmp = ET.SubElement(igmp_phy_intf_cfg, "igmp")
        last_member_query_interval = ET.SubElement(igmp, "last-member-query-interval")
        last_member_query_interval.text = kwargs.pop('last_member_query_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_igmp_phy_intf_cfg_igmp_query_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        igmp_phy_intf_cfg = ET.SubElement(ip, "igmp-phy-intf-cfg", xmlns="urn:brocade.com:mgmt:brocade-igmp")
        igmp = ET.SubElement(igmp_phy_intf_cfg, "igmp")
        query_interval = ET.SubElement(igmp, "query-interval")
        query_interval.text = kwargs.pop('query_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_igmp_phy_intf_cfg_igmp_query_max_response_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        igmp_phy_intf_cfg = ET.SubElement(ip, "igmp-phy-intf-cfg", xmlns="urn:brocade.com:mgmt:brocade-igmp")
        igmp = ET.SubElement(igmp_phy_intf_cfg, "igmp")
        query_max_response_time = ET.SubElement(igmp, "query-max-response-time")
        query_max_response_time.text = kwargs.pop('query_max_response_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_igmp_phy_intf_cfg_igmp_immediate_leave(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        igmp_phy_intf_cfg = ET.SubElement(ip, "igmp-phy-intf-cfg", xmlns="urn:brocade.com:mgmt:brocade-igmp")
        igmp = ET.SubElement(igmp_phy_intf_cfg, "igmp")
        immediate_leave = ET.SubElement(igmp, "immediate-leave")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_igmp_phy_intf_cfg_igmp_static_group_sg_addr(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        igmp_phy_intf_cfg = ET.SubElement(ip, "igmp-phy-intf-cfg", xmlns="urn:brocade.com:mgmt:brocade-igmp")
        igmp = ET.SubElement(igmp_phy_intf_cfg, "igmp")
        static_group = ET.SubElement(igmp, "static-group")
        sg_addr = ET.SubElement(static_group, "sg-addr")
        sg_addr.text = kwargs.pop('sg_addr')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_interface_gi_ospf_conf_ospf1_area(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        interface_gi_ospf_conf = ET.SubElement(ip, "interface-gi-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_gi_ospf_conf, "ospf1")
        area = ET.SubElement(ospf1, "area")
        area.text = kwargs.pop('area')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_interface_gi_ospf_conf_ospf1_auth_change_wait_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        interface_gi_ospf_conf = ET.SubElement(ip, "interface-gi-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_gi_ospf_conf, "ospf1")
        auth_change_wait_time = ET.SubElement(ospf1, "auth-change-wait-time")
        auth_change_wait_time.text = kwargs.pop('auth_change_wait_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_interface_gi_ospf_conf_ospf1_authentication_key_no_encrypt_auth_key_table_no_encrypt_auth_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        interface_gi_ospf_conf = ET.SubElement(ip, "interface-gi-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_gi_ospf_conf, "ospf1")
        authentication_key = ET.SubElement(ospf1, "authentication-key")
        no_encrypt_auth_key_table = ET.SubElement(authentication_key, "no-encrypt-auth-key-table")
        no_encrypt_auth_key = ET.SubElement(no_encrypt_auth_key_table, "no-encrypt-auth-key")
        no_encrypt_auth_key.text = kwargs.pop('no_encrypt_auth_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_interface_gi_ospf_conf_ospf1_authentication_key_auth_key_table_encrypttype(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        interface_gi_ospf_conf = ET.SubElement(ip, "interface-gi-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_gi_ospf_conf, "ospf1")
        authentication_key = ET.SubElement(ospf1, "authentication-key")
        auth_key_table = ET.SubElement(authentication_key, "auth-key-table")
        encrypttype = ET.SubElement(auth_key_table, "encrypttype")
        encrypttype.text = kwargs.pop('encrypttype')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_interface_gi_ospf_conf_ospf1_authentication_key_auth_key_table_auth_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        interface_gi_ospf_conf = ET.SubElement(ip, "interface-gi-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_gi_ospf_conf, "ospf1")
        authentication_key = ET.SubElement(ospf1, "authentication-key")
        auth_key_table = ET.SubElement(authentication_key, "auth-key-table")
        auth_key = ET.SubElement(auth_key_table, "auth-key")
        auth_key.text = kwargs.pop('auth_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_interface_gi_ospf_conf_ospf1_dead_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        interface_gi_ospf_conf = ET.SubElement(ip, "interface-gi-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_gi_ospf_conf, "ospf1")
        dead_interval = ET.SubElement(ospf1, "dead-interval")
        dead_interval.text = kwargs.pop('dead_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_interface_gi_ospf_conf_ospf1_hello_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        interface_gi_ospf_conf = ET.SubElement(ip, "interface-gi-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_gi_ospf_conf, "ospf1")
        hello_interval = ET.SubElement(ospf1, "hello-interval")
        hello_interval.text = kwargs.pop('hello_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_interface_gi_ospf_conf_ospf1_retransmit_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        interface_gi_ospf_conf = ET.SubElement(ip, "interface-gi-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_gi_ospf_conf, "ospf1")
        retransmit_interval = ET.SubElement(ospf1, "retransmit-interval")
        retransmit_interval.text = kwargs.pop('retransmit_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_interface_gi_ospf_conf_ospf1_transmit_delay(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        interface_gi_ospf_conf = ET.SubElement(ip, "interface-gi-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_gi_ospf_conf, "ospf1")
        transmit_delay = ET.SubElement(ospf1, "transmit-delay")
        transmit_delay.text = kwargs.pop('transmit_delay')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_interface_gi_ospf_conf_ospf1_md5_authentication_key_activation_wait_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        interface_gi_ospf_conf = ET.SubElement(ip, "interface-gi-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_gi_ospf_conf, "ospf1")
        md5_authentication = ET.SubElement(ospf1, "md5-authentication")
        key_activation_wait_time = ET.SubElement(md5_authentication, "key-activation-wait-time")
        key_activation_wait_time.text = kwargs.pop('key_activation_wait_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_interface_gi_ospf_conf_ospf1_md5_authentication_no_encrypt_key_table_no_encrypt_key_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        interface_gi_ospf_conf = ET.SubElement(ip, "interface-gi-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_gi_ospf_conf, "ospf1")
        md5_authentication = ET.SubElement(ospf1, "md5-authentication")
        no_encrypt_key_table = ET.SubElement(md5_authentication, "no-encrypt-key-table")
        no_encrypt_key_id = ET.SubElement(no_encrypt_key_table, "no-encrypt-key-id")
        no_encrypt_key_id.text = kwargs.pop('no_encrypt_key_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_interface_gi_ospf_conf_ospf1_md5_authentication_no_encrypt_key_table_no_encrypt_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        interface_gi_ospf_conf = ET.SubElement(ip, "interface-gi-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_gi_ospf_conf, "ospf1")
        md5_authentication = ET.SubElement(ospf1, "md5-authentication")
        no_encrypt_key_table = ET.SubElement(md5_authentication, "no-encrypt-key-table")
        no_encrypt_key = ET.SubElement(no_encrypt_key_table, "no-encrypt-key")
        no_encrypt_key.text = kwargs.pop('no_encrypt_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_interface_gi_ospf_conf_ospf1_md5_authentication_key_table_key_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        interface_gi_ospf_conf = ET.SubElement(ip, "interface-gi-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_gi_ospf_conf, "ospf1")
        md5_authentication = ET.SubElement(ospf1, "md5-authentication")
        key_table = ET.SubElement(md5_authentication, "key-table")
        key_id = ET.SubElement(key_table, "key-id")
        key_id.text = kwargs.pop('key_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_interface_gi_ospf_conf_ospf1_md5_authentication_key_table_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        interface_gi_ospf_conf = ET.SubElement(ip, "interface-gi-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_gi_ospf_conf, "ospf1")
        md5_authentication = ET.SubElement(ospf1, "md5-authentication")
        key_table = ET.SubElement(md5_authentication, "key-table")
        key = ET.SubElement(key_table, "key")
        key.text = kwargs.pop('key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_interface_gi_ospf_conf_ospf1_md5_authentication_key_table_md5_authentication_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        interface_gi_ospf_conf = ET.SubElement(ip, "interface-gi-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_gi_ospf_conf, "ospf1")
        md5_authentication = ET.SubElement(ospf1, "md5-authentication")
        key_table = ET.SubElement(md5_authentication, "key-table")
        md5_authentication_key = ET.SubElement(key_table, "md5-authentication-key")
        md5_authentication_key.text = kwargs.pop('md5_authentication_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_interface_gi_ospf_conf_ospf1_cost(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        interface_gi_ospf_conf = ET.SubElement(ip, "interface-gi-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_gi_ospf_conf, "ospf1")
        cost = ET.SubElement(ospf1, "cost")
        cost.text = kwargs.pop('cost')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_interface_gi_ospf_conf_ospf1_database_filter_all_out(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        interface_gi_ospf_conf = ET.SubElement(ip, "interface-gi-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_gi_ospf_conf, "ospf1")
        database_filter = ET.SubElement(ospf1, "database-filter")
        all_out = ET.SubElement(database_filter, "all-out")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_interface_gi_ospf_conf_ospf1_database_filter_all_external(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        interface_gi_ospf_conf = ET.SubElement(ip, "interface-gi-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_gi_ospf_conf, "ospf1")
        database_filter = ET.SubElement(ospf1, "database-filter")
        all_external = ET.SubElement(database_filter, "all-external")
        all_external.text = kwargs.pop('all_external')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_interface_gi_ospf_conf_ospf1_database_filter_all_summary_external(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        interface_gi_ospf_conf = ET.SubElement(ip, "interface-gi-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_gi_ospf_conf, "ospf1")
        database_filter = ET.SubElement(ospf1, "database-filter")
        all_summary_external = ET.SubElement(database_filter, "all-summary-external")
        all_summary_external.text = kwargs.pop('all_summary_external')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_interface_gi_ospf_conf_ospf1_mtu_ignore(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        interface_gi_ospf_conf = ET.SubElement(ip, "interface-gi-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_gi_ospf_conf, "ospf1")
        mtu_ignore = ET.SubElement(ospf1, "mtu-ignore")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_interface_gi_ospf_conf_ospf1_network(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        interface_gi_ospf_conf = ET.SubElement(ip, "interface-gi-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_gi_ospf_conf, "ospf1")
        network = ET.SubElement(ospf1, "network")
        network.text = kwargs.pop('network')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_interface_gi_ospf_conf_ospf1_active(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        interface_gi_ospf_conf = ET.SubElement(ip, "interface-gi-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_gi_ospf_conf, "ospf1")
        active = ET.SubElement(ospf1, "active")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_interface_gi_ospf_conf_ospf1_passive(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        interface_gi_ospf_conf = ET.SubElement(ip, "interface-gi-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_gi_ospf_conf, "ospf1")
        passive = ET.SubElement(ospf1, "passive")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_interface_gi_ospf_conf_ospf1_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        interface_gi_ospf_conf = ET.SubElement(ip, "interface-gi-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_gi_ospf_conf, "ospf1")
        priority = ET.SubElement(ospf1, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_interface_gi_ospf_conf_ospf1_bfd_intf_bfd_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        interface_gi_ospf_conf = ET.SubElement(ip, "interface-gi-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_gi_ospf_conf, "ospf1")
        bfd = ET.SubElement(ospf1, "bfd")
        intf_bfd_enable = ET.SubElement(bfd, "intf-bfd-enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_pim_intf_phy_cont_pim_int_cmd_pim_sparse(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        pim_intf_phy_cont = ET.SubElement(ip, "pim-intf-phy-cont", xmlns="urn:brocade.com:mgmt:brocade-pim")
        pim_int_cmd = ET.SubElement(pim_intf_phy_cont, "pim-int-cmd")
        pim_sparse = ET.SubElement(pim_int_cmd, "pim-sparse")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_pim_intf_phy_cont_pim_int_cmd_pim_neighbor_filter(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        pim_intf_phy_cont = ET.SubElement(ip, "pim-intf-phy-cont", xmlns="urn:brocade.com:mgmt:brocade-pim")
        pim_int_cmd = ET.SubElement(pim_intf_phy_cont, "pim-int-cmd")
        pim = ET.SubElement(pim_int_cmd, "pim")
        neighbor_filter = ET.SubElement(pim, "neighbor-filter")
        neighbor_filter.text = kwargs.pop('neighbor_filter')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_pim_intf_phy_cont_pim_int_cmd_pim_dr_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        pim_intf_phy_cont = ET.SubElement(ip, "pim-intf-phy-cont", xmlns="urn:brocade.com:mgmt:brocade-pim")
        pim_int_cmd = ET.SubElement(pim_intf_phy_cont, "pim-int-cmd")
        pim = ET.SubElement(pim_int_cmd, "pim")
        dr_priority = ET.SubElement(pim, "dr-priority")
        dr_priority.text = kwargs.pop('dr_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_pim_intf_phy_cont_pim_int_cmd_mcast_bdry_prefix_list(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(gigabitethernet, "ip")
        pim_intf_phy_cont = ET.SubElement(ip, "pim-intf-phy-cont", xmlns="urn:brocade.com:mgmt:brocade-pim")
        pim_int_cmd = ET.SubElement(pim_intf_phy_cont, "pim-int-cmd")
        mcast_bdry_prefix_list = ET.SubElement(pim_int_cmd, "mcast-bdry-prefix-list")
        mcast_bdry_prefix_list.text = kwargs.pop('mcast_bdry_prefix_list')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_vrf_forwarding(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrf = ET.SubElement(gigabitethernet, "vrf")
        forwarding = ET.SubElement(vrf, "forwarding")
        forwarding.text = kwargs.pop('forwarding')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_raguard(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        raguard = ET.SubElement(ipv6, "raguard")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_ipv6_config_address_use_link_local_only(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        address = ET.SubElement(ipv6_config, "address")
        use_link_local_only = ET.SubElement(address, "use-link-local-only")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_ipv6_config_address_link_local_config_link_local_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        address = ET.SubElement(ipv6_config, "address")
        link_local_config = ET.SubElement(address, "link-local-config")
        link_local_address = ET.SubElement(link_local_config, "link-local-address")
        link_local_address.text = kwargs.pop('link_local_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_ipv6_config_address_link_local_config_link_local(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        address = ET.SubElement(ipv6_config, "address")
        link_local_config = ET.SubElement(address, "link-local-config")
        link_local = ET.SubElement(link_local_config, "link-local")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_ipv6_config_address_ipv6_address_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        address = ET.SubElement(ipv6_config, "address")
        ipv6_address = ET.SubElement(address, "ipv6-address")
        address = ET.SubElement(ipv6_address, "address")
        address.text = kwargs.pop('address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_ipv6_config_address_ipv6_address_secondary(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        address = ET.SubElement(ipv6_config, "address")
        ipv6_address = ET.SubElement(address, "ipv6-address")
        address_key = ET.SubElement(ipv6_address, "address")
        address_key.text = kwargs.pop('address')
        secondary = ET.SubElement(ipv6_address, "secondary")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_ipv6_config_address_ipv6_address_eui_config_eui64(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        address = ET.SubElement(ipv6_config, "address")
        ipv6_address = ET.SubElement(address, "ipv6-address")
        address_key = ET.SubElement(ipv6_address, "address")
        address_key.text = kwargs.pop('address')
        eui_config = ET.SubElement(ipv6_address, "eui-config")
        eui64 = ET.SubElement(eui_config, "eui64")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_ipv6_config_address_ipv6_address_eui_config_eui_secondary(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        address = ET.SubElement(ipv6_config, "address")
        ipv6_address = ET.SubElement(address, "ipv6-address")
        address_key = ET.SubElement(ipv6_address, "address")
        address_key.text = kwargs.pop('address')
        eui_config = ET.SubElement(ipv6_address, "eui-config")
        eui_secondary = ET.SubElement(eui_config, "eui-secondary")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_ipv6_config_address_ipv6_address_anycast(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        address = ET.SubElement(ipv6_config, "address")
        ipv6_address = ET.SubElement(address, "ipv6-address")
        address_key = ET.SubElement(ipv6_address, "address")
        address_key.text = kwargs.pop('address')
        anycast = ET.SubElement(ipv6_address, "anycast")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_ipv6_config_mtu(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        mtu = ET.SubElement(ipv6_config, "mtu")
        mtu.text = kwargs.pop('mtu')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_interface_phy_dhcp_conf_dhcp_relay_servers_relay_ip_addr(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        interface_phy_dhcp_conf = ET.SubElement(ipv6, "interface-phy-dhcp-conf", xmlns="urn:brocade.com:mgmt:brocade-dhcpv6")
        dhcp = ET.SubElement(interface_phy_dhcp_conf, "dhcp")
        relay = ET.SubElement(dhcp, "relay")
        servers = ET.SubElement(relay, "servers")
        relay_ip_addr = ET.SubElement(servers, "relay-ip-addr")
        relay_ip_addr.text = kwargs.pop('relay_ip_addr')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_interface_phy_dhcp_conf_dhcp_relay_servers_server_vrf_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        interface_phy_dhcp_conf = ET.SubElement(ipv6, "interface-phy-dhcp-conf", xmlns="urn:brocade.com:mgmt:brocade-dhcpv6")
        dhcp = ET.SubElement(interface_phy_dhcp_conf, "dhcp")
        relay = ET.SubElement(dhcp, "relay")
        servers = ET.SubElement(relay, "servers")
        relay_ip_addr_key = ET.SubElement(servers, "relay-ip-addr")
        relay_ip_addr_key.text = kwargs.pop('relay_ip_addr')
        server_vrf_name = ET.SubElement(servers, "server-vrf-name")
        server_vrf_name.text = kwargs.pop('server_vrf_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_interface_phy_dhcp_conf_dhcp_relay_servers_interface_interface_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        interface_phy_dhcp_conf = ET.SubElement(ipv6, "interface-phy-dhcp-conf", xmlns="urn:brocade.com:mgmt:brocade-dhcpv6")
        dhcp = ET.SubElement(interface_phy_dhcp_conf, "dhcp")
        relay = ET.SubElement(dhcp, "relay")
        servers = ET.SubElement(relay, "servers")
        relay_ip_addr_key = ET.SubElement(servers, "relay-ip-addr")
        relay_ip_addr_key.text = kwargs.pop('relay_ip_addr')
        interface = ET.SubElement(servers, "interface")
        interface_type = ET.SubElement(interface, "interface-type")
        interface_type.text = kwargs.pop('interface_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_interface_phy_dhcp_conf_dhcp_relay_servers_interface_interface_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        interface_phy_dhcp_conf = ET.SubElement(ipv6, "interface-phy-dhcp-conf", xmlns="urn:brocade.com:mgmt:brocade-dhcpv6")
        dhcp = ET.SubElement(interface_phy_dhcp_conf, "dhcp")
        relay = ET.SubElement(dhcp, "relay")
        servers = ET.SubElement(relay, "servers")
        relay_ip_addr_key = ET.SubElement(servers, "relay-ip-addr")
        relay_ip_addr_key.text = kwargs.pop('relay_ip_addr')
        interface = ET.SubElement(servers, "interface")
        interface_name = ET.SubElement(interface, "interface-name")
        interface_name.text = kwargs.pop('interface_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_icmpv6_echo_reply(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        icmpv6 = ET.SubElement(ipv6, "icmpv6", xmlns="urn:brocade.com:mgmt:brocade-icmp")
        echo_reply = ET.SubElement(icmpv6, "echo-reply")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_icmpv6_rate_limiting(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        icmpv6 = ET.SubElement(ipv6, "icmpv6", xmlns="urn:brocade.com:mgmt:brocade-icmp")
        rate_limiting = ET.SubElement(icmpv6, "rate-limiting")
        rate_limiting.text = kwargs.pop('rate_limiting')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_icmpv6_unreachable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        icmpv6 = ET.SubElement(ipv6, "icmpv6", xmlns="urn:brocade.com:mgmt:brocade-icmp")
        unreachable = ET.SubElement(icmpv6, "unreachable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_icmpv6_redirect(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        icmpv6 = ET.SubElement(ipv6, "icmpv6", xmlns="urn:brocade.com:mgmt:brocade-icmp")
        redirect = ET.SubElement(icmpv6, "redirect")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_access_group_ipv6_access_list(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        access_group = ET.SubElement(ipv6, "access-group", xmlns="urn:brocade.com:mgmt:brocade-ipv6-access-list")
        ip_direction_key = ET.SubElement(access_group, "ip-direction")
        ip_direction_key.text = kwargs.pop('ip_direction')
        ipv6_access_list = ET.SubElement(access_group, "ipv6-access-list")
        ipv6_access_list.text = kwargs.pop('ipv6_access_list')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_access_group_ip_direction(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        access_group = ET.SubElement(ipv6, "access-group", xmlns="urn:brocade.com:mgmt:brocade-ipv6-access-list")
        ipv6_access_list_key = ET.SubElement(access_group, "ipv6-access-list")
        ipv6_access_list_key.text = kwargs.pop('ipv6_access_list')
        ip_direction = ET.SubElement(access_group, "ip-direction")
        ip_direction.text = kwargs.pop('ip_direction')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_access_group_traffic_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        access_group = ET.SubElement(ipv6, "access-group", xmlns="urn:brocade.com:mgmt:brocade-ipv6-access-list")
        ipv6_access_list_key = ET.SubElement(access_group, "ipv6-access-list")
        ipv6_access_list_key.text = kwargs.pop('ipv6_access_list')
        ip_direction_key = ET.SubElement(access_group, "ip-direction")
        ip_direction_key.text = kwargs.pop('ip_direction')
        traffic_type = ET.SubElement(access_group, "traffic-type")
        traffic_type.text = kwargs.pop('traffic_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_policy_route_map_ipv6_route_map_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        policy = ET.SubElement(ipv6, "policy", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        route_map = ET.SubElement(policy, "route-map")
        ipv6_route_map_name = ET.SubElement(route_map, "ipv6-route-map-name")
        ipv6_route_map_name.text = kwargs.pop('ipv6_route_map_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_vrrp_suppress_interface_ra(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        vrrp_suppress_interface_ra = ET.SubElement(ipv6_intf_cmds, "vrrp-suppress-interface-ra")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_managed_config_flag(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        managed_config_flag = ET.SubElement(nd, "managed-config-flag")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_other_config_flag(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        other_config_flag = ET.SubElement(nd, "other-config-flag")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_broadcast_mac_trap(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        broadcast_mac_trap = ET.SubElement(nd, "broadcast-mac-trap")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_ra_lifetime(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        ra_lifetime = ET.SubElement(nd, "ra-lifetime")
        ra_lifetime.text = kwargs.pop('ra_lifetime')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_reachable_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        reachable_time = ET.SubElement(nd, "reachable-time")
        reachable_time.text = kwargs.pop('reachable_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_mtu(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        mtu = ET.SubElement(nd, "mtu")
        mtu.text = kwargs.pop('mtu')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_retrans_timer(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        retrans_timer = ET.SubElement(nd, "retrans-timer")
        retrans_timer.text = kwargs.pop('retrans_timer')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_hoplimit(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        hoplimit = ET.SubElement(nd, "hoplimit")
        hoplimit.text = kwargs.pop('hoplimit')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_ns_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        ns_interval = ET.SubElement(nd, "ns-interval")
        ns_interval.text = kwargs.pop('ns_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_proxy(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        proxy = ET.SubElement(nd, "proxy")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_suppress_ra_suppress_ra_flag(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        suppress_ra = ET.SubElement(nd, "suppress-ra")
        suppress_ra_flag = ET.SubElement(suppress_ra, "suppress-ra-flag")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_suppress_ra_suppress_ra_mtu(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        suppress_ra = ET.SubElement(nd, "suppress-ra")
        suppress_ra_mtu = ET.SubElement(suppress_ra, "suppress-ra-mtu")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_suppress_ra_suppress_ra_all(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        suppress_ra = ET.SubElement(nd, "suppress-ra")
        suppress_ra_all = ET.SubElement(suppress_ra, "suppress-ra-all")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_ra_interval_max_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        ra_interval = ET.SubElement(nd, "ra-interval")
        max_interval = ET.SubElement(ra_interval, "max-interval")
        max_interval.text = kwargs.pop('max_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_ra_interval_min(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        ra_interval = ET.SubElement(nd, "ra-interval")
        min = ET.SubElement(ra_interval, "min")
        min.text = kwargs.pop('min')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_dad_attempts(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        dad = ET.SubElement(nd, "dad")
        attempts = ET.SubElement(dad, "attempts")
        attempts.text = kwargs.pop('attempts')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_dad_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        dad = ET.SubElement(nd, "dad")
        time = ET.SubElement(dad, "time")
        time.text = kwargs.pop('time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_nud_retry_base(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        nud = ET.SubElement(nd, "nud")
        retry = ET.SubElement(nud, "retry")
        base = ET.SubElement(retry, "base")
        base.text = kwargs.pop('base')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_nud_retry_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        nud = ET.SubElement(nd, "nud")
        retry = ET.SubElement(nud, "retry")
        interval = ET.SubElement(retry, "interval")
        interval.text = kwargs.pop('interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_nud_retry_max_attempts(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        nud = ET.SubElement(nd, "nud")
        retry = ET.SubElement(nud, "retry")
        max_attempts = ET.SubElement(retry, "max-attempts")
        max_attempts.text = kwargs.pop('max_attempts')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_cache_expire(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        cache = ET.SubElement(nd, "cache")
        expire = ET.SubElement(cache, "expire")
        expire.text = kwargs.pop('expire')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_prefix_prefix_ipv6_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        prefix = ET.SubElement(nd, "prefix")
        prefix_ipv6_address = ET.SubElement(prefix, "prefix-ipv6-address")
        prefix_ipv6_address.text = kwargs.pop('prefix_ipv6_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_prefix_lifetime_ch_valid_type_ca_no_advertise_no_advertise(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        prefix = ET.SubElement(nd, "prefix")
        prefix_ipv6_address_key = ET.SubElement(prefix, "prefix-ipv6-address")
        prefix_ipv6_address_key.text = kwargs.pop('prefix_ipv6_address')
        lifetime = ET.SubElement(prefix, "lifetime")
        ch_valid_type = ET.SubElement(lifetime, "ch-valid-type")
        ca_no_advertise = ET.SubElement(ch_valid_type, "ca-no-advertise")
        no_advertise = ET.SubElement(ca_no_advertise, "no-advertise")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_prefix_lifetime_ch_valid_type_ca_valid_lifetime_valid_lifetime(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        prefix = ET.SubElement(nd, "prefix")
        prefix_ipv6_address_key = ET.SubElement(prefix, "prefix-ipv6-address")
        prefix_ipv6_address_key.text = kwargs.pop('prefix_ipv6_address')
        lifetime = ET.SubElement(prefix, "lifetime")
        ch_valid_type = ET.SubElement(lifetime, "ch-valid-type")
        ca_valid_lifetime = ET.SubElement(ch_valid_type, "ca-valid-lifetime")
        valid_lifetime = ET.SubElement(ca_valid_lifetime, "valid-lifetime")
        valid_lifetime.text = kwargs.pop('valid_lifetime')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_prefix_lifetime_ch_valid_type_ca_valid_infinite_valid_infinite(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        prefix = ET.SubElement(nd, "prefix")
        prefix_ipv6_address_key = ET.SubElement(prefix, "prefix-ipv6-address")
        prefix_ipv6_address_key.text = kwargs.pop('prefix_ipv6_address')
        lifetime = ET.SubElement(prefix, "lifetime")
        ch_valid_type = ET.SubElement(lifetime, "ch-valid-type")
        ca_valid_infinite = ET.SubElement(ch_valid_type, "ca-valid-infinite")
        valid_infinite = ET.SubElement(ca_valid_infinite, "valid-infinite")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_prefix_lifetime_preferred_ch_preferred_type_ca_preferred_lifetime_preferred_lifetime(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        prefix = ET.SubElement(nd, "prefix")
        prefix_ipv6_address_key = ET.SubElement(prefix, "prefix-ipv6-address")
        prefix_ipv6_address_key.text = kwargs.pop('prefix_ipv6_address')
        lifetime = ET.SubElement(prefix, "lifetime")
        preferred = ET.SubElement(lifetime, "preferred")
        ch_preferred_type = ET.SubElement(preferred, "ch-preferred-type")
        ca_preferred_lifetime = ET.SubElement(ch_preferred_type, "ca-preferred-lifetime")
        preferred_lifetime = ET.SubElement(ca_preferred_lifetime, "preferred-lifetime")
        preferred_lifetime.text = kwargs.pop('preferred_lifetime')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_prefix_lifetime_preferred_ch_preferred_type_ca_preferred_infinite_preferred_infinite(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        prefix = ET.SubElement(nd, "prefix")
        prefix_ipv6_address_key = ET.SubElement(prefix, "prefix-ipv6-address")
        prefix_ipv6_address_key.text = kwargs.pop('prefix_ipv6_address')
        lifetime = ET.SubElement(prefix, "lifetime")
        preferred = ET.SubElement(lifetime, "preferred")
        ch_preferred_type = ET.SubElement(preferred, "ch-preferred-type")
        ca_preferred_infinite = ET.SubElement(ch_preferred_type, "ca-preferred-infinite")
        preferred_infinite = ET.SubElement(ca_preferred_infinite, "preferred-infinite")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_prefix_lifetime_preferred_prefix_flags_no_autoconfig(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        prefix = ET.SubElement(nd, "prefix")
        prefix_ipv6_address_key = ET.SubElement(prefix, "prefix-ipv6-address")
        prefix_ipv6_address_key.text = kwargs.pop('prefix_ipv6_address')
        lifetime = ET.SubElement(prefix, "lifetime")
        preferred = ET.SubElement(lifetime, "preferred")
        prefix_flags = ET.SubElement(preferred, "prefix-flags")
        no_autoconfig = ET.SubElement(prefix_flags, "no-autoconfig")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_prefix_lifetime_preferred_prefix_flags_no_onlink(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        prefix = ET.SubElement(nd, "prefix")
        prefix_ipv6_address_key = ET.SubElement(prefix, "prefix-ipv6-address")
        prefix_ipv6_address_key.text = kwargs.pop('prefix_ipv6_address')
        lifetime = ET.SubElement(prefix, "lifetime")
        preferred = ET.SubElement(lifetime, "preferred")
        prefix_flags = ET.SubElement(preferred, "prefix-flags")
        no_onlink = ET.SubElement(prefix_flags, "no-onlink")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_prefix_lifetime_preferred_prefix_flags_off_link(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        prefix = ET.SubElement(nd, "prefix")
        prefix_ipv6_address_key = ET.SubElement(prefix, "prefix-ipv6-address")
        prefix_ipv6_address_key.text = kwargs.pop('prefix_ipv6_address')
        lifetime = ET.SubElement(prefix, "lifetime")
        preferred = ET.SubElement(lifetime, "preferred")
        prefix_flags = ET.SubElement(preferred, "prefix-flags")
        off_link = ET.SubElement(prefix_flags, "off-link")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_neighbor_ipv6_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        neighbor = ET.SubElement(ipv6_intf_cmds, "neighbor")
        ipv6_address = ET.SubElement(neighbor, "ipv6-address")
        ipv6_address.text = kwargs.pop('ipv6_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_neighbor_hardware_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        neighbor = ET.SubElement(ipv6_intf_cmds, "neighbor")
        ipv6_address_key = ET.SubElement(neighbor, "ipv6-address")
        ipv6_address_key.text = kwargs.pop('ipv6_address')
        hardware_address = ET.SubElement(neighbor, "hardware-address")
        hardware_address.text = kwargs.pop('hardware_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_ipv6_phy_intf_cmds_hop_by_hop_trap(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        ipv6_phy_intf_cmds = ET.SubElement(ipv6, "ipv6-phy-intf-cmds", xmlns="urn:brocade.com:mgmt:brocade-mld-snooping")
        hop_by_hop_trap = ET.SubElement(ipv6_phy_intf_cmds, "hop-by-hop-trap")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_interface_ospfv3_conf_interface_area(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        interface_area = ET.SubElement(interface_ospfv3_conf, "interface-area")
        interface_area.text = kwargs.pop('interface_area')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_interface_ospfv3_conf_active(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        active = ET.SubElement(interface_ospfv3_conf, "active")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_interface_ospfv3_conf_passive(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        passive = ET.SubElement(interface_ospfv3_conf, "passive")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_interface_ospfv3_conf_bfd_bfd_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        bfd = ET.SubElement(interface_ospfv3_conf, "bfd")
        bfd_enable = ET.SubElement(bfd, "bfd-enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_interface_ospfv3_conf_cost(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        cost = ET.SubElement(interface_ospfv3_conf, "cost")
        cost.text = kwargs.pop('cost')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_interface_ospfv3_conf_instance(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        instance = ET.SubElement(interface_ospfv3_conf, "instance")
        instance.text = kwargs.pop('instance')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_interface_ospfv3_conf_mtu_ignore(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        mtu_ignore = ET.SubElement(interface_ospfv3_conf, "mtu-ignore")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_interface_ospfv3_conf_network(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        network = ET.SubElement(interface_ospfv3_conf, "network")
        network.text = kwargs.pop('network')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_interface_ospfv3_conf_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        priority = ET.SubElement(interface_ospfv3_conf, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_interface_ospfv3_conf_suppress_linklsa(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        suppress_linklsa = ET.SubElement(interface_ospfv3_conf, "suppress-linklsa")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_spi(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        spi = ET.SubElement(ipsec_auth_key_config, "spi")
        spi.text = kwargs.pop('spi')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_ah_algorithm_ah(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_ah_algorithm = ET.SubElement(ch_algorithm, "ca-ah-algorithm")
        ah = ET.SubElement(ca_ah_algorithm, "ah")
        ah.text = kwargs.pop('ah')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_ah_algorithm_ah_no_encrypt(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_ah_algorithm = ET.SubElement(ch_algorithm, "ca-ah-algorithm")
        ah_no_encrypt = ET.SubElement(ca_ah_algorithm, "ah-no-encrypt")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_ah_algorithm_ah_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_ah_algorithm = ET.SubElement(ch_algorithm, "ca-ah-algorithm")
        ah_key = ET.SubElement(ca_ah_algorithm, "ah-key")
        ah_key.text = kwargs.pop('ah_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp = ET.SubElement(ca_esp_algorithm, "esp")
        esp.text = kwargs.pop('esp')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp_no_encrypt(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp_no_encrypt = ET.SubElement(ca_esp_algorithm, "esp-no-encrypt")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp_key = ET.SubElement(ca_esp_algorithm, "esp-key")
        esp_key.text = kwargs.pop('esp_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp_auth(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp_auth = ET.SubElement(ca_esp_algorithm, "esp-auth")
        esp_auth.text = kwargs.pop('esp_auth')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp_auth_no_encrypt(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp_auth_no_encrypt = ET.SubElement(ca_esp_algorithm, "esp-auth-no-encrypt")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp_auth_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp_auth_key = ET.SubElement(ca_esp_algorithm, "esp-auth-key")
        esp_auth_key.text = kwargs.pop('esp_auth_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_ipsec_authentication_disable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec = ET.SubElement(authentication, "ipsec")
        ipsec_authentication_disable = ET.SubElement(ipsec, "ipsec-authentication-disable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_ifc_key_add_remove_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec = ET.SubElement(authentication, "ipsec")
        ifc_key_add_remove_interval = ET.SubElement(ipsec, "ifc-key-add-remove-interval")
        ifc_key_add_remove_interval.text = kwargs.pop('ifc_key_add_remove_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_interface_ospfv3_conf_link_interval_properties_hello_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        link_interval_properties = ET.SubElement(interface_ospfv3_conf, "link-interval-properties")
        hello_interval = ET.SubElement(link_interval_properties, "hello-interval")
        hello_interval.text = kwargs.pop('hello_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_interface_ospfv3_conf_link_interval_properties_dead_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        link_interval_properties = ET.SubElement(interface_ospfv3_conf, "link-interval-properties")
        dead_interval = ET.SubElement(link_interval_properties, "dead-interval")
        dead_interval.text = kwargs.pop('dead_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_interface_ospfv3_conf_link_interval_properties_hello_jitter(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        link_interval_properties = ET.SubElement(interface_ospfv3_conf, "link-interval-properties")
        hello_jitter = ET.SubElement(link_interval_properties, "hello-jitter")
        hello_jitter.text = kwargs.pop('hello_jitter')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_interface_ospfv3_conf_link_interval_properties_retransmit_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        link_interval_properties = ET.SubElement(interface_ospfv3_conf, "link-interval-properties")
        retransmit_interval = ET.SubElement(link_interval_properties, "retransmit-interval")
        retransmit_interval.text = kwargs.pop('retransmit_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_interface_ospfv3_conf_link_interval_properties_transmit_delay(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        link_interval_properties = ET.SubElement(interface_ospfv3_conf, "link-interval-properties")
        transmit_delay = ET.SubElement(link_interval_properties, "transmit-delay")
        transmit_delay.text = kwargs.pop('transmit_delay')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_vrrpv3_group_vrid(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        vrrpv3_group = ET.SubElement(ipv6, "vrrpv3-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid = ET.SubElement(vrrpv3_group, "vrid")
        vrid.text = kwargs.pop('vrid')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_vrrpv3_group_use_v2_checksum(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        vrrpv3_group = ET.SubElement(ipv6, "vrrpv3-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        use_v2_checksum = ET.SubElement(vrrpv3_group, "use-v2-checksum")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_vrrpv3_group_virtual_ip_virtual_ipaddr(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        vrrpv3_group = ET.SubElement(ipv6, "vrrpv3-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        virtual_ip = ET.SubElement(vrrpv3_group, "virtual-ip")
        virtual_ipaddr = ET.SubElement(virtual_ip, "virtual-ipaddr")
        virtual_ipaddr.text = kwargs.pop('virtual_ipaddr')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_vrrpv3_group_track_interface_interface_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        vrrpv3_group = ET.SubElement(ipv6, "vrrpv3-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        track = ET.SubElement(vrrpv3_group, "track")
        interface = ET.SubElement(track, "interface")
        interface_name_key = ET.SubElement(interface, "interface-name")
        interface_name_key.text = kwargs.pop('interface_name')
        interface_type = ET.SubElement(interface, "interface-type")
        interface_type.text = kwargs.pop('interface_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_vrrpv3_group_track_interface_interface_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        vrrpv3_group = ET.SubElement(ipv6, "vrrpv3-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        track = ET.SubElement(vrrpv3_group, "track")
        interface = ET.SubElement(track, "interface")
        interface_type_key = ET.SubElement(interface, "interface-type")
        interface_type_key.text = kwargs.pop('interface_type')
        interface_name = ET.SubElement(interface, "interface-name")
        interface_name.text = kwargs.pop('interface_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_vrrpv3_group_track_interface_track_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        vrrpv3_group = ET.SubElement(ipv6, "vrrpv3-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        track = ET.SubElement(vrrpv3_group, "track")
        interface = ET.SubElement(track, "interface")
        interface_type_key = ET.SubElement(interface, "interface-type")
        interface_type_key.text = kwargs.pop('interface_type')
        interface_name_key = ET.SubElement(interface, "interface-name")
        interface_name_key.text = kwargs.pop('interface_name')
        track_priority = ET.SubElement(interface, "track-priority")
        track_priority.text = kwargs.pop('track_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_vrrpv3_group_advertisement_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        vrrpv3_group = ET.SubElement(ipv6, "vrrpv3-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        advertisement_interval = ET.SubElement(vrrpv3_group, "advertisement-interval")
        advertisement_interval.text = kwargs.pop('advertisement_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_vrrpv3_group_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        vrrpv3_group = ET.SubElement(ipv6, "vrrpv3-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        enable = ET.SubElement(vrrpv3_group, "enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_vrrpv3_group_hold_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        vrrpv3_group = ET.SubElement(ipv6, "vrrpv3-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        hold_time = ET.SubElement(vrrpv3_group, "hold-time")
        hold_time.text = kwargs.pop('hold_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_vrrpv3_group_preempt_mode(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        vrrpv3_group = ET.SubElement(ipv6, "vrrpv3-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        preempt_mode = ET.SubElement(vrrpv3_group, "preempt-mode")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_vrrpv3_group_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        vrrpv3_group = ET.SubElement(ipv6, "vrrpv3-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        priority = ET.SubElement(vrrpv3_group, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_vrrpv3_group_description(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        vrrpv3_group = ET.SubElement(ipv6, "vrrpv3-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        description = ET.SubElement(vrrpv3_group, "description")
        description.text = kwargs.pop('description')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_vrrpv3e_group_vrid(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid = ET.SubElement(vrrpv3e_group, "vrid")
        vrid.text = kwargs.pop('vrid')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_vrrpv3e_group_virtual_ip_virtual_ipaddr(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        virtual_ip = ET.SubElement(vrrpv3e_group, "virtual-ip")
        virtual_ipaddr = ET.SubElement(virtual_ip, "virtual-ipaddr")
        virtual_ipaddr.text = kwargs.pop('virtual_ipaddr')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_vrrpv3e_group_track_interface_interface_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        track = ET.SubElement(vrrpv3e_group, "track")
        interface = ET.SubElement(track, "interface")
        interface_name_key = ET.SubElement(interface, "interface-name")
        interface_name_key.text = kwargs.pop('interface_name')
        interface_type = ET.SubElement(interface, "interface-type")
        interface_type.text = kwargs.pop('interface_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_vrrpv3e_group_track_interface_interface_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        track = ET.SubElement(vrrpv3e_group, "track")
        interface = ET.SubElement(track, "interface")
        interface_type_key = ET.SubElement(interface, "interface-type")
        interface_type_key.text = kwargs.pop('interface_type')
        interface_name = ET.SubElement(interface, "interface-name")
        interface_name.text = kwargs.pop('interface_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_vrrpv3e_group_track_interface_track_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        track = ET.SubElement(vrrpv3e_group, "track")
        interface = ET.SubElement(track, "interface")
        interface_type_key = ET.SubElement(interface, "interface-type")
        interface_type_key.text = kwargs.pop('interface_type')
        interface_name_key = ET.SubElement(interface, "interface-name")
        interface_name_key.text = kwargs.pop('interface_name')
        track_priority = ET.SubElement(interface, "track-priority")
        track_priority.text = kwargs.pop('track_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_vrrpv3e_group_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        enable = ET.SubElement(vrrpv3e_group, "enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_vrrpv3e_group_hold_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        hold_time = ET.SubElement(vrrpv3e_group, "hold-time")
        hold_time.text = kwargs.pop('hold_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_vrrpv3e_group_preempt_mode(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        preempt_mode = ET.SubElement(vrrpv3e_group, "preempt-mode")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_vrrpv3e_group_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        priority = ET.SubElement(vrrpv3e_group, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_vrrpv3e_group_description(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        description = ET.SubElement(vrrpv3e_group, "description")
        description.text = kwargs.pop('description')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_vrrpv3e_group_advertise_backup(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        advertise_backup = ET.SubElement(vrrpv3e_group, "advertise-backup")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_vrrpv3e_group_nd_advertisement_timer(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        nd_advertisement_timer = ET.SubElement(vrrpv3e_group, "nd-advertisement-timer")
        nd_advertisement_timer.text = kwargs.pop('nd_advertisement_timer')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_vrrpv3e_group_advertisement_interval_scale(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        advertisement_interval_scale = ET.SubElement(vrrpv3e_group, "advertisement-interval-scale")
        advertisement_interval_scale.text = kwargs.pop('advertisement_interval_scale')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_vrrpv3e_group_backup_advertisement_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        backup_advertisement_interval = ET.SubElement(vrrpv3e_group, "backup-advertisement-interval")
        backup_advertisement_interval.text = kwargs.pop('backup_advertisement_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_vrrpv3e_group_vrrpe_advertisement_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        vrrpe_advertisement_interval = ET.SubElement(vrrpv3e_group, "vrrpe-advertisement-interval")
        vrrpe_advertisement_interval.text = kwargs.pop('vrrpe_advertisement_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_vrrpv3e_group_short_path_forwarding_basic(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        short_path_forwarding = ET.SubElement(vrrpv3e_group, "short-path-forwarding")
        basic = ET.SubElement(short_path_forwarding, "basic")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ipv6_vrrpv3e_group_short_path_forwarding_revert_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(gigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        short_path_forwarding = ET.SubElement(vrrpv3e_group, "short-path-forwarding")
        revert_priority = ET.SubElement(short_path_forwarding, "revert-priority")
        revert_priority.text = kwargs.pop('revert_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_track_track_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        track = ET.SubElement(gigabitethernet, "track")
        track_enable = ET.SubElement(track, "track_enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_track_min_link(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        track = ET.SubElement(gigabitethernet, "track")
        min_link = ET.SubElement(track, "min-link")
        min_link.text = kwargs.pop('min_link')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_track_interface_track_interface_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        track = ET.SubElement(gigabitethernet, "track")
        interface = ET.SubElement(track, "interface")
        track_interface_name_key = ET.SubElement(interface, "track-interface-name")
        track_interface_name_key.text = kwargs.pop('track_interface_name')
        track_interface_type = ET.SubElement(interface, "track-interface-type")
        track_interface_type.text = kwargs.pop('track_interface_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_track_interface_track_interface_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        track = ET.SubElement(gigabitethernet, "track")
        interface = ET.SubElement(track, "interface")
        track_interface_type_key = ET.SubElement(interface, "track-interface-type")
        track_interface_type_key.text = kwargs.pop('track_interface_type')
        track_interface_name = ET.SubElement(interface, "track-interface-name")
        track_interface_name.text = kwargs.pop('track_interface_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_track_remove_remove_all_track_interfaces(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        track = ET.SubElement(gigabitethernet, "track")
        remove = ET.SubElement(track, "remove")
        remove_all_track_interfaces = ET.SubElement(remove, "remove-all-track-interfaces")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_bfd_interval_min_tx(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        bfd = ET.SubElement(gigabitethernet, "bfd")
        interval = ET.SubElement(bfd, "interval")
        min_tx = ET.SubElement(interval, "min-tx")
        min_tx.text = kwargs.pop('min_tx')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_bfd_interval_min_rx(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        bfd = ET.SubElement(gigabitethernet, "bfd")
        interval = ET.SubElement(bfd, "interval")
        min_rx = ET.SubElement(interval, "min-rx")
        min_rx.text = kwargs.pop('min_rx')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_bfd_interval_multiplier(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        bfd = ET.SubElement(gigabitethernet, "bfd")
        interval = ET.SubElement(bfd, "interval")
        multiplier = ET.SubElement(interval, "multiplier")
        multiplier.text = kwargs.pop('multiplier')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_bfd_bfd_shutdown(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        bfd = ET.SubElement(gigabitethernet, "bfd")
        bfd_shutdown = ET.SubElement(bfd, "bfd-shutdown")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_edge_loop_detection_eldprio(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        edge_loop_detection = ET.SubElement(gigabitethernet, "edge-loop-detection")
        eldprio = ET.SubElement(edge_loop_detection, "eldprio")
        eldprio.text = kwargs.pop('eldprio')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_edge_loop_detection_eldvlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        edge_loop_detection = ET.SubElement(gigabitethernet, "edge-loop-detection")
        eldvlan = ET.SubElement(edge_loop_detection, "eldvlan")
        eldvlan.text = kwargs.pop('eldvlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_mac_access_group_mac_access_list(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        mac = ET.SubElement(gigabitethernet, "mac", xmlns="urn:brocade.com:mgmt:brocade-mac-access-list")
        access_group = ET.SubElement(mac, "access-group")
        mac_direction_key = ET.SubElement(access_group, "mac-direction")
        mac_direction_key.text = kwargs.pop('mac_direction')
        mac_access_list = ET.SubElement(access_group, "mac-access-list")
        mac_access_list.text = kwargs.pop('mac_access_list')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_mac_access_group_mac_direction(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        mac = ET.SubElement(gigabitethernet, "mac", xmlns="urn:brocade.com:mgmt:brocade-mac-access-list")
        access_group = ET.SubElement(mac, "access-group")
        mac_access_list_key = ET.SubElement(access_group, "mac-access-list")
        mac_access_list_key.text = kwargs.pop('mac_access_list')
        mac_direction = ET.SubElement(access_group, "mac-direction")
        mac_direction.text = kwargs.pop('mac_direction')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_mac_access_group_traffic_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        mac = ET.SubElement(gigabitethernet, "mac", xmlns="urn:brocade.com:mgmt:brocade-mac-access-list")
        access_group = ET.SubElement(mac, "access-group")
        mac_access_list_key = ET.SubElement(access_group, "mac-access-list")
        mac_access_list_key.text = kwargs.pop('mac_access_list')
        mac_direction_key = ET.SubElement(access_group, "mac-direction")
        mac_direction_key.text = kwargs.pop('mac_direction')
        traffic_type = ET.SubElement(access_group, "traffic-type")
        traffic_type.text = kwargs.pop('traffic_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_vrrp_vrid(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(gigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        vrid = ET.SubElement(vrrp, "vrid")
        vrid.text = kwargs.pop('vrid')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_vrrp_version(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(gigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version = ET.SubElement(vrrp, "version")
        version.text = kwargs.pop('version')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_vrrp_use_v2_checksum(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(gigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        use_v2_checksum = ET.SubElement(vrrp, "use-v2-checksum")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_vrrp_virtual_ip_virtual_ipaddr(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(gigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        virtual_ip = ET.SubElement(vrrp, "virtual-ip")
        virtual_ipaddr = ET.SubElement(virtual_ip, "virtual-ipaddr")
        virtual_ipaddr.text = kwargs.pop('virtual_ipaddr')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_vrrp_track_interface_interface_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(gigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        track = ET.SubElement(vrrp, "track")
        interface = ET.SubElement(track, "interface")
        interface_name_key = ET.SubElement(interface, "interface-name")
        interface_name_key.text = kwargs.pop('interface_name')
        interface_type = ET.SubElement(interface, "interface-type")
        interface_type.text = kwargs.pop('interface_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_vrrp_track_interface_interface_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(gigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        track = ET.SubElement(vrrp, "track")
        interface = ET.SubElement(track, "interface")
        interface_type_key = ET.SubElement(interface, "interface-type")
        interface_type_key.text = kwargs.pop('interface_type')
        interface_name = ET.SubElement(interface, "interface-name")
        interface_name.text = kwargs.pop('interface_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_vrrp_track_interface_track_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(gigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        track = ET.SubElement(vrrp, "track")
        interface = ET.SubElement(track, "interface")
        interface_type_key = ET.SubElement(interface, "interface-type")
        interface_type_key.text = kwargs.pop('interface_type')
        interface_name_key = ET.SubElement(interface, "interface-name")
        interface_name_key.text = kwargs.pop('interface_name')
        track_priority = ET.SubElement(interface, "track-priority")
        track_priority.text = kwargs.pop('track_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_vrrp_advertisement_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(gigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        advertisement_interval = ET.SubElement(vrrp, "advertisement-interval")
        advertisement_interval.text = kwargs.pop('advertisement_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_vrrp_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(gigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        enable = ET.SubElement(vrrp, "enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_vrrp_hold_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(gigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        hold_time = ET.SubElement(vrrp, "hold-time")
        hold_time.text = kwargs.pop('hold_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_vrrp_preempt_mode(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(gigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        preempt_mode = ET.SubElement(vrrp, "preempt-mode")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_vrrp_arp_unicast_request_receive(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(gigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        arp = ET.SubElement(vrrp, "arp")
        unicast_request = ET.SubElement(arp, "unicast-request")
        receive = ET.SubElement(unicast_request, "receive")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_vrrp_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(gigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        priority = ET.SubElement(vrrp, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_vrrp_description(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(gigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        description = ET.SubElement(vrrp, "description")
        description.text = kwargs.pop('description')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_fabric_neighbor_discovery_disable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        fabric = ET.SubElement(gigabitethernet, "fabric", xmlns="urn:brocade.com:mgmt:brocade-fcoe")
        neighbor_discovery = ET.SubElement(fabric, "neighbor-discovery")
        disable = ET.SubElement(neighbor_discovery, "disable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_openflow_interface_cfg_logical_instance_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        openflow_interface_cfg = ET.SubElement(gigabitethernet, "openflow-interface-cfg", xmlns="urn:brocade.com:mgmt:brocade-openflow")
        logical_instance_id = ET.SubElement(openflow_interface_cfg, "logical-instance-id")
        logical_instance_id.text = kwargs.pop('logical_instance_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_openflow_interface_cfg_openflow_enable_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        openflow_interface_cfg = ET.SubElement(gigabitethernet, "openflow-interface-cfg", xmlns="urn:brocade.com:mgmt:brocade-openflow")
        openflow_enable = ET.SubElement(openflow_interface_cfg, "openflow-enable")
        enable = ET.SubElement(openflow_enable, "enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_openflow_interface_cfg_openflow_enable_match_profile(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        openflow_interface_cfg = ET.SubElement(gigabitethernet, "openflow-interface-cfg", xmlns="urn:brocade.com:mgmt:brocade-openflow")
        openflow_enable = ET.SubElement(openflow_interface_cfg, "openflow-enable")
        match_profile = ET.SubElement(openflow_enable, "match-profile")
        match_profile.text = kwargs.pop('match_profile')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_sflow_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        sflow = ET.SubElement(gigabitethernet, "sflow", xmlns="urn:brocade.com:mgmt:brocade-sflow")
        enable = ET.SubElement(sflow, "enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_sflow_polling_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        sflow = ET.SubElement(gigabitethernet, "sflow", xmlns="urn:brocade.com:mgmt:brocade-sflow")
        polling_interval = ET.SubElement(sflow, "polling-interval")
        polling_interval.text = kwargs.pop('polling_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_sflow_sample_rate(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        sflow = ET.SubElement(gigabitethernet, "sflow", xmlns="urn:brocade.com:mgmt:brocade-sflow")
        sample_rate = ET.SubElement(sflow, "sample-rate")
        sample_rate.text = kwargs.pop('sample_rate')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_acl_interface_ip_access_group_ip_access_list(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip_acl_interface = ET.SubElement(gigabitethernet, "ip-acl-interface", xmlns="urn:brocade.com:mgmt:brocade-ip-access-list")
        ip = ET.SubElement(ip_acl_interface, "ip")
        access_group = ET.SubElement(ip, "access-group")
        ip_direction_key = ET.SubElement(access_group, "ip-direction")
        ip_direction_key.text = kwargs.pop('ip_direction')
        ip_access_list = ET.SubElement(access_group, "ip-access-list")
        ip_access_list.text = kwargs.pop('ip_access_list')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_acl_interface_ip_access_group_ip_direction(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip_acl_interface = ET.SubElement(gigabitethernet, "ip-acl-interface", xmlns="urn:brocade.com:mgmt:brocade-ip-access-list")
        ip = ET.SubElement(ip_acl_interface, "ip")
        access_group = ET.SubElement(ip, "access-group")
        ip_access_list_key = ET.SubElement(access_group, "ip-access-list")
        ip_access_list_key.text = kwargs.pop('ip_access_list')
        ip_direction = ET.SubElement(access_group, "ip-direction")
        ip_direction.text = kwargs.pop('ip_direction')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_acl_interface_ip_access_group_traffic_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip_acl_interface = ET.SubElement(gigabitethernet, "ip-acl-interface", xmlns="urn:brocade.com:mgmt:brocade-ip-access-list")
        ip = ET.SubElement(ip_acl_interface, "ip")
        access_group = ET.SubElement(ip, "access-group")
        ip_access_list_key = ET.SubElement(access_group, "ip-access-list")
        ip_access_list_key.text = kwargs.pop('ip_access_list')
        ip_direction_key = ET.SubElement(access_group, "ip-direction")
        ip_direction_key.text = kwargs.pop('ip_direction')
        traffic_type = ET.SubElement(access_group, "traffic-type")
        traffic_type.text = kwargs.pop('traffic_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_storm_control_ingress_protocol_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        storm_control = ET.SubElement(gigabitethernet, "storm-control", xmlns="urn:brocade.com:mgmt:brocade-bum-storm-control")
        ingress = ET.SubElement(storm_control, "ingress")
        protocol_type = ET.SubElement(ingress, "protocol-type")
        protocol_type.text = kwargs.pop('protocol_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_storm_control_ingress_rate_format(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        storm_control = ET.SubElement(gigabitethernet, "storm-control", xmlns="urn:brocade.com:mgmt:brocade-bum-storm-control")
        ingress = ET.SubElement(storm_control, "ingress")
        protocol_type_key = ET.SubElement(ingress, "protocol-type")
        protocol_type_key.text = kwargs.pop('protocol_type')
        rate_format = ET.SubElement(ingress, "rate-format")
        rate_format.text = kwargs.pop('rate_format')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_storm_control_ingress_rate_bps(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        storm_control = ET.SubElement(gigabitethernet, "storm-control", xmlns="urn:brocade.com:mgmt:brocade-bum-storm-control")
        ingress = ET.SubElement(storm_control, "ingress")
        protocol_type_key = ET.SubElement(ingress, "protocol-type")
        protocol_type_key.text = kwargs.pop('protocol_type')
        rate_bps = ET.SubElement(ingress, "rate-bps")
        rate_bps.text = kwargs.pop('rate_bps')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_storm_control_ingress_rate_percent(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        storm_control = ET.SubElement(gigabitethernet, "storm-control", xmlns="urn:brocade.com:mgmt:brocade-bum-storm-control")
        ingress = ET.SubElement(storm_control, "ingress")
        protocol_type_key = ET.SubElement(ingress, "protocol-type")
        protocol_type_key.text = kwargs.pop('protocol_type')
        rate_percent = ET.SubElement(ingress, "rate-percent")
        rate_percent.text = kwargs.pop('rate_percent')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_storm_control_ingress_bum_action(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        storm_control = ET.SubElement(gigabitethernet, "storm-control", xmlns="urn:brocade.com:mgmt:brocade-bum-storm-control")
        ingress = ET.SubElement(storm_control, "ingress")
        protocol_type_key = ET.SubElement(ingress, "protocol-type")
        protocol_type_key.text = kwargs.pop('protocol_type')
        bum_action = ET.SubElement(ingress, "bum-action")
        bum_action.text = kwargs.pop('bum_action')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_dot1x_authentication(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        dot1x = ET.SubElement(gigabitethernet, "dot1x", xmlns="urn:brocade.com:mgmt:brocade-dot1x")
        authentication = ET.SubElement(dot1x, "authentication")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_dot1x_port_control(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        dot1x = ET.SubElement(gigabitethernet, "dot1x", xmlns="urn:brocade.com:mgmt:brocade-dot1x")
        port_control = ET.SubElement(dot1x, "port-control")
        port_control.text = kwargs.pop('port_control')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_dot1x_protocol_version(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        dot1x = ET.SubElement(gigabitethernet, "dot1x", xmlns="urn:brocade.com:mgmt:brocade-dot1x")
        protocol_version = ET.SubElement(dot1x, "protocol-version")
        protocol_version.text = kwargs.pop('protocol_version')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_dot1x_quiet_period(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        dot1x = ET.SubElement(gigabitethernet, "dot1x", xmlns="urn:brocade.com:mgmt:brocade-dot1x")
        quiet_period = ET.SubElement(dot1x, "quiet-period")
        quiet_period.text = kwargs.pop('quiet_period')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_dot1x_reauthMax(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        dot1x = ET.SubElement(gigabitethernet, "dot1x", xmlns="urn:brocade.com:mgmt:brocade-dot1x")
        reauthMax = ET.SubElement(dot1x, "reauthMax")
        reauthMax.text = kwargs.pop('reauthMax')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_dot1x_reauthentication(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        dot1x = ET.SubElement(gigabitethernet, "dot1x", xmlns="urn:brocade.com:mgmt:brocade-dot1x")
        reauthentication = ET.SubElement(dot1x, "reauthentication")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_dot1x_timeout_re_authperiod(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        dot1x = ET.SubElement(gigabitethernet, "dot1x", xmlns="urn:brocade.com:mgmt:brocade-dot1x")
        timeout = ET.SubElement(dot1x, "timeout")
        re_authperiod = ET.SubElement(timeout, "re-authperiod")
        re_authperiod.text = kwargs.pop('re_authperiod')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_dot1x_timeout_server_timeout(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        dot1x = ET.SubElement(gigabitethernet, "dot1x", xmlns="urn:brocade.com:mgmt:brocade-dot1x")
        timeout = ET.SubElement(dot1x, "timeout")
        server_timeout = ET.SubElement(timeout, "server-timeout")
        server_timeout.text = kwargs.pop('server_timeout')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_dot1x_timeout_supp_timeout(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        dot1x = ET.SubElement(gigabitethernet, "dot1x", xmlns="urn:brocade.com:mgmt:brocade-dot1x")
        timeout = ET.SubElement(dot1x, "timeout")
        supp_timeout = ET.SubElement(timeout, "supp-timeout")
        supp_timeout.text = kwargs.pop('supp_timeout')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_dot1x_timeout_tx_period(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        dot1x = ET.SubElement(gigabitethernet, "dot1x", xmlns="urn:brocade.com:mgmt:brocade-dot1x")
        timeout = ET.SubElement(dot1x, "timeout")
        tx_period = ET.SubElement(timeout, "tx-period")
        tx_period.text = kwargs.pop('tx_period')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_ip_pbr_interface_ip_policy_route_map_route_map_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip_pbr_interface = ET.SubElement(gigabitethernet, "ip-pbr-interface", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        ip = ET.SubElement(ip_pbr_interface, "ip")
        policy = ET.SubElement(ip, "policy")
        route_map = ET.SubElement(policy, "route-map")
        route_map_name = ET.SubElement(route_map, "route-map-name")
        route_map_name.text = kwargs.pop('route_map_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_lacp_timeout(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        lacp = ET.SubElement(gigabitethernet, "lacp", xmlns="urn:brocade.com:mgmt:brocade-lacp")
        timeout = ET.SubElement(lacp, "timeout")
        timeout.text = kwargs.pop('timeout')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_lacp_std_port_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        lacp = ET.SubElement(gigabitethernet, "lacp", xmlns="urn:brocade.com:mgmt:brocade-lacp")
        std_port_priority = ET.SubElement(lacp, "std_port-priority")
        std_port_priority.text = kwargs.pop('std_port_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_lacp_default_up(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        lacp = ET.SubElement(gigabitethernet, "lacp", xmlns="urn:brocade.com:mgmt:brocade-lacp")
        default_up = ET.SubElement(lacp, "default-up")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_lldp_cee_lldp_cee_on_off(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        lldp = ET.SubElement(gigabitethernet, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        cee = ET.SubElement(lldp, "cee")
        lldp_cee_on_off = ET.SubElement(cee, "lldp-cee-on-off")
        lldp_cee_on_off.text = kwargs.pop('lldp_cee_on_off')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_lldp_dcbx_version(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        lldp = ET.SubElement(gigabitethernet, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        dcbx_version = ET.SubElement(lldp, "dcbx-version")
        dcbx_version.text = kwargs.pop('dcbx_version')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_lldp_disable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        lldp = ET.SubElement(gigabitethernet, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        disable = ET.SubElement(lldp, "disable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_lldp_iscsi_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        lldp = ET.SubElement(gigabitethernet, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        iscsi_priority = ET.SubElement(lldp, "iscsi-priority")
        iscsi_priority.text = kwargs.pop('iscsi_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_lldp_profile(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        lldp = ET.SubElement(gigabitethernet, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        profile = ET.SubElement(lldp, "profile")
        profile.text = kwargs.pop('profile')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_connectivity_deviceconnectivity(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        connectivity = ET.SubElement(gigabitethernet, "connectivity", xmlns="urn:brocade.com:mgmt:brocade-maps")
        deviceconnectivity = ET.SubElement(connectivity, "deviceconnectivity")
        deviceconnectivity.text = kwargs.pop('deviceconnectivity')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_service_policy_in_cg(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        service_policy = ET.SubElement(gigabitethernet, "service-policy", xmlns="urn:brocade.com:mgmt:brocade-policer")
        in_cg = ET.SubElement(service_policy, "in")
        in_cg.text = kwargs.pop('in_cg')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_service_policy_out(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        service_policy = ET.SubElement(gigabitethernet, "service-policy", xmlns="urn:brocade.com:mgmt:brocade-policer")
        out = ET.SubElement(service_policy, "out")
        out.text = kwargs.pop('out')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_port_profile_port(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        port_profile_port = ET.SubElement(gigabitethernet, "port-profile-port", xmlns="urn:brocade.com:mgmt:brocade-port-profile")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_port_profile_to_interface_associations_port_profile_port_port_to_port_profile_domain_association_profile_domain_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        port_profile_to_interface_associations = ET.SubElement(gigabitethernet, "port-profile-to-interface-associations", xmlns="urn:brocade.com:mgmt:brocade-port-profile")
        port_profile_port = ET.SubElement(port_profile_to_interface_associations, "port-profile-port")
        port_to_port_profile_domain_association = ET.SubElement(port_profile_port, "port-to-port-profile-domain-association")
        profile_domain_name = ET.SubElement(port_to_port_profile_domain_association, "profile-domain-name")
        profile_domain_name.text = kwargs.pop('profile_domain_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_port_profile_to_interface_associations_port_profile_port_port_to_port_profile_associations_port_to_port_profile_association(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        port_profile_to_interface_associations = ET.SubElement(gigabitethernet, "port-profile-to-interface-associations", xmlns="urn:brocade.com:mgmt:brocade-port-profile")
        port_profile_port = ET.SubElement(port_profile_to_interface_associations, "port-profile-port")
        port_to_port_profile_associations = ET.SubElement(port_profile_port, "port-to-port-profile-associations")
        port_to_port_profile_association = ET.SubElement(port_to_port_profile_associations, "port-to-port-profile-association")
        port_to_port_profile_association.text = kwargs.pop('port_to_port_profile_association')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_priority_tag_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        priority_tag_enable = ET.SubElement(gigabitethernet, "priority-tag-enable", xmlns="urn:brocade.com:mgmt:brocade-qos")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_qos_default_cos(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(gigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        default_cos = ET.SubElement(qos, "default-cos")
        default_cos.text = kwargs.pop('default_cos')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_qos_trust_trust_cos(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(gigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        trust = ET.SubElement(qos, "trust")
        trust_cos = ET.SubElement(trust, "trust-cos")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_qos_trust_trust_dscp(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(gigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        trust = ET.SubElement(qos, "trust")
        trust_dscp = ET.SubElement(trust, "trust-dscp")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_qos_cos_mutation(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(gigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        cos_mutation = ET.SubElement(qos, "cos-mutation")
        cos_mutation.text = kwargs.pop('cos_mutation')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_qos_cos_traffic_class(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(gigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        cos_traffic_class = ET.SubElement(qos, "cos-traffic-class")
        cos_traffic_class.text = kwargs.pop('cos_traffic_class')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_qos_dscp_mutation(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(gigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        dscp_mutation = ET.SubElement(qos, "dscp-mutation")
        dscp_mutation.text = kwargs.pop('dscp_mutation')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_qos_dscp_traffic_class(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(gigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        dscp_traffic_class = ET.SubElement(qos, "dscp-traffic-class")
        dscp_traffic_class.text = kwargs.pop('dscp_traffic_class')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_qos_dscp_cos(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(gigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        dscp_cos = ET.SubElement(qos, "dscp-cos")
        dscp_cos.text = kwargs.pop('dscp_cos')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_qos_random_detect_traffic_class_red_tc_value(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(gigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        random_detect = ET.SubElement(qos, "random-detect")
        traffic_class = ET.SubElement(random_detect, "traffic-class")
        red_tc_value = ET.SubElement(traffic_class, "red-tc-value")
        red_tc_value.text = kwargs.pop('red_tc_value')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_qos_random_detect_traffic_class_red_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(gigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        random_detect = ET.SubElement(qos, "random-detect")
        traffic_class = ET.SubElement(random_detect, "traffic-class")
        red_tc_value_key = ET.SubElement(traffic_class, "red-tc-value")
        red_tc_value_key.text = kwargs.pop('red_tc_value')
        red_enable = ET.SubElement(traffic_class, "red-enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_qos_random_detect_traffic_class_red_profile_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(gigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        random_detect = ET.SubElement(qos, "random-detect")
        traffic_class = ET.SubElement(random_detect, "traffic-class")
        red_tc_value_key = ET.SubElement(traffic_class, "red-tc-value")
        red_tc_value_key.text = kwargs.pop('red_tc_value')
        red_profile_id = ET.SubElement(traffic_class, "red-profile-id")
        red_profile_id.text = kwargs.pop('red_profile_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_qos_drop_monitor_drop_monitor_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(gigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        drop_monitor = ET.SubElement(qos, "drop-monitor")
        drop_monitor_enable = ET.SubElement(drop_monitor, "drop-monitor-enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_qos_rcv_queue_cos_threshold_cos0_threshold(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(gigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        rcv_queue = ET.SubElement(qos, "rcv-queue")
        cos_threshold = ET.SubElement(rcv_queue, "cos-threshold")
        cos0_threshold = ET.SubElement(cos_threshold, "cos0-threshold")
        cos0_threshold.text = kwargs.pop('cos0_threshold')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_qos_rcv_queue_cos_threshold_cos1_threshold(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(gigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        rcv_queue = ET.SubElement(qos, "rcv-queue")
        cos_threshold = ET.SubElement(rcv_queue, "cos-threshold")
        cos1_threshold = ET.SubElement(cos_threshold, "cos1-threshold")
        cos1_threshold.text = kwargs.pop('cos1_threshold')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_qos_rcv_queue_cos_threshold_cos2_threshold(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(gigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        rcv_queue = ET.SubElement(qos, "rcv-queue")
        cos_threshold = ET.SubElement(rcv_queue, "cos-threshold")
        cos2_threshold = ET.SubElement(cos_threshold, "cos2-threshold")
        cos2_threshold.text = kwargs.pop('cos2_threshold')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_qos_rcv_queue_cos_threshold_cos3_threshold(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(gigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        rcv_queue = ET.SubElement(qos, "rcv-queue")
        cos_threshold = ET.SubElement(rcv_queue, "cos-threshold")
        cos3_threshold = ET.SubElement(cos_threshold, "cos3-threshold")
        cos3_threshold.text = kwargs.pop('cos3_threshold')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_qos_rcv_queue_cos_threshold_cos4_threshold(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(gigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        rcv_queue = ET.SubElement(qos, "rcv-queue")
        cos_threshold = ET.SubElement(rcv_queue, "cos-threshold")
        cos4_threshold = ET.SubElement(cos_threshold, "cos4-threshold")
        cos4_threshold.text = kwargs.pop('cos4_threshold')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_qos_rcv_queue_cos_threshold_cos5_threshold(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(gigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        rcv_queue = ET.SubElement(qos, "rcv-queue")
        cos_threshold = ET.SubElement(rcv_queue, "cos-threshold")
        cos5_threshold = ET.SubElement(cos_threshold, "cos5-threshold")
        cos5_threshold.text = kwargs.pop('cos5_threshold')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_qos_rcv_queue_cos_threshold_cos6_threshold(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(gigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        rcv_queue = ET.SubElement(qos, "rcv-queue")
        cos_threshold = ET.SubElement(rcv_queue, "cos-threshold")
        cos6_threshold = ET.SubElement(cos_threshold, "cos6-threshold")
        cos6_threshold.text = kwargs.pop('cos6_threshold')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_qos_rcv_queue_cos_threshold_cos7_threshold(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(gigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        rcv_queue = ET.SubElement(qos, "rcv-queue")
        cos_threshold = ET.SubElement(rcv_queue, "cos-threshold")
        cos7_threshold = ET.SubElement(cos_threshold, "cos7-threshold")
        cos7_threshold.text = kwargs.pop('cos7_threshold')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_qos_flowcontrol_link_level_flowcontrol_flowcontrol_tx(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(gigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        flowcontrol = ET.SubElement(qos, "flowcontrol")
        link_level_flowcontrol = ET.SubElement(flowcontrol, "link-level-flowcontrol")
        flowcontrol_tx = ET.SubElement(link_level_flowcontrol, "flowcontrol-tx")
        flowcontrol_tx.text = kwargs.pop('flowcontrol_tx')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_qos_flowcontrol_link_level_flowcontrol_flowcontrol_rx(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(gigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        flowcontrol = ET.SubElement(qos, "flowcontrol")
        link_level_flowcontrol = ET.SubElement(flowcontrol, "link-level-flowcontrol")
        flowcontrol_rx = ET.SubElement(link_level_flowcontrol, "flowcontrol-rx")
        flowcontrol_rx.text = kwargs.pop('flowcontrol_rx')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_rmon_collection_ether_stats_entry_ether_stats_index(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        rmon = ET.SubElement(gigabitethernet, "rmon", xmlns="urn:brocade.com:mgmt:brocade-rmon")
        collection = ET.SubElement(rmon, "collection")
        ether_stats_entry = ET.SubElement(collection, "ether-stats-entry")
        ether_stats_index = ET.SubElement(ether_stats_entry, "ether-stats-index")
        ether_stats_index.text = kwargs.pop('ether_stats_index')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_rmon_collection_ether_stats_entry_ether_stats_owner(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        rmon = ET.SubElement(gigabitethernet, "rmon", xmlns="urn:brocade.com:mgmt:brocade-rmon")
        collection = ET.SubElement(rmon, "collection")
        ether_stats_entry = ET.SubElement(collection, "ether-stats-entry")
        ether_stats_index_key = ET.SubElement(ether_stats_entry, "ether-stats-index")
        ether_stats_index_key.text = kwargs.pop('ether_stats_index')
        ether_stats_owner = ET.SubElement(ether_stats_entry, "ether-stats-owner")
        ether_stats_owner.text = kwargs.pop('ether_stats_owner')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_rmon_collection_history_control_entry_history_control_index(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        rmon = ET.SubElement(gigabitethernet, "rmon", xmlns="urn:brocade.com:mgmt:brocade-rmon")
        collection = ET.SubElement(rmon, "collection")
        history_control_entry = ET.SubElement(collection, "history-control-entry")
        history_control_index = ET.SubElement(history_control_entry, "history-control-index")
        history_control_index.text = kwargs.pop('history_control_index')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_rmon_collection_history_control_entry_history_control_buckets_requested(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        rmon = ET.SubElement(gigabitethernet, "rmon", xmlns="urn:brocade.com:mgmt:brocade-rmon")
        collection = ET.SubElement(rmon, "collection")
        history_control_entry = ET.SubElement(collection, "history-control-entry")
        history_control_index_key = ET.SubElement(history_control_entry, "history-control-index")
        history_control_index_key.text = kwargs.pop('history_control_index')
        history_control_buckets_requested = ET.SubElement(history_control_entry, "history-control-buckets-requested")
        history_control_buckets_requested.text = kwargs.pop('history_control_buckets_requested')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_rmon_collection_history_control_entry_history_control_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        rmon = ET.SubElement(gigabitethernet, "rmon", xmlns="urn:brocade.com:mgmt:brocade-rmon")
        collection = ET.SubElement(rmon, "collection")
        history_control_entry = ET.SubElement(collection, "history-control-entry")
        history_control_index_key = ET.SubElement(history_control_entry, "history-control-index")
        history_control_index_key.text = kwargs.pop('history_control_index')
        history_control_interval = ET.SubElement(history_control_entry, "history-control-interval")
        history_control_interval.text = kwargs.pop('history_control_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_rmon_collection_history_control_entry_history_control_owner(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        rmon = ET.SubElement(gigabitethernet, "rmon", xmlns="urn:brocade.com:mgmt:brocade-rmon")
        collection = ET.SubElement(rmon, "collection")
        history_control_entry = ET.SubElement(collection, "history-control-entry")
        history_control_index_key = ET.SubElement(history_control_entry, "history-control-index")
        history_control_index_key.text = kwargs.pop('history_control_index')
        history_control_owner = ET.SubElement(history_control_entry, "history-control-owner")
        history_control_owner.text = kwargs.pop('history_control_owner')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_udld_udld_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        udld = ET.SubElement(gigabitethernet, "udld", xmlns="urn:brocade.com:mgmt:brocade-udld")
        udld_enable = ET.SubElement(udld, "udld-enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_vlan_classifier_activate_group_groupid(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vlan = ET.SubElement(gigabitethernet, "vlan", xmlns="urn:brocade.com:mgmt:brocade-vlan")
        classifier = ET.SubElement(vlan, "classifier")
        activate = ET.SubElement(classifier, "activate")
        group = ET.SubElement(activate, "group")
        groupid = ET.SubElement(group, "groupid")
        groupid.text = kwargs.pop('groupid')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_vlan_classifier_activate_group_vlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vlan = ET.SubElement(gigabitethernet, "vlan", xmlns="urn:brocade.com:mgmt:brocade-vlan")
        classifier = ET.SubElement(vlan, "classifier")
        activate = ET.SubElement(classifier, "activate")
        group = ET.SubElement(activate, "group")
        groupid_key = ET.SubElement(group, "groupid")
        groupid_key.text = kwargs.pop('groupid')
        vlan = ET.SubElement(group, "vlan")
        vlan.text = kwargs.pop('vlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_bpdu_drop_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        bpdu_drop = ET.SubElement(gigabitethernet, "bpdu-drop", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        enable = ET.SubElement(bpdu_drop, "enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_bpdu_drop_direction(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        bpdu_drop = ET.SubElement(gigabitethernet, "bpdu-drop", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        direction = ET.SubElement(bpdu_drop, "direction")
        direction.text = kwargs.pop('direction')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_tunnel_tagged_ieee_bpdu(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        tunnel = ET.SubElement(gigabitethernet, "tunnel", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        tagged_ieee_bpdu = ET.SubElement(tunnel, "tagged-ieee-bpdu")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_spanning_tree_autoedge(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(gigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        autoedge = ET.SubElement(spanning_tree, "autoedge")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_spanning_tree_cost(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(gigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        cost = ET.SubElement(spanning_tree, "cost")
        cost.text = kwargs.pop('cost')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_spanning_tree_portfast_portfastbasic(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(gigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        portfast = ET.SubElement(spanning_tree, "portfast")
        portfastbasic = ET.SubElement(portfast, "portfastbasic")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_spanning_tree_portfast_bpdu_guard(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(gigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        portfast = ET.SubElement(spanning_tree, "portfast")
        bpdu_guard = ET.SubElement(portfast, "bpdu-guard")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_spanning_tree_portfast_bpdu_filter(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(gigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        portfast = ET.SubElement(spanning_tree, "portfast")
        bpdu_filter = ET.SubElement(portfast, "bpdu-filter")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_spanning_tree_edgeport_edgeportbasic(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(gigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        edgeport = ET.SubElement(spanning_tree, "edgeport")
        edgeportbasic = ET.SubElement(edgeport, "edgeportbasic")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_spanning_tree_edgeport_bpdu_guard(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(gigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        edgeport = ET.SubElement(spanning_tree, "edgeport")
        bpdu_guard = ET.SubElement(edgeport, "bpdu-guard")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_spanning_tree_edgeport_bpdu_filter(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(gigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        edgeport = ET.SubElement(spanning_tree, "edgeport")
        bpdu_filter = ET.SubElement(edgeport, "bpdu-filter")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_spanning_tree_guard_root(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(gigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        guard = ET.SubElement(spanning_tree, "guard")
        root = ET.SubElement(guard, "root")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_spanning_tree_hello_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(gigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        hello_time = ET.SubElement(spanning_tree, "hello-time")
        hello_time.text = kwargs.pop('hello_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_spanning_tree_bpdu_mac(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(gigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        bpdu_mac = ET.SubElement(spanning_tree, "bpdu-mac")
        bpdu_mac.text = kwargs.pop('bpdu_mac')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_spanning_tree_link_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(gigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        link_type = ET.SubElement(spanning_tree, "link-type")
        link_type.text = kwargs.pop('link_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_spanning_tree_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(gigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        priority = ET.SubElement(spanning_tree, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_spanning_tree_restricted_role(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(gigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        restricted_role = ET.SubElement(spanning_tree, "restricted-role")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_spanning_tree_restricted_tcn(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(gigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        restricted_tcn = ET.SubElement(spanning_tree, "restricted-tcn")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_spanning_tree_shutdown(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(gigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        shutdown = ET.SubElement(spanning_tree, "shutdown")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_spanning_tree_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(gigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        vlan = ET.SubElement(spanning_tree, "vlan")
        id = ET.SubElement(vlan, "id")
        id.text = kwargs.pop('id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_spanning_tree_vlan_cost(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(gigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        vlan = ET.SubElement(spanning_tree, "vlan")
        id_key = ET.SubElement(vlan, "id")
        id_key.text = kwargs.pop('id')
        cost = ET.SubElement(vlan, "cost")
        cost.text = kwargs.pop('cost')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_spanning_tree_vlan_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(gigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        vlan = ET.SubElement(spanning_tree, "vlan")
        id_key = ET.SubElement(vlan, "id")
        id_key.text = kwargs.pop('id')
        priority = ET.SubElement(vlan, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_spanning_tree_vlan_guard_root(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(gigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        vlan = ET.SubElement(spanning_tree, "vlan")
        id_key = ET.SubElement(vlan, "id")
        id_key.text = kwargs.pop('id')
        guard = ET.SubElement(vlan, "guard")
        root = ET.SubElement(guard, "root")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_spanning_tree_instance_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(gigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        instance = ET.SubElement(spanning_tree, "instance")
        id = ET.SubElement(instance, "id")
        id.text = kwargs.pop('id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_spanning_tree_instance_cost(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(gigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        instance = ET.SubElement(spanning_tree, "instance")
        id_key = ET.SubElement(instance, "id")
        id_key.text = kwargs.pop('id')
        cost = ET.SubElement(instance, "cost")
        cost.text = kwargs.pop('cost')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_spanning_tree_instance_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(gigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        instance = ET.SubElement(spanning_tree, "instance")
        id_key = ET.SubElement(instance, "id")
        id_key.text = kwargs.pop('id')
        priority = ET.SubElement(instance, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_spanning_tree_instance_restricted_role(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(gigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        instance = ET.SubElement(spanning_tree, "instance")
        id_key = ET.SubElement(instance, "id")
        id_key.text = kwargs.pop('id')
        restricted_role = ET.SubElement(instance, "restricted-role")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_gigabitethernet_spanning_tree_instance_restricted_tcn(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        gigabitethernet = ET.SubElement(interface, "gigabitethernet")
        name_key = ET.SubElement(gigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(gigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        instance = ET.SubElement(spanning_tree, "instance")
        id_key = ET.SubElement(instance, "id")
        id_key.text = kwargs.pop('id')
        restricted_tcn = ET.SubElement(instance, "restricted-tcn")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name = ET.SubElement(tengigabitethernet, "name")
        name.text = kwargs.pop('name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_long_distance_isl(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        long_distance_isl = ET.SubElement(tengigabitethernet, "long-distance-isl")
        long_distance_isl.text = kwargs.pop('long_distance_isl')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_cee(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        cee = ET.SubElement(tengigabitethernet, "cee")
        cee.text = kwargs.pop('cee')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_speed(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        speed = ET.SubElement(tengigabitethernet, "speed")
        speed.text = kwargs.pop('speed')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ifindex(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ifindex = ET.SubElement(tengigabitethernet, "ifindex")
        ifindex.text = kwargs.pop('ifindex')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_description(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        description = ET.SubElement(tengigabitethernet, "description")
        description.text = kwargs.pop('description')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_shutdown(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        shutdown = ET.SubElement(tengigabitethernet, "shutdown")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_channel_group_port_int(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        channel_group = ET.SubElement(tengigabitethernet, "channel-group")
        port_int = ET.SubElement(channel_group, "port-int")
        port_int.text = kwargs.pop('port_int')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_channel_group_mode(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        channel_group = ET.SubElement(tengigabitethernet, "channel-group")
        mode = ET.SubElement(channel_group, "mode")
        mode.text = kwargs.pop('mode')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_channel_group_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        channel_group = ET.SubElement(tengigabitethernet, "channel-group")
        type = ET.SubElement(channel_group, "type")
        type.text = kwargs.pop('type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_mtu(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        mtu = ET.SubElement(tengigabitethernet, "mtu")
        mtu.text = kwargs.pop('mtu')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_basic_basic(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport_basic = ET.SubElement(tengigabitethernet, "switchport-basic")
        basic = ET.SubElement(switchport_basic, "basic")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_mode_vlan_mode(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        mode = ET.SubElement(switchport, "mode")
        vlan_mode = ET.SubElement(mode, "vlan-mode")
        vlan_mode.text = kwargs.pop('vlan_mode')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_mode_private_vlan_private_vlan_trunk_trunk_basic(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        mode = ET.SubElement(switchport, "mode")
        private_vlan = ET.SubElement(mode, "private-vlan")
        private_vlan_trunk = ET.SubElement(private_vlan, "private-vlan-trunk")
        trunk_basic = ET.SubElement(private_vlan_trunk, "trunk-basic")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_mode_private_vlan_private_vlan_trunk_trunk_promiscuous(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        mode = ET.SubElement(switchport, "mode")
        private_vlan = ET.SubElement(mode, "private-vlan")
        private_vlan_trunk = ET.SubElement(private_vlan, "private-vlan-trunk")
        trunk_promiscuous = ET.SubElement(private_vlan_trunk, "trunk-promiscuous")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_mode_private_vlan_private_vlan_trunk_trunk_host(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        mode = ET.SubElement(switchport, "mode")
        private_vlan = ET.SubElement(mode, "private-vlan")
        private_vlan_trunk = ET.SubElement(private_vlan, "private-vlan-trunk")
        trunk_host = ET.SubElement(private_vlan_trunk, "trunk-host")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_mode_private_vlan_promiscuous(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        mode = ET.SubElement(switchport, "mode")
        private_vlan = ET.SubElement(mode, "private-vlan")
        promiscuous = ET.SubElement(private_vlan, "promiscuous")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_mode_private_vlan_host(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        mode = ET.SubElement(switchport, "mode")
        private_vlan = ET.SubElement(mode, "private-vlan")
        host = ET.SubElement(private_vlan, "host")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_port_security_port_sec_max(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        port_security = ET.SubElement(switchport, "port-security")
        port_sec_max = ET.SubElement(port_security, "port-sec-max")
        port_sec_max.text = kwargs.pop('port_sec_max')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_port_security_port_sec_violation(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        port_security = ET.SubElement(switchport, "port-security")
        port_sec_violation = ET.SubElement(port_security, "port-sec-violation")
        port_sec_violation.text = kwargs.pop('port_sec_violation')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_port_security_port_secutiry_mac_address_mac_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        port_security = ET.SubElement(switchport, "port-security")
        port_secutiry_mac_address = ET.SubElement(port_security, "port-secutiry-mac-address")
        port_sec_vlan_key = ET.SubElement(port_secutiry_mac_address, "port-sec-vlan")
        port_sec_vlan_key.text = kwargs.pop('port_sec_vlan')
        mac_address = ET.SubElement(port_secutiry_mac_address, "mac-address")
        mac_address.text = kwargs.pop('mac_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_port_security_port_secutiry_mac_address_port_sec_vlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        port_security = ET.SubElement(switchport, "port-security")
        port_secutiry_mac_address = ET.SubElement(port_security, "port-secutiry-mac-address")
        mac_address_key = ET.SubElement(port_secutiry_mac_address, "mac-address")
        mac_address_key.text = kwargs.pop('mac_address')
        port_sec_vlan = ET.SubElement(port_secutiry_mac_address, "port-sec-vlan")
        port_sec_vlan.text = kwargs.pop('port_sec_vlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_port_security_sticky_sticky_flag(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        port_security = ET.SubElement(switchport, "port-security")
        sticky = ET.SubElement(port_security, "sticky")
        sticky_flag = ET.SubElement(sticky, "sticky-flag")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_port_security_sticky_port_secutiry_mac_address_mac_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        port_security = ET.SubElement(switchport, "port-security")
        sticky = ET.SubElement(port_security, "sticky")
        port_secutiry_mac_address = ET.SubElement(sticky, "port-secutiry-mac-address")
        port_sec_vlan_key = ET.SubElement(port_secutiry_mac_address, "port-sec-vlan")
        port_sec_vlan_key.text = kwargs.pop('port_sec_vlan')
        mac_address = ET.SubElement(port_secutiry_mac_address, "mac-address")
        mac_address.text = kwargs.pop('mac_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_port_security_sticky_port_secutiry_mac_address_port_sec_vlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        port_security = ET.SubElement(switchport, "port-security")
        sticky = ET.SubElement(port_security, "sticky")
        port_secutiry_mac_address = ET.SubElement(sticky, "port-secutiry-mac-address")
        mac_address_key = ET.SubElement(port_secutiry_mac_address, "mac-address")
        mac_address_key.text = kwargs.pop('mac_address')
        port_sec_vlan = ET.SubElement(port_secutiry_mac_address, "port-sec-vlan")
        port_sec_vlan.text = kwargs.pop('port_sec_vlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_port_security_allowed_ouis_oui(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        port_security = ET.SubElement(switchport, "port-security")
        allowed_ouis = ET.SubElement(port_security, "allowed-ouis")
        oui = ET.SubElement(allowed_ouis, "oui")
        oui.text = kwargs.pop('oui')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_port_security_shutdown_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        port_security = ET.SubElement(switchport, "port-security")
        shutdown_time = ET.SubElement(port_security, "shutdown-time")
        shutdown_time.text = kwargs.pop('shutdown_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_access_accessvlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        access = ET.SubElement(switchport, "access")
        accessvlan = ET.SubElement(access, "accessvlan")
        accessvlan.text = kwargs.pop('accessvlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_access_rspan_access_rspan_access_vlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        access = ET.SubElement(switchport, "access")
        rspan_access = ET.SubElement(access, "rspan-access")
        rspan_access_vlan = ET.SubElement(rspan_access, "rspan-access-vlan")
        rspan_access_vlan.text = kwargs.pop('rspan_access_vlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_access_mac_vlan_classification_access_vlan_access_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        access_mac_vlan_classification = ET.SubElement(switchport, "access-mac-vlan-classification")
        access = ET.SubElement(access_mac_vlan_classification, "access")
        vlan = ET.SubElement(access, "vlan")
        access_mac_address_key = ET.SubElement(vlan, "access-mac-address")
        access_mac_address_key.text = kwargs.pop('access_mac_address')
        access_vlan_id = ET.SubElement(vlan, "access-vlan-id")
        access_vlan_id.text = kwargs.pop('access_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_access_mac_vlan_classification_access_vlan_access_mac_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        access_mac_vlan_classification = ET.SubElement(switchport, "access-mac-vlan-classification")
        access = ET.SubElement(access_mac_vlan_classification, "access")
        vlan = ET.SubElement(access, "vlan")
        access_vlan_id_key = ET.SubElement(vlan, "access-vlan-id")
        access_vlan_id_key.text = kwargs.pop('access_vlan_id')
        access_mac_address = ET.SubElement(vlan, "access-mac-address")
        access_mac_address.text = kwargs.pop('access_mac_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_trunk_private_vlan_classification_private_vlan_trunk_allowed_vlan_add_trunk_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        trunk_private_vlan_classification = ET.SubElement(switchport, "trunk-private-vlan-classification")
        private_vlan = ET.SubElement(trunk_private_vlan_classification, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        add = ET.SubElement(vlan, "add")
        trunk_ctag_id_key = ET.SubElement(add, "trunk-ctag-id")
        trunk_ctag_id_key.text = kwargs.pop('trunk_ctag_id')
        trunk_vlan_id = ET.SubElement(add, "trunk-vlan-id")
        trunk_vlan_id.text = kwargs.pop('trunk_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_trunk_private_vlan_classification_private_vlan_trunk_allowed_vlan_add_trunk_ctag_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        trunk_private_vlan_classification = ET.SubElement(switchport, "trunk-private-vlan-classification")
        private_vlan = ET.SubElement(trunk_private_vlan_classification, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        add = ET.SubElement(vlan, "add")
        trunk_vlan_id_key = ET.SubElement(add, "trunk-vlan-id")
        trunk_vlan_id_key.text = kwargs.pop('trunk_vlan_id')
        trunk_ctag_id = ET.SubElement(add, "trunk-ctag-id")
        trunk_ctag_id.text = kwargs.pop('trunk_ctag_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_trunk_private_vlan_classification_private_vlan_trunk_allowed_vlan_remove_trunk_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        trunk_private_vlan_classification = ET.SubElement(switchport, "trunk-private-vlan-classification")
        private_vlan = ET.SubElement(trunk_private_vlan_classification, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        remove = ET.SubElement(vlan, "remove")
        trunk_ctag_id_key = ET.SubElement(remove, "trunk-ctag-id")
        trunk_ctag_id_key.text = kwargs.pop('trunk_ctag_id')
        trunk_vlan_id = ET.SubElement(remove, "trunk-vlan-id")
        trunk_vlan_id.text = kwargs.pop('trunk_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_trunk_private_vlan_classification_private_vlan_trunk_allowed_vlan_remove_trunk_ctag_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        trunk_private_vlan_classification = ET.SubElement(switchport, "trunk-private-vlan-classification")
        private_vlan = ET.SubElement(trunk_private_vlan_classification, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        remove = ET.SubElement(vlan, "remove")
        trunk_vlan_id_key = ET.SubElement(remove, "trunk-vlan-id")
        trunk_vlan_id_key.text = kwargs.pop('trunk_vlan_id')
        trunk_ctag_id = ET.SubElement(remove, "trunk-ctag-id")
        trunk_ctag_id.text = kwargs.pop('trunk_ctag_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_access_mac_group_vlan_classification_access_vlan_access_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        access_mac_group_vlan_classification = ET.SubElement(switchport, "access-mac-group-vlan-classification")
        access = ET.SubElement(access_mac_group_vlan_classification, "access")
        vlan = ET.SubElement(access, "vlan")
        access_mac_group_key = ET.SubElement(vlan, "access-mac-group")
        access_mac_group_key.text = kwargs.pop('access_mac_group')
        access_vlan_id = ET.SubElement(vlan, "access-vlan-id")
        access_vlan_id.text = kwargs.pop('access_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_access_mac_group_vlan_classification_access_vlan_access_mac_group(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        access_mac_group_vlan_classification = ET.SubElement(switchport, "access-mac-group-vlan-classification")
        access = ET.SubElement(access_mac_group_vlan_classification, "access")
        vlan = ET.SubElement(access, "vlan")
        access_vlan_id_key = ET.SubElement(vlan, "access-vlan-id")
        access_vlan_id_key.text = kwargs.pop('access_vlan_id')
        access_mac_group = ET.SubElement(vlan, "access-mac-group")
        access_mac_group.text = kwargs.pop('access_mac_group')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_trunk_allowed_vlan_all(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        all = ET.SubElement(vlan, "all")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_trunk_allowed_vlan_none(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        none = ET.SubElement(vlan, "none")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_trunk_allowed_vlan_add(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        add = ET.SubElement(vlan, "add")
        add.text = kwargs.pop('add')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_trunk_allowed_vlan_excpt(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        excpt = ET.SubElement(vlan, "except")
        excpt.text = kwargs.pop('excpt')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_trunk_allowed_vlan_remove(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        remove = ET.SubElement(vlan, "remove")
        remove.text = kwargs.pop('remove')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_trunk_allowed_vlanoper_vlan_add(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlanoper = ET.SubElement(allowed, "vlanoper")
        vlan = ET.SubElement(vlanoper, "vlan")
        add = ET.SubElement(vlan, "add")
        add.text = kwargs.pop('add')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_trunk_allowed_vlanoper_vlan_remove(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlanoper = ET.SubElement(allowed, "vlanoper")
        vlan = ET.SubElement(vlanoper, "vlan")
        remove = ET.SubElement(vlan, "remove")
        remove.text = kwargs.pop('remove')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_trunk_allowed_rspan_vlan_add_rspan_trunk_vlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        rspan_vlan = ET.SubElement(allowed, "rspan-vlan")
        add_rspan_trunk_vlan = ET.SubElement(rspan_vlan, "add-rspan-trunk-vlan")
        add_rspan_trunk_vlan.text = kwargs.pop('add_rspan_trunk_vlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_trunk_allowed_rspan_vlan_remove_rspan_trunk_vlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        rspan_vlan = ET.SubElement(allowed, "rspan-vlan")
        remove_rspan_trunk_vlan = ET.SubElement(rspan_vlan, "remove-rspan-trunk-vlan")
        remove_rspan_trunk_vlan.text = kwargs.pop('remove_rspan_trunk_vlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_trunk_allowed_trunk_rspan_vlan_classification_rspan_vlan_add_trunk_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        trunk_rspan_vlan_classification = ET.SubElement(allowed, "trunk-rspan-vlan-classification")
        rspan_vlan = ET.SubElement(trunk_rspan_vlan_classification, "rspan-vlan")
        add = ET.SubElement(rspan_vlan, "add")
        trunk_ctag_id_key = ET.SubElement(add, "trunk-ctag-id")
        trunk_ctag_id_key.text = kwargs.pop('trunk_ctag_id')
        trunk_vlan_id = ET.SubElement(add, "trunk-vlan-id")
        trunk_vlan_id.text = kwargs.pop('trunk_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_trunk_allowed_trunk_rspan_vlan_classification_rspan_vlan_add_trunk_ctag_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        trunk_rspan_vlan_classification = ET.SubElement(allowed, "trunk-rspan-vlan-classification")
        rspan_vlan = ET.SubElement(trunk_rspan_vlan_classification, "rspan-vlan")
        add = ET.SubElement(rspan_vlan, "add")
        trunk_vlan_id_key = ET.SubElement(add, "trunk-vlan-id")
        trunk_vlan_id_key.text = kwargs.pop('trunk_vlan_id')
        trunk_ctag_id = ET.SubElement(add, "trunk-ctag-id")
        trunk_ctag_id.text = kwargs.pop('trunk_ctag_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_trunk_allowed_trunk_rspan_vlan_classification_rspan_vlan_remove_trunk_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        trunk_rspan_vlan_classification = ET.SubElement(allowed, "trunk-rspan-vlan-classification")
        rspan_vlan = ET.SubElement(trunk_rspan_vlan_classification, "rspan-vlan")
        remove = ET.SubElement(rspan_vlan, "remove")
        trunk_ctag_id_key = ET.SubElement(remove, "trunk-ctag-id")
        trunk_ctag_id_key.text = kwargs.pop('trunk_ctag_id')
        trunk_vlan_id = ET.SubElement(remove, "trunk-vlan-id")
        trunk_vlan_id.text = kwargs.pop('trunk_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_trunk_allowed_trunk_rspan_vlan_classification_rspan_vlan_remove_trunk_ctag_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        trunk_rspan_vlan_classification = ET.SubElement(allowed, "trunk-rspan-vlan-classification")
        rspan_vlan = ET.SubElement(trunk_rspan_vlan_classification, "rspan-vlan")
        remove = ET.SubElement(rspan_vlan, "remove")
        trunk_vlan_id_key = ET.SubElement(remove, "trunk-vlan-id")
        trunk_vlan_id_key.text = kwargs.pop('trunk_vlan_id')
        trunk_ctag_id = ET.SubElement(remove, "trunk-ctag-id")
        trunk_ctag_id.text = kwargs.pop('trunk_ctag_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_trunk_trunk_vlan_classification_allowed_vlan_add_trunk_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        trunk_vlan_classification = ET.SubElement(trunk, "trunk-vlan-classification")
        allowed = ET.SubElement(trunk_vlan_classification, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        add = ET.SubElement(vlan, "add")
        trunk_vlan_id = ET.SubElement(add, "trunk-vlan-id")
        trunk_vlan_id.text = kwargs.pop('trunk_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_trunk_trunk_vlan_classification_allowed_vlan_add_trunk_ctag_range(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        trunk_vlan_classification = ET.SubElement(trunk, "trunk-vlan-classification")
        allowed = ET.SubElement(trunk_vlan_classification, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        add = ET.SubElement(vlan, "add")
        trunk_vlan_id_key = ET.SubElement(add, "trunk-vlan-id")
        trunk_vlan_id_key.text = kwargs.pop('trunk_vlan_id')
        trunk_ctag_range = ET.SubElement(add, "trunk-ctag-range")
        trunk_ctag_range.text = kwargs.pop('trunk_ctag_range')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_trunk_trunk_vlan_classification_allowed_vlan_remove_trunk_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        trunk_vlan_classification = ET.SubElement(trunk, "trunk-vlan-classification")
        allowed = ET.SubElement(trunk_vlan_classification, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        remove = ET.SubElement(vlan, "remove")
        trunk_vlan_id = ET.SubElement(remove, "trunk-vlan-id")
        trunk_vlan_id.text = kwargs.pop('trunk_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_trunk_trunk_vlan_classification_allowed_vlan_remove_trunk_ctag_range(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        trunk_vlan_classification = ET.SubElement(trunk, "trunk-vlan-classification")
        allowed = ET.SubElement(trunk_vlan_classification, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        remove = ET.SubElement(vlan, "remove")
        trunk_vlan_id_key = ET.SubElement(remove, "trunk-vlan-id")
        trunk_vlan_id_key.text = kwargs.pop('trunk_vlan_id')
        trunk_ctag_range = ET.SubElement(remove, "trunk-ctag-range")
        trunk_ctag_range.text = kwargs.pop('trunk_ctag_range')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_trunk_default_vlan_config_default_transparent_vlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        default_vlan_config = ET.SubElement(trunk, "default-vlan-config")
        default_transparent_vlan = ET.SubElement(default_vlan_config, "default-transparent-vlan")
        default_transparent_vlan.text = kwargs.pop('default_transparent_vlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_trunk_tag_native_vlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        tag = ET.SubElement(trunk, "tag")
        native_vlan = ET.SubElement(tag, "native-vlan")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_trunk_native_vlan_classification_native_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        native_vlan_classification = ET.SubElement(trunk, "native-vlan-classification")
        native_vlan_id = ET.SubElement(native_vlan_classification, "native-vlan-id")
        native_vlan_id.text = kwargs.pop('native_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_trunk_native_vlan_classification_native_vlan_ctag_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        native_vlan_classification = ET.SubElement(trunk, "native-vlan-classification")
        native_vlan_ctag_id = ET.SubElement(native_vlan_classification, "native-vlan-ctag-id")
        native_vlan_ctag_id.text = kwargs.pop('native_vlan_ctag_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_trunk_native_vlan_xtagged_config_native_vlan_id_xtagged(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        native_vlan_xtagged_config = ET.SubElement(trunk, "native-vlan-xtagged-config")
        native_vlan_id_xtagged = ET.SubElement(native_vlan_xtagged_config, "native-vlan-id-xtagged")
        native_vlan_id_xtagged.text = kwargs.pop('native_vlan_id_xtagged')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_trunk_native_vlan_xtagged_config_native_vlan_ctag_id_xtagged(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        native_vlan_xtagged_config = ET.SubElement(trunk, "native-vlan-xtagged-config")
        native_vlan_ctag_id_xtagged = ET.SubElement(native_vlan_xtagged_config, "native-vlan-ctag-id-xtagged")
        native_vlan_ctag_id_xtagged.text = kwargs.pop('native_vlan_ctag_id_xtagged')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_trunk_native_vlan_xtagged_config_native_vlan_egress_type_xtagged(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        native_vlan_xtagged_config = ET.SubElement(trunk, "native-vlan-xtagged-config")
        native_vlan_egress_type_xtagged = ET.SubElement(native_vlan_xtagged_config, "native-vlan-egress-type-xtagged")
        native_vlan_egress_type_xtagged.text = kwargs.pop('native_vlan_egress_type_xtagged')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_trunk_native_vlan_untagged_config_native_vlan_id_untagged(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        native_vlan_untagged_config = ET.SubElement(trunk, "native-vlan-untagged-config")
        native_vlan_id_untagged = ET.SubElement(native_vlan_untagged_config, "native-vlan-id-untagged")
        native_vlan_id_untagged.text = kwargs.pop('native_vlan_id_untagged')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_private_vlan_trunk_pvlan_tag_pvlan_tag_native_vlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        pvlan_tag = ET.SubElement(trunk, "pvlan-tag")
        pvlan_tag_native_vlan = ET.SubElement(pvlan_tag, "pvlan-tag-native-vlan")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_private_vlan_trunk_native_pvlanNativevlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        native = ET.SubElement(trunk, "native")
        pvlanNativevlan = ET.SubElement(native, "pvlanNativevlan")
        pvlanNativevlan.text = kwargs.pop('pvlanNativevlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_private_vlan_trunk_native_pvlan_native_vlan_ctag_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        native = ET.SubElement(trunk, "native")
        pvlan_native_vlan_ctag_id = ET.SubElement(native, "pvlan-native-vlan-ctag-id")
        pvlan_native_vlan_ctag_id.text = kwargs.pop('pvlan_native_vlan_ctag_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_private_vlan_trunk_allowed_vlan_pvlan_all(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        pvlan_all = ET.SubElement(vlan, "pvlan_all")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_private_vlan_trunk_allowed_vlan_pvlan_none(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        pvlan_none = ET.SubElement(vlan, "pvlan_none")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_private_vlan_trunk_allowed_vlan_pvlan_add(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        pvlan_add = ET.SubElement(vlan, "pvlan_add")
        pvlan_add.text = kwargs.pop('pvlan_add')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_private_vlan_trunk_allowed_vlan_pvlan_except(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        pvlan_except = ET.SubElement(vlan, "pvlan_except")
        pvlan_except.text = kwargs.pop('pvlan_except')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_private_vlan_trunk_allowed_vlan_pvlan_remove(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        pvlan_remove = ET.SubElement(vlan, "pvlan_remove")
        pvlan_remove.text = kwargs.pop('pvlan_remove')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_private_vlan_host_association_host_pri_pvlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        host_association = ET.SubElement(private_vlan, "host-association")
        host_pri_pvlan = ET.SubElement(host_association, "host-pri-pvlan")
        host_pri_pvlan.text = kwargs.pop('host_pri_pvlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_private_vlan_host_association_host_sec_pvlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        host_association = ET.SubElement(private_vlan, "host-association")
        host_sec_pvlan = ET.SubElement(host_association, "host-sec-pvlan")
        host_sec_pvlan.text = kwargs.pop('host_sec_pvlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_private_vlan_association_trunk_trunk_pri_pvlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        association = ET.SubElement(private_vlan, "association")
        trunk = ET.SubElement(association, "trunk")
        trunk_sec_pvlan_key = ET.SubElement(trunk, "trunk-sec-pvlan")
        trunk_sec_pvlan_key.text = kwargs.pop('trunk_sec_pvlan')
        trunk_pri_pvlan = ET.SubElement(trunk, "trunk-pri-pvlan")
        trunk_pri_pvlan.text = kwargs.pop('trunk_pri_pvlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_private_vlan_association_trunk_trunk_sec_pvlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        association = ET.SubElement(private_vlan, "association")
        trunk = ET.SubElement(association, "trunk")
        trunk_pri_pvlan_key = ET.SubElement(trunk, "trunk-pri-pvlan")
        trunk_pri_pvlan_key.text = kwargs.pop('trunk_pri_pvlan')
        trunk_sec_pvlan = ET.SubElement(trunk, "trunk-sec-pvlan")
        trunk_sec_pvlan.text = kwargs.pop('trunk_sec_pvlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_private_vlan_mapping_promis_pri_pvlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        mapping = ET.SubElement(private_vlan, "mapping")
        promis_pri_pvlan = ET.SubElement(mapping, "promis-pri-pvlan")
        promis_pri_pvlan.text = kwargs.pop('promis_pri_pvlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_private_vlan_mapping_oper(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        mapping = ET.SubElement(private_vlan, "mapping")
        promis_pri_pvlan_key = ET.SubElement(mapping, "promis-pri-pvlan")
        promis_pri_pvlan_key.text = kwargs.pop('promis_pri_pvlan')
        oper = ET.SubElement(mapping, "oper")
        oper.text = kwargs.pop('oper')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_private_vlan_mapping_promis_sec_pvlan_range(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        mapping = ET.SubElement(private_vlan, "mapping")
        promis_pri_pvlan_key = ET.SubElement(mapping, "promis-pri-pvlan")
        promis_pri_pvlan_key.text = kwargs.pop('promis_pri_pvlan')
        promis_sec_pvlan_range = ET.SubElement(mapping, "promis-sec-pvlan-range")
        promis_sec_pvlan_range.text = kwargs.pop('promis_sec_pvlan_range')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_access_mac_rspan_vlan_classification_access_vlan_access_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        access_mac_rspan_vlan_classification = ET.SubElement(switchport, "access-mac-rspan-vlan-classification")
        access = ET.SubElement(access_mac_rspan_vlan_classification, "access")
        vlan = ET.SubElement(access, "vlan")
        access_mac_address_key = ET.SubElement(vlan, "access-mac-address")
        access_mac_address_key.text = kwargs.pop('access_mac_address')
        access_vlan_id = ET.SubElement(vlan, "access-vlan-id")
        access_vlan_id.text = kwargs.pop('access_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_access_mac_rspan_vlan_classification_access_vlan_access_mac_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        access_mac_rspan_vlan_classification = ET.SubElement(switchport, "access-mac-rspan-vlan-classification")
        access = ET.SubElement(access_mac_rspan_vlan_classification, "access")
        vlan = ET.SubElement(access, "vlan")
        access_vlan_id_key = ET.SubElement(vlan, "access-vlan-id")
        access_vlan_id_key.text = kwargs.pop('access_vlan_id')
        access_mac_address = ET.SubElement(vlan, "access-mac-address")
        access_mac_address.text = kwargs.pop('access_mac_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_access_mac_group_rspan_vlan_classification_access_vlan_access_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        access_mac_group_rspan_vlan_classification = ET.SubElement(switchport, "access-mac-group-rspan-vlan-classification")
        access = ET.SubElement(access_mac_group_rspan_vlan_classification, "access")
        vlan = ET.SubElement(access, "vlan")
        access_mac_group_key = ET.SubElement(vlan, "access-mac-group")
        access_mac_group_key.text = kwargs.pop('access_mac_group')
        access_vlan_id = ET.SubElement(vlan, "access-vlan-id")
        access_vlan_id.text = kwargs.pop('access_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_switchport_access_mac_group_rspan_vlan_classification_access_vlan_access_mac_group(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(tengigabitethernet, "switchport")
        access_mac_group_rspan_vlan_classification = ET.SubElement(switchport, "access-mac-group-rspan-vlan-classification")
        access = ET.SubElement(access_mac_group_rspan_vlan_classification, "access")
        vlan = ET.SubElement(access, "vlan")
        access_vlan_id_key = ET.SubElement(vlan, "access-vlan-id")
        access_vlan_id_key.text = kwargs.pop('access_vlan_id')
        access_mac_group = ET.SubElement(vlan, "access-mac-group")
        access_mac_group.text = kwargs.pop('access_mac_group')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_mac_learning_mac_learn_disable_vlan_mac_learning_vlan_add(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        mac_learning = ET.SubElement(tengigabitethernet, "mac-learning")
        mac_learn_disable = ET.SubElement(mac_learning, "mac-learn-disable")
        vlan = ET.SubElement(mac_learn_disable, "vlan")
        mac_learning_vlan_add = ET.SubElement(vlan, "mac-learning-vlan-add")
        mac_learning_vlan_add.text = kwargs.pop('mac_learning_vlan_add')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_mac_learning_mac_learn_disable_vlan_mac_learning_vlan_remove(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        mac_learning = ET.SubElement(tengigabitethernet, "mac-learning")
        mac_learn_disable = ET.SubElement(mac_learning, "mac-learn-disable")
        vlan = ET.SubElement(mac_learn_disable, "vlan")
        mac_learning_vlan_remove = ET.SubElement(vlan, "mac-learning-vlan-remove")
        mac_learning_vlan_remove.text = kwargs.pop('mac_learning_vlan_remove')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_ip_config_mtu(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        ip_config = ET.SubElement(ip, "ip-config", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        mtu = ET.SubElement(ip_config, "mtu")
        mtu.text = kwargs.pop('mtu')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_ip_config_directed_broadcast(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        ip_config = ET.SubElement(ip, "ip-config", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        directed_broadcast = ET.SubElement(ip_config, "directed-broadcast")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_ip_config_proxy_arp(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        ip_config = ET.SubElement(ip, "ip-config", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        proxy_arp = ET.SubElement(ip_config, "proxy-arp")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_ip_config_arp_aging_timeout(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        ip_config = ET.SubElement(ip, "ip-config", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        arp_aging_timeout = ET.SubElement(ip_config, "arp-aging-timeout")
        arp_aging_timeout.text = kwargs.pop('arp_aging_timeout')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_ip_config_address_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        ip_config = ET.SubElement(ip, "ip-config", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        address = ET.SubElement(ip_config, "address")
        address = ET.SubElement(address, "address")
        address.text = kwargs.pop('address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_ip_config_address_secondary(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        ip_config = ET.SubElement(ip, "ip-config", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        address = ET.SubElement(ip_config, "address")
        address_key = ET.SubElement(address, "address")
        address_key.text = kwargs.pop('address')
        secondary = ET.SubElement(address, "secondary")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_ip_config_address_ospf_passive(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        ip_config = ET.SubElement(ip, "ip-config", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        address = ET.SubElement(ip_config, "address")
        address_key = ET.SubElement(address, "address")
        address_key.text = kwargs.pop('address')
        ospf_passive = ET.SubElement(address, "ospf-passive")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_ip_config_address_ospf_ignore(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        ip_config = ET.SubElement(ip, "ip-config", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        address = ET.SubElement(ip_config, "address")
        address_key = ET.SubElement(address, "address")
        address_key.text = kwargs.pop('address')
        ospf_ignore = ET.SubElement(address, "ospf-ignore")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_arp_node_config_arp_inspection_trust(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        arp_node_config = ET.SubElement(ip, "arp-node-config", xmlns="urn:brocade.com:mgmt:brocade-dai")
        arp = ET.SubElement(arp_node_config, "arp")
        inspection = ET.SubElement(arp, "inspection")
        trust = ET.SubElement(inspection, "trust")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_interface_te_dhcp_conf_dhcp_relay_servers_relay_ip_addr(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        interface_te_dhcp_conf = ET.SubElement(ip, "interface-te-dhcp-conf", xmlns="urn:brocade.com:mgmt:brocade-dhcp")
        dhcp = ET.SubElement(interface_te_dhcp_conf, "dhcp")
        relay = ET.SubElement(dhcp, "relay")
        servers = ET.SubElement(relay, "servers")
        server_vrf_name_key = ET.SubElement(servers, "server-vrf-name")
        server_vrf_name_key.text = kwargs.pop('server_vrf_name')
        relay_ip_addr = ET.SubElement(servers, "relay-ip-addr")
        relay_ip_addr.text = kwargs.pop('relay_ip_addr')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_interface_te_dhcp_conf_dhcp_relay_servers_server_vrf_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        interface_te_dhcp_conf = ET.SubElement(ip, "interface-te-dhcp-conf", xmlns="urn:brocade.com:mgmt:brocade-dhcp")
        dhcp = ET.SubElement(interface_te_dhcp_conf, "dhcp")
        relay = ET.SubElement(dhcp, "relay")
        servers = ET.SubElement(relay, "servers")
        relay_ip_addr_key = ET.SubElement(servers, "relay-ip-addr")
        relay_ip_addr_key.text = kwargs.pop('relay_ip_addr')
        server_vrf_name = ET.SubElement(servers, "server-vrf-name")
        server_vrf_name.text = kwargs.pop('server_vrf_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_interface_te_dhcp_conf_dhcp_relay_gateway(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        interface_te_dhcp_conf = ET.SubElement(ip, "interface-te-dhcp-conf", xmlns="urn:brocade.com:mgmt:brocade-dhcp")
        dhcp = ET.SubElement(interface_te_dhcp_conf, "dhcp")
        relay = ET.SubElement(dhcp, "relay")
        gateway = ET.SubElement(relay, "gateway")
        gateway.text = kwargs.pop('gateway')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_icmp_echo_reply(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        icmp = ET.SubElement(ip, "icmp", xmlns="urn:brocade.com:mgmt:brocade-icmp")
        echo_reply = ET.SubElement(icmp, "echo-reply")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_icmp_rate_limiting(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        icmp = ET.SubElement(ip, "icmp", xmlns="urn:brocade.com:mgmt:brocade-icmp")
        rate_limiting = ET.SubElement(icmp, "rate-limiting")
        rate_limiting.text = kwargs.pop('rate_limiting')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_icmp_unreachable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        icmp = ET.SubElement(ip, "icmp", xmlns="urn:brocade.com:mgmt:brocade-icmp")
        unreachable = ET.SubElement(icmp, "unreachable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_icmp_redirect(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        icmp = ET.SubElement(ip, "icmp", xmlns="urn:brocade.com:mgmt:brocade-icmp")
        redirect = ET.SubElement(icmp, "redirect")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_icmp_address_mask(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        icmp = ET.SubElement(ip, "icmp", xmlns="urn:brocade.com:mgmt:brocade-icmp")
        address_mask = ET.SubElement(icmp, "address-mask")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_igmp_phy_intf_cfg_igmp_last_member_query_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        igmp_phy_intf_cfg = ET.SubElement(ip, "igmp-phy-intf-cfg", xmlns="urn:brocade.com:mgmt:brocade-igmp")
        igmp = ET.SubElement(igmp_phy_intf_cfg, "igmp")
        last_member_query_interval = ET.SubElement(igmp, "last-member-query-interval")
        last_member_query_interval.text = kwargs.pop('last_member_query_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_igmp_phy_intf_cfg_igmp_query_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        igmp_phy_intf_cfg = ET.SubElement(ip, "igmp-phy-intf-cfg", xmlns="urn:brocade.com:mgmt:brocade-igmp")
        igmp = ET.SubElement(igmp_phy_intf_cfg, "igmp")
        query_interval = ET.SubElement(igmp, "query-interval")
        query_interval.text = kwargs.pop('query_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_igmp_phy_intf_cfg_igmp_query_max_response_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        igmp_phy_intf_cfg = ET.SubElement(ip, "igmp-phy-intf-cfg", xmlns="urn:brocade.com:mgmt:brocade-igmp")
        igmp = ET.SubElement(igmp_phy_intf_cfg, "igmp")
        query_max_response_time = ET.SubElement(igmp, "query-max-response-time")
        query_max_response_time.text = kwargs.pop('query_max_response_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_igmp_phy_intf_cfg_igmp_immediate_leave(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        igmp_phy_intf_cfg = ET.SubElement(ip, "igmp-phy-intf-cfg", xmlns="urn:brocade.com:mgmt:brocade-igmp")
        igmp = ET.SubElement(igmp_phy_intf_cfg, "igmp")
        immediate_leave = ET.SubElement(igmp, "immediate-leave")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_igmp_phy_intf_cfg_igmp_static_group_sg_addr(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        igmp_phy_intf_cfg = ET.SubElement(ip, "igmp-phy-intf-cfg", xmlns="urn:brocade.com:mgmt:brocade-igmp")
        igmp = ET.SubElement(igmp_phy_intf_cfg, "igmp")
        static_group = ET.SubElement(igmp, "static-group")
        sg_addr = ET.SubElement(static_group, "sg-addr")
        sg_addr.text = kwargs.pop('sg_addr')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_interface_te_ospf_conf_ospf1_area(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        interface_te_ospf_conf = ET.SubElement(ip, "interface-te-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_te_ospf_conf, "ospf1")
        area = ET.SubElement(ospf1, "area")
        area.text = kwargs.pop('area')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_interface_te_ospf_conf_ospf1_auth_change_wait_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        interface_te_ospf_conf = ET.SubElement(ip, "interface-te-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_te_ospf_conf, "ospf1")
        auth_change_wait_time = ET.SubElement(ospf1, "auth-change-wait-time")
        auth_change_wait_time.text = kwargs.pop('auth_change_wait_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_interface_te_ospf_conf_ospf1_authentication_key_no_encrypt_auth_key_table_no_encrypt_auth_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        interface_te_ospf_conf = ET.SubElement(ip, "interface-te-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_te_ospf_conf, "ospf1")
        authentication_key = ET.SubElement(ospf1, "authentication-key")
        no_encrypt_auth_key_table = ET.SubElement(authentication_key, "no-encrypt-auth-key-table")
        no_encrypt_auth_key = ET.SubElement(no_encrypt_auth_key_table, "no-encrypt-auth-key")
        no_encrypt_auth_key.text = kwargs.pop('no_encrypt_auth_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_interface_te_ospf_conf_ospf1_authentication_key_auth_key_table_encrypttype(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        interface_te_ospf_conf = ET.SubElement(ip, "interface-te-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_te_ospf_conf, "ospf1")
        authentication_key = ET.SubElement(ospf1, "authentication-key")
        auth_key_table = ET.SubElement(authentication_key, "auth-key-table")
        encrypttype = ET.SubElement(auth_key_table, "encrypttype")
        encrypttype.text = kwargs.pop('encrypttype')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_interface_te_ospf_conf_ospf1_authentication_key_auth_key_table_auth_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        interface_te_ospf_conf = ET.SubElement(ip, "interface-te-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_te_ospf_conf, "ospf1")
        authentication_key = ET.SubElement(ospf1, "authentication-key")
        auth_key_table = ET.SubElement(authentication_key, "auth-key-table")
        auth_key = ET.SubElement(auth_key_table, "auth-key")
        auth_key.text = kwargs.pop('auth_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_interface_te_ospf_conf_ospf1_dead_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        interface_te_ospf_conf = ET.SubElement(ip, "interface-te-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_te_ospf_conf, "ospf1")
        dead_interval = ET.SubElement(ospf1, "dead-interval")
        dead_interval.text = kwargs.pop('dead_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_interface_te_ospf_conf_ospf1_hello_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        interface_te_ospf_conf = ET.SubElement(ip, "interface-te-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_te_ospf_conf, "ospf1")
        hello_interval = ET.SubElement(ospf1, "hello-interval")
        hello_interval.text = kwargs.pop('hello_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_interface_te_ospf_conf_ospf1_retransmit_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        interface_te_ospf_conf = ET.SubElement(ip, "interface-te-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_te_ospf_conf, "ospf1")
        retransmit_interval = ET.SubElement(ospf1, "retransmit-interval")
        retransmit_interval.text = kwargs.pop('retransmit_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_interface_te_ospf_conf_ospf1_transmit_delay(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        interface_te_ospf_conf = ET.SubElement(ip, "interface-te-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_te_ospf_conf, "ospf1")
        transmit_delay = ET.SubElement(ospf1, "transmit-delay")
        transmit_delay.text = kwargs.pop('transmit_delay')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_interface_te_ospf_conf_ospf1_md5_authentication_key_activation_wait_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        interface_te_ospf_conf = ET.SubElement(ip, "interface-te-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_te_ospf_conf, "ospf1")
        md5_authentication = ET.SubElement(ospf1, "md5-authentication")
        key_activation_wait_time = ET.SubElement(md5_authentication, "key-activation-wait-time")
        key_activation_wait_time.text = kwargs.pop('key_activation_wait_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_interface_te_ospf_conf_ospf1_md5_authentication_no_encrypt_key_table_no_encrypt_key_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        interface_te_ospf_conf = ET.SubElement(ip, "interface-te-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_te_ospf_conf, "ospf1")
        md5_authentication = ET.SubElement(ospf1, "md5-authentication")
        no_encrypt_key_table = ET.SubElement(md5_authentication, "no-encrypt-key-table")
        no_encrypt_key_id = ET.SubElement(no_encrypt_key_table, "no-encrypt-key-id")
        no_encrypt_key_id.text = kwargs.pop('no_encrypt_key_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_interface_te_ospf_conf_ospf1_md5_authentication_no_encrypt_key_table_no_encrypt_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        interface_te_ospf_conf = ET.SubElement(ip, "interface-te-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_te_ospf_conf, "ospf1")
        md5_authentication = ET.SubElement(ospf1, "md5-authentication")
        no_encrypt_key_table = ET.SubElement(md5_authentication, "no-encrypt-key-table")
        no_encrypt_key = ET.SubElement(no_encrypt_key_table, "no-encrypt-key")
        no_encrypt_key.text = kwargs.pop('no_encrypt_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_interface_te_ospf_conf_ospf1_md5_authentication_key_table_key_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        interface_te_ospf_conf = ET.SubElement(ip, "interface-te-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_te_ospf_conf, "ospf1")
        md5_authentication = ET.SubElement(ospf1, "md5-authentication")
        key_table = ET.SubElement(md5_authentication, "key-table")
        key_id = ET.SubElement(key_table, "key-id")
        key_id.text = kwargs.pop('key_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_interface_te_ospf_conf_ospf1_md5_authentication_key_table_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        interface_te_ospf_conf = ET.SubElement(ip, "interface-te-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_te_ospf_conf, "ospf1")
        md5_authentication = ET.SubElement(ospf1, "md5-authentication")
        key_table = ET.SubElement(md5_authentication, "key-table")
        key = ET.SubElement(key_table, "key")
        key.text = kwargs.pop('key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_interface_te_ospf_conf_ospf1_md5_authentication_key_table_md5_authentication_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        interface_te_ospf_conf = ET.SubElement(ip, "interface-te-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_te_ospf_conf, "ospf1")
        md5_authentication = ET.SubElement(ospf1, "md5-authentication")
        key_table = ET.SubElement(md5_authentication, "key-table")
        md5_authentication_key = ET.SubElement(key_table, "md5-authentication-key")
        md5_authentication_key.text = kwargs.pop('md5_authentication_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_interface_te_ospf_conf_ospf1_cost(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        interface_te_ospf_conf = ET.SubElement(ip, "interface-te-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_te_ospf_conf, "ospf1")
        cost = ET.SubElement(ospf1, "cost")
        cost.text = kwargs.pop('cost')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_interface_te_ospf_conf_ospf1_database_filter_all_out(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        interface_te_ospf_conf = ET.SubElement(ip, "interface-te-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_te_ospf_conf, "ospf1")
        database_filter = ET.SubElement(ospf1, "database-filter")
        all_out = ET.SubElement(database_filter, "all-out")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_interface_te_ospf_conf_ospf1_database_filter_all_external(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        interface_te_ospf_conf = ET.SubElement(ip, "interface-te-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_te_ospf_conf, "ospf1")
        database_filter = ET.SubElement(ospf1, "database-filter")
        all_external = ET.SubElement(database_filter, "all-external")
        all_external.text = kwargs.pop('all_external')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_interface_te_ospf_conf_ospf1_database_filter_all_summary_external(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        interface_te_ospf_conf = ET.SubElement(ip, "interface-te-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_te_ospf_conf, "ospf1")
        database_filter = ET.SubElement(ospf1, "database-filter")
        all_summary_external = ET.SubElement(database_filter, "all-summary-external")
        all_summary_external.text = kwargs.pop('all_summary_external')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_interface_te_ospf_conf_ospf1_mtu_ignore(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        interface_te_ospf_conf = ET.SubElement(ip, "interface-te-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_te_ospf_conf, "ospf1")
        mtu_ignore = ET.SubElement(ospf1, "mtu-ignore")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_interface_te_ospf_conf_ospf1_network(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        interface_te_ospf_conf = ET.SubElement(ip, "interface-te-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_te_ospf_conf, "ospf1")
        network = ET.SubElement(ospf1, "network")
        network.text = kwargs.pop('network')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_interface_te_ospf_conf_ospf1_active(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        interface_te_ospf_conf = ET.SubElement(ip, "interface-te-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_te_ospf_conf, "ospf1")
        active = ET.SubElement(ospf1, "active")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_interface_te_ospf_conf_ospf1_passive(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        interface_te_ospf_conf = ET.SubElement(ip, "interface-te-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_te_ospf_conf, "ospf1")
        passive = ET.SubElement(ospf1, "passive")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_interface_te_ospf_conf_ospf1_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        interface_te_ospf_conf = ET.SubElement(ip, "interface-te-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_te_ospf_conf, "ospf1")
        priority = ET.SubElement(ospf1, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_interface_te_ospf_conf_ospf1_bfd_intf_bfd_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        interface_te_ospf_conf = ET.SubElement(ip, "interface-te-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_te_ospf_conf, "ospf1")
        bfd = ET.SubElement(ospf1, "bfd")
        intf_bfd_enable = ET.SubElement(bfd, "intf-bfd-enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_pim_intf_phy_cont_pim_int_cmd_pim_sparse(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        pim_intf_phy_cont = ET.SubElement(ip, "pim-intf-phy-cont", xmlns="urn:brocade.com:mgmt:brocade-pim")
        pim_int_cmd = ET.SubElement(pim_intf_phy_cont, "pim-int-cmd")
        pim_sparse = ET.SubElement(pim_int_cmd, "pim-sparse")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_pim_intf_phy_cont_pim_int_cmd_pim_neighbor_filter(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        pim_intf_phy_cont = ET.SubElement(ip, "pim-intf-phy-cont", xmlns="urn:brocade.com:mgmt:brocade-pim")
        pim_int_cmd = ET.SubElement(pim_intf_phy_cont, "pim-int-cmd")
        pim = ET.SubElement(pim_int_cmd, "pim")
        neighbor_filter = ET.SubElement(pim, "neighbor-filter")
        neighbor_filter.text = kwargs.pop('neighbor_filter')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_pim_intf_phy_cont_pim_int_cmd_pim_dr_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        pim_intf_phy_cont = ET.SubElement(ip, "pim-intf-phy-cont", xmlns="urn:brocade.com:mgmt:brocade-pim")
        pim_int_cmd = ET.SubElement(pim_intf_phy_cont, "pim-int-cmd")
        pim = ET.SubElement(pim_int_cmd, "pim")
        dr_priority = ET.SubElement(pim, "dr-priority")
        dr_priority.text = kwargs.pop('dr_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_pim_intf_phy_cont_pim_int_cmd_mcast_bdry_prefix_list(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(tengigabitethernet, "ip")
        pim_intf_phy_cont = ET.SubElement(ip, "pim-intf-phy-cont", xmlns="urn:brocade.com:mgmt:brocade-pim")
        pim_int_cmd = ET.SubElement(pim_intf_phy_cont, "pim-int-cmd")
        mcast_bdry_prefix_list = ET.SubElement(pim_int_cmd, "mcast-bdry-prefix-list")
        mcast_bdry_prefix_list.text = kwargs.pop('mcast_bdry_prefix_list')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_vrf_forwarding(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrf = ET.SubElement(tengigabitethernet, "vrf")
        forwarding = ET.SubElement(vrf, "forwarding")
        forwarding.text = kwargs.pop('forwarding')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_raguard(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        raguard = ET.SubElement(ipv6, "raguard")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_ipv6_config_address_use_link_local_only(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        address = ET.SubElement(ipv6_config, "address")
        use_link_local_only = ET.SubElement(address, "use-link-local-only")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_ipv6_config_address_link_local_config_link_local_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        address = ET.SubElement(ipv6_config, "address")
        link_local_config = ET.SubElement(address, "link-local-config")
        link_local_address = ET.SubElement(link_local_config, "link-local-address")
        link_local_address.text = kwargs.pop('link_local_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_ipv6_config_address_link_local_config_link_local(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        address = ET.SubElement(ipv6_config, "address")
        link_local_config = ET.SubElement(address, "link-local-config")
        link_local = ET.SubElement(link_local_config, "link-local")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_ipv6_config_address_ipv6_address_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        address = ET.SubElement(ipv6_config, "address")
        ipv6_address = ET.SubElement(address, "ipv6-address")
        address = ET.SubElement(ipv6_address, "address")
        address.text = kwargs.pop('address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_ipv6_config_address_ipv6_address_secondary(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        address = ET.SubElement(ipv6_config, "address")
        ipv6_address = ET.SubElement(address, "ipv6-address")
        address_key = ET.SubElement(ipv6_address, "address")
        address_key.text = kwargs.pop('address')
        secondary = ET.SubElement(ipv6_address, "secondary")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_ipv6_config_address_ipv6_address_eui_config_eui64(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        address = ET.SubElement(ipv6_config, "address")
        ipv6_address = ET.SubElement(address, "ipv6-address")
        address_key = ET.SubElement(ipv6_address, "address")
        address_key.text = kwargs.pop('address')
        eui_config = ET.SubElement(ipv6_address, "eui-config")
        eui64 = ET.SubElement(eui_config, "eui64")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_ipv6_config_address_ipv6_address_eui_config_eui_secondary(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        address = ET.SubElement(ipv6_config, "address")
        ipv6_address = ET.SubElement(address, "ipv6-address")
        address_key = ET.SubElement(ipv6_address, "address")
        address_key.text = kwargs.pop('address')
        eui_config = ET.SubElement(ipv6_address, "eui-config")
        eui_secondary = ET.SubElement(eui_config, "eui-secondary")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_ipv6_config_address_ipv6_address_anycast(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        address = ET.SubElement(ipv6_config, "address")
        ipv6_address = ET.SubElement(address, "ipv6-address")
        address_key = ET.SubElement(ipv6_address, "address")
        address_key.text = kwargs.pop('address')
        anycast = ET.SubElement(ipv6_address, "anycast")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_ipv6_config_mtu(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        mtu = ET.SubElement(ipv6_config, "mtu")
        mtu.text = kwargs.pop('mtu')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_interface_phy_dhcp_conf_dhcp_relay_servers_relay_ip_addr(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        interface_phy_dhcp_conf = ET.SubElement(ipv6, "interface-phy-dhcp-conf", xmlns="urn:brocade.com:mgmt:brocade-dhcpv6")
        dhcp = ET.SubElement(interface_phy_dhcp_conf, "dhcp")
        relay = ET.SubElement(dhcp, "relay")
        servers = ET.SubElement(relay, "servers")
        relay_ip_addr = ET.SubElement(servers, "relay-ip-addr")
        relay_ip_addr.text = kwargs.pop('relay_ip_addr')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_interface_phy_dhcp_conf_dhcp_relay_servers_server_vrf_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        interface_phy_dhcp_conf = ET.SubElement(ipv6, "interface-phy-dhcp-conf", xmlns="urn:brocade.com:mgmt:brocade-dhcpv6")
        dhcp = ET.SubElement(interface_phy_dhcp_conf, "dhcp")
        relay = ET.SubElement(dhcp, "relay")
        servers = ET.SubElement(relay, "servers")
        relay_ip_addr_key = ET.SubElement(servers, "relay-ip-addr")
        relay_ip_addr_key.text = kwargs.pop('relay_ip_addr')
        server_vrf_name = ET.SubElement(servers, "server-vrf-name")
        server_vrf_name.text = kwargs.pop('server_vrf_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_interface_phy_dhcp_conf_dhcp_relay_servers_interface_interface_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        interface_phy_dhcp_conf = ET.SubElement(ipv6, "interface-phy-dhcp-conf", xmlns="urn:brocade.com:mgmt:brocade-dhcpv6")
        dhcp = ET.SubElement(interface_phy_dhcp_conf, "dhcp")
        relay = ET.SubElement(dhcp, "relay")
        servers = ET.SubElement(relay, "servers")
        relay_ip_addr_key = ET.SubElement(servers, "relay-ip-addr")
        relay_ip_addr_key.text = kwargs.pop('relay_ip_addr')
        interface = ET.SubElement(servers, "interface")
        interface_type = ET.SubElement(interface, "interface-type")
        interface_type.text = kwargs.pop('interface_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_interface_phy_dhcp_conf_dhcp_relay_servers_interface_interface_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        interface_phy_dhcp_conf = ET.SubElement(ipv6, "interface-phy-dhcp-conf", xmlns="urn:brocade.com:mgmt:brocade-dhcpv6")
        dhcp = ET.SubElement(interface_phy_dhcp_conf, "dhcp")
        relay = ET.SubElement(dhcp, "relay")
        servers = ET.SubElement(relay, "servers")
        relay_ip_addr_key = ET.SubElement(servers, "relay-ip-addr")
        relay_ip_addr_key.text = kwargs.pop('relay_ip_addr')
        interface = ET.SubElement(servers, "interface")
        interface_name = ET.SubElement(interface, "interface-name")
        interface_name.text = kwargs.pop('interface_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_icmpv6_echo_reply(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        icmpv6 = ET.SubElement(ipv6, "icmpv6", xmlns="urn:brocade.com:mgmt:brocade-icmp")
        echo_reply = ET.SubElement(icmpv6, "echo-reply")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_icmpv6_rate_limiting(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        icmpv6 = ET.SubElement(ipv6, "icmpv6", xmlns="urn:brocade.com:mgmt:brocade-icmp")
        rate_limiting = ET.SubElement(icmpv6, "rate-limiting")
        rate_limiting.text = kwargs.pop('rate_limiting')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_icmpv6_unreachable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        icmpv6 = ET.SubElement(ipv6, "icmpv6", xmlns="urn:brocade.com:mgmt:brocade-icmp")
        unreachable = ET.SubElement(icmpv6, "unreachable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_icmpv6_redirect(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        icmpv6 = ET.SubElement(ipv6, "icmpv6", xmlns="urn:brocade.com:mgmt:brocade-icmp")
        redirect = ET.SubElement(icmpv6, "redirect")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_access_group_ipv6_access_list(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        access_group = ET.SubElement(ipv6, "access-group", xmlns="urn:brocade.com:mgmt:brocade-ipv6-access-list")
        ip_direction_key = ET.SubElement(access_group, "ip-direction")
        ip_direction_key.text = kwargs.pop('ip_direction')
        ipv6_access_list = ET.SubElement(access_group, "ipv6-access-list")
        ipv6_access_list.text = kwargs.pop('ipv6_access_list')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_access_group_ip_direction(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        access_group = ET.SubElement(ipv6, "access-group", xmlns="urn:brocade.com:mgmt:brocade-ipv6-access-list")
        ipv6_access_list_key = ET.SubElement(access_group, "ipv6-access-list")
        ipv6_access_list_key.text = kwargs.pop('ipv6_access_list')
        ip_direction = ET.SubElement(access_group, "ip-direction")
        ip_direction.text = kwargs.pop('ip_direction')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_access_group_traffic_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        access_group = ET.SubElement(ipv6, "access-group", xmlns="urn:brocade.com:mgmt:brocade-ipv6-access-list")
        ipv6_access_list_key = ET.SubElement(access_group, "ipv6-access-list")
        ipv6_access_list_key.text = kwargs.pop('ipv6_access_list')
        ip_direction_key = ET.SubElement(access_group, "ip-direction")
        ip_direction_key.text = kwargs.pop('ip_direction')
        traffic_type = ET.SubElement(access_group, "traffic-type")
        traffic_type.text = kwargs.pop('traffic_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_policy_route_map_ipv6_route_map_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        policy = ET.SubElement(ipv6, "policy", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        route_map = ET.SubElement(policy, "route-map")
        ipv6_route_map_name = ET.SubElement(route_map, "ipv6-route-map-name")
        ipv6_route_map_name.text = kwargs.pop('ipv6_route_map_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_vrrp_suppress_interface_ra(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        vrrp_suppress_interface_ra = ET.SubElement(ipv6_intf_cmds, "vrrp-suppress-interface-ra")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_managed_config_flag(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        managed_config_flag = ET.SubElement(nd, "managed-config-flag")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_other_config_flag(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        other_config_flag = ET.SubElement(nd, "other-config-flag")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_broadcast_mac_trap(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        broadcast_mac_trap = ET.SubElement(nd, "broadcast-mac-trap")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_ra_lifetime(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        ra_lifetime = ET.SubElement(nd, "ra-lifetime")
        ra_lifetime.text = kwargs.pop('ra_lifetime')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_reachable_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        reachable_time = ET.SubElement(nd, "reachable-time")
        reachable_time.text = kwargs.pop('reachable_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_mtu(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        mtu = ET.SubElement(nd, "mtu")
        mtu.text = kwargs.pop('mtu')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_retrans_timer(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        retrans_timer = ET.SubElement(nd, "retrans-timer")
        retrans_timer.text = kwargs.pop('retrans_timer')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_hoplimit(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        hoplimit = ET.SubElement(nd, "hoplimit")
        hoplimit.text = kwargs.pop('hoplimit')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_ns_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        ns_interval = ET.SubElement(nd, "ns-interval")
        ns_interval.text = kwargs.pop('ns_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_proxy(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        proxy = ET.SubElement(nd, "proxy")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_suppress_ra_suppress_ra_flag(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        suppress_ra = ET.SubElement(nd, "suppress-ra")
        suppress_ra_flag = ET.SubElement(suppress_ra, "suppress-ra-flag")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_suppress_ra_suppress_ra_mtu(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        suppress_ra = ET.SubElement(nd, "suppress-ra")
        suppress_ra_mtu = ET.SubElement(suppress_ra, "suppress-ra-mtu")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_suppress_ra_suppress_ra_all(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        suppress_ra = ET.SubElement(nd, "suppress-ra")
        suppress_ra_all = ET.SubElement(suppress_ra, "suppress-ra-all")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_ra_interval_max_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        ra_interval = ET.SubElement(nd, "ra-interval")
        max_interval = ET.SubElement(ra_interval, "max-interval")
        max_interval.text = kwargs.pop('max_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_ra_interval_min(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        ra_interval = ET.SubElement(nd, "ra-interval")
        min = ET.SubElement(ra_interval, "min")
        min.text = kwargs.pop('min')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_dad_attempts(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        dad = ET.SubElement(nd, "dad")
        attempts = ET.SubElement(dad, "attempts")
        attempts.text = kwargs.pop('attempts')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_dad_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        dad = ET.SubElement(nd, "dad")
        time = ET.SubElement(dad, "time")
        time.text = kwargs.pop('time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_nud_retry_base(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        nud = ET.SubElement(nd, "nud")
        retry = ET.SubElement(nud, "retry")
        base = ET.SubElement(retry, "base")
        base.text = kwargs.pop('base')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_nud_retry_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        nud = ET.SubElement(nd, "nud")
        retry = ET.SubElement(nud, "retry")
        interval = ET.SubElement(retry, "interval")
        interval.text = kwargs.pop('interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_nud_retry_max_attempts(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        nud = ET.SubElement(nd, "nud")
        retry = ET.SubElement(nud, "retry")
        max_attempts = ET.SubElement(retry, "max-attempts")
        max_attempts.text = kwargs.pop('max_attempts')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_cache_expire(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        cache = ET.SubElement(nd, "cache")
        expire = ET.SubElement(cache, "expire")
        expire.text = kwargs.pop('expire')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_prefix_prefix_ipv6_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        prefix = ET.SubElement(nd, "prefix")
        prefix_ipv6_address = ET.SubElement(prefix, "prefix-ipv6-address")
        prefix_ipv6_address.text = kwargs.pop('prefix_ipv6_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_prefix_lifetime_ch_valid_type_ca_no_advertise_no_advertise(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        prefix = ET.SubElement(nd, "prefix")
        prefix_ipv6_address_key = ET.SubElement(prefix, "prefix-ipv6-address")
        prefix_ipv6_address_key.text = kwargs.pop('prefix_ipv6_address')
        lifetime = ET.SubElement(prefix, "lifetime")
        ch_valid_type = ET.SubElement(lifetime, "ch-valid-type")
        ca_no_advertise = ET.SubElement(ch_valid_type, "ca-no-advertise")
        no_advertise = ET.SubElement(ca_no_advertise, "no-advertise")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_prefix_lifetime_ch_valid_type_ca_valid_lifetime_valid_lifetime(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        prefix = ET.SubElement(nd, "prefix")
        prefix_ipv6_address_key = ET.SubElement(prefix, "prefix-ipv6-address")
        prefix_ipv6_address_key.text = kwargs.pop('prefix_ipv6_address')
        lifetime = ET.SubElement(prefix, "lifetime")
        ch_valid_type = ET.SubElement(lifetime, "ch-valid-type")
        ca_valid_lifetime = ET.SubElement(ch_valid_type, "ca-valid-lifetime")
        valid_lifetime = ET.SubElement(ca_valid_lifetime, "valid-lifetime")
        valid_lifetime.text = kwargs.pop('valid_lifetime')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_prefix_lifetime_ch_valid_type_ca_valid_infinite_valid_infinite(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        prefix = ET.SubElement(nd, "prefix")
        prefix_ipv6_address_key = ET.SubElement(prefix, "prefix-ipv6-address")
        prefix_ipv6_address_key.text = kwargs.pop('prefix_ipv6_address')
        lifetime = ET.SubElement(prefix, "lifetime")
        ch_valid_type = ET.SubElement(lifetime, "ch-valid-type")
        ca_valid_infinite = ET.SubElement(ch_valid_type, "ca-valid-infinite")
        valid_infinite = ET.SubElement(ca_valid_infinite, "valid-infinite")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_prefix_lifetime_preferred_ch_preferred_type_ca_preferred_lifetime_preferred_lifetime(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        prefix = ET.SubElement(nd, "prefix")
        prefix_ipv6_address_key = ET.SubElement(prefix, "prefix-ipv6-address")
        prefix_ipv6_address_key.text = kwargs.pop('prefix_ipv6_address')
        lifetime = ET.SubElement(prefix, "lifetime")
        preferred = ET.SubElement(lifetime, "preferred")
        ch_preferred_type = ET.SubElement(preferred, "ch-preferred-type")
        ca_preferred_lifetime = ET.SubElement(ch_preferred_type, "ca-preferred-lifetime")
        preferred_lifetime = ET.SubElement(ca_preferred_lifetime, "preferred-lifetime")
        preferred_lifetime.text = kwargs.pop('preferred_lifetime')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_prefix_lifetime_preferred_ch_preferred_type_ca_preferred_infinite_preferred_infinite(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        prefix = ET.SubElement(nd, "prefix")
        prefix_ipv6_address_key = ET.SubElement(prefix, "prefix-ipv6-address")
        prefix_ipv6_address_key.text = kwargs.pop('prefix_ipv6_address')
        lifetime = ET.SubElement(prefix, "lifetime")
        preferred = ET.SubElement(lifetime, "preferred")
        ch_preferred_type = ET.SubElement(preferred, "ch-preferred-type")
        ca_preferred_infinite = ET.SubElement(ch_preferred_type, "ca-preferred-infinite")
        preferred_infinite = ET.SubElement(ca_preferred_infinite, "preferred-infinite")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_prefix_lifetime_preferred_prefix_flags_no_autoconfig(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        prefix = ET.SubElement(nd, "prefix")
        prefix_ipv6_address_key = ET.SubElement(prefix, "prefix-ipv6-address")
        prefix_ipv6_address_key.text = kwargs.pop('prefix_ipv6_address')
        lifetime = ET.SubElement(prefix, "lifetime")
        preferred = ET.SubElement(lifetime, "preferred")
        prefix_flags = ET.SubElement(preferred, "prefix-flags")
        no_autoconfig = ET.SubElement(prefix_flags, "no-autoconfig")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_prefix_lifetime_preferred_prefix_flags_no_onlink(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        prefix = ET.SubElement(nd, "prefix")
        prefix_ipv6_address_key = ET.SubElement(prefix, "prefix-ipv6-address")
        prefix_ipv6_address_key.text = kwargs.pop('prefix_ipv6_address')
        lifetime = ET.SubElement(prefix, "lifetime")
        preferred = ET.SubElement(lifetime, "preferred")
        prefix_flags = ET.SubElement(preferred, "prefix-flags")
        no_onlink = ET.SubElement(prefix_flags, "no-onlink")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_prefix_lifetime_preferred_prefix_flags_off_link(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        prefix = ET.SubElement(nd, "prefix")
        prefix_ipv6_address_key = ET.SubElement(prefix, "prefix-ipv6-address")
        prefix_ipv6_address_key.text = kwargs.pop('prefix_ipv6_address')
        lifetime = ET.SubElement(prefix, "lifetime")
        preferred = ET.SubElement(lifetime, "preferred")
        prefix_flags = ET.SubElement(preferred, "prefix-flags")
        off_link = ET.SubElement(prefix_flags, "off-link")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_neighbor_ipv6_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        neighbor = ET.SubElement(ipv6_intf_cmds, "neighbor")
        ipv6_address = ET.SubElement(neighbor, "ipv6-address")
        ipv6_address.text = kwargs.pop('ipv6_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_neighbor_hardware_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        neighbor = ET.SubElement(ipv6_intf_cmds, "neighbor")
        ipv6_address_key = ET.SubElement(neighbor, "ipv6-address")
        ipv6_address_key.text = kwargs.pop('ipv6_address')
        hardware_address = ET.SubElement(neighbor, "hardware-address")
        hardware_address.text = kwargs.pop('hardware_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_ipv6_phy_intf_cmds_hop_by_hop_trap(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        ipv6_phy_intf_cmds = ET.SubElement(ipv6, "ipv6-phy-intf-cmds", xmlns="urn:brocade.com:mgmt:brocade-mld-snooping")
        hop_by_hop_trap = ET.SubElement(ipv6_phy_intf_cmds, "hop-by-hop-trap")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_interface_ospfv3_conf_interface_area(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        interface_area = ET.SubElement(interface_ospfv3_conf, "interface-area")
        interface_area.text = kwargs.pop('interface_area')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_interface_ospfv3_conf_active(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        active = ET.SubElement(interface_ospfv3_conf, "active")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_interface_ospfv3_conf_passive(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        passive = ET.SubElement(interface_ospfv3_conf, "passive")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_interface_ospfv3_conf_bfd_bfd_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        bfd = ET.SubElement(interface_ospfv3_conf, "bfd")
        bfd_enable = ET.SubElement(bfd, "bfd-enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_interface_ospfv3_conf_cost(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        cost = ET.SubElement(interface_ospfv3_conf, "cost")
        cost.text = kwargs.pop('cost')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_interface_ospfv3_conf_instance(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        instance = ET.SubElement(interface_ospfv3_conf, "instance")
        instance.text = kwargs.pop('instance')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_interface_ospfv3_conf_mtu_ignore(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        mtu_ignore = ET.SubElement(interface_ospfv3_conf, "mtu-ignore")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_interface_ospfv3_conf_network(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        network = ET.SubElement(interface_ospfv3_conf, "network")
        network.text = kwargs.pop('network')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_interface_ospfv3_conf_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        priority = ET.SubElement(interface_ospfv3_conf, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_interface_ospfv3_conf_suppress_linklsa(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        suppress_linklsa = ET.SubElement(interface_ospfv3_conf, "suppress-linklsa")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_spi(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        spi = ET.SubElement(ipsec_auth_key_config, "spi")
        spi.text = kwargs.pop('spi')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_ah_algorithm_ah(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_ah_algorithm = ET.SubElement(ch_algorithm, "ca-ah-algorithm")
        ah = ET.SubElement(ca_ah_algorithm, "ah")
        ah.text = kwargs.pop('ah')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_ah_algorithm_ah_no_encrypt(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_ah_algorithm = ET.SubElement(ch_algorithm, "ca-ah-algorithm")
        ah_no_encrypt = ET.SubElement(ca_ah_algorithm, "ah-no-encrypt")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_ah_algorithm_ah_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_ah_algorithm = ET.SubElement(ch_algorithm, "ca-ah-algorithm")
        ah_key = ET.SubElement(ca_ah_algorithm, "ah-key")
        ah_key.text = kwargs.pop('ah_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp = ET.SubElement(ca_esp_algorithm, "esp")
        esp.text = kwargs.pop('esp')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp_no_encrypt(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp_no_encrypt = ET.SubElement(ca_esp_algorithm, "esp-no-encrypt")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp_key = ET.SubElement(ca_esp_algorithm, "esp-key")
        esp_key.text = kwargs.pop('esp_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp_auth(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp_auth = ET.SubElement(ca_esp_algorithm, "esp-auth")
        esp_auth.text = kwargs.pop('esp_auth')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp_auth_no_encrypt(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp_auth_no_encrypt = ET.SubElement(ca_esp_algorithm, "esp-auth-no-encrypt")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp_auth_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp_auth_key = ET.SubElement(ca_esp_algorithm, "esp-auth-key")
        esp_auth_key.text = kwargs.pop('esp_auth_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_ipsec_authentication_disable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec = ET.SubElement(authentication, "ipsec")
        ipsec_authentication_disable = ET.SubElement(ipsec, "ipsec-authentication-disable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_ifc_key_add_remove_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec = ET.SubElement(authentication, "ipsec")
        ifc_key_add_remove_interval = ET.SubElement(ipsec, "ifc-key-add-remove-interval")
        ifc_key_add_remove_interval.text = kwargs.pop('ifc_key_add_remove_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_interface_ospfv3_conf_link_interval_properties_hello_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        link_interval_properties = ET.SubElement(interface_ospfv3_conf, "link-interval-properties")
        hello_interval = ET.SubElement(link_interval_properties, "hello-interval")
        hello_interval.text = kwargs.pop('hello_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_interface_ospfv3_conf_link_interval_properties_dead_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        link_interval_properties = ET.SubElement(interface_ospfv3_conf, "link-interval-properties")
        dead_interval = ET.SubElement(link_interval_properties, "dead-interval")
        dead_interval.text = kwargs.pop('dead_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_interface_ospfv3_conf_link_interval_properties_hello_jitter(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        link_interval_properties = ET.SubElement(interface_ospfv3_conf, "link-interval-properties")
        hello_jitter = ET.SubElement(link_interval_properties, "hello-jitter")
        hello_jitter.text = kwargs.pop('hello_jitter')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_interface_ospfv3_conf_link_interval_properties_retransmit_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        link_interval_properties = ET.SubElement(interface_ospfv3_conf, "link-interval-properties")
        retransmit_interval = ET.SubElement(link_interval_properties, "retransmit-interval")
        retransmit_interval.text = kwargs.pop('retransmit_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_interface_ospfv3_conf_link_interval_properties_transmit_delay(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        link_interval_properties = ET.SubElement(interface_ospfv3_conf, "link-interval-properties")
        transmit_delay = ET.SubElement(link_interval_properties, "transmit-delay")
        transmit_delay.text = kwargs.pop('transmit_delay')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_vrrpv3_group_vrid(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        vrrpv3_group = ET.SubElement(ipv6, "vrrpv3-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid = ET.SubElement(vrrpv3_group, "vrid")
        vrid.text = kwargs.pop('vrid')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_vrrpv3_group_use_v2_checksum(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        vrrpv3_group = ET.SubElement(ipv6, "vrrpv3-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        use_v2_checksum = ET.SubElement(vrrpv3_group, "use-v2-checksum")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_vrrpv3_group_virtual_ip_virtual_ipaddr(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        vrrpv3_group = ET.SubElement(ipv6, "vrrpv3-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        virtual_ip = ET.SubElement(vrrpv3_group, "virtual-ip")
        virtual_ipaddr = ET.SubElement(virtual_ip, "virtual-ipaddr")
        virtual_ipaddr.text = kwargs.pop('virtual_ipaddr')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_vrrpv3_group_track_interface_interface_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        vrrpv3_group = ET.SubElement(ipv6, "vrrpv3-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        track = ET.SubElement(vrrpv3_group, "track")
        interface = ET.SubElement(track, "interface")
        interface_name_key = ET.SubElement(interface, "interface-name")
        interface_name_key.text = kwargs.pop('interface_name')
        interface_type = ET.SubElement(interface, "interface-type")
        interface_type.text = kwargs.pop('interface_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_vrrpv3_group_track_interface_interface_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        vrrpv3_group = ET.SubElement(ipv6, "vrrpv3-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        track = ET.SubElement(vrrpv3_group, "track")
        interface = ET.SubElement(track, "interface")
        interface_type_key = ET.SubElement(interface, "interface-type")
        interface_type_key.text = kwargs.pop('interface_type')
        interface_name = ET.SubElement(interface, "interface-name")
        interface_name.text = kwargs.pop('interface_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_vrrpv3_group_track_interface_track_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        vrrpv3_group = ET.SubElement(ipv6, "vrrpv3-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        track = ET.SubElement(vrrpv3_group, "track")
        interface = ET.SubElement(track, "interface")
        interface_type_key = ET.SubElement(interface, "interface-type")
        interface_type_key.text = kwargs.pop('interface_type')
        interface_name_key = ET.SubElement(interface, "interface-name")
        interface_name_key.text = kwargs.pop('interface_name')
        track_priority = ET.SubElement(interface, "track-priority")
        track_priority.text = kwargs.pop('track_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_vrrpv3_group_advertisement_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        vrrpv3_group = ET.SubElement(ipv6, "vrrpv3-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        advertisement_interval = ET.SubElement(vrrpv3_group, "advertisement-interval")
        advertisement_interval.text = kwargs.pop('advertisement_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_vrrpv3_group_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        vrrpv3_group = ET.SubElement(ipv6, "vrrpv3-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        enable = ET.SubElement(vrrpv3_group, "enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_vrrpv3_group_hold_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        vrrpv3_group = ET.SubElement(ipv6, "vrrpv3-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        hold_time = ET.SubElement(vrrpv3_group, "hold-time")
        hold_time.text = kwargs.pop('hold_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_vrrpv3_group_preempt_mode(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        vrrpv3_group = ET.SubElement(ipv6, "vrrpv3-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        preempt_mode = ET.SubElement(vrrpv3_group, "preempt-mode")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_vrrpv3_group_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        vrrpv3_group = ET.SubElement(ipv6, "vrrpv3-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        priority = ET.SubElement(vrrpv3_group, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_vrrpv3_group_description(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        vrrpv3_group = ET.SubElement(ipv6, "vrrpv3-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        description = ET.SubElement(vrrpv3_group, "description")
        description.text = kwargs.pop('description')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_vrrpv3e_group_vrid(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid = ET.SubElement(vrrpv3e_group, "vrid")
        vrid.text = kwargs.pop('vrid')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_vrrpv3e_group_virtual_ip_virtual_ipaddr(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        virtual_ip = ET.SubElement(vrrpv3e_group, "virtual-ip")
        virtual_ipaddr = ET.SubElement(virtual_ip, "virtual-ipaddr")
        virtual_ipaddr.text = kwargs.pop('virtual_ipaddr')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_vrrpv3e_group_track_interface_interface_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        track = ET.SubElement(vrrpv3e_group, "track")
        interface = ET.SubElement(track, "interface")
        interface_name_key = ET.SubElement(interface, "interface-name")
        interface_name_key.text = kwargs.pop('interface_name')
        interface_type = ET.SubElement(interface, "interface-type")
        interface_type.text = kwargs.pop('interface_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_vrrpv3e_group_track_interface_interface_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        track = ET.SubElement(vrrpv3e_group, "track")
        interface = ET.SubElement(track, "interface")
        interface_type_key = ET.SubElement(interface, "interface-type")
        interface_type_key.text = kwargs.pop('interface_type')
        interface_name = ET.SubElement(interface, "interface-name")
        interface_name.text = kwargs.pop('interface_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_vrrpv3e_group_track_interface_track_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        track = ET.SubElement(vrrpv3e_group, "track")
        interface = ET.SubElement(track, "interface")
        interface_type_key = ET.SubElement(interface, "interface-type")
        interface_type_key.text = kwargs.pop('interface_type')
        interface_name_key = ET.SubElement(interface, "interface-name")
        interface_name_key.text = kwargs.pop('interface_name')
        track_priority = ET.SubElement(interface, "track-priority")
        track_priority.text = kwargs.pop('track_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_vrrpv3e_group_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        enable = ET.SubElement(vrrpv3e_group, "enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_vrrpv3e_group_hold_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        hold_time = ET.SubElement(vrrpv3e_group, "hold-time")
        hold_time.text = kwargs.pop('hold_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_vrrpv3e_group_preempt_mode(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        preempt_mode = ET.SubElement(vrrpv3e_group, "preempt-mode")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_vrrpv3e_group_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        priority = ET.SubElement(vrrpv3e_group, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_vrrpv3e_group_description(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        description = ET.SubElement(vrrpv3e_group, "description")
        description.text = kwargs.pop('description')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_vrrpv3e_group_advertise_backup(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        advertise_backup = ET.SubElement(vrrpv3e_group, "advertise-backup")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_vrrpv3e_group_nd_advertisement_timer(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        nd_advertisement_timer = ET.SubElement(vrrpv3e_group, "nd-advertisement-timer")
        nd_advertisement_timer.text = kwargs.pop('nd_advertisement_timer')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_vrrpv3e_group_advertisement_interval_scale(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        advertisement_interval_scale = ET.SubElement(vrrpv3e_group, "advertisement-interval-scale")
        advertisement_interval_scale.text = kwargs.pop('advertisement_interval_scale')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_vrrpv3e_group_backup_advertisement_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        backup_advertisement_interval = ET.SubElement(vrrpv3e_group, "backup-advertisement-interval")
        backup_advertisement_interval.text = kwargs.pop('backup_advertisement_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_vrrpv3e_group_vrrpe_advertisement_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        vrrpe_advertisement_interval = ET.SubElement(vrrpv3e_group, "vrrpe-advertisement-interval")
        vrrpe_advertisement_interval.text = kwargs.pop('vrrpe_advertisement_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_vrrpv3e_group_short_path_forwarding_basic(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        short_path_forwarding = ET.SubElement(vrrpv3e_group, "short-path-forwarding")
        basic = ET.SubElement(short_path_forwarding, "basic")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ipv6_vrrpv3e_group_short_path_forwarding_revert_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(tengigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        short_path_forwarding = ET.SubElement(vrrpv3e_group, "short-path-forwarding")
        revert_priority = ET.SubElement(short_path_forwarding, "revert-priority")
        revert_priority.text = kwargs.pop('revert_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_track_track_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        track = ET.SubElement(tengigabitethernet, "track")
        track_enable = ET.SubElement(track, "track_enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_track_min_link(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        track = ET.SubElement(tengigabitethernet, "track")
        min_link = ET.SubElement(track, "min-link")
        min_link.text = kwargs.pop('min_link')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_track_interface_track_interface_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        track = ET.SubElement(tengigabitethernet, "track")
        interface = ET.SubElement(track, "interface")
        track_interface_name_key = ET.SubElement(interface, "track-interface-name")
        track_interface_name_key.text = kwargs.pop('track_interface_name')
        track_interface_type = ET.SubElement(interface, "track-interface-type")
        track_interface_type.text = kwargs.pop('track_interface_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_track_interface_track_interface_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        track = ET.SubElement(tengigabitethernet, "track")
        interface = ET.SubElement(track, "interface")
        track_interface_type_key = ET.SubElement(interface, "track-interface-type")
        track_interface_type_key.text = kwargs.pop('track_interface_type')
        track_interface_name = ET.SubElement(interface, "track-interface-name")
        track_interface_name.text = kwargs.pop('track_interface_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_track_remove_remove_all_track_interfaces(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        track = ET.SubElement(tengigabitethernet, "track")
        remove = ET.SubElement(track, "remove")
        remove_all_track_interfaces = ET.SubElement(remove, "remove-all-track-interfaces")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_bfd_interval_min_tx(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        bfd = ET.SubElement(tengigabitethernet, "bfd")
        interval = ET.SubElement(bfd, "interval")
        min_tx = ET.SubElement(interval, "min-tx")
        min_tx.text = kwargs.pop('min_tx')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_bfd_interval_min_rx(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        bfd = ET.SubElement(tengigabitethernet, "bfd")
        interval = ET.SubElement(bfd, "interval")
        min_rx = ET.SubElement(interval, "min-rx")
        min_rx.text = kwargs.pop('min_rx')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_bfd_interval_multiplier(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        bfd = ET.SubElement(tengigabitethernet, "bfd")
        interval = ET.SubElement(bfd, "interval")
        multiplier = ET.SubElement(interval, "multiplier")
        multiplier.text = kwargs.pop('multiplier')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_bfd_bfd_shutdown(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        bfd = ET.SubElement(tengigabitethernet, "bfd")
        bfd_shutdown = ET.SubElement(bfd, "bfd-shutdown")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_vepa_vepa_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vepa = ET.SubElement(tengigabitethernet, "vepa")
        vepa_enable = ET.SubElement(vepa, "vepa-enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_edge_loop_detection_eldprio(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        edge_loop_detection = ET.SubElement(tengigabitethernet, "edge-loop-detection")
        eldprio = ET.SubElement(edge_loop_detection, "eldprio")
        eldprio.text = kwargs.pop('eldprio')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_edge_loop_detection_eldvlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        edge_loop_detection = ET.SubElement(tengigabitethernet, "edge-loop-detection")
        eldvlan = ET.SubElement(edge_loop_detection, "eldvlan")
        eldvlan.text = kwargs.pop('eldvlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_mac_access_group_mac_access_list(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        mac = ET.SubElement(tengigabitethernet, "mac", xmlns="urn:brocade.com:mgmt:brocade-mac-access-list")
        access_group = ET.SubElement(mac, "access-group")
        mac_direction_key = ET.SubElement(access_group, "mac-direction")
        mac_direction_key.text = kwargs.pop('mac_direction')
        mac_access_list = ET.SubElement(access_group, "mac-access-list")
        mac_access_list.text = kwargs.pop('mac_access_list')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_mac_access_group_mac_direction(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        mac = ET.SubElement(tengigabitethernet, "mac", xmlns="urn:brocade.com:mgmt:brocade-mac-access-list")
        access_group = ET.SubElement(mac, "access-group")
        mac_access_list_key = ET.SubElement(access_group, "mac-access-list")
        mac_access_list_key.text = kwargs.pop('mac_access_list')
        mac_direction = ET.SubElement(access_group, "mac-direction")
        mac_direction.text = kwargs.pop('mac_direction')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_mac_access_group_traffic_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        mac = ET.SubElement(tengigabitethernet, "mac", xmlns="urn:brocade.com:mgmt:brocade-mac-access-list")
        access_group = ET.SubElement(mac, "access-group")
        mac_access_list_key = ET.SubElement(access_group, "mac-access-list")
        mac_access_list_key.text = kwargs.pop('mac_access_list')
        mac_direction_key = ET.SubElement(access_group, "mac-direction")
        mac_direction_key.text = kwargs.pop('mac_direction')
        traffic_type = ET.SubElement(access_group, "traffic-type")
        traffic_type.text = kwargs.pop('traffic_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_vrrp_vrid(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(tengigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        vrid = ET.SubElement(vrrp, "vrid")
        vrid.text = kwargs.pop('vrid')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_vrrp_version(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(tengigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version = ET.SubElement(vrrp, "version")
        version.text = kwargs.pop('version')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_vrrp_use_v2_checksum(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(tengigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        use_v2_checksum = ET.SubElement(vrrp, "use-v2-checksum")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_vrrp_virtual_ip_virtual_ipaddr(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(tengigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        virtual_ip = ET.SubElement(vrrp, "virtual-ip")
        virtual_ipaddr = ET.SubElement(virtual_ip, "virtual-ipaddr")
        virtual_ipaddr.text = kwargs.pop('virtual_ipaddr')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_vrrp_track_interface_interface_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(tengigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        track = ET.SubElement(vrrp, "track")
        interface = ET.SubElement(track, "interface")
        interface_name_key = ET.SubElement(interface, "interface-name")
        interface_name_key.text = kwargs.pop('interface_name')
        interface_type = ET.SubElement(interface, "interface-type")
        interface_type.text = kwargs.pop('interface_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_vrrp_track_interface_interface_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(tengigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        track = ET.SubElement(vrrp, "track")
        interface = ET.SubElement(track, "interface")
        interface_type_key = ET.SubElement(interface, "interface-type")
        interface_type_key.text = kwargs.pop('interface_type')
        interface_name = ET.SubElement(interface, "interface-name")
        interface_name.text = kwargs.pop('interface_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_vrrp_track_interface_track_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(tengigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        track = ET.SubElement(vrrp, "track")
        interface = ET.SubElement(track, "interface")
        interface_type_key = ET.SubElement(interface, "interface-type")
        interface_type_key.text = kwargs.pop('interface_type')
        interface_name_key = ET.SubElement(interface, "interface-name")
        interface_name_key.text = kwargs.pop('interface_name')
        track_priority = ET.SubElement(interface, "track-priority")
        track_priority.text = kwargs.pop('track_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_vrrp_advertisement_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(tengigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        advertisement_interval = ET.SubElement(vrrp, "advertisement-interval")
        advertisement_interval.text = kwargs.pop('advertisement_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_vrrp_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(tengigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        enable = ET.SubElement(vrrp, "enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_vrrp_hold_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(tengigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        hold_time = ET.SubElement(vrrp, "hold-time")
        hold_time.text = kwargs.pop('hold_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_vrrp_preempt_mode(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(tengigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        preempt_mode = ET.SubElement(vrrp, "preempt-mode")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_vrrp_arp_unicast_request_receive(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(tengigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        arp = ET.SubElement(vrrp, "arp")
        unicast_request = ET.SubElement(arp, "unicast-request")
        receive = ET.SubElement(unicast_request, "receive")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_vrrp_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(tengigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        priority = ET.SubElement(vrrp, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_vrrp_description(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(tengigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        description = ET.SubElement(vrrp, "description")
        description.text = kwargs.pop('description')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_fabric_fabric_isl_fabric_isl_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        fabric = ET.SubElement(tengigabitethernet, "fabric", xmlns="urn:brocade.com:mgmt:brocade-fcoe")
        fabric_isl = ET.SubElement(fabric, "fabric-isl")
        fabric_isl_enable = ET.SubElement(fabric_isl, "fabric-isl-enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_fabric_fabric_trunk_fabric_trunk_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        fabric = ET.SubElement(tengigabitethernet, "fabric", xmlns="urn:brocade.com:mgmt:brocade-fcoe")
        fabric_trunk = ET.SubElement(fabric, "fabric-trunk")
        fabric_trunk_enable = ET.SubElement(fabric_trunk, "fabric-trunk-enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_fabric_neighbor_discovery_disable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        fabric = ET.SubElement(tengigabitethernet, "fabric", xmlns="urn:brocade.com:mgmt:brocade-fcoe")
        neighbor_discovery = ET.SubElement(fabric, "neighbor-discovery")
        disable = ET.SubElement(neighbor_discovery, "disable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_fabric_fabric_dport_fabric_dport_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        fabric = ET.SubElement(tengigabitethernet, "fabric", xmlns="urn:brocade.com:mgmt:brocade-fcoe")
        fabric_dport = ET.SubElement(fabric, "fabric-dport")
        fabric_dport_enable = ET.SubElement(fabric_dport, "fabric-dport-enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_fcoeport_fcoeport_map(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        fcoeport = ET.SubElement(tengigabitethernet, "fcoeport", xmlns="urn:brocade.com:mgmt:brocade-fcoe")
        fcoeport_map = ET.SubElement(fcoeport, "fcoeport-map")
        fcoeport_map.text = kwargs.pop('fcoeport_map')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_openflow_interface_cfg_logical_instance_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        openflow_interface_cfg = ET.SubElement(tengigabitethernet, "openflow-interface-cfg", xmlns="urn:brocade.com:mgmt:brocade-openflow")
        logical_instance_id = ET.SubElement(openflow_interface_cfg, "logical-instance-id")
        logical_instance_id.text = kwargs.pop('logical_instance_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_openflow_interface_cfg_openflow_enable_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        openflow_interface_cfg = ET.SubElement(tengigabitethernet, "openflow-interface-cfg", xmlns="urn:brocade.com:mgmt:brocade-openflow")
        openflow_enable = ET.SubElement(openflow_interface_cfg, "openflow-enable")
        enable = ET.SubElement(openflow_enable, "enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_openflow_interface_cfg_openflow_enable_match_profile(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        openflow_interface_cfg = ET.SubElement(tengigabitethernet, "openflow-interface-cfg", xmlns="urn:brocade.com:mgmt:brocade-openflow")
        openflow_enable = ET.SubElement(openflow_interface_cfg, "openflow-enable")
        match_profile = ET.SubElement(openflow_enable, "match-profile")
        match_profile.text = kwargs.pop('match_profile')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_sflow_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        sflow = ET.SubElement(tengigabitethernet, "sflow", xmlns="urn:brocade.com:mgmt:brocade-sflow")
        enable = ET.SubElement(sflow, "enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_sflow_polling_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        sflow = ET.SubElement(tengigabitethernet, "sflow", xmlns="urn:brocade.com:mgmt:brocade-sflow")
        polling_interval = ET.SubElement(sflow, "polling-interval")
        polling_interval.text = kwargs.pop('polling_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_sflow_sample_rate(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        sflow = ET.SubElement(tengigabitethernet, "sflow", xmlns="urn:brocade.com:mgmt:brocade-sflow")
        sample_rate = ET.SubElement(sflow, "sample-rate")
        sample_rate.text = kwargs.pop('sample_rate')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_acl_interface_ip_access_group_ip_access_list(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip_acl_interface = ET.SubElement(tengigabitethernet, "ip-acl-interface", xmlns="urn:brocade.com:mgmt:brocade-ip-access-list")
        ip = ET.SubElement(ip_acl_interface, "ip")
        access_group = ET.SubElement(ip, "access-group")
        ip_direction_key = ET.SubElement(access_group, "ip-direction")
        ip_direction_key.text = kwargs.pop('ip_direction')
        ip_access_list = ET.SubElement(access_group, "ip-access-list")
        ip_access_list.text = kwargs.pop('ip_access_list')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_acl_interface_ip_access_group_ip_direction(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip_acl_interface = ET.SubElement(tengigabitethernet, "ip-acl-interface", xmlns="urn:brocade.com:mgmt:brocade-ip-access-list")
        ip = ET.SubElement(ip_acl_interface, "ip")
        access_group = ET.SubElement(ip, "access-group")
        ip_access_list_key = ET.SubElement(access_group, "ip-access-list")
        ip_access_list_key.text = kwargs.pop('ip_access_list')
        ip_direction = ET.SubElement(access_group, "ip-direction")
        ip_direction.text = kwargs.pop('ip_direction')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_acl_interface_ip_access_group_traffic_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip_acl_interface = ET.SubElement(tengigabitethernet, "ip-acl-interface", xmlns="urn:brocade.com:mgmt:brocade-ip-access-list")
        ip = ET.SubElement(ip_acl_interface, "ip")
        access_group = ET.SubElement(ip, "access-group")
        ip_access_list_key = ET.SubElement(access_group, "ip-access-list")
        ip_access_list_key.text = kwargs.pop('ip_access_list')
        ip_direction_key = ET.SubElement(access_group, "ip-direction")
        ip_direction_key.text = kwargs.pop('ip_direction')
        traffic_type = ET.SubElement(access_group, "traffic-type")
        traffic_type.text = kwargs.pop('traffic_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_storm_control_ingress_protocol_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        storm_control = ET.SubElement(tengigabitethernet, "storm-control", xmlns="urn:brocade.com:mgmt:brocade-bum-storm-control")
        ingress = ET.SubElement(storm_control, "ingress")
        protocol_type = ET.SubElement(ingress, "protocol-type")
        protocol_type.text = kwargs.pop('protocol_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_storm_control_ingress_rate_format(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        storm_control = ET.SubElement(tengigabitethernet, "storm-control", xmlns="urn:brocade.com:mgmt:brocade-bum-storm-control")
        ingress = ET.SubElement(storm_control, "ingress")
        protocol_type_key = ET.SubElement(ingress, "protocol-type")
        protocol_type_key.text = kwargs.pop('protocol_type')
        rate_format = ET.SubElement(ingress, "rate-format")
        rate_format.text = kwargs.pop('rate_format')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_storm_control_ingress_rate_bps(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        storm_control = ET.SubElement(tengigabitethernet, "storm-control", xmlns="urn:brocade.com:mgmt:brocade-bum-storm-control")
        ingress = ET.SubElement(storm_control, "ingress")
        protocol_type_key = ET.SubElement(ingress, "protocol-type")
        protocol_type_key.text = kwargs.pop('protocol_type')
        rate_bps = ET.SubElement(ingress, "rate-bps")
        rate_bps.text = kwargs.pop('rate_bps')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_storm_control_ingress_rate_percent(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        storm_control = ET.SubElement(tengigabitethernet, "storm-control", xmlns="urn:brocade.com:mgmt:brocade-bum-storm-control")
        ingress = ET.SubElement(storm_control, "ingress")
        protocol_type_key = ET.SubElement(ingress, "protocol-type")
        protocol_type_key.text = kwargs.pop('protocol_type')
        rate_percent = ET.SubElement(ingress, "rate-percent")
        rate_percent.text = kwargs.pop('rate_percent')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_storm_control_ingress_bum_action(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        storm_control = ET.SubElement(tengigabitethernet, "storm-control", xmlns="urn:brocade.com:mgmt:brocade-bum-storm-control")
        ingress = ET.SubElement(storm_control, "ingress")
        protocol_type_key = ET.SubElement(ingress, "protocol-type")
        protocol_type_key.text = kwargs.pop('protocol_type')
        bum_action = ET.SubElement(ingress, "bum-action")
        bum_action.text = kwargs.pop('bum_action')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_dot1x_authentication(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        dot1x = ET.SubElement(tengigabitethernet, "dot1x", xmlns="urn:brocade.com:mgmt:brocade-dot1x")
        authentication = ET.SubElement(dot1x, "authentication")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_dot1x_port_control(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        dot1x = ET.SubElement(tengigabitethernet, "dot1x", xmlns="urn:brocade.com:mgmt:brocade-dot1x")
        port_control = ET.SubElement(dot1x, "port-control")
        port_control.text = kwargs.pop('port_control')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_dot1x_protocol_version(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        dot1x = ET.SubElement(tengigabitethernet, "dot1x", xmlns="urn:brocade.com:mgmt:brocade-dot1x")
        protocol_version = ET.SubElement(dot1x, "protocol-version")
        protocol_version.text = kwargs.pop('protocol_version')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_dot1x_quiet_period(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        dot1x = ET.SubElement(tengigabitethernet, "dot1x", xmlns="urn:brocade.com:mgmt:brocade-dot1x")
        quiet_period = ET.SubElement(dot1x, "quiet-period")
        quiet_period.text = kwargs.pop('quiet_period')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_dot1x_reauthMax(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        dot1x = ET.SubElement(tengigabitethernet, "dot1x", xmlns="urn:brocade.com:mgmt:brocade-dot1x")
        reauthMax = ET.SubElement(dot1x, "reauthMax")
        reauthMax.text = kwargs.pop('reauthMax')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_dot1x_reauthentication(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        dot1x = ET.SubElement(tengigabitethernet, "dot1x", xmlns="urn:brocade.com:mgmt:brocade-dot1x")
        reauthentication = ET.SubElement(dot1x, "reauthentication")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_dot1x_timeout_re_authperiod(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        dot1x = ET.SubElement(tengigabitethernet, "dot1x", xmlns="urn:brocade.com:mgmt:brocade-dot1x")
        timeout = ET.SubElement(dot1x, "timeout")
        re_authperiod = ET.SubElement(timeout, "re-authperiod")
        re_authperiod.text = kwargs.pop('re_authperiod')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_dot1x_timeout_server_timeout(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        dot1x = ET.SubElement(tengigabitethernet, "dot1x", xmlns="urn:brocade.com:mgmt:brocade-dot1x")
        timeout = ET.SubElement(dot1x, "timeout")
        server_timeout = ET.SubElement(timeout, "server-timeout")
        server_timeout.text = kwargs.pop('server_timeout')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_dot1x_timeout_supp_timeout(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        dot1x = ET.SubElement(tengigabitethernet, "dot1x", xmlns="urn:brocade.com:mgmt:brocade-dot1x")
        timeout = ET.SubElement(dot1x, "timeout")
        supp_timeout = ET.SubElement(timeout, "supp-timeout")
        supp_timeout.text = kwargs.pop('supp_timeout')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_dot1x_timeout_tx_period(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        dot1x = ET.SubElement(tengigabitethernet, "dot1x", xmlns="urn:brocade.com:mgmt:brocade-dot1x")
        timeout = ET.SubElement(dot1x, "timeout")
        tx_period = ET.SubElement(timeout, "tx-period")
        tx_period.text = kwargs.pop('tx_period')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_ip_pbr_interface_ip_policy_route_map_route_map_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip_pbr_interface = ET.SubElement(tengigabitethernet, "ip-pbr-interface", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        ip = ET.SubElement(ip_pbr_interface, "ip")
        policy = ET.SubElement(ip, "policy")
        route_map = ET.SubElement(policy, "route-map")
        route_map_name = ET.SubElement(route_map, "route-map-name")
        route_map_name.text = kwargs.pop('route_map_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_lacp_timeout(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        lacp = ET.SubElement(tengigabitethernet, "lacp", xmlns="urn:brocade.com:mgmt:brocade-lacp")
        timeout = ET.SubElement(lacp, "timeout")
        timeout.text = kwargs.pop('timeout')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_lacp_std_port_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        lacp = ET.SubElement(tengigabitethernet, "lacp", xmlns="urn:brocade.com:mgmt:brocade-lacp")
        std_port_priority = ET.SubElement(lacp, "std_port-priority")
        std_port_priority.text = kwargs.pop('std_port_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_lacp_default_up(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        lacp = ET.SubElement(tengigabitethernet, "lacp", xmlns="urn:brocade.com:mgmt:brocade-lacp")
        default_up = ET.SubElement(lacp, "default-up")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_lldp_cee_lldp_cee_on_off(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        lldp = ET.SubElement(tengigabitethernet, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        cee = ET.SubElement(lldp, "cee")
        lldp_cee_on_off = ET.SubElement(cee, "lldp-cee-on-off")
        lldp_cee_on_off.text = kwargs.pop('lldp_cee_on_off')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_lldp_dcbx_version(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        lldp = ET.SubElement(tengigabitethernet, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        dcbx_version = ET.SubElement(lldp, "dcbx-version")
        dcbx_version.text = kwargs.pop('dcbx_version')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_lldp_disable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        lldp = ET.SubElement(tengigabitethernet, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        disable = ET.SubElement(lldp, "disable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_lldp_iscsi_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        lldp = ET.SubElement(tengigabitethernet, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        iscsi_priority = ET.SubElement(lldp, "iscsi-priority")
        iscsi_priority.text = kwargs.pop('iscsi_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_lldp_profile(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        lldp = ET.SubElement(tengigabitethernet, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        profile = ET.SubElement(lldp, "profile")
        profile.text = kwargs.pop('profile')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_connectivity_deviceconnectivity(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        connectivity = ET.SubElement(tengigabitethernet, "connectivity", xmlns="urn:brocade.com:mgmt:brocade-maps")
        deviceconnectivity = ET.SubElement(connectivity, "deviceconnectivity")
        deviceconnectivity.text = kwargs.pop('deviceconnectivity')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_service_policy_in_cg(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        service_policy = ET.SubElement(tengigabitethernet, "service-policy", xmlns="urn:brocade.com:mgmt:brocade-policer")
        in_cg = ET.SubElement(service_policy, "in")
        in_cg.text = kwargs.pop('in_cg')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_service_policy_out(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        service_policy = ET.SubElement(tengigabitethernet, "service-policy", xmlns="urn:brocade.com:mgmt:brocade-policer")
        out = ET.SubElement(service_policy, "out")
        out.text = kwargs.pop('out')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_port_profile_port(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        port_profile_port = ET.SubElement(tengigabitethernet, "port-profile-port", xmlns="urn:brocade.com:mgmt:brocade-port-profile")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_port_profile_to_interface_associations_port_profile_port_port_to_port_profile_domain_association_profile_domain_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        port_profile_to_interface_associations = ET.SubElement(tengigabitethernet, "port-profile-to-interface-associations", xmlns="urn:brocade.com:mgmt:brocade-port-profile")
        port_profile_port = ET.SubElement(port_profile_to_interface_associations, "port-profile-port")
        port_to_port_profile_domain_association = ET.SubElement(port_profile_port, "port-to-port-profile-domain-association")
        profile_domain_name = ET.SubElement(port_to_port_profile_domain_association, "profile-domain-name")
        profile_domain_name.text = kwargs.pop('profile_domain_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_port_profile_to_interface_associations_port_profile_port_port_to_port_profile_associations_port_to_port_profile_association(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        port_profile_to_interface_associations = ET.SubElement(tengigabitethernet, "port-profile-to-interface-associations", xmlns="urn:brocade.com:mgmt:brocade-port-profile")
        port_profile_port = ET.SubElement(port_profile_to_interface_associations, "port-profile-port")
        port_to_port_profile_associations = ET.SubElement(port_profile_port, "port-to-port-profile-associations")
        port_to_port_profile_association = ET.SubElement(port_to_port_profile_associations, "port-to-port-profile-association")
        port_to_port_profile_association.text = kwargs.pop('port_to_port_profile_association')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_priority_tag_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        priority_tag_enable = ET.SubElement(tengigabitethernet, "priority-tag-enable", xmlns="urn:brocade.com:mgmt:brocade-qos")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_qos_default_cos(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(tengigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        default_cos = ET.SubElement(qos, "default-cos")
        default_cos.text = kwargs.pop('default_cos')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_qos_trust_trust_cos(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(tengigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        trust = ET.SubElement(qos, "trust")
        trust_cos = ET.SubElement(trust, "trust-cos")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_qos_trust_trust_dscp(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(tengigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        trust = ET.SubElement(qos, "trust")
        trust_dscp = ET.SubElement(trust, "trust-dscp")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_qos_cos_mutation(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(tengigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        cos_mutation = ET.SubElement(qos, "cos-mutation")
        cos_mutation.text = kwargs.pop('cos_mutation')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_qos_cos_traffic_class(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(tengigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        cos_traffic_class = ET.SubElement(qos, "cos-traffic-class")
        cos_traffic_class.text = kwargs.pop('cos_traffic_class')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_qos_dscp_mutation(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(tengigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        dscp_mutation = ET.SubElement(qos, "dscp-mutation")
        dscp_mutation.text = kwargs.pop('dscp_mutation')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_qos_dscp_traffic_class(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(tengigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        dscp_traffic_class = ET.SubElement(qos, "dscp-traffic-class")
        dscp_traffic_class.text = kwargs.pop('dscp_traffic_class')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_qos_dscp_cos(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(tengigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        dscp_cos = ET.SubElement(qos, "dscp-cos")
        dscp_cos.text = kwargs.pop('dscp_cos')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_qos_random_detect_traffic_class_red_tc_value(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(tengigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        random_detect = ET.SubElement(qos, "random-detect")
        traffic_class = ET.SubElement(random_detect, "traffic-class")
        red_tc_value = ET.SubElement(traffic_class, "red-tc-value")
        red_tc_value.text = kwargs.pop('red_tc_value')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_qos_random_detect_traffic_class_red_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(tengigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        random_detect = ET.SubElement(qos, "random-detect")
        traffic_class = ET.SubElement(random_detect, "traffic-class")
        red_tc_value_key = ET.SubElement(traffic_class, "red-tc-value")
        red_tc_value_key.text = kwargs.pop('red_tc_value')
        red_enable = ET.SubElement(traffic_class, "red-enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_qos_random_detect_traffic_class_red_profile_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(tengigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        random_detect = ET.SubElement(qos, "random-detect")
        traffic_class = ET.SubElement(random_detect, "traffic-class")
        red_tc_value_key = ET.SubElement(traffic_class, "red-tc-value")
        red_tc_value_key.text = kwargs.pop('red_tc_value')
        red_profile_id = ET.SubElement(traffic_class, "red-profile-id")
        red_profile_id.text = kwargs.pop('red_profile_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_qos_drop_monitor_drop_monitor_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(tengigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        drop_monitor = ET.SubElement(qos, "drop-monitor")
        drop_monitor_enable = ET.SubElement(drop_monitor, "drop-monitor-enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_qos_rcv_queue_cos_threshold_cos0_threshold(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(tengigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        rcv_queue = ET.SubElement(qos, "rcv-queue")
        cos_threshold = ET.SubElement(rcv_queue, "cos-threshold")
        cos0_threshold = ET.SubElement(cos_threshold, "cos0-threshold")
        cos0_threshold.text = kwargs.pop('cos0_threshold')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_qos_rcv_queue_cos_threshold_cos1_threshold(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(tengigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        rcv_queue = ET.SubElement(qos, "rcv-queue")
        cos_threshold = ET.SubElement(rcv_queue, "cos-threshold")
        cos1_threshold = ET.SubElement(cos_threshold, "cos1-threshold")
        cos1_threshold.text = kwargs.pop('cos1_threshold')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_qos_rcv_queue_cos_threshold_cos2_threshold(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(tengigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        rcv_queue = ET.SubElement(qos, "rcv-queue")
        cos_threshold = ET.SubElement(rcv_queue, "cos-threshold")
        cos2_threshold = ET.SubElement(cos_threshold, "cos2-threshold")
        cos2_threshold.text = kwargs.pop('cos2_threshold')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_qos_rcv_queue_cos_threshold_cos3_threshold(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(tengigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        rcv_queue = ET.SubElement(qos, "rcv-queue")
        cos_threshold = ET.SubElement(rcv_queue, "cos-threshold")
        cos3_threshold = ET.SubElement(cos_threshold, "cos3-threshold")
        cos3_threshold.text = kwargs.pop('cos3_threshold')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_qos_rcv_queue_cos_threshold_cos4_threshold(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(tengigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        rcv_queue = ET.SubElement(qos, "rcv-queue")
        cos_threshold = ET.SubElement(rcv_queue, "cos-threshold")
        cos4_threshold = ET.SubElement(cos_threshold, "cos4-threshold")
        cos4_threshold.text = kwargs.pop('cos4_threshold')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_qos_rcv_queue_cos_threshold_cos5_threshold(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(tengigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        rcv_queue = ET.SubElement(qos, "rcv-queue")
        cos_threshold = ET.SubElement(rcv_queue, "cos-threshold")
        cos5_threshold = ET.SubElement(cos_threshold, "cos5-threshold")
        cos5_threshold.text = kwargs.pop('cos5_threshold')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_qos_rcv_queue_cos_threshold_cos6_threshold(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(tengigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        rcv_queue = ET.SubElement(qos, "rcv-queue")
        cos_threshold = ET.SubElement(rcv_queue, "cos-threshold")
        cos6_threshold = ET.SubElement(cos_threshold, "cos6-threshold")
        cos6_threshold.text = kwargs.pop('cos6_threshold')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_qos_rcv_queue_cos_threshold_cos7_threshold(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(tengigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        rcv_queue = ET.SubElement(qos, "rcv-queue")
        cos_threshold = ET.SubElement(rcv_queue, "cos-threshold")
        cos7_threshold = ET.SubElement(cos_threshold, "cos7-threshold")
        cos7_threshold.text = kwargs.pop('cos7_threshold')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_qos_flowcontrol_link_level_flowcontrol_flowcontrol_tx(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(tengigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        flowcontrol = ET.SubElement(qos, "flowcontrol")
        link_level_flowcontrol = ET.SubElement(flowcontrol, "link-level-flowcontrol")
        flowcontrol_tx = ET.SubElement(link_level_flowcontrol, "flowcontrol-tx")
        flowcontrol_tx.text = kwargs.pop('flowcontrol_tx')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_qos_flowcontrol_link_level_flowcontrol_flowcontrol_rx(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(tengigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        flowcontrol = ET.SubElement(qos, "flowcontrol")
        link_level_flowcontrol = ET.SubElement(flowcontrol, "link-level-flowcontrol")
        flowcontrol_rx = ET.SubElement(link_level_flowcontrol, "flowcontrol-rx")
        flowcontrol_rx.text = kwargs.pop('flowcontrol_rx')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_qos_flowcontrol_pfc_pfc_cos(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(tengigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        flowcontrol = ET.SubElement(qos, "flowcontrol")
        pfc = ET.SubElement(flowcontrol, "pfc")
        pfc_cos = ET.SubElement(pfc, "pfc-cos")
        pfc_cos.text = kwargs.pop('pfc_cos')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_qos_flowcontrol_pfc_pfc_flowcontrol_tx(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(tengigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        flowcontrol = ET.SubElement(qos, "flowcontrol")
        pfc = ET.SubElement(flowcontrol, "pfc")
        pfc_cos_key = ET.SubElement(pfc, "pfc-cos")
        pfc_cos_key.text = kwargs.pop('pfc_cos')
        pfc_flowcontrol_tx = ET.SubElement(pfc, "pfc-flowcontrol-tx")
        pfc_flowcontrol_tx.text = kwargs.pop('pfc_flowcontrol_tx')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_qos_flowcontrol_pfc_pfc_flowcontrol_rx(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(tengigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        flowcontrol = ET.SubElement(qos, "flowcontrol")
        pfc = ET.SubElement(flowcontrol, "pfc")
        pfc_cos_key = ET.SubElement(pfc, "pfc-cos")
        pfc_cos_key.text = kwargs.pop('pfc_cos')
        pfc_flowcontrol_rx = ET.SubElement(pfc, "pfc-flowcontrol-rx")
        pfc_flowcontrol_rx.text = kwargs.pop('pfc_flowcontrol_rx')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_rmon_collection_ether_stats_entry_ether_stats_index(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        rmon = ET.SubElement(tengigabitethernet, "rmon", xmlns="urn:brocade.com:mgmt:brocade-rmon")
        collection = ET.SubElement(rmon, "collection")
        ether_stats_entry = ET.SubElement(collection, "ether-stats-entry")
        ether_stats_index = ET.SubElement(ether_stats_entry, "ether-stats-index")
        ether_stats_index.text = kwargs.pop('ether_stats_index')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_rmon_collection_ether_stats_entry_ether_stats_owner(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        rmon = ET.SubElement(tengigabitethernet, "rmon", xmlns="urn:brocade.com:mgmt:brocade-rmon")
        collection = ET.SubElement(rmon, "collection")
        ether_stats_entry = ET.SubElement(collection, "ether-stats-entry")
        ether_stats_index_key = ET.SubElement(ether_stats_entry, "ether-stats-index")
        ether_stats_index_key.text = kwargs.pop('ether_stats_index')
        ether_stats_owner = ET.SubElement(ether_stats_entry, "ether-stats-owner")
        ether_stats_owner.text = kwargs.pop('ether_stats_owner')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_rmon_collection_history_control_entry_history_control_index(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        rmon = ET.SubElement(tengigabitethernet, "rmon", xmlns="urn:brocade.com:mgmt:brocade-rmon")
        collection = ET.SubElement(rmon, "collection")
        history_control_entry = ET.SubElement(collection, "history-control-entry")
        history_control_index = ET.SubElement(history_control_entry, "history-control-index")
        history_control_index.text = kwargs.pop('history_control_index')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_rmon_collection_history_control_entry_history_control_buckets_requested(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        rmon = ET.SubElement(tengigabitethernet, "rmon", xmlns="urn:brocade.com:mgmt:brocade-rmon")
        collection = ET.SubElement(rmon, "collection")
        history_control_entry = ET.SubElement(collection, "history-control-entry")
        history_control_index_key = ET.SubElement(history_control_entry, "history-control-index")
        history_control_index_key.text = kwargs.pop('history_control_index')
        history_control_buckets_requested = ET.SubElement(history_control_entry, "history-control-buckets-requested")
        history_control_buckets_requested.text = kwargs.pop('history_control_buckets_requested')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_rmon_collection_history_control_entry_history_control_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        rmon = ET.SubElement(tengigabitethernet, "rmon", xmlns="urn:brocade.com:mgmt:brocade-rmon")
        collection = ET.SubElement(rmon, "collection")
        history_control_entry = ET.SubElement(collection, "history-control-entry")
        history_control_index_key = ET.SubElement(history_control_entry, "history-control-index")
        history_control_index_key.text = kwargs.pop('history_control_index')
        history_control_interval = ET.SubElement(history_control_entry, "history-control-interval")
        history_control_interval.text = kwargs.pop('history_control_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_rmon_collection_history_control_entry_history_control_owner(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        rmon = ET.SubElement(tengigabitethernet, "rmon", xmlns="urn:brocade.com:mgmt:brocade-rmon")
        collection = ET.SubElement(rmon, "collection")
        history_control_entry = ET.SubElement(collection, "history-control-entry")
        history_control_index_key = ET.SubElement(history_control_entry, "history-control-index")
        history_control_index_key.text = kwargs.pop('history_control_index')
        history_control_owner = ET.SubElement(history_control_entry, "history-control-owner")
        history_control_owner.text = kwargs.pop('history_control_owner')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_udld_udld_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        udld = ET.SubElement(tengigabitethernet, "udld", xmlns="urn:brocade.com:mgmt:brocade-udld")
        udld_enable = ET.SubElement(udld, "udld-enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_vlan_classifier_activate_group_groupid(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vlan = ET.SubElement(tengigabitethernet, "vlan", xmlns="urn:brocade.com:mgmt:brocade-vlan")
        classifier = ET.SubElement(vlan, "classifier")
        activate = ET.SubElement(classifier, "activate")
        group = ET.SubElement(activate, "group")
        groupid = ET.SubElement(group, "groupid")
        groupid.text = kwargs.pop('groupid')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_vlan_classifier_activate_group_vlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vlan = ET.SubElement(tengigabitethernet, "vlan", xmlns="urn:brocade.com:mgmt:brocade-vlan")
        classifier = ET.SubElement(vlan, "classifier")
        activate = ET.SubElement(classifier, "activate")
        group = ET.SubElement(activate, "group")
        groupid_key = ET.SubElement(group, "groupid")
        groupid_key.text = kwargs.pop('groupid')
        vlan = ET.SubElement(group, "vlan")
        vlan.text = kwargs.pop('vlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_bpdu_drop_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        bpdu_drop = ET.SubElement(tengigabitethernet, "bpdu-drop", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        enable = ET.SubElement(bpdu_drop, "enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_bpdu_drop_direction(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        bpdu_drop = ET.SubElement(tengigabitethernet, "bpdu-drop", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        direction = ET.SubElement(bpdu_drop, "direction")
        direction.text = kwargs.pop('direction')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_tunnel_tagged_ieee_bpdu(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        tunnel = ET.SubElement(tengigabitethernet, "tunnel", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        tagged_ieee_bpdu = ET.SubElement(tunnel, "tagged-ieee-bpdu")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_spanning_tree_autoedge(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(tengigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        autoedge = ET.SubElement(spanning_tree, "autoedge")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_spanning_tree_cost(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(tengigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        cost = ET.SubElement(spanning_tree, "cost")
        cost.text = kwargs.pop('cost')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_spanning_tree_portfast_portfastbasic(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(tengigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        portfast = ET.SubElement(spanning_tree, "portfast")
        portfastbasic = ET.SubElement(portfast, "portfastbasic")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_spanning_tree_portfast_bpdu_guard(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(tengigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        portfast = ET.SubElement(spanning_tree, "portfast")
        bpdu_guard = ET.SubElement(portfast, "bpdu-guard")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_spanning_tree_portfast_bpdu_filter(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(tengigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        portfast = ET.SubElement(spanning_tree, "portfast")
        bpdu_filter = ET.SubElement(portfast, "bpdu-filter")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_spanning_tree_edgeport_edgeportbasic(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(tengigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        edgeport = ET.SubElement(spanning_tree, "edgeport")
        edgeportbasic = ET.SubElement(edgeport, "edgeportbasic")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_spanning_tree_edgeport_bpdu_guard(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(tengigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        edgeport = ET.SubElement(spanning_tree, "edgeport")
        bpdu_guard = ET.SubElement(edgeport, "bpdu-guard")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_spanning_tree_edgeport_bpdu_filter(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(tengigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        edgeport = ET.SubElement(spanning_tree, "edgeport")
        bpdu_filter = ET.SubElement(edgeport, "bpdu-filter")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_spanning_tree_guard_root(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(tengigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        guard = ET.SubElement(spanning_tree, "guard")
        root = ET.SubElement(guard, "root")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_spanning_tree_hello_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(tengigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        hello_time = ET.SubElement(spanning_tree, "hello-time")
        hello_time.text = kwargs.pop('hello_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_spanning_tree_bpdu_mac(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(tengigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        bpdu_mac = ET.SubElement(spanning_tree, "bpdu-mac")
        bpdu_mac.text = kwargs.pop('bpdu_mac')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_spanning_tree_link_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(tengigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        link_type = ET.SubElement(spanning_tree, "link-type")
        link_type.text = kwargs.pop('link_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_spanning_tree_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(tengigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        priority = ET.SubElement(spanning_tree, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_spanning_tree_restricted_role(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(tengigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        restricted_role = ET.SubElement(spanning_tree, "restricted-role")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_spanning_tree_restricted_tcn(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(tengigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        restricted_tcn = ET.SubElement(spanning_tree, "restricted-tcn")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_spanning_tree_shutdown(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(tengigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        shutdown = ET.SubElement(spanning_tree, "shutdown")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_spanning_tree_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(tengigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        vlan = ET.SubElement(spanning_tree, "vlan")
        id = ET.SubElement(vlan, "id")
        id.text = kwargs.pop('id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_spanning_tree_vlan_cost(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(tengigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        vlan = ET.SubElement(spanning_tree, "vlan")
        id_key = ET.SubElement(vlan, "id")
        id_key.text = kwargs.pop('id')
        cost = ET.SubElement(vlan, "cost")
        cost.text = kwargs.pop('cost')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_spanning_tree_vlan_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(tengigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        vlan = ET.SubElement(spanning_tree, "vlan")
        id_key = ET.SubElement(vlan, "id")
        id_key.text = kwargs.pop('id')
        priority = ET.SubElement(vlan, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_spanning_tree_vlan_guard_root(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(tengigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        vlan = ET.SubElement(spanning_tree, "vlan")
        id_key = ET.SubElement(vlan, "id")
        id_key.text = kwargs.pop('id')
        guard = ET.SubElement(vlan, "guard")
        root = ET.SubElement(guard, "root")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_spanning_tree_instance_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(tengigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        instance = ET.SubElement(spanning_tree, "instance")
        id = ET.SubElement(instance, "id")
        id.text = kwargs.pop('id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_spanning_tree_instance_cost(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(tengigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        instance = ET.SubElement(spanning_tree, "instance")
        id_key = ET.SubElement(instance, "id")
        id_key.text = kwargs.pop('id')
        cost = ET.SubElement(instance, "cost")
        cost.text = kwargs.pop('cost')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_spanning_tree_instance_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(tengigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        instance = ET.SubElement(spanning_tree, "instance")
        id_key = ET.SubElement(instance, "id")
        id_key.text = kwargs.pop('id')
        priority = ET.SubElement(instance, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_spanning_tree_instance_restricted_role(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(tengigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        instance = ET.SubElement(spanning_tree, "instance")
        id_key = ET.SubElement(instance, "id")
        id_key.text = kwargs.pop('id')
        restricted_role = ET.SubElement(instance, "restricted-role")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_tengigabitethernet_spanning_tree_instance_restricted_tcn(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        tengigabitethernet = ET.SubElement(interface, "tengigabitethernet")
        name_key = ET.SubElement(tengigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(tengigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        instance = ET.SubElement(spanning_tree, "instance")
        id_key = ET.SubElement(instance, "id")
        id_key.text = kwargs.pop('id')
        restricted_tcn = ET.SubElement(instance, "restricted-tcn")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name = ET.SubElement(fortygigabitethernet, "name")
        name.text = kwargs.pop('name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_cee(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        cee = ET.SubElement(fortygigabitethernet, "cee")
        cee.text = kwargs.pop('cee')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ifindex(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ifindex = ET.SubElement(fortygigabitethernet, "ifindex")
        ifindex.text = kwargs.pop('ifindex')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_description(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        description = ET.SubElement(fortygigabitethernet, "description")
        description.text = kwargs.pop('description')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_shutdown(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        shutdown = ET.SubElement(fortygigabitethernet, "shutdown")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_channel_group_port_int(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        channel_group = ET.SubElement(fortygigabitethernet, "channel-group")
        port_int = ET.SubElement(channel_group, "port-int")
        port_int.text = kwargs.pop('port_int')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_channel_group_mode(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        channel_group = ET.SubElement(fortygigabitethernet, "channel-group")
        mode = ET.SubElement(channel_group, "mode")
        mode.text = kwargs.pop('mode')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_channel_group_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        channel_group = ET.SubElement(fortygigabitethernet, "channel-group")
        type = ET.SubElement(channel_group, "type")
        type.text = kwargs.pop('type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_mtu(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        mtu = ET.SubElement(fortygigabitethernet, "mtu")
        mtu.text = kwargs.pop('mtu')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_basic_basic(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport_basic = ET.SubElement(fortygigabitethernet, "switchport-basic")
        basic = ET.SubElement(switchport_basic, "basic")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_mode_vlan_mode(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        mode = ET.SubElement(switchport, "mode")
        vlan_mode = ET.SubElement(mode, "vlan-mode")
        vlan_mode.text = kwargs.pop('vlan_mode')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_mode_private_vlan_private_vlan_trunk_trunk_basic(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        mode = ET.SubElement(switchport, "mode")
        private_vlan = ET.SubElement(mode, "private-vlan")
        private_vlan_trunk = ET.SubElement(private_vlan, "private-vlan-trunk")
        trunk_basic = ET.SubElement(private_vlan_trunk, "trunk-basic")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_mode_private_vlan_private_vlan_trunk_trunk_promiscuous(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        mode = ET.SubElement(switchport, "mode")
        private_vlan = ET.SubElement(mode, "private-vlan")
        private_vlan_trunk = ET.SubElement(private_vlan, "private-vlan-trunk")
        trunk_promiscuous = ET.SubElement(private_vlan_trunk, "trunk-promiscuous")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_mode_private_vlan_private_vlan_trunk_trunk_host(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        mode = ET.SubElement(switchport, "mode")
        private_vlan = ET.SubElement(mode, "private-vlan")
        private_vlan_trunk = ET.SubElement(private_vlan, "private-vlan-trunk")
        trunk_host = ET.SubElement(private_vlan_trunk, "trunk-host")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_mode_private_vlan_promiscuous(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        mode = ET.SubElement(switchport, "mode")
        private_vlan = ET.SubElement(mode, "private-vlan")
        promiscuous = ET.SubElement(private_vlan, "promiscuous")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_mode_private_vlan_host(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        mode = ET.SubElement(switchport, "mode")
        private_vlan = ET.SubElement(mode, "private-vlan")
        host = ET.SubElement(private_vlan, "host")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_port_security_port_sec_max(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        port_security = ET.SubElement(switchport, "port-security")
        port_sec_max = ET.SubElement(port_security, "port-sec-max")
        port_sec_max.text = kwargs.pop('port_sec_max')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_port_security_port_sec_violation(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        port_security = ET.SubElement(switchport, "port-security")
        port_sec_violation = ET.SubElement(port_security, "port-sec-violation")
        port_sec_violation.text = kwargs.pop('port_sec_violation')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_port_security_port_secutiry_mac_address_mac_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        port_security = ET.SubElement(switchport, "port-security")
        port_secutiry_mac_address = ET.SubElement(port_security, "port-secutiry-mac-address")
        port_sec_vlan_key = ET.SubElement(port_secutiry_mac_address, "port-sec-vlan")
        port_sec_vlan_key.text = kwargs.pop('port_sec_vlan')
        mac_address = ET.SubElement(port_secutiry_mac_address, "mac-address")
        mac_address.text = kwargs.pop('mac_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_port_security_port_secutiry_mac_address_port_sec_vlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        port_security = ET.SubElement(switchport, "port-security")
        port_secutiry_mac_address = ET.SubElement(port_security, "port-secutiry-mac-address")
        mac_address_key = ET.SubElement(port_secutiry_mac_address, "mac-address")
        mac_address_key.text = kwargs.pop('mac_address')
        port_sec_vlan = ET.SubElement(port_secutiry_mac_address, "port-sec-vlan")
        port_sec_vlan.text = kwargs.pop('port_sec_vlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_port_security_sticky_sticky_flag(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        port_security = ET.SubElement(switchport, "port-security")
        sticky = ET.SubElement(port_security, "sticky")
        sticky_flag = ET.SubElement(sticky, "sticky-flag")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_port_security_sticky_port_secutiry_mac_address_mac_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        port_security = ET.SubElement(switchport, "port-security")
        sticky = ET.SubElement(port_security, "sticky")
        port_secutiry_mac_address = ET.SubElement(sticky, "port-secutiry-mac-address")
        port_sec_vlan_key = ET.SubElement(port_secutiry_mac_address, "port-sec-vlan")
        port_sec_vlan_key.text = kwargs.pop('port_sec_vlan')
        mac_address = ET.SubElement(port_secutiry_mac_address, "mac-address")
        mac_address.text = kwargs.pop('mac_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_port_security_sticky_port_secutiry_mac_address_port_sec_vlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        port_security = ET.SubElement(switchport, "port-security")
        sticky = ET.SubElement(port_security, "sticky")
        port_secutiry_mac_address = ET.SubElement(sticky, "port-secutiry-mac-address")
        mac_address_key = ET.SubElement(port_secutiry_mac_address, "mac-address")
        mac_address_key.text = kwargs.pop('mac_address')
        port_sec_vlan = ET.SubElement(port_secutiry_mac_address, "port-sec-vlan")
        port_sec_vlan.text = kwargs.pop('port_sec_vlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_port_security_allowed_ouis_oui(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        port_security = ET.SubElement(switchport, "port-security")
        allowed_ouis = ET.SubElement(port_security, "allowed-ouis")
        oui = ET.SubElement(allowed_ouis, "oui")
        oui.text = kwargs.pop('oui')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_port_security_shutdown_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        port_security = ET.SubElement(switchport, "port-security")
        shutdown_time = ET.SubElement(port_security, "shutdown-time")
        shutdown_time.text = kwargs.pop('shutdown_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_access_accessvlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        access = ET.SubElement(switchport, "access")
        accessvlan = ET.SubElement(access, "accessvlan")
        accessvlan.text = kwargs.pop('accessvlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_access_rspan_access_rspan_access_vlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        access = ET.SubElement(switchport, "access")
        rspan_access = ET.SubElement(access, "rspan-access")
        rspan_access_vlan = ET.SubElement(rspan_access, "rspan-access-vlan")
        rspan_access_vlan.text = kwargs.pop('rspan_access_vlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_access_mac_vlan_classification_access_vlan_access_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        access_mac_vlan_classification = ET.SubElement(switchport, "access-mac-vlan-classification")
        access = ET.SubElement(access_mac_vlan_classification, "access")
        vlan = ET.SubElement(access, "vlan")
        access_mac_address_key = ET.SubElement(vlan, "access-mac-address")
        access_mac_address_key.text = kwargs.pop('access_mac_address')
        access_vlan_id = ET.SubElement(vlan, "access-vlan-id")
        access_vlan_id.text = kwargs.pop('access_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_access_mac_vlan_classification_access_vlan_access_mac_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        access_mac_vlan_classification = ET.SubElement(switchport, "access-mac-vlan-classification")
        access = ET.SubElement(access_mac_vlan_classification, "access")
        vlan = ET.SubElement(access, "vlan")
        access_vlan_id_key = ET.SubElement(vlan, "access-vlan-id")
        access_vlan_id_key.text = kwargs.pop('access_vlan_id')
        access_mac_address = ET.SubElement(vlan, "access-mac-address")
        access_mac_address.text = kwargs.pop('access_mac_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_trunk_private_vlan_classification_private_vlan_trunk_allowed_vlan_add_trunk_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        trunk_private_vlan_classification = ET.SubElement(switchport, "trunk-private-vlan-classification")
        private_vlan = ET.SubElement(trunk_private_vlan_classification, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        add = ET.SubElement(vlan, "add")
        trunk_ctag_id_key = ET.SubElement(add, "trunk-ctag-id")
        trunk_ctag_id_key.text = kwargs.pop('trunk_ctag_id')
        trunk_vlan_id = ET.SubElement(add, "trunk-vlan-id")
        trunk_vlan_id.text = kwargs.pop('trunk_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_trunk_private_vlan_classification_private_vlan_trunk_allowed_vlan_add_trunk_ctag_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        trunk_private_vlan_classification = ET.SubElement(switchport, "trunk-private-vlan-classification")
        private_vlan = ET.SubElement(trunk_private_vlan_classification, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        add = ET.SubElement(vlan, "add")
        trunk_vlan_id_key = ET.SubElement(add, "trunk-vlan-id")
        trunk_vlan_id_key.text = kwargs.pop('trunk_vlan_id')
        trunk_ctag_id = ET.SubElement(add, "trunk-ctag-id")
        trunk_ctag_id.text = kwargs.pop('trunk_ctag_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_trunk_private_vlan_classification_private_vlan_trunk_allowed_vlan_remove_trunk_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        trunk_private_vlan_classification = ET.SubElement(switchport, "trunk-private-vlan-classification")
        private_vlan = ET.SubElement(trunk_private_vlan_classification, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        remove = ET.SubElement(vlan, "remove")
        trunk_ctag_id_key = ET.SubElement(remove, "trunk-ctag-id")
        trunk_ctag_id_key.text = kwargs.pop('trunk_ctag_id')
        trunk_vlan_id = ET.SubElement(remove, "trunk-vlan-id")
        trunk_vlan_id.text = kwargs.pop('trunk_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_trunk_private_vlan_classification_private_vlan_trunk_allowed_vlan_remove_trunk_ctag_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        trunk_private_vlan_classification = ET.SubElement(switchport, "trunk-private-vlan-classification")
        private_vlan = ET.SubElement(trunk_private_vlan_classification, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        remove = ET.SubElement(vlan, "remove")
        trunk_vlan_id_key = ET.SubElement(remove, "trunk-vlan-id")
        trunk_vlan_id_key.text = kwargs.pop('trunk_vlan_id')
        trunk_ctag_id = ET.SubElement(remove, "trunk-ctag-id")
        trunk_ctag_id.text = kwargs.pop('trunk_ctag_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_access_mac_group_vlan_classification_access_vlan_access_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        access_mac_group_vlan_classification = ET.SubElement(switchport, "access-mac-group-vlan-classification")
        access = ET.SubElement(access_mac_group_vlan_classification, "access")
        vlan = ET.SubElement(access, "vlan")
        access_mac_group_key = ET.SubElement(vlan, "access-mac-group")
        access_mac_group_key.text = kwargs.pop('access_mac_group')
        access_vlan_id = ET.SubElement(vlan, "access-vlan-id")
        access_vlan_id.text = kwargs.pop('access_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_access_mac_group_vlan_classification_access_vlan_access_mac_group(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        access_mac_group_vlan_classification = ET.SubElement(switchport, "access-mac-group-vlan-classification")
        access = ET.SubElement(access_mac_group_vlan_classification, "access")
        vlan = ET.SubElement(access, "vlan")
        access_vlan_id_key = ET.SubElement(vlan, "access-vlan-id")
        access_vlan_id_key.text = kwargs.pop('access_vlan_id')
        access_mac_group = ET.SubElement(vlan, "access-mac-group")
        access_mac_group.text = kwargs.pop('access_mac_group')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_trunk_allowed_vlan_all(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        all = ET.SubElement(vlan, "all")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_trunk_allowed_vlan_none(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        none = ET.SubElement(vlan, "none")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_trunk_allowed_vlan_add(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        add = ET.SubElement(vlan, "add")
        add.text = kwargs.pop('add')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_trunk_allowed_vlan_excpt(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        excpt = ET.SubElement(vlan, "except")
        excpt.text = kwargs.pop('excpt')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_trunk_allowed_vlan_remove(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        remove = ET.SubElement(vlan, "remove")
        remove.text = kwargs.pop('remove')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_trunk_allowed_vlanoper_vlan_add(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlanoper = ET.SubElement(allowed, "vlanoper")
        vlan = ET.SubElement(vlanoper, "vlan")
        add = ET.SubElement(vlan, "add")
        add.text = kwargs.pop('add')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_trunk_allowed_vlanoper_vlan_remove(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlanoper = ET.SubElement(allowed, "vlanoper")
        vlan = ET.SubElement(vlanoper, "vlan")
        remove = ET.SubElement(vlan, "remove")
        remove.text = kwargs.pop('remove')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_trunk_allowed_rspan_vlan_add_rspan_trunk_vlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        rspan_vlan = ET.SubElement(allowed, "rspan-vlan")
        add_rspan_trunk_vlan = ET.SubElement(rspan_vlan, "add-rspan-trunk-vlan")
        add_rspan_trunk_vlan.text = kwargs.pop('add_rspan_trunk_vlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_trunk_allowed_rspan_vlan_remove_rspan_trunk_vlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        rspan_vlan = ET.SubElement(allowed, "rspan-vlan")
        remove_rspan_trunk_vlan = ET.SubElement(rspan_vlan, "remove-rspan-trunk-vlan")
        remove_rspan_trunk_vlan.text = kwargs.pop('remove_rspan_trunk_vlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_trunk_allowed_trunk_rspan_vlan_classification_rspan_vlan_add_trunk_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        trunk_rspan_vlan_classification = ET.SubElement(allowed, "trunk-rspan-vlan-classification")
        rspan_vlan = ET.SubElement(trunk_rspan_vlan_classification, "rspan-vlan")
        add = ET.SubElement(rspan_vlan, "add")
        trunk_ctag_id_key = ET.SubElement(add, "trunk-ctag-id")
        trunk_ctag_id_key.text = kwargs.pop('trunk_ctag_id')
        trunk_vlan_id = ET.SubElement(add, "trunk-vlan-id")
        trunk_vlan_id.text = kwargs.pop('trunk_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_trunk_allowed_trunk_rspan_vlan_classification_rspan_vlan_add_trunk_ctag_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        trunk_rspan_vlan_classification = ET.SubElement(allowed, "trunk-rspan-vlan-classification")
        rspan_vlan = ET.SubElement(trunk_rspan_vlan_classification, "rspan-vlan")
        add = ET.SubElement(rspan_vlan, "add")
        trunk_vlan_id_key = ET.SubElement(add, "trunk-vlan-id")
        trunk_vlan_id_key.text = kwargs.pop('trunk_vlan_id')
        trunk_ctag_id = ET.SubElement(add, "trunk-ctag-id")
        trunk_ctag_id.text = kwargs.pop('trunk_ctag_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_trunk_allowed_trunk_rspan_vlan_classification_rspan_vlan_remove_trunk_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        trunk_rspan_vlan_classification = ET.SubElement(allowed, "trunk-rspan-vlan-classification")
        rspan_vlan = ET.SubElement(trunk_rspan_vlan_classification, "rspan-vlan")
        remove = ET.SubElement(rspan_vlan, "remove")
        trunk_ctag_id_key = ET.SubElement(remove, "trunk-ctag-id")
        trunk_ctag_id_key.text = kwargs.pop('trunk_ctag_id')
        trunk_vlan_id = ET.SubElement(remove, "trunk-vlan-id")
        trunk_vlan_id.text = kwargs.pop('trunk_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_trunk_allowed_trunk_rspan_vlan_classification_rspan_vlan_remove_trunk_ctag_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        trunk_rspan_vlan_classification = ET.SubElement(allowed, "trunk-rspan-vlan-classification")
        rspan_vlan = ET.SubElement(trunk_rspan_vlan_classification, "rspan-vlan")
        remove = ET.SubElement(rspan_vlan, "remove")
        trunk_vlan_id_key = ET.SubElement(remove, "trunk-vlan-id")
        trunk_vlan_id_key.text = kwargs.pop('trunk_vlan_id')
        trunk_ctag_id = ET.SubElement(remove, "trunk-ctag-id")
        trunk_ctag_id.text = kwargs.pop('trunk_ctag_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_trunk_trunk_vlan_classification_allowed_vlan_add_trunk_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        trunk_vlan_classification = ET.SubElement(trunk, "trunk-vlan-classification")
        allowed = ET.SubElement(trunk_vlan_classification, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        add = ET.SubElement(vlan, "add")
        trunk_vlan_id = ET.SubElement(add, "trunk-vlan-id")
        trunk_vlan_id.text = kwargs.pop('trunk_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_trunk_trunk_vlan_classification_allowed_vlan_add_trunk_ctag_range(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        trunk_vlan_classification = ET.SubElement(trunk, "trunk-vlan-classification")
        allowed = ET.SubElement(trunk_vlan_classification, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        add = ET.SubElement(vlan, "add")
        trunk_vlan_id_key = ET.SubElement(add, "trunk-vlan-id")
        trunk_vlan_id_key.text = kwargs.pop('trunk_vlan_id')
        trunk_ctag_range = ET.SubElement(add, "trunk-ctag-range")
        trunk_ctag_range.text = kwargs.pop('trunk_ctag_range')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_trunk_trunk_vlan_classification_allowed_vlan_remove_trunk_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        trunk_vlan_classification = ET.SubElement(trunk, "trunk-vlan-classification")
        allowed = ET.SubElement(trunk_vlan_classification, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        remove = ET.SubElement(vlan, "remove")
        trunk_vlan_id = ET.SubElement(remove, "trunk-vlan-id")
        trunk_vlan_id.text = kwargs.pop('trunk_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_trunk_trunk_vlan_classification_allowed_vlan_remove_trunk_ctag_range(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        trunk_vlan_classification = ET.SubElement(trunk, "trunk-vlan-classification")
        allowed = ET.SubElement(trunk_vlan_classification, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        remove = ET.SubElement(vlan, "remove")
        trunk_vlan_id_key = ET.SubElement(remove, "trunk-vlan-id")
        trunk_vlan_id_key.text = kwargs.pop('trunk_vlan_id')
        trunk_ctag_range = ET.SubElement(remove, "trunk-ctag-range")
        trunk_ctag_range.text = kwargs.pop('trunk_ctag_range')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_trunk_default_vlan_config_default_transparent_vlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        default_vlan_config = ET.SubElement(trunk, "default-vlan-config")
        default_transparent_vlan = ET.SubElement(default_vlan_config, "default-transparent-vlan")
        default_transparent_vlan.text = kwargs.pop('default_transparent_vlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_trunk_tag_native_vlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        tag = ET.SubElement(trunk, "tag")
        native_vlan = ET.SubElement(tag, "native-vlan")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_trunk_native_vlan_classification_native_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        native_vlan_classification = ET.SubElement(trunk, "native-vlan-classification")
        native_vlan_id = ET.SubElement(native_vlan_classification, "native-vlan-id")
        native_vlan_id.text = kwargs.pop('native_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_trunk_native_vlan_classification_native_vlan_ctag_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        native_vlan_classification = ET.SubElement(trunk, "native-vlan-classification")
        native_vlan_ctag_id = ET.SubElement(native_vlan_classification, "native-vlan-ctag-id")
        native_vlan_ctag_id.text = kwargs.pop('native_vlan_ctag_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_trunk_native_vlan_xtagged_config_native_vlan_id_xtagged(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        native_vlan_xtagged_config = ET.SubElement(trunk, "native-vlan-xtagged-config")
        native_vlan_id_xtagged = ET.SubElement(native_vlan_xtagged_config, "native-vlan-id-xtagged")
        native_vlan_id_xtagged.text = kwargs.pop('native_vlan_id_xtagged')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_trunk_native_vlan_xtagged_config_native_vlan_ctag_id_xtagged(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        native_vlan_xtagged_config = ET.SubElement(trunk, "native-vlan-xtagged-config")
        native_vlan_ctag_id_xtagged = ET.SubElement(native_vlan_xtagged_config, "native-vlan-ctag-id-xtagged")
        native_vlan_ctag_id_xtagged.text = kwargs.pop('native_vlan_ctag_id_xtagged')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_trunk_native_vlan_xtagged_config_native_vlan_egress_type_xtagged(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        native_vlan_xtagged_config = ET.SubElement(trunk, "native-vlan-xtagged-config")
        native_vlan_egress_type_xtagged = ET.SubElement(native_vlan_xtagged_config, "native-vlan-egress-type-xtagged")
        native_vlan_egress_type_xtagged.text = kwargs.pop('native_vlan_egress_type_xtagged')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_trunk_native_vlan_untagged_config_native_vlan_id_untagged(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        native_vlan_untagged_config = ET.SubElement(trunk, "native-vlan-untagged-config")
        native_vlan_id_untagged = ET.SubElement(native_vlan_untagged_config, "native-vlan-id-untagged")
        native_vlan_id_untagged.text = kwargs.pop('native_vlan_id_untagged')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_private_vlan_trunk_pvlan_tag_pvlan_tag_native_vlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        pvlan_tag = ET.SubElement(trunk, "pvlan-tag")
        pvlan_tag_native_vlan = ET.SubElement(pvlan_tag, "pvlan-tag-native-vlan")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_private_vlan_trunk_native_pvlanNativevlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        native = ET.SubElement(trunk, "native")
        pvlanNativevlan = ET.SubElement(native, "pvlanNativevlan")
        pvlanNativevlan.text = kwargs.pop('pvlanNativevlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_private_vlan_trunk_native_pvlan_native_vlan_ctag_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        native = ET.SubElement(trunk, "native")
        pvlan_native_vlan_ctag_id = ET.SubElement(native, "pvlan-native-vlan-ctag-id")
        pvlan_native_vlan_ctag_id.text = kwargs.pop('pvlan_native_vlan_ctag_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_private_vlan_trunk_allowed_vlan_pvlan_all(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        pvlan_all = ET.SubElement(vlan, "pvlan_all")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_private_vlan_trunk_allowed_vlan_pvlan_none(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        pvlan_none = ET.SubElement(vlan, "pvlan_none")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_private_vlan_trunk_allowed_vlan_pvlan_add(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        pvlan_add = ET.SubElement(vlan, "pvlan_add")
        pvlan_add.text = kwargs.pop('pvlan_add')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_private_vlan_trunk_allowed_vlan_pvlan_except(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        pvlan_except = ET.SubElement(vlan, "pvlan_except")
        pvlan_except.text = kwargs.pop('pvlan_except')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_private_vlan_trunk_allowed_vlan_pvlan_remove(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        pvlan_remove = ET.SubElement(vlan, "pvlan_remove")
        pvlan_remove.text = kwargs.pop('pvlan_remove')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_private_vlan_host_association_host_pri_pvlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        host_association = ET.SubElement(private_vlan, "host-association")
        host_pri_pvlan = ET.SubElement(host_association, "host-pri-pvlan")
        host_pri_pvlan.text = kwargs.pop('host_pri_pvlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_private_vlan_host_association_host_sec_pvlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        host_association = ET.SubElement(private_vlan, "host-association")
        host_sec_pvlan = ET.SubElement(host_association, "host-sec-pvlan")
        host_sec_pvlan.text = kwargs.pop('host_sec_pvlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_private_vlan_association_trunk_trunk_pri_pvlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        association = ET.SubElement(private_vlan, "association")
        trunk = ET.SubElement(association, "trunk")
        trunk_sec_pvlan_key = ET.SubElement(trunk, "trunk-sec-pvlan")
        trunk_sec_pvlan_key.text = kwargs.pop('trunk_sec_pvlan')
        trunk_pri_pvlan = ET.SubElement(trunk, "trunk-pri-pvlan")
        trunk_pri_pvlan.text = kwargs.pop('trunk_pri_pvlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_private_vlan_association_trunk_trunk_sec_pvlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        association = ET.SubElement(private_vlan, "association")
        trunk = ET.SubElement(association, "trunk")
        trunk_pri_pvlan_key = ET.SubElement(trunk, "trunk-pri-pvlan")
        trunk_pri_pvlan_key.text = kwargs.pop('trunk_pri_pvlan')
        trunk_sec_pvlan = ET.SubElement(trunk, "trunk-sec-pvlan")
        trunk_sec_pvlan.text = kwargs.pop('trunk_sec_pvlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_private_vlan_mapping_promis_pri_pvlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        mapping = ET.SubElement(private_vlan, "mapping")
        promis_pri_pvlan = ET.SubElement(mapping, "promis-pri-pvlan")
        promis_pri_pvlan.text = kwargs.pop('promis_pri_pvlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_private_vlan_mapping_oper(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        mapping = ET.SubElement(private_vlan, "mapping")
        promis_pri_pvlan_key = ET.SubElement(mapping, "promis-pri-pvlan")
        promis_pri_pvlan_key.text = kwargs.pop('promis_pri_pvlan')
        oper = ET.SubElement(mapping, "oper")
        oper.text = kwargs.pop('oper')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_private_vlan_mapping_promis_sec_pvlan_range(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        mapping = ET.SubElement(private_vlan, "mapping")
        promis_pri_pvlan_key = ET.SubElement(mapping, "promis-pri-pvlan")
        promis_pri_pvlan_key.text = kwargs.pop('promis_pri_pvlan')
        promis_sec_pvlan_range = ET.SubElement(mapping, "promis-sec-pvlan-range")
        promis_sec_pvlan_range.text = kwargs.pop('promis_sec_pvlan_range')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_access_mac_rspan_vlan_classification_access_vlan_access_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        access_mac_rspan_vlan_classification = ET.SubElement(switchport, "access-mac-rspan-vlan-classification")
        access = ET.SubElement(access_mac_rspan_vlan_classification, "access")
        vlan = ET.SubElement(access, "vlan")
        access_mac_address_key = ET.SubElement(vlan, "access-mac-address")
        access_mac_address_key.text = kwargs.pop('access_mac_address')
        access_vlan_id = ET.SubElement(vlan, "access-vlan-id")
        access_vlan_id.text = kwargs.pop('access_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_access_mac_rspan_vlan_classification_access_vlan_access_mac_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        access_mac_rspan_vlan_classification = ET.SubElement(switchport, "access-mac-rspan-vlan-classification")
        access = ET.SubElement(access_mac_rspan_vlan_classification, "access")
        vlan = ET.SubElement(access, "vlan")
        access_vlan_id_key = ET.SubElement(vlan, "access-vlan-id")
        access_vlan_id_key.text = kwargs.pop('access_vlan_id')
        access_mac_address = ET.SubElement(vlan, "access-mac-address")
        access_mac_address.text = kwargs.pop('access_mac_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_access_mac_group_rspan_vlan_classification_access_vlan_access_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        access_mac_group_rspan_vlan_classification = ET.SubElement(switchport, "access-mac-group-rspan-vlan-classification")
        access = ET.SubElement(access_mac_group_rspan_vlan_classification, "access")
        vlan = ET.SubElement(access, "vlan")
        access_mac_group_key = ET.SubElement(vlan, "access-mac-group")
        access_mac_group_key.text = kwargs.pop('access_mac_group')
        access_vlan_id = ET.SubElement(vlan, "access-vlan-id")
        access_vlan_id.text = kwargs.pop('access_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_switchport_access_mac_group_rspan_vlan_classification_access_vlan_access_mac_group(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(fortygigabitethernet, "switchport")
        access_mac_group_rspan_vlan_classification = ET.SubElement(switchport, "access-mac-group-rspan-vlan-classification")
        access = ET.SubElement(access_mac_group_rspan_vlan_classification, "access")
        vlan = ET.SubElement(access, "vlan")
        access_vlan_id_key = ET.SubElement(vlan, "access-vlan-id")
        access_vlan_id_key.text = kwargs.pop('access_vlan_id')
        access_mac_group = ET.SubElement(vlan, "access-mac-group")
        access_mac_group.text = kwargs.pop('access_mac_group')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_mac_learning_mac_learn_disable_vlan_mac_learning_vlan_add(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        mac_learning = ET.SubElement(fortygigabitethernet, "mac-learning")
        mac_learn_disable = ET.SubElement(mac_learning, "mac-learn-disable")
        vlan = ET.SubElement(mac_learn_disable, "vlan")
        mac_learning_vlan_add = ET.SubElement(vlan, "mac-learning-vlan-add")
        mac_learning_vlan_add.text = kwargs.pop('mac_learning_vlan_add')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_mac_learning_mac_learn_disable_vlan_mac_learning_vlan_remove(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        mac_learning = ET.SubElement(fortygigabitethernet, "mac-learning")
        mac_learn_disable = ET.SubElement(mac_learning, "mac-learn-disable")
        vlan = ET.SubElement(mac_learn_disable, "vlan")
        mac_learning_vlan_remove = ET.SubElement(vlan, "mac-learning-vlan-remove")
        mac_learning_vlan_remove.text = kwargs.pop('mac_learning_vlan_remove')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_ip_config_mtu(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        ip_config = ET.SubElement(ip, "ip-config", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        mtu = ET.SubElement(ip_config, "mtu")
        mtu.text = kwargs.pop('mtu')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_ip_config_directed_broadcast(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        ip_config = ET.SubElement(ip, "ip-config", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        directed_broadcast = ET.SubElement(ip_config, "directed-broadcast")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_ip_config_proxy_arp(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        ip_config = ET.SubElement(ip, "ip-config", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        proxy_arp = ET.SubElement(ip_config, "proxy-arp")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_ip_config_arp_aging_timeout(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        ip_config = ET.SubElement(ip, "ip-config", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        arp_aging_timeout = ET.SubElement(ip_config, "arp-aging-timeout")
        arp_aging_timeout.text = kwargs.pop('arp_aging_timeout')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_ip_config_address_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        ip_config = ET.SubElement(ip, "ip-config", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        address = ET.SubElement(ip_config, "address")
        address = ET.SubElement(address, "address")
        address.text = kwargs.pop('address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_ip_config_address_secondary(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        ip_config = ET.SubElement(ip, "ip-config", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        address = ET.SubElement(ip_config, "address")
        address_key = ET.SubElement(address, "address")
        address_key.text = kwargs.pop('address')
        secondary = ET.SubElement(address, "secondary")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_ip_config_address_ospf_passive(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        ip_config = ET.SubElement(ip, "ip-config", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        address = ET.SubElement(ip_config, "address")
        address_key = ET.SubElement(address, "address")
        address_key.text = kwargs.pop('address')
        ospf_passive = ET.SubElement(address, "ospf-passive")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_ip_config_address_ospf_ignore(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        ip_config = ET.SubElement(ip, "ip-config", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        address = ET.SubElement(ip_config, "address")
        address_key = ET.SubElement(address, "address")
        address_key.text = kwargs.pop('address')
        ospf_ignore = ET.SubElement(address, "ospf-ignore")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_arp_node_config_arp_inspection_trust(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        arp_node_config = ET.SubElement(ip, "arp-node-config", xmlns="urn:brocade.com:mgmt:brocade-dai")
        arp = ET.SubElement(arp_node_config, "arp")
        inspection = ET.SubElement(arp, "inspection")
        trust = ET.SubElement(inspection, "trust")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_interface_fo_dhcp_conf_dhcp_relay_servers_relay_ip_addr(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        interface_fo_dhcp_conf = ET.SubElement(ip, "interface-fo-dhcp-conf", xmlns="urn:brocade.com:mgmt:brocade-dhcp")
        dhcp = ET.SubElement(interface_fo_dhcp_conf, "dhcp")
        relay = ET.SubElement(dhcp, "relay")
        servers = ET.SubElement(relay, "servers")
        server_vrf_name_key = ET.SubElement(servers, "server-vrf-name")
        server_vrf_name_key.text = kwargs.pop('server_vrf_name')
        relay_ip_addr = ET.SubElement(servers, "relay-ip-addr")
        relay_ip_addr.text = kwargs.pop('relay_ip_addr')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_interface_fo_dhcp_conf_dhcp_relay_servers_server_vrf_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        interface_fo_dhcp_conf = ET.SubElement(ip, "interface-fo-dhcp-conf", xmlns="urn:brocade.com:mgmt:brocade-dhcp")
        dhcp = ET.SubElement(interface_fo_dhcp_conf, "dhcp")
        relay = ET.SubElement(dhcp, "relay")
        servers = ET.SubElement(relay, "servers")
        relay_ip_addr_key = ET.SubElement(servers, "relay-ip-addr")
        relay_ip_addr_key.text = kwargs.pop('relay_ip_addr')
        server_vrf_name = ET.SubElement(servers, "server-vrf-name")
        server_vrf_name.text = kwargs.pop('server_vrf_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_interface_fo_dhcp_conf_dhcp_relay_gateway(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        interface_fo_dhcp_conf = ET.SubElement(ip, "interface-fo-dhcp-conf", xmlns="urn:brocade.com:mgmt:brocade-dhcp")
        dhcp = ET.SubElement(interface_fo_dhcp_conf, "dhcp")
        relay = ET.SubElement(dhcp, "relay")
        gateway = ET.SubElement(relay, "gateway")
        gateway.text = kwargs.pop('gateway')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_icmp_echo_reply(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        icmp = ET.SubElement(ip, "icmp", xmlns="urn:brocade.com:mgmt:brocade-icmp")
        echo_reply = ET.SubElement(icmp, "echo-reply")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_icmp_rate_limiting(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        icmp = ET.SubElement(ip, "icmp", xmlns="urn:brocade.com:mgmt:brocade-icmp")
        rate_limiting = ET.SubElement(icmp, "rate-limiting")
        rate_limiting.text = kwargs.pop('rate_limiting')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_icmp_unreachable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        icmp = ET.SubElement(ip, "icmp", xmlns="urn:brocade.com:mgmt:brocade-icmp")
        unreachable = ET.SubElement(icmp, "unreachable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_icmp_redirect(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        icmp = ET.SubElement(ip, "icmp", xmlns="urn:brocade.com:mgmt:brocade-icmp")
        redirect = ET.SubElement(icmp, "redirect")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_icmp_address_mask(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        icmp = ET.SubElement(ip, "icmp", xmlns="urn:brocade.com:mgmt:brocade-icmp")
        address_mask = ET.SubElement(icmp, "address-mask")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_igmp_phy_intf_cfg_igmp_last_member_query_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        igmp_phy_intf_cfg = ET.SubElement(ip, "igmp-phy-intf-cfg", xmlns="urn:brocade.com:mgmt:brocade-igmp")
        igmp = ET.SubElement(igmp_phy_intf_cfg, "igmp")
        last_member_query_interval = ET.SubElement(igmp, "last-member-query-interval")
        last_member_query_interval.text = kwargs.pop('last_member_query_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_igmp_phy_intf_cfg_igmp_query_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        igmp_phy_intf_cfg = ET.SubElement(ip, "igmp-phy-intf-cfg", xmlns="urn:brocade.com:mgmt:brocade-igmp")
        igmp = ET.SubElement(igmp_phy_intf_cfg, "igmp")
        query_interval = ET.SubElement(igmp, "query-interval")
        query_interval.text = kwargs.pop('query_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_igmp_phy_intf_cfg_igmp_query_max_response_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        igmp_phy_intf_cfg = ET.SubElement(ip, "igmp-phy-intf-cfg", xmlns="urn:brocade.com:mgmt:brocade-igmp")
        igmp = ET.SubElement(igmp_phy_intf_cfg, "igmp")
        query_max_response_time = ET.SubElement(igmp, "query-max-response-time")
        query_max_response_time.text = kwargs.pop('query_max_response_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_igmp_phy_intf_cfg_igmp_immediate_leave(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        igmp_phy_intf_cfg = ET.SubElement(ip, "igmp-phy-intf-cfg", xmlns="urn:brocade.com:mgmt:brocade-igmp")
        igmp = ET.SubElement(igmp_phy_intf_cfg, "igmp")
        immediate_leave = ET.SubElement(igmp, "immediate-leave")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_igmp_phy_intf_cfg_igmp_static_group_sg_addr(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        igmp_phy_intf_cfg = ET.SubElement(ip, "igmp-phy-intf-cfg", xmlns="urn:brocade.com:mgmt:brocade-igmp")
        igmp = ET.SubElement(igmp_phy_intf_cfg, "igmp")
        static_group = ET.SubElement(igmp, "static-group")
        sg_addr = ET.SubElement(static_group, "sg-addr")
        sg_addr.text = kwargs.pop('sg_addr')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_interface_fo_ospf_conf_ospf1_area(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        area = ET.SubElement(ospf1, "area")
        area.text = kwargs.pop('area')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_interface_fo_ospf_conf_ospf1_auth_change_wait_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        auth_change_wait_time = ET.SubElement(ospf1, "auth-change-wait-time")
        auth_change_wait_time.text = kwargs.pop('auth_change_wait_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_interface_fo_ospf_conf_ospf1_authentication_key_no_encrypt_auth_key_table_no_encrypt_auth_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        authentication_key = ET.SubElement(ospf1, "authentication-key")
        no_encrypt_auth_key_table = ET.SubElement(authentication_key, "no-encrypt-auth-key-table")
        no_encrypt_auth_key = ET.SubElement(no_encrypt_auth_key_table, "no-encrypt-auth-key")
        no_encrypt_auth_key.text = kwargs.pop('no_encrypt_auth_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_interface_fo_ospf_conf_ospf1_authentication_key_auth_key_table_encrypttype(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        authentication_key = ET.SubElement(ospf1, "authentication-key")
        auth_key_table = ET.SubElement(authentication_key, "auth-key-table")
        encrypttype = ET.SubElement(auth_key_table, "encrypttype")
        encrypttype.text = kwargs.pop('encrypttype')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_interface_fo_ospf_conf_ospf1_authentication_key_auth_key_table_auth_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        authentication_key = ET.SubElement(ospf1, "authentication-key")
        auth_key_table = ET.SubElement(authentication_key, "auth-key-table")
        auth_key = ET.SubElement(auth_key_table, "auth-key")
        auth_key.text = kwargs.pop('auth_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_interface_fo_ospf_conf_ospf1_dead_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        dead_interval = ET.SubElement(ospf1, "dead-interval")
        dead_interval.text = kwargs.pop('dead_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_interface_fo_ospf_conf_ospf1_hello_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        hello_interval = ET.SubElement(ospf1, "hello-interval")
        hello_interval.text = kwargs.pop('hello_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_interface_fo_ospf_conf_ospf1_retransmit_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        retransmit_interval = ET.SubElement(ospf1, "retransmit-interval")
        retransmit_interval.text = kwargs.pop('retransmit_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_interface_fo_ospf_conf_ospf1_transmit_delay(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        transmit_delay = ET.SubElement(ospf1, "transmit-delay")
        transmit_delay.text = kwargs.pop('transmit_delay')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_interface_fo_ospf_conf_ospf1_md5_authentication_key_activation_wait_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        md5_authentication = ET.SubElement(ospf1, "md5-authentication")
        key_activation_wait_time = ET.SubElement(md5_authentication, "key-activation-wait-time")
        key_activation_wait_time.text = kwargs.pop('key_activation_wait_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_interface_fo_ospf_conf_ospf1_md5_authentication_no_encrypt_key_table_no_encrypt_key_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        md5_authentication = ET.SubElement(ospf1, "md5-authentication")
        no_encrypt_key_table = ET.SubElement(md5_authentication, "no-encrypt-key-table")
        no_encrypt_key_id = ET.SubElement(no_encrypt_key_table, "no-encrypt-key-id")
        no_encrypt_key_id.text = kwargs.pop('no_encrypt_key_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_interface_fo_ospf_conf_ospf1_md5_authentication_no_encrypt_key_table_no_encrypt_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        md5_authentication = ET.SubElement(ospf1, "md5-authentication")
        no_encrypt_key_table = ET.SubElement(md5_authentication, "no-encrypt-key-table")
        no_encrypt_key = ET.SubElement(no_encrypt_key_table, "no-encrypt-key")
        no_encrypt_key.text = kwargs.pop('no_encrypt_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_interface_fo_ospf_conf_ospf1_md5_authentication_key_table_key_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        md5_authentication = ET.SubElement(ospf1, "md5-authentication")
        key_table = ET.SubElement(md5_authentication, "key-table")
        key_id = ET.SubElement(key_table, "key-id")
        key_id.text = kwargs.pop('key_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_interface_fo_ospf_conf_ospf1_md5_authentication_key_table_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        md5_authentication = ET.SubElement(ospf1, "md5-authentication")
        key_table = ET.SubElement(md5_authentication, "key-table")
        key = ET.SubElement(key_table, "key")
        key.text = kwargs.pop('key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_interface_fo_ospf_conf_ospf1_md5_authentication_key_table_md5_authentication_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        md5_authentication = ET.SubElement(ospf1, "md5-authentication")
        key_table = ET.SubElement(md5_authentication, "key-table")
        md5_authentication_key = ET.SubElement(key_table, "md5-authentication-key")
        md5_authentication_key.text = kwargs.pop('md5_authentication_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_interface_fo_ospf_conf_ospf1_cost(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        cost = ET.SubElement(ospf1, "cost")
        cost.text = kwargs.pop('cost')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_interface_fo_ospf_conf_ospf1_database_filter_all_out(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        database_filter = ET.SubElement(ospf1, "database-filter")
        all_out = ET.SubElement(database_filter, "all-out")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_interface_fo_ospf_conf_ospf1_database_filter_all_external(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        database_filter = ET.SubElement(ospf1, "database-filter")
        all_external = ET.SubElement(database_filter, "all-external")
        all_external.text = kwargs.pop('all_external')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_interface_fo_ospf_conf_ospf1_database_filter_all_summary_external(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        database_filter = ET.SubElement(ospf1, "database-filter")
        all_summary_external = ET.SubElement(database_filter, "all-summary-external")
        all_summary_external.text = kwargs.pop('all_summary_external')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_interface_fo_ospf_conf_ospf1_mtu_ignore(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        mtu_ignore = ET.SubElement(ospf1, "mtu-ignore")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_interface_fo_ospf_conf_ospf1_network(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        network = ET.SubElement(ospf1, "network")
        network.text = kwargs.pop('network')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_interface_fo_ospf_conf_ospf1_active(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        active = ET.SubElement(ospf1, "active")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_interface_fo_ospf_conf_ospf1_passive(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        passive = ET.SubElement(ospf1, "passive")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_interface_fo_ospf_conf_ospf1_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        priority = ET.SubElement(ospf1, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_interface_fo_ospf_conf_ospf1_bfd_intf_bfd_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        bfd = ET.SubElement(ospf1, "bfd")
        intf_bfd_enable = ET.SubElement(bfd, "intf-bfd-enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_pim_intf_phy_cont_pim_int_cmd_pim_sparse(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        pim_intf_phy_cont = ET.SubElement(ip, "pim-intf-phy-cont", xmlns="urn:brocade.com:mgmt:brocade-pim")
        pim_int_cmd = ET.SubElement(pim_intf_phy_cont, "pim-int-cmd")
        pim_sparse = ET.SubElement(pim_int_cmd, "pim-sparse")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_pim_intf_phy_cont_pim_int_cmd_pim_neighbor_filter(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        pim_intf_phy_cont = ET.SubElement(ip, "pim-intf-phy-cont", xmlns="urn:brocade.com:mgmt:brocade-pim")
        pim_int_cmd = ET.SubElement(pim_intf_phy_cont, "pim-int-cmd")
        pim = ET.SubElement(pim_int_cmd, "pim")
        neighbor_filter = ET.SubElement(pim, "neighbor-filter")
        neighbor_filter.text = kwargs.pop('neighbor_filter')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_pim_intf_phy_cont_pim_int_cmd_pim_dr_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        pim_intf_phy_cont = ET.SubElement(ip, "pim-intf-phy-cont", xmlns="urn:brocade.com:mgmt:brocade-pim")
        pim_int_cmd = ET.SubElement(pim_intf_phy_cont, "pim-int-cmd")
        pim = ET.SubElement(pim_int_cmd, "pim")
        dr_priority = ET.SubElement(pim, "dr-priority")
        dr_priority.text = kwargs.pop('dr_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_pim_intf_phy_cont_pim_int_cmd_mcast_bdry_prefix_list(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(fortygigabitethernet, "ip")
        pim_intf_phy_cont = ET.SubElement(ip, "pim-intf-phy-cont", xmlns="urn:brocade.com:mgmt:brocade-pim")
        pim_int_cmd = ET.SubElement(pim_intf_phy_cont, "pim-int-cmd")
        mcast_bdry_prefix_list = ET.SubElement(pim_int_cmd, "mcast-bdry-prefix-list")
        mcast_bdry_prefix_list.text = kwargs.pop('mcast_bdry_prefix_list')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_vrf_forwarding(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrf = ET.SubElement(fortygigabitethernet, "vrf")
        forwarding = ET.SubElement(vrf, "forwarding")
        forwarding.text = kwargs.pop('forwarding')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_raguard(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        raguard = ET.SubElement(ipv6, "raguard")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_ipv6_config_address_use_link_local_only(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        address = ET.SubElement(ipv6_config, "address")
        use_link_local_only = ET.SubElement(address, "use-link-local-only")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_ipv6_config_address_link_local_config_link_local_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        address = ET.SubElement(ipv6_config, "address")
        link_local_config = ET.SubElement(address, "link-local-config")
        link_local_address = ET.SubElement(link_local_config, "link-local-address")
        link_local_address.text = kwargs.pop('link_local_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_ipv6_config_address_link_local_config_link_local(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        address = ET.SubElement(ipv6_config, "address")
        link_local_config = ET.SubElement(address, "link-local-config")
        link_local = ET.SubElement(link_local_config, "link-local")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_ipv6_config_address_ipv6_address_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        address = ET.SubElement(ipv6_config, "address")
        ipv6_address = ET.SubElement(address, "ipv6-address")
        address = ET.SubElement(ipv6_address, "address")
        address.text = kwargs.pop('address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_ipv6_config_address_ipv6_address_secondary(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        address = ET.SubElement(ipv6_config, "address")
        ipv6_address = ET.SubElement(address, "ipv6-address")
        address_key = ET.SubElement(ipv6_address, "address")
        address_key.text = kwargs.pop('address')
        secondary = ET.SubElement(ipv6_address, "secondary")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_ipv6_config_address_ipv6_address_eui_config_eui64(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        address = ET.SubElement(ipv6_config, "address")
        ipv6_address = ET.SubElement(address, "ipv6-address")
        address_key = ET.SubElement(ipv6_address, "address")
        address_key.text = kwargs.pop('address')
        eui_config = ET.SubElement(ipv6_address, "eui-config")
        eui64 = ET.SubElement(eui_config, "eui64")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_ipv6_config_address_ipv6_address_eui_config_eui_secondary(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        address = ET.SubElement(ipv6_config, "address")
        ipv6_address = ET.SubElement(address, "ipv6-address")
        address_key = ET.SubElement(ipv6_address, "address")
        address_key.text = kwargs.pop('address')
        eui_config = ET.SubElement(ipv6_address, "eui-config")
        eui_secondary = ET.SubElement(eui_config, "eui-secondary")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_ipv6_config_address_ipv6_address_anycast(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        address = ET.SubElement(ipv6_config, "address")
        ipv6_address = ET.SubElement(address, "ipv6-address")
        address_key = ET.SubElement(ipv6_address, "address")
        address_key.text = kwargs.pop('address')
        anycast = ET.SubElement(ipv6_address, "anycast")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_ipv6_config_mtu(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        mtu = ET.SubElement(ipv6_config, "mtu")
        mtu.text = kwargs.pop('mtu')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_interface_phy_dhcp_conf_dhcp_relay_servers_relay_ip_addr(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        interface_phy_dhcp_conf = ET.SubElement(ipv6, "interface-phy-dhcp-conf", xmlns="urn:brocade.com:mgmt:brocade-dhcpv6")
        dhcp = ET.SubElement(interface_phy_dhcp_conf, "dhcp")
        relay = ET.SubElement(dhcp, "relay")
        servers = ET.SubElement(relay, "servers")
        relay_ip_addr = ET.SubElement(servers, "relay-ip-addr")
        relay_ip_addr.text = kwargs.pop('relay_ip_addr')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_interface_phy_dhcp_conf_dhcp_relay_servers_server_vrf_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        interface_phy_dhcp_conf = ET.SubElement(ipv6, "interface-phy-dhcp-conf", xmlns="urn:brocade.com:mgmt:brocade-dhcpv6")
        dhcp = ET.SubElement(interface_phy_dhcp_conf, "dhcp")
        relay = ET.SubElement(dhcp, "relay")
        servers = ET.SubElement(relay, "servers")
        relay_ip_addr_key = ET.SubElement(servers, "relay-ip-addr")
        relay_ip_addr_key.text = kwargs.pop('relay_ip_addr')
        server_vrf_name = ET.SubElement(servers, "server-vrf-name")
        server_vrf_name.text = kwargs.pop('server_vrf_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_interface_phy_dhcp_conf_dhcp_relay_servers_interface_interface_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        interface_phy_dhcp_conf = ET.SubElement(ipv6, "interface-phy-dhcp-conf", xmlns="urn:brocade.com:mgmt:brocade-dhcpv6")
        dhcp = ET.SubElement(interface_phy_dhcp_conf, "dhcp")
        relay = ET.SubElement(dhcp, "relay")
        servers = ET.SubElement(relay, "servers")
        relay_ip_addr_key = ET.SubElement(servers, "relay-ip-addr")
        relay_ip_addr_key.text = kwargs.pop('relay_ip_addr')
        interface = ET.SubElement(servers, "interface")
        interface_type = ET.SubElement(interface, "interface-type")
        interface_type.text = kwargs.pop('interface_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_interface_phy_dhcp_conf_dhcp_relay_servers_interface_interface_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        interface_phy_dhcp_conf = ET.SubElement(ipv6, "interface-phy-dhcp-conf", xmlns="urn:brocade.com:mgmt:brocade-dhcpv6")
        dhcp = ET.SubElement(interface_phy_dhcp_conf, "dhcp")
        relay = ET.SubElement(dhcp, "relay")
        servers = ET.SubElement(relay, "servers")
        relay_ip_addr_key = ET.SubElement(servers, "relay-ip-addr")
        relay_ip_addr_key.text = kwargs.pop('relay_ip_addr')
        interface = ET.SubElement(servers, "interface")
        interface_name = ET.SubElement(interface, "interface-name")
        interface_name.text = kwargs.pop('interface_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_icmpv6_echo_reply(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        icmpv6 = ET.SubElement(ipv6, "icmpv6", xmlns="urn:brocade.com:mgmt:brocade-icmp")
        echo_reply = ET.SubElement(icmpv6, "echo-reply")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_icmpv6_rate_limiting(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        icmpv6 = ET.SubElement(ipv6, "icmpv6", xmlns="urn:brocade.com:mgmt:brocade-icmp")
        rate_limiting = ET.SubElement(icmpv6, "rate-limiting")
        rate_limiting.text = kwargs.pop('rate_limiting')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_icmpv6_unreachable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        icmpv6 = ET.SubElement(ipv6, "icmpv6", xmlns="urn:brocade.com:mgmt:brocade-icmp")
        unreachable = ET.SubElement(icmpv6, "unreachable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_icmpv6_redirect(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        icmpv6 = ET.SubElement(ipv6, "icmpv6", xmlns="urn:brocade.com:mgmt:brocade-icmp")
        redirect = ET.SubElement(icmpv6, "redirect")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_access_group_ipv6_access_list(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        access_group = ET.SubElement(ipv6, "access-group", xmlns="urn:brocade.com:mgmt:brocade-ipv6-access-list")
        ip_direction_key = ET.SubElement(access_group, "ip-direction")
        ip_direction_key.text = kwargs.pop('ip_direction')
        ipv6_access_list = ET.SubElement(access_group, "ipv6-access-list")
        ipv6_access_list.text = kwargs.pop('ipv6_access_list')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_access_group_ip_direction(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        access_group = ET.SubElement(ipv6, "access-group", xmlns="urn:brocade.com:mgmt:brocade-ipv6-access-list")
        ipv6_access_list_key = ET.SubElement(access_group, "ipv6-access-list")
        ipv6_access_list_key.text = kwargs.pop('ipv6_access_list')
        ip_direction = ET.SubElement(access_group, "ip-direction")
        ip_direction.text = kwargs.pop('ip_direction')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_access_group_traffic_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        access_group = ET.SubElement(ipv6, "access-group", xmlns="urn:brocade.com:mgmt:brocade-ipv6-access-list")
        ipv6_access_list_key = ET.SubElement(access_group, "ipv6-access-list")
        ipv6_access_list_key.text = kwargs.pop('ipv6_access_list')
        ip_direction_key = ET.SubElement(access_group, "ip-direction")
        ip_direction_key.text = kwargs.pop('ip_direction')
        traffic_type = ET.SubElement(access_group, "traffic-type")
        traffic_type.text = kwargs.pop('traffic_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_policy_route_map_ipv6_route_map_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        policy = ET.SubElement(ipv6, "policy", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        route_map = ET.SubElement(policy, "route-map")
        ipv6_route_map_name = ET.SubElement(route_map, "ipv6-route-map-name")
        ipv6_route_map_name.text = kwargs.pop('ipv6_route_map_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_vrrp_suppress_interface_ra(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        vrrp_suppress_interface_ra = ET.SubElement(ipv6_intf_cmds, "vrrp-suppress-interface-ra")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_managed_config_flag(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        managed_config_flag = ET.SubElement(nd, "managed-config-flag")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_other_config_flag(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        other_config_flag = ET.SubElement(nd, "other-config-flag")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_broadcast_mac_trap(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        broadcast_mac_trap = ET.SubElement(nd, "broadcast-mac-trap")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_ra_lifetime(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        ra_lifetime = ET.SubElement(nd, "ra-lifetime")
        ra_lifetime.text = kwargs.pop('ra_lifetime')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_reachable_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        reachable_time = ET.SubElement(nd, "reachable-time")
        reachable_time.text = kwargs.pop('reachable_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_mtu(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        mtu = ET.SubElement(nd, "mtu")
        mtu.text = kwargs.pop('mtu')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_retrans_timer(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        retrans_timer = ET.SubElement(nd, "retrans-timer")
        retrans_timer.text = kwargs.pop('retrans_timer')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_hoplimit(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        hoplimit = ET.SubElement(nd, "hoplimit")
        hoplimit.text = kwargs.pop('hoplimit')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_ns_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        ns_interval = ET.SubElement(nd, "ns-interval")
        ns_interval.text = kwargs.pop('ns_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_proxy(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        proxy = ET.SubElement(nd, "proxy")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_suppress_ra_suppress_ra_flag(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        suppress_ra = ET.SubElement(nd, "suppress-ra")
        suppress_ra_flag = ET.SubElement(suppress_ra, "suppress-ra-flag")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_suppress_ra_suppress_ra_mtu(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        suppress_ra = ET.SubElement(nd, "suppress-ra")
        suppress_ra_mtu = ET.SubElement(suppress_ra, "suppress-ra-mtu")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_suppress_ra_suppress_ra_all(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        suppress_ra = ET.SubElement(nd, "suppress-ra")
        suppress_ra_all = ET.SubElement(suppress_ra, "suppress-ra-all")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_ra_interval_max_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        ra_interval = ET.SubElement(nd, "ra-interval")
        max_interval = ET.SubElement(ra_interval, "max-interval")
        max_interval.text = kwargs.pop('max_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_ra_interval_min(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        ra_interval = ET.SubElement(nd, "ra-interval")
        min = ET.SubElement(ra_interval, "min")
        min.text = kwargs.pop('min')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_dad_attempts(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        dad = ET.SubElement(nd, "dad")
        attempts = ET.SubElement(dad, "attempts")
        attempts.text = kwargs.pop('attempts')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_dad_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        dad = ET.SubElement(nd, "dad")
        time = ET.SubElement(dad, "time")
        time.text = kwargs.pop('time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_nud_retry_base(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        nud = ET.SubElement(nd, "nud")
        retry = ET.SubElement(nud, "retry")
        base = ET.SubElement(retry, "base")
        base.text = kwargs.pop('base')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_nud_retry_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        nud = ET.SubElement(nd, "nud")
        retry = ET.SubElement(nud, "retry")
        interval = ET.SubElement(retry, "interval")
        interval.text = kwargs.pop('interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_nud_retry_max_attempts(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        nud = ET.SubElement(nd, "nud")
        retry = ET.SubElement(nud, "retry")
        max_attempts = ET.SubElement(retry, "max-attempts")
        max_attempts.text = kwargs.pop('max_attempts')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_cache_expire(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        cache = ET.SubElement(nd, "cache")
        expire = ET.SubElement(cache, "expire")
        expire.text = kwargs.pop('expire')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_prefix_prefix_ipv6_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        prefix = ET.SubElement(nd, "prefix")
        prefix_ipv6_address = ET.SubElement(prefix, "prefix-ipv6-address")
        prefix_ipv6_address.text = kwargs.pop('prefix_ipv6_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_prefix_lifetime_ch_valid_type_ca_no_advertise_no_advertise(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        prefix = ET.SubElement(nd, "prefix")
        prefix_ipv6_address_key = ET.SubElement(prefix, "prefix-ipv6-address")
        prefix_ipv6_address_key.text = kwargs.pop('prefix_ipv6_address')
        lifetime = ET.SubElement(prefix, "lifetime")
        ch_valid_type = ET.SubElement(lifetime, "ch-valid-type")
        ca_no_advertise = ET.SubElement(ch_valid_type, "ca-no-advertise")
        no_advertise = ET.SubElement(ca_no_advertise, "no-advertise")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_prefix_lifetime_ch_valid_type_ca_valid_lifetime_valid_lifetime(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        prefix = ET.SubElement(nd, "prefix")
        prefix_ipv6_address_key = ET.SubElement(prefix, "prefix-ipv6-address")
        prefix_ipv6_address_key.text = kwargs.pop('prefix_ipv6_address')
        lifetime = ET.SubElement(prefix, "lifetime")
        ch_valid_type = ET.SubElement(lifetime, "ch-valid-type")
        ca_valid_lifetime = ET.SubElement(ch_valid_type, "ca-valid-lifetime")
        valid_lifetime = ET.SubElement(ca_valid_lifetime, "valid-lifetime")
        valid_lifetime.text = kwargs.pop('valid_lifetime')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_prefix_lifetime_ch_valid_type_ca_valid_infinite_valid_infinite(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        prefix = ET.SubElement(nd, "prefix")
        prefix_ipv6_address_key = ET.SubElement(prefix, "prefix-ipv6-address")
        prefix_ipv6_address_key.text = kwargs.pop('prefix_ipv6_address')
        lifetime = ET.SubElement(prefix, "lifetime")
        ch_valid_type = ET.SubElement(lifetime, "ch-valid-type")
        ca_valid_infinite = ET.SubElement(ch_valid_type, "ca-valid-infinite")
        valid_infinite = ET.SubElement(ca_valid_infinite, "valid-infinite")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_prefix_lifetime_preferred_ch_preferred_type_ca_preferred_lifetime_preferred_lifetime(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        prefix = ET.SubElement(nd, "prefix")
        prefix_ipv6_address_key = ET.SubElement(prefix, "prefix-ipv6-address")
        prefix_ipv6_address_key.text = kwargs.pop('prefix_ipv6_address')
        lifetime = ET.SubElement(prefix, "lifetime")
        preferred = ET.SubElement(lifetime, "preferred")
        ch_preferred_type = ET.SubElement(preferred, "ch-preferred-type")
        ca_preferred_lifetime = ET.SubElement(ch_preferred_type, "ca-preferred-lifetime")
        preferred_lifetime = ET.SubElement(ca_preferred_lifetime, "preferred-lifetime")
        preferred_lifetime.text = kwargs.pop('preferred_lifetime')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_prefix_lifetime_preferred_ch_preferred_type_ca_preferred_infinite_preferred_infinite(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        prefix = ET.SubElement(nd, "prefix")
        prefix_ipv6_address_key = ET.SubElement(prefix, "prefix-ipv6-address")
        prefix_ipv6_address_key.text = kwargs.pop('prefix_ipv6_address')
        lifetime = ET.SubElement(prefix, "lifetime")
        preferred = ET.SubElement(lifetime, "preferred")
        ch_preferred_type = ET.SubElement(preferred, "ch-preferred-type")
        ca_preferred_infinite = ET.SubElement(ch_preferred_type, "ca-preferred-infinite")
        preferred_infinite = ET.SubElement(ca_preferred_infinite, "preferred-infinite")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_prefix_lifetime_preferred_prefix_flags_no_autoconfig(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        prefix = ET.SubElement(nd, "prefix")
        prefix_ipv6_address_key = ET.SubElement(prefix, "prefix-ipv6-address")
        prefix_ipv6_address_key.text = kwargs.pop('prefix_ipv6_address')
        lifetime = ET.SubElement(prefix, "lifetime")
        preferred = ET.SubElement(lifetime, "preferred")
        prefix_flags = ET.SubElement(preferred, "prefix-flags")
        no_autoconfig = ET.SubElement(prefix_flags, "no-autoconfig")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_prefix_lifetime_preferred_prefix_flags_no_onlink(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        prefix = ET.SubElement(nd, "prefix")
        prefix_ipv6_address_key = ET.SubElement(prefix, "prefix-ipv6-address")
        prefix_ipv6_address_key.text = kwargs.pop('prefix_ipv6_address')
        lifetime = ET.SubElement(prefix, "lifetime")
        preferred = ET.SubElement(lifetime, "preferred")
        prefix_flags = ET.SubElement(preferred, "prefix-flags")
        no_onlink = ET.SubElement(prefix_flags, "no-onlink")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_prefix_lifetime_preferred_prefix_flags_off_link(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        prefix = ET.SubElement(nd, "prefix")
        prefix_ipv6_address_key = ET.SubElement(prefix, "prefix-ipv6-address")
        prefix_ipv6_address_key.text = kwargs.pop('prefix_ipv6_address')
        lifetime = ET.SubElement(prefix, "lifetime")
        preferred = ET.SubElement(lifetime, "preferred")
        prefix_flags = ET.SubElement(preferred, "prefix-flags")
        off_link = ET.SubElement(prefix_flags, "off-link")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_neighbor_ipv6_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        neighbor = ET.SubElement(ipv6_intf_cmds, "neighbor")
        ipv6_address = ET.SubElement(neighbor, "ipv6-address")
        ipv6_address.text = kwargs.pop('ipv6_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_neighbor_hardware_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        neighbor = ET.SubElement(ipv6_intf_cmds, "neighbor")
        ipv6_address_key = ET.SubElement(neighbor, "ipv6-address")
        ipv6_address_key.text = kwargs.pop('ipv6_address')
        hardware_address = ET.SubElement(neighbor, "hardware-address")
        hardware_address.text = kwargs.pop('hardware_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_ipv6_phy_intf_cmds_hop_by_hop_trap(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        ipv6_phy_intf_cmds = ET.SubElement(ipv6, "ipv6-phy-intf-cmds", xmlns="urn:brocade.com:mgmt:brocade-mld-snooping")
        hop_by_hop_trap = ET.SubElement(ipv6_phy_intf_cmds, "hop-by-hop-trap")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_interface_ospfv3_conf_interface_area(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        interface_area = ET.SubElement(interface_ospfv3_conf, "interface-area")
        interface_area.text = kwargs.pop('interface_area')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_interface_ospfv3_conf_active(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        active = ET.SubElement(interface_ospfv3_conf, "active")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_interface_ospfv3_conf_passive(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        passive = ET.SubElement(interface_ospfv3_conf, "passive")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_interface_ospfv3_conf_bfd_bfd_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        bfd = ET.SubElement(interface_ospfv3_conf, "bfd")
        bfd_enable = ET.SubElement(bfd, "bfd-enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_interface_ospfv3_conf_cost(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        cost = ET.SubElement(interface_ospfv3_conf, "cost")
        cost.text = kwargs.pop('cost')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_interface_ospfv3_conf_instance(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        instance = ET.SubElement(interface_ospfv3_conf, "instance")
        instance.text = kwargs.pop('instance')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_interface_ospfv3_conf_mtu_ignore(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        mtu_ignore = ET.SubElement(interface_ospfv3_conf, "mtu-ignore")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_interface_ospfv3_conf_network(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        network = ET.SubElement(interface_ospfv3_conf, "network")
        network.text = kwargs.pop('network')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_interface_ospfv3_conf_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        priority = ET.SubElement(interface_ospfv3_conf, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_interface_ospfv3_conf_suppress_linklsa(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        suppress_linklsa = ET.SubElement(interface_ospfv3_conf, "suppress-linklsa")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_spi(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        spi = ET.SubElement(ipsec_auth_key_config, "spi")
        spi.text = kwargs.pop('spi')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_ah_algorithm_ah(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_ah_algorithm = ET.SubElement(ch_algorithm, "ca-ah-algorithm")
        ah = ET.SubElement(ca_ah_algorithm, "ah")
        ah.text = kwargs.pop('ah')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_ah_algorithm_ah_no_encrypt(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_ah_algorithm = ET.SubElement(ch_algorithm, "ca-ah-algorithm")
        ah_no_encrypt = ET.SubElement(ca_ah_algorithm, "ah-no-encrypt")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_ah_algorithm_ah_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_ah_algorithm = ET.SubElement(ch_algorithm, "ca-ah-algorithm")
        ah_key = ET.SubElement(ca_ah_algorithm, "ah-key")
        ah_key.text = kwargs.pop('ah_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp = ET.SubElement(ca_esp_algorithm, "esp")
        esp.text = kwargs.pop('esp')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp_no_encrypt(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp_no_encrypt = ET.SubElement(ca_esp_algorithm, "esp-no-encrypt")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp_key = ET.SubElement(ca_esp_algorithm, "esp-key")
        esp_key.text = kwargs.pop('esp_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp_auth(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp_auth = ET.SubElement(ca_esp_algorithm, "esp-auth")
        esp_auth.text = kwargs.pop('esp_auth')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp_auth_no_encrypt(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp_auth_no_encrypt = ET.SubElement(ca_esp_algorithm, "esp-auth-no-encrypt")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp_auth_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp_auth_key = ET.SubElement(ca_esp_algorithm, "esp-auth-key")
        esp_auth_key.text = kwargs.pop('esp_auth_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_ipsec_authentication_disable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec = ET.SubElement(authentication, "ipsec")
        ipsec_authentication_disable = ET.SubElement(ipsec, "ipsec-authentication-disable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_ifc_key_add_remove_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec = ET.SubElement(authentication, "ipsec")
        ifc_key_add_remove_interval = ET.SubElement(ipsec, "ifc-key-add-remove-interval")
        ifc_key_add_remove_interval.text = kwargs.pop('ifc_key_add_remove_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_interface_ospfv3_conf_link_interval_properties_hello_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        link_interval_properties = ET.SubElement(interface_ospfv3_conf, "link-interval-properties")
        hello_interval = ET.SubElement(link_interval_properties, "hello-interval")
        hello_interval.text = kwargs.pop('hello_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_interface_ospfv3_conf_link_interval_properties_dead_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        link_interval_properties = ET.SubElement(interface_ospfv3_conf, "link-interval-properties")
        dead_interval = ET.SubElement(link_interval_properties, "dead-interval")
        dead_interval.text = kwargs.pop('dead_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_interface_ospfv3_conf_link_interval_properties_hello_jitter(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        link_interval_properties = ET.SubElement(interface_ospfv3_conf, "link-interval-properties")
        hello_jitter = ET.SubElement(link_interval_properties, "hello-jitter")
        hello_jitter.text = kwargs.pop('hello_jitter')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_interface_ospfv3_conf_link_interval_properties_retransmit_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        link_interval_properties = ET.SubElement(interface_ospfv3_conf, "link-interval-properties")
        retransmit_interval = ET.SubElement(link_interval_properties, "retransmit-interval")
        retransmit_interval.text = kwargs.pop('retransmit_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_interface_ospfv3_conf_link_interval_properties_transmit_delay(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        link_interval_properties = ET.SubElement(interface_ospfv3_conf, "link-interval-properties")
        transmit_delay = ET.SubElement(link_interval_properties, "transmit-delay")
        transmit_delay.text = kwargs.pop('transmit_delay')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_vrrpv3_group_vrid(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        vrrpv3_group = ET.SubElement(ipv6, "vrrpv3-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid = ET.SubElement(vrrpv3_group, "vrid")
        vrid.text = kwargs.pop('vrid')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_vrrpv3_group_use_v2_checksum(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        vrrpv3_group = ET.SubElement(ipv6, "vrrpv3-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        use_v2_checksum = ET.SubElement(vrrpv3_group, "use-v2-checksum")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_vrrpv3_group_virtual_ip_virtual_ipaddr(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        vrrpv3_group = ET.SubElement(ipv6, "vrrpv3-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        virtual_ip = ET.SubElement(vrrpv3_group, "virtual-ip")
        virtual_ipaddr = ET.SubElement(virtual_ip, "virtual-ipaddr")
        virtual_ipaddr.text = kwargs.pop('virtual_ipaddr')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_vrrpv3_group_track_interface_interface_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        vrrpv3_group = ET.SubElement(ipv6, "vrrpv3-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        track = ET.SubElement(vrrpv3_group, "track")
        interface = ET.SubElement(track, "interface")
        interface_name_key = ET.SubElement(interface, "interface-name")
        interface_name_key.text = kwargs.pop('interface_name')
        interface_type = ET.SubElement(interface, "interface-type")
        interface_type.text = kwargs.pop('interface_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_vrrpv3_group_track_interface_interface_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        vrrpv3_group = ET.SubElement(ipv6, "vrrpv3-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        track = ET.SubElement(vrrpv3_group, "track")
        interface = ET.SubElement(track, "interface")
        interface_type_key = ET.SubElement(interface, "interface-type")
        interface_type_key.text = kwargs.pop('interface_type')
        interface_name = ET.SubElement(interface, "interface-name")
        interface_name.text = kwargs.pop('interface_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_vrrpv3_group_track_interface_track_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        vrrpv3_group = ET.SubElement(ipv6, "vrrpv3-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        track = ET.SubElement(vrrpv3_group, "track")
        interface = ET.SubElement(track, "interface")
        interface_type_key = ET.SubElement(interface, "interface-type")
        interface_type_key.text = kwargs.pop('interface_type')
        interface_name_key = ET.SubElement(interface, "interface-name")
        interface_name_key.text = kwargs.pop('interface_name')
        track_priority = ET.SubElement(interface, "track-priority")
        track_priority.text = kwargs.pop('track_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_vrrpv3_group_advertisement_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        vrrpv3_group = ET.SubElement(ipv6, "vrrpv3-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        advertisement_interval = ET.SubElement(vrrpv3_group, "advertisement-interval")
        advertisement_interval.text = kwargs.pop('advertisement_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_vrrpv3_group_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        vrrpv3_group = ET.SubElement(ipv6, "vrrpv3-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        enable = ET.SubElement(vrrpv3_group, "enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_vrrpv3_group_hold_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        vrrpv3_group = ET.SubElement(ipv6, "vrrpv3-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        hold_time = ET.SubElement(vrrpv3_group, "hold-time")
        hold_time.text = kwargs.pop('hold_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_vrrpv3_group_preempt_mode(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        vrrpv3_group = ET.SubElement(ipv6, "vrrpv3-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        preempt_mode = ET.SubElement(vrrpv3_group, "preempt-mode")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_vrrpv3_group_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        vrrpv3_group = ET.SubElement(ipv6, "vrrpv3-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        priority = ET.SubElement(vrrpv3_group, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_vrrpv3_group_description(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        vrrpv3_group = ET.SubElement(ipv6, "vrrpv3-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        description = ET.SubElement(vrrpv3_group, "description")
        description.text = kwargs.pop('description')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_vrrpv3e_group_vrid(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid = ET.SubElement(vrrpv3e_group, "vrid")
        vrid.text = kwargs.pop('vrid')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_vrrpv3e_group_virtual_ip_virtual_ipaddr(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        virtual_ip = ET.SubElement(vrrpv3e_group, "virtual-ip")
        virtual_ipaddr = ET.SubElement(virtual_ip, "virtual-ipaddr")
        virtual_ipaddr.text = kwargs.pop('virtual_ipaddr')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_vrrpv3e_group_track_interface_interface_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        track = ET.SubElement(vrrpv3e_group, "track")
        interface = ET.SubElement(track, "interface")
        interface_name_key = ET.SubElement(interface, "interface-name")
        interface_name_key.text = kwargs.pop('interface_name')
        interface_type = ET.SubElement(interface, "interface-type")
        interface_type.text = kwargs.pop('interface_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_vrrpv3e_group_track_interface_interface_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        track = ET.SubElement(vrrpv3e_group, "track")
        interface = ET.SubElement(track, "interface")
        interface_type_key = ET.SubElement(interface, "interface-type")
        interface_type_key.text = kwargs.pop('interface_type')
        interface_name = ET.SubElement(interface, "interface-name")
        interface_name.text = kwargs.pop('interface_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_vrrpv3e_group_track_interface_track_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        track = ET.SubElement(vrrpv3e_group, "track")
        interface = ET.SubElement(track, "interface")
        interface_type_key = ET.SubElement(interface, "interface-type")
        interface_type_key.text = kwargs.pop('interface_type')
        interface_name_key = ET.SubElement(interface, "interface-name")
        interface_name_key.text = kwargs.pop('interface_name')
        track_priority = ET.SubElement(interface, "track-priority")
        track_priority.text = kwargs.pop('track_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_vrrpv3e_group_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        enable = ET.SubElement(vrrpv3e_group, "enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_vrrpv3e_group_hold_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        hold_time = ET.SubElement(vrrpv3e_group, "hold-time")
        hold_time.text = kwargs.pop('hold_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_vrrpv3e_group_preempt_mode(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        preempt_mode = ET.SubElement(vrrpv3e_group, "preempt-mode")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_vrrpv3e_group_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        priority = ET.SubElement(vrrpv3e_group, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_vrrpv3e_group_description(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        description = ET.SubElement(vrrpv3e_group, "description")
        description.text = kwargs.pop('description')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_vrrpv3e_group_advertise_backup(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        advertise_backup = ET.SubElement(vrrpv3e_group, "advertise-backup")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_vrrpv3e_group_nd_advertisement_timer(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        nd_advertisement_timer = ET.SubElement(vrrpv3e_group, "nd-advertisement-timer")
        nd_advertisement_timer.text = kwargs.pop('nd_advertisement_timer')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_vrrpv3e_group_advertisement_interval_scale(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        advertisement_interval_scale = ET.SubElement(vrrpv3e_group, "advertisement-interval-scale")
        advertisement_interval_scale.text = kwargs.pop('advertisement_interval_scale')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_vrrpv3e_group_backup_advertisement_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        backup_advertisement_interval = ET.SubElement(vrrpv3e_group, "backup-advertisement-interval")
        backup_advertisement_interval.text = kwargs.pop('backup_advertisement_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_vrrpv3e_group_vrrpe_advertisement_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        vrrpe_advertisement_interval = ET.SubElement(vrrpv3e_group, "vrrpe-advertisement-interval")
        vrrpe_advertisement_interval.text = kwargs.pop('vrrpe_advertisement_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_vrrpv3e_group_short_path_forwarding_basic(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        short_path_forwarding = ET.SubElement(vrrpv3e_group, "short-path-forwarding")
        basic = ET.SubElement(short_path_forwarding, "basic")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ipv6_vrrpv3e_group_short_path_forwarding_revert_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(fortygigabitethernet, "ipv6")
        vrrpv3e_group = ET.SubElement(ipv6, "vrrpv3e-group", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrid_key = ET.SubElement(vrrpv3e_group, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        short_path_forwarding = ET.SubElement(vrrpv3e_group, "short-path-forwarding")
        revert_priority = ET.SubElement(short_path_forwarding, "revert-priority")
        revert_priority.text = kwargs.pop('revert_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_track_track_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        track = ET.SubElement(fortygigabitethernet, "track")
        track_enable = ET.SubElement(track, "track_enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_track_min_link(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        track = ET.SubElement(fortygigabitethernet, "track")
        min_link = ET.SubElement(track, "min-link")
        min_link.text = kwargs.pop('min_link')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_track_interface_track_interface_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        track = ET.SubElement(fortygigabitethernet, "track")
        interface = ET.SubElement(track, "interface")
        track_interface_name_key = ET.SubElement(interface, "track-interface-name")
        track_interface_name_key.text = kwargs.pop('track_interface_name')
        track_interface_type = ET.SubElement(interface, "track-interface-type")
        track_interface_type.text = kwargs.pop('track_interface_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_track_interface_track_interface_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        track = ET.SubElement(fortygigabitethernet, "track")
        interface = ET.SubElement(track, "interface")
        track_interface_type_key = ET.SubElement(interface, "track-interface-type")
        track_interface_type_key.text = kwargs.pop('track_interface_type')
        track_interface_name = ET.SubElement(interface, "track-interface-name")
        track_interface_name.text = kwargs.pop('track_interface_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_track_remove_remove_all_track_interfaces(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        track = ET.SubElement(fortygigabitethernet, "track")
        remove = ET.SubElement(track, "remove")
        remove_all_track_interfaces = ET.SubElement(remove, "remove-all-track-interfaces")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_bfd_interval_min_tx(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        bfd = ET.SubElement(fortygigabitethernet, "bfd")
        interval = ET.SubElement(bfd, "interval")
        min_tx = ET.SubElement(interval, "min-tx")
        min_tx.text = kwargs.pop('min_tx')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_bfd_interval_min_rx(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        bfd = ET.SubElement(fortygigabitethernet, "bfd")
        interval = ET.SubElement(bfd, "interval")
        min_rx = ET.SubElement(interval, "min-rx")
        min_rx.text = kwargs.pop('min_rx')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_bfd_interval_multiplier(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        bfd = ET.SubElement(fortygigabitethernet, "bfd")
        interval = ET.SubElement(bfd, "interval")
        multiplier = ET.SubElement(interval, "multiplier")
        multiplier.text = kwargs.pop('multiplier')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_bfd_bfd_shutdown(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        bfd = ET.SubElement(fortygigabitethernet, "bfd")
        bfd_shutdown = ET.SubElement(bfd, "bfd-shutdown")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_edge_loop_detection_eldprio(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        edge_loop_detection = ET.SubElement(fortygigabitethernet, "edge-loop-detection")
        eldprio = ET.SubElement(edge_loop_detection, "eldprio")
        eldprio.text = kwargs.pop('eldprio')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_edge_loop_detection_eldvlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        edge_loop_detection = ET.SubElement(fortygigabitethernet, "edge-loop-detection")
        eldvlan = ET.SubElement(edge_loop_detection, "eldvlan")
        eldvlan.text = kwargs.pop('eldvlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_mac_access_group_mac_access_list(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        mac = ET.SubElement(fortygigabitethernet, "mac", xmlns="urn:brocade.com:mgmt:brocade-mac-access-list")
        access_group = ET.SubElement(mac, "access-group")
        mac_direction_key = ET.SubElement(access_group, "mac-direction")
        mac_direction_key.text = kwargs.pop('mac_direction')
        mac_access_list = ET.SubElement(access_group, "mac-access-list")
        mac_access_list.text = kwargs.pop('mac_access_list')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_mac_access_group_mac_direction(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        mac = ET.SubElement(fortygigabitethernet, "mac", xmlns="urn:brocade.com:mgmt:brocade-mac-access-list")
        access_group = ET.SubElement(mac, "access-group")
        mac_access_list_key = ET.SubElement(access_group, "mac-access-list")
        mac_access_list_key.text = kwargs.pop('mac_access_list')
        mac_direction = ET.SubElement(access_group, "mac-direction")
        mac_direction.text = kwargs.pop('mac_direction')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_mac_access_group_traffic_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        mac = ET.SubElement(fortygigabitethernet, "mac", xmlns="urn:brocade.com:mgmt:brocade-mac-access-list")
        access_group = ET.SubElement(mac, "access-group")
        mac_access_list_key = ET.SubElement(access_group, "mac-access-list")
        mac_access_list_key.text = kwargs.pop('mac_access_list')
        mac_direction_key = ET.SubElement(access_group, "mac-direction")
        mac_direction_key.text = kwargs.pop('mac_direction')
        traffic_type = ET.SubElement(access_group, "traffic-type")
        traffic_type.text = kwargs.pop('traffic_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_vrrp_vrid(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(fortygigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        vrid = ET.SubElement(vrrp, "vrid")
        vrid.text = kwargs.pop('vrid')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_vrrp_version(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(fortygigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version = ET.SubElement(vrrp, "version")
        version.text = kwargs.pop('version')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_vrrp_use_v2_checksum(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(fortygigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        use_v2_checksum = ET.SubElement(vrrp, "use-v2-checksum")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_vrrp_virtual_ip_virtual_ipaddr(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(fortygigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        virtual_ip = ET.SubElement(vrrp, "virtual-ip")
        virtual_ipaddr = ET.SubElement(virtual_ip, "virtual-ipaddr")
        virtual_ipaddr.text = kwargs.pop('virtual_ipaddr')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_vrrp_track_interface_interface_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(fortygigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        track = ET.SubElement(vrrp, "track")
        interface = ET.SubElement(track, "interface")
        interface_name_key = ET.SubElement(interface, "interface-name")
        interface_name_key.text = kwargs.pop('interface_name')
        interface_type = ET.SubElement(interface, "interface-type")
        interface_type.text = kwargs.pop('interface_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_vrrp_track_interface_interface_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(fortygigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        track = ET.SubElement(vrrp, "track")
        interface = ET.SubElement(track, "interface")
        interface_type_key = ET.SubElement(interface, "interface-type")
        interface_type_key.text = kwargs.pop('interface_type')
        interface_name = ET.SubElement(interface, "interface-name")
        interface_name.text = kwargs.pop('interface_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_vrrp_track_interface_track_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(fortygigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        track = ET.SubElement(vrrp, "track")
        interface = ET.SubElement(track, "interface")
        interface_type_key = ET.SubElement(interface, "interface-type")
        interface_type_key.text = kwargs.pop('interface_type')
        interface_name_key = ET.SubElement(interface, "interface-name")
        interface_name_key.text = kwargs.pop('interface_name')
        track_priority = ET.SubElement(interface, "track-priority")
        track_priority.text = kwargs.pop('track_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_vrrp_advertisement_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(fortygigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        advertisement_interval = ET.SubElement(vrrp, "advertisement-interval")
        advertisement_interval.text = kwargs.pop('advertisement_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_vrrp_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(fortygigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        enable = ET.SubElement(vrrp, "enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_vrrp_hold_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(fortygigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        hold_time = ET.SubElement(vrrp, "hold-time")
        hold_time.text = kwargs.pop('hold_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_vrrp_preempt_mode(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(fortygigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        preempt_mode = ET.SubElement(vrrp, "preempt-mode")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_vrrp_arp_unicast_request_receive(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(fortygigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        arp = ET.SubElement(vrrp, "arp")
        unicast_request = ET.SubElement(arp, "unicast-request")
        receive = ET.SubElement(unicast_request, "receive")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_vrrp_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(fortygigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        priority = ET.SubElement(vrrp, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_vrrp_description(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(fortygigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        description = ET.SubElement(vrrp, "description")
        description.text = kwargs.pop('description')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_fabric_fabric_isl_fabric_isl_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        fabric = ET.SubElement(fortygigabitethernet, "fabric", xmlns="urn:brocade.com:mgmt:brocade-fcoe")
        fabric_isl = ET.SubElement(fabric, "fabric-isl")
        fabric_isl_enable = ET.SubElement(fabric_isl, "fabric-isl-enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_fabric_fabric_trunk_fabric_trunk_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        fabric = ET.SubElement(fortygigabitethernet, "fabric", xmlns="urn:brocade.com:mgmt:brocade-fcoe")
        fabric_trunk = ET.SubElement(fabric, "fabric-trunk")
        fabric_trunk_enable = ET.SubElement(fabric_trunk, "fabric-trunk-enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_fabric_neighbor_discovery_disable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        fabric = ET.SubElement(fortygigabitethernet, "fabric", xmlns="urn:brocade.com:mgmt:brocade-fcoe")
        neighbor_discovery = ET.SubElement(fabric, "neighbor-discovery")
        disable = ET.SubElement(neighbor_discovery, "disable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_fabric_fabric_dport_fabric_dport_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        fabric = ET.SubElement(fortygigabitethernet, "fabric", xmlns="urn:brocade.com:mgmt:brocade-fcoe")
        fabric_dport = ET.SubElement(fabric, "fabric-dport")
        fabric_dport_enable = ET.SubElement(fabric_dport, "fabric-dport-enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_fcoeport_fcoeport_map(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        fcoeport = ET.SubElement(fortygigabitethernet, "fcoeport", xmlns="urn:brocade.com:mgmt:brocade-fcoe")
        fcoeport_map = ET.SubElement(fcoeport, "fcoeport-map")
        fcoeport_map.text = kwargs.pop('fcoeport_map')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_openflow_interface_cfg_logical_instance_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        openflow_interface_cfg = ET.SubElement(fortygigabitethernet, "openflow-interface-cfg", xmlns="urn:brocade.com:mgmt:brocade-openflow")
        logical_instance_id = ET.SubElement(openflow_interface_cfg, "logical-instance-id")
        logical_instance_id.text = kwargs.pop('logical_instance_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_openflow_interface_cfg_openflow_enable_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        openflow_interface_cfg = ET.SubElement(fortygigabitethernet, "openflow-interface-cfg", xmlns="urn:brocade.com:mgmt:brocade-openflow")
        openflow_enable = ET.SubElement(openflow_interface_cfg, "openflow-enable")
        enable = ET.SubElement(openflow_enable, "enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_openflow_interface_cfg_openflow_enable_match_profile(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        openflow_interface_cfg = ET.SubElement(fortygigabitethernet, "openflow-interface-cfg", xmlns="urn:brocade.com:mgmt:brocade-openflow")
        openflow_enable = ET.SubElement(openflow_interface_cfg, "openflow-enable")
        match_profile = ET.SubElement(openflow_enable, "match-profile")
        match_profile.text = kwargs.pop('match_profile')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_sflow_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        sflow = ET.SubElement(fortygigabitethernet, "sflow", xmlns="urn:brocade.com:mgmt:brocade-sflow")
        enable = ET.SubElement(sflow, "enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_sflow_polling_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        sflow = ET.SubElement(fortygigabitethernet, "sflow", xmlns="urn:brocade.com:mgmt:brocade-sflow")
        polling_interval = ET.SubElement(sflow, "polling-interval")
        polling_interval.text = kwargs.pop('polling_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_sflow_sample_rate(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        sflow = ET.SubElement(fortygigabitethernet, "sflow", xmlns="urn:brocade.com:mgmt:brocade-sflow")
        sample_rate = ET.SubElement(sflow, "sample-rate")
        sample_rate.text = kwargs.pop('sample_rate')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_acl_interface_ip_access_group_ip_access_list(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip_acl_interface = ET.SubElement(fortygigabitethernet, "ip-acl-interface", xmlns="urn:brocade.com:mgmt:brocade-ip-access-list")
        ip = ET.SubElement(ip_acl_interface, "ip")
        access_group = ET.SubElement(ip, "access-group")
        ip_direction_key = ET.SubElement(access_group, "ip-direction")
        ip_direction_key.text = kwargs.pop('ip_direction')
        ip_access_list = ET.SubElement(access_group, "ip-access-list")
        ip_access_list.text = kwargs.pop('ip_access_list')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_acl_interface_ip_access_group_ip_direction(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip_acl_interface = ET.SubElement(fortygigabitethernet, "ip-acl-interface", xmlns="urn:brocade.com:mgmt:brocade-ip-access-list")
        ip = ET.SubElement(ip_acl_interface, "ip")
        access_group = ET.SubElement(ip, "access-group")
        ip_access_list_key = ET.SubElement(access_group, "ip-access-list")
        ip_access_list_key.text = kwargs.pop('ip_access_list')
        ip_direction = ET.SubElement(access_group, "ip-direction")
        ip_direction.text = kwargs.pop('ip_direction')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_acl_interface_ip_access_group_traffic_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip_acl_interface = ET.SubElement(fortygigabitethernet, "ip-acl-interface", xmlns="urn:brocade.com:mgmt:brocade-ip-access-list")
        ip = ET.SubElement(ip_acl_interface, "ip")
        access_group = ET.SubElement(ip, "access-group")
        ip_access_list_key = ET.SubElement(access_group, "ip-access-list")
        ip_access_list_key.text = kwargs.pop('ip_access_list')
        ip_direction_key = ET.SubElement(access_group, "ip-direction")
        ip_direction_key.text = kwargs.pop('ip_direction')
        traffic_type = ET.SubElement(access_group, "traffic-type")
        traffic_type.text = kwargs.pop('traffic_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_storm_control_ingress_protocol_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        storm_control = ET.SubElement(fortygigabitethernet, "storm-control", xmlns="urn:brocade.com:mgmt:brocade-bum-storm-control")
        ingress = ET.SubElement(storm_control, "ingress")
        protocol_type = ET.SubElement(ingress, "protocol-type")
        protocol_type.text = kwargs.pop('protocol_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_storm_control_ingress_rate_format(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        storm_control = ET.SubElement(fortygigabitethernet, "storm-control", xmlns="urn:brocade.com:mgmt:brocade-bum-storm-control")
        ingress = ET.SubElement(storm_control, "ingress")
        protocol_type_key = ET.SubElement(ingress, "protocol-type")
        protocol_type_key.text = kwargs.pop('protocol_type')
        rate_format = ET.SubElement(ingress, "rate-format")
        rate_format.text = kwargs.pop('rate_format')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_storm_control_ingress_rate_bps(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        storm_control = ET.SubElement(fortygigabitethernet, "storm-control", xmlns="urn:brocade.com:mgmt:brocade-bum-storm-control")
        ingress = ET.SubElement(storm_control, "ingress")
        protocol_type_key = ET.SubElement(ingress, "protocol-type")
        protocol_type_key.text = kwargs.pop('protocol_type')
        rate_bps = ET.SubElement(ingress, "rate-bps")
        rate_bps.text = kwargs.pop('rate_bps')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_storm_control_ingress_rate_percent(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        storm_control = ET.SubElement(fortygigabitethernet, "storm-control", xmlns="urn:brocade.com:mgmt:brocade-bum-storm-control")
        ingress = ET.SubElement(storm_control, "ingress")
        protocol_type_key = ET.SubElement(ingress, "protocol-type")
        protocol_type_key.text = kwargs.pop('protocol_type')
        rate_percent = ET.SubElement(ingress, "rate-percent")
        rate_percent.text = kwargs.pop('rate_percent')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_storm_control_ingress_bum_action(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        storm_control = ET.SubElement(fortygigabitethernet, "storm-control", xmlns="urn:brocade.com:mgmt:brocade-bum-storm-control")
        ingress = ET.SubElement(storm_control, "ingress")
        protocol_type_key = ET.SubElement(ingress, "protocol-type")
        protocol_type_key.text = kwargs.pop('protocol_type')
        bum_action = ET.SubElement(ingress, "bum-action")
        bum_action.text = kwargs.pop('bum_action')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_dot1x_authentication(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        dot1x = ET.SubElement(fortygigabitethernet, "dot1x", xmlns="urn:brocade.com:mgmt:brocade-dot1x")
        authentication = ET.SubElement(dot1x, "authentication")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_dot1x_port_control(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        dot1x = ET.SubElement(fortygigabitethernet, "dot1x", xmlns="urn:brocade.com:mgmt:brocade-dot1x")
        port_control = ET.SubElement(dot1x, "port-control")
        port_control.text = kwargs.pop('port_control')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_dot1x_protocol_version(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        dot1x = ET.SubElement(fortygigabitethernet, "dot1x", xmlns="urn:brocade.com:mgmt:brocade-dot1x")
        protocol_version = ET.SubElement(dot1x, "protocol-version")
        protocol_version.text = kwargs.pop('protocol_version')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_dot1x_quiet_period(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        dot1x = ET.SubElement(fortygigabitethernet, "dot1x", xmlns="urn:brocade.com:mgmt:brocade-dot1x")
        quiet_period = ET.SubElement(dot1x, "quiet-period")
        quiet_period.text = kwargs.pop('quiet_period')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_dot1x_reauthMax(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        dot1x = ET.SubElement(fortygigabitethernet, "dot1x", xmlns="urn:brocade.com:mgmt:brocade-dot1x")
        reauthMax = ET.SubElement(dot1x, "reauthMax")
        reauthMax.text = kwargs.pop('reauthMax')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_dot1x_reauthentication(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        dot1x = ET.SubElement(fortygigabitethernet, "dot1x", xmlns="urn:brocade.com:mgmt:brocade-dot1x")
        reauthentication = ET.SubElement(dot1x, "reauthentication")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_dot1x_timeout_re_authperiod(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        dot1x = ET.SubElement(fortygigabitethernet, "dot1x", xmlns="urn:brocade.com:mgmt:brocade-dot1x")
        timeout = ET.SubElement(dot1x, "timeout")
        re_authperiod = ET.SubElement(timeout, "re-authperiod")
        re_authperiod.text = kwargs.pop('re_authperiod')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_dot1x_timeout_server_timeout(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        dot1x = ET.SubElement(fortygigabitethernet, "dot1x", xmlns="urn:brocade.com:mgmt:brocade-dot1x")
        timeout = ET.SubElement(dot1x, "timeout")
        server_timeout = ET.SubElement(timeout, "server-timeout")
        server_timeout.text = kwargs.pop('server_timeout')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_dot1x_timeout_supp_timeout(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        dot1x = ET.SubElement(fortygigabitethernet, "dot1x", xmlns="urn:brocade.com:mgmt:brocade-dot1x")
        timeout = ET.SubElement(dot1x, "timeout")
        supp_timeout = ET.SubElement(timeout, "supp-timeout")
        supp_timeout.text = kwargs.pop('supp_timeout')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_dot1x_timeout_tx_period(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        dot1x = ET.SubElement(fortygigabitethernet, "dot1x", xmlns="urn:brocade.com:mgmt:brocade-dot1x")
        timeout = ET.SubElement(dot1x, "timeout")
        tx_period = ET.SubElement(timeout, "tx-period")
        tx_period.text = kwargs.pop('tx_period')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_ip_pbr_interface_ip_policy_route_map_route_map_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip_pbr_interface = ET.SubElement(fortygigabitethernet, "ip-pbr-interface", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        ip = ET.SubElement(ip_pbr_interface, "ip")
        policy = ET.SubElement(ip, "policy")
        route_map = ET.SubElement(policy, "route-map")
        route_map_name = ET.SubElement(route_map, "route-map-name")
        route_map_name.text = kwargs.pop('route_map_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_lacp_timeout(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        lacp = ET.SubElement(fortygigabitethernet, "lacp", xmlns="urn:brocade.com:mgmt:brocade-lacp")
        timeout = ET.SubElement(lacp, "timeout")
        timeout.text = kwargs.pop('timeout')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_lacp_std_port_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        lacp = ET.SubElement(fortygigabitethernet, "lacp", xmlns="urn:brocade.com:mgmt:brocade-lacp")
        std_port_priority = ET.SubElement(lacp, "std_port-priority")
        std_port_priority.text = kwargs.pop('std_port_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_lacp_default_up(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        lacp = ET.SubElement(fortygigabitethernet, "lacp", xmlns="urn:brocade.com:mgmt:brocade-lacp")
        default_up = ET.SubElement(lacp, "default-up")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_lldp_cee_lldp_cee_on_off(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        lldp = ET.SubElement(fortygigabitethernet, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        cee = ET.SubElement(lldp, "cee")
        lldp_cee_on_off = ET.SubElement(cee, "lldp-cee-on-off")
        lldp_cee_on_off.text = kwargs.pop('lldp_cee_on_off')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_lldp_dcbx_version(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        lldp = ET.SubElement(fortygigabitethernet, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        dcbx_version = ET.SubElement(lldp, "dcbx-version")
        dcbx_version.text = kwargs.pop('dcbx_version')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_lldp_disable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        lldp = ET.SubElement(fortygigabitethernet, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        disable = ET.SubElement(lldp, "disable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_lldp_iscsi_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        lldp = ET.SubElement(fortygigabitethernet, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        iscsi_priority = ET.SubElement(lldp, "iscsi-priority")
        iscsi_priority.text = kwargs.pop('iscsi_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_lldp_profile(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        lldp = ET.SubElement(fortygigabitethernet, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        profile = ET.SubElement(lldp, "profile")
        profile.text = kwargs.pop('profile')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_connectivity_deviceconnectivity(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        connectivity = ET.SubElement(fortygigabitethernet, "connectivity", xmlns="urn:brocade.com:mgmt:brocade-maps")
        deviceconnectivity = ET.SubElement(connectivity, "deviceconnectivity")
        deviceconnectivity.text = kwargs.pop('deviceconnectivity')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_service_policy_in_cg(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        service_policy = ET.SubElement(fortygigabitethernet, "service-policy", xmlns="urn:brocade.com:mgmt:brocade-policer")
        in_cg = ET.SubElement(service_policy, "in")
        in_cg.text = kwargs.pop('in_cg')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_service_policy_out(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        service_policy = ET.SubElement(fortygigabitethernet, "service-policy", xmlns="urn:brocade.com:mgmt:brocade-policer")
        out = ET.SubElement(service_policy, "out")
        out.text = kwargs.pop('out')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_port_profile_port(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        port_profile_port = ET.SubElement(fortygigabitethernet, "port-profile-port", xmlns="urn:brocade.com:mgmt:brocade-port-profile")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_port_profile_to_interface_associations_port_profile_port_port_to_port_profile_domain_association_profile_domain_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        port_profile_to_interface_associations = ET.SubElement(fortygigabitethernet, "port-profile-to-interface-associations", xmlns="urn:brocade.com:mgmt:brocade-port-profile")
        port_profile_port = ET.SubElement(port_profile_to_interface_associations, "port-profile-port")
        port_to_port_profile_domain_association = ET.SubElement(port_profile_port, "port-to-port-profile-domain-association")
        profile_domain_name = ET.SubElement(port_to_port_profile_domain_association, "profile-domain-name")
        profile_domain_name.text = kwargs.pop('profile_domain_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_port_profile_to_interface_associations_port_profile_port_port_to_port_profile_associations_port_to_port_profile_association(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        port_profile_to_interface_associations = ET.SubElement(fortygigabitethernet, "port-profile-to-interface-associations", xmlns="urn:brocade.com:mgmt:brocade-port-profile")
        port_profile_port = ET.SubElement(port_profile_to_interface_associations, "port-profile-port")
        port_to_port_profile_associations = ET.SubElement(port_profile_port, "port-to-port-profile-associations")
        port_to_port_profile_association = ET.SubElement(port_to_port_profile_associations, "port-to-port-profile-association")
        port_to_port_profile_association.text = kwargs.pop('port_to_port_profile_association')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_priority_tag_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        priority_tag_enable = ET.SubElement(fortygigabitethernet, "priority-tag-enable", xmlns="urn:brocade.com:mgmt:brocade-qos")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_qos_default_cos(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(fortygigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        default_cos = ET.SubElement(qos, "default-cos")
        default_cos.text = kwargs.pop('default_cos')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_qos_trust_trust_cos(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(fortygigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        trust = ET.SubElement(qos, "trust")
        trust_cos = ET.SubElement(trust, "trust-cos")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_qos_trust_trust_dscp(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(fortygigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        trust = ET.SubElement(qos, "trust")
        trust_dscp = ET.SubElement(trust, "trust-dscp")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_qos_cos_mutation(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(fortygigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        cos_mutation = ET.SubElement(qos, "cos-mutation")
        cos_mutation.text = kwargs.pop('cos_mutation')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_qos_cos_traffic_class(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(fortygigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        cos_traffic_class = ET.SubElement(qos, "cos-traffic-class")
        cos_traffic_class.text = kwargs.pop('cos_traffic_class')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_qos_dscp_mutation(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(fortygigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        dscp_mutation = ET.SubElement(qos, "dscp-mutation")
        dscp_mutation.text = kwargs.pop('dscp_mutation')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_qos_dscp_traffic_class(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(fortygigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        dscp_traffic_class = ET.SubElement(qos, "dscp-traffic-class")
        dscp_traffic_class.text = kwargs.pop('dscp_traffic_class')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_qos_dscp_cos(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(fortygigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        dscp_cos = ET.SubElement(qos, "dscp-cos")
        dscp_cos.text = kwargs.pop('dscp_cos')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_qos_random_detect_traffic_class_red_tc_value(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(fortygigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        random_detect = ET.SubElement(qos, "random-detect")
        traffic_class = ET.SubElement(random_detect, "traffic-class")
        red_tc_value = ET.SubElement(traffic_class, "red-tc-value")
        red_tc_value.text = kwargs.pop('red_tc_value')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_qos_random_detect_traffic_class_red_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(fortygigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        random_detect = ET.SubElement(qos, "random-detect")
        traffic_class = ET.SubElement(random_detect, "traffic-class")
        red_tc_value_key = ET.SubElement(traffic_class, "red-tc-value")
        red_tc_value_key.text = kwargs.pop('red_tc_value')
        red_enable = ET.SubElement(traffic_class, "red-enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_qos_random_detect_traffic_class_red_profile_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(fortygigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        random_detect = ET.SubElement(qos, "random-detect")
        traffic_class = ET.SubElement(random_detect, "traffic-class")
        red_tc_value_key = ET.SubElement(traffic_class, "red-tc-value")
        red_tc_value_key.text = kwargs.pop('red_tc_value')
        red_profile_id = ET.SubElement(traffic_class, "red-profile-id")
        red_profile_id.text = kwargs.pop('red_profile_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_qos_drop_monitor_drop_monitor_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(fortygigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        drop_monitor = ET.SubElement(qos, "drop-monitor")
        drop_monitor_enable = ET.SubElement(drop_monitor, "drop-monitor-enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_qos_flowcontrol_link_level_flowcontrol_flowcontrol_tx(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(fortygigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        flowcontrol = ET.SubElement(qos, "flowcontrol")
        link_level_flowcontrol = ET.SubElement(flowcontrol, "link-level-flowcontrol")
        flowcontrol_tx = ET.SubElement(link_level_flowcontrol, "flowcontrol-tx")
        flowcontrol_tx.text = kwargs.pop('flowcontrol_tx')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_qos_flowcontrol_link_level_flowcontrol_flowcontrol_rx(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(fortygigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        flowcontrol = ET.SubElement(qos, "flowcontrol")
        link_level_flowcontrol = ET.SubElement(flowcontrol, "link-level-flowcontrol")
        flowcontrol_rx = ET.SubElement(link_level_flowcontrol, "flowcontrol-rx")
        flowcontrol_rx.text = kwargs.pop('flowcontrol_rx')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_qos_flowcontrol_pfc_pfc_cos(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(fortygigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        flowcontrol = ET.SubElement(qos, "flowcontrol")
        pfc = ET.SubElement(flowcontrol, "pfc")
        pfc_cos = ET.SubElement(pfc, "pfc-cos")
        pfc_cos.text = kwargs.pop('pfc_cos')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_qos_flowcontrol_pfc_pfc_flowcontrol_tx(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(fortygigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        flowcontrol = ET.SubElement(qos, "flowcontrol")
        pfc = ET.SubElement(flowcontrol, "pfc")
        pfc_cos_key = ET.SubElement(pfc, "pfc-cos")
        pfc_cos_key.text = kwargs.pop('pfc_cos')
        pfc_flowcontrol_tx = ET.SubElement(pfc, "pfc-flowcontrol-tx")
        pfc_flowcontrol_tx.text = kwargs.pop('pfc_flowcontrol_tx')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_qos_flowcontrol_pfc_pfc_flowcontrol_rx(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(fortygigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        flowcontrol = ET.SubElement(qos, "flowcontrol")
        pfc = ET.SubElement(flowcontrol, "pfc")
        pfc_cos_key = ET.SubElement(pfc, "pfc-cos")
        pfc_cos_key.text = kwargs.pop('pfc_cos')
        pfc_flowcontrol_rx = ET.SubElement(pfc, "pfc-flowcontrol-rx")
        pfc_flowcontrol_rx.text = kwargs.pop('pfc_flowcontrol_rx')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_rmon_collection_ether_stats_entry_ether_stats_index(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        rmon = ET.SubElement(fortygigabitethernet, "rmon", xmlns="urn:brocade.com:mgmt:brocade-rmon")
        collection = ET.SubElement(rmon, "collection")
        ether_stats_entry = ET.SubElement(collection, "ether-stats-entry")
        ether_stats_index = ET.SubElement(ether_stats_entry, "ether-stats-index")
        ether_stats_index.text = kwargs.pop('ether_stats_index')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_rmon_collection_ether_stats_entry_ether_stats_owner(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        rmon = ET.SubElement(fortygigabitethernet, "rmon", xmlns="urn:brocade.com:mgmt:brocade-rmon")
        collection = ET.SubElement(rmon, "collection")
        ether_stats_entry = ET.SubElement(collection, "ether-stats-entry")
        ether_stats_index_key = ET.SubElement(ether_stats_entry, "ether-stats-index")
        ether_stats_index_key.text = kwargs.pop('ether_stats_index')
        ether_stats_owner = ET.SubElement(ether_stats_entry, "ether-stats-owner")
        ether_stats_owner.text = kwargs.pop('ether_stats_owner')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_rmon_collection_history_control_entry_history_control_index(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        rmon = ET.SubElement(fortygigabitethernet, "rmon", xmlns="urn:brocade.com:mgmt:brocade-rmon")
        collection = ET.SubElement(rmon, "collection")
        history_control_entry = ET.SubElement(collection, "history-control-entry")
        history_control_index = ET.SubElement(history_control_entry, "history-control-index")
        history_control_index.text = kwargs.pop('history_control_index')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_rmon_collection_history_control_entry_history_control_buckets_requested(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        rmon = ET.SubElement(fortygigabitethernet, "rmon", xmlns="urn:brocade.com:mgmt:brocade-rmon")
        collection = ET.SubElement(rmon, "collection")
        history_control_entry = ET.SubElement(collection, "history-control-entry")
        history_control_index_key = ET.SubElement(history_control_entry, "history-control-index")
        history_control_index_key.text = kwargs.pop('history_control_index')
        history_control_buckets_requested = ET.SubElement(history_control_entry, "history-control-buckets-requested")
        history_control_buckets_requested.text = kwargs.pop('history_control_buckets_requested')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_rmon_collection_history_control_entry_history_control_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        rmon = ET.SubElement(fortygigabitethernet, "rmon", xmlns="urn:brocade.com:mgmt:brocade-rmon")
        collection = ET.SubElement(rmon, "collection")
        history_control_entry = ET.SubElement(collection, "history-control-entry")
        history_control_index_key = ET.SubElement(history_control_entry, "history-control-index")
        history_control_index_key.text = kwargs.pop('history_control_index')
        history_control_interval = ET.SubElement(history_control_entry, "history-control-interval")
        history_control_interval.text = kwargs.pop('history_control_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_rmon_collection_history_control_entry_history_control_owner(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        rmon = ET.SubElement(fortygigabitethernet, "rmon", xmlns="urn:brocade.com:mgmt:brocade-rmon")
        collection = ET.SubElement(rmon, "collection")
        history_control_entry = ET.SubElement(collection, "history-control-entry")
        history_control_index_key = ET.SubElement(history_control_entry, "history-control-index")
        history_control_index_key.text = kwargs.pop('history_control_index')
        history_control_owner = ET.SubElement(history_control_entry, "history-control-owner")
        history_control_owner.text = kwargs.pop('history_control_owner')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_udld_udld_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        udld = ET.SubElement(fortygigabitethernet, "udld", xmlns="urn:brocade.com:mgmt:brocade-udld")
        udld_enable = ET.SubElement(udld, "udld-enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_vlan_classifier_activate_group_groupid(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vlan = ET.SubElement(fortygigabitethernet, "vlan", xmlns="urn:brocade.com:mgmt:brocade-vlan")
        classifier = ET.SubElement(vlan, "classifier")
        activate = ET.SubElement(classifier, "activate")
        group = ET.SubElement(activate, "group")
        groupid = ET.SubElement(group, "groupid")
        groupid.text = kwargs.pop('groupid')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_vlan_classifier_activate_group_vlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vlan = ET.SubElement(fortygigabitethernet, "vlan", xmlns="urn:brocade.com:mgmt:brocade-vlan")
        classifier = ET.SubElement(vlan, "classifier")
        activate = ET.SubElement(classifier, "activate")
        group = ET.SubElement(activate, "group")
        groupid_key = ET.SubElement(group, "groupid")
        groupid_key.text = kwargs.pop('groupid')
        vlan = ET.SubElement(group, "vlan")
        vlan.text = kwargs.pop('vlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_bpdu_drop_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        bpdu_drop = ET.SubElement(fortygigabitethernet, "bpdu-drop", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        enable = ET.SubElement(bpdu_drop, "enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_bpdu_drop_direction(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        bpdu_drop = ET.SubElement(fortygigabitethernet, "bpdu-drop", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        direction = ET.SubElement(bpdu_drop, "direction")
        direction.text = kwargs.pop('direction')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_tunnel_tagged_ieee_bpdu(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        tunnel = ET.SubElement(fortygigabitethernet, "tunnel", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        tagged_ieee_bpdu = ET.SubElement(tunnel, "tagged-ieee-bpdu")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_spanning_tree_autoedge(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(fortygigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        autoedge = ET.SubElement(spanning_tree, "autoedge")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_spanning_tree_cost(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(fortygigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        cost = ET.SubElement(spanning_tree, "cost")
        cost.text = kwargs.pop('cost')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_spanning_tree_portfast_portfastbasic(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(fortygigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        portfast = ET.SubElement(spanning_tree, "portfast")
        portfastbasic = ET.SubElement(portfast, "portfastbasic")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_spanning_tree_portfast_bpdu_guard(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(fortygigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        portfast = ET.SubElement(spanning_tree, "portfast")
        bpdu_guard = ET.SubElement(portfast, "bpdu-guard")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_spanning_tree_portfast_bpdu_filter(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(fortygigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        portfast = ET.SubElement(spanning_tree, "portfast")
        bpdu_filter = ET.SubElement(portfast, "bpdu-filter")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_spanning_tree_edgeport_edgeportbasic(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(fortygigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        edgeport = ET.SubElement(spanning_tree, "edgeport")
        edgeportbasic = ET.SubElement(edgeport, "edgeportbasic")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_spanning_tree_edgeport_bpdu_guard(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(fortygigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        edgeport = ET.SubElement(spanning_tree, "edgeport")
        bpdu_guard = ET.SubElement(edgeport, "bpdu-guard")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_spanning_tree_edgeport_bpdu_filter(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(fortygigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        edgeport = ET.SubElement(spanning_tree, "edgeport")
        bpdu_filter = ET.SubElement(edgeport, "bpdu-filter")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_spanning_tree_guard_root(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(fortygigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        guard = ET.SubElement(spanning_tree, "guard")
        root = ET.SubElement(guard, "root")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_spanning_tree_hello_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(fortygigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        hello_time = ET.SubElement(spanning_tree, "hello-time")
        hello_time.text = kwargs.pop('hello_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_spanning_tree_bpdu_mac(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(fortygigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        bpdu_mac = ET.SubElement(spanning_tree, "bpdu-mac")
        bpdu_mac.text = kwargs.pop('bpdu_mac')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_spanning_tree_link_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(fortygigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        link_type = ET.SubElement(spanning_tree, "link-type")
        link_type.text = kwargs.pop('link_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_spanning_tree_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(fortygigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        priority = ET.SubElement(spanning_tree, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_spanning_tree_restricted_role(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(fortygigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        restricted_role = ET.SubElement(spanning_tree, "restricted-role")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_spanning_tree_restricted_tcn(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(fortygigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        restricted_tcn = ET.SubElement(spanning_tree, "restricted-tcn")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_spanning_tree_shutdown(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(fortygigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        shutdown = ET.SubElement(spanning_tree, "shutdown")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_spanning_tree_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(fortygigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        vlan = ET.SubElement(spanning_tree, "vlan")
        id = ET.SubElement(vlan, "id")
        id.text = kwargs.pop('id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_spanning_tree_vlan_cost(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(fortygigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        vlan = ET.SubElement(spanning_tree, "vlan")
        id_key = ET.SubElement(vlan, "id")
        id_key.text = kwargs.pop('id')
        cost = ET.SubElement(vlan, "cost")
        cost.text = kwargs.pop('cost')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_spanning_tree_vlan_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(fortygigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        vlan = ET.SubElement(spanning_tree, "vlan")
        id_key = ET.SubElement(vlan, "id")
        id_key.text = kwargs.pop('id')
        priority = ET.SubElement(vlan, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_spanning_tree_vlan_guard_root(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(fortygigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        vlan = ET.SubElement(spanning_tree, "vlan")
        id_key = ET.SubElement(vlan, "id")
        id_key.text = kwargs.pop('id')
        guard = ET.SubElement(vlan, "guard")
        root = ET.SubElement(guard, "root")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_spanning_tree_instance_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(fortygigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        instance = ET.SubElement(spanning_tree, "instance")
        id = ET.SubElement(instance, "id")
        id.text = kwargs.pop('id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_spanning_tree_instance_cost(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(fortygigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        instance = ET.SubElement(spanning_tree, "instance")
        id_key = ET.SubElement(instance, "id")
        id_key.text = kwargs.pop('id')
        cost = ET.SubElement(instance, "cost")
        cost.text = kwargs.pop('cost')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_spanning_tree_instance_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(fortygigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        instance = ET.SubElement(spanning_tree, "instance")
        id_key = ET.SubElement(instance, "id")
        id_key.text = kwargs.pop('id')
        priority = ET.SubElement(instance, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_spanning_tree_instance_restricted_role(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(fortygigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        instance = ET.SubElement(spanning_tree, "instance")
        id_key = ET.SubElement(instance, "id")
        id_key.text = kwargs.pop('id')
        restricted_role = ET.SubElement(instance, "restricted-role")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fortygigabitethernet_spanning_tree_instance_restricted_tcn(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fortygigabitethernet = ET.SubElement(interface, "fortygigabitethernet")
        name_key = ET.SubElement(fortygigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(fortygigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        instance = ET.SubElement(spanning_tree, "instance")
        id_key = ET.SubElement(instance, "id")
        id_key.text = kwargs.pop('id')
        restricted_tcn = ET.SubElement(instance, "restricted-tcn")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name = ET.SubElement(hundredgigabitethernet, "name")
        name.text = kwargs.pop('name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_cee(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        cee = ET.SubElement(hundredgigabitethernet, "cee")
        cee.text = kwargs.pop('cee')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ifindex(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ifindex = ET.SubElement(hundredgigabitethernet, "ifindex")
        ifindex.text = kwargs.pop('ifindex')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_description(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        description = ET.SubElement(hundredgigabitethernet, "description")
        description.text = kwargs.pop('description')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_shutdown(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        shutdown = ET.SubElement(hundredgigabitethernet, "shutdown")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_channel_group_port_int(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        channel_group = ET.SubElement(hundredgigabitethernet, "channel-group")
        port_int = ET.SubElement(channel_group, "port-int")
        port_int.text = kwargs.pop('port_int')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_channel_group_mode(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        channel_group = ET.SubElement(hundredgigabitethernet, "channel-group")
        mode = ET.SubElement(channel_group, "mode")
        mode.text = kwargs.pop('mode')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_channel_group_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        channel_group = ET.SubElement(hundredgigabitethernet, "channel-group")
        type = ET.SubElement(channel_group, "type")
        type.text = kwargs.pop('type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_mtu(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        mtu = ET.SubElement(hundredgigabitethernet, "mtu")
        mtu.text = kwargs.pop('mtu')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_basic_basic(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport_basic = ET.SubElement(hundredgigabitethernet, "switchport-basic")
        basic = ET.SubElement(switchport_basic, "basic")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_mode_vlan_mode(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        mode = ET.SubElement(switchport, "mode")
        vlan_mode = ET.SubElement(mode, "vlan-mode")
        vlan_mode.text = kwargs.pop('vlan_mode')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_mode_private_vlan_private_vlan_trunk_trunk_basic(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        mode = ET.SubElement(switchport, "mode")
        private_vlan = ET.SubElement(mode, "private-vlan")
        private_vlan_trunk = ET.SubElement(private_vlan, "private-vlan-trunk")
        trunk_basic = ET.SubElement(private_vlan_trunk, "trunk-basic")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_mode_private_vlan_private_vlan_trunk_trunk_promiscuous(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        mode = ET.SubElement(switchport, "mode")
        private_vlan = ET.SubElement(mode, "private-vlan")
        private_vlan_trunk = ET.SubElement(private_vlan, "private-vlan-trunk")
        trunk_promiscuous = ET.SubElement(private_vlan_trunk, "trunk-promiscuous")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_mode_private_vlan_private_vlan_trunk_trunk_host(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        mode = ET.SubElement(switchport, "mode")
        private_vlan = ET.SubElement(mode, "private-vlan")
        private_vlan_trunk = ET.SubElement(private_vlan, "private-vlan-trunk")
        trunk_host = ET.SubElement(private_vlan_trunk, "trunk-host")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_mode_private_vlan_promiscuous(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        mode = ET.SubElement(switchport, "mode")
        private_vlan = ET.SubElement(mode, "private-vlan")
        promiscuous = ET.SubElement(private_vlan, "promiscuous")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_mode_private_vlan_host(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        mode = ET.SubElement(switchport, "mode")
        private_vlan = ET.SubElement(mode, "private-vlan")
        host = ET.SubElement(private_vlan, "host")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_port_security_port_sec_max(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        port_security = ET.SubElement(switchport, "port-security")
        port_sec_max = ET.SubElement(port_security, "port-sec-max")
        port_sec_max.text = kwargs.pop('port_sec_max')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_port_security_port_sec_violation(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        port_security = ET.SubElement(switchport, "port-security")
        port_sec_violation = ET.SubElement(port_security, "port-sec-violation")
        port_sec_violation.text = kwargs.pop('port_sec_violation')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_port_security_port_secutiry_mac_address_mac_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        port_security = ET.SubElement(switchport, "port-security")
        port_secutiry_mac_address = ET.SubElement(port_security, "port-secutiry-mac-address")
        port_sec_vlan_key = ET.SubElement(port_secutiry_mac_address, "port-sec-vlan")
        port_sec_vlan_key.text = kwargs.pop('port_sec_vlan')
        mac_address = ET.SubElement(port_secutiry_mac_address, "mac-address")
        mac_address.text = kwargs.pop('mac_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_port_security_port_secutiry_mac_address_port_sec_vlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        port_security = ET.SubElement(switchport, "port-security")
        port_secutiry_mac_address = ET.SubElement(port_security, "port-secutiry-mac-address")
        mac_address_key = ET.SubElement(port_secutiry_mac_address, "mac-address")
        mac_address_key.text = kwargs.pop('mac_address')
        port_sec_vlan = ET.SubElement(port_secutiry_mac_address, "port-sec-vlan")
        port_sec_vlan.text = kwargs.pop('port_sec_vlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_port_security_sticky_sticky_flag(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        port_security = ET.SubElement(switchport, "port-security")
        sticky = ET.SubElement(port_security, "sticky")
        sticky_flag = ET.SubElement(sticky, "sticky-flag")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_port_security_sticky_port_secutiry_mac_address_mac_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        port_security = ET.SubElement(switchport, "port-security")
        sticky = ET.SubElement(port_security, "sticky")
        port_secutiry_mac_address = ET.SubElement(sticky, "port-secutiry-mac-address")
        port_sec_vlan_key = ET.SubElement(port_secutiry_mac_address, "port-sec-vlan")
        port_sec_vlan_key.text = kwargs.pop('port_sec_vlan')
        mac_address = ET.SubElement(port_secutiry_mac_address, "mac-address")
        mac_address.text = kwargs.pop('mac_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_port_security_sticky_port_secutiry_mac_address_port_sec_vlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        port_security = ET.SubElement(switchport, "port-security")
        sticky = ET.SubElement(port_security, "sticky")
        port_secutiry_mac_address = ET.SubElement(sticky, "port-secutiry-mac-address")
        mac_address_key = ET.SubElement(port_secutiry_mac_address, "mac-address")
        mac_address_key.text = kwargs.pop('mac_address')
        port_sec_vlan = ET.SubElement(port_secutiry_mac_address, "port-sec-vlan")
        port_sec_vlan.text = kwargs.pop('port_sec_vlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_port_security_allowed_ouis_oui(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        port_security = ET.SubElement(switchport, "port-security")
        allowed_ouis = ET.SubElement(port_security, "allowed-ouis")
        oui = ET.SubElement(allowed_ouis, "oui")
        oui.text = kwargs.pop('oui')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_port_security_shutdown_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        port_security = ET.SubElement(switchport, "port-security")
        shutdown_time = ET.SubElement(port_security, "shutdown-time")
        shutdown_time.text = kwargs.pop('shutdown_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_access_accessvlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        access = ET.SubElement(switchport, "access")
        accessvlan = ET.SubElement(access, "accessvlan")
        accessvlan.text = kwargs.pop('accessvlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_access_rspan_access_rspan_access_vlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        access = ET.SubElement(switchport, "access")
        rspan_access = ET.SubElement(access, "rspan-access")
        rspan_access_vlan = ET.SubElement(rspan_access, "rspan-access-vlan")
        rspan_access_vlan.text = kwargs.pop('rspan_access_vlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_access_mac_vlan_classification_access_vlan_access_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        access_mac_vlan_classification = ET.SubElement(switchport, "access-mac-vlan-classification")
        access = ET.SubElement(access_mac_vlan_classification, "access")
        vlan = ET.SubElement(access, "vlan")
        access_mac_address_key = ET.SubElement(vlan, "access-mac-address")
        access_mac_address_key.text = kwargs.pop('access_mac_address')
        access_vlan_id = ET.SubElement(vlan, "access-vlan-id")
        access_vlan_id.text = kwargs.pop('access_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_access_mac_vlan_classification_access_vlan_access_mac_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        access_mac_vlan_classification = ET.SubElement(switchport, "access-mac-vlan-classification")
        access = ET.SubElement(access_mac_vlan_classification, "access")
        vlan = ET.SubElement(access, "vlan")
        access_vlan_id_key = ET.SubElement(vlan, "access-vlan-id")
        access_vlan_id_key.text = kwargs.pop('access_vlan_id')
        access_mac_address = ET.SubElement(vlan, "access-mac-address")
        access_mac_address.text = kwargs.pop('access_mac_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_trunk_private_vlan_classification_private_vlan_trunk_allowed_vlan_add_trunk_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        trunk_private_vlan_classification = ET.SubElement(switchport, "trunk-private-vlan-classification")
        private_vlan = ET.SubElement(trunk_private_vlan_classification, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        add = ET.SubElement(vlan, "add")
        trunk_ctag_id_key = ET.SubElement(add, "trunk-ctag-id")
        trunk_ctag_id_key.text = kwargs.pop('trunk_ctag_id')
        trunk_vlan_id = ET.SubElement(add, "trunk-vlan-id")
        trunk_vlan_id.text = kwargs.pop('trunk_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_trunk_private_vlan_classification_private_vlan_trunk_allowed_vlan_add_trunk_ctag_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        trunk_private_vlan_classification = ET.SubElement(switchport, "trunk-private-vlan-classification")
        private_vlan = ET.SubElement(trunk_private_vlan_classification, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        add = ET.SubElement(vlan, "add")
        trunk_vlan_id_key = ET.SubElement(add, "trunk-vlan-id")
        trunk_vlan_id_key.text = kwargs.pop('trunk_vlan_id')
        trunk_ctag_id = ET.SubElement(add, "trunk-ctag-id")
        trunk_ctag_id.text = kwargs.pop('trunk_ctag_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_trunk_private_vlan_classification_private_vlan_trunk_allowed_vlan_remove_trunk_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        trunk_private_vlan_classification = ET.SubElement(switchport, "trunk-private-vlan-classification")
        private_vlan = ET.SubElement(trunk_private_vlan_classification, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        remove = ET.SubElement(vlan, "remove")
        trunk_ctag_id_key = ET.SubElement(remove, "trunk-ctag-id")
        trunk_ctag_id_key.text = kwargs.pop('trunk_ctag_id')
        trunk_vlan_id = ET.SubElement(remove, "trunk-vlan-id")
        trunk_vlan_id.text = kwargs.pop('trunk_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_trunk_private_vlan_classification_private_vlan_trunk_allowed_vlan_remove_trunk_ctag_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        trunk_private_vlan_classification = ET.SubElement(switchport, "trunk-private-vlan-classification")
        private_vlan = ET.SubElement(trunk_private_vlan_classification, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        remove = ET.SubElement(vlan, "remove")
        trunk_vlan_id_key = ET.SubElement(remove, "trunk-vlan-id")
        trunk_vlan_id_key.text = kwargs.pop('trunk_vlan_id')
        trunk_ctag_id = ET.SubElement(remove, "trunk-ctag-id")
        trunk_ctag_id.text = kwargs.pop('trunk_ctag_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_access_mac_group_vlan_classification_access_vlan_access_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        access_mac_group_vlan_classification = ET.SubElement(switchport, "access-mac-group-vlan-classification")
        access = ET.SubElement(access_mac_group_vlan_classification, "access")
        vlan = ET.SubElement(access, "vlan")
        access_mac_group_key = ET.SubElement(vlan, "access-mac-group")
        access_mac_group_key.text = kwargs.pop('access_mac_group')
        access_vlan_id = ET.SubElement(vlan, "access-vlan-id")
        access_vlan_id.text = kwargs.pop('access_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_access_mac_group_vlan_classification_access_vlan_access_mac_group(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        access_mac_group_vlan_classification = ET.SubElement(switchport, "access-mac-group-vlan-classification")
        access = ET.SubElement(access_mac_group_vlan_classification, "access")
        vlan = ET.SubElement(access, "vlan")
        access_vlan_id_key = ET.SubElement(vlan, "access-vlan-id")
        access_vlan_id_key.text = kwargs.pop('access_vlan_id')
        access_mac_group = ET.SubElement(vlan, "access-mac-group")
        access_mac_group.text = kwargs.pop('access_mac_group')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_trunk_allowed_vlan_all(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        all = ET.SubElement(vlan, "all")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_trunk_allowed_vlan_none(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        none = ET.SubElement(vlan, "none")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_trunk_allowed_vlan_add(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        add = ET.SubElement(vlan, "add")
        add.text = kwargs.pop('add')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_trunk_allowed_vlan_excpt(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        excpt = ET.SubElement(vlan, "except")
        excpt.text = kwargs.pop('excpt')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_trunk_allowed_vlan_remove(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        remove = ET.SubElement(vlan, "remove")
        remove.text = kwargs.pop('remove')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_trunk_allowed_vlanoper_vlan_add(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlanoper = ET.SubElement(allowed, "vlanoper")
        vlan = ET.SubElement(vlanoper, "vlan")
        add = ET.SubElement(vlan, "add")
        add.text = kwargs.pop('add')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_trunk_allowed_vlanoper_vlan_remove(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlanoper = ET.SubElement(allowed, "vlanoper")
        vlan = ET.SubElement(vlanoper, "vlan")
        remove = ET.SubElement(vlan, "remove")
        remove.text = kwargs.pop('remove')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_trunk_allowed_rspan_vlan_add_rspan_trunk_vlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        rspan_vlan = ET.SubElement(allowed, "rspan-vlan")
        add_rspan_trunk_vlan = ET.SubElement(rspan_vlan, "add-rspan-trunk-vlan")
        add_rspan_trunk_vlan.text = kwargs.pop('add_rspan_trunk_vlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_trunk_allowed_rspan_vlan_remove_rspan_trunk_vlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        rspan_vlan = ET.SubElement(allowed, "rspan-vlan")
        remove_rspan_trunk_vlan = ET.SubElement(rspan_vlan, "remove-rspan-trunk-vlan")
        remove_rspan_trunk_vlan.text = kwargs.pop('remove_rspan_trunk_vlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_trunk_allowed_trunk_rspan_vlan_classification_rspan_vlan_add_trunk_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        trunk_rspan_vlan_classification = ET.SubElement(allowed, "trunk-rspan-vlan-classification")
        rspan_vlan = ET.SubElement(trunk_rspan_vlan_classification, "rspan-vlan")
        add = ET.SubElement(rspan_vlan, "add")
        trunk_ctag_id_key = ET.SubElement(add, "trunk-ctag-id")
        trunk_ctag_id_key.text = kwargs.pop('trunk_ctag_id')
        trunk_vlan_id = ET.SubElement(add, "trunk-vlan-id")
        trunk_vlan_id.text = kwargs.pop('trunk_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_trunk_allowed_trunk_rspan_vlan_classification_rspan_vlan_add_trunk_ctag_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        trunk_rspan_vlan_classification = ET.SubElement(allowed, "trunk-rspan-vlan-classification")
        rspan_vlan = ET.SubElement(trunk_rspan_vlan_classification, "rspan-vlan")
        add = ET.SubElement(rspan_vlan, "add")
        trunk_vlan_id_key = ET.SubElement(add, "trunk-vlan-id")
        trunk_vlan_id_key.text = kwargs.pop('trunk_vlan_id')
        trunk_ctag_id = ET.SubElement(add, "trunk-ctag-id")
        trunk_ctag_id.text = kwargs.pop('trunk_ctag_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_trunk_allowed_trunk_rspan_vlan_classification_rspan_vlan_remove_trunk_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        trunk_rspan_vlan_classification = ET.SubElement(allowed, "trunk-rspan-vlan-classification")
        rspan_vlan = ET.SubElement(trunk_rspan_vlan_classification, "rspan-vlan")
        remove = ET.SubElement(rspan_vlan, "remove")
        trunk_ctag_id_key = ET.SubElement(remove, "trunk-ctag-id")
        trunk_ctag_id_key.text = kwargs.pop('trunk_ctag_id')
        trunk_vlan_id = ET.SubElement(remove, "trunk-vlan-id")
        trunk_vlan_id.text = kwargs.pop('trunk_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_trunk_allowed_trunk_rspan_vlan_classification_rspan_vlan_remove_trunk_ctag_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        trunk_rspan_vlan_classification = ET.SubElement(allowed, "trunk-rspan-vlan-classification")
        rspan_vlan = ET.SubElement(trunk_rspan_vlan_classification, "rspan-vlan")
        remove = ET.SubElement(rspan_vlan, "remove")
        trunk_vlan_id_key = ET.SubElement(remove, "trunk-vlan-id")
        trunk_vlan_id_key.text = kwargs.pop('trunk_vlan_id')
        trunk_ctag_id = ET.SubElement(remove, "trunk-ctag-id")
        trunk_ctag_id.text = kwargs.pop('trunk_ctag_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_trunk_trunk_vlan_classification_allowed_vlan_add_trunk_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        trunk_vlan_classification = ET.SubElement(trunk, "trunk-vlan-classification")
        allowed = ET.SubElement(trunk_vlan_classification, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        add = ET.SubElement(vlan, "add")
        trunk_vlan_id = ET.SubElement(add, "trunk-vlan-id")
        trunk_vlan_id.text = kwargs.pop('trunk_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_trunk_trunk_vlan_classification_allowed_vlan_add_trunk_ctag_range(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        trunk_vlan_classification = ET.SubElement(trunk, "trunk-vlan-classification")
        allowed = ET.SubElement(trunk_vlan_classification, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        add = ET.SubElement(vlan, "add")
        trunk_vlan_id_key = ET.SubElement(add, "trunk-vlan-id")
        trunk_vlan_id_key.text = kwargs.pop('trunk_vlan_id')
        trunk_ctag_range = ET.SubElement(add, "trunk-ctag-range")
        trunk_ctag_range.text = kwargs.pop('trunk_ctag_range')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_trunk_trunk_vlan_classification_allowed_vlan_remove_trunk_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        trunk_vlan_classification = ET.SubElement(trunk, "trunk-vlan-classification")
        allowed = ET.SubElement(trunk_vlan_classification, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        remove = ET.SubElement(vlan, "remove")
        trunk_vlan_id = ET.SubElement(remove, "trunk-vlan-id")
        trunk_vlan_id.text = kwargs.pop('trunk_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_trunk_trunk_vlan_classification_allowed_vlan_remove_trunk_ctag_range(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        trunk_vlan_classification = ET.SubElement(trunk, "trunk-vlan-classification")
        allowed = ET.SubElement(trunk_vlan_classification, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        remove = ET.SubElement(vlan, "remove")
        trunk_vlan_id_key = ET.SubElement(remove, "trunk-vlan-id")
        trunk_vlan_id_key.text = kwargs.pop('trunk_vlan_id')
        trunk_ctag_range = ET.SubElement(remove, "trunk-ctag-range")
        trunk_ctag_range.text = kwargs.pop('trunk_ctag_range')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_trunk_default_vlan_config_default_transparent_vlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        default_vlan_config = ET.SubElement(trunk, "default-vlan-config")
        default_transparent_vlan = ET.SubElement(default_vlan_config, "default-transparent-vlan")
        default_transparent_vlan.text = kwargs.pop('default_transparent_vlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_trunk_tag_native_vlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        tag = ET.SubElement(trunk, "tag")
        native_vlan = ET.SubElement(tag, "native-vlan")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_trunk_native_vlan_classification_native_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        native_vlan_classification = ET.SubElement(trunk, "native-vlan-classification")
        native_vlan_id = ET.SubElement(native_vlan_classification, "native-vlan-id")
        native_vlan_id.text = kwargs.pop('native_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_trunk_native_vlan_classification_native_vlan_ctag_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        native_vlan_classification = ET.SubElement(trunk, "native-vlan-classification")
        native_vlan_ctag_id = ET.SubElement(native_vlan_classification, "native-vlan-ctag-id")
        native_vlan_ctag_id.text = kwargs.pop('native_vlan_ctag_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_trunk_native_vlan_xtagged_config_native_vlan_id_xtagged(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        native_vlan_xtagged_config = ET.SubElement(trunk, "native-vlan-xtagged-config")
        native_vlan_id_xtagged = ET.SubElement(native_vlan_xtagged_config, "native-vlan-id-xtagged")
        native_vlan_id_xtagged.text = kwargs.pop('native_vlan_id_xtagged')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_trunk_native_vlan_xtagged_config_native_vlan_ctag_id_xtagged(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        native_vlan_xtagged_config = ET.SubElement(trunk, "native-vlan-xtagged-config")
        native_vlan_ctag_id_xtagged = ET.SubElement(native_vlan_xtagged_config, "native-vlan-ctag-id-xtagged")
        native_vlan_ctag_id_xtagged.text = kwargs.pop('native_vlan_ctag_id_xtagged')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_trunk_native_vlan_xtagged_config_native_vlan_egress_type_xtagged(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        native_vlan_xtagged_config = ET.SubElement(trunk, "native-vlan-xtagged-config")
        native_vlan_egress_type_xtagged = ET.SubElement(native_vlan_xtagged_config, "native-vlan-egress-type-xtagged")
        native_vlan_egress_type_xtagged.text = kwargs.pop('native_vlan_egress_type_xtagged')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_trunk_native_vlan_untagged_config_native_vlan_id_untagged(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        native_vlan_untagged_config = ET.SubElement(trunk, "native-vlan-untagged-config")
        native_vlan_id_untagged = ET.SubElement(native_vlan_untagged_config, "native-vlan-id-untagged")
        native_vlan_id_untagged.text = kwargs.pop('native_vlan_id_untagged')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_private_vlan_trunk_pvlan_tag_pvlan_tag_native_vlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        pvlan_tag = ET.SubElement(trunk, "pvlan-tag")
        pvlan_tag_native_vlan = ET.SubElement(pvlan_tag, "pvlan-tag-native-vlan")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_private_vlan_trunk_native_pvlanNativevlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        native = ET.SubElement(trunk, "native")
        pvlanNativevlan = ET.SubElement(native, "pvlanNativevlan")
        pvlanNativevlan.text = kwargs.pop('pvlanNativevlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_private_vlan_trunk_native_pvlan_native_vlan_ctag_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        native = ET.SubElement(trunk, "native")
        pvlan_native_vlan_ctag_id = ET.SubElement(native, "pvlan-native-vlan-ctag-id")
        pvlan_native_vlan_ctag_id.text = kwargs.pop('pvlan_native_vlan_ctag_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_private_vlan_trunk_allowed_vlan_pvlan_all(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        pvlan_all = ET.SubElement(vlan, "pvlan_all")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_private_vlan_trunk_allowed_vlan_pvlan_none(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        pvlan_none = ET.SubElement(vlan, "pvlan_none")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_private_vlan_trunk_allowed_vlan_pvlan_add(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        pvlan_add = ET.SubElement(vlan, "pvlan_add")
        pvlan_add.text = kwargs.pop('pvlan_add')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_private_vlan_trunk_allowed_vlan_pvlan_except(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        pvlan_except = ET.SubElement(vlan, "pvlan_except")
        pvlan_except.text = kwargs.pop('pvlan_except')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_private_vlan_trunk_allowed_vlan_pvlan_remove(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        pvlan_remove = ET.SubElement(vlan, "pvlan_remove")
        pvlan_remove.text = kwargs.pop('pvlan_remove')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_private_vlan_host_association_host_pri_pvlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        host_association = ET.SubElement(private_vlan, "host-association")
        host_pri_pvlan = ET.SubElement(host_association, "host-pri-pvlan")
        host_pri_pvlan.text = kwargs.pop('host_pri_pvlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_private_vlan_host_association_host_sec_pvlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        host_association = ET.SubElement(private_vlan, "host-association")
        host_sec_pvlan = ET.SubElement(host_association, "host-sec-pvlan")
        host_sec_pvlan.text = kwargs.pop('host_sec_pvlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_private_vlan_association_trunk_trunk_pri_pvlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        association = ET.SubElement(private_vlan, "association")
        trunk = ET.SubElement(association, "trunk")
        trunk_sec_pvlan_key = ET.SubElement(trunk, "trunk-sec-pvlan")
        trunk_sec_pvlan_key.text = kwargs.pop('trunk_sec_pvlan')
        trunk_pri_pvlan = ET.SubElement(trunk, "trunk-pri-pvlan")
        trunk_pri_pvlan.text = kwargs.pop('trunk_pri_pvlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_private_vlan_association_trunk_trunk_sec_pvlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        association = ET.SubElement(private_vlan, "association")
        trunk = ET.SubElement(association, "trunk")
        trunk_pri_pvlan_key = ET.SubElement(trunk, "trunk-pri-pvlan")
        trunk_pri_pvlan_key.text = kwargs.pop('trunk_pri_pvlan')
        trunk_sec_pvlan = ET.SubElement(trunk, "trunk-sec-pvlan")
        trunk_sec_pvlan.text = kwargs.pop('trunk_sec_pvlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_private_vlan_mapping_promis_pri_pvlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        mapping = ET.SubElement(private_vlan, "mapping")
        promis_pri_pvlan = ET.SubElement(mapping, "promis-pri-pvlan")
        promis_pri_pvlan.text = kwargs.pop('promis_pri_pvlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_private_vlan_mapping_oper(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        mapping = ET.SubElement(private_vlan, "mapping")
        promis_pri_pvlan_key = ET.SubElement(mapping, "promis-pri-pvlan")
        promis_pri_pvlan_key.text = kwargs.pop('promis_pri_pvlan')
        oper = ET.SubElement(mapping, "oper")
        oper.text = kwargs.pop('oper')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_private_vlan_mapping_promis_sec_pvlan_range(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        mapping = ET.SubElement(private_vlan, "mapping")
        promis_pri_pvlan_key = ET.SubElement(mapping, "promis-pri-pvlan")
        promis_pri_pvlan_key.text = kwargs.pop('promis_pri_pvlan')
        promis_sec_pvlan_range = ET.SubElement(mapping, "promis-sec-pvlan-range")
        promis_sec_pvlan_range.text = kwargs.pop('promis_sec_pvlan_range')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_access_mac_rspan_vlan_classification_access_vlan_access_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        access_mac_rspan_vlan_classification = ET.SubElement(switchport, "access-mac-rspan-vlan-classification")
        access = ET.SubElement(access_mac_rspan_vlan_classification, "access")
        vlan = ET.SubElement(access, "vlan")
        access_mac_address_key = ET.SubElement(vlan, "access-mac-address")
        access_mac_address_key.text = kwargs.pop('access_mac_address')
        access_vlan_id = ET.SubElement(vlan, "access-vlan-id")
        access_vlan_id.text = kwargs.pop('access_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_access_mac_rspan_vlan_classification_access_vlan_access_mac_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        access_mac_rspan_vlan_classification = ET.SubElement(switchport, "access-mac-rspan-vlan-classification")
        access = ET.SubElement(access_mac_rspan_vlan_classification, "access")
        vlan = ET.SubElement(access, "vlan")
        access_vlan_id_key = ET.SubElement(vlan, "access-vlan-id")
        access_vlan_id_key.text = kwargs.pop('access_vlan_id')
        access_mac_address = ET.SubElement(vlan, "access-mac-address")
        access_mac_address.text = kwargs.pop('access_mac_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_access_mac_group_rspan_vlan_classification_access_vlan_access_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        access_mac_group_rspan_vlan_classification = ET.SubElement(switchport, "access-mac-group-rspan-vlan-classification")
        access = ET.SubElement(access_mac_group_rspan_vlan_classification, "access")
        vlan = ET.SubElement(access, "vlan")
        access_mac_group_key = ET.SubElement(vlan, "access-mac-group")
        access_mac_group_key.text = kwargs.pop('access_mac_group')
        access_vlan_id = ET.SubElement(vlan, "access-vlan-id")
        access_vlan_id.text = kwargs.pop('access_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_switchport_access_mac_group_rspan_vlan_classification_access_vlan_access_mac_group(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(hundredgigabitethernet, "switchport")
        access_mac_group_rspan_vlan_classification = ET.SubElement(switchport, "access-mac-group-rspan-vlan-classification")
        access = ET.SubElement(access_mac_group_rspan_vlan_classification, "access")
        vlan = ET.SubElement(access, "vlan")
        access_vlan_id_key = ET.SubElement(vlan, "access-vlan-id")
        access_vlan_id_key.text = kwargs.pop('access_vlan_id')
        access_mac_group = ET.SubElement(vlan, "access-mac-group")
        access_mac_group.text = kwargs.pop('access_mac_group')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_mac_learning_mac_learn_disable_vlan_mac_learning_vlan_add(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        mac_learning = ET.SubElement(hundredgigabitethernet, "mac-learning")
        mac_learn_disable = ET.SubElement(mac_learning, "mac-learn-disable")
        vlan = ET.SubElement(mac_learn_disable, "vlan")
        mac_learning_vlan_add = ET.SubElement(vlan, "mac-learning-vlan-add")
        mac_learning_vlan_add.text = kwargs.pop('mac_learning_vlan_add')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_mac_learning_mac_learn_disable_vlan_mac_learning_vlan_remove(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        mac_learning = ET.SubElement(hundredgigabitethernet, "mac-learning")
        mac_learn_disable = ET.SubElement(mac_learning, "mac-learn-disable")
        vlan = ET.SubElement(mac_learn_disable, "vlan")
        mac_learning_vlan_remove = ET.SubElement(vlan, "mac-learning-vlan-remove")
        mac_learning_vlan_remove.text = kwargs.pop('mac_learning_vlan_remove')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_ip_config_mtu(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        ip_config = ET.SubElement(ip, "ip-config", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        mtu = ET.SubElement(ip_config, "mtu")
        mtu.text = kwargs.pop('mtu')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_ip_config_directed_broadcast(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        ip_config = ET.SubElement(ip, "ip-config", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        directed_broadcast = ET.SubElement(ip_config, "directed-broadcast")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_ip_config_proxy_arp(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        ip_config = ET.SubElement(ip, "ip-config", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        proxy_arp = ET.SubElement(ip_config, "proxy-arp")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_ip_config_arp_aging_timeout(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        ip_config = ET.SubElement(ip, "ip-config", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        arp_aging_timeout = ET.SubElement(ip_config, "arp-aging-timeout")
        arp_aging_timeout.text = kwargs.pop('arp_aging_timeout')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_ip_config_address_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        ip_config = ET.SubElement(ip, "ip-config", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        address = ET.SubElement(ip_config, "address")
        address = ET.SubElement(address, "address")
        address.text = kwargs.pop('address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_ip_config_address_secondary(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        ip_config = ET.SubElement(ip, "ip-config", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        address = ET.SubElement(ip_config, "address")
        address_key = ET.SubElement(address, "address")
        address_key.text = kwargs.pop('address')
        secondary = ET.SubElement(address, "secondary")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_ip_config_address_ospf_passive(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        ip_config = ET.SubElement(ip, "ip-config", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        address = ET.SubElement(ip_config, "address")
        address_key = ET.SubElement(address, "address")
        address_key.text = kwargs.pop('address')
        ospf_passive = ET.SubElement(address, "ospf-passive")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_ip_config_address_ospf_ignore(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        ip_config = ET.SubElement(ip, "ip-config", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        address = ET.SubElement(ip_config, "address")
        address_key = ET.SubElement(address, "address")
        address_key.text = kwargs.pop('address')
        ospf_ignore = ET.SubElement(address, "ospf-ignore")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_arp_node_config_arp_inspection_trust(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        arp_node_config = ET.SubElement(ip, "arp-node-config", xmlns="urn:brocade.com:mgmt:brocade-dai")
        arp = ET.SubElement(arp_node_config, "arp")
        inspection = ET.SubElement(arp, "inspection")
        trust = ET.SubElement(inspection, "trust")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_interface_hu_dhcp_conf_dhcp_relay_servers_relay_ip_addr(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        interface_hu_dhcp_conf = ET.SubElement(ip, "interface-hu-dhcp-conf", xmlns="urn:brocade.com:mgmt:brocade-dhcp")
        dhcp = ET.SubElement(interface_hu_dhcp_conf, "dhcp")
        relay = ET.SubElement(dhcp, "relay")
        servers = ET.SubElement(relay, "servers")
        server_vrf_name_key = ET.SubElement(servers, "server-vrf-name")
        server_vrf_name_key.text = kwargs.pop('server_vrf_name')
        relay_ip_addr = ET.SubElement(servers, "relay-ip-addr")
        relay_ip_addr.text = kwargs.pop('relay_ip_addr')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_interface_hu_dhcp_conf_dhcp_relay_servers_server_vrf_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        interface_hu_dhcp_conf = ET.SubElement(ip, "interface-hu-dhcp-conf", xmlns="urn:brocade.com:mgmt:brocade-dhcp")
        dhcp = ET.SubElement(interface_hu_dhcp_conf, "dhcp")
        relay = ET.SubElement(dhcp, "relay")
        servers = ET.SubElement(relay, "servers")
        relay_ip_addr_key = ET.SubElement(servers, "relay-ip-addr")
        relay_ip_addr_key.text = kwargs.pop('relay_ip_addr')
        server_vrf_name = ET.SubElement(servers, "server-vrf-name")
        server_vrf_name.text = kwargs.pop('server_vrf_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_interface_hu_dhcp_conf_dhcp_relay_gateway(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        interface_hu_dhcp_conf = ET.SubElement(ip, "interface-hu-dhcp-conf", xmlns="urn:brocade.com:mgmt:brocade-dhcp")
        dhcp = ET.SubElement(interface_hu_dhcp_conf, "dhcp")
        relay = ET.SubElement(dhcp, "relay")
        gateway = ET.SubElement(relay, "gateway")
        gateway.text = kwargs.pop('gateway')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_icmp_echo_reply(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        icmp = ET.SubElement(ip, "icmp", xmlns="urn:brocade.com:mgmt:brocade-icmp")
        echo_reply = ET.SubElement(icmp, "echo-reply")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_icmp_rate_limiting(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        icmp = ET.SubElement(ip, "icmp", xmlns="urn:brocade.com:mgmt:brocade-icmp")
        rate_limiting = ET.SubElement(icmp, "rate-limiting")
        rate_limiting.text = kwargs.pop('rate_limiting')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_icmp_unreachable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        icmp = ET.SubElement(ip, "icmp", xmlns="urn:brocade.com:mgmt:brocade-icmp")
        unreachable = ET.SubElement(icmp, "unreachable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_icmp_redirect(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        icmp = ET.SubElement(ip, "icmp", xmlns="urn:brocade.com:mgmt:brocade-icmp")
        redirect = ET.SubElement(icmp, "redirect")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_icmp_address_mask(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        icmp = ET.SubElement(ip, "icmp", xmlns="urn:brocade.com:mgmt:brocade-icmp")
        address_mask = ET.SubElement(icmp, "address-mask")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_igmp_phy_intf_cfg_igmp_last_member_query_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        igmp_phy_intf_cfg = ET.SubElement(ip, "igmp-phy-intf-cfg", xmlns="urn:brocade.com:mgmt:brocade-igmp")
        igmp = ET.SubElement(igmp_phy_intf_cfg, "igmp")
        last_member_query_interval = ET.SubElement(igmp, "last-member-query-interval")
        last_member_query_interval.text = kwargs.pop('last_member_query_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_igmp_phy_intf_cfg_igmp_query_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        igmp_phy_intf_cfg = ET.SubElement(ip, "igmp-phy-intf-cfg", xmlns="urn:brocade.com:mgmt:brocade-igmp")
        igmp = ET.SubElement(igmp_phy_intf_cfg, "igmp")
        query_interval = ET.SubElement(igmp, "query-interval")
        query_interval.text = kwargs.pop('query_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_igmp_phy_intf_cfg_igmp_query_max_response_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        igmp_phy_intf_cfg = ET.SubElement(ip, "igmp-phy-intf-cfg", xmlns="urn:brocade.com:mgmt:brocade-igmp")
        igmp = ET.SubElement(igmp_phy_intf_cfg, "igmp")
        query_max_response_time = ET.SubElement(igmp, "query-max-response-time")
        query_max_response_time.text = kwargs.pop('query_max_response_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_igmp_phy_intf_cfg_igmp_immediate_leave(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        igmp_phy_intf_cfg = ET.SubElement(ip, "igmp-phy-intf-cfg", xmlns="urn:brocade.com:mgmt:brocade-igmp")
        igmp = ET.SubElement(igmp_phy_intf_cfg, "igmp")
        immediate_leave = ET.SubElement(igmp, "immediate-leave")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_igmp_phy_intf_cfg_igmp_static_group_sg_addr(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        igmp_phy_intf_cfg = ET.SubElement(ip, "igmp-phy-intf-cfg", xmlns="urn:brocade.com:mgmt:brocade-igmp")
        igmp = ET.SubElement(igmp_phy_intf_cfg, "igmp")
        static_group = ET.SubElement(igmp, "static-group")
        sg_addr = ET.SubElement(static_group, "sg-addr")
        sg_addr.text = kwargs.pop('sg_addr')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_interface_fo_ospf_conf_ospf1_area(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        area = ET.SubElement(ospf1, "area")
        area.text = kwargs.pop('area')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_interface_fo_ospf_conf_ospf1_auth_change_wait_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        auth_change_wait_time = ET.SubElement(ospf1, "auth-change-wait-time")
        auth_change_wait_time.text = kwargs.pop('auth_change_wait_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_interface_fo_ospf_conf_ospf1_authentication_key_no_encrypt_auth_key_table_no_encrypt_auth_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        authentication_key = ET.SubElement(ospf1, "authentication-key")
        no_encrypt_auth_key_table = ET.SubElement(authentication_key, "no-encrypt-auth-key-table")
        no_encrypt_auth_key = ET.SubElement(no_encrypt_auth_key_table, "no-encrypt-auth-key")
        no_encrypt_auth_key.text = kwargs.pop('no_encrypt_auth_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_interface_fo_ospf_conf_ospf1_authentication_key_auth_key_table_encrypttype(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        authentication_key = ET.SubElement(ospf1, "authentication-key")
        auth_key_table = ET.SubElement(authentication_key, "auth-key-table")
        encrypttype = ET.SubElement(auth_key_table, "encrypttype")
        encrypttype.text = kwargs.pop('encrypttype')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_interface_fo_ospf_conf_ospf1_authentication_key_auth_key_table_auth_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        authentication_key = ET.SubElement(ospf1, "authentication-key")
        auth_key_table = ET.SubElement(authentication_key, "auth-key-table")
        auth_key = ET.SubElement(auth_key_table, "auth-key")
        auth_key.text = kwargs.pop('auth_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_interface_fo_ospf_conf_ospf1_dead_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        dead_interval = ET.SubElement(ospf1, "dead-interval")
        dead_interval.text = kwargs.pop('dead_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_interface_fo_ospf_conf_ospf1_hello_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        hello_interval = ET.SubElement(ospf1, "hello-interval")
        hello_interval.text = kwargs.pop('hello_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_interface_fo_ospf_conf_ospf1_retransmit_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        retransmit_interval = ET.SubElement(ospf1, "retransmit-interval")
        retransmit_interval.text = kwargs.pop('retransmit_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_interface_fo_ospf_conf_ospf1_transmit_delay(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        transmit_delay = ET.SubElement(ospf1, "transmit-delay")
        transmit_delay.text = kwargs.pop('transmit_delay')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_interface_fo_ospf_conf_ospf1_md5_authentication_key_activation_wait_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        md5_authentication = ET.SubElement(ospf1, "md5-authentication")
        key_activation_wait_time = ET.SubElement(md5_authentication, "key-activation-wait-time")
        key_activation_wait_time.text = kwargs.pop('key_activation_wait_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_interface_fo_ospf_conf_ospf1_md5_authentication_no_encrypt_key_table_no_encrypt_key_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        md5_authentication = ET.SubElement(ospf1, "md5-authentication")
        no_encrypt_key_table = ET.SubElement(md5_authentication, "no-encrypt-key-table")
        no_encrypt_key_id = ET.SubElement(no_encrypt_key_table, "no-encrypt-key-id")
        no_encrypt_key_id.text = kwargs.pop('no_encrypt_key_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_interface_fo_ospf_conf_ospf1_md5_authentication_no_encrypt_key_table_no_encrypt_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        md5_authentication = ET.SubElement(ospf1, "md5-authentication")
        no_encrypt_key_table = ET.SubElement(md5_authentication, "no-encrypt-key-table")
        no_encrypt_key = ET.SubElement(no_encrypt_key_table, "no-encrypt-key")
        no_encrypt_key.text = kwargs.pop('no_encrypt_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_interface_fo_ospf_conf_ospf1_md5_authentication_key_table_key_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        md5_authentication = ET.SubElement(ospf1, "md5-authentication")
        key_table = ET.SubElement(md5_authentication, "key-table")
        key_id = ET.SubElement(key_table, "key-id")
        key_id.text = kwargs.pop('key_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_interface_fo_ospf_conf_ospf1_md5_authentication_key_table_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        md5_authentication = ET.SubElement(ospf1, "md5-authentication")
        key_table = ET.SubElement(md5_authentication, "key-table")
        key = ET.SubElement(key_table, "key")
        key.text = kwargs.pop('key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_interface_fo_ospf_conf_ospf1_md5_authentication_key_table_md5_authentication_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        md5_authentication = ET.SubElement(ospf1, "md5-authentication")
        key_table = ET.SubElement(md5_authentication, "key-table")
        md5_authentication_key = ET.SubElement(key_table, "md5-authentication-key")
        md5_authentication_key.text = kwargs.pop('md5_authentication_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_interface_fo_ospf_conf_ospf1_cost(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        cost = ET.SubElement(ospf1, "cost")
        cost.text = kwargs.pop('cost')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_interface_fo_ospf_conf_ospf1_database_filter_all_out(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        database_filter = ET.SubElement(ospf1, "database-filter")
        all_out = ET.SubElement(database_filter, "all-out")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_interface_fo_ospf_conf_ospf1_database_filter_all_external(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        database_filter = ET.SubElement(ospf1, "database-filter")
        all_external = ET.SubElement(database_filter, "all-external")
        all_external.text = kwargs.pop('all_external')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_interface_fo_ospf_conf_ospf1_database_filter_all_summary_external(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        database_filter = ET.SubElement(ospf1, "database-filter")
        all_summary_external = ET.SubElement(database_filter, "all-summary-external")
        all_summary_external.text = kwargs.pop('all_summary_external')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_interface_fo_ospf_conf_ospf1_mtu_ignore(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        mtu_ignore = ET.SubElement(ospf1, "mtu-ignore")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_interface_fo_ospf_conf_ospf1_network(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        network = ET.SubElement(ospf1, "network")
        network.text = kwargs.pop('network')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_interface_fo_ospf_conf_ospf1_active(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        active = ET.SubElement(ospf1, "active")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_interface_fo_ospf_conf_ospf1_passive(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        passive = ET.SubElement(ospf1, "passive")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_interface_fo_ospf_conf_ospf1_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        priority = ET.SubElement(ospf1, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_interface_fo_ospf_conf_ospf1_bfd_intf_bfd_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        interface_fo_ospf_conf = ET.SubElement(ip, "interface-fo-ospf-conf", xmlns="urn:brocade.com:mgmt:brocade-ospf")
        ospf1 = ET.SubElement(interface_fo_ospf_conf, "ospf1")
        bfd = ET.SubElement(ospf1, "bfd")
        intf_bfd_enable = ET.SubElement(bfd, "intf-bfd-enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_pim_intf_phy_cont_pim_int_cmd_pim_sparse(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        pim_intf_phy_cont = ET.SubElement(ip, "pim-intf-phy-cont", xmlns="urn:brocade.com:mgmt:brocade-pim")
        pim_int_cmd = ET.SubElement(pim_intf_phy_cont, "pim-int-cmd")
        pim_sparse = ET.SubElement(pim_int_cmd, "pim-sparse")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_pim_intf_phy_cont_pim_int_cmd_pim_neighbor_filter(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        pim_intf_phy_cont = ET.SubElement(ip, "pim-intf-phy-cont", xmlns="urn:brocade.com:mgmt:brocade-pim")
        pim_int_cmd = ET.SubElement(pim_intf_phy_cont, "pim-int-cmd")
        pim = ET.SubElement(pim_int_cmd, "pim")
        neighbor_filter = ET.SubElement(pim, "neighbor-filter")
        neighbor_filter.text = kwargs.pop('neighbor_filter')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_pim_intf_phy_cont_pim_int_cmd_pim_dr_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        pim_intf_phy_cont = ET.SubElement(ip, "pim-intf-phy-cont", xmlns="urn:brocade.com:mgmt:brocade-pim")
        pim_int_cmd = ET.SubElement(pim_intf_phy_cont, "pim-int-cmd")
        pim = ET.SubElement(pim_int_cmd, "pim")
        dr_priority = ET.SubElement(pim, "dr-priority")
        dr_priority.text = kwargs.pop('dr_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_pim_intf_phy_cont_pim_int_cmd_mcast_bdry_prefix_list(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(hundredgigabitethernet, "ip")
        pim_intf_phy_cont = ET.SubElement(ip, "pim-intf-phy-cont", xmlns="urn:brocade.com:mgmt:brocade-pim")
        pim_int_cmd = ET.SubElement(pim_intf_phy_cont, "pim-int-cmd")
        mcast_bdry_prefix_list = ET.SubElement(pim_int_cmd, "mcast-bdry-prefix-list")
        mcast_bdry_prefix_list.text = kwargs.pop('mcast_bdry_prefix_list')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_vrf_forwarding(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrf = ET.SubElement(hundredgigabitethernet, "vrf")
        forwarding = ET.SubElement(vrf, "forwarding")
        forwarding.text = kwargs.pop('forwarding')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_raguard(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        raguard = ET.SubElement(ipv6, "raguard")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_ipv6_config_address_use_link_local_only(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        address = ET.SubElement(ipv6_config, "address")
        use_link_local_only = ET.SubElement(address, "use-link-local-only")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_ipv6_config_address_link_local_config_link_local_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        address = ET.SubElement(ipv6_config, "address")
        link_local_config = ET.SubElement(address, "link-local-config")
        link_local_address = ET.SubElement(link_local_config, "link-local-address")
        link_local_address.text = kwargs.pop('link_local_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_ipv6_config_address_link_local_config_link_local(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        address = ET.SubElement(ipv6_config, "address")
        link_local_config = ET.SubElement(address, "link-local-config")
        link_local = ET.SubElement(link_local_config, "link-local")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_ipv6_config_address_ipv6_address_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        address = ET.SubElement(ipv6_config, "address")
        ipv6_address = ET.SubElement(address, "ipv6-address")
        address = ET.SubElement(ipv6_address, "address")
        address.text = kwargs.pop('address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_ipv6_config_address_ipv6_address_secondary(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        address = ET.SubElement(ipv6_config, "address")
        ipv6_address = ET.SubElement(address, "ipv6-address")
        address_key = ET.SubElement(ipv6_address, "address")
        address_key.text = kwargs.pop('address')
        secondary = ET.SubElement(ipv6_address, "secondary")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_ipv6_config_address_ipv6_address_eui_config_eui64(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        address = ET.SubElement(ipv6_config, "address")
        ipv6_address = ET.SubElement(address, "ipv6-address")
        address_key = ET.SubElement(ipv6_address, "address")
        address_key.text = kwargs.pop('address')
        eui_config = ET.SubElement(ipv6_address, "eui-config")
        eui64 = ET.SubElement(eui_config, "eui64")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_ipv6_config_address_ipv6_address_eui_config_eui_secondary(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        address = ET.SubElement(ipv6_config, "address")
        ipv6_address = ET.SubElement(address, "ipv6-address")
        address_key = ET.SubElement(ipv6_address, "address")
        address_key.text = kwargs.pop('address')
        eui_config = ET.SubElement(ipv6_address, "eui-config")
        eui_secondary = ET.SubElement(eui_config, "eui-secondary")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_ipv6_config_address_ipv6_address_anycast(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        address = ET.SubElement(ipv6_config, "address")
        ipv6_address = ET.SubElement(address, "ipv6-address")
        address_key = ET.SubElement(ipv6_address, "address")
        address_key.text = kwargs.pop('address')
        anycast = ET.SubElement(ipv6_address, "anycast")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_ipv6_config_mtu(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        ipv6_config = ET.SubElement(ipv6, "ipv6-config", xmlns="urn:brocade.com:mgmt:brocade-ipv6-config")
        mtu = ET.SubElement(ipv6_config, "mtu")
        mtu.text = kwargs.pop('mtu')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_interface_phy_dhcp_conf_dhcp_relay_servers_relay_ip_addr(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        interface_phy_dhcp_conf = ET.SubElement(ipv6, "interface-phy-dhcp-conf", xmlns="urn:brocade.com:mgmt:brocade-dhcpv6")
        dhcp = ET.SubElement(interface_phy_dhcp_conf, "dhcp")
        relay = ET.SubElement(dhcp, "relay")
        servers = ET.SubElement(relay, "servers")
        relay_ip_addr = ET.SubElement(servers, "relay-ip-addr")
        relay_ip_addr.text = kwargs.pop('relay_ip_addr')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_interface_phy_dhcp_conf_dhcp_relay_servers_server_vrf_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        interface_phy_dhcp_conf = ET.SubElement(ipv6, "interface-phy-dhcp-conf", xmlns="urn:brocade.com:mgmt:brocade-dhcpv6")
        dhcp = ET.SubElement(interface_phy_dhcp_conf, "dhcp")
        relay = ET.SubElement(dhcp, "relay")
        servers = ET.SubElement(relay, "servers")
        relay_ip_addr_key = ET.SubElement(servers, "relay-ip-addr")
        relay_ip_addr_key.text = kwargs.pop('relay_ip_addr')
        server_vrf_name = ET.SubElement(servers, "server-vrf-name")
        server_vrf_name.text = kwargs.pop('server_vrf_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_interface_phy_dhcp_conf_dhcp_relay_servers_interface_interface_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        interface_phy_dhcp_conf = ET.SubElement(ipv6, "interface-phy-dhcp-conf", xmlns="urn:brocade.com:mgmt:brocade-dhcpv6")
        dhcp = ET.SubElement(interface_phy_dhcp_conf, "dhcp")
        relay = ET.SubElement(dhcp, "relay")
        servers = ET.SubElement(relay, "servers")
        relay_ip_addr_key = ET.SubElement(servers, "relay-ip-addr")
        relay_ip_addr_key.text = kwargs.pop('relay_ip_addr')
        interface = ET.SubElement(servers, "interface")
        interface_type = ET.SubElement(interface, "interface-type")
        interface_type.text = kwargs.pop('interface_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_interface_phy_dhcp_conf_dhcp_relay_servers_interface_interface_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        interface_phy_dhcp_conf = ET.SubElement(ipv6, "interface-phy-dhcp-conf", xmlns="urn:brocade.com:mgmt:brocade-dhcpv6")
        dhcp = ET.SubElement(interface_phy_dhcp_conf, "dhcp")
        relay = ET.SubElement(dhcp, "relay")
        servers = ET.SubElement(relay, "servers")
        relay_ip_addr_key = ET.SubElement(servers, "relay-ip-addr")
        relay_ip_addr_key.text = kwargs.pop('relay_ip_addr')
        interface = ET.SubElement(servers, "interface")
        interface_name = ET.SubElement(interface, "interface-name")
        interface_name.text = kwargs.pop('interface_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_icmpv6_echo_reply(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        icmpv6 = ET.SubElement(ipv6, "icmpv6", xmlns="urn:brocade.com:mgmt:brocade-icmp")
        echo_reply = ET.SubElement(icmpv6, "echo-reply")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_icmpv6_rate_limiting(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        icmpv6 = ET.SubElement(ipv6, "icmpv6", xmlns="urn:brocade.com:mgmt:brocade-icmp")
        rate_limiting = ET.SubElement(icmpv6, "rate-limiting")
        rate_limiting.text = kwargs.pop('rate_limiting')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_icmpv6_unreachable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        icmpv6 = ET.SubElement(ipv6, "icmpv6", xmlns="urn:brocade.com:mgmt:brocade-icmp")
        unreachable = ET.SubElement(icmpv6, "unreachable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_icmpv6_redirect(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        icmpv6 = ET.SubElement(ipv6, "icmpv6", xmlns="urn:brocade.com:mgmt:brocade-icmp")
        redirect = ET.SubElement(icmpv6, "redirect")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_access_group_ipv6_access_list(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        access_group = ET.SubElement(ipv6, "access-group", xmlns="urn:brocade.com:mgmt:brocade-ipv6-access-list")
        ip_direction_key = ET.SubElement(access_group, "ip-direction")
        ip_direction_key.text = kwargs.pop('ip_direction')
        ipv6_access_list = ET.SubElement(access_group, "ipv6-access-list")
        ipv6_access_list.text = kwargs.pop('ipv6_access_list')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_access_group_ip_direction(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        access_group = ET.SubElement(ipv6, "access-group", xmlns="urn:brocade.com:mgmt:brocade-ipv6-access-list")
        ipv6_access_list_key = ET.SubElement(access_group, "ipv6-access-list")
        ipv6_access_list_key.text = kwargs.pop('ipv6_access_list')
        ip_direction = ET.SubElement(access_group, "ip-direction")
        ip_direction.text = kwargs.pop('ip_direction')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_access_group_traffic_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        access_group = ET.SubElement(ipv6, "access-group", xmlns="urn:brocade.com:mgmt:brocade-ipv6-access-list")
        ipv6_access_list_key = ET.SubElement(access_group, "ipv6-access-list")
        ipv6_access_list_key.text = kwargs.pop('ipv6_access_list')
        ip_direction_key = ET.SubElement(access_group, "ip-direction")
        ip_direction_key.text = kwargs.pop('ip_direction')
        traffic_type = ET.SubElement(access_group, "traffic-type")
        traffic_type.text = kwargs.pop('traffic_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_policy_route_map_ipv6_route_map_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        policy = ET.SubElement(ipv6, "policy", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        route_map = ET.SubElement(policy, "route-map")
        ipv6_route_map_name = ET.SubElement(route_map, "ipv6-route-map-name")
        ipv6_route_map_name.text = kwargs.pop('ipv6_route_map_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_vrrp_suppress_interface_ra(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        vrrp_suppress_interface_ra = ET.SubElement(ipv6_intf_cmds, "vrrp-suppress-interface-ra")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_managed_config_flag(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        managed_config_flag = ET.SubElement(nd, "managed-config-flag")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_other_config_flag(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        other_config_flag = ET.SubElement(nd, "other-config-flag")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_broadcast_mac_trap(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        broadcast_mac_trap = ET.SubElement(nd, "broadcast-mac-trap")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_ra_lifetime(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        ra_lifetime = ET.SubElement(nd, "ra-lifetime")
        ra_lifetime.text = kwargs.pop('ra_lifetime')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_reachable_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        reachable_time = ET.SubElement(nd, "reachable-time")
        reachable_time.text = kwargs.pop('reachable_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_mtu(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        mtu = ET.SubElement(nd, "mtu")
        mtu.text = kwargs.pop('mtu')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_retrans_timer(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        retrans_timer = ET.SubElement(nd, "retrans-timer")
        retrans_timer.text = kwargs.pop('retrans_timer')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_hoplimit(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        hoplimit = ET.SubElement(nd, "hoplimit")
        hoplimit.text = kwargs.pop('hoplimit')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_ns_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        ns_interval = ET.SubElement(nd, "ns-interval")
        ns_interval.text = kwargs.pop('ns_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_proxy(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        proxy = ET.SubElement(nd, "proxy")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_suppress_ra_suppress_ra_flag(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        suppress_ra = ET.SubElement(nd, "suppress-ra")
        suppress_ra_flag = ET.SubElement(suppress_ra, "suppress-ra-flag")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_suppress_ra_suppress_ra_mtu(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        suppress_ra = ET.SubElement(nd, "suppress-ra")
        suppress_ra_mtu = ET.SubElement(suppress_ra, "suppress-ra-mtu")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_suppress_ra_suppress_ra_all(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        suppress_ra = ET.SubElement(nd, "suppress-ra")
        suppress_ra_all = ET.SubElement(suppress_ra, "suppress-ra-all")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_ra_interval_max_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        ra_interval = ET.SubElement(nd, "ra-interval")
        max_interval = ET.SubElement(ra_interval, "max-interval")
        max_interval.text = kwargs.pop('max_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_ra_interval_min(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        ra_interval = ET.SubElement(nd, "ra-interval")
        min = ET.SubElement(ra_interval, "min")
        min.text = kwargs.pop('min')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_dad_attempts(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        dad = ET.SubElement(nd, "dad")
        attempts = ET.SubElement(dad, "attempts")
        attempts.text = kwargs.pop('attempts')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_dad_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        dad = ET.SubElement(nd, "dad")
        time = ET.SubElement(dad, "time")
        time.text = kwargs.pop('time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_nud_retry_base(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        nud = ET.SubElement(nd, "nud")
        retry = ET.SubElement(nud, "retry")
        base = ET.SubElement(retry, "base")
        base.text = kwargs.pop('base')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_nud_retry_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        nud = ET.SubElement(nd, "nud")
        retry = ET.SubElement(nud, "retry")
        interval = ET.SubElement(retry, "interval")
        interval.text = kwargs.pop('interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_nud_retry_max_attempts(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        nud = ET.SubElement(nd, "nud")
        retry = ET.SubElement(nud, "retry")
        max_attempts = ET.SubElement(retry, "max-attempts")
        max_attempts.text = kwargs.pop('max_attempts')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_cache_expire(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        cache = ET.SubElement(nd, "cache")
        expire = ET.SubElement(cache, "expire")
        expire.text = kwargs.pop('expire')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_prefix_prefix_ipv6_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        prefix = ET.SubElement(nd, "prefix")
        prefix_ipv6_address = ET.SubElement(prefix, "prefix-ipv6-address")
        prefix_ipv6_address.text = kwargs.pop('prefix_ipv6_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_prefix_lifetime_ch_valid_type_ca_no_advertise_no_advertise(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        prefix = ET.SubElement(nd, "prefix")
        prefix_ipv6_address_key = ET.SubElement(prefix, "prefix-ipv6-address")
        prefix_ipv6_address_key.text = kwargs.pop('prefix_ipv6_address')
        lifetime = ET.SubElement(prefix, "lifetime")
        ch_valid_type = ET.SubElement(lifetime, "ch-valid-type")
        ca_no_advertise = ET.SubElement(ch_valid_type, "ca-no-advertise")
        no_advertise = ET.SubElement(ca_no_advertise, "no-advertise")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_prefix_lifetime_ch_valid_type_ca_valid_lifetime_valid_lifetime(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        prefix = ET.SubElement(nd, "prefix")
        prefix_ipv6_address_key = ET.SubElement(prefix, "prefix-ipv6-address")
        prefix_ipv6_address_key.text = kwargs.pop('prefix_ipv6_address')
        lifetime = ET.SubElement(prefix, "lifetime")
        ch_valid_type = ET.SubElement(lifetime, "ch-valid-type")
        ca_valid_lifetime = ET.SubElement(ch_valid_type, "ca-valid-lifetime")
        valid_lifetime = ET.SubElement(ca_valid_lifetime, "valid-lifetime")
        valid_lifetime.text = kwargs.pop('valid_lifetime')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_prefix_lifetime_ch_valid_type_ca_valid_infinite_valid_infinite(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        prefix = ET.SubElement(nd, "prefix")
        prefix_ipv6_address_key = ET.SubElement(prefix, "prefix-ipv6-address")
        prefix_ipv6_address_key.text = kwargs.pop('prefix_ipv6_address')
        lifetime = ET.SubElement(prefix, "lifetime")
        ch_valid_type = ET.SubElement(lifetime, "ch-valid-type")
        ca_valid_infinite = ET.SubElement(ch_valid_type, "ca-valid-infinite")
        valid_infinite = ET.SubElement(ca_valid_infinite, "valid-infinite")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_prefix_lifetime_preferred_ch_preferred_type_ca_preferred_lifetime_preferred_lifetime(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        prefix = ET.SubElement(nd, "prefix")
        prefix_ipv6_address_key = ET.SubElement(prefix, "prefix-ipv6-address")
        prefix_ipv6_address_key.text = kwargs.pop('prefix_ipv6_address')
        lifetime = ET.SubElement(prefix, "lifetime")
        preferred = ET.SubElement(lifetime, "preferred")
        ch_preferred_type = ET.SubElement(preferred, "ch-preferred-type")
        ca_preferred_lifetime = ET.SubElement(ch_preferred_type, "ca-preferred-lifetime")
        preferred_lifetime = ET.SubElement(ca_preferred_lifetime, "preferred-lifetime")
        preferred_lifetime.text = kwargs.pop('preferred_lifetime')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_prefix_lifetime_preferred_ch_preferred_type_ca_preferred_infinite_preferred_infinite(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        prefix = ET.SubElement(nd, "prefix")
        prefix_ipv6_address_key = ET.SubElement(prefix, "prefix-ipv6-address")
        prefix_ipv6_address_key.text = kwargs.pop('prefix_ipv6_address')
        lifetime = ET.SubElement(prefix, "lifetime")
        preferred = ET.SubElement(lifetime, "preferred")
        ch_preferred_type = ET.SubElement(preferred, "ch-preferred-type")
        ca_preferred_infinite = ET.SubElement(ch_preferred_type, "ca-preferred-infinite")
        preferred_infinite = ET.SubElement(ca_preferred_infinite, "preferred-infinite")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_prefix_lifetime_preferred_prefix_flags_no_autoconfig(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        prefix = ET.SubElement(nd, "prefix")
        prefix_ipv6_address_key = ET.SubElement(prefix, "prefix-ipv6-address")
        prefix_ipv6_address_key.text = kwargs.pop('prefix_ipv6_address')
        lifetime = ET.SubElement(prefix, "lifetime")
        preferred = ET.SubElement(lifetime, "preferred")
        prefix_flags = ET.SubElement(preferred, "prefix-flags")
        no_autoconfig = ET.SubElement(prefix_flags, "no-autoconfig")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_prefix_lifetime_preferred_prefix_flags_no_onlink(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        prefix = ET.SubElement(nd, "prefix")
        prefix_ipv6_address_key = ET.SubElement(prefix, "prefix-ipv6-address")
        prefix_ipv6_address_key.text = kwargs.pop('prefix_ipv6_address')
        lifetime = ET.SubElement(prefix, "lifetime")
        preferred = ET.SubElement(lifetime, "preferred")
        prefix_flags = ET.SubElement(preferred, "prefix-flags")
        no_onlink = ET.SubElement(prefix_flags, "no-onlink")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_nd_prefix_lifetime_preferred_prefix_flags_off_link(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        nd = ET.SubElement(ipv6_intf_cmds, "nd")
        prefix = ET.SubElement(nd, "prefix")
        prefix_ipv6_address_key = ET.SubElement(prefix, "prefix-ipv6-address")
        prefix_ipv6_address_key.text = kwargs.pop('prefix_ipv6_address')
        lifetime = ET.SubElement(prefix, "lifetime")
        preferred = ET.SubElement(lifetime, "preferred")
        prefix_flags = ET.SubElement(preferred, "prefix-flags")
        off_link = ET.SubElement(prefix_flags, "off-link")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_neighbor_ipv6_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        neighbor = ET.SubElement(ipv6_intf_cmds, "neighbor")
        ipv6_address = ET.SubElement(neighbor, "ipv6-address")
        ipv6_address.text = kwargs.pop('ipv6_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_ipv6_nd_ra_ipv6_intf_cmds_neighbor_hardware_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        ipv6_nd_ra = ET.SubElement(ipv6, "ipv6-nd-ra", xmlns="urn:brocade.com:mgmt:brocade-ipv6-nd-ra")
        ipv6_intf_cmds = ET.SubElement(ipv6_nd_ra, "ipv6-intf-cmds")
        neighbor = ET.SubElement(ipv6_intf_cmds, "neighbor")
        ipv6_address_key = ET.SubElement(neighbor, "ipv6-address")
        ipv6_address_key.text = kwargs.pop('ipv6_address')
        hardware_address = ET.SubElement(neighbor, "hardware-address")
        hardware_address.text = kwargs.pop('hardware_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_ipv6_phy_intf_cmds_hop_by_hop_trap(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        ipv6_phy_intf_cmds = ET.SubElement(ipv6, "ipv6-phy-intf-cmds", xmlns="urn:brocade.com:mgmt:brocade-mld-snooping")
        hop_by_hop_trap = ET.SubElement(ipv6_phy_intf_cmds, "hop-by-hop-trap")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_interface_ospfv3_conf_interface_area(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        interface_area = ET.SubElement(interface_ospfv3_conf, "interface-area")
        interface_area.text = kwargs.pop('interface_area')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_interface_ospfv3_conf_active(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        active = ET.SubElement(interface_ospfv3_conf, "active")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_interface_ospfv3_conf_passive(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        passive = ET.SubElement(interface_ospfv3_conf, "passive")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_interface_ospfv3_conf_bfd_bfd_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        bfd = ET.SubElement(interface_ospfv3_conf, "bfd")
        bfd_enable = ET.SubElement(bfd, "bfd-enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_interface_ospfv3_conf_cost(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        cost = ET.SubElement(interface_ospfv3_conf, "cost")
        cost.text = kwargs.pop('cost')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_interface_ospfv3_conf_instance(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        instance = ET.SubElement(interface_ospfv3_conf, "instance")
        instance.text = kwargs.pop('instance')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_interface_ospfv3_conf_mtu_ignore(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        mtu_ignore = ET.SubElement(interface_ospfv3_conf, "mtu-ignore")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_interface_ospfv3_conf_network(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        network = ET.SubElement(interface_ospfv3_conf, "network")
        network.text = kwargs.pop('network')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_interface_ospfv3_conf_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        priority = ET.SubElement(interface_ospfv3_conf, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_interface_ospfv3_conf_suppress_linklsa(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        suppress_linklsa = ET.SubElement(interface_ospfv3_conf, "suppress-linklsa")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_spi(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        spi = ET.SubElement(ipsec_auth_key_config, "spi")
        spi.text = kwargs.pop('spi')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_ah_algorithm_ah(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_ah_algorithm = ET.SubElement(ch_algorithm, "ca-ah-algorithm")
        ah = ET.SubElement(ca_ah_algorithm, "ah")
        ah.text = kwargs.pop('ah')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_ah_algorithm_ah_no_encrypt(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_ah_algorithm = ET.SubElement(ch_algorithm, "ca-ah-algorithm")
        ah_no_encrypt = ET.SubElement(ca_ah_algorithm, "ah-no-encrypt")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_ah_algorithm_ah_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_ah_algorithm = ET.SubElement(ch_algorithm, "ca-ah-algorithm")
        ah_key = ET.SubElement(ca_ah_algorithm, "ah-key")
        ah_key.text = kwargs.pop('ah_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp = ET.SubElement(ca_esp_algorithm, "esp")
        esp.text = kwargs.pop('esp')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp_no_encrypt(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp_no_encrypt = ET.SubElement(ca_esp_algorithm, "esp-no-encrypt")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp_key = ET.SubElement(ca_esp_algorithm, "esp-key")
        esp_key.text = kwargs.pop('esp_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp_auth(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp_auth = ET.SubElement(ca_esp_algorithm, "esp-auth")
        esp_auth.text = kwargs.pop('esp_auth')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp_auth_no_encrypt(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp_auth_no_encrypt = ET.SubElement(ca_esp_algorithm, "esp-auth-no-encrypt")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_auth_key_config_ch_algorithm_ca_esp_algorithm_esp_auth_key(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec_auth_key_config = ET.SubElement(authentication, "ipsec-auth-key-config")
        ch_algorithm = ET.SubElement(ipsec_auth_key_config, "ch-algorithm")
        ca_esp_algorithm = ET.SubElement(ch_algorithm, "ca-esp-algorithm")
        esp_auth_key = ET.SubElement(ca_esp_algorithm, "esp-auth-key")
        esp_auth_key.text = kwargs.pop('esp_auth_key')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_ipsec_authentication_disable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec = ET.SubElement(authentication, "ipsec")
        ipsec_authentication_disable = ET.SubElement(ipsec, "ipsec-authentication-disable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_interface_ospfv3_conf_authentication_ipsec_ifc_key_add_remove_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        authentication = ET.SubElement(interface_ospfv3_conf, "authentication")
        ipsec = ET.SubElement(authentication, "ipsec")
        ifc_key_add_remove_interval = ET.SubElement(ipsec, "ifc-key-add-remove-interval")
        ifc_key_add_remove_interval.text = kwargs.pop('ifc_key_add_remove_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_interface_ospfv3_conf_link_interval_properties_hello_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        link_interval_properties = ET.SubElement(interface_ospfv3_conf, "link-interval-properties")
        hello_interval = ET.SubElement(link_interval_properties, "hello-interval")
        hello_interval.text = kwargs.pop('hello_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_interface_ospfv3_conf_link_interval_properties_dead_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        link_interval_properties = ET.SubElement(interface_ospfv3_conf, "link-interval-properties")
        dead_interval = ET.SubElement(link_interval_properties, "dead-interval")
        dead_interval.text = kwargs.pop('dead_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_interface_ospfv3_conf_link_interval_properties_hello_jitter(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        link_interval_properties = ET.SubElement(interface_ospfv3_conf, "link-interval-properties")
        hello_jitter = ET.SubElement(link_interval_properties, "hello-jitter")
        hello_jitter.text = kwargs.pop('hello_jitter')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_interface_ospfv3_conf_link_interval_properties_retransmit_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        link_interval_properties = ET.SubElement(interface_ospfv3_conf, "link-interval-properties")
        retransmit_interval = ET.SubElement(link_interval_properties, "retransmit-interval")
        retransmit_interval.text = kwargs.pop('retransmit_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ipv6_interface_ospfv3_conf_link_interval_properties_transmit_delay(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(hundredgigabitethernet, "ipv6")
        interface_ospfv3_conf = ET.SubElement(ipv6, "interface-ospfv3-conf", xmlns="urn:brocade.com:mgmt:brocade-ospfv3")
        link_interval_properties = ET.SubElement(interface_ospfv3_conf, "link-interval-properties")
        transmit_delay = ET.SubElement(link_interval_properties, "transmit-delay")
        transmit_delay.text = kwargs.pop('transmit_delay')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_track_track_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        track = ET.SubElement(hundredgigabitethernet, "track")
        track_enable = ET.SubElement(track, "track_enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_track_min_link(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        track = ET.SubElement(hundredgigabitethernet, "track")
        min_link = ET.SubElement(track, "min-link")
        min_link.text = kwargs.pop('min_link')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_track_interface_track_interface_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        track = ET.SubElement(hundredgigabitethernet, "track")
        interface = ET.SubElement(track, "interface")
        track_interface_name_key = ET.SubElement(interface, "track-interface-name")
        track_interface_name_key.text = kwargs.pop('track_interface_name')
        track_interface_type = ET.SubElement(interface, "track-interface-type")
        track_interface_type.text = kwargs.pop('track_interface_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_track_interface_track_interface_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        track = ET.SubElement(hundredgigabitethernet, "track")
        interface = ET.SubElement(track, "interface")
        track_interface_type_key = ET.SubElement(interface, "track-interface-type")
        track_interface_type_key.text = kwargs.pop('track_interface_type')
        track_interface_name = ET.SubElement(interface, "track-interface-name")
        track_interface_name.text = kwargs.pop('track_interface_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_track_remove_remove_all_track_interfaces(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        track = ET.SubElement(hundredgigabitethernet, "track")
        remove = ET.SubElement(track, "remove")
        remove_all_track_interfaces = ET.SubElement(remove, "remove-all-track-interfaces")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_bfd_interval_min_tx(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        bfd = ET.SubElement(hundredgigabitethernet, "bfd")
        interval = ET.SubElement(bfd, "interval")
        min_tx = ET.SubElement(interval, "min-tx")
        min_tx.text = kwargs.pop('min_tx')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_bfd_interval_min_rx(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        bfd = ET.SubElement(hundredgigabitethernet, "bfd")
        interval = ET.SubElement(bfd, "interval")
        min_rx = ET.SubElement(interval, "min-rx")
        min_rx.text = kwargs.pop('min_rx')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_bfd_interval_multiplier(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        bfd = ET.SubElement(hundredgigabitethernet, "bfd")
        interval = ET.SubElement(bfd, "interval")
        multiplier = ET.SubElement(interval, "multiplier")
        multiplier.text = kwargs.pop('multiplier')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_bfd_bfd_shutdown(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        bfd = ET.SubElement(hundredgigabitethernet, "bfd")
        bfd_shutdown = ET.SubElement(bfd, "bfd-shutdown")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_edge_loop_detection_eldprio(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        edge_loop_detection = ET.SubElement(hundredgigabitethernet, "edge-loop-detection")
        eldprio = ET.SubElement(edge_loop_detection, "eldprio")
        eldprio.text = kwargs.pop('eldprio')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_edge_loop_detection_eldvlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        edge_loop_detection = ET.SubElement(hundredgigabitethernet, "edge-loop-detection")
        eldvlan = ET.SubElement(edge_loop_detection, "eldvlan")
        eldvlan.text = kwargs.pop('eldvlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_mac_access_group_mac_access_list(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        mac = ET.SubElement(hundredgigabitethernet, "mac", xmlns="urn:brocade.com:mgmt:brocade-mac-access-list")
        access_group = ET.SubElement(mac, "access-group")
        mac_direction_key = ET.SubElement(access_group, "mac-direction")
        mac_direction_key.text = kwargs.pop('mac_direction')
        mac_access_list = ET.SubElement(access_group, "mac-access-list")
        mac_access_list.text = kwargs.pop('mac_access_list')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_mac_access_group_mac_direction(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        mac = ET.SubElement(hundredgigabitethernet, "mac", xmlns="urn:brocade.com:mgmt:brocade-mac-access-list")
        access_group = ET.SubElement(mac, "access-group")
        mac_access_list_key = ET.SubElement(access_group, "mac-access-list")
        mac_access_list_key.text = kwargs.pop('mac_access_list')
        mac_direction = ET.SubElement(access_group, "mac-direction")
        mac_direction.text = kwargs.pop('mac_direction')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_mac_access_group_traffic_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        mac = ET.SubElement(hundredgigabitethernet, "mac", xmlns="urn:brocade.com:mgmt:brocade-mac-access-list")
        access_group = ET.SubElement(mac, "access-group")
        mac_access_list_key = ET.SubElement(access_group, "mac-access-list")
        mac_access_list_key.text = kwargs.pop('mac_access_list')
        mac_direction_key = ET.SubElement(access_group, "mac-direction")
        mac_direction_key.text = kwargs.pop('mac_direction')
        traffic_type = ET.SubElement(access_group, "traffic-type")
        traffic_type.text = kwargs.pop('traffic_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_vrrp_vrid(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(hundredgigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        vrid = ET.SubElement(vrrp, "vrid")
        vrid.text = kwargs.pop('vrid')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_vrrp_version(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(hundredgigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version = ET.SubElement(vrrp, "version")
        version.text = kwargs.pop('version')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_vrrp_use_v2_checksum(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(hundredgigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        use_v2_checksum = ET.SubElement(vrrp, "use-v2-checksum")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_vrrp_virtual_ip_virtual_ipaddr(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(hundredgigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        virtual_ip = ET.SubElement(vrrp, "virtual-ip")
        virtual_ipaddr = ET.SubElement(virtual_ip, "virtual-ipaddr")
        virtual_ipaddr.text = kwargs.pop('virtual_ipaddr')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_vrrp_track_interface_interface_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(hundredgigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        track = ET.SubElement(vrrp, "track")
        interface = ET.SubElement(track, "interface")
        interface_name_key = ET.SubElement(interface, "interface-name")
        interface_name_key.text = kwargs.pop('interface_name')
        interface_type = ET.SubElement(interface, "interface-type")
        interface_type.text = kwargs.pop('interface_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_vrrp_track_interface_interface_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(hundredgigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        track = ET.SubElement(vrrp, "track")
        interface = ET.SubElement(track, "interface")
        interface_type_key = ET.SubElement(interface, "interface-type")
        interface_type_key.text = kwargs.pop('interface_type')
        interface_name = ET.SubElement(interface, "interface-name")
        interface_name.text = kwargs.pop('interface_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_vrrp_track_interface_track_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(hundredgigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        track = ET.SubElement(vrrp, "track")
        interface = ET.SubElement(track, "interface")
        interface_type_key = ET.SubElement(interface, "interface-type")
        interface_type_key.text = kwargs.pop('interface_type')
        interface_name_key = ET.SubElement(interface, "interface-name")
        interface_name_key.text = kwargs.pop('interface_name')
        track_priority = ET.SubElement(interface, "track-priority")
        track_priority.text = kwargs.pop('track_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_vrrp_advertisement_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(hundredgigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        advertisement_interval = ET.SubElement(vrrp, "advertisement-interval")
        advertisement_interval.text = kwargs.pop('advertisement_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_vrrp_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(hundredgigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        enable = ET.SubElement(vrrp, "enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_vrrp_hold_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(hundredgigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        hold_time = ET.SubElement(vrrp, "hold-time")
        hold_time.text = kwargs.pop('hold_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_vrrp_preempt_mode(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(hundredgigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        preempt_mode = ET.SubElement(vrrp, "preempt-mode")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_vrrp_arp_unicast_request_receive(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(hundredgigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        arp = ET.SubElement(vrrp, "arp")
        unicast_request = ET.SubElement(arp, "unicast-request")
        receive = ET.SubElement(unicast_request, "receive")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_vrrp_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(hundredgigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        priority = ET.SubElement(vrrp, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_vrrp_description(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vrrp = ET.SubElement(hundredgigabitethernet, "vrrp", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        description = ET.SubElement(vrrp, "description")
        description.text = kwargs.pop('description')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_fabric_fabric_isl_fabric_isl_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        fabric = ET.SubElement(hundredgigabitethernet, "fabric", xmlns="urn:brocade.com:mgmt:brocade-fcoe")
        fabric_isl = ET.SubElement(fabric, "fabric-isl")
        fabric_isl_enable = ET.SubElement(fabric_isl, "fabric-isl-enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_fabric_fabric_trunk_fabric_trunk_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        fabric = ET.SubElement(hundredgigabitethernet, "fabric", xmlns="urn:brocade.com:mgmt:brocade-fcoe")
        fabric_trunk = ET.SubElement(fabric, "fabric-trunk")
        fabric_trunk_enable = ET.SubElement(fabric_trunk, "fabric-trunk-enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_fabric_neighbor_discovery_disable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        fabric = ET.SubElement(hundredgigabitethernet, "fabric", xmlns="urn:brocade.com:mgmt:brocade-fcoe")
        neighbor_discovery = ET.SubElement(fabric, "neighbor-discovery")
        disable = ET.SubElement(neighbor_discovery, "disable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_fabric_fabric_dport_fabric_dport_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        fabric = ET.SubElement(hundredgigabitethernet, "fabric", xmlns="urn:brocade.com:mgmt:brocade-fcoe")
        fabric_dport = ET.SubElement(fabric, "fabric-dport")
        fabric_dport_enable = ET.SubElement(fabric_dport, "fabric-dport-enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_fcoeport_fcoeport_map(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        fcoeport = ET.SubElement(hundredgigabitethernet, "fcoeport", xmlns="urn:brocade.com:mgmt:brocade-fcoe")
        fcoeport_map = ET.SubElement(fcoeport, "fcoeport-map")
        fcoeport_map.text = kwargs.pop('fcoeport_map')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_openflow_interface_cfg_logical_instance_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        openflow_interface_cfg = ET.SubElement(hundredgigabitethernet, "openflow-interface-cfg", xmlns="urn:brocade.com:mgmt:brocade-openflow")
        logical_instance_id = ET.SubElement(openflow_interface_cfg, "logical-instance-id")
        logical_instance_id.text = kwargs.pop('logical_instance_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_openflow_interface_cfg_openflow_enable_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        openflow_interface_cfg = ET.SubElement(hundredgigabitethernet, "openflow-interface-cfg", xmlns="urn:brocade.com:mgmt:brocade-openflow")
        openflow_enable = ET.SubElement(openflow_interface_cfg, "openflow-enable")
        enable = ET.SubElement(openflow_enable, "enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_openflow_interface_cfg_openflow_enable_match_profile(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        openflow_interface_cfg = ET.SubElement(hundredgigabitethernet, "openflow-interface-cfg", xmlns="urn:brocade.com:mgmt:brocade-openflow")
        openflow_enable = ET.SubElement(openflow_interface_cfg, "openflow-enable")
        match_profile = ET.SubElement(openflow_enable, "match-profile")
        match_profile.text = kwargs.pop('match_profile')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_sflow_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        sflow = ET.SubElement(hundredgigabitethernet, "sflow", xmlns="urn:brocade.com:mgmt:brocade-sflow")
        enable = ET.SubElement(sflow, "enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_sflow_polling_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        sflow = ET.SubElement(hundredgigabitethernet, "sflow", xmlns="urn:brocade.com:mgmt:brocade-sflow")
        polling_interval = ET.SubElement(sflow, "polling-interval")
        polling_interval.text = kwargs.pop('polling_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_sflow_sample_rate(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        sflow = ET.SubElement(hundredgigabitethernet, "sflow", xmlns="urn:brocade.com:mgmt:brocade-sflow")
        sample_rate = ET.SubElement(sflow, "sample-rate")
        sample_rate.text = kwargs.pop('sample_rate')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_acl_interface_ip_access_group_ip_access_list(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip_acl_interface = ET.SubElement(hundredgigabitethernet, "ip-acl-interface", xmlns="urn:brocade.com:mgmt:brocade-ip-access-list")
        ip = ET.SubElement(ip_acl_interface, "ip")
        access_group = ET.SubElement(ip, "access-group")
        ip_direction_key = ET.SubElement(access_group, "ip-direction")
        ip_direction_key.text = kwargs.pop('ip_direction')
        ip_access_list = ET.SubElement(access_group, "ip-access-list")
        ip_access_list.text = kwargs.pop('ip_access_list')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_acl_interface_ip_access_group_ip_direction(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip_acl_interface = ET.SubElement(hundredgigabitethernet, "ip-acl-interface", xmlns="urn:brocade.com:mgmt:brocade-ip-access-list")
        ip = ET.SubElement(ip_acl_interface, "ip")
        access_group = ET.SubElement(ip, "access-group")
        ip_access_list_key = ET.SubElement(access_group, "ip-access-list")
        ip_access_list_key.text = kwargs.pop('ip_access_list')
        ip_direction = ET.SubElement(access_group, "ip-direction")
        ip_direction.text = kwargs.pop('ip_direction')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_acl_interface_ip_access_group_traffic_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip_acl_interface = ET.SubElement(hundredgigabitethernet, "ip-acl-interface", xmlns="urn:brocade.com:mgmt:brocade-ip-access-list")
        ip = ET.SubElement(ip_acl_interface, "ip")
        access_group = ET.SubElement(ip, "access-group")
        ip_access_list_key = ET.SubElement(access_group, "ip-access-list")
        ip_access_list_key.text = kwargs.pop('ip_access_list')
        ip_direction_key = ET.SubElement(access_group, "ip-direction")
        ip_direction_key.text = kwargs.pop('ip_direction')
        traffic_type = ET.SubElement(access_group, "traffic-type")
        traffic_type.text = kwargs.pop('traffic_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_storm_control_ingress_protocol_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        storm_control = ET.SubElement(hundredgigabitethernet, "storm-control", xmlns="urn:brocade.com:mgmt:brocade-bum-storm-control")
        ingress = ET.SubElement(storm_control, "ingress")
        protocol_type = ET.SubElement(ingress, "protocol-type")
        protocol_type.text = kwargs.pop('protocol_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_storm_control_ingress_rate_format(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        storm_control = ET.SubElement(hundredgigabitethernet, "storm-control", xmlns="urn:brocade.com:mgmt:brocade-bum-storm-control")
        ingress = ET.SubElement(storm_control, "ingress")
        protocol_type_key = ET.SubElement(ingress, "protocol-type")
        protocol_type_key.text = kwargs.pop('protocol_type')
        rate_format = ET.SubElement(ingress, "rate-format")
        rate_format.text = kwargs.pop('rate_format')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_storm_control_ingress_rate_bps(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        storm_control = ET.SubElement(hundredgigabitethernet, "storm-control", xmlns="urn:brocade.com:mgmt:brocade-bum-storm-control")
        ingress = ET.SubElement(storm_control, "ingress")
        protocol_type_key = ET.SubElement(ingress, "protocol-type")
        protocol_type_key.text = kwargs.pop('protocol_type')
        rate_bps = ET.SubElement(ingress, "rate-bps")
        rate_bps.text = kwargs.pop('rate_bps')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_storm_control_ingress_rate_percent(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        storm_control = ET.SubElement(hundredgigabitethernet, "storm-control", xmlns="urn:brocade.com:mgmt:brocade-bum-storm-control")
        ingress = ET.SubElement(storm_control, "ingress")
        protocol_type_key = ET.SubElement(ingress, "protocol-type")
        protocol_type_key.text = kwargs.pop('protocol_type')
        rate_percent = ET.SubElement(ingress, "rate-percent")
        rate_percent.text = kwargs.pop('rate_percent')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_storm_control_ingress_bum_action(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        storm_control = ET.SubElement(hundredgigabitethernet, "storm-control", xmlns="urn:brocade.com:mgmt:brocade-bum-storm-control")
        ingress = ET.SubElement(storm_control, "ingress")
        protocol_type_key = ET.SubElement(ingress, "protocol-type")
        protocol_type_key.text = kwargs.pop('protocol_type')
        bum_action = ET.SubElement(ingress, "bum-action")
        bum_action.text = kwargs.pop('bum_action')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_dot1x_authentication(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        dot1x = ET.SubElement(hundredgigabitethernet, "dot1x", xmlns="urn:brocade.com:mgmt:brocade-dot1x")
        authentication = ET.SubElement(dot1x, "authentication")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_dot1x_port_control(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        dot1x = ET.SubElement(hundredgigabitethernet, "dot1x", xmlns="urn:brocade.com:mgmt:brocade-dot1x")
        port_control = ET.SubElement(dot1x, "port-control")
        port_control.text = kwargs.pop('port_control')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_dot1x_protocol_version(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        dot1x = ET.SubElement(hundredgigabitethernet, "dot1x", xmlns="urn:brocade.com:mgmt:brocade-dot1x")
        protocol_version = ET.SubElement(dot1x, "protocol-version")
        protocol_version.text = kwargs.pop('protocol_version')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_dot1x_quiet_period(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        dot1x = ET.SubElement(hundredgigabitethernet, "dot1x", xmlns="urn:brocade.com:mgmt:brocade-dot1x")
        quiet_period = ET.SubElement(dot1x, "quiet-period")
        quiet_period.text = kwargs.pop('quiet_period')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_dot1x_reauthMax(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        dot1x = ET.SubElement(hundredgigabitethernet, "dot1x", xmlns="urn:brocade.com:mgmt:brocade-dot1x")
        reauthMax = ET.SubElement(dot1x, "reauthMax")
        reauthMax.text = kwargs.pop('reauthMax')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_dot1x_reauthentication(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        dot1x = ET.SubElement(hundredgigabitethernet, "dot1x", xmlns="urn:brocade.com:mgmt:brocade-dot1x")
        reauthentication = ET.SubElement(dot1x, "reauthentication")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_dot1x_timeout_re_authperiod(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        dot1x = ET.SubElement(hundredgigabitethernet, "dot1x", xmlns="urn:brocade.com:mgmt:brocade-dot1x")
        timeout = ET.SubElement(dot1x, "timeout")
        re_authperiod = ET.SubElement(timeout, "re-authperiod")
        re_authperiod.text = kwargs.pop('re_authperiod')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_dot1x_timeout_server_timeout(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        dot1x = ET.SubElement(hundredgigabitethernet, "dot1x", xmlns="urn:brocade.com:mgmt:brocade-dot1x")
        timeout = ET.SubElement(dot1x, "timeout")
        server_timeout = ET.SubElement(timeout, "server-timeout")
        server_timeout.text = kwargs.pop('server_timeout')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_dot1x_timeout_supp_timeout(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        dot1x = ET.SubElement(hundredgigabitethernet, "dot1x", xmlns="urn:brocade.com:mgmt:brocade-dot1x")
        timeout = ET.SubElement(dot1x, "timeout")
        supp_timeout = ET.SubElement(timeout, "supp-timeout")
        supp_timeout.text = kwargs.pop('supp_timeout')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_dot1x_timeout_tx_period(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        dot1x = ET.SubElement(hundredgigabitethernet, "dot1x", xmlns="urn:brocade.com:mgmt:brocade-dot1x")
        timeout = ET.SubElement(dot1x, "timeout")
        tx_period = ET.SubElement(timeout, "tx-period")
        tx_period.text = kwargs.pop('tx_period')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_ip_pbr_interface_ip_policy_route_map_route_map_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        ip_pbr_interface = ET.SubElement(hundredgigabitethernet, "ip-pbr-interface", xmlns="urn:brocade.com:mgmt:brocade-ip-policy")
        ip = ET.SubElement(ip_pbr_interface, "ip")
        policy = ET.SubElement(ip, "policy")
        route_map = ET.SubElement(policy, "route-map")
        route_map_name = ET.SubElement(route_map, "route-map-name")
        route_map_name.text = kwargs.pop('route_map_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_lacp_timeout(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        lacp = ET.SubElement(hundredgigabitethernet, "lacp", xmlns="urn:brocade.com:mgmt:brocade-lacp")
        timeout = ET.SubElement(lacp, "timeout")
        timeout.text = kwargs.pop('timeout')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_lacp_std_port_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        lacp = ET.SubElement(hundredgigabitethernet, "lacp", xmlns="urn:brocade.com:mgmt:brocade-lacp")
        std_port_priority = ET.SubElement(lacp, "std_port-priority")
        std_port_priority.text = kwargs.pop('std_port_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_lacp_default_up(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        lacp = ET.SubElement(hundredgigabitethernet, "lacp", xmlns="urn:brocade.com:mgmt:brocade-lacp")
        default_up = ET.SubElement(lacp, "default-up")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_lldp_cee_lldp_cee_on_off(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        lldp = ET.SubElement(hundredgigabitethernet, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        cee = ET.SubElement(lldp, "cee")
        lldp_cee_on_off = ET.SubElement(cee, "lldp-cee-on-off")
        lldp_cee_on_off.text = kwargs.pop('lldp_cee_on_off')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_lldp_dcbx_version(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        lldp = ET.SubElement(hundredgigabitethernet, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        dcbx_version = ET.SubElement(lldp, "dcbx-version")
        dcbx_version.text = kwargs.pop('dcbx_version')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_lldp_disable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        lldp = ET.SubElement(hundredgigabitethernet, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        disable = ET.SubElement(lldp, "disable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_lldp_iscsi_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        lldp = ET.SubElement(hundredgigabitethernet, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        iscsi_priority = ET.SubElement(lldp, "iscsi-priority")
        iscsi_priority.text = kwargs.pop('iscsi_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_lldp_profile(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        lldp = ET.SubElement(hundredgigabitethernet, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        profile = ET.SubElement(lldp, "profile")
        profile.text = kwargs.pop('profile')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_connectivity_deviceconnectivity(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        connectivity = ET.SubElement(hundredgigabitethernet, "connectivity", xmlns="urn:brocade.com:mgmt:brocade-maps")
        deviceconnectivity = ET.SubElement(connectivity, "deviceconnectivity")
        deviceconnectivity.text = kwargs.pop('deviceconnectivity')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_service_policy_in_cg(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        service_policy = ET.SubElement(hundredgigabitethernet, "service-policy", xmlns="urn:brocade.com:mgmt:brocade-policer")
        in_cg = ET.SubElement(service_policy, "in")
        in_cg.text = kwargs.pop('in_cg')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_service_policy_out(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        service_policy = ET.SubElement(hundredgigabitethernet, "service-policy", xmlns="urn:brocade.com:mgmt:brocade-policer")
        out = ET.SubElement(service_policy, "out")
        out.text = kwargs.pop('out')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_port_profile_port(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        port_profile_port = ET.SubElement(hundredgigabitethernet, "port-profile-port", xmlns="urn:brocade.com:mgmt:brocade-port-profile")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_port_profile_to_interface_associations_port_profile_port_port_to_port_profile_domain_association_profile_domain_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        port_profile_to_interface_associations = ET.SubElement(hundredgigabitethernet, "port-profile-to-interface-associations", xmlns="urn:brocade.com:mgmt:brocade-port-profile")
        port_profile_port = ET.SubElement(port_profile_to_interface_associations, "port-profile-port")
        port_to_port_profile_domain_association = ET.SubElement(port_profile_port, "port-to-port-profile-domain-association")
        profile_domain_name = ET.SubElement(port_to_port_profile_domain_association, "profile-domain-name")
        profile_domain_name.text = kwargs.pop('profile_domain_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_port_profile_to_interface_associations_port_profile_port_port_to_port_profile_associations_port_to_port_profile_association(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        port_profile_to_interface_associations = ET.SubElement(hundredgigabitethernet, "port-profile-to-interface-associations", xmlns="urn:brocade.com:mgmt:brocade-port-profile")
        port_profile_port = ET.SubElement(port_profile_to_interface_associations, "port-profile-port")
        port_to_port_profile_associations = ET.SubElement(port_profile_port, "port-to-port-profile-associations")
        port_to_port_profile_association = ET.SubElement(port_to_port_profile_associations, "port-to-port-profile-association")
        port_to_port_profile_association.text = kwargs.pop('port_to_port_profile_association')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_priority_tag_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        priority_tag_enable = ET.SubElement(hundredgigabitethernet, "priority-tag-enable", xmlns="urn:brocade.com:mgmt:brocade-qos")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_qos_default_cos(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(hundredgigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        default_cos = ET.SubElement(qos, "default-cos")
        default_cos.text = kwargs.pop('default_cos')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_qos_trust_trust_cos(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(hundredgigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        trust = ET.SubElement(qos, "trust")
        trust_cos = ET.SubElement(trust, "trust-cos")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_qos_trust_trust_dscp(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(hundredgigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        trust = ET.SubElement(qos, "trust")
        trust_dscp = ET.SubElement(trust, "trust-dscp")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_qos_cos_mutation(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(hundredgigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        cos_mutation = ET.SubElement(qos, "cos-mutation")
        cos_mutation.text = kwargs.pop('cos_mutation')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_qos_cos_traffic_class(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(hundredgigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        cos_traffic_class = ET.SubElement(qos, "cos-traffic-class")
        cos_traffic_class.text = kwargs.pop('cos_traffic_class')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_qos_dscp_mutation(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(hundredgigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        dscp_mutation = ET.SubElement(qos, "dscp-mutation")
        dscp_mutation.text = kwargs.pop('dscp_mutation')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_qos_dscp_traffic_class(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(hundredgigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        dscp_traffic_class = ET.SubElement(qos, "dscp-traffic-class")
        dscp_traffic_class.text = kwargs.pop('dscp_traffic_class')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_qos_dscp_cos(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(hundredgigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        dscp_cos = ET.SubElement(qos, "dscp-cos")
        dscp_cos.text = kwargs.pop('dscp_cos')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_qos_random_detect_traffic_class_red_tc_value(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(hundredgigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        random_detect = ET.SubElement(qos, "random-detect")
        traffic_class = ET.SubElement(random_detect, "traffic-class")
        red_tc_value = ET.SubElement(traffic_class, "red-tc-value")
        red_tc_value.text = kwargs.pop('red_tc_value')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_qos_random_detect_traffic_class_red_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(hundredgigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        random_detect = ET.SubElement(qos, "random-detect")
        traffic_class = ET.SubElement(random_detect, "traffic-class")
        red_tc_value_key = ET.SubElement(traffic_class, "red-tc-value")
        red_tc_value_key.text = kwargs.pop('red_tc_value')
        red_enable = ET.SubElement(traffic_class, "red-enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_qos_random_detect_traffic_class_red_profile_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(hundredgigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        random_detect = ET.SubElement(qos, "random-detect")
        traffic_class = ET.SubElement(random_detect, "traffic-class")
        red_tc_value_key = ET.SubElement(traffic_class, "red-tc-value")
        red_tc_value_key.text = kwargs.pop('red_tc_value')
        red_profile_id = ET.SubElement(traffic_class, "red-profile-id")
        red_profile_id.text = kwargs.pop('red_profile_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_qos_drop_monitor_drop_monitor_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(hundredgigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        drop_monitor = ET.SubElement(qos, "drop-monitor")
        drop_monitor_enable = ET.SubElement(drop_monitor, "drop-monitor-enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_qos_flowcontrol_link_level_flowcontrol_flowcontrol_tx(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(hundredgigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        flowcontrol = ET.SubElement(qos, "flowcontrol")
        link_level_flowcontrol = ET.SubElement(flowcontrol, "link-level-flowcontrol")
        flowcontrol_tx = ET.SubElement(link_level_flowcontrol, "flowcontrol-tx")
        flowcontrol_tx.text = kwargs.pop('flowcontrol_tx')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_qos_flowcontrol_link_level_flowcontrol_flowcontrol_rx(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(hundredgigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        flowcontrol = ET.SubElement(qos, "flowcontrol")
        link_level_flowcontrol = ET.SubElement(flowcontrol, "link-level-flowcontrol")
        flowcontrol_rx = ET.SubElement(link_level_flowcontrol, "flowcontrol-rx")
        flowcontrol_rx.text = kwargs.pop('flowcontrol_rx')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_qos_flowcontrol_pfc_pfc_cos(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(hundredgigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        flowcontrol = ET.SubElement(qos, "flowcontrol")
        pfc = ET.SubElement(flowcontrol, "pfc")
        pfc_cos = ET.SubElement(pfc, "pfc-cos")
        pfc_cos.text = kwargs.pop('pfc_cos')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_qos_flowcontrol_pfc_pfc_flowcontrol_tx(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(hundredgigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        flowcontrol = ET.SubElement(qos, "flowcontrol")
        pfc = ET.SubElement(flowcontrol, "pfc")
        pfc_cos_key = ET.SubElement(pfc, "pfc-cos")
        pfc_cos_key.text = kwargs.pop('pfc_cos')
        pfc_flowcontrol_tx = ET.SubElement(pfc, "pfc-flowcontrol-tx")
        pfc_flowcontrol_tx.text = kwargs.pop('pfc_flowcontrol_tx')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_qos_flowcontrol_pfc_pfc_flowcontrol_rx(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(hundredgigabitethernet, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        flowcontrol = ET.SubElement(qos, "flowcontrol")
        pfc = ET.SubElement(flowcontrol, "pfc")
        pfc_cos_key = ET.SubElement(pfc, "pfc-cos")
        pfc_cos_key.text = kwargs.pop('pfc_cos')
        pfc_flowcontrol_rx = ET.SubElement(pfc, "pfc-flowcontrol-rx")
        pfc_flowcontrol_rx.text = kwargs.pop('pfc_flowcontrol_rx')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_rmon_collection_ether_stats_entry_ether_stats_index(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        rmon = ET.SubElement(hundredgigabitethernet, "rmon", xmlns="urn:brocade.com:mgmt:brocade-rmon")
        collection = ET.SubElement(rmon, "collection")
        ether_stats_entry = ET.SubElement(collection, "ether-stats-entry")
        ether_stats_index = ET.SubElement(ether_stats_entry, "ether-stats-index")
        ether_stats_index.text = kwargs.pop('ether_stats_index')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_rmon_collection_ether_stats_entry_ether_stats_owner(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        rmon = ET.SubElement(hundredgigabitethernet, "rmon", xmlns="urn:brocade.com:mgmt:brocade-rmon")
        collection = ET.SubElement(rmon, "collection")
        ether_stats_entry = ET.SubElement(collection, "ether-stats-entry")
        ether_stats_index_key = ET.SubElement(ether_stats_entry, "ether-stats-index")
        ether_stats_index_key.text = kwargs.pop('ether_stats_index')
        ether_stats_owner = ET.SubElement(ether_stats_entry, "ether-stats-owner")
        ether_stats_owner.text = kwargs.pop('ether_stats_owner')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_rmon_collection_history_control_entry_history_control_index(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        rmon = ET.SubElement(hundredgigabitethernet, "rmon", xmlns="urn:brocade.com:mgmt:brocade-rmon")
        collection = ET.SubElement(rmon, "collection")
        history_control_entry = ET.SubElement(collection, "history-control-entry")
        history_control_index = ET.SubElement(history_control_entry, "history-control-index")
        history_control_index.text = kwargs.pop('history_control_index')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_rmon_collection_history_control_entry_history_control_buckets_requested(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        rmon = ET.SubElement(hundredgigabitethernet, "rmon", xmlns="urn:brocade.com:mgmt:brocade-rmon")
        collection = ET.SubElement(rmon, "collection")
        history_control_entry = ET.SubElement(collection, "history-control-entry")
        history_control_index_key = ET.SubElement(history_control_entry, "history-control-index")
        history_control_index_key.text = kwargs.pop('history_control_index')
        history_control_buckets_requested = ET.SubElement(history_control_entry, "history-control-buckets-requested")
        history_control_buckets_requested.text = kwargs.pop('history_control_buckets_requested')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_rmon_collection_history_control_entry_history_control_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        rmon = ET.SubElement(hundredgigabitethernet, "rmon", xmlns="urn:brocade.com:mgmt:brocade-rmon")
        collection = ET.SubElement(rmon, "collection")
        history_control_entry = ET.SubElement(collection, "history-control-entry")
        history_control_index_key = ET.SubElement(history_control_entry, "history-control-index")
        history_control_index_key.text = kwargs.pop('history_control_index')
        history_control_interval = ET.SubElement(history_control_entry, "history-control-interval")
        history_control_interval.text = kwargs.pop('history_control_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_rmon_collection_history_control_entry_history_control_owner(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        rmon = ET.SubElement(hundredgigabitethernet, "rmon", xmlns="urn:brocade.com:mgmt:brocade-rmon")
        collection = ET.SubElement(rmon, "collection")
        history_control_entry = ET.SubElement(collection, "history-control-entry")
        history_control_index_key = ET.SubElement(history_control_entry, "history-control-index")
        history_control_index_key.text = kwargs.pop('history_control_index')
        history_control_owner = ET.SubElement(history_control_entry, "history-control-owner")
        history_control_owner.text = kwargs.pop('history_control_owner')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_udld_udld_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        udld = ET.SubElement(hundredgigabitethernet, "udld", xmlns="urn:brocade.com:mgmt:brocade-udld")
        udld_enable = ET.SubElement(udld, "udld-enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_vlan_classifier_activate_group_groupid(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vlan = ET.SubElement(hundredgigabitethernet, "vlan", xmlns="urn:brocade.com:mgmt:brocade-vlan")
        classifier = ET.SubElement(vlan, "classifier")
        activate = ET.SubElement(classifier, "activate")
        group = ET.SubElement(activate, "group")
        groupid = ET.SubElement(group, "groupid")
        groupid.text = kwargs.pop('groupid')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_vlan_classifier_activate_group_vlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        vlan = ET.SubElement(hundredgigabitethernet, "vlan", xmlns="urn:brocade.com:mgmt:brocade-vlan")
        classifier = ET.SubElement(vlan, "classifier")
        activate = ET.SubElement(classifier, "activate")
        group = ET.SubElement(activate, "group")
        groupid_key = ET.SubElement(group, "groupid")
        groupid_key.text = kwargs.pop('groupid')
        vlan = ET.SubElement(group, "vlan")
        vlan.text = kwargs.pop('vlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_bpdu_drop_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        bpdu_drop = ET.SubElement(hundredgigabitethernet, "bpdu-drop", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        enable = ET.SubElement(bpdu_drop, "enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_bpdu_drop_direction(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        bpdu_drop = ET.SubElement(hundredgigabitethernet, "bpdu-drop", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        direction = ET.SubElement(bpdu_drop, "direction")
        direction.text = kwargs.pop('direction')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_spanning_tree_autoedge(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(hundredgigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        autoedge = ET.SubElement(spanning_tree, "autoedge")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_spanning_tree_cost(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(hundredgigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        cost = ET.SubElement(spanning_tree, "cost")
        cost.text = kwargs.pop('cost')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_spanning_tree_portfast_portfastbasic(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(hundredgigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        portfast = ET.SubElement(spanning_tree, "portfast")
        portfastbasic = ET.SubElement(portfast, "portfastbasic")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_spanning_tree_portfast_bpdu_guard(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(hundredgigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        portfast = ET.SubElement(spanning_tree, "portfast")
        bpdu_guard = ET.SubElement(portfast, "bpdu-guard")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_spanning_tree_portfast_bpdu_filter(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(hundredgigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        portfast = ET.SubElement(spanning_tree, "portfast")
        bpdu_filter = ET.SubElement(portfast, "bpdu-filter")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_spanning_tree_edgeport_edgeportbasic(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(hundredgigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        edgeport = ET.SubElement(spanning_tree, "edgeport")
        edgeportbasic = ET.SubElement(edgeport, "edgeportbasic")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_spanning_tree_edgeport_bpdu_guard(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(hundredgigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        edgeport = ET.SubElement(spanning_tree, "edgeport")
        bpdu_guard = ET.SubElement(edgeport, "bpdu-guard")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_spanning_tree_edgeport_bpdu_filter(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(hundredgigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        edgeport = ET.SubElement(spanning_tree, "edgeport")
        bpdu_filter = ET.SubElement(edgeport, "bpdu-filter")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_spanning_tree_guard_root(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(hundredgigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        guard = ET.SubElement(spanning_tree, "guard")
        root = ET.SubElement(guard, "root")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_spanning_tree_hello_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(hundredgigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        hello_time = ET.SubElement(spanning_tree, "hello-time")
        hello_time.text = kwargs.pop('hello_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_spanning_tree_bpdu_mac(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(hundredgigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        bpdu_mac = ET.SubElement(spanning_tree, "bpdu-mac")
        bpdu_mac.text = kwargs.pop('bpdu_mac')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_spanning_tree_link_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(hundredgigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        link_type = ET.SubElement(spanning_tree, "link-type")
        link_type.text = kwargs.pop('link_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_spanning_tree_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(hundredgigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        priority = ET.SubElement(spanning_tree, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_spanning_tree_restricted_role(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(hundredgigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        restricted_role = ET.SubElement(spanning_tree, "restricted-role")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_spanning_tree_restricted_tcn(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(hundredgigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        restricted_tcn = ET.SubElement(spanning_tree, "restricted-tcn")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_spanning_tree_shutdown(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(hundredgigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        shutdown = ET.SubElement(spanning_tree, "shutdown")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_spanning_tree_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(hundredgigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        vlan = ET.SubElement(spanning_tree, "vlan")
        id = ET.SubElement(vlan, "id")
        id.text = kwargs.pop('id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_spanning_tree_vlan_cost(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(hundredgigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        vlan = ET.SubElement(spanning_tree, "vlan")
        id_key = ET.SubElement(vlan, "id")
        id_key.text = kwargs.pop('id')
        cost = ET.SubElement(vlan, "cost")
        cost.text = kwargs.pop('cost')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_spanning_tree_vlan_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(hundredgigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        vlan = ET.SubElement(spanning_tree, "vlan")
        id_key = ET.SubElement(vlan, "id")
        id_key.text = kwargs.pop('id')
        priority = ET.SubElement(vlan, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_spanning_tree_vlan_guard_root(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(hundredgigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        vlan = ET.SubElement(spanning_tree, "vlan")
        id_key = ET.SubElement(vlan, "id")
        id_key.text = kwargs.pop('id')
        guard = ET.SubElement(vlan, "guard")
        root = ET.SubElement(guard, "root")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_spanning_tree_instance_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(hundredgigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        instance = ET.SubElement(spanning_tree, "instance")
        id = ET.SubElement(instance, "id")
        id.text = kwargs.pop('id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_spanning_tree_instance_cost(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(hundredgigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        instance = ET.SubElement(spanning_tree, "instance")
        id_key = ET.SubElement(instance, "id")
        id_key.text = kwargs.pop('id')
        cost = ET.SubElement(instance, "cost")
        cost.text = kwargs.pop('cost')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_spanning_tree_instance_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(hundredgigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        instance = ET.SubElement(spanning_tree, "instance")
        id_key = ET.SubElement(instance, "id")
        id_key.text = kwargs.pop('id')
        priority = ET.SubElement(instance, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_spanning_tree_instance_restricted_role(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(hundredgigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        instance = ET.SubElement(spanning_tree, "instance")
        id_key = ET.SubElement(instance, "id")
        id_key.text = kwargs.pop('id')
        restricted_role = ET.SubElement(instance, "restricted-role")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_hundredgigabitethernet_spanning_tree_instance_restricted_tcn(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        hundredgigabitethernet = ET.SubElement(interface, "hundredgigabitethernet")
        name_key = ET.SubElement(hundredgigabitethernet, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(hundredgigabitethernet, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        instance = ET.SubElement(spanning_tree, "instance")
        id_key = ET.SubElement(instance, "id")
        id_key.text = kwargs.pop('id')
        restricted_tcn = ET.SubElement(instance, "restricted-tcn")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name = ET.SubElement(port_channel, "name")
        name.text = kwargs.pop('name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_cee(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        cee = ET.SubElement(port_channel, "cee")
        cee.text = kwargs.pop('cee')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_vlag_ignore_split(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        vlag = ET.SubElement(port_channel, "vlag")
        ignore_split = ET.SubElement(vlag, "ignore-split")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_po_speed(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        po_speed = ET.SubElement(port_channel, "po-speed")
        po_speed.text = kwargs.pop('po_speed')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_ifindex(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        ifindex = ET.SubElement(port_channel, "ifindex")
        ifindex.text = kwargs.pop('ifindex')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_description(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        description = ET.SubElement(port_channel, "description")
        description.text = kwargs.pop('description')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_shutdown(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        shutdown = ET.SubElement(port_channel, "shutdown")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_minimum_links(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        minimum_links = ET.SubElement(port_channel, "minimum-links")
        minimum_links.text = kwargs.pop('minimum_links')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_mtu(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        mtu = ET.SubElement(port_channel, "mtu")
        mtu.text = kwargs.pop('mtu')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_basic_basic(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport_basic = ET.SubElement(port_channel, "switchport-basic")
        basic = ET.SubElement(switchport_basic, "basic")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_mode_vlan_mode(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        mode = ET.SubElement(switchport, "mode")
        vlan_mode = ET.SubElement(mode, "vlan-mode")
        vlan_mode.text = kwargs.pop('vlan_mode')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_mode_private_vlan_private_vlan_trunk_trunk_basic(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        mode = ET.SubElement(switchport, "mode")
        private_vlan = ET.SubElement(mode, "private-vlan")
        private_vlan_trunk = ET.SubElement(private_vlan, "private-vlan-trunk")
        trunk_basic = ET.SubElement(private_vlan_trunk, "trunk-basic")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_mode_private_vlan_private_vlan_trunk_trunk_promiscuous(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        mode = ET.SubElement(switchport, "mode")
        private_vlan = ET.SubElement(mode, "private-vlan")
        private_vlan_trunk = ET.SubElement(private_vlan, "private-vlan-trunk")
        trunk_promiscuous = ET.SubElement(private_vlan_trunk, "trunk-promiscuous")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_mode_private_vlan_private_vlan_trunk_trunk_host(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        mode = ET.SubElement(switchport, "mode")
        private_vlan = ET.SubElement(mode, "private-vlan")
        private_vlan_trunk = ET.SubElement(private_vlan, "private-vlan-trunk")
        trunk_host = ET.SubElement(private_vlan_trunk, "trunk-host")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_mode_private_vlan_promiscuous(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        mode = ET.SubElement(switchport, "mode")
        private_vlan = ET.SubElement(mode, "private-vlan")
        promiscuous = ET.SubElement(private_vlan, "promiscuous")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_mode_private_vlan_host(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        mode = ET.SubElement(switchport, "mode")
        private_vlan = ET.SubElement(mode, "private-vlan")
        host = ET.SubElement(private_vlan, "host")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_port_security_port_sec_max(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        port_security = ET.SubElement(switchport, "port-security")
        port_sec_max = ET.SubElement(port_security, "port-sec-max")
        port_sec_max.text = kwargs.pop('port_sec_max')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_port_security_port_sec_violation(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        port_security = ET.SubElement(switchport, "port-security")
        port_sec_violation = ET.SubElement(port_security, "port-sec-violation")
        port_sec_violation.text = kwargs.pop('port_sec_violation')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_port_security_port_secutiry_mac_address_mac_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        port_security = ET.SubElement(switchport, "port-security")
        port_secutiry_mac_address = ET.SubElement(port_security, "port-secutiry-mac-address")
        port_sec_vlan_key = ET.SubElement(port_secutiry_mac_address, "port-sec-vlan")
        port_sec_vlan_key.text = kwargs.pop('port_sec_vlan')
        mac_address = ET.SubElement(port_secutiry_mac_address, "mac-address")
        mac_address.text = kwargs.pop('mac_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_port_security_port_secutiry_mac_address_port_sec_vlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        port_security = ET.SubElement(switchport, "port-security")
        port_secutiry_mac_address = ET.SubElement(port_security, "port-secutiry-mac-address")
        mac_address_key = ET.SubElement(port_secutiry_mac_address, "mac-address")
        mac_address_key.text = kwargs.pop('mac_address')
        port_sec_vlan = ET.SubElement(port_secutiry_mac_address, "port-sec-vlan")
        port_sec_vlan.text = kwargs.pop('port_sec_vlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_port_security_sticky_sticky_flag(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        port_security = ET.SubElement(switchport, "port-security")
        sticky = ET.SubElement(port_security, "sticky")
        sticky_flag = ET.SubElement(sticky, "sticky-flag")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_port_security_sticky_port_secutiry_mac_address_mac_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        port_security = ET.SubElement(switchport, "port-security")
        sticky = ET.SubElement(port_security, "sticky")
        port_secutiry_mac_address = ET.SubElement(sticky, "port-secutiry-mac-address")
        port_sec_vlan_key = ET.SubElement(port_secutiry_mac_address, "port-sec-vlan")
        port_sec_vlan_key.text = kwargs.pop('port_sec_vlan')
        mac_address = ET.SubElement(port_secutiry_mac_address, "mac-address")
        mac_address.text = kwargs.pop('mac_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_port_security_sticky_port_secutiry_mac_address_port_sec_vlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        port_security = ET.SubElement(switchport, "port-security")
        sticky = ET.SubElement(port_security, "sticky")
        port_secutiry_mac_address = ET.SubElement(sticky, "port-secutiry-mac-address")
        mac_address_key = ET.SubElement(port_secutiry_mac_address, "mac-address")
        mac_address_key.text = kwargs.pop('mac_address')
        port_sec_vlan = ET.SubElement(port_secutiry_mac_address, "port-sec-vlan")
        port_sec_vlan.text = kwargs.pop('port_sec_vlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_port_security_allowed_ouis_oui(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        port_security = ET.SubElement(switchport, "port-security")
        allowed_ouis = ET.SubElement(port_security, "allowed-ouis")
        oui = ET.SubElement(allowed_ouis, "oui")
        oui.text = kwargs.pop('oui')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_port_security_shutdown_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        port_security = ET.SubElement(switchport, "port-security")
        shutdown_time = ET.SubElement(port_security, "shutdown-time")
        shutdown_time.text = kwargs.pop('shutdown_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_access_accessvlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        access = ET.SubElement(switchport, "access")
        accessvlan = ET.SubElement(access, "accessvlan")
        accessvlan.text = kwargs.pop('accessvlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_access_mac_vlan_classification_access_vlan_access_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        access_mac_vlan_classification = ET.SubElement(switchport, "access-mac-vlan-classification")
        access = ET.SubElement(access_mac_vlan_classification, "access")
        vlan = ET.SubElement(access, "vlan")
        access_mac_address_key = ET.SubElement(vlan, "access-mac-address")
        access_mac_address_key.text = kwargs.pop('access_mac_address')
        access_vlan_id = ET.SubElement(vlan, "access-vlan-id")
        access_vlan_id.text = kwargs.pop('access_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_access_mac_vlan_classification_access_vlan_access_mac_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        access_mac_vlan_classification = ET.SubElement(switchport, "access-mac-vlan-classification")
        access = ET.SubElement(access_mac_vlan_classification, "access")
        vlan = ET.SubElement(access, "vlan")
        access_vlan_id_key = ET.SubElement(vlan, "access-vlan-id")
        access_vlan_id_key.text = kwargs.pop('access_vlan_id')
        access_mac_address = ET.SubElement(vlan, "access-mac-address")
        access_mac_address.text = kwargs.pop('access_mac_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_trunk_private_vlan_classification_private_vlan_trunk_allowed_vlan_add_trunk_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        trunk_private_vlan_classification = ET.SubElement(switchport, "trunk-private-vlan-classification")
        private_vlan = ET.SubElement(trunk_private_vlan_classification, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        add = ET.SubElement(vlan, "add")
        trunk_ctag_id_key = ET.SubElement(add, "trunk-ctag-id")
        trunk_ctag_id_key.text = kwargs.pop('trunk_ctag_id')
        trunk_vlan_id = ET.SubElement(add, "trunk-vlan-id")
        trunk_vlan_id.text = kwargs.pop('trunk_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_trunk_private_vlan_classification_private_vlan_trunk_allowed_vlan_add_trunk_ctag_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        trunk_private_vlan_classification = ET.SubElement(switchport, "trunk-private-vlan-classification")
        private_vlan = ET.SubElement(trunk_private_vlan_classification, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        add = ET.SubElement(vlan, "add")
        trunk_vlan_id_key = ET.SubElement(add, "trunk-vlan-id")
        trunk_vlan_id_key.text = kwargs.pop('trunk_vlan_id')
        trunk_ctag_id = ET.SubElement(add, "trunk-ctag-id")
        trunk_ctag_id.text = kwargs.pop('trunk_ctag_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_trunk_private_vlan_classification_private_vlan_trunk_allowed_vlan_remove_trunk_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        trunk_private_vlan_classification = ET.SubElement(switchport, "trunk-private-vlan-classification")
        private_vlan = ET.SubElement(trunk_private_vlan_classification, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        remove = ET.SubElement(vlan, "remove")
        trunk_ctag_id_key = ET.SubElement(remove, "trunk-ctag-id")
        trunk_ctag_id_key.text = kwargs.pop('trunk_ctag_id')
        trunk_vlan_id = ET.SubElement(remove, "trunk-vlan-id")
        trunk_vlan_id.text = kwargs.pop('trunk_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_trunk_private_vlan_classification_private_vlan_trunk_allowed_vlan_remove_trunk_ctag_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        trunk_private_vlan_classification = ET.SubElement(switchport, "trunk-private-vlan-classification")
        private_vlan = ET.SubElement(trunk_private_vlan_classification, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        remove = ET.SubElement(vlan, "remove")
        trunk_vlan_id_key = ET.SubElement(remove, "trunk-vlan-id")
        trunk_vlan_id_key.text = kwargs.pop('trunk_vlan_id')
        trunk_ctag_id = ET.SubElement(remove, "trunk-ctag-id")
        trunk_ctag_id.text = kwargs.pop('trunk_ctag_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_access_mac_group_vlan_classification_access_vlan_access_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        access_mac_group_vlan_classification = ET.SubElement(switchport, "access-mac-group-vlan-classification")
        access = ET.SubElement(access_mac_group_vlan_classification, "access")
        vlan = ET.SubElement(access, "vlan")
        access_mac_group_key = ET.SubElement(vlan, "access-mac-group")
        access_mac_group_key.text = kwargs.pop('access_mac_group')
        access_vlan_id = ET.SubElement(vlan, "access-vlan-id")
        access_vlan_id.text = kwargs.pop('access_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_access_mac_group_vlan_classification_access_vlan_access_mac_group(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        access_mac_group_vlan_classification = ET.SubElement(switchport, "access-mac-group-vlan-classification")
        access = ET.SubElement(access_mac_group_vlan_classification, "access")
        vlan = ET.SubElement(access, "vlan")
        access_vlan_id_key = ET.SubElement(vlan, "access-vlan-id")
        access_vlan_id_key.text = kwargs.pop('access_vlan_id')
        access_mac_group = ET.SubElement(vlan, "access-mac-group")
        access_mac_group.text = kwargs.pop('access_mac_group')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_trunk_allowed_vlan_all(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        all = ET.SubElement(vlan, "all")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_trunk_allowed_vlan_none(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        none = ET.SubElement(vlan, "none")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_trunk_allowed_vlan_add(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        add = ET.SubElement(vlan, "add")
        add.text = kwargs.pop('add')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_trunk_allowed_vlan_excpt(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        excpt = ET.SubElement(vlan, "except")
        excpt.text = kwargs.pop('excpt')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_trunk_allowed_vlan_remove(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        remove = ET.SubElement(vlan, "remove")
        remove.text = kwargs.pop('remove')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_trunk_allowed_vlanoper_vlan_add(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlanoper = ET.SubElement(allowed, "vlanoper")
        vlan = ET.SubElement(vlanoper, "vlan")
        add = ET.SubElement(vlan, "add")
        add.text = kwargs.pop('add')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_trunk_allowed_vlanoper_vlan_remove(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlanoper = ET.SubElement(allowed, "vlanoper")
        vlan = ET.SubElement(vlanoper, "vlan")
        remove = ET.SubElement(vlan, "remove")
        remove.text = kwargs.pop('remove')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_trunk_trunk_vlan_classification_allowed_vlan_add_trunk_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        trunk_vlan_classification = ET.SubElement(trunk, "trunk-vlan-classification")
        allowed = ET.SubElement(trunk_vlan_classification, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        add = ET.SubElement(vlan, "add")
        trunk_vlan_id = ET.SubElement(add, "trunk-vlan-id")
        trunk_vlan_id.text = kwargs.pop('trunk_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_trunk_trunk_vlan_classification_allowed_vlan_add_trunk_ctag_range(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        trunk_vlan_classification = ET.SubElement(trunk, "trunk-vlan-classification")
        allowed = ET.SubElement(trunk_vlan_classification, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        add = ET.SubElement(vlan, "add")
        trunk_vlan_id_key = ET.SubElement(add, "trunk-vlan-id")
        trunk_vlan_id_key.text = kwargs.pop('trunk_vlan_id')
        trunk_ctag_range = ET.SubElement(add, "trunk-ctag-range")
        trunk_ctag_range.text = kwargs.pop('trunk_ctag_range')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_trunk_trunk_vlan_classification_allowed_vlan_remove_trunk_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        trunk_vlan_classification = ET.SubElement(trunk, "trunk-vlan-classification")
        allowed = ET.SubElement(trunk_vlan_classification, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        remove = ET.SubElement(vlan, "remove")
        trunk_vlan_id = ET.SubElement(remove, "trunk-vlan-id")
        trunk_vlan_id.text = kwargs.pop('trunk_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_trunk_trunk_vlan_classification_allowed_vlan_remove_trunk_ctag_range(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        trunk_vlan_classification = ET.SubElement(trunk, "trunk-vlan-classification")
        allowed = ET.SubElement(trunk_vlan_classification, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        remove = ET.SubElement(vlan, "remove")
        trunk_vlan_id_key = ET.SubElement(remove, "trunk-vlan-id")
        trunk_vlan_id_key.text = kwargs.pop('trunk_vlan_id')
        trunk_ctag_range = ET.SubElement(remove, "trunk-ctag-range")
        trunk_ctag_range.text = kwargs.pop('trunk_ctag_range')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_trunk_default_vlan_config_default_transparent_vlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        default_vlan_config = ET.SubElement(trunk, "default-vlan-config")
        default_transparent_vlan = ET.SubElement(default_vlan_config, "default-transparent-vlan")
        default_transparent_vlan.text = kwargs.pop('default_transparent_vlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_trunk_tag_native_vlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        tag = ET.SubElement(trunk, "tag")
        native_vlan = ET.SubElement(tag, "native-vlan")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_trunk_native_vlan_classification_native_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        native_vlan_classification = ET.SubElement(trunk, "native-vlan-classification")
        native_vlan_id = ET.SubElement(native_vlan_classification, "native-vlan-id")
        native_vlan_id.text = kwargs.pop('native_vlan_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_trunk_native_vlan_classification_native_vlan_ctag_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        native_vlan_classification = ET.SubElement(trunk, "native-vlan-classification")
        native_vlan_ctag_id = ET.SubElement(native_vlan_classification, "native-vlan-ctag-id")
        native_vlan_ctag_id.text = kwargs.pop('native_vlan_ctag_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_trunk_native_vlan_xtagged_config_native_vlan_id_xtagged(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        native_vlan_xtagged_config = ET.SubElement(trunk, "native-vlan-xtagged-config")
        native_vlan_id_xtagged = ET.SubElement(native_vlan_xtagged_config, "native-vlan-id-xtagged")
        native_vlan_id_xtagged.text = kwargs.pop('native_vlan_id_xtagged')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_trunk_native_vlan_xtagged_config_native_vlan_ctag_id_xtagged(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        native_vlan_xtagged_config = ET.SubElement(trunk, "native-vlan-xtagged-config")
        native_vlan_ctag_id_xtagged = ET.SubElement(native_vlan_xtagged_config, "native-vlan-ctag-id-xtagged")
        native_vlan_ctag_id_xtagged.text = kwargs.pop('native_vlan_ctag_id_xtagged')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_trunk_native_vlan_xtagged_config_native_vlan_egress_type_xtagged(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        native_vlan_xtagged_config = ET.SubElement(trunk, "native-vlan-xtagged-config")
        native_vlan_egress_type_xtagged = ET.SubElement(native_vlan_xtagged_config, "native-vlan-egress-type-xtagged")
        native_vlan_egress_type_xtagged.text = kwargs.pop('native_vlan_egress_type_xtagged')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_trunk_native_vlan_untagged_config_native_vlan_id_untagged(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        trunk = ET.SubElement(switchport, "trunk")
        native_vlan_untagged_config = ET.SubElement(trunk, "native-vlan-untagged-config")
        native_vlan_id_untagged = ET.SubElement(native_vlan_untagged_config, "native-vlan-id-untagged")
        native_vlan_id_untagged.text = kwargs.pop('native_vlan_id_untagged')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_private_vlan_trunk_pvlan_tag_pvlan_tag_native_vlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        pvlan_tag = ET.SubElement(trunk, "pvlan-tag")
        pvlan_tag_native_vlan = ET.SubElement(pvlan_tag, "pvlan-tag-native-vlan")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_private_vlan_trunk_native_pvlanNativevlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        native = ET.SubElement(trunk, "native")
        pvlanNativevlan = ET.SubElement(native, "pvlanNativevlan")
        pvlanNativevlan.text = kwargs.pop('pvlanNativevlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_private_vlan_trunk_native_pvlan_native_vlan_ctag_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        native = ET.SubElement(trunk, "native")
        pvlan_native_vlan_ctag_id = ET.SubElement(native, "pvlan-native-vlan-ctag-id")
        pvlan_native_vlan_ctag_id.text = kwargs.pop('pvlan_native_vlan_ctag_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_private_vlan_trunk_allowed_vlan_pvlan_all(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        pvlan_all = ET.SubElement(vlan, "pvlan_all")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_private_vlan_trunk_allowed_vlan_pvlan_none(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        pvlan_none = ET.SubElement(vlan, "pvlan_none")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_private_vlan_trunk_allowed_vlan_pvlan_add(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        pvlan_add = ET.SubElement(vlan, "pvlan_add")
        pvlan_add.text = kwargs.pop('pvlan_add')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_private_vlan_trunk_allowed_vlan_pvlan_except(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        pvlan_except = ET.SubElement(vlan, "pvlan_except")
        pvlan_except.text = kwargs.pop('pvlan_except')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_private_vlan_trunk_allowed_vlan_pvlan_remove(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        trunk = ET.SubElement(private_vlan, "trunk")
        allowed = ET.SubElement(trunk, "allowed")
        vlan = ET.SubElement(allowed, "vlan")
        pvlan_remove = ET.SubElement(vlan, "pvlan_remove")
        pvlan_remove.text = kwargs.pop('pvlan_remove')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_private_vlan_host_association_host_pri_pvlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        host_association = ET.SubElement(private_vlan, "host-association")
        host_pri_pvlan = ET.SubElement(host_association, "host-pri-pvlan")
        host_pri_pvlan.text = kwargs.pop('host_pri_pvlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_private_vlan_host_association_host_sec_pvlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        host_association = ET.SubElement(private_vlan, "host-association")
        host_sec_pvlan = ET.SubElement(host_association, "host-sec-pvlan")
        host_sec_pvlan.text = kwargs.pop('host_sec_pvlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_private_vlan_association_trunk_trunk_pri_pvlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        association = ET.SubElement(private_vlan, "association")
        trunk = ET.SubElement(association, "trunk")
        trunk_sec_pvlan_key = ET.SubElement(trunk, "trunk-sec-pvlan")
        trunk_sec_pvlan_key.text = kwargs.pop('trunk_sec_pvlan')
        trunk_pri_pvlan = ET.SubElement(trunk, "trunk-pri-pvlan")
        trunk_pri_pvlan.text = kwargs.pop('trunk_pri_pvlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_private_vlan_association_trunk_trunk_sec_pvlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        association = ET.SubElement(private_vlan, "association")
        trunk = ET.SubElement(association, "trunk")
        trunk_pri_pvlan_key = ET.SubElement(trunk, "trunk-pri-pvlan")
        trunk_pri_pvlan_key.text = kwargs.pop('trunk_pri_pvlan')
        trunk_sec_pvlan = ET.SubElement(trunk, "trunk-sec-pvlan")
        trunk_sec_pvlan.text = kwargs.pop('trunk_sec_pvlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_private_vlan_mapping_promis_pri_pvlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        mapping = ET.SubElement(private_vlan, "mapping")
        promis_pri_pvlan = ET.SubElement(mapping, "promis-pri-pvlan")
        promis_pri_pvlan.text = kwargs.pop('promis_pri_pvlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_private_vlan_mapping_oper(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        mapping = ET.SubElement(private_vlan, "mapping")
        promis_pri_pvlan_key = ET.SubElement(mapping, "promis-pri-pvlan")
        promis_pri_pvlan_key.text = kwargs.pop('promis_pri_pvlan')
        oper = ET.SubElement(mapping, "oper")
        oper.text = kwargs.pop('oper')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_switchport_private_vlan_mapping_promis_sec_pvlan_range(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        switchport = ET.SubElement(port_channel, "switchport")
        private_vlan = ET.SubElement(switchport, "private-vlan")
        mapping = ET.SubElement(private_vlan, "mapping")
        promis_pri_pvlan_key = ET.SubElement(mapping, "promis-pri-pvlan")
        promis_pri_pvlan_key.text = kwargs.pop('promis_pri_pvlan')
        promis_sec_pvlan_range = ET.SubElement(mapping, "promis-sec-pvlan-range")
        promis_sec_pvlan_range.text = kwargs.pop('promis_sec_pvlan_range')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_mac_learning_mac_learn_disable_vlan_mac_learning_vlan_add(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        mac_learning = ET.SubElement(port_channel, "mac-learning")
        mac_learn_disable = ET.SubElement(mac_learning, "mac-learn-disable")
        vlan = ET.SubElement(mac_learn_disable, "vlan")
        mac_learning_vlan_add = ET.SubElement(vlan, "mac-learning-vlan-add")
        mac_learning_vlan_add.text = kwargs.pop('mac_learning_vlan_add')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_mac_learning_mac_learn_disable_vlan_mac_learning_vlan_remove(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        mac_learning = ET.SubElement(port_channel, "mac-learning")
        mac_learn_disable = ET.SubElement(mac_learning, "mac-learn-disable")
        vlan = ET.SubElement(mac_learn_disable, "vlan")
        mac_learning_vlan_remove = ET.SubElement(vlan, "mac-learning-vlan-remove")
        mac_learning_vlan_remove.text = kwargs.pop('mac_learning_vlan_remove')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_ip_hide_ip_holder_ip_config_mtu(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(port_channel, "ip")
        hide_ip_holder = ET.SubElement(ip, "hide-ip-holder", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        ip_config = ET.SubElement(hide_ip_holder, "ip-config")
        mtu = ET.SubElement(ip_config, "mtu")
        mtu.text = kwargs.pop('mtu')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_ip_hide_ip_holder_ip_config_directed_broadcast(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(port_channel, "ip")
        hide_ip_holder = ET.SubElement(ip, "hide-ip-holder", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        ip_config = ET.SubElement(hide_ip_holder, "ip-config")
        directed_broadcast = ET.SubElement(ip_config, "directed-broadcast")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_ip_hide_ip_holder_ip_config_proxy_arp(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(port_channel, "ip")
        hide_ip_holder = ET.SubElement(ip, "hide-ip-holder", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        ip_config = ET.SubElement(hide_ip_holder, "ip-config")
        proxy_arp = ET.SubElement(ip_config, "proxy-arp")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_ip_hide_ip_holder_ip_config_arp_aging_timeout(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(port_channel, "ip")
        hide_ip_holder = ET.SubElement(ip, "hide-ip-holder", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        ip_config = ET.SubElement(hide_ip_holder, "ip-config")
        arp_aging_timeout = ET.SubElement(ip_config, "arp-aging-timeout")
        arp_aging_timeout.text = kwargs.pop('arp_aging_timeout')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_ip_hide_ip_holder_ip_config_address_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(port_channel, "ip")
        hide_ip_holder = ET.SubElement(ip, "hide-ip-holder", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        ip_config = ET.SubElement(hide_ip_holder, "ip-config")
        address = ET.SubElement(ip_config, "address")
        address = ET.SubElement(address, "address")
        address.text = kwargs.pop('address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_ip_hide_ip_holder_ip_config_address_secondary(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(port_channel, "ip")
        hide_ip_holder = ET.SubElement(ip, "hide-ip-holder", xmlns="urn:brocade.com:mgmt:brocade-ip-config")
        ip_config = ET.SubElement(hide_ip_holder, "ip-config")
        address = ET.SubElement(ip_config, "address")
        address_key = ET.SubElement(address, "address")
        address_key.text = kwargs.pop('address')
        secondary = ET.SubElement(address, "secondary")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_ip_arp_inspection_trust(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(port_channel, "ip")
        arp = ET.SubElement(ip, "arp", xmlns="urn:brocade.com:mgmt:brocade-dai")
        inspection = ET.SubElement(arp, "inspection")
        trust = ET.SubElement(inspection, "trust")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_ipv6_raguard(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(port_channel, "ipv6")
        raguard = ET.SubElement(ipv6, "raguard")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_ipv6_access_group_ipv6_access_list(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(port_channel, "ipv6")
        access_group = ET.SubElement(ipv6, "access-group", xmlns="urn:brocade.com:mgmt:brocade-ipv6-access-list")
        ip_direction_key = ET.SubElement(access_group, "ip-direction")
        ip_direction_key.text = kwargs.pop('ip_direction')
        ipv6_access_list = ET.SubElement(access_group, "ipv6-access-list")
        ipv6_access_list.text = kwargs.pop('ipv6_access_list')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_ipv6_access_group_ip_direction(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(port_channel, "ipv6")
        access_group = ET.SubElement(ipv6, "access-group", xmlns="urn:brocade.com:mgmt:brocade-ipv6-access-list")
        ipv6_access_list_key = ET.SubElement(access_group, "ipv6-access-list")
        ipv6_access_list_key.text = kwargs.pop('ipv6_access_list')
        ip_direction = ET.SubElement(access_group, "ip-direction")
        ip_direction.text = kwargs.pop('ip_direction')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_ipv6_access_group_traffic_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(port_channel, "ipv6")
        access_group = ET.SubElement(ipv6, "access-group", xmlns="urn:brocade.com:mgmt:brocade-ipv6-access-list")
        ipv6_access_list_key = ET.SubElement(access_group, "ipv6-access-list")
        ipv6_access_list_key.text = kwargs.pop('ipv6_access_list')
        ip_direction_key = ET.SubElement(access_group, "ip-direction")
        ip_direction_key.text = kwargs.pop('ip_direction')
        traffic_type = ET.SubElement(access_group, "traffic-type")
        traffic_type.text = kwargs.pop('traffic_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_ipv6_hide_vrrpv3_holder_vrrpv3_vrid(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(port_channel, "ipv6")
        hide_vrrpv3_holder = ET.SubElement(ipv6, "hide-vrrpv3-holder", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrrpv3 = ET.SubElement(hide_vrrpv3_holder, "vrrpv3")
        vrid = ET.SubElement(vrrpv3, "vrid")
        vrid.text = kwargs.pop('vrid')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_ipv6_hide_vrrpv3_holder_vrrpv3_virtual_ip_virtual_ipaddr(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(port_channel, "ipv6")
        hide_vrrpv3_holder = ET.SubElement(ipv6, "hide-vrrpv3-holder", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrrpv3 = ET.SubElement(hide_vrrpv3_holder, "vrrpv3")
        vrid_key = ET.SubElement(vrrpv3, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        virtual_ip = ET.SubElement(vrrpv3, "virtual-ip")
        virtual_ipaddr = ET.SubElement(virtual_ip, "virtual-ipaddr")
        virtual_ipaddr.text = kwargs.pop('virtual_ipaddr')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_ipv6_hide_vrrpv3_holder_vrrpv3_track_interface_interface_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(port_channel, "ipv6")
        hide_vrrpv3_holder = ET.SubElement(ipv6, "hide-vrrpv3-holder", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrrpv3 = ET.SubElement(hide_vrrpv3_holder, "vrrpv3")
        vrid_key = ET.SubElement(vrrpv3, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        track = ET.SubElement(vrrpv3, "track")
        interface = ET.SubElement(track, "interface")
        interface_name_key = ET.SubElement(interface, "interface-name")
        interface_name_key.text = kwargs.pop('interface_name')
        interface_type = ET.SubElement(interface, "interface-type")
        interface_type.text = kwargs.pop('interface_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_ipv6_hide_vrrpv3_holder_vrrpv3_track_interface_interface_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(port_channel, "ipv6")
        hide_vrrpv3_holder = ET.SubElement(ipv6, "hide-vrrpv3-holder", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrrpv3 = ET.SubElement(hide_vrrpv3_holder, "vrrpv3")
        vrid_key = ET.SubElement(vrrpv3, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        track = ET.SubElement(vrrpv3, "track")
        interface = ET.SubElement(track, "interface")
        interface_type_key = ET.SubElement(interface, "interface-type")
        interface_type_key.text = kwargs.pop('interface_type')
        interface_name = ET.SubElement(interface, "interface-name")
        interface_name.text = kwargs.pop('interface_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_ipv6_hide_vrrpv3_holder_vrrpv3_track_interface_track_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(port_channel, "ipv6")
        hide_vrrpv3_holder = ET.SubElement(ipv6, "hide-vrrpv3-holder", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrrpv3 = ET.SubElement(hide_vrrpv3_holder, "vrrpv3")
        vrid_key = ET.SubElement(vrrpv3, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        track = ET.SubElement(vrrpv3, "track")
        interface = ET.SubElement(track, "interface")
        interface_type_key = ET.SubElement(interface, "interface-type")
        interface_type_key.text = kwargs.pop('interface_type')
        interface_name_key = ET.SubElement(interface, "interface-name")
        interface_name_key.text = kwargs.pop('interface_name')
        track_priority = ET.SubElement(interface, "track-priority")
        track_priority.text = kwargs.pop('track_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_ipv6_hide_vrrpv3_holder_vrrpv3_advertisement_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(port_channel, "ipv6")
        hide_vrrpv3_holder = ET.SubElement(ipv6, "hide-vrrpv3-holder", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrrpv3 = ET.SubElement(hide_vrrpv3_holder, "vrrpv3")
        vrid_key = ET.SubElement(vrrpv3, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        advertisement_interval = ET.SubElement(vrrpv3, "advertisement-interval")
        advertisement_interval.text = kwargs.pop('advertisement_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_ipv6_hide_vrrpv3_holder_vrrpv3_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(port_channel, "ipv6")
        hide_vrrpv3_holder = ET.SubElement(ipv6, "hide-vrrpv3-holder", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrrpv3 = ET.SubElement(hide_vrrpv3_holder, "vrrpv3")
        vrid_key = ET.SubElement(vrrpv3, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        enable = ET.SubElement(vrrpv3, "enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_ipv6_hide_vrrpv3_holder_vrrpv3_hold_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(port_channel, "ipv6")
        hide_vrrpv3_holder = ET.SubElement(ipv6, "hide-vrrpv3-holder", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrrpv3 = ET.SubElement(hide_vrrpv3_holder, "vrrpv3")
        vrid_key = ET.SubElement(vrrpv3, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        hold_time = ET.SubElement(vrrpv3, "hold-time")
        hold_time.text = kwargs.pop('hold_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_ipv6_hide_vrrpv3_holder_vrrpv3_preempt_mode(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(port_channel, "ipv6")
        hide_vrrpv3_holder = ET.SubElement(ipv6, "hide-vrrpv3-holder", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrrpv3 = ET.SubElement(hide_vrrpv3_holder, "vrrpv3")
        vrid_key = ET.SubElement(vrrpv3, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        preempt_mode = ET.SubElement(vrrpv3, "preempt-mode")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_ipv6_hide_vrrpv3_holder_vrrpv3_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(port_channel, "ipv6")
        hide_vrrpv3_holder = ET.SubElement(ipv6, "hide-vrrpv3-holder", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrrpv3 = ET.SubElement(hide_vrrpv3_holder, "vrrpv3")
        vrid_key = ET.SubElement(vrrpv3, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        priority = ET.SubElement(vrrpv3, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_ipv6_hide_vrrpv3_holder_vrrpv3_description(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(port_channel, "ipv6")
        hide_vrrpv3_holder = ET.SubElement(ipv6, "hide-vrrpv3-holder", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrrpv3 = ET.SubElement(hide_vrrpv3_holder, "vrrpv3")
        vrid_key = ET.SubElement(vrrpv3, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        description = ET.SubElement(vrrpv3, "description")
        description.text = kwargs.pop('description')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_ipv6_hide_vrrpv3_holder_vrrpv3e_vrid(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(port_channel, "ipv6")
        hide_vrrpv3_holder = ET.SubElement(ipv6, "hide-vrrpv3-holder", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrrpv3e = ET.SubElement(hide_vrrpv3_holder, "vrrpv3e")
        vrid = ET.SubElement(vrrpv3e, "vrid")
        vrid.text = kwargs.pop('vrid')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_ipv6_hide_vrrpv3_holder_vrrpv3e_virtual_ip_virtual_ipaddr(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(port_channel, "ipv6")
        hide_vrrpv3_holder = ET.SubElement(ipv6, "hide-vrrpv3-holder", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrrpv3e = ET.SubElement(hide_vrrpv3_holder, "vrrpv3e")
        vrid_key = ET.SubElement(vrrpv3e, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        virtual_ip = ET.SubElement(vrrpv3e, "virtual-ip")
        virtual_ipaddr = ET.SubElement(virtual_ip, "virtual-ipaddr")
        virtual_ipaddr.text = kwargs.pop('virtual_ipaddr')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_ipv6_hide_vrrpv3_holder_vrrpv3e_track_interface_interface_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(port_channel, "ipv6")
        hide_vrrpv3_holder = ET.SubElement(ipv6, "hide-vrrpv3-holder", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrrpv3e = ET.SubElement(hide_vrrpv3_holder, "vrrpv3e")
        vrid_key = ET.SubElement(vrrpv3e, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        track = ET.SubElement(vrrpv3e, "track")
        interface = ET.SubElement(track, "interface")
        interface_name_key = ET.SubElement(interface, "interface-name")
        interface_name_key.text = kwargs.pop('interface_name')
        interface_type = ET.SubElement(interface, "interface-type")
        interface_type.text = kwargs.pop('interface_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_ipv6_hide_vrrpv3_holder_vrrpv3e_track_interface_interface_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(port_channel, "ipv6")
        hide_vrrpv3_holder = ET.SubElement(ipv6, "hide-vrrpv3-holder", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrrpv3e = ET.SubElement(hide_vrrpv3_holder, "vrrpv3e")
        vrid_key = ET.SubElement(vrrpv3e, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        track = ET.SubElement(vrrpv3e, "track")
        interface = ET.SubElement(track, "interface")
        interface_type_key = ET.SubElement(interface, "interface-type")
        interface_type_key.text = kwargs.pop('interface_type')
        interface_name = ET.SubElement(interface, "interface-name")
        interface_name.text = kwargs.pop('interface_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_ipv6_hide_vrrpv3_holder_vrrpv3e_track_interface_track_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(port_channel, "ipv6")
        hide_vrrpv3_holder = ET.SubElement(ipv6, "hide-vrrpv3-holder", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrrpv3e = ET.SubElement(hide_vrrpv3_holder, "vrrpv3e")
        vrid_key = ET.SubElement(vrrpv3e, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        track = ET.SubElement(vrrpv3e, "track")
        interface = ET.SubElement(track, "interface")
        interface_type_key = ET.SubElement(interface, "interface-type")
        interface_type_key.text = kwargs.pop('interface_type')
        interface_name_key = ET.SubElement(interface, "interface-name")
        interface_name_key.text = kwargs.pop('interface_name')
        track_priority = ET.SubElement(interface, "track-priority")
        track_priority.text = kwargs.pop('track_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_ipv6_hide_vrrpv3_holder_vrrpv3e_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(port_channel, "ipv6")
        hide_vrrpv3_holder = ET.SubElement(ipv6, "hide-vrrpv3-holder", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrrpv3e = ET.SubElement(hide_vrrpv3_holder, "vrrpv3e")
        vrid_key = ET.SubElement(vrrpv3e, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        enable = ET.SubElement(vrrpv3e, "enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_ipv6_hide_vrrpv3_holder_vrrpv3e_hold_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(port_channel, "ipv6")
        hide_vrrpv3_holder = ET.SubElement(ipv6, "hide-vrrpv3-holder", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrrpv3e = ET.SubElement(hide_vrrpv3_holder, "vrrpv3e")
        vrid_key = ET.SubElement(vrrpv3e, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        hold_time = ET.SubElement(vrrpv3e, "hold-time")
        hold_time.text = kwargs.pop('hold_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_ipv6_hide_vrrpv3_holder_vrrpv3e_preempt_mode(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(port_channel, "ipv6")
        hide_vrrpv3_holder = ET.SubElement(ipv6, "hide-vrrpv3-holder", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrrpv3e = ET.SubElement(hide_vrrpv3_holder, "vrrpv3e")
        vrid_key = ET.SubElement(vrrpv3e, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        preempt_mode = ET.SubElement(vrrpv3e, "preempt-mode")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_ipv6_hide_vrrpv3_holder_vrrpv3e_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(port_channel, "ipv6")
        hide_vrrpv3_holder = ET.SubElement(ipv6, "hide-vrrpv3-holder", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrrpv3e = ET.SubElement(hide_vrrpv3_holder, "vrrpv3e")
        vrid_key = ET.SubElement(vrrpv3e, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        priority = ET.SubElement(vrrpv3e, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_ipv6_hide_vrrpv3_holder_vrrpv3e_description(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(port_channel, "ipv6")
        hide_vrrpv3_holder = ET.SubElement(ipv6, "hide-vrrpv3-holder", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrrpv3e = ET.SubElement(hide_vrrpv3_holder, "vrrpv3e")
        vrid_key = ET.SubElement(vrrpv3e, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        description = ET.SubElement(vrrpv3e, "description")
        description.text = kwargs.pop('description')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_ipv6_hide_vrrpv3_holder_vrrpv3e_advertise_backup(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(port_channel, "ipv6")
        hide_vrrpv3_holder = ET.SubElement(ipv6, "hide-vrrpv3-holder", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrrpv3e = ET.SubElement(hide_vrrpv3_holder, "vrrpv3e")
        vrid_key = ET.SubElement(vrrpv3e, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        advertise_backup = ET.SubElement(vrrpv3e, "advertise-backup")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_ipv6_hide_vrrpv3_holder_vrrpv3e_nd_advertisement_timer(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(port_channel, "ipv6")
        hide_vrrpv3_holder = ET.SubElement(ipv6, "hide-vrrpv3-holder", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrrpv3e = ET.SubElement(hide_vrrpv3_holder, "vrrpv3e")
        vrid_key = ET.SubElement(vrrpv3e, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        nd_advertisement_timer = ET.SubElement(vrrpv3e, "nd-advertisement-timer")
        nd_advertisement_timer.text = kwargs.pop('nd_advertisement_timer')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_ipv6_hide_vrrpv3_holder_vrrpv3e_advertisement_interval_scale(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(port_channel, "ipv6")
        hide_vrrpv3_holder = ET.SubElement(ipv6, "hide-vrrpv3-holder", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrrpv3e = ET.SubElement(hide_vrrpv3_holder, "vrrpv3e")
        vrid_key = ET.SubElement(vrrpv3e, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        advertisement_interval_scale = ET.SubElement(vrrpv3e, "advertisement-interval-scale")
        advertisement_interval_scale.text = kwargs.pop('advertisement_interval_scale')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_ipv6_hide_vrrpv3_holder_vrrpv3e_backup_advertisement_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(port_channel, "ipv6")
        hide_vrrpv3_holder = ET.SubElement(ipv6, "hide-vrrpv3-holder", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrrpv3e = ET.SubElement(hide_vrrpv3_holder, "vrrpv3e")
        vrid_key = ET.SubElement(vrrpv3e, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        backup_advertisement_interval = ET.SubElement(vrrpv3e, "backup-advertisement-interval")
        backup_advertisement_interval.text = kwargs.pop('backup_advertisement_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_ipv6_hide_vrrpv3_holder_vrrpv3e_vrrpe_advertisement_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(port_channel, "ipv6")
        hide_vrrpv3_holder = ET.SubElement(ipv6, "hide-vrrpv3-holder", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrrpv3e = ET.SubElement(hide_vrrpv3_holder, "vrrpv3e")
        vrid_key = ET.SubElement(vrrpv3e, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        vrrpe_advertisement_interval = ET.SubElement(vrrpv3e, "vrrpe-advertisement-interval")
        vrrpe_advertisement_interval.text = kwargs.pop('vrrpe_advertisement_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_ipv6_hide_vrrpv3_holder_vrrpv3e_short_path_forwarding_basic(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(port_channel, "ipv6")
        hide_vrrpv3_holder = ET.SubElement(ipv6, "hide-vrrpv3-holder", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrrpv3e = ET.SubElement(hide_vrrpv3_holder, "vrrpv3e")
        vrid_key = ET.SubElement(vrrpv3e, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        short_path_forwarding = ET.SubElement(vrrpv3e, "short-path-forwarding")
        basic = ET.SubElement(short_path_forwarding, "basic")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_ipv6_hide_vrrpv3_holder_vrrpv3e_short_path_forwarding_revert_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(port_channel, "ipv6")
        hide_vrrpv3_holder = ET.SubElement(ipv6, "hide-vrrpv3-holder", xmlns="urn:brocade.com:mgmt:brocade-vrrpv3")
        vrrpv3e = ET.SubElement(hide_vrrpv3_holder, "vrrpv3e")
        vrid_key = ET.SubElement(vrrpv3e, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        short_path_forwarding = ET.SubElement(vrrpv3e, "short-path-forwarding")
        revert_priority = ET.SubElement(short_path_forwarding, "revert-priority")
        revert_priority.text = kwargs.pop('revert_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_track_track_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        track = ET.SubElement(port_channel, "track")
        track_enable = ET.SubElement(track, "track_enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_track_min_link(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        track = ET.SubElement(port_channel, "track")
        min_link = ET.SubElement(track, "min-link")
        min_link.text = kwargs.pop('min_link')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_track_interface_track_interface_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        track = ET.SubElement(port_channel, "track")
        interface = ET.SubElement(track, "interface")
        track_interface_name_key = ET.SubElement(interface, "track-interface-name")
        track_interface_name_key.text = kwargs.pop('track_interface_name')
        track_interface_type = ET.SubElement(interface, "track-interface-type")
        track_interface_type.text = kwargs.pop('track_interface_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_track_interface_track_interface_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        track = ET.SubElement(port_channel, "track")
        interface = ET.SubElement(track, "interface")
        track_interface_type_key = ET.SubElement(interface, "track-interface-type")
        track_interface_type_key.text = kwargs.pop('track_interface_type')
        track_interface_name = ET.SubElement(interface, "track-interface-name")
        track_interface_name.text = kwargs.pop('track_interface_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_track_remove_remove_all_track_interfaces(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        track = ET.SubElement(port_channel, "track")
        remove = ET.SubElement(track, "remove")
        remove_all_track_interfaces = ET.SubElement(remove, "remove-all-track-interfaces")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_edge_loop_detection_eldprio(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        edge_loop_detection = ET.SubElement(port_channel, "edge-loop-detection")
        eldprio = ET.SubElement(edge_loop_detection, "eldprio")
        eldprio.text = kwargs.pop('eldprio')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_edge_loop_detection_eldvlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        edge_loop_detection = ET.SubElement(port_channel, "edge-loop-detection")
        eldvlan = ET.SubElement(edge_loop_detection, "eldvlan")
        eldvlan.text = kwargs.pop('eldvlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_load_balance(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        load_balance = ET.SubElement(port_channel, "load-balance")
        load_balance.text = kwargs.pop('load_balance')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_mac_access_group_mac_access_list(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        mac = ET.SubElement(port_channel, "mac", xmlns="urn:brocade.com:mgmt:brocade-mac-access-list")
        access_group = ET.SubElement(mac, "access-group")
        mac_direction_key = ET.SubElement(access_group, "mac-direction")
        mac_direction_key.text = kwargs.pop('mac_direction')
        mac_access_list = ET.SubElement(access_group, "mac-access-list")
        mac_access_list.text = kwargs.pop('mac_access_list')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_mac_access_group_mac_direction(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        mac = ET.SubElement(port_channel, "mac", xmlns="urn:brocade.com:mgmt:brocade-mac-access-list")
        access_group = ET.SubElement(mac, "access-group")
        mac_access_list_key = ET.SubElement(access_group, "mac-access-list")
        mac_access_list_key.text = kwargs.pop('mac_access_list')
        mac_direction = ET.SubElement(access_group, "mac-direction")
        mac_direction.text = kwargs.pop('mac_direction')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_mac_access_group_traffic_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        mac = ET.SubElement(port_channel, "mac", xmlns="urn:brocade.com:mgmt:brocade-mac-access-list")
        access_group = ET.SubElement(mac, "access-group")
        mac_access_list_key = ET.SubElement(access_group, "mac-access-list")
        mac_access_list_key.text = kwargs.pop('mac_access_list')
        mac_direction_key = ET.SubElement(access_group, "mac-direction")
        mac_direction_key.text = kwargs.pop('mac_direction')
        traffic_type = ET.SubElement(access_group, "traffic-type")
        traffic_type.text = kwargs.pop('traffic_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_hide_vrrp_holer_vrrp_vrid(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        hide_vrrp_holer = ET.SubElement(port_channel, "hide-vrrp-holer", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrrp = ET.SubElement(hide_vrrp_holer, "vrrp")
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        vrid = ET.SubElement(vrrp, "vrid")
        vrid.text = kwargs.pop('vrid')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_hide_vrrp_holer_vrrp_version(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        hide_vrrp_holer = ET.SubElement(port_channel, "hide-vrrp-holer", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrrp = ET.SubElement(hide_vrrp_holer, "vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version = ET.SubElement(vrrp, "version")
        version.text = kwargs.pop('version')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_hide_vrrp_holer_vrrp_virtual_ip_virtual_ipaddr(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        hide_vrrp_holer = ET.SubElement(port_channel, "hide-vrrp-holer", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrrp = ET.SubElement(hide_vrrp_holer, "vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        virtual_ip = ET.SubElement(vrrp, "virtual-ip")
        virtual_ipaddr = ET.SubElement(virtual_ip, "virtual-ipaddr")
        virtual_ipaddr.text = kwargs.pop('virtual_ipaddr')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_hide_vrrp_holer_vrrp_track_interface_interface_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        hide_vrrp_holer = ET.SubElement(port_channel, "hide-vrrp-holer", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrrp = ET.SubElement(hide_vrrp_holer, "vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        track = ET.SubElement(vrrp, "track")
        interface = ET.SubElement(track, "interface")
        interface_name_key = ET.SubElement(interface, "interface-name")
        interface_name_key.text = kwargs.pop('interface_name')
        interface_type = ET.SubElement(interface, "interface-type")
        interface_type.text = kwargs.pop('interface_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_hide_vrrp_holer_vrrp_track_interface_interface_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        hide_vrrp_holer = ET.SubElement(port_channel, "hide-vrrp-holer", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrrp = ET.SubElement(hide_vrrp_holer, "vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        track = ET.SubElement(vrrp, "track")
        interface = ET.SubElement(track, "interface")
        interface_type_key = ET.SubElement(interface, "interface-type")
        interface_type_key.text = kwargs.pop('interface_type')
        interface_name = ET.SubElement(interface, "interface-name")
        interface_name.text = kwargs.pop('interface_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_hide_vrrp_holer_vrrp_track_interface_track_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        hide_vrrp_holer = ET.SubElement(port_channel, "hide-vrrp-holer", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrrp = ET.SubElement(hide_vrrp_holer, "vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        track = ET.SubElement(vrrp, "track")
        interface = ET.SubElement(track, "interface")
        interface_type_key = ET.SubElement(interface, "interface-type")
        interface_type_key.text = kwargs.pop('interface_type')
        interface_name_key = ET.SubElement(interface, "interface-name")
        interface_name_key.text = kwargs.pop('interface_name')
        track_priority = ET.SubElement(interface, "track-priority")
        track_priority.text = kwargs.pop('track_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_hide_vrrp_holer_vrrp_advertisement_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        hide_vrrp_holer = ET.SubElement(port_channel, "hide-vrrp-holer", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrrp = ET.SubElement(hide_vrrp_holer, "vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        advertisement_interval = ET.SubElement(vrrp, "advertisement-interval")
        advertisement_interval.text = kwargs.pop('advertisement_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_hide_vrrp_holer_vrrp_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        hide_vrrp_holer = ET.SubElement(port_channel, "hide-vrrp-holer", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrrp = ET.SubElement(hide_vrrp_holer, "vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        enable = ET.SubElement(vrrp, "enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_hide_vrrp_holer_vrrp_hold_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        hide_vrrp_holer = ET.SubElement(port_channel, "hide-vrrp-holer", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrrp = ET.SubElement(hide_vrrp_holer, "vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        hold_time = ET.SubElement(vrrp, "hold-time")
        hold_time.text = kwargs.pop('hold_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_hide_vrrp_holer_vrrp_preempt_mode(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        hide_vrrp_holer = ET.SubElement(port_channel, "hide-vrrp-holer", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrrp = ET.SubElement(hide_vrrp_holer, "vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        preempt_mode = ET.SubElement(vrrp, "preempt-mode")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_hide_vrrp_holer_vrrp_arp_unicast_request_receive(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        hide_vrrp_holer = ET.SubElement(port_channel, "hide-vrrp-holer", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrrp = ET.SubElement(hide_vrrp_holer, "vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        arp = ET.SubElement(vrrp, "arp")
        unicast_request = ET.SubElement(arp, "unicast-request")
        receive = ET.SubElement(unicast_request, "receive")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_hide_vrrp_holer_vrrp_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        hide_vrrp_holer = ET.SubElement(port_channel, "hide-vrrp-holer", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrrp = ET.SubElement(hide_vrrp_holer, "vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        priority = ET.SubElement(vrrp, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_hide_vrrp_holer_vrrp_description(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        hide_vrrp_holer = ET.SubElement(port_channel, "hide-vrrp-holer", xmlns="urn:brocade.com:mgmt:brocade-vrrp")
        vrrp = ET.SubElement(hide_vrrp_holer, "vrrp")
        vrid_key = ET.SubElement(vrrp, "vrid")
        vrid_key.text = kwargs.pop('vrid')
        version_key = ET.SubElement(vrrp, "version")
        version_key.text = kwargs.pop('version')
        description = ET.SubElement(vrrp, "description")
        description.text = kwargs.pop('description')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_fcoeport_fcoeport_map(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        fcoeport = ET.SubElement(port_channel, "fcoeport", xmlns="urn:brocade.com:mgmt:brocade-fcoe")
        fcoeport_map = ET.SubElement(fcoeport, "fcoeport-map")
        fcoeport_map.text = kwargs.pop('fcoeport_map')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_ip_acl_interface_ip_access_group_ip_access_list(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        ip_acl_interface = ET.SubElement(port_channel, "ip-acl-interface", xmlns="urn:brocade.com:mgmt:brocade-ip-access-list")
        ip = ET.SubElement(ip_acl_interface, "ip")
        access_group = ET.SubElement(ip, "access-group")
        ip_direction_key = ET.SubElement(access_group, "ip-direction")
        ip_direction_key.text = kwargs.pop('ip_direction')
        ip_access_list = ET.SubElement(access_group, "ip-access-list")
        ip_access_list.text = kwargs.pop('ip_access_list')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_ip_acl_interface_ip_access_group_ip_direction(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        ip_acl_interface = ET.SubElement(port_channel, "ip-acl-interface", xmlns="urn:brocade.com:mgmt:brocade-ip-access-list")
        ip = ET.SubElement(ip_acl_interface, "ip")
        access_group = ET.SubElement(ip, "access-group")
        ip_access_list_key = ET.SubElement(access_group, "ip-access-list")
        ip_access_list_key.text = kwargs.pop('ip_access_list')
        ip_direction = ET.SubElement(access_group, "ip-direction")
        ip_direction.text = kwargs.pop('ip_direction')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_ip_acl_interface_ip_access_group_traffic_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        ip_acl_interface = ET.SubElement(port_channel, "ip-acl-interface", xmlns="urn:brocade.com:mgmt:brocade-ip-access-list")
        ip = ET.SubElement(ip_acl_interface, "ip")
        access_group = ET.SubElement(ip, "access-group")
        ip_access_list_key = ET.SubElement(access_group, "ip-access-list")
        ip_access_list_key.text = kwargs.pop('ip_access_list')
        ip_direction_key = ET.SubElement(access_group, "ip-direction")
        ip_direction_key.text = kwargs.pop('ip_direction')
        traffic_type = ET.SubElement(access_group, "traffic-type")
        traffic_type.text = kwargs.pop('traffic_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_service_policy_in_cg(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        service_policy = ET.SubElement(port_channel, "service-policy", xmlns="urn:brocade.com:mgmt:brocade-policer")
        in_cg = ET.SubElement(service_policy, "in")
        in_cg.text = kwargs.pop('in_cg')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_service_policy_out(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        service_policy = ET.SubElement(port_channel, "service-policy", xmlns="urn:brocade.com:mgmt:brocade-policer")
        out = ET.SubElement(service_policy, "out")
        out.text = kwargs.pop('out')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_port_profile_port(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        port_profile_port = ET.SubElement(port_channel, "port-profile-port", xmlns="urn:brocade.com:mgmt:brocade-port-profile")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_port_profile_to_interface_associations_port_profile_port_port_to_port_profile_domain_association_profile_domain_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        port_profile_to_interface_associations = ET.SubElement(port_channel, "port-profile-to-interface-associations", xmlns="urn:brocade.com:mgmt:brocade-port-profile")
        port_profile_port = ET.SubElement(port_profile_to_interface_associations, "port-profile-port")
        port_to_port_profile_domain_association = ET.SubElement(port_profile_port, "port-to-port-profile-domain-association")
        profile_domain_name = ET.SubElement(port_to_port_profile_domain_association, "profile-domain-name")
        profile_domain_name.text = kwargs.pop('profile_domain_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_port_profile_to_interface_associations_port_profile_port_port_to_port_profile_associations_port_to_port_profile_association(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        port_profile_to_interface_associations = ET.SubElement(port_channel, "port-profile-to-interface-associations", xmlns="urn:brocade.com:mgmt:brocade-port-profile")
        port_profile_port = ET.SubElement(port_profile_to_interface_associations, "port-profile-port")
        port_to_port_profile_associations = ET.SubElement(port_profile_port, "port-to-port-profile-associations")
        port_to_port_profile_association = ET.SubElement(port_to_port_profile_associations, "port-to-port-profile-association")
        port_to_port_profile_association.text = kwargs.pop('port_to_port_profile_association')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_priority_tag_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        priority_tag_enable = ET.SubElement(port_channel, "priority-tag-enable", xmlns="urn:brocade.com:mgmt:brocade-qos")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_qos_default_cos(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(port_channel, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        default_cos = ET.SubElement(qos, "default-cos")
        default_cos.text = kwargs.pop('default_cos')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_qos_trust_trust_cos(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(port_channel, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        trust = ET.SubElement(qos, "trust")
        trust_cos = ET.SubElement(trust, "trust-cos")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_qos_trust_trust_dscp(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(port_channel, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        trust = ET.SubElement(qos, "trust")
        trust_dscp = ET.SubElement(trust, "trust-dscp")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_qos_cos_mutation(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(port_channel, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        cos_mutation = ET.SubElement(qos, "cos-mutation")
        cos_mutation.text = kwargs.pop('cos_mutation')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_qos_cos_traffic_class(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(port_channel, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        cos_traffic_class = ET.SubElement(qos, "cos-traffic-class")
        cos_traffic_class.text = kwargs.pop('cos_traffic_class')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_qos_dscp_mutation(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(port_channel, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        dscp_mutation = ET.SubElement(qos, "dscp-mutation")
        dscp_mutation.text = kwargs.pop('dscp_mutation')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_qos_dscp_traffic_class(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(port_channel, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        dscp_traffic_class = ET.SubElement(qos, "dscp-traffic-class")
        dscp_traffic_class.text = kwargs.pop('dscp_traffic_class')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_qos_dscp_cos(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(port_channel, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        dscp_cos = ET.SubElement(qos, "dscp-cos")
        dscp_cos.text = kwargs.pop('dscp_cos')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_qos_random_detect_traffic_class_red_tc_value(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(port_channel, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        random_detect = ET.SubElement(qos, "random-detect")
        traffic_class = ET.SubElement(random_detect, "traffic-class")
        red_tc_value = ET.SubElement(traffic_class, "red-tc-value")
        red_tc_value.text = kwargs.pop('red_tc_value')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_qos_random_detect_traffic_class_red_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(port_channel, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        random_detect = ET.SubElement(qos, "random-detect")
        traffic_class = ET.SubElement(random_detect, "traffic-class")
        red_tc_value_key = ET.SubElement(traffic_class, "red-tc-value")
        red_tc_value_key.text = kwargs.pop('red_tc_value')
        red_enable = ET.SubElement(traffic_class, "red-enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_qos_random_detect_traffic_class_red_profile_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(port_channel, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        random_detect = ET.SubElement(qos, "random-detect")
        traffic_class = ET.SubElement(random_detect, "traffic-class")
        red_tc_value_key = ET.SubElement(traffic_class, "red-tc-value")
        red_tc_value_key.text = kwargs.pop('red_tc_value')
        red_profile_id = ET.SubElement(traffic_class, "red-profile-id")
        red_profile_id.text = kwargs.pop('red_profile_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_qos_drop_monitor_drop_monitor_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(port_channel, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        drop_monitor = ET.SubElement(qos, "drop-monitor")
        drop_monitor_enable = ET.SubElement(drop_monitor, "drop-monitor-enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_qos_flowcontrol_link_level_flowcontrol_flowcontrol_tx(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(port_channel, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        flowcontrol = ET.SubElement(qos, "flowcontrol")
        link_level_flowcontrol = ET.SubElement(flowcontrol, "link-level-flowcontrol")
        flowcontrol_tx = ET.SubElement(link_level_flowcontrol, "flowcontrol-tx")
        flowcontrol_tx.text = kwargs.pop('flowcontrol_tx')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_qos_flowcontrol_link_level_flowcontrol_flowcontrol_rx(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(port_channel, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        flowcontrol = ET.SubElement(qos, "flowcontrol")
        link_level_flowcontrol = ET.SubElement(flowcontrol, "link-level-flowcontrol")
        flowcontrol_rx = ET.SubElement(link_level_flowcontrol, "flowcontrol-rx")
        flowcontrol_rx.text = kwargs.pop('flowcontrol_rx')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_qos_flowcontrol_pfc_pfc_cos(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(port_channel, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        flowcontrol = ET.SubElement(qos, "flowcontrol")
        pfc = ET.SubElement(flowcontrol, "pfc")
        pfc_cos = ET.SubElement(pfc, "pfc-cos")
        pfc_cos.text = kwargs.pop('pfc_cos')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_qos_flowcontrol_pfc_pfc_flowcontrol_tx(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(port_channel, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        flowcontrol = ET.SubElement(qos, "flowcontrol")
        pfc = ET.SubElement(flowcontrol, "pfc")
        pfc_cos_key = ET.SubElement(pfc, "pfc-cos")
        pfc_cos_key.text = kwargs.pop('pfc_cos')
        pfc_flowcontrol_tx = ET.SubElement(pfc, "pfc-flowcontrol-tx")
        pfc_flowcontrol_tx.text = kwargs.pop('pfc_flowcontrol_tx')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_qos_flowcontrol_pfc_pfc_flowcontrol_rx(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        qos = ET.SubElement(port_channel, "qos", xmlns="urn:brocade.com:mgmt:brocade-qos")
        flowcontrol = ET.SubElement(qos, "flowcontrol")
        pfc = ET.SubElement(flowcontrol, "pfc")
        pfc_cos_key = ET.SubElement(pfc, "pfc-cos")
        pfc_cos_key.text = kwargs.pop('pfc_cos')
        pfc_flowcontrol_rx = ET.SubElement(pfc, "pfc-flowcontrol-rx")
        pfc_flowcontrol_rx.text = kwargs.pop('pfc_flowcontrol_rx')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_vlan_classifier_activate_group_groupid(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        vlan = ET.SubElement(port_channel, "vlan", xmlns="urn:brocade.com:mgmt:brocade-vlan")
        classifier = ET.SubElement(vlan, "classifier")
        activate = ET.SubElement(classifier, "activate")
        group = ET.SubElement(activate, "group")
        groupid = ET.SubElement(group, "groupid")
        groupid.text = kwargs.pop('groupid')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_vlan_classifier_activate_group_vlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        vlan = ET.SubElement(port_channel, "vlan", xmlns="urn:brocade.com:mgmt:brocade-vlan")
        classifier = ET.SubElement(vlan, "classifier")
        activate = ET.SubElement(classifier, "activate")
        group = ET.SubElement(activate, "group")
        groupid_key = ET.SubElement(group, "groupid")
        groupid_key.text = kwargs.pop('groupid')
        vlan = ET.SubElement(group, "vlan")
        vlan.text = kwargs.pop('vlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_bpdu_drop_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        bpdu_drop = ET.SubElement(port_channel, "bpdu-drop", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        enable = ET.SubElement(bpdu_drop, "enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_bpdu_drop_direction(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        bpdu_drop = ET.SubElement(port_channel, "bpdu-drop", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        direction = ET.SubElement(bpdu_drop, "direction")
        direction.text = kwargs.pop('direction')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_tunnel_tagged_ieee_bpdu(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        tunnel = ET.SubElement(port_channel, "tunnel", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        tagged_ieee_bpdu = ET.SubElement(tunnel, "tagged-ieee-bpdu")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_spanning_tree_autoedge(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(port_channel, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        autoedge = ET.SubElement(spanning_tree, "autoedge")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_spanning_tree_cost(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(port_channel, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        cost = ET.SubElement(spanning_tree, "cost")
        cost.text = kwargs.pop('cost')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_spanning_tree_portfast_portfastbasic(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(port_channel, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        portfast = ET.SubElement(spanning_tree, "portfast")
        portfastbasic = ET.SubElement(portfast, "portfastbasic")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_spanning_tree_portfast_bpdu_guard(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(port_channel, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        portfast = ET.SubElement(spanning_tree, "portfast")
        bpdu_guard = ET.SubElement(portfast, "bpdu-guard")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_spanning_tree_portfast_bpdu_filter(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(port_channel, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        portfast = ET.SubElement(spanning_tree, "portfast")
        bpdu_filter = ET.SubElement(portfast, "bpdu-filter")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_spanning_tree_edgeport_edgeportbasic(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(port_channel, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        edgeport = ET.SubElement(spanning_tree, "edgeport")
        edgeportbasic = ET.SubElement(edgeport, "edgeportbasic")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_spanning_tree_edgeport_bpdu_guard(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(port_channel, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        edgeport = ET.SubElement(spanning_tree, "edgeport")
        bpdu_guard = ET.SubElement(edgeport, "bpdu-guard")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_spanning_tree_edgeport_bpdu_filter(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(port_channel, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        edgeport = ET.SubElement(spanning_tree, "edgeport")
        bpdu_filter = ET.SubElement(edgeport, "bpdu-filter")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_spanning_tree_guard_root(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(port_channel, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        guard = ET.SubElement(spanning_tree, "guard")
        root = ET.SubElement(guard, "root")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_spanning_tree_hello_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(port_channel, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        hello_time = ET.SubElement(spanning_tree, "hello-time")
        hello_time.text = kwargs.pop('hello_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_spanning_tree_bpdu_mac(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(port_channel, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        bpdu_mac = ET.SubElement(spanning_tree, "bpdu-mac")
        bpdu_mac.text = kwargs.pop('bpdu_mac')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_spanning_tree_link_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(port_channel, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        link_type = ET.SubElement(spanning_tree, "link-type")
        link_type.text = kwargs.pop('link_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_spanning_tree_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(port_channel, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        priority = ET.SubElement(spanning_tree, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_spanning_tree_restricted_role(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(port_channel, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        restricted_role = ET.SubElement(spanning_tree, "restricted-role")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_spanning_tree_restricted_tcn(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(port_channel, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        restricted_tcn = ET.SubElement(spanning_tree, "restricted-tcn")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_spanning_tree_shutdown(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(port_channel, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        shutdown = ET.SubElement(spanning_tree, "shutdown")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_spanning_tree_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(port_channel, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        vlan = ET.SubElement(spanning_tree, "vlan")
        id = ET.SubElement(vlan, "id")
        id.text = kwargs.pop('id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_spanning_tree_vlan_cost(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(port_channel, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        vlan = ET.SubElement(spanning_tree, "vlan")
        id_key = ET.SubElement(vlan, "id")
        id_key.text = kwargs.pop('id')
        cost = ET.SubElement(vlan, "cost")
        cost.text = kwargs.pop('cost')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_spanning_tree_vlan_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(port_channel, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        vlan = ET.SubElement(spanning_tree, "vlan")
        id_key = ET.SubElement(vlan, "id")
        id_key.text = kwargs.pop('id')
        priority = ET.SubElement(vlan, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_spanning_tree_vlan_guard_root(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(port_channel, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        vlan = ET.SubElement(spanning_tree, "vlan")
        id_key = ET.SubElement(vlan, "id")
        id_key.text = kwargs.pop('id')
        guard = ET.SubElement(vlan, "guard")
        root = ET.SubElement(guard, "root")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_spanning_tree_instance_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(port_channel, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        instance = ET.SubElement(spanning_tree, "instance")
        id = ET.SubElement(instance, "id")
        id.text = kwargs.pop('id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_spanning_tree_instance_cost(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(port_channel, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        instance = ET.SubElement(spanning_tree, "instance")
        id_key = ET.SubElement(instance, "id")
        id_key.text = kwargs.pop('id')
        cost = ET.SubElement(instance, "cost")
        cost.text = kwargs.pop('cost')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_spanning_tree_instance_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(port_channel, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        instance = ET.SubElement(spanning_tree, "instance")
        id_key = ET.SubElement(instance, "id")
        id_key.text = kwargs.pop('id')
        priority = ET.SubElement(instance, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_spanning_tree_instance_restricted_role(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(port_channel, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        instance = ET.SubElement(spanning_tree, "instance")
        id_key = ET.SubElement(instance, "id")
        id_key.text = kwargs.pop('id')
        restricted_role = ET.SubElement(instance, "restricted-role")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_spanning_tree_instance_restricted_tcn(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(port_channel, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        instance = ET.SubElement(spanning_tree, "instance")
        id_key = ET.SubElement(instance, "id")
        id_key.text = kwargs.pop('id')
        restricted_tcn = ET.SubElement(instance, "restricted-tcn")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_port_channel_spanning_tree_peer_switch(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        port_channel = ET.SubElement(interface, "port-channel")
        name_key = ET.SubElement(port_channel, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(port_channel, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        peer_switch = ET.SubElement(spanning_tree, "peer-switch")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_management_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        management = ET.SubElement(interface, "management")
        name = ET.SubElement(management, "name")
        name.text = kwargs.pop('name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_management_tcp_tcp_burstrate(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        management = ET.SubElement(interface, "management")
        name_key = ET.SubElement(management, "name")
        name_key.text = kwargs.pop('name')
        tcp = ET.SubElement(management, "tcp")
        tcp_burstrate = ET.SubElement(tcp, "tcp_burstrate")
        tcp_burstrate.text = kwargs.pop('tcp_burstrate')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_management_tcp_tcp_lockdown(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        management = ET.SubElement(interface, "management")
        name_key = ET.SubElement(management, "name")
        name_key.text = kwargs.pop('name')
        tcp = ET.SubElement(management, "tcp")
        tcp_lockdown = ET.SubElement(tcp, "tcp_lockdown")
        tcp_lockdown.text = kwargs.pop('tcp_lockdown')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_management_ip_icmp_unreachable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        management = ET.SubElement(interface, "management")
        name_key = ET.SubElement(management, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(management, "ip")
        icmp = ET.SubElement(ip, "icmp")
        unreachable = ET.SubElement(icmp, "unreachable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_management_ip_icmp_echo_reply(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        management = ET.SubElement(interface, "management")
        name_key = ET.SubElement(management, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(management, "ip")
        icmp = ET.SubElement(ip, "icmp")
        echo_reply = ET.SubElement(icmp, "echo_reply")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_management_ip_icmp_rate_limiting(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        management = ET.SubElement(interface, "management")
        name_key = ET.SubElement(management, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(management, "ip")
        icmp = ET.SubElement(ip, "icmp")
        rate_limiting = ET.SubElement(icmp, "rate_limiting")
        rate_limiting.text = kwargs.pop('rate_limiting')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_management_ip_address_dhcp(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        management = ET.SubElement(interface, "management")
        name_key = ET.SubElement(management, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(management, "ip")
        address = ET.SubElement(ip, "address")
        dhcp = ET.SubElement(address, "dhcp")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_management_ip_address_ip_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        management = ET.SubElement(interface, "management")
        name_key = ET.SubElement(management, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(management, "ip")
        address = ET.SubElement(ip, "address")
        ip_address = ET.SubElement(address, "ip-address")
        ip_address.text = kwargs.pop('ip_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_management_ip_gateway_gateway_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        management = ET.SubElement(interface, "management")
        name_key = ET.SubElement(management, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(management, "ip")
        gateway = ET.SubElement(ip, "gateway")
        gateway_address = ET.SubElement(gateway, "gateway-address")
        gateway_address.text = kwargs.pop('gateway_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_management_ip_oper_address_oper_ip_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        management = ET.SubElement(interface, "management")
        name_key = ET.SubElement(management, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(management, "ip")
        oper_address = ET.SubElement(ip, "oper-address")
        oper_ip_address = ET.SubElement(oper_address, "oper-ip-address")
        oper_ip_address.text = kwargs.pop('oper_ip_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_management_ip_oper_gateway_con_oper_gateway(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        management = ET.SubElement(interface, "management")
        name_key = ET.SubElement(management, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(management, "ip")
        oper_gateway_con = ET.SubElement(ip, "oper-gateway-con")
        oper_gateway = ET.SubElement(oper_gateway_con, "oper-gateway")
        oper_gateway.text = kwargs.pop('oper_gateway')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_management_ip_access_group_mgmt_ip_access_list(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        management = ET.SubElement(interface, "management")
        name_key = ET.SubElement(management, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(management, "ip")
        access_group = ET.SubElement(ip, "access-group", xmlns="urn:brocade.com:mgmt:brocade-ip-access-list")
        mgmt_ip_access_list = ET.SubElement(access_group, "mgmt-ip-access-list")
        mgmt_ip_access_list.text = kwargs.pop('mgmt_ip_access_list')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_management_ip_access_group_mgmt_ip_direction(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        management = ET.SubElement(interface, "management")
        name_key = ET.SubElement(management, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(management, "ip")
        access_group = ET.SubElement(ip, "access-group", xmlns="urn:brocade.com:mgmt:brocade-ip-access-list")
        mgmt_ip_direction = ET.SubElement(access_group, "mgmt-ip-direction")
        mgmt_ip_direction.text = kwargs.pop('mgmt_ip_direction')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_management_ipv6_icmpv6_v6_unreachable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        management = ET.SubElement(interface, "management")
        name_key = ET.SubElement(management, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(management, "ipv6")
        icmpv6 = ET.SubElement(ipv6, "icmpv6")
        v6_unreachable = ET.SubElement(icmpv6, "v6_unreachable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_management_ipv6_icmpv6_v6_echo_reply(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        management = ET.SubElement(interface, "management")
        name_key = ET.SubElement(management, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(management, "ipv6")
        icmpv6 = ET.SubElement(ipv6, "icmpv6")
        v6_echo_reply = ET.SubElement(icmpv6, "v6_echo_reply")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_management_ipv6_icmpv6_v6_rate_limiting(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        management = ET.SubElement(interface, "management")
        name_key = ET.SubElement(management, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(management, "ipv6")
        icmpv6 = ET.SubElement(ipv6, "icmpv6")
        v6_rate_limiting = ET.SubElement(icmpv6, "v6_rate_limiting")
        v6_rate_limiting.text = kwargs.pop('v6_rate_limiting')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_management_ipv6_ipv6_address_cont_ipv6_global_cont_ipv6_global_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        management = ET.SubElement(interface, "management")
        name_key = ET.SubElement(management, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(management, "ipv6")
        ipv6_address_cont = ET.SubElement(ipv6, "ipv6-address-cont")
        ipv6_global_cont = ET.SubElement(ipv6_address_cont, "ipv6-global-cont")
        ipv6_global_address = ET.SubElement(ipv6_global_cont, "ipv6-global-address")
        ipv6_global_address.text = kwargs.pop('ipv6_global_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_management_ipv6_ipv6_address_cont_ipv6_global_cont_ipv6_global_address_eui64(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        management = ET.SubElement(interface, "management")
        name_key = ET.SubElement(management, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(management, "ipv6")
        ipv6_address_cont = ET.SubElement(ipv6, "ipv6-address-cont")
        ipv6_global_cont = ET.SubElement(ipv6_address_cont, "ipv6-global-cont")
        ipv6_global_address_eui64 = ET.SubElement(ipv6_global_cont, "ipv6-global-address-eui64")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_management_ipv6_ipv6_address_cont_autoconfig(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        management = ET.SubElement(interface, "management")
        name_key = ET.SubElement(management, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(management, "ipv6")
        ipv6_address_cont = ET.SubElement(ipv6, "ipv6-address-cont")
        autoconfig = ET.SubElement(ipv6_address_cont, "autoconfig")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_management_ipv6_ipv6_address_cont_dhcpv6(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        management = ET.SubElement(interface, "management")
        name_key = ET.SubElement(management, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(management, "ipv6")
        ipv6_address_cont = ET.SubElement(ipv6, "ipv6-address-cont")
        dhcpv6 = ET.SubElement(ipv6_address_cont, "dhcpv6")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_management_ipv6_access_group_mgmt_ipv6_access_list(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        management = ET.SubElement(interface, "management")
        name_key = ET.SubElement(management, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(management, "ipv6")
        access_group = ET.SubElement(ipv6, "access-group", xmlns="urn:brocade.com:mgmt:brocade-ipv6-access-list")
        mgmt_ipv6_access_list = ET.SubElement(access_group, "mgmt-ipv6-access-list")
        mgmt_ipv6_access_list.text = kwargs.pop('mgmt_ipv6_access_list')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_management_ipv6_access_group_mgmt_ip_direction(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        management = ET.SubElement(interface, "management")
        name_key = ET.SubElement(management, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(management, "ipv6")
        access_group = ET.SubElement(ipv6, "access-group", xmlns="urn:brocade.com:mgmt:brocade-ipv6-access-list")
        mgmt_ip_direction = ET.SubElement(access_group, "mgmt-ip-direction")
        mgmt_ip_direction.text = kwargs.pop('mgmt_ip_direction')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_management_vrf_vrf_forwarding(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        management = ET.SubElement(interface, "management")
        name_key = ET.SubElement(management, "name")
        name_key.text = kwargs.pop('name')
        vrf = ET.SubElement(management, "vrf")
        vrf_forwarding = ET.SubElement(vrf, "vrf-forwarding")
        vrf_forwarding.text = kwargs.pop('vrf_forwarding')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_management_speed(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        management = ET.SubElement(interface, "management")
        name_key = ET.SubElement(management, "name")
        name_key.text = kwargs.pop('name')
        speed = ET.SubElement(management, "speed")
        speed.text = kwargs.pop('speed')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_management_line_speed_actual(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        management = ET.SubElement(interface, "management")
        name_key = ET.SubElement(management, "name")
        name_key.text = kwargs.pop('name')
        line_speed = ET.SubElement(management, "line-speed")
        actual = ET.SubElement(line_speed, "actual")
        actual.text = kwargs.pop('actual')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_management_line_speed_configured(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        management = ET.SubElement(interface, "management")
        name_key = ET.SubElement(management, "name")
        name_key.text = kwargs.pop('name')
        line_speed = ET.SubElement(management, "line-speed")
        configured = ET.SubElement(line_speed, "configured")
        configured.text = kwargs.pop('configured')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_management_shutdown_management(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        management = ET.SubElement(interface, "management")
        name_key = ET.SubElement(management, "name")
        name_key.text = kwargs.pop('name')
        shutdown_management = ET.SubElement(management, "shutdown_management")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_management_shutdown_management_oper(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        management = ET.SubElement(interface, "management")
        name_key = ET.SubElement(management, "name")
        name_key.text = kwargs.pop('name')
        shutdown_management_oper = ET.SubElement(management, "shutdown_management_oper")
        shutdown_management_oper.text = kwargs.pop('shutdown_management_oper')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fc_port_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fc_port = ET.SubElement(interface, "fc-port")
        name = ET.SubElement(fc_port, "name")
        name.text = kwargs.pop('name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fc_port_fc_speed_cfg(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fc_port = ET.SubElement(interface, "fc-port")
        name_key = ET.SubElement(fc_port, "name")
        name_key.text = kwargs.pop('name')
        fc_speed_cfg = ET.SubElement(fc_port, "fc-speed-cfg")
        fc_speed_cfg.text = kwargs.pop('fc_speed_cfg')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fc_port_fill_word(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fc_port = ET.SubElement(interface, "fc-port")
        name_key = ET.SubElement(fc_port, "name")
        name_key.text = kwargs.pop('name')
        fill_word = ET.SubElement(fc_port, "fill-word")
        fill_word.text = kwargs.pop('fill_word')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fc_port_long_distance(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fc_port = ET.SubElement(interface, "fc-port")
        name_key = ET.SubElement(fc_port, "name")
        name_key.text = kwargs.pop('name')
        long_distance = ET.SubElement(fc_port, "long-distance")
        long_distance.text = kwargs.pop('long_distance')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fc_port_vc_link_init(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fc_port = ET.SubElement(interface, "fc-port")
        name_key = ET.SubElement(fc_port, "name")
        name_key.text = kwargs.pop('name')
        vc_link_init = ET.SubElement(fc_port, "vc-link-init")
        vc_link_init.text = kwargs.pop('vc_link_init')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fc_port_desire_distance(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fc_port = ET.SubElement(interface, "fc-port")
        name_key = ET.SubElement(fc_port, "name")
        name_key.text = kwargs.pop('name')
        desire_distance = ET.SubElement(fc_port, "desire-distance")
        desire_distance.text = kwargs.pop('desire_distance')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fc_port_isl_r_rdy_mode(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fc_port = ET.SubElement(interface, "fc-port")
        name_key = ET.SubElement(fc_port, "name")
        name_key.text = kwargs.pop('name')
        isl_r_rdy_mode = ET.SubElement(fc_port, "isl-r_rdy-mode")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fc_port_trunk_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fc_port = ET.SubElement(interface, "fc-port")
        name_key = ET.SubElement(fc_port, "name")
        name_key.text = kwargs.pop('name')
        trunk_enable = ET.SubElement(fc_port, "trunk-enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fc_port_shutdown(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fc_port = ET.SubElement(interface, "fc-port")
        name_key = ET.SubElement(fc_port, "name")
        name_key.text = kwargs.pop('name')
        shutdown = ET.SubElement(fc_port, "shutdown")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fc_port_config_mode(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fc_port = ET.SubElement(interface, "fc-port")
        name_key = ET.SubElement(fc_port, "name")
        name_key.text = kwargs.pop('name')
        config_mode = ET.SubElement(fc_port, "config-mode")
        config_mode.text = kwargs.pop('config_mode')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fc_port_fec_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fc_port = ET.SubElement(interface, "fc-port")
        name_key = ET.SubElement(fc_port, "name")
        name_key.text = kwargs.pop('name')
        fec_enable = ET.SubElement(fc_port, "fec-enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fc_port_description(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fc_port = ET.SubElement(interface, "fc-port")
        name_key = ET.SubElement(fc_port, "name")
        name_key.text = kwargs.pop('name')
        description = ET.SubElement(fc_port, "description")
        description.text = kwargs.pop('description')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fcoe_fcoe_interface_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fcoe = ET.SubElement(interface, "fcoe", xmlns="urn:brocade.com:mgmt:brocade-fcoe")
        fcoe_interface_name = ET.SubElement(fcoe, "fcoe-interface-name")
        fcoe_interface_name.text = kwargs.pop('fcoe_interface_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fcoe_fcoe_interface_shutdown(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fcoe = ET.SubElement(interface, "fcoe", xmlns="urn:brocade.com:mgmt:brocade-fcoe")
        fcoe_interface_name_key = ET.SubElement(fcoe, "fcoe-interface-name")
        fcoe_interface_name_key.text = kwargs.pop('fcoe_interface_name')
        fcoe_interface_shutdown = ET.SubElement(fcoe, "fcoe-interface-shutdown")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fcoe_fcoe_interface_bind_fcoe_interface_bind_type_fcoe_interface_bind_te_fcoe_interface_bind_te(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fcoe = ET.SubElement(interface, "fcoe", xmlns="urn:brocade.com:mgmt:brocade-fcoe")
        fcoe_interface_name_key = ET.SubElement(fcoe, "fcoe-interface-name")
        fcoe_interface_name_key.text = kwargs.pop('fcoe_interface_name')
        fcoe_interface_bind = ET.SubElement(fcoe, "fcoe-interface-bind")
        fcoe_interface_bind_type = ET.SubElement(fcoe_interface_bind, "fcoe-interface-bind-type")
        fcoe_interface_bind_te = ET.SubElement(fcoe_interface_bind_type, "fcoe-interface-bind-te")
        fcoe_interface_bind_te = ET.SubElement(fcoe_interface_bind_te, "fcoe-interface-bind-te")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fcoe_fcoe_interface_bind_fcoe_interface_bind_type_fcoe_interface_bind_fo_fcoe_interface_bind_fo(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fcoe = ET.SubElement(interface, "fcoe", xmlns="urn:brocade.com:mgmt:brocade-fcoe")
        fcoe_interface_name_key = ET.SubElement(fcoe, "fcoe-interface-name")
        fcoe_interface_name_key.text = kwargs.pop('fcoe_interface_name')
        fcoe_interface_bind = ET.SubElement(fcoe, "fcoe-interface-bind")
        fcoe_interface_bind_type = ET.SubElement(fcoe_interface_bind, "fcoe-interface-bind-type")
        fcoe_interface_bind_fo = ET.SubElement(fcoe_interface_bind_type, "fcoe-interface-bind-fo")
        fcoe_interface_bind_fo = ET.SubElement(fcoe_interface_bind_fo, "fcoe-interface-bind-fo")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fcoe_fcoe_interface_bind_fcoe_interface_bind_type_fcoe_interface_bind_po_fcoe_interface_bind_po(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fcoe = ET.SubElement(interface, "fcoe", xmlns="urn:brocade.com:mgmt:brocade-fcoe")
        fcoe_interface_name_key = ET.SubElement(fcoe, "fcoe-interface-name")
        fcoe_interface_name_key.text = kwargs.pop('fcoe_interface_name')
        fcoe_interface_bind = ET.SubElement(fcoe, "fcoe-interface-bind")
        fcoe_interface_bind_type = ET.SubElement(fcoe_interface_bind, "fcoe-interface-bind-type")
        fcoe_interface_bind_po = ET.SubElement(fcoe_interface_bind_type, "fcoe-interface-bind-po")
        fcoe_interface_bind_po = ET.SubElement(fcoe_interface_bind_po, "fcoe-interface-bind-po")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fcoe_fcoe_interface_bind_fcoe_interface_bind_type_fcoe_interface_bind_mac_fcoe_interface_bind_mac(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fcoe = ET.SubElement(interface, "fcoe", xmlns="urn:brocade.com:mgmt:brocade-fcoe")
        fcoe_interface_name_key = ET.SubElement(fcoe, "fcoe-interface-name")
        fcoe_interface_name_key.text = kwargs.pop('fcoe_interface_name')
        fcoe_interface_bind = ET.SubElement(fcoe, "fcoe-interface-bind")
        fcoe_interface_bind_type = ET.SubElement(fcoe_interface_bind, "fcoe-interface-bind-type")
        fcoe_interface_bind_mac = ET.SubElement(fcoe_interface_bind_type, "fcoe-interface-bind-mac")
        fcoe_interface_bind_mac = ET.SubElement(fcoe_interface_bind_mac, "fcoe-interface-bind-mac")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fcoe_fcoe_interface_bind_fcoe_interface_bind_type_fcoe_interface_bind_hu_fcoe_interface_bind_hu(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fcoe = ET.SubElement(interface, "fcoe", xmlns="urn:brocade.com:mgmt:brocade-fcoe")
        fcoe_interface_name_key = ET.SubElement(fcoe, "fcoe-interface-name")
        fcoe_interface_name_key.text = kwargs.pop('fcoe_interface_name')
        fcoe_interface_bind = ET.SubElement(fcoe, "fcoe-interface-bind")
        fcoe_interface_bind_type = ET.SubElement(fcoe_interface_bind, "fcoe-interface-bind-type")
        fcoe_interface_bind_hu = ET.SubElement(fcoe_interface_bind_type, "fcoe-interface-bind-hu")
        fcoe_interface_bind_hu = ET.SubElement(fcoe_interface_bind_hu, "fcoe-interface-bind-hu")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_fcoe_fcoe_interface_bind_fcoe_interface_bind_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface = ET.SubElement(config, "interface", xmlns="urn:brocade.com:mgmt:brocade-interface")
        fcoe = ET.SubElement(interface, "fcoe", xmlns="urn:brocade.com:mgmt:brocade-fcoe")
        fcoe_interface_name_key = ET.SubElement(fcoe, "fcoe-interface-name")
        fcoe_interface_name_key.text = kwargs.pop('fcoe_interface_name')
        fcoe_interface_bind = ET.SubElement(fcoe, "fcoe-interface-bind")
        fcoe_interface_bind_name = ET.SubElement(fcoe_interface_bind, "fcoe-interface-bind-name")
        fcoe_interface_bind_name.text = kwargs.pop('fcoe_interface_bind_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name = ET.SubElement(vlan, "name")
        name.text = kwargs.pop('name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_transport_service(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name_key = ET.SubElement(vlan, "name")
        name_key.text = kwargs.pop('name')
        transport_service = ET.SubElement(vlan, "transport-service")
        transport_service.text = kwargs.pop('transport_service')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_ifindex(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name_key = ET.SubElement(vlan, "name")
        name_key.text = kwargs.pop('name')
        ifindex = ET.SubElement(vlan, "ifindex")
        ifindex.text = kwargs.pop('ifindex')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_description(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name_key = ET.SubElement(vlan, "name")
        name_key.text = kwargs.pop('name')
        description = ET.SubElement(vlan, "description")
        description.text = kwargs.pop('description')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_vlan_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name_key = ET.SubElement(vlan, "name")
        name_key.text = kwargs.pop('name')
        vlan_name = ET.SubElement(vlan, "vlan-name")
        vlan_name.text = kwargs.pop('vlan_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_private_vlan_pvlan_type_leaf(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name_key = ET.SubElement(vlan, "name")
        name_key.text = kwargs.pop('name')
        private_vlan = ET.SubElement(vlan, "private-vlan")
        pvlan_type_leaf = ET.SubElement(private_vlan, "pvlan-type-leaf")
        pvlan_type_leaf.text = kwargs.pop('pvlan_type_leaf')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_private_vlan_association_sec_assoc_add(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name_key = ET.SubElement(vlan, "name")
        name_key.text = kwargs.pop('name')
        private_vlan = ET.SubElement(vlan, "private-vlan")
        association = ET.SubElement(private_vlan, "association")
        sec_assoc_add = ET.SubElement(association, "sec-assoc-add")
        sec_assoc_add.text = kwargs.pop('sec_assoc_add')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_private_vlan_association_sec_assoc_remove(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name_key = ET.SubElement(vlan, "name")
        name_key.text = kwargs.pop('name')
        private_vlan = ET.SubElement(vlan, "private-vlan")
        association = ET.SubElement(private_vlan, "association")
        sec_assoc_remove = ET.SubElement(association, "sec-assoc-remove")
        sec_assoc_remove.text = kwargs.pop('sec_assoc_remove')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_ip_arp_inspection_trust(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name_key = ET.SubElement(vlan, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(vlan, "ip")
        arp = ET.SubElement(ip, "arp", xmlns="urn:brocade.com:mgmt:brocade-dai")
        inspection = ET.SubElement(arp, "inspection")
        trust = ET.SubElement(inspection, "trust")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_ip_arp_inspection_filter_acl_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name_key = ET.SubElement(vlan, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(vlan, "ip")
        arp = ET.SubElement(ip, "arp", xmlns="urn:brocade.com:mgmt:brocade-dai")
        inspection = ET.SubElement(arp, "inspection")
        filter = ET.SubElement(inspection, "filter")
        acl_name = ET.SubElement(filter, "acl-name")
        acl_name.text = kwargs.pop('acl_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_ip_arp_inspection_logging_acl_match(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name_key = ET.SubElement(vlan, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(vlan, "ip")
        arp = ET.SubElement(ip, "arp", xmlns="urn:brocade.com:mgmt:brocade-dai")
        inspection = ET.SubElement(arp, "inspection")
        logging = ET.SubElement(inspection, "logging")
        acl_match = ET.SubElement(logging, "acl-match")
        acl_match.text = kwargs.pop('acl_match')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_ip_igmp_last_member_query_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name_key = ET.SubElement(vlan, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(vlan, "ip")
        igmp = ET.SubElement(ip, "igmp", xmlns="urn:brocade.com:mgmt:brocade-igmp-snooping")
        last_member_query_interval = ET.SubElement(igmp, "last-member-query-interval")
        last_member_query_interval.text = kwargs.pop('last_member_query_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_ip_igmp_query_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name_key = ET.SubElement(vlan, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(vlan, "ip")
        igmp = ET.SubElement(ip, "igmp", xmlns="urn:brocade.com:mgmt:brocade-igmp-snooping")
        query_interval = ET.SubElement(igmp, "query-interval")
        query_interval.text = kwargs.pop('query_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_ip_igmp_query_max_response_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name_key = ET.SubElement(vlan, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(vlan, "ip")
        igmp = ET.SubElement(ip, "igmp", xmlns="urn:brocade.com:mgmt:brocade-igmp-snooping")
        query_max_response_time = ET.SubElement(igmp, "query-max-response-time")
        query_max_response_time.text = kwargs.pop('query_max_response_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_ip_igmp_snooping_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name_key = ET.SubElement(vlan, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(vlan, "ip")
        igmp = ET.SubElement(ip, "igmp", xmlns="urn:brocade.com:mgmt:brocade-igmp-snooping")
        snooping = ET.SubElement(igmp, "snooping")
        enable = ET.SubElement(snooping, "enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_ip_igmp_snooping_fast_leave(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name_key = ET.SubElement(vlan, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(vlan, "ip")
        igmp = ET.SubElement(ip, "igmp", xmlns="urn:brocade.com:mgmt:brocade-igmp-snooping")
        snooping = ET.SubElement(igmp, "snooping")
        fast_leave = ET.SubElement(snooping, "fast-leave")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_ip_igmp_snooping_mrouter_timeout(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name_key = ET.SubElement(vlan, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(vlan, "ip")
        igmp = ET.SubElement(ip, "igmp", xmlns="urn:brocade.com:mgmt:brocade-igmp-snooping")
        snooping = ET.SubElement(igmp, "snooping")
        mrouter_timeout = ET.SubElement(snooping, "mrouter-timeout")
        mrouter_timeout.text = kwargs.pop('mrouter_timeout')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_ip_igmp_snooping_restrict_unknown_multicast(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name_key = ET.SubElement(vlan, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(vlan, "ip")
        igmp = ET.SubElement(ip, "igmp", xmlns="urn:brocade.com:mgmt:brocade-igmp-snooping")
        snooping = ET.SubElement(igmp, "snooping")
        restrict_unknown_multicast = ET.SubElement(snooping, "restrict-unknown-multicast")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_ip_igmp_snooping_querier_qenable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name_key = ET.SubElement(vlan, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(vlan, "ip")
        igmp = ET.SubElement(ip, "igmp", xmlns="urn:brocade.com:mgmt:brocade-igmp-snooping")
        snooping = ET.SubElement(igmp, "snooping")
        querier = ET.SubElement(snooping, "querier")
        qenable = ET.SubElement(querier, "qenable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_ip_igmp_snooping_mrouter_interface_if_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name_key = ET.SubElement(vlan, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(vlan, "ip")
        igmp = ET.SubElement(ip, "igmp", xmlns="urn:brocade.com:mgmt:brocade-igmp-snooping")
        snooping = ET.SubElement(igmp, "snooping")
        mrouter = ET.SubElement(snooping, "mrouter")
        interface = ET.SubElement(mrouter, "interface")
        value_key = ET.SubElement(interface, "value")
        value_key.text = kwargs.pop('value')
        if_type = ET.SubElement(interface, "if-type")
        if_type.text = kwargs.pop('if_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_ip_igmp_snooping_mrouter_interface_value(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name_key = ET.SubElement(vlan, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(vlan, "ip")
        igmp = ET.SubElement(ip, "igmp", xmlns="urn:brocade.com:mgmt:brocade-igmp-snooping")
        snooping = ET.SubElement(igmp, "snooping")
        mrouter = ET.SubElement(snooping, "mrouter")
        interface = ET.SubElement(mrouter, "interface")
        if_type_key = ET.SubElement(interface, "if-type")
        if_type_key.text = kwargs.pop('if_type')
        value = ET.SubElement(interface, "value")
        value.text = kwargs.pop('value')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_ip_igmp_static_group_mcast_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name_key = ET.SubElement(vlan, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(vlan, "ip")
        igmp = ET.SubElement(ip, "igmp", xmlns="urn:brocade.com:mgmt:brocade-igmp-snooping")
        static_group = ET.SubElement(igmp, "static-group")
        interface_key = ET.SubElement(static_group, "interface")
        interface_key.text = kwargs.pop('interface')
        if_type_key = ET.SubElement(static_group, "if-type")
        if_type_key.text = kwargs.pop('if_type')
        value_key = ET.SubElement(static_group, "value")
        value_key.text = kwargs.pop('value')
        mcast_address = ET.SubElement(static_group, "mcast-address")
        mcast_address.text = kwargs.pop('mcast_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_ip_igmp_static_group_interface(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name_key = ET.SubElement(vlan, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(vlan, "ip")
        igmp = ET.SubElement(ip, "igmp", xmlns="urn:brocade.com:mgmt:brocade-igmp-snooping")
        static_group = ET.SubElement(igmp, "static-group")
        mcast_address_key = ET.SubElement(static_group, "mcast-address")
        mcast_address_key.text = kwargs.pop('mcast_address')
        if_type_key = ET.SubElement(static_group, "if-type")
        if_type_key.text = kwargs.pop('if_type')
        value_key = ET.SubElement(static_group, "value")
        value_key.text = kwargs.pop('value')
        interface = ET.SubElement(static_group, "interface")
        interface.text = kwargs.pop('interface')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_ip_igmp_static_group_if_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name_key = ET.SubElement(vlan, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(vlan, "ip")
        igmp = ET.SubElement(ip, "igmp", xmlns="urn:brocade.com:mgmt:brocade-igmp-snooping")
        static_group = ET.SubElement(igmp, "static-group")
        mcast_address_key = ET.SubElement(static_group, "mcast-address")
        mcast_address_key.text = kwargs.pop('mcast_address')
        interface_key = ET.SubElement(static_group, "interface")
        interface_key.text = kwargs.pop('interface')
        value_key = ET.SubElement(static_group, "value")
        value_key.text = kwargs.pop('value')
        if_type = ET.SubElement(static_group, "if-type")
        if_type.text = kwargs.pop('if_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_ip_igmp_static_group_value(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name_key = ET.SubElement(vlan, "name")
        name_key.text = kwargs.pop('name')
        ip = ET.SubElement(vlan, "ip")
        igmp = ET.SubElement(ip, "igmp", xmlns="urn:brocade.com:mgmt:brocade-igmp-snooping")
        static_group = ET.SubElement(igmp, "static-group")
        mcast_address_key = ET.SubElement(static_group, "mcast-address")
        mcast_address_key.text = kwargs.pop('mcast_address')
        interface_key = ET.SubElement(static_group, "interface")
        interface_key.text = kwargs.pop('interface')
        if_type_key = ET.SubElement(static_group, "if-type")
        if_type_key.text = kwargs.pop('if_type')
        value = ET.SubElement(static_group, "value")
        value.text = kwargs.pop('value')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_ipv6_mldVlan_last_member_query_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name_key = ET.SubElement(vlan, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(vlan, "ipv6")
        mldVlan = ET.SubElement(ipv6, "mldVlan", xmlns="urn:brocade.com:mgmt:brocade-mld-snooping")
        last_member_query_interval = ET.SubElement(mldVlan, "last-member-query-interval")
        last_member_query_interval.text = kwargs.pop('last_member_query_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_ipv6_mldVlan_last_member_query_count(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name_key = ET.SubElement(vlan, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(vlan, "ipv6")
        mldVlan = ET.SubElement(ipv6, "mldVlan", xmlns="urn:brocade.com:mgmt:brocade-mld-snooping")
        last_member_query_count = ET.SubElement(mldVlan, "last-member-query-count")
        last_member_query_count.text = kwargs.pop('last_member_query_count')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_ipv6_mldVlan_startup_query_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name_key = ET.SubElement(vlan, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(vlan, "ipv6")
        mldVlan = ET.SubElement(ipv6, "mldVlan", xmlns="urn:brocade.com:mgmt:brocade-mld-snooping")
        startup_query_interval = ET.SubElement(mldVlan, "startup-query-interval")
        startup_query_interval.text = kwargs.pop('startup_query_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_ipv6_mldVlan_startup_query_count(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name_key = ET.SubElement(vlan, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(vlan, "ipv6")
        mldVlan = ET.SubElement(ipv6, "mldVlan", xmlns="urn:brocade.com:mgmt:brocade-mld-snooping")
        startup_query_count = ET.SubElement(mldVlan, "startup-query-count")
        startup_query_count.text = kwargs.pop('startup_query_count')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_ipv6_mldVlan_query_max_response_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name_key = ET.SubElement(vlan, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(vlan, "ipv6")
        mldVlan = ET.SubElement(ipv6, "mldVlan", xmlns="urn:brocade.com:mgmt:brocade-mld-snooping")
        query_max_response_time = ET.SubElement(mldVlan, "query-max-response-time")
        query_max_response_time.text = kwargs.pop('query_max_response_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_ipv6_mldVlan_query_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name_key = ET.SubElement(vlan, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(vlan, "ipv6")
        mldVlan = ET.SubElement(ipv6, "mldVlan", xmlns="urn:brocade.com:mgmt:brocade-mld-snooping")
        query_interval = ET.SubElement(mldVlan, "query-interval")
        query_interval.text = kwargs.pop('query_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_ipv6_mldVlan_snooping_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name_key = ET.SubElement(vlan, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(vlan, "ipv6")
        mldVlan = ET.SubElement(ipv6, "mldVlan", xmlns="urn:brocade.com:mgmt:brocade-mld-snooping")
        snooping = ET.SubElement(mldVlan, "snooping")
        enable = ET.SubElement(snooping, "enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_ipv6_mldVlan_snooping_fast_leave(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name_key = ET.SubElement(vlan, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(vlan, "ipv6")
        mldVlan = ET.SubElement(ipv6, "mldVlan", xmlns="urn:brocade.com:mgmt:brocade-mld-snooping")
        snooping = ET.SubElement(mldVlan, "snooping")
        fast_leave = ET.SubElement(snooping, "fast-leave")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_ipv6_mldVlan_snooping_restrict_unknown_multicast_vlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name_key = ET.SubElement(vlan, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(vlan, "ipv6")
        mldVlan = ET.SubElement(ipv6, "mldVlan", xmlns="urn:brocade.com:mgmt:brocade-mld-snooping")
        snooping = ET.SubElement(mldVlan, "snooping")
        restrict_unknown_multicast_vlan = ET.SubElement(snooping, "restrict-unknown-multicast-vlan")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_ipv6_mldVlan_snooping_robustness_variable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name_key = ET.SubElement(vlan, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(vlan, "ipv6")
        mldVlan = ET.SubElement(ipv6, "mldVlan", xmlns="urn:brocade.com:mgmt:brocade-mld-snooping")
        snooping = ET.SubElement(mldVlan, "snooping")
        robustness_variable = ET.SubElement(snooping, "robustness-variable")
        robustness_variable.text = kwargs.pop('robustness_variable')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_ipv6_mldVlan_snooping_querier_qenable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name_key = ET.SubElement(vlan, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(vlan, "ipv6")
        mldVlan = ET.SubElement(ipv6, "mldVlan", xmlns="urn:brocade.com:mgmt:brocade-mld-snooping")
        snooping = ET.SubElement(mldVlan, "snooping")
        querier = ET.SubElement(snooping, "querier")
        qenable = ET.SubElement(querier, "qenable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_ipv6_mldVlan_snooping_mrouter_interface_if_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name_key = ET.SubElement(vlan, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(vlan, "ipv6")
        mldVlan = ET.SubElement(ipv6, "mldVlan", xmlns="urn:brocade.com:mgmt:brocade-mld-snooping")
        snooping = ET.SubElement(mldVlan, "snooping")
        mrouter = ET.SubElement(snooping, "mrouter")
        interface = ET.SubElement(mrouter, "interface")
        value_key = ET.SubElement(interface, "value")
        value_key.text = kwargs.pop('value')
        if_type = ET.SubElement(interface, "if-type")
        if_type.text = kwargs.pop('if_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_ipv6_mldVlan_snooping_mrouter_interface_value(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name_key = ET.SubElement(vlan, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(vlan, "ipv6")
        mldVlan = ET.SubElement(ipv6, "mldVlan", xmlns="urn:brocade.com:mgmt:brocade-mld-snooping")
        snooping = ET.SubElement(mldVlan, "snooping")
        mrouter = ET.SubElement(snooping, "mrouter")
        interface = ET.SubElement(mrouter, "interface")
        if_type_key = ET.SubElement(interface, "if-type")
        if_type_key.text = kwargs.pop('if_type')
        value = ET.SubElement(interface, "value")
        value.text = kwargs.pop('value')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_ipv6_mldVlan_static_group_mcast_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name_key = ET.SubElement(vlan, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(vlan, "ipv6")
        mldVlan = ET.SubElement(ipv6, "mldVlan", xmlns="urn:brocade.com:mgmt:brocade-mld-snooping")
        static_group = ET.SubElement(mldVlan, "static-group")
        interface_key = ET.SubElement(static_group, "interface")
        interface_key.text = kwargs.pop('interface')
        if_type_key = ET.SubElement(static_group, "if-type")
        if_type_key.text = kwargs.pop('if_type')
        value_key = ET.SubElement(static_group, "value")
        value_key.text = kwargs.pop('value')
        mcast_address = ET.SubElement(static_group, "mcast-address")
        mcast_address.text = kwargs.pop('mcast_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_ipv6_mldVlan_static_group_interface(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name_key = ET.SubElement(vlan, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(vlan, "ipv6")
        mldVlan = ET.SubElement(ipv6, "mldVlan", xmlns="urn:brocade.com:mgmt:brocade-mld-snooping")
        static_group = ET.SubElement(mldVlan, "static-group")
        mcast_address_key = ET.SubElement(static_group, "mcast-address")
        mcast_address_key.text = kwargs.pop('mcast_address')
        if_type_key = ET.SubElement(static_group, "if-type")
        if_type_key.text = kwargs.pop('if_type')
        value_key = ET.SubElement(static_group, "value")
        value_key.text = kwargs.pop('value')
        interface = ET.SubElement(static_group, "interface")
        interface.text = kwargs.pop('interface')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_ipv6_mldVlan_static_group_if_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name_key = ET.SubElement(vlan, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(vlan, "ipv6")
        mldVlan = ET.SubElement(ipv6, "mldVlan", xmlns="urn:brocade.com:mgmt:brocade-mld-snooping")
        static_group = ET.SubElement(mldVlan, "static-group")
        mcast_address_key = ET.SubElement(static_group, "mcast-address")
        mcast_address_key.text = kwargs.pop('mcast_address')
        interface_key = ET.SubElement(static_group, "interface")
        interface_key.text = kwargs.pop('interface')
        value_key = ET.SubElement(static_group, "value")
        value_key.text = kwargs.pop('value')
        if_type = ET.SubElement(static_group, "if-type")
        if_type.text = kwargs.pop('if_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_ipv6_mldVlan_static_group_value(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name_key = ET.SubElement(vlan, "name")
        name_key.text = kwargs.pop('name')
        ipv6 = ET.SubElement(vlan, "ipv6")
        mldVlan = ET.SubElement(ipv6, "mldVlan", xmlns="urn:brocade.com:mgmt:brocade-mld-snooping")
        static_group = ET.SubElement(mldVlan, "static-group")
        mcast_address_key = ET.SubElement(static_group, "mcast-address")
        mcast_address_key.text = kwargs.pop('mcast_address')
        interface_key = ET.SubElement(static_group, "interface")
        interface_key.text = kwargs.pop('interface')
        if_type_key = ET.SubElement(static_group, "if-type")
        if_type_key.text = kwargs.pop('if_type')
        value = ET.SubElement(static_group, "value")
        value.text = kwargs.pop('value')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_mac_access_group_mac_access_list(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name_key = ET.SubElement(vlan, "name")
        name_key.text = kwargs.pop('name')
        mac = ET.SubElement(vlan, "mac", xmlns="urn:brocade.com:mgmt:brocade-mac-access-list")
        access_group = ET.SubElement(mac, "access-group")
        mac_direction_key = ET.SubElement(access_group, "mac-direction")
        mac_direction_key.text = kwargs.pop('mac_direction')
        mac_access_list = ET.SubElement(access_group, "mac-access-list")
        mac_access_list.text = kwargs.pop('mac_access_list')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_mac_access_group_mac_direction(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name_key = ET.SubElement(vlan, "name")
        name_key.text = kwargs.pop('name')
        mac = ET.SubElement(vlan, "mac", xmlns="urn:brocade.com:mgmt:brocade-mac-access-list")
        access_group = ET.SubElement(mac, "access-group")
        mac_access_list_key = ET.SubElement(access_group, "mac-access-list")
        mac_access_list_key.text = kwargs.pop('mac_access_list')
        mac_direction = ET.SubElement(access_group, "mac-direction")
        mac_direction.text = kwargs.pop('mac_direction')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_mac_access_group_traffic_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name_key = ET.SubElement(vlan, "name")
        name_key.text = kwargs.pop('name')
        mac = ET.SubElement(vlan, "mac", xmlns="urn:brocade.com:mgmt:brocade-mac-access-list")
        access_group = ET.SubElement(mac, "access-group")
        mac_access_list_key = ET.SubElement(access_group, "mac-access-list")
        mac_access_list_key.text = kwargs.pop('mac_access_list')
        mac_direction_key = ET.SubElement(access_group, "mac-direction")
        mac_direction_key.text = kwargs.pop('mac_direction')
        traffic_type = ET.SubElement(access_group, "traffic-type")
        traffic_type.text = kwargs.pop('traffic_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_remote_span(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name_key = ET.SubElement(vlan, "name")
        name_key.text = kwargs.pop('name')
        remote_span = ET.SubElement(vlan, "remote-span", xmlns="urn:brocade.com:mgmt:brocade-span")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_vlan_spanning_tree_stp_shutdown(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        vlan = ET.SubElement(interface, "vlan")
        name_key = ET.SubElement(vlan, "name")
        name_key.text = kwargs.pop('name')
        spanning_tree = ET.SubElement(vlan, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        stp_shutdown = ET.SubElement(spanning_tree, "stp-shutdown")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_ve_gve_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        ve = ET.SubElement(interface, "ve")
        gve_name = ET.SubElement(ve, "gve-name")
        gve_name.text = kwargs.pop('gve_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_ve_global_ve_shutdown(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        ve = ET.SubElement(interface, "ve")
        gve_name_key = ET.SubElement(ve, "gve-name")
        gve_name_key.text = kwargs.pop('gve_name')
        global_ve_shutdown = ET.SubElement(ve, "global-ve-shutdown")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_ve_ip_ip_anycast_gateway_ip_gw_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        ve = ET.SubElement(interface, "ve")
        gve_name_key = ET.SubElement(ve, "gve-name")
        gve_name_key.text = kwargs.pop('gve_name')
        ip = ET.SubElement(ve, "ip")
        ip_anycast_gateway = ET.SubElement(ip, "ip-anycast-gateway", xmlns="urn:brocade.com:mgmt:brocade-anycast-gateway")
        ip_gw_id = ET.SubElement(ip_anycast_gateway, "ip-gw-id")
        ip_gw_id.text = kwargs.pop('ip_gw_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_ve_ip_ip_anycast_gateway_ipv4_gateway_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        ve = ET.SubElement(interface, "ve")
        gve_name_key = ET.SubElement(ve, "gve-name")
        gve_name_key.text = kwargs.pop('gve_name')
        ip = ET.SubElement(ve, "ip")
        ip_anycast_gateway = ET.SubElement(ip, "ip-anycast-gateway", xmlns="urn:brocade.com:mgmt:brocade-anycast-gateway")
        ip_gw_id_key = ET.SubElement(ip_anycast_gateway, "ip-gw-id")
        ip_gw_id_key.text = kwargs.pop('ip_gw_id')
        ipv4_gateway_address = ET.SubElement(ip_anycast_gateway, "ipv4-gateway-address")
        ipv4_gateway_address.text = kwargs.pop('ipv4_gateway_address')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_ve_ip_ip_anycast_gateway_gratuitous_arp_gve_timer(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        ve = ET.SubElement(interface, "ve")
        gve_name_key = ET.SubElement(ve, "gve-name")
        gve_name_key.text = kwargs.pop('gve_name')
        ip = ET.SubElement(ve, "ip")
        ip_anycast_gateway = ET.SubElement(ip, "ip-anycast-gateway", xmlns="urn:brocade.com:mgmt:brocade-anycast-gateway")
        ip_gw_id_key = ET.SubElement(ip_anycast_gateway, "ip-gw-id")
        ip_gw_id_key.text = kwargs.pop('ip_gw_id')
        gratuitous_arp = ET.SubElement(ip_anycast_gateway, "gratuitous-arp")
        gve_timer = ET.SubElement(gratuitous_arp, "gve-timer")
        gve_timer.text = kwargs.pop('gve_timer')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_ve_ip_ip_anycast_gateway_hold_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        ve = ET.SubElement(interface, "ve")
        gve_name_key = ET.SubElement(ve, "gve-name")
        gve_name_key.text = kwargs.pop('gve_name')
        ip = ET.SubElement(ve, "ip")
        ip_anycast_gateway = ET.SubElement(ip, "ip-anycast-gateway", xmlns="urn:brocade.com:mgmt:brocade-anycast-gateway")
        ip_gw_id_key = ET.SubElement(ip_anycast_gateway, "ip-gw-id")
        ip_gw_id_key.text = kwargs.pop('ip_gw_id')
        hold_time = ET.SubElement(ip_anycast_gateway, "hold-time")
        hold_time.text = kwargs.pop('hold_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_ve_ip_ip_anycast_gateway_load_balancing_disable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        ve = ET.SubElement(interface, "ve")
        gve_name_key = ET.SubElement(ve, "gve-name")
        gve_name_key.text = kwargs.pop('gve_name')
        ip = ET.SubElement(ve, "ip")
        ip_anycast_gateway = ET.SubElement(ip, "ip-anycast-gateway", xmlns="urn:brocade.com:mgmt:brocade-anycast-gateway")
        ip_gw_id_key = ET.SubElement(ip_anycast_gateway, "ip-gw-id")
        ip_gw_id_key.text = kwargs.pop('ip_gw_id')
        load_balancing_disable = ET.SubElement(ip_anycast_gateway, "load-balancing-disable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_ve_ip_ip_anycast_gateway_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        ve = ET.SubElement(interface, "ve")
        gve_name_key = ET.SubElement(ve, "gve-name")
        gve_name_key.text = kwargs.pop('gve_name')
        ip = ET.SubElement(ve, "ip")
        ip_anycast_gateway = ET.SubElement(ip, "ip-anycast-gateway", xmlns="urn:brocade.com:mgmt:brocade-anycast-gateway")
        ip_gw_id_key = ET.SubElement(ip_anycast_gateway, "ip-gw-id")
        ip_gw_id_key.text = kwargs.pop('ip_gw_id')
        enable = ET.SubElement(ip_anycast_gateway, "enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_ve_ip_ip_anycast_gateway_description(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        ve = ET.SubElement(interface, "ve")
        gve_name_key = ET.SubElement(ve, "gve-name")
        gve_name_key.text = kwargs.pop('gve_name')
        ip = ET.SubElement(ve, "ip")
        ip_anycast_gateway = ET.SubElement(ip, "ip-anycast-gateway", xmlns="urn:brocade.com:mgmt:brocade-anycast-gateway")
        ip_gw_id_key = ET.SubElement(ip_anycast_gateway, "ip-gw-id")
        ip_gw_id_key.text = kwargs.pop('ip_gw_id')
        description = ET.SubElement(ip_anycast_gateway, "description")
        description.text = kwargs.pop('description')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_ve_ipv6_ipv6_anycast_gateway_ipv6_gw_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        ve = ET.SubElement(interface, "ve")
        gve_name_key = ET.SubElement(ve, "gve-name")
        gve_name_key.text = kwargs.pop('gve_name')
        ipv6 = ET.SubElement(ve, "ipv6")
        ipv6_anycast_gateway = ET.SubElement(ipv6, "ipv6-anycast-gateway", xmlns="urn:brocade.com:mgmt:brocade-anycast-gateway")
        ipv6_gw_id = ET.SubElement(ipv6_anycast_gateway, "ipv6-gw-id")
        ipv6_gw_id.text = kwargs.pop('ipv6_gw_id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_ve_ipv6_ipv6_anycast_gateway_ipv6_gateway_address_ipv6_gw_addr(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        ve = ET.SubElement(interface, "ve")
        gve_name_key = ET.SubElement(ve, "gve-name")
        gve_name_key.text = kwargs.pop('gve_name')
        ipv6 = ET.SubElement(ve, "ipv6")
        ipv6_anycast_gateway = ET.SubElement(ipv6, "ipv6-anycast-gateway", xmlns="urn:brocade.com:mgmt:brocade-anycast-gateway")
        ipv6_gw_id_key = ET.SubElement(ipv6_anycast_gateway, "ipv6-gw-id")
        ipv6_gw_id_key.text = kwargs.pop('ipv6_gw_id')
        ipv6_gateway_address = ET.SubElement(ipv6_anycast_gateway, "ipv6-gateway-address")
        ipv6_gw_addr = ET.SubElement(ipv6_gateway_address, "ipv6-gw-addr")
        ipv6_gw_addr.text = kwargs.pop('ipv6_gw_addr')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_ve_ipv6_ipv6_anycast_gateway_gratuitous_arp_gve_timer(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        ve = ET.SubElement(interface, "ve")
        gve_name_key = ET.SubElement(ve, "gve-name")
        gve_name_key.text = kwargs.pop('gve_name')
        ipv6 = ET.SubElement(ve, "ipv6")
        ipv6_anycast_gateway = ET.SubElement(ipv6, "ipv6-anycast-gateway", xmlns="urn:brocade.com:mgmt:brocade-anycast-gateway")
        ipv6_gw_id_key = ET.SubElement(ipv6_anycast_gateway, "ipv6-gw-id")
        ipv6_gw_id_key.text = kwargs.pop('ipv6_gw_id')
        gratuitous_arp = ET.SubElement(ipv6_anycast_gateway, "gratuitous-arp")
        gve_timer = ET.SubElement(gratuitous_arp, "gve-timer")
        gve_timer.text = kwargs.pop('gve_timer')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_ve_ipv6_ipv6_anycast_gateway_hold_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        ve = ET.SubElement(interface, "ve")
        gve_name_key = ET.SubElement(ve, "gve-name")
        gve_name_key.text = kwargs.pop('gve_name')
        ipv6 = ET.SubElement(ve, "ipv6")
        ipv6_anycast_gateway = ET.SubElement(ipv6, "ipv6-anycast-gateway", xmlns="urn:brocade.com:mgmt:brocade-anycast-gateway")
        ipv6_gw_id_key = ET.SubElement(ipv6_anycast_gateway, "ipv6-gw-id")
        ipv6_gw_id_key.text = kwargs.pop('ipv6_gw_id')
        hold_time = ET.SubElement(ipv6_anycast_gateway, "hold-time")
        hold_time.text = kwargs.pop('hold_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_ve_ipv6_ipv6_anycast_gateway_load_balancing_disable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        ve = ET.SubElement(interface, "ve")
        gve_name_key = ET.SubElement(ve, "gve-name")
        gve_name_key.text = kwargs.pop('gve_name')
        ipv6 = ET.SubElement(ve, "ipv6")
        ipv6_anycast_gateway = ET.SubElement(ipv6, "ipv6-anycast-gateway", xmlns="urn:brocade.com:mgmt:brocade-anycast-gateway")
        ipv6_gw_id_key = ET.SubElement(ipv6_anycast_gateway, "ipv6-gw-id")
        ipv6_gw_id_key.text = kwargs.pop('ipv6_gw_id')
        load_balancing_disable = ET.SubElement(ipv6_anycast_gateway, "load-balancing-disable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_ve_ipv6_ipv6_anycast_gateway_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        ve = ET.SubElement(interface, "ve")
        gve_name_key = ET.SubElement(ve, "gve-name")
        gve_name_key.text = kwargs.pop('gve_name')
        ipv6 = ET.SubElement(ve, "ipv6")
        ipv6_anycast_gateway = ET.SubElement(ipv6, "ipv6-anycast-gateway", xmlns="urn:brocade.com:mgmt:brocade-anycast-gateway")
        ipv6_gw_id_key = ET.SubElement(ipv6_anycast_gateway, "ipv6-gw-id")
        ipv6_gw_id_key.text = kwargs.pop('ipv6_gw_id')
        enable = ET.SubElement(ipv6_anycast_gateway, "enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_ve_ipv6_ipv6_anycast_gateway_description(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        ve = ET.SubElement(interface, "ve")
        gve_name_key = ET.SubElement(ve, "gve-name")
        gve_name_key.text = kwargs.pop('gve_name')
        ipv6 = ET.SubElement(ve, "ipv6")
        ipv6_anycast_gateway = ET.SubElement(ipv6, "ipv6-anycast-gateway", xmlns="urn:brocade.com:mgmt:brocade-anycast-gateway")
        ipv6_gw_id_key = ET.SubElement(ipv6_anycast_gateway, "ipv6-gw-id")
        ipv6_gw_id_key.text = kwargs.pop('ipv6_gw_id')
        description = ET.SubElement(ipv6_anycast_gateway, "description")
        description.text = kwargs.pop('description')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_ve_attach_rbridge_id_rb_add(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        ve = ET.SubElement(interface, "ve")
        gve_name_key = ET.SubElement(ve, "gve-name")
        gve_name_key.text = kwargs.pop('gve_name')
        attach = ET.SubElement(ve, "attach", xmlns="urn:brocade.com:mgmt:brocade-anycast-gateway")
        rbridge_id = ET.SubElement(attach, "rbridge-id")
        rb_add = ET.SubElement(rbridge_id, "rb-add")
        rb_add.text = kwargs.pop('rb_add')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def interface_vlan_interface_ve_attach_rbridge_id_rb_remove(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        interface_vlan = ET.SubElement(config, "interface-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        interface = ET.SubElement(interface_vlan, "interface")
        ve = ET.SubElement(interface, "ve")
        gve_name_key = ET.SubElement(ve, "gve-name")
        gve_name_key.text = kwargs.pop('gve_name')
        attach = ET.SubElement(ve, "attach", xmlns="urn:brocade.com:mgmt:brocade-anycast-gateway")
        rbridge_id = ET.SubElement(attach, "rbridge-id")
        rb_remove = ET.SubElement(rbridge_id, "rb-remove")
        rb_remove.text = kwargs.pop('rb_remove')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_edge_loop_detection_pdu_rx_limit(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        edge_loop_detection = ET.SubElement(protocol, "edge-loop-detection", xmlns="urn:brocade.com:mgmt:brocade-eld")
        pdu_rx_limit = ET.SubElement(edge_loop_detection, "pdu-rx-limit")
        pdu_rx_limit.text = kwargs.pop('pdu_rx_limit')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_edge_loop_detection_hello_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        edge_loop_detection = ET.SubElement(protocol, "edge-loop-detection", xmlns="urn:brocade.com:mgmt:brocade-eld")
        hello_interval = ET.SubElement(edge_loop_detection, "hello-interval")
        hello_interval.text = kwargs.pop('hello_interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_edge_loop_detection_shutdown_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        edge_loop_detection = ET.SubElement(protocol, "edge-loop-detection", xmlns="urn:brocade.com:mgmt:brocade-eld")
        shutdown_time = ET.SubElement(edge_loop_detection, "shutdown-time")
        shutdown_time.text = kwargs.pop('shutdown_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_edge_loop_detection_mac_refresh_time_config_mac_refresh_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        edge_loop_detection = ET.SubElement(protocol, "edge-loop-detection", xmlns="urn:brocade.com:mgmt:brocade-eld")
        mac_refresh_time_config = ET.SubElement(edge_loop_detection, "mac-refresh-time-config")
        mac_refresh_time = ET.SubElement(mac_refresh_time_config, "mac-refresh-time")
        mac_refresh_time.text = kwargs.pop('mac_refresh_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_edge_loop_detection_mac_refresh_time_config_mac_refresh_type(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        edge_loop_detection = ET.SubElement(protocol, "edge-loop-detection", xmlns="urn:brocade.com:mgmt:brocade-eld")
        mac_refresh_time_config = ET.SubElement(edge_loop_detection, "mac-refresh-time-config")
        mac_refresh_type = ET.SubElement(mac_refresh_time_config, "mac-refresh-type")
        mac_refresh_type.text = kwargs.pop('mac_refresh_type')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_lldp_description(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        lldp = ET.SubElement(protocol, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        description = ET.SubElement(lldp, "description")
        description.text = kwargs.pop('description')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_lldp_hello(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        lldp = ET.SubElement(protocol, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        hello = ET.SubElement(lldp, "hello")
        hello.text = kwargs.pop('hello')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_lldp_mode(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        lldp = ET.SubElement(protocol, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        mode = ET.SubElement(lldp, "mode")
        mode.text = kwargs.pop('mode')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_lldp_multiplier(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        lldp = ET.SubElement(protocol, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        multiplier = ET.SubElement(lldp, "multiplier")
        multiplier.text = kwargs.pop('multiplier')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_lldp_advertise_dcbx_fcoe_app_tlv(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        lldp = ET.SubElement(protocol, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        advertise = ET.SubElement(lldp, "advertise")
        dcbx_fcoe_app_tlv = ET.SubElement(advertise, "dcbx-fcoe-app-tlv")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_lldp_advertise_dcbx_fcoe_logical_link_tlv(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        lldp = ET.SubElement(protocol, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        advertise = ET.SubElement(lldp, "advertise")
        dcbx_fcoe_logical_link_tlv = ET.SubElement(advertise, "dcbx-fcoe-logical-link-tlv")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_lldp_advertise_dcbx_iscsi_app_tlv(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        lldp = ET.SubElement(protocol, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        advertise = ET.SubElement(lldp, "advertise")
        dcbx_iscsi_app_tlv = ET.SubElement(advertise, "dcbx-iscsi-app-tlv")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_lldp_advertise_dcbx_tlv(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        lldp = ET.SubElement(protocol, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        advertise = ET.SubElement(lldp, "advertise")
        dcbx_tlv = ET.SubElement(advertise, "dcbx-tlv")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_lldp_advertise_dot1_tlv(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        lldp = ET.SubElement(protocol, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        advertise = ET.SubElement(lldp, "advertise")
        dot1_tlv = ET.SubElement(advertise, "dot1-tlv")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_lldp_advertise_dot3_tlv(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        lldp = ET.SubElement(protocol, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        advertise = ET.SubElement(lldp, "advertise")
        dot3_tlv = ET.SubElement(advertise, "dot3-tlv")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_lldp_advertise_optional_tlv_management_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        lldp = ET.SubElement(protocol, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        advertise = ET.SubElement(lldp, "advertise")
        optional_tlv = ET.SubElement(advertise, "optional-tlv")
        management_address = ET.SubElement(optional_tlv, "management-address")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_lldp_advertise_optional_tlv_port_description(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        lldp = ET.SubElement(protocol, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        advertise = ET.SubElement(lldp, "advertise")
        optional_tlv = ET.SubElement(advertise, "optional-tlv")
        port_description = ET.SubElement(optional_tlv, "port-description")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_lldp_advertise_optional_tlv_system_capabilities(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        lldp = ET.SubElement(protocol, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        advertise = ET.SubElement(lldp, "advertise")
        optional_tlv = ET.SubElement(advertise, "optional-tlv")
        system_capabilities = ET.SubElement(optional_tlv, "system-capabilities")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_lldp_advertise_optional_tlv_adv_tlv_system_description(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        lldp = ET.SubElement(protocol, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        advertise = ET.SubElement(lldp, "advertise")
        optional_tlv = ET.SubElement(advertise, "optional-tlv")
        adv_tlv_system_description = ET.SubElement(optional_tlv, "adv-tlv-system-description")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_lldp_advertise_optional_tlv_adv_tlv_system_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        lldp = ET.SubElement(protocol, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        advertise = ET.SubElement(lldp, "advertise")
        optional_tlv = ET.SubElement(advertise, "optional-tlv")
        adv_tlv_system_name = ET.SubElement(optional_tlv, "adv-tlv-system-name")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_lldp_system_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        lldp = ET.SubElement(protocol, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        system_name = ET.SubElement(lldp, "system-name")
        system_name.text = kwargs.pop('system_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_lldp_system_description(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        lldp = ET.SubElement(protocol, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        system_description = ET.SubElement(lldp, "system-description")
        system_description.text = kwargs.pop('system_description')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_lldp_iscsi_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        lldp = ET.SubElement(protocol, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        iscsi_priority = ET.SubElement(lldp, "iscsi-priority")
        iscsi_priority.text = kwargs.pop('iscsi_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_lldp_disable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        lldp = ET.SubElement(protocol, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        disable = ET.SubElement(lldp, "disable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_lldp_profile_profile_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        lldp = ET.SubElement(protocol, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        profile = ET.SubElement(lldp, "profile")
        profile_name = ET.SubElement(profile, "profile-name")
        profile_name.text = kwargs.pop('profile_name')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_lldp_profile_description(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        lldp = ET.SubElement(protocol, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        profile = ET.SubElement(lldp, "profile")
        profile_name_key = ET.SubElement(profile, "profile-name")
        profile_name_key.text = kwargs.pop('profile_name')
        description = ET.SubElement(profile, "description")
        description.text = kwargs.pop('description')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_lldp_profile_hello(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        lldp = ET.SubElement(protocol, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        profile = ET.SubElement(lldp, "profile")
        profile_name_key = ET.SubElement(profile, "profile-name")
        profile_name_key.text = kwargs.pop('profile_name')
        hello = ET.SubElement(profile, "hello")
        hello.text = kwargs.pop('hello')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_lldp_profile_mode(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        lldp = ET.SubElement(protocol, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        profile = ET.SubElement(lldp, "profile")
        profile_name_key = ET.SubElement(profile, "profile-name")
        profile_name_key.text = kwargs.pop('profile_name')
        mode = ET.SubElement(profile, "mode")
        mode.text = kwargs.pop('mode')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_lldp_profile_multiplier(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        lldp = ET.SubElement(protocol, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        profile = ET.SubElement(lldp, "profile")
        profile_name_key = ET.SubElement(profile, "profile-name")
        profile_name_key.text = kwargs.pop('profile_name')
        multiplier = ET.SubElement(profile, "multiplier")
        multiplier.text = kwargs.pop('multiplier')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_lldp_profile_advertise_dcbx_fcoe_app_tlv(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        lldp = ET.SubElement(protocol, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        profile = ET.SubElement(lldp, "profile")
        profile_name_key = ET.SubElement(profile, "profile-name")
        profile_name_key.text = kwargs.pop('profile_name')
        advertise = ET.SubElement(profile, "advertise")
        dcbx_fcoe_app_tlv = ET.SubElement(advertise, "dcbx-fcoe-app-tlv")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_lldp_profile_advertise_dcbx_fcoe_logical_link_tlv(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        lldp = ET.SubElement(protocol, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        profile = ET.SubElement(lldp, "profile")
        profile_name_key = ET.SubElement(profile, "profile-name")
        profile_name_key.text = kwargs.pop('profile_name')
        advertise = ET.SubElement(profile, "advertise")
        dcbx_fcoe_logical_link_tlv = ET.SubElement(advertise, "dcbx-fcoe-logical-link-tlv")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_lldp_profile_advertise_dcbx_iscsi_app_tlv(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        lldp = ET.SubElement(protocol, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        profile = ET.SubElement(lldp, "profile")
        profile_name_key = ET.SubElement(profile, "profile-name")
        profile_name_key.text = kwargs.pop('profile_name')
        advertise = ET.SubElement(profile, "advertise")
        dcbx_iscsi_app_tlv = ET.SubElement(advertise, "dcbx-iscsi-app-tlv")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_lldp_profile_advertise_dcbx_tlv(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        lldp = ET.SubElement(protocol, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        profile = ET.SubElement(lldp, "profile")
        profile_name_key = ET.SubElement(profile, "profile-name")
        profile_name_key.text = kwargs.pop('profile_name')
        advertise = ET.SubElement(profile, "advertise")
        dcbx_tlv = ET.SubElement(advertise, "dcbx-tlv")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_lldp_profile_advertise_dot1_tlv(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        lldp = ET.SubElement(protocol, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        profile = ET.SubElement(lldp, "profile")
        profile_name_key = ET.SubElement(profile, "profile-name")
        profile_name_key.text = kwargs.pop('profile_name')
        advertise = ET.SubElement(profile, "advertise")
        dot1_tlv = ET.SubElement(advertise, "dot1-tlv")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_lldp_profile_advertise_dot3_tlv(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        lldp = ET.SubElement(protocol, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        profile = ET.SubElement(lldp, "profile")
        profile_name_key = ET.SubElement(profile, "profile-name")
        profile_name_key.text = kwargs.pop('profile_name')
        advertise = ET.SubElement(profile, "advertise")
        dot3_tlv = ET.SubElement(advertise, "dot3-tlv")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_lldp_profile_advertise_optional_tlv_management_address(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        lldp = ET.SubElement(protocol, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        profile = ET.SubElement(lldp, "profile")
        profile_name_key = ET.SubElement(profile, "profile-name")
        profile_name_key.text = kwargs.pop('profile_name')
        advertise = ET.SubElement(profile, "advertise")
        optional_tlv = ET.SubElement(advertise, "optional-tlv")
        management_address = ET.SubElement(optional_tlv, "management-address")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_lldp_profile_advertise_optional_tlv_port_description(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        lldp = ET.SubElement(protocol, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        profile = ET.SubElement(lldp, "profile")
        profile_name_key = ET.SubElement(profile, "profile-name")
        profile_name_key.text = kwargs.pop('profile_name')
        advertise = ET.SubElement(profile, "advertise")
        optional_tlv = ET.SubElement(advertise, "optional-tlv")
        port_description = ET.SubElement(optional_tlv, "port-description")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_lldp_profile_advertise_optional_tlv_system_capabilities(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        lldp = ET.SubElement(protocol, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        profile = ET.SubElement(lldp, "profile")
        profile_name_key = ET.SubElement(profile, "profile-name")
        profile_name_key.text = kwargs.pop('profile_name')
        advertise = ET.SubElement(profile, "advertise")
        optional_tlv = ET.SubElement(advertise, "optional-tlv")
        system_capabilities = ET.SubElement(optional_tlv, "system-capabilities")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_lldp_profile_advertise_optional_tlv_adv_tlv_system_description(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        lldp = ET.SubElement(protocol, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        profile = ET.SubElement(lldp, "profile")
        profile_name_key = ET.SubElement(profile, "profile-name")
        profile_name_key.text = kwargs.pop('profile_name')
        advertise = ET.SubElement(profile, "advertise")
        optional_tlv = ET.SubElement(advertise, "optional-tlv")
        adv_tlv_system_description = ET.SubElement(optional_tlv, "adv-tlv-system-description")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_lldp_profile_advertise_optional_tlv_adv_tlv_system_name(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        lldp = ET.SubElement(protocol, "lldp", xmlns="urn:brocade.com:mgmt:brocade-lldp")
        profile = ET.SubElement(lldp, "profile")
        profile_name_key = ET.SubElement(profile, "profile-name")
        profile_name_key.text = kwargs.pop('profile_name')
        advertise = ET.SubElement(profile, "advertise")
        optional_tlv = ET.SubElement(advertise, "optional-tlv")
        adv_tlv_system_name = ET.SubElement(optional_tlv, "adv-tlv-system-name")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_udld_hello(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        udld = ET.SubElement(protocol, "udld", xmlns="urn:brocade.com:mgmt:brocade-udld")
        hello = ET.SubElement(udld, "hello")
        hello.text = kwargs.pop('hello')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_udld_multiplier(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        udld = ET.SubElement(protocol, "udld", xmlns="urn:brocade.com:mgmt:brocade-udld")
        multiplier = ET.SubElement(udld, "multiplier")
        multiplier.text = kwargs.pop('multiplier')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_udld_shutdown(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        udld = ET.SubElement(protocol, "udld", xmlns="urn:brocade.com:mgmt:brocade-udld")
        shutdown = ET.SubElement(udld, "shutdown")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_stp_description(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        stp = ET.SubElement(spanning_tree, "stp")
        description = ET.SubElement(stp, "description")
        description.text = kwargs.pop('description')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_stp_bridge_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        stp = ET.SubElement(spanning_tree, "stp")
        bridge_priority = ET.SubElement(stp, "bridge-priority")
        bridge_priority.text = kwargs.pop('bridge_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_stp_error_disable_timeout_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        stp = ET.SubElement(spanning_tree, "stp")
        error_disable_timeout = ET.SubElement(stp, "error-disable-timeout")
        enable = ET.SubElement(error_disable_timeout, "enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_stp_error_disable_timeout_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        stp = ET.SubElement(spanning_tree, "stp")
        error_disable_timeout = ET.SubElement(stp, "error-disable-timeout")
        interval = ET.SubElement(error_disable_timeout, "interval")
        interval.text = kwargs.pop('interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_stp_forward_delay(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        stp = ET.SubElement(spanning_tree, "stp")
        forward_delay = ET.SubElement(stp, "forward-delay")
        forward_delay.text = kwargs.pop('forward_delay')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_stp_max_age(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        stp = ET.SubElement(spanning_tree, "stp")
        max_age = ET.SubElement(stp, "max-age")
        max_age.text = kwargs.pop('max_age')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_stp_port_channel_path_cost(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        stp = ET.SubElement(spanning_tree, "stp")
        port_channel = ET.SubElement(stp, "port-channel")
        path_cost = ET.SubElement(port_channel, "path-cost")
        path_cost.text = kwargs.pop('path_cost')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_stp_shutdown(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        stp = ET.SubElement(spanning_tree, "stp")
        shutdown = ET.SubElement(stp, "shutdown")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_stp_hello_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        stp = ET.SubElement(spanning_tree, "stp")
        hello_time = ET.SubElement(stp, "hello-time")
        hello_time.text = kwargs.pop('hello_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_rstp_description(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        rstp = ET.SubElement(spanning_tree, "rstp")
        description = ET.SubElement(rstp, "description")
        description.text = kwargs.pop('description')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_rstp_bridge_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        rstp = ET.SubElement(spanning_tree, "rstp")
        bridge_priority = ET.SubElement(rstp, "bridge-priority")
        bridge_priority.text = kwargs.pop('bridge_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_rstp_error_disable_timeout_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        rstp = ET.SubElement(spanning_tree, "rstp")
        error_disable_timeout = ET.SubElement(rstp, "error-disable-timeout")
        enable = ET.SubElement(error_disable_timeout, "enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_rstp_error_disable_timeout_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        rstp = ET.SubElement(spanning_tree, "rstp")
        error_disable_timeout = ET.SubElement(rstp, "error-disable-timeout")
        interval = ET.SubElement(error_disable_timeout, "interval")
        interval.text = kwargs.pop('interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_rstp_forward_delay(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        rstp = ET.SubElement(spanning_tree, "rstp")
        forward_delay = ET.SubElement(rstp, "forward-delay")
        forward_delay.text = kwargs.pop('forward_delay')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_rstp_max_age(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        rstp = ET.SubElement(spanning_tree, "rstp")
        max_age = ET.SubElement(rstp, "max-age")
        max_age.text = kwargs.pop('max_age')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_rstp_port_channel_path_cost(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        rstp = ET.SubElement(spanning_tree, "rstp")
        port_channel = ET.SubElement(rstp, "port-channel")
        path_cost = ET.SubElement(port_channel, "path-cost")
        path_cost.text = kwargs.pop('path_cost')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_rstp_shutdown(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        rstp = ET.SubElement(spanning_tree, "rstp")
        shutdown = ET.SubElement(rstp, "shutdown")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_rstp_hello_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        rstp = ET.SubElement(spanning_tree, "rstp")
        hello_time = ET.SubElement(rstp, "hello-time")
        hello_time.text = kwargs.pop('hello_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_rstp_transmit_holdcount(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        rstp = ET.SubElement(spanning_tree, "rstp")
        transmit_holdcount = ET.SubElement(rstp, "transmit-holdcount")
        transmit_holdcount.text = kwargs.pop('transmit_holdcount')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_pvst_description(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        pvst = ET.SubElement(spanning_tree, "pvst")
        description = ET.SubElement(pvst, "description")
        description.text = kwargs.pop('description')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_pvst_bridge_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        pvst = ET.SubElement(spanning_tree, "pvst")
        bridge_priority = ET.SubElement(pvst, "bridge-priority")
        bridge_priority.text = kwargs.pop('bridge_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_pvst_error_disable_timeout_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        pvst = ET.SubElement(spanning_tree, "pvst")
        error_disable_timeout = ET.SubElement(pvst, "error-disable-timeout")
        enable = ET.SubElement(error_disable_timeout, "enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_pvst_error_disable_timeout_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        pvst = ET.SubElement(spanning_tree, "pvst")
        error_disable_timeout = ET.SubElement(pvst, "error-disable-timeout")
        interval = ET.SubElement(error_disable_timeout, "interval")
        interval.text = kwargs.pop('interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_pvst_forward_delay(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        pvst = ET.SubElement(spanning_tree, "pvst")
        forward_delay = ET.SubElement(pvst, "forward-delay")
        forward_delay.text = kwargs.pop('forward_delay')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_pvst_max_age(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        pvst = ET.SubElement(spanning_tree, "pvst")
        max_age = ET.SubElement(pvst, "max-age")
        max_age.text = kwargs.pop('max_age')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_pvst_port_channel_path_cost(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        pvst = ET.SubElement(spanning_tree, "pvst")
        port_channel = ET.SubElement(pvst, "port-channel")
        path_cost = ET.SubElement(port_channel, "path-cost")
        path_cost.text = kwargs.pop('path_cost')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_pvst_shutdown(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        pvst = ET.SubElement(spanning_tree, "pvst")
        shutdown = ET.SubElement(pvst, "shutdown")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_pvst_hello_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        pvst = ET.SubElement(spanning_tree, "pvst")
        hello_time = ET.SubElement(pvst, "hello-time")
        hello_time.text = kwargs.pop('hello_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_pvst_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        pvst = ET.SubElement(spanning_tree, "pvst")
        vlan = ET.SubElement(pvst, "vlan")
        id = ET.SubElement(vlan, "id")
        id.text = kwargs.pop('id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_pvst_vlan_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        pvst = ET.SubElement(spanning_tree, "pvst")
        vlan = ET.SubElement(pvst, "vlan")
        id_key = ET.SubElement(vlan, "id")
        id_key.text = kwargs.pop('id')
        priority = ET.SubElement(vlan, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_pvst_vlan_forward_delay(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        pvst = ET.SubElement(spanning_tree, "pvst")
        vlan = ET.SubElement(pvst, "vlan")
        id_key = ET.SubElement(vlan, "id")
        id_key.text = kwargs.pop('id')
        forward_delay = ET.SubElement(vlan, "forward-delay")
        forward_delay.text = kwargs.pop('forward_delay')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_pvst_vlan_max_age(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        pvst = ET.SubElement(spanning_tree, "pvst")
        vlan = ET.SubElement(pvst, "vlan")
        id_key = ET.SubElement(vlan, "id")
        id_key.text = kwargs.pop('id')
        max_age = ET.SubElement(vlan, "max-age")
        max_age.text = kwargs.pop('max_age')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_pvst_vlan_hello_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        pvst = ET.SubElement(spanning_tree, "pvst")
        vlan = ET.SubElement(pvst, "vlan")
        id_key = ET.SubElement(vlan, "id")
        id_key.text = kwargs.pop('id')
        hello_time = ET.SubElement(vlan, "hello-time")
        hello_time.text = kwargs.pop('hello_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_rpvst_description(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        rpvst = ET.SubElement(spanning_tree, "rpvst")
        description = ET.SubElement(rpvst, "description")
        description.text = kwargs.pop('description')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_rpvst_bridge_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        rpvst = ET.SubElement(spanning_tree, "rpvst")
        bridge_priority = ET.SubElement(rpvst, "bridge-priority")
        bridge_priority.text = kwargs.pop('bridge_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_rpvst_error_disable_timeout_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        rpvst = ET.SubElement(spanning_tree, "rpvst")
        error_disable_timeout = ET.SubElement(rpvst, "error-disable-timeout")
        enable = ET.SubElement(error_disable_timeout, "enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_rpvst_error_disable_timeout_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        rpvst = ET.SubElement(spanning_tree, "rpvst")
        error_disable_timeout = ET.SubElement(rpvst, "error-disable-timeout")
        interval = ET.SubElement(error_disable_timeout, "interval")
        interval.text = kwargs.pop('interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_rpvst_forward_delay(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        rpvst = ET.SubElement(spanning_tree, "rpvst")
        forward_delay = ET.SubElement(rpvst, "forward-delay")
        forward_delay.text = kwargs.pop('forward_delay')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_rpvst_max_age(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        rpvst = ET.SubElement(spanning_tree, "rpvst")
        max_age = ET.SubElement(rpvst, "max-age")
        max_age.text = kwargs.pop('max_age')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_rpvst_port_channel_path_cost(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        rpvst = ET.SubElement(spanning_tree, "rpvst")
        port_channel = ET.SubElement(rpvst, "port-channel")
        path_cost = ET.SubElement(port_channel, "path-cost")
        path_cost.text = kwargs.pop('path_cost')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_rpvst_shutdown(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        rpvst = ET.SubElement(spanning_tree, "rpvst")
        shutdown = ET.SubElement(rpvst, "shutdown")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_rpvst_hello_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        rpvst = ET.SubElement(spanning_tree, "rpvst")
        hello_time = ET.SubElement(rpvst, "hello-time")
        hello_time.text = kwargs.pop('hello_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_rpvst_vlan_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        rpvst = ET.SubElement(spanning_tree, "rpvst")
        vlan = ET.SubElement(rpvst, "vlan")
        id = ET.SubElement(vlan, "id")
        id.text = kwargs.pop('id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_rpvst_vlan_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        rpvst = ET.SubElement(spanning_tree, "rpvst")
        vlan = ET.SubElement(rpvst, "vlan")
        id_key = ET.SubElement(vlan, "id")
        id_key.text = kwargs.pop('id')
        priority = ET.SubElement(vlan, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_rpvst_vlan_forward_delay(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        rpvst = ET.SubElement(spanning_tree, "rpvst")
        vlan = ET.SubElement(rpvst, "vlan")
        id_key = ET.SubElement(vlan, "id")
        id_key.text = kwargs.pop('id')
        forward_delay = ET.SubElement(vlan, "forward-delay")
        forward_delay.text = kwargs.pop('forward_delay')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_rpvst_vlan_max_age(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        rpvst = ET.SubElement(spanning_tree, "rpvst")
        vlan = ET.SubElement(rpvst, "vlan")
        id_key = ET.SubElement(vlan, "id")
        id_key.text = kwargs.pop('id')
        max_age = ET.SubElement(vlan, "max-age")
        max_age.text = kwargs.pop('max_age')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_rpvst_vlan_hello_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        rpvst = ET.SubElement(spanning_tree, "rpvst")
        vlan = ET.SubElement(rpvst, "vlan")
        id_key = ET.SubElement(vlan, "id")
        id_key.text = kwargs.pop('id')
        hello_time = ET.SubElement(vlan, "hello-time")
        hello_time.text = kwargs.pop('hello_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_rpvst_transmit_holdcount(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        rpvst = ET.SubElement(spanning_tree, "rpvst")
        transmit_holdcount = ET.SubElement(rpvst, "transmit-holdcount")
        transmit_holdcount.text = kwargs.pop('transmit_holdcount')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_mstp_description(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        mstp = ET.SubElement(spanning_tree, "mstp")
        description = ET.SubElement(mstp, "description")
        description.text = kwargs.pop('description')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_mstp_bridge_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        mstp = ET.SubElement(spanning_tree, "mstp")
        bridge_priority = ET.SubElement(mstp, "bridge-priority")
        bridge_priority.text = kwargs.pop('bridge_priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_mstp_error_disable_timeout_enable(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        mstp = ET.SubElement(spanning_tree, "mstp")
        error_disable_timeout = ET.SubElement(mstp, "error-disable-timeout")
        enable = ET.SubElement(error_disable_timeout, "enable")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_mstp_error_disable_timeout_interval(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        mstp = ET.SubElement(spanning_tree, "mstp")
        error_disable_timeout = ET.SubElement(mstp, "error-disable-timeout")
        interval = ET.SubElement(error_disable_timeout, "interval")
        interval.text = kwargs.pop('interval')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_mstp_forward_delay(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        mstp = ET.SubElement(spanning_tree, "mstp")
        forward_delay = ET.SubElement(mstp, "forward-delay")
        forward_delay.text = kwargs.pop('forward_delay')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_mstp_max_age(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        mstp = ET.SubElement(spanning_tree, "mstp")
        max_age = ET.SubElement(mstp, "max-age")
        max_age.text = kwargs.pop('max_age')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_mstp_port_channel_path_cost(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        mstp = ET.SubElement(spanning_tree, "mstp")
        port_channel = ET.SubElement(mstp, "port-channel")
        path_cost = ET.SubElement(port_channel, "path-cost")
        path_cost.text = kwargs.pop('path_cost')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_mstp_shutdown(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        mstp = ET.SubElement(spanning_tree, "mstp")
        shutdown = ET.SubElement(mstp, "shutdown")

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_mstp_hello_time(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        mstp = ET.SubElement(spanning_tree, "mstp")
        hello_time = ET.SubElement(mstp, "hello-time")
        hello_time.text = kwargs.pop('hello_time')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_mstp_cisco_interoperability(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        mstp = ET.SubElement(spanning_tree, "mstp")
        cisco_interoperability = ET.SubElement(mstp, "cisco-interoperability")
        cisco_interoperability.text = kwargs.pop('cisco_interoperability')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_mstp_instance_id(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        mstp = ET.SubElement(spanning_tree, "mstp")
        instance = ET.SubElement(mstp, "instance")
        id = ET.SubElement(instance, "id")
        id.text = kwargs.pop('id')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_mstp_instance_vlan(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        mstp = ET.SubElement(spanning_tree, "mstp")
        instance = ET.SubElement(mstp, "instance")
        id_key = ET.SubElement(instance, "id")
        id_key.text = kwargs.pop('id')
        vlan = ET.SubElement(instance, "vlan")
        vlan.text = kwargs.pop('vlan')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_mstp_instance_priority(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        mstp = ET.SubElement(spanning_tree, "mstp")
        instance = ET.SubElement(mstp, "instance")
        id_key = ET.SubElement(instance, "id")
        id_key.text = kwargs.pop('id')
        priority = ET.SubElement(instance, "priority")
        priority.text = kwargs.pop('priority')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_mstp_region(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        mstp = ET.SubElement(spanning_tree, "mstp")
        region = ET.SubElement(mstp, "region")
        region.text = kwargs.pop('region')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_mstp_revision(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        mstp = ET.SubElement(spanning_tree, "mstp")
        revision = ET.SubElement(mstp, "revision")
        revision.text = kwargs.pop('revision')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_mstp_max_hops(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        mstp = ET.SubElement(spanning_tree, "mstp")
        max_hops = ET.SubElement(mstp, "max-hops")
        max_hops.text = kwargs.pop('max_hops')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def protocol_spanning_tree_mstp_transmit_holdcount(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        protocol = ET.SubElement(config, "protocol", xmlns="urn:brocade.com:mgmt:brocade-interface")
        spanning_tree = ET.SubElement(protocol, "spanning-tree", xmlns="urn:brocade.com:mgmt:brocade-xstp")
        mstp = ET.SubElement(spanning_tree, "mstp")
        transmit_holdcount = ET.SubElement(mstp, "transmit-holdcount")
        transmit_holdcount.text = kwargs.pop('transmit_holdcount')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def reserved_vlan_reserved_vlan_start(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        reserved_vlan = ET.SubElement(config, "reserved-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        reserved_vlan_start = ET.SubElement(reserved_vlan, "reserved-vlan-start")
        reserved_vlan_start.text = kwargs.pop('reserved_vlan_start')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        
    def reserved_vlan_reserved_vlan_end(self, **kwargs):
        """Auto Generated Code
        """
        config = ET.Element("config")
        reserved_vlan = ET.SubElement(config, "reserved-vlan", xmlns="urn:brocade.com:mgmt:brocade-interface")
        reserved_vlan_end = ET.SubElement(reserved_vlan, "reserved-vlan-end")
        reserved_vlan_end.text = kwargs.pop('reserved_vlan_end')

        callback = kwargs.pop('callback', self._callback)
        return callback(config)
        