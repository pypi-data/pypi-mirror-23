# You should not use special characture in the value keys
#
# A single whitespace in `line` will match any number of whitespaces. You should be explicit when
# Matching white space in `values`
#
prefix:
  time_format: "%b %d %H:%M:%S"
  values:
    date: (\w+\s+\d+)
    time: (\d\d:\d\d:\d\d)
    hostPrefix: (re\d.)?
    host: ([^ ]+)
    processName: /?(\w+)
    # Most log lines have a process ID, however some do not
    processId: \[?(\d+)?\]?
    tag: ([\w\s]+)
  line: '{date} {time} {hostPrefix}{host} {processName}{processId}: {tag}:'

messages:
  # 'error' should be unique and vendor agnostic. Currently we are using the JUNOS syslog message name as the canonical name.
  # This may change if we are able to find a more well defined naming system.
  - error: BGP_PEER_NOT_CONFIGURED
    tag: bgp_read_message
    values:
      peer: ([\w\d:\.]+)
      asn: (\d+)
      number: (\d+)
    replace: {}
    line: '{number}: NOTIFICATION received from {peer} (External AS {asn}): code 6 (Cease) subcode 5 (Connection Rejected)'
    model: openconfig_bgp
    mapping:
      variables:
        bgp//neighbors//neighbor//{peer}//state//peer_as: asn
      static:
        bgp//neighbors//neighbor//{peer}//state//session_state: ACTIVE
  - error: BGP_PREFIX_THRESH_EXCEEDED
    tag: BGP_PREFIX_THRESH_EXCEEDED
    values:
      peer: (\d+\.\d+\.\d+\.\d+)
      asn: (\d+)
      limit: (\d+)
      current: (\d+)
      table: (\w+)
      type: (\w+)
      peeringType: (\w+)
    replace: {}
    line: '{peer} ({peeringType} AS {asn}): Configured maximum prefix-limit threshold({limit}) exceeded for {table}-{type} nlri: {current} (instance master)'
    model: openconfig_bgp
    mapping:
      variables:
        bgp//neighbors//neighbor//{peer}//state//peer_as: asn
        bgp//neighbors//neighbor//{peer}//afi_safis//afi_safi//{table}//state//prefixes//received: current
        bgp//neighbors//neighbor//{peer}//afi_safis//afi_safi//{table}//ipv4_{type}//prefix_limit//state//max_prefixes: limit
      static: {}
  - error: BGP_PREFIX_THRESH_EXCEEDED
    tag: BGP_PREFIX_THRESH_EXCEEDED
    values:
      peer: ([\w\d:]+)
      asn: (\d+)
      limit: (\d+)
      current: (\d+)
      table: (\w+)
      type: (\w+)
      peeringType: (\w+)
    replace: {}
    line: '{peer} ({peeringType} AS {asn}): Configured maximum prefix-limit threshold({limit}) exceeded for {table}-{type} nlri: {current} (instance master)'
    model: openconfig_bgp
    mapping:
      variables:
        bgp//neighbors//neighbor//{peer}//state//peer_as: asn
        bgp//neighbors//neighbor//{peer}//afi_safis//afi_safi//{table}//state//prefixes//received: current
        bgp//neighbors//neighbor//{peer}//afi_safis//afi_safi//{table}//ipv6_{type}//prefix_limit//state//max_prefixes: limit
      static: {}
  - error: BGP_PREFIX_LIMIT_EXCEEDED
    tag: BGP_PREFIX_LIMIT_EXCEEDED
    values:
      peer: (\d+\.\d+\.\d+\.\d+)
      asn: (\d+)
      limit: (\d+)
      current: (\d+)
      table: (\w+)
      type: (\w+)
      peeringType: (\w+)
    replace: {}
    line: '{peer} ({peeringType} AS {asn}): Configured maximum prefix-limit({limit}) exceeded for {table}-{type} nlri: {current} (instance master)'
    model: openconfig_bgp
    mapping:
      variables:
        bgp//neighbors//neighbor//{peer}//state//peer_as: asn
        bgp//neighbors//neighbor//{peer}//afi_safis//afi_safi//{table}//state//prefixes//received: current
        bgp//neighbors//neighbor//{peer}//afi_safis//afi_safi//{table}//ipv4_{type}//prefix_limit//state//max_prefixes: limit
      static: {}
  - error: BGP_PREFIX_LIMIT_EXCEEDED
    tag: BGP_PREFIX_LIMIT_EXCEEDED
    values:
      peer: ([\w\d:]+)
      asn: (\d+)
      limit: (\d+)
      current: (\d+)
      table: (\w+)
      type: (\w+)
      peeringType: (\w+)
    replace: {}
    line: '{peer} ({peeringType} AS {asn}): Configured maximum prefix-limit({limit}) exceeded for {table}-{type} nlri: {current} (instance master)'
    model: openconfig_bgp
    mapping:
      variables:
        bgp//neighbors//neighbor//{peer}//state//peer_as: asn
        bgp//neighbors//neighbor//{peer}//afi_safis//afi_safi//{table}//state//prefixes//received: current
        bgp//neighbors//neighbor//{peer}//afi_safis//afi_safi//{table}//ipv6_{type}//prefix_limit//state//max_prefixes: limit
      static: {}
  - error: USER_ENTER_CONFIG_MODE
    tag: UI_DBASE_LOGIN_EVENT
    values:
      user: (\w+)
    replace: {}
    line: User '{user}' entering configuration mode
    model: NO_MODEL
    mapping:
      variables: {}
      static:
        users//user//{user}//action//enter_config_mode: True
  - error: BGP_MD5_INCORRECT
    tag: tcp_auth_ok
    values:
      peer: (\d+\.\d+\.\d+\.\d+)
      port: (\d+)
    replace: {}
    line: 'Packet from {peer}:{port} wrong MD5 digest'
    model: openconfig_bgp
    mapping:
      variables: {}
      static:
        bgp//neighbors//neighbor//{peer}//state//session_state: CONNECT
  - error: INTERFACE_DOWN
    tag: SNMP_TRAP_LINK_DOWN
    values:
      snmpID: (\d+)
      adminStatusString: (\w+)
      adminStatusValue: (\d)
      operStatusString: (\w+)
      operStatusValue: (\d)
      interface: ([\w\-\/]+)
    replace:
      adminStatusString: uppercase
      operStatusString: uppercase
    line: 'ifIndex {snmpID}, ifAdminStatus {adminStatusString}({adminStatusValue}), ifOperStatus {operStatusString}({operStatusValue}), ifName {interface}'
    model: openconfig_interfaces
    mapping:
      variables:
        interfaces//interface//{interface}//state//admin_status: adminStatusString
        interfaces//interface//{interface}//state//oper_status: operStatusString
      static: {}
