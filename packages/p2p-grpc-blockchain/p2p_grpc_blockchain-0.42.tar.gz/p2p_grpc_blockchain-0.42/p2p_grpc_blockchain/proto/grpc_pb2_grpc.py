# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import grpc_pb2 as grpc__pb2


class DiscoveryStub(object):

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.ExchangeNode = channel.unary_unary(
        '/Discovery/ExchangeNode',
        request_serializer=grpc__pb2.Node.SerializeToString,
        response_deserializer=grpc__pb2.Node.FromString,
        )
    self.Hello = channel.unary_unary(
        '/Discovery/Hello',
        request_serializer=grpc__pb2.Message.SerializeToString,
        response_deserializer=grpc__pb2.Message.FromString,
        )


class DiscoveryServicer(object):

  def ExchangeNode(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Hello(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_DiscoveryServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'ExchangeNode': grpc.unary_unary_rpc_method_handler(
          servicer.ExchangeNode,
          request_deserializer=grpc__pb2.Node.FromString,
          response_serializer=grpc__pb2.Node.SerializeToString,
      ),
      'Hello': grpc.unary_unary_rpc_method_handler(
          servicer.Hello,
          request_deserializer=grpc__pb2.Message.FromString,
          response_serializer=grpc__pb2.Message.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'Discovery', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class SynchronizationStub(object):

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.BlockFrom = channel.unary_unary(
        '/Synchronization/BlockFrom',
        request_serializer=grpc__pb2.Message.SerializeToString,
        response_deserializer=grpc__pb2.Block.FromString,
        )
    self.BlockTo = channel.unary_unary(
        '/Synchronization/BlockTo',
        request_serializer=grpc__pb2.Block.SerializeToString,
        response_deserializer=grpc__pb2.Message.FromString,
        )
    self.ExchangeBlock = channel.unary_unary(
        '/Synchronization/ExchangeBlock',
        request_serializer=grpc__pb2.Block.SerializeToString,
        response_deserializer=grpc__pb2.Block.FromString,
        )
    self.TransactionTo = channel.unary_unary(
        '/Synchronization/TransactionTo',
        request_serializer=grpc__pb2.Transaction.SerializeToString,
        response_deserializer=grpc__pb2.Message.FromString,
        )
    self.TransactionFrom = channel.unary_unary(
        '/Synchronization/TransactionFrom',
        request_serializer=grpc__pb2.Message.SerializeToString,
        response_deserializer=grpc__pb2.Transaction.FromString,
        )


class SynchronizationServicer(object):

  def BlockFrom(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def BlockTo(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ExchangeBlock(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def TransactionTo(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def TransactionFrom(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_SynchronizationServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'BlockFrom': grpc.unary_unary_rpc_method_handler(
          servicer.BlockFrom,
          request_deserializer=grpc__pb2.Message.FromString,
          response_serializer=grpc__pb2.Block.SerializeToString,
      ),
      'BlockTo': grpc.unary_unary_rpc_method_handler(
          servicer.BlockTo,
          request_deserializer=grpc__pb2.Block.FromString,
          response_serializer=grpc__pb2.Message.SerializeToString,
      ),
      'ExchangeBlock': grpc.unary_unary_rpc_method_handler(
          servicer.ExchangeBlock,
          request_deserializer=grpc__pb2.Block.FromString,
          response_serializer=grpc__pb2.Block.SerializeToString,
      ),
      'TransactionTo': grpc.unary_unary_rpc_method_handler(
          servicer.TransactionTo,
          request_deserializer=grpc__pb2.Transaction.FromString,
          response_serializer=grpc__pb2.Message.SerializeToString,
      ),
      'TransactionFrom': grpc.unary_unary_rpc_method_handler(
          servicer.TransactionFrom,
          request_deserializer=grpc__pb2.Message.FromString,
          response_serializer=grpc__pb2.Transaction.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'Synchronization', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
