# coding: utf-8

"""
    OrderCloud

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0
    Contact: ordercloud@four51.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class BaseSpec(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, list_order=None, name=None, default_value=None, required=None, allow_open_text=None, default_option_id=None, defines_variant=None, xp=None):
        """
        BaseSpec - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'list_order': 'int',
            'name': 'str',
            'default_value': 'str',
            'required': 'bool',
            'allow_open_text': 'bool',
            'default_option_id': 'str',
            'defines_variant': 'bool',
            'xp': 'object'
        }

        self.attribute_map = {
            'id': 'ID',
            'list_order': 'ListOrder',
            'name': 'Name',
            'default_value': 'DefaultValue',
            'required': 'Required',
            'allow_open_text': 'AllowOpenText',
            'default_option_id': 'DefaultOptionID',
            'defines_variant': 'DefinesVariant',
            'xp': 'xp'
        }

        self._id = id
        self._list_order = list_order
        self._name = name
        self._default_value = default_value
        self._required = required
        self._allow_open_text = allow_open_text
        self._default_option_id = default_option_id
        self._defines_variant = defines_variant
        self._xp = xp

    @property
    def id(self):
        """
        Gets the id of this BaseSpec.


        :return: The id of this BaseSpec.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this BaseSpec.


        :param id: The id of this BaseSpec.
        :type: str
        """

        self._id = id

    @property
    def list_order(self):
        """
        Gets the list_order of this BaseSpec.


        :return: The list_order of this BaseSpec.
        :rtype: int
        """
        return self._list_order

    @list_order.setter
    def list_order(self, list_order):
        """
        Sets the list_order of this BaseSpec.


        :param list_order: The list_order of this BaseSpec.
        :type: int
        """

        self._list_order = list_order

    @property
    def name(self):
        """
        Gets the name of this BaseSpec.


        :return: The name of this BaseSpec.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this BaseSpec.


        :param name: The name of this BaseSpec.
        :type: str
        """

        self._name = name

    @property
    def default_value(self):
        """
        Gets the default_value of this BaseSpec.


        :return: The default_value of this BaseSpec.
        :rtype: str
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """
        Sets the default_value of this BaseSpec.


        :param default_value: The default_value of this BaseSpec.
        :type: str
        """

        self._default_value = default_value

    @property
    def required(self):
        """
        Gets the required of this BaseSpec.


        :return: The required of this BaseSpec.
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """
        Sets the required of this BaseSpec.


        :param required: The required of this BaseSpec.
        :type: bool
        """

        self._required = required

    @property
    def allow_open_text(self):
        """
        Gets the allow_open_text of this BaseSpec.


        :return: The allow_open_text of this BaseSpec.
        :rtype: bool
        """
        return self._allow_open_text

    @allow_open_text.setter
    def allow_open_text(self, allow_open_text):
        """
        Sets the allow_open_text of this BaseSpec.


        :param allow_open_text: The allow_open_text of this BaseSpec.
        :type: bool
        """

        self._allow_open_text = allow_open_text

    @property
    def default_option_id(self):
        """
        Gets the default_option_id of this BaseSpec.


        :return: The default_option_id of this BaseSpec.
        :rtype: str
        """
        return self._default_option_id

    @default_option_id.setter
    def default_option_id(self, default_option_id):
        """
        Sets the default_option_id of this BaseSpec.


        :param default_option_id: The default_option_id of this BaseSpec.
        :type: str
        """

        self._default_option_id = default_option_id

    @property
    def defines_variant(self):
        """
        Gets the defines_variant of this BaseSpec.


        :return: The defines_variant of this BaseSpec.
        :rtype: bool
        """
        return self._defines_variant

    @defines_variant.setter
    def defines_variant(self, defines_variant):
        """
        Sets the defines_variant of this BaseSpec.


        :param defines_variant: The defines_variant of this BaseSpec.
        :type: bool
        """

        self._defines_variant = defines_variant

    @property
    def xp(self):
        """
        Gets the xp of this BaseSpec.


        :return: The xp of this BaseSpec.
        :rtype: object
        """
        return self._xp

    @xp.setter
    def xp(self, xp):
        """
        Sets the xp of this BaseSpec.


        :param xp: The xp of this BaseSpec.
        :type: object
        """

        self._xp = xp

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
