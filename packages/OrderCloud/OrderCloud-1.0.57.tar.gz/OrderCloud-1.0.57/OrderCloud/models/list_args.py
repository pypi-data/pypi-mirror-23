# coding: utf-8

"""
    OrderCloud

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0
    Contact: ordercloud@four51.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class ListArgs(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, search=None, search_on=None, sort_by=None, page=None, page_size=None, filters=None):
        """
        ListArgs - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'search': 'str',
            'search_on': 'list[str]',
            'sort_by': 'list[str]',
            'page': 'int',
            'page_size': 'int',
            'filters': 'object'
        }

        self.attribute_map = {
            'search': 'Search',
            'search_on': 'SearchOn',
            'sort_by': 'SortBy',
            'page': 'Page',
            'page_size': 'PageSize',
            'filters': 'Filters'
        }

        self._search = search
        self._search_on = search_on
        self._sort_by = sort_by
        self._page = page
        self._page_size = page_size
        self._filters = filters

    @property
    def search(self):
        """
        Gets the search of this ListArgs.


        :return: The search of this ListArgs.
        :rtype: str
        """
        return self._search

    @search.setter
    def search(self, search):
        """
        Sets the search of this ListArgs.


        :param search: The search of this ListArgs.
        :type: str
        """

        self._search = search

    @property
    def search_on(self):
        """
        Gets the search_on of this ListArgs.


        :return: The search_on of this ListArgs.
        :rtype: list[str]
        """
        return self._search_on

    @search_on.setter
    def search_on(self, search_on):
        """
        Sets the search_on of this ListArgs.


        :param search_on: The search_on of this ListArgs.
        :type: list[str]
        """

        self._search_on = search_on

    @property
    def sort_by(self):
        """
        Gets the sort_by of this ListArgs.


        :return: The sort_by of this ListArgs.
        :rtype: list[str]
        """
        return self._sort_by

    @sort_by.setter
    def sort_by(self, sort_by):
        """
        Sets the sort_by of this ListArgs.


        :param sort_by: The sort_by of this ListArgs.
        :type: list[str]
        """

        self._sort_by = sort_by

    @property
    def page(self):
        """
        Gets the page of this ListArgs.


        :return: The page of this ListArgs.
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page):
        """
        Sets the page of this ListArgs.


        :param page: The page of this ListArgs.
        :type: int
        """

        self._page = page

    @property
    def page_size(self):
        """
        Gets the page_size of this ListArgs.


        :return: The page_size of this ListArgs.
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """
        Sets the page_size of this ListArgs.


        :param page_size: The page_size of this ListArgs.
        :type: int
        """

        self._page_size = page_size

    @property
    def filters(self):
        """
        Gets the filters of this ListArgs.


        :return: The filters of this ListArgs.
        :rtype: object
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """
        Sets the filters of this ListArgs.


        :param filters: The filters of this ListArgs.
        :type: object
        """

        self._filters = filters

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
