# coding: utf-8

"""
    OrderCloud

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0
    Contact: ordercloud@four51.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Inventory(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, enabled=None, notification_point=None, variant_level_tracking=None, order_can_exceed=None, quantity_available=None, last_updated=None):
        """
        Inventory - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'enabled': 'bool',
            'notification_point': 'int',
            'variant_level_tracking': 'bool',
            'order_can_exceed': 'bool',
            'quantity_available': 'int',
            'last_updated': 'str'
        }

        self.attribute_map = {
            'enabled': 'Enabled',
            'notification_point': 'NotificationPoint',
            'variant_level_tracking': 'VariantLevelTracking',
            'order_can_exceed': 'OrderCanExceed',
            'quantity_available': 'QuantityAvailable',
            'last_updated': 'LastUpdated'
        }

        self._enabled = enabled
        self._notification_point = notification_point
        self._variant_level_tracking = variant_level_tracking
        self._order_can_exceed = order_can_exceed
        self._quantity_available = quantity_available
        self._last_updated = last_updated

    @property
    def enabled(self):
        """
        Gets the enabled of this Inventory.


        :return: The enabled of this Inventory.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """
        Sets the enabled of this Inventory.


        :param enabled: The enabled of this Inventory.
        :type: bool
        """

        self._enabled = enabled

    @property
    def notification_point(self):
        """
        Gets the notification_point of this Inventory.


        :return: The notification_point of this Inventory.
        :rtype: int
        """
        return self._notification_point

    @notification_point.setter
    def notification_point(self, notification_point):
        """
        Sets the notification_point of this Inventory.


        :param notification_point: The notification_point of this Inventory.
        :type: int
        """

        self._notification_point = notification_point

    @property
    def variant_level_tracking(self):
        """
        Gets the variant_level_tracking of this Inventory.


        :return: The variant_level_tracking of this Inventory.
        :rtype: bool
        """
        return self._variant_level_tracking

    @variant_level_tracking.setter
    def variant_level_tracking(self, variant_level_tracking):
        """
        Sets the variant_level_tracking of this Inventory.


        :param variant_level_tracking: The variant_level_tracking of this Inventory.
        :type: bool
        """

        self._variant_level_tracking = variant_level_tracking

    @property
    def order_can_exceed(self):
        """
        Gets the order_can_exceed of this Inventory.


        :return: The order_can_exceed of this Inventory.
        :rtype: bool
        """
        return self._order_can_exceed

    @order_can_exceed.setter
    def order_can_exceed(self, order_can_exceed):
        """
        Sets the order_can_exceed of this Inventory.


        :param order_can_exceed: The order_can_exceed of this Inventory.
        :type: bool
        """

        self._order_can_exceed = order_can_exceed

    @property
    def quantity_available(self):
        """
        Gets the quantity_available of this Inventory.


        :return: The quantity_available of this Inventory.
        :rtype: int
        """
        return self._quantity_available

    @quantity_available.setter
    def quantity_available(self, quantity_available):
        """
        Sets the quantity_available of this Inventory.


        :param quantity_available: The quantity_available of this Inventory.
        :type: int
        """

        self._quantity_available = quantity_available

    @property
    def last_updated(self):
        """
        Gets the last_updated of this Inventory.


        :return: The last_updated of this Inventory.
        :rtype: str
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """
        Sets the last_updated of this Inventory.


        :param last_updated: The last_updated of this Inventory.
        :type: str
        """

        self._last_updated = last_updated

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
