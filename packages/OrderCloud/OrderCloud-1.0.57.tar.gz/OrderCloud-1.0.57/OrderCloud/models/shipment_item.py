# coding: utf-8

"""
    OrderCloud

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0
    Contact: ordercloud@four51.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class ShipmentItem(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, order_id=None, line_item_id=None, quantity_shipped=None, unit_price=None, cost_center=None, date_needed=None, product=None, specs=None, xp=None):
        """
        ShipmentItem - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'order_id': 'str',
            'line_item_id': 'str',
            'quantity_shipped': 'int',
            'unit_price': 'float',
            'cost_center': 'str',
            'date_needed': 'str',
            'product': 'LineItemProduct',
            'specs': 'list[LineItemSpec]',
            'xp': 'object'
        }

        self.attribute_map = {
            'order_id': 'OrderID',
            'line_item_id': 'LineItemID',
            'quantity_shipped': 'QuantityShipped',
            'unit_price': 'UnitPrice',
            'cost_center': 'CostCenter',
            'date_needed': 'DateNeeded',
            'product': 'Product',
            'specs': 'Specs',
            'xp': 'xp'
        }

        self._order_id = order_id
        self._line_item_id = line_item_id
        self._quantity_shipped = quantity_shipped
        self._unit_price = unit_price
        self._cost_center = cost_center
        self._date_needed = date_needed
        self._product = product
        self._specs = specs
        self._xp = xp

    @property
    def order_id(self):
        """
        Gets the order_id of this ShipmentItem.


        :return: The order_id of this ShipmentItem.
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """
        Sets the order_id of this ShipmentItem.


        :param order_id: The order_id of this ShipmentItem.
        :type: str
        """

        self._order_id = order_id

    @property
    def line_item_id(self):
        """
        Gets the line_item_id of this ShipmentItem.


        :return: The line_item_id of this ShipmentItem.
        :rtype: str
        """
        return self._line_item_id

    @line_item_id.setter
    def line_item_id(self, line_item_id):
        """
        Sets the line_item_id of this ShipmentItem.


        :param line_item_id: The line_item_id of this ShipmentItem.
        :type: str
        """

        self._line_item_id = line_item_id

    @property
    def quantity_shipped(self):
        """
        Gets the quantity_shipped of this ShipmentItem.


        :return: The quantity_shipped of this ShipmentItem.
        :rtype: int
        """
        return self._quantity_shipped

    @quantity_shipped.setter
    def quantity_shipped(self, quantity_shipped):
        """
        Sets the quantity_shipped of this ShipmentItem.


        :param quantity_shipped: The quantity_shipped of this ShipmentItem.
        :type: int
        """

        self._quantity_shipped = quantity_shipped

    @property
    def unit_price(self):
        """
        Gets the unit_price of this ShipmentItem.


        :return: The unit_price of this ShipmentItem.
        :rtype: float
        """
        return self._unit_price

    @unit_price.setter
    def unit_price(self, unit_price):
        """
        Sets the unit_price of this ShipmentItem.


        :param unit_price: The unit_price of this ShipmentItem.
        :type: float
        """

        self._unit_price = unit_price

    @property
    def cost_center(self):
        """
        Gets the cost_center of this ShipmentItem.


        :return: The cost_center of this ShipmentItem.
        :rtype: str
        """
        return self._cost_center

    @cost_center.setter
    def cost_center(self, cost_center):
        """
        Sets the cost_center of this ShipmentItem.


        :param cost_center: The cost_center of this ShipmentItem.
        :type: str
        """

        self._cost_center = cost_center

    @property
    def date_needed(self):
        """
        Gets the date_needed of this ShipmentItem.


        :return: The date_needed of this ShipmentItem.
        :rtype: str
        """
        return self._date_needed

    @date_needed.setter
    def date_needed(self, date_needed):
        """
        Sets the date_needed of this ShipmentItem.


        :param date_needed: The date_needed of this ShipmentItem.
        :type: str
        """

        self._date_needed = date_needed

    @property
    def product(self):
        """
        Gets the product of this ShipmentItem.


        :return: The product of this ShipmentItem.
        :rtype: LineItemProduct
        """
        return self._product

    @product.setter
    def product(self, product):
        """
        Sets the product of this ShipmentItem.


        :param product: The product of this ShipmentItem.
        :type: LineItemProduct
        """

        self._product = product

    @property
    def specs(self):
        """
        Gets the specs of this ShipmentItem.


        :return: The specs of this ShipmentItem.
        :rtype: list[LineItemSpec]
        """
        return self._specs

    @specs.setter
    def specs(self, specs):
        """
        Sets the specs of this ShipmentItem.


        :param specs: The specs of this ShipmentItem.
        :type: list[LineItemSpec]
        """

        self._specs = specs

    @property
    def xp(self):
        """
        Gets the xp of this ShipmentItem.


        :return: The xp of this ShipmentItem.
        :rtype: object
        """
        return self._xp

    @xp.setter
    def xp(self, xp):
        """
        Sets the xp of this ShipmentItem.


        :param xp: The xp of this ShipmentItem.
        :type: object
        """

        self._xp = xp

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
