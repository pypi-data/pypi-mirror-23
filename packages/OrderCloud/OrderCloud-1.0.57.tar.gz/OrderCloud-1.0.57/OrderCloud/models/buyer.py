# coding: utf-8

"""
    OrderCloud

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0
    Contact: ordercloud@four51.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Buyer(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, name=None, default_catalog_id=None, active=None, xp=None):
        """
        Buyer - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'name': 'str',
            'default_catalog_id': 'str',
            'active': 'bool',
            'xp': 'object'
        }

        self.attribute_map = {
            'id': 'ID',
            'name': 'Name',
            'default_catalog_id': 'DefaultCatalogID',
            'active': 'Active',
            'xp': 'xp'
        }

        self._id = id
        self._name = name
        self._default_catalog_id = default_catalog_id
        self._active = active
        self._xp = xp

    @property
    def id(self):
        """
        Gets the id of this Buyer.


        :return: The id of this Buyer.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Buyer.


        :param id: The id of this Buyer.
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this Buyer.


        :return: The name of this Buyer.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Buyer.


        :param name: The name of this Buyer.
        :type: str
        """

        self._name = name

    @property
    def default_catalog_id(self):
        """
        Gets the default_catalog_id of this Buyer.


        :return: The default_catalog_id of this Buyer.
        :rtype: str
        """
        return self._default_catalog_id

    @default_catalog_id.setter
    def default_catalog_id(self, default_catalog_id):
        """
        Sets the default_catalog_id of this Buyer.


        :param default_catalog_id: The default_catalog_id of this Buyer.
        :type: str
        """

        self._default_catalog_id = default_catalog_id

    @property
    def active(self):
        """
        Gets the active of this Buyer.


        :return: The active of this Buyer.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """
        Sets the active of this Buyer.


        :param active: The active of this Buyer.
        :type: bool
        """

        self._active = active

    @property
    def xp(self):
        """
        Gets the xp of this Buyer.


        :return: The xp of this Buyer.
        :rtype: object
        """
        return self._xp

    @xp.setter
    def xp(self, xp):
        """
        Sets the xp of this Buyer.


        :param xp: The xp of this Buyer.
        :type: object
        """

        self._xp = xp

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
