# coding: utf-8

"""
    OrderCloud

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0
    Contact: ordercloud@four51.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class PaymentTransaction(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, type=None, date_executed=None, amount=None, succeeded=None, result_code=None, result_message=None, xp=None):
        """
        PaymentTransaction - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'type': 'str',
            'date_executed': 'str',
            'amount': 'float',
            'succeeded': 'bool',
            'result_code': 'str',
            'result_message': 'str',
            'xp': 'object'
        }

        self.attribute_map = {
            'id': 'ID',
            'type': 'Type',
            'date_executed': 'DateExecuted',
            'amount': 'Amount',
            'succeeded': 'Succeeded',
            'result_code': 'ResultCode',
            'result_message': 'ResultMessage',
            'xp': 'xp'
        }

        self._id = id
        self._type = type
        self._date_executed = date_executed
        self._amount = amount
        self._succeeded = succeeded
        self._result_code = result_code
        self._result_message = result_message
        self._xp = xp

    @property
    def id(self):
        """
        Gets the id of this PaymentTransaction.


        :return: The id of this PaymentTransaction.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this PaymentTransaction.


        :param id: The id of this PaymentTransaction.
        :type: str
        """

        self._id = id

    @property
    def type(self):
        """
        Gets the type of this PaymentTransaction.


        :return: The type of this PaymentTransaction.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this PaymentTransaction.


        :param type: The type of this PaymentTransaction.
        :type: str
        """

        self._type = type

    @property
    def date_executed(self):
        """
        Gets the date_executed of this PaymentTransaction.


        :return: The date_executed of this PaymentTransaction.
        :rtype: str
        """
        return self._date_executed

    @date_executed.setter
    def date_executed(self, date_executed):
        """
        Sets the date_executed of this PaymentTransaction.


        :param date_executed: The date_executed of this PaymentTransaction.
        :type: str
        """

        self._date_executed = date_executed

    @property
    def amount(self):
        """
        Gets the amount of this PaymentTransaction.


        :return: The amount of this PaymentTransaction.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """
        Sets the amount of this PaymentTransaction.


        :param amount: The amount of this PaymentTransaction.
        :type: float
        """

        self._amount = amount

    @property
    def succeeded(self):
        """
        Gets the succeeded of this PaymentTransaction.


        :return: The succeeded of this PaymentTransaction.
        :rtype: bool
        """
        return self._succeeded

    @succeeded.setter
    def succeeded(self, succeeded):
        """
        Sets the succeeded of this PaymentTransaction.


        :param succeeded: The succeeded of this PaymentTransaction.
        :type: bool
        """

        self._succeeded = succeeded

    @property
    def result_code(self):
        """
        Gets the result_code of this PaymentTransaction.


        :return: The result_code of this PaymentTransaction.
        :rtype: str
        """
        return self._result_code

    @result_code.setter
    def result_code(self, result_code):
        """
        Sets the result_code of this PaymentTransaction.


        :param result_code: The result_code of this PaymentTransaction.
        :type: str
        """

        self._result_code = result_code

    @property
    def result_message(self):
        """
        Gets the result_message of this PaymentTransaction.


        :return: The result_message of this PaymentTransaction.
        :rtype: str
        """
        return self._result_message

    @result_message.setter
    def result_message(self, result_message):
        """
        Sets the result_message of this PaymentTransaction.


        :param result_message: The result_message of this PaymentTransaction.
        :type: str
        """

        self._result_message = result_message

    @property
    def xp(self):
        """
        Gets the xp of this PaymentTransaction.


        :return: The xp of this PaymentTransaction.
        :rtype: object
        """
        return self._xp

    @xp.setter
    def xp(self, xp):
        """
        Sets the xp of this PaymentTransaction.


        :param xp: The xp of this PaymentTransaction.
        :type: object
        """

        self._xp = xp

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
