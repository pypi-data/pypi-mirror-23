# coding: utf-8

"""
    OrderCloud

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0
    Contact: ordercloud@four51.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class LineItemProduct(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, name=None, description=None, quantity_multiplier=None, ship_weight=None, ship_height=None, ship_width=None, ship_length=None, xp=None):
        """
        LineItemProduct - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'name': 'str',
            'description': 'str',
            'quantity_multiplier': 'int',
            'ship_weight': 'float',
            'ship_height': 'float',
            'ship_width': 'float',
            'ship_length': 'float',
            'xp': 'object'
        }

        self.attribute_map = {
            'id': 'ID',
            'name': 'Name',
            'description': 'Description',
            'quantity_multiplier': 'QuantityMultiplier',
            'ship_weight': 'ShipWeight',
            'ship_height': 'ShipHeight',
            'ship_width': 'ShipWidth',
            'ship_length': 'ShipLength',
            'xp': 'xp'
        }

        self._id = id
        self._name = name
        self._description = description
        self._quantity_multiplier = quantity_multiplier
        self._ship_weight = ship_weight
        self._ship_height = ship_height
        self._ship_width = ship_width
        self._ship_length = ship_length
        self._xp = xp

    @property
    def id(self):
        """
        Gets the id of this LineItemProduct.


        :return: The id of this LineItemProduct.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this LineItemProduct.


        :param id: The id of this LineItemProduct.
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this LineItemProduct.


        :return: The name of this LineItemProduct.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this LineItemProduct.


        :param name: The name of this LineItemProduct.
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """
        Gets the description of this LineItemProduct.


        :return: The description of this LineItemProduct.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this LineItemProduct.


        :param description: The description of this LineItemProduct.
        :type: str
        """

        self._description = description

    @property
    def quantity_multiplier(self):
        """
        Gets the quantity_multiplier of this LineItemProduct.


        :return: The quantity_multiplier of this LineItemProduct.
        :rtype: int
        """
        return self._quantity_multiplier

    @quantity_multiplier.setter
    def quantity_multiplier(self, quantity_multiplier):
        """
        Sets the quantity_multiplier of this LineItemProduct.


        :param quantity_multiplier: The quantity_multiplier of this LineItemProduct.
        :type: int
        """

        self._quantity_multiplier = quantity_multiplier

    @property
    def ship_weight(self):
        """
        Gets the ship_weight of this LineItemProduct.


        :return: The ship_weight of this LineItemProduct.
        :rtype: float
        """
        return self._ship_weight

    @ship_weight.setter
    def ship_weight(self, ship_weight):
        """
        Sets the ship_weight of this LineItemProduct.


        :param ship_weight: The ship_weight of this LineItemProduct.
        :type: float
        """

        self._ship_weight = ship_weight

    @property
    def ship_height(self):
        """
        Gets the ship_height of this LineItemProduct.


        :return: The ship_height of this LineItemProduct.
        :rtype: float
        """
        return self._ship_height

    @ship_height.setter
    def ship_height(self, ship_height):
        """
        Sets the ship_height of this LineItemProduct.


        :param ship_height: The ship_height of this LineItemProduct.
        :type: float
        """

        self._ship_height = ship_height

    @property
    def ship_width(self):
        """
        Gets the ship_width of this LineItemProduct.


        :return: The ship_width of this LineItemProduct.
        :rtype: float
        """
        return self._ship_width

    @ship_width.setter
    def ship_width(self, ship_width):
        """
        Sets the ship_width of this LineItemProduct.


        :param ship_width: The ship_width of this LineItemProduct.
        :type: float
        """

        self._ship_width = ship_width

    @property
    def ship_length(self):
        """
        Gets the ship_length of this LineItemProduct.


        :return: The ship_length of this LineItemProduct.
        :rtype: float
        """
        return self._ship_length

    @ship_length.setter
    def ship_length(self, ship_length):
        """
        Sets the ship_length of this LineItemProduct.


        :param ship_length: The ship_length of this LineItemProduct.
        :type: float
        """

        self._ship_length = ship_length

    @property
    def xp(self):
        """
        Gets the xp of this LineItemProduct.


        :return: The xp of this LineItemProduct.
        :rtype: object
        """
        return self._xp

    @xp.setter
    def xp(self, xp):
        """
        Sets the xp of this LineItemProduct.


        :param xp: The xp of this LineItemProduct.
        :type: object
        """

        self._xp = xp

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
