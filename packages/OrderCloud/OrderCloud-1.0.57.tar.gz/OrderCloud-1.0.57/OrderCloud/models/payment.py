# coding: utf-8

"""
    OrderCloud

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0
    Contact: ordercloud@four51.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Payment(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, type=None, date_created=None, credit_card_id=None, spending_account_id=None, description=None, amount=None, accepted=None, xp=None, transactions=None):
        """
        Payment - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'type': 'str',
            'date_created': 'str',
            'credit_card_id': 'str',
            'spending_account_id': 'str',
            'description': 'str',
            'amount': 'float',
            'accepted': 'bool',
            'xp': 'object',
            'transactions': 'list[PaymentTransaction]'
        }

        self.attribute_map = {
            'id': 'ID',
            'type': 'Type',
            'date_created': 'DateCreated',
            'credit_card_id': 'CreditCardID',
            'spending_account_id': 'SpendingAccountID',
            'description': 'Description',
            'amount': 'Amount',
            'accepted': 'Accepted',
            'xp': 'xp',
            'transactions': 'Transactions'
        }

        self._id = id
        self._type = type
        self._date_created = date_created
        self._credit_card_id = credit_card_id
        self._spending_account_id = spending_account_id
        self._description = description
        self._amount = amount
        self._accepted = accepted
        self._xp = xp
        self._transactions = transactions

    @property
    def id(self):
        """
        Gets the id of this Payment.


        :return: The id of this Payment.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Payment.


        :param id: The id of this Payment.
        :type: str
        """

        self._id = id

    @property
    def type(self):
        """
        Gets the type of this Payment.


        :return: The type of this Payment.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this Payment.


        :param type: The type of this Payment.
        :type: str
        """

        self._type = type

    @property
    def date_created(self):
        """
        Gets the date_created of this Payment.


        :return: The date_created of this Payment.
        :rtype: str
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """
        Sets the date_created of this Payment.


        :param date_created: The date_created of this Payment.
        :type: str
        """

        self._date_created = date_created

    @property
    def credit_card_id(self):
        """
        Gets the credit_card_id of this Payment.


        :return: The credit_card_id of this Payment.
        :rtype: str
        """
        return self._credit_card_id

    @credit_card_id.setter
    def credit_card_id(self, credit_card_id):
        """
        Sets the credit_card_id of this Payment.


        :param credit_card_id: The credit_card_id of this Payment.
        :type: str
        """

        self._credit_card_id = credit_card_id

    @property
    def spending_account_id(self):
        """
        Gets the spending_account_id of this Payment.


        :return: The spending_account_id of this Payment.
        :rtype: str
        """
        return self._spending_account_id

    @spending_account_id.setter
    def spending_account_id(self, spending_account_id):
        """
        Sets the spending_account_id of this Payment.


        :param spending_account_id: The spending_account_id of this Payment.
        :type: str
        """

        self._spending_account_id = spending_account_id

    @property
    def description(self):
        """
        Gets the description of this Payment.


        :return: The description of this Payment.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Payment.


        :param description: The description of this Payment.
        :type: str
        """

        self._description = description

    @property
    def amount(self):
        """
        Gets the amount of this Payment.


        :return: The amount of this Payment.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """
        Sets the amount of this Payment.


        :param amount: The amount of this Payment.
        :type: float
        """

        self._amount = amount

    @property
    def accepted(self):
        """
        Gets the accepted of this Payment.


        :return: The accepted of this Payment.
        :rtype: bool
        """
        return self._accepted

    @accepted.setter
    def accepted(self, accepted):
        """
        Sets the accepted of this Payment.


        :param accepted: The accepted of this Payment.
        :type: bool
        """

        self._accepted = accepted

    @property
    def xp(self):
        """
        Gets the xp of this Payment.


        :return: The xp of this Payment.
        :rtype: object
        """
        return self._xp

    @xp.setter
    def xp(self, xp):
        """
        Sets the xp of this Payment.


        :param xp: The xp of this Payment.
        :type: object
        """

        self._xp = xp

    @property
    def transactions(self):
        """
        Gets the transactions of this Payment.


        :return: The transactions of this Payment.
        :rtype: list[PaymentTransaction]
        """
        return self._transactions

    @transactions.setter
    def transactions(self, transactions):
        """
        Sets the transactions of this Payment.


        :param transactions: The transactions of this Payment.
        :type: list[PaymentTransaction]
        """

        self._transactions = transactions

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
