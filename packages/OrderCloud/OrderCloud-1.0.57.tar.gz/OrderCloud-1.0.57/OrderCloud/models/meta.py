# coding: utf-8

"""
    OrderCloud

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0
    Contact: ordercloud@four51.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Meta(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, page=None, page_size=None, total_count=None, total_pages=None, item_range=None):
        """
        Meta - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'page': 'int',
            'page_size': 'int',
            'total_count': 'int',
            'total_pages': 'int',
            'item_range': 'list[int]'
        }

        self.attribute_map = {
            'page': 'Page',
            'page_size': 'PageSize',
            'total_count': 'TotalCount',
            'total_pages': 'TotalPages',
            'item_range': 'ItemRange'
        }

        self._page = page
        self._page_size = page_size
        self._total_count = total_count
        self._total_pages = total_pages
        self._item_range = item_range

    @property
    def page(self):
        """
        Gets the page of this Meta.


        :return: The page of this Meta.
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page):
        """
        Sets the page of this Meta.


        :param page: The page of this Meta.
        :type: int
        """

        self._page = page

    @property
    def page_size(self):
        """
        Gets the page_size of this Meta.


        :return: The page_size of this Meta.
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """
        Sets the page_size of this Meta.


        :param page_size: The page_size of this Meta.
        :type: int
        """

        self._page_size = page_size

    @property
    def total_count(self):
        """
        Gets the total_count of this Meta.


        :return: The total_count of this Meta.
        :rtype: int
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """
        Sets the total_count of this Meta.


        :param total_count: The total_count of this Meta.
        :type: int
        """

        self._total_count = total_count

    @property
    def total_pages(self):
        """
        Gets the total_pages of this Meta.


        :return: The total_pages of this Meta.
        :rtype: int
        """
        return self._total_pages

    @total_pages.setter
    def total_pages(self, total_pages):
        """
        Sets the total_pages of this Meta.


        :param total_pages: The total_pages of this Meta.
        :type: int
        """

        self._total_pages = total_pages

    @property
    def item_range(self):
        """
        Gets the item_range of this Meta.


        :return: The item_range of this Meta.
        :rtype: list[int]
        """
        return self._item_range

    @item_range.setter
    def item_range(self, item_range):
        """
        Sets the item_range of this Meta.


        :param item_range: The item_range of this Meta.
        :type: list[int]
        """

        self._item_range = item_range

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
