# coding: utf-8

"""
    OrderCloud

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0
    Contact: ordercloud@four51.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class SpecOption(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, value=None, list_order=None, is_open_text=None, price_markup_type=None, price_markup=None, xp=None):
        """
        SpecOption - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'value': 'str',
            'list_order': 'int',
            'is_open_text': 'bool',
            'price_markup_type': 'str',
            'price_markup': 'float',
            'xp': 'object'
        }

        self.attribute_map = {
            'id': 'ID',
            'value': 'Value',
            'list_order': 'ListOrder',
            'is_open_text': 'IsOpenText',
            'price_markup_type': 'PriceMarkupType',
            'price_markup': 'PriceMarkup',
            'xp': 'xp'
        }

        self._id = id
        self._value = value
        self._list_order = list_order
        self._is_open_text = is_open_text
        self._price_markup_type = price_markup_type
        self._price_markup = price_markup
        self._xp = xp

    @property
    def id(self):
        """
        Gets the id of this SpecOption.


        :return: The id of this SpecOption.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this SpecOption.


        :param id: The id of this SpecOption.
        :type: str
        """

        self._id = id

    @property
    def value(self):
        """
        Gets the value of this SpecOption.


        :return: The value of this SpecOption.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """
        Sets the value of this SpecOption.


        :param value: The value of this SpecOption.
        :type: str
        """

        self._value = value

    @property
    def list_order(self):
        """
        Gets the list_order of this SpecOption.


        :return: The list_order of this SpecOption.
        :rtype: int
        """
        return self._list_order

    @list_order.setter
    def list_order(self, list_order):
        """
        Sets the list_order of this SpecOption.


        :param list_order: The list_order of this SpecOption.
        :type: int
        """

        self._list_order = list_order

    @property
    def is_open_text(self):
        """
        Gets the is_open_text of this SpecOption.


        :return: The is_open_text of this SpecOption.
        :rtype: bool
        """
        return self._is_open_text

    @is_open_text.setter
    def is_open_text(self, is_open_text):
        """
        Sets the is_open_text of this SpecOption.


        :param is_open_text: The is_open_text of this SpecOption.
        :type: bool
        """

        self._is_open_text = is_open_text

    @property
    def price_markup_type(self):
        """
        Gets the price_markup_type of this SpecOption.


        :return: The price_markup_type of this SpecOption.
        :rtype: str
        """
        return self._price_markup_type

    @price_markup_type.setter
    def price_markup_type(self, price_markup_type):
        """
        Sets the price_markup_type of this SpecOption.


        :param price_markup_type: The price_markup_type of this SpecOption.
        :type: str
        """

        self._price_markup_type = price_markup_type

    @property
    def price_markup(self):
        """
        Gets the price_markup of this SpecOption.


        :return: The price_markup of this SpecOption.
        :rtype: float
        """
        return self._price_markup

    @price_markup.setter
    def price_markup(self, price_markup):
        """
        Sets the price_markup of this SpecOption.


        :param price_markup: The price_markup of this SpecOption.
        :type: float
        """

        self._price_markup = price_markup

    @property
    def xp(self):
        """
        Gets the xp of this SpecOption.


        :return: The xp of this SpecOption.
        :rtype: object
        """
        return self._xp

    @xp.setter
    def xp(self, xp):
        """
        Sets the xp of this SpecOption.


        :param xp: The xp of this SpecOption.
        :type: object
        """

        self._xp = xp

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
