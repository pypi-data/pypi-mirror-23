# coding: utf-8

"""
    OrderCloud

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0
    Contact: ordercloud@four51.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Order(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, from_user=None, from_company_id=None, from_user_id=None, billing_address_id=None, billing_address=None, shipping_address_id=None, comments=None, line_item_count=None, status=None, date_created=None, date_submitted=None, date_approved=None, date_declined=None, date_canceled=None, date_completed=None, subtotal=None, shipping_cost=None, tax_cost=None, promotion_discount=None, total=None, is_submitted=None, xp=None):
        """
        Order - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'from_user': 'User',
            'from_company_id': 'str',
            'from_user_id': 'str',
            'billing_address_id': 'str',
            'billing_address': 'Address',
            'shipping_address_id': 'str',
            'comments': 'str',
            'line_item_count': 'int',
            'status': 'str',
            'date_created': 'str',
            'date_submitted': 'str',
            'date_approved': 'str',
            'date_declined': 'str',
            'date_canceled': 'str',
            'date_completed': 'str',
            'subtotal': 'float',
            'shipping_cost': 'float',
            'tax_cost': 'float',
            'promotion_discount': 'float',
            'total': 'float',
            'is_submitted': 'bool',
            'xp': 'object'
        }

        self.attribute_map = {
            'id': 'ID',
            'from_user': 'FromUser',
            'from_company_id': 'FromCompanyID',
            'from_user_id': 'FromUserID',
            'billing_address_id': 'BillingAddressID',
            'billing_address': 'BillingAddress',
            'shipping_address_id': 'ShippingAddressID',
            'comments': 'Comments',
            'line_item_count': 'LineItemCount',
            'status': 'Status',
            'date_created': 'DateCreated',
            'date_submitted': 'DateSubmitted',
            'date_approved': 'DateApproved',
            'date_declined': 'DateDeclined',
            'date_canceled': 'DateCanceled',
            'date_completed': 'DateCompleted',
            'subtotal': 'Subtotal',
            'shipping_cost': 'ShippingCost',
            'tax_cost': 'TaxCost',
            'promotion_discount': 'PromotionDiscount',
            'total': 'Total',
            'is_submitted': 'IsSubmitted',
            'xp': 'xp'
        }

        self._id = id
        self._from_user = from_user
        self._from_company_id = from_company_id
        self._from_user_id = from_user_id
        self._billing_address_id = billing_address_id
        self._billing_address = billing_address
        self._shipping_address_id = shipping_address_id
        self._comments = comments
        self._line_item_count = line_item_count
        self._status = status
        self._date_created = date_created
        self._date_submitted = date_submitted
        self._date_approved = date_approved
        self._date_declined = date_declined
        self._date_canceled = date_canceled
        self._date_completed = date_completed
        self._subtotal = subtotal
        self._shipping_cost = shipping_cost
        self._tax_cost = tax_cost
        self._promotion_discount = promotion_discount
        self._total = total
        self._is_submitted = is_submitted
        self._xp = xp

    @property
    def id(self):
        """
        Gets the id of this Order.


        :return: The id of this Order.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Order.


        :param id: The id of this Order.
        :type: str
        """

        self._id = id

    @property
    def from_user(self):
        """
        Gets the from_user of this Order.


        :return: The from_user of this Order.
        :rtype: User
        """
        return self._from_user

    @from_user.setter
    def from_user(self, from_user):
        """
        Sets the from_user of this Order.


        :param from_user: The from_user of this Order.
        :type: User
        """

        self._from_user = from_user

    @property
    def from_company_id(self):
        """
        Gets the from_company_id of this Order.


        :return: The from_company_id of this Order.
        :rtype: str
        """
        return self._from_company_id

    @from_company_id.setter
    def from_company_id(self, from_company_id):
        """
        Sets the from_company_id of this Order.


        :param from_company_id: The from_company_id of this Order.
        :type: str
        """

        self._from_company_id = from_company_id

    @property
    def from_user_id(self):
        """
        Gets the from_user_id of this Order.


        :return: The from_user_id of this Order.
        :rtype: str
        """
        return self._from_user_id

    @from_user_id.setter
    def from_user_id(self, from_user_id):
        """
        Sets the from_user_id of this Order.


        :param from_user_id: The from_user_id of this Order.
        :type: str
        """

        self._from_user_id = from_user_id

    @property
    def billing_address_id(self):
        """
        Gets the billing_address_id of this Order.


        :return: The billing_address_id of this Order.
        :rtype: str
        """
        return self._billing_address_id

    @billing_address_id.setter
    def billing_address_id(self, billing_address_id):
        """
        Sets the billing_address_id of this Order.


        :param billing_address_id: The billing_address_id of this Order.
        :type: str
        """

        self._billing_address_id = billing_address_id

    @property
    def billing_address(self):
        """
        Gets the billing_address of this Order.


        :return: The billing_address of this Order.
        :rtype: Address
        """
        return self._billing_address

    @billing_address.setter
    def billing_address(self, billing_address):
        """
        Sets the billing_address of this Order.


        :param billing_address: The billing_address of this Order.
        :type: Address
        """

        self._billing_address = billing_address

    @property
    def shipping_address_id(self):
        """
        Gets the shipping_address_id of this Order.


        :return: The shipping_address_id of this Order.
        :rtype: str
        """
        return self._shipping_address_id

    @shipping_address_id.setter
    def shipping_address_id(self, shipping_address_id):
        """
        Sets the shipping_address_id of this Order.


        :param shipping_address_id: The shipping_address_id of this Order.
        :type: str
        """

        self._shipping_address_id = shipping_address_id

    @property
    def comments(self):
        """
        Gets the comments of this Order.


        :return: The comments of this Order.
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """
        Sets the comments of this Order.


        :param comments: The comments of this Order.
        :type: str
        """

        self._comments = comments

    @property
    def line_item_count(self):
        """
        Gets the line_item_count of this Order.


        :return: The line_item_count of this Order.
        :rtype: int
        """
        return self._line_item_count

    @line_item_count.setter
    def line_item_count(self, line_item_count):
        """
        Sets the line_item_count of this Order.


        :param line_item_count: The line_item_count of this Order.
        :type: int
        """

        self._line_item_count = line_item_count

    @property
    def status(self):
        """
        Gets the status of this Order.


        :return: The status of this Order.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this Order.


        :param status: The status of this Order.
        :type: str
        """

        self._status = status

    @property
    def date_created(self):
        """
        Gets the date_created of this Order.


        :return: The date_created of this Order.
        :rtype: str
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """
        Sets the date_created of this Order.


        :param date_created: The date_created of this Order.
        :type: str
        """

        self._date_created = date_created

    @property
    def date_submitted(self):
        """
        Gets the date_submitted of this Order.


        :return: The date_submitted of this Order.
        :rtype: str
        """
        return self._date_submitted

    @date_submitted.setter
    def date_submitted(self, date_submitted):
        """
        Sets the date_submitted of this Order.


        :param date_submitted: The date_submitted of this Order.
        :type: str
        """

        self._date_submitted = date_submitted

    @property
    def date_approved(self):
        """
        Gets the date_approved of this Order.


        :return: The date_approved of this Order.
        :rtype: str
        """
        return self._date_approved

    @date_approved.setter
    def date_approved(self, date_approved):
        """
        Sets the date_approved of this Order.


        :param date_approved: The date_approved of this Order.
        :type: str
        """

        self._date_approved = date_approved

    @property
    def date_declined(self):
        """
        Gets the date_declined of this Order.


        :return: The date_declined of this Order.
        :rtype: str
        """
        return self._date_declined

    @date_declined.setter
    def date_declined(self, date_declined):
        """
        Sets the date_declined of this Order.


        :param date_declined: The date_declined of this Order.
        :type: str
        """

        self._date_declined = date_declined

    @property
    def date_canceled(self):
        """
        Gets the date_canceled of this Order.


        :return: The date_canceled of this Order.
        :rtype: str
        """
        return self._date_canceled

    @date_canceled.setter
    def date_canceled(self, date_canceled):
        """
        Sets the date_canceled of this Order.


        :param date_canceled: The date_canceled of this Order.
        :type: str
        """

        self._date_canceled = date_canceled

    @property
    def date_completed(self):
        """
        Gets the date_completed of this Order.


        :return: The date_completed of this Order.
        :rtype: str
        """
        return self._date_completed

    @date_completed.setter
    def date_completed(self, date_completed):
        """
        Sets the date_completed of this Order.


        :param date_completed: The date_completed of this Order.
        :type: str
        """

        self._date_completed = date_completed

    @property
    def subtotal(self):
        """
        Gets the subtotal of this Order.


        :return: The subtotal of this Order.
        :rtype: float
        """
        return self._subtotal

    @subtotal.setter
    def subtotal(self, subtotal):
        """
        Sets the subtotal of this Order.


        :param subtotal: The subtotal of this Order.
        :type: float
        """

        self._subtotal = subtotal

    @property
    def shipping_cost(self):
        """
        Gets the shipping_cost of this Order.


        :return: The shipping_cost of this Order.
        :rtype: float
        """
        return self._shipping_cost

    @shipping_cost.setter
    def shipping_cost(self, shipping_cost):
        """
        Sets the shipping_cost of this Order.


        :param shipping_cost: The shipping_cost of this Order.
        :type: float
        """

        self._shipping_cost = shipping_cost

    @property
    def tax_cost(self):
        """
        Gets the tax_cost of this Order.


        :return: The tax_cost of this Order.
        :rtype: float
        """
        return self._tax_cost

    @tax_cost.setter
    def tax_cost(self, tax_cost):
        """
        Sets the tax_cost of this Order.


        :param tax_cost: The tax_cost of this Order.
        :type: float
        """

        self._tax_cost = tax_cost

    @property
    def promotion_discount(self):
        """
        Gets the promotion_discount of this Order.


        :return: The promotion_discount of this Order.
        :rtype: float
        """
        return self._promotion_discount

    @promotion_discount.setter
    def promotion_discount(self, promotion_discount):
        """
        Sets the promotion_discount of this Order.


        :param promotion_discount: The promotion_discount of this Order.
        :type: float
        """

        self._promotion_discount = promotion_discount

    @property
    def total(self):
        """
        Gets the total of this Order.


        :return: The total of this Order.
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """
        Sets the total of this Order.


        :param total: The total of this Order.
        :type: float
        """

        self._total = total

    @property
    def is_submitted(self):
        """
        Gets the is_submitted of this Order.


        :return: The is_submitted of this Order.
        :rtype: bool
        """
        return self._is_submitted

    @is_submitted.setter
    def is_submitted(self, is_submitted):
        """
        Sets the is_submitted of this Order.


        :param is_submitted: The is_submitted of this Order.
        :type: bool
        """

        self._is_submitted = is_submitted

    @property
    def xp(self):
        """
        Gets the xp of this Order.


        :return: The xp of this Order.
        :rtype: object
        """
        return self._xp

    @xp.setter
    def xp(self, xp):
        """
        Sets the xp of this Order.


        :param xp: The xp of this Order.
        :type: object
        """

        self._xp = xp

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
