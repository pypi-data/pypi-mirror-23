# coding: utf-8

"""
    OrderCloud

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0
    Contact: ordercloud@four51.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class ImpersonationConfig(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, impersonation_buyer_id=None, impersonation_group_id=None, impersonation_user_id=None, buyer_id=None, group_id=None, user_id=None, security_profile_id=None, client_id=None):
        """
        ImpersonationConfig - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'impersonation_buyer_id': 'str',
            'impersonation_group_id': 'str',
            'impersonation_user_id': 'str',
            'buyer_id': 'str',
            'group_id': 'str',
            'user_id': 'str',
            'security_profile_id': 'str',
            'client_id': 'str'
        }

        self.attribute_map = {
            'id': 'ID',
            'impersonation_buyer_id': 'ImpersonationBuyerID',
            'impersonation_group_id': 'ImpersonationGroupID',
            'impersonation_user_id': 'ImpersonationUserID',
            'buyer_id': 'BuyerID',
            'group_id': 'GroupID',
            'user_id': 'UserID',
            'security_profile_id': 'SecurityProfileID',
            'client_id': 'ClientID'
        }

        self._id = id
        self._impersonation_buyer_id = impersonation_buyer_id
        self._impersonation_group_id = impersonation_group_id
        self._impersonation_user_id = impersonation_user_id
        self._buyer_id = buyer_id
        self._group_id = group_id
        self._user_id = user_id
        self._security_profile_id = security_profile_id
        self._client_id = client_id

    @property
    def id(self):
        """
        Gets the id of this ImpersonationConfig.


        :return: The id of this ImpersonationConfig.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ImpersonationConfig.


        :param id: The id of this ImpersonationConfig.
        :type: str
        """

        self._id = id

    @property
    def impersonation_buyer_id(self):
        """
        Gets the impersonation_buyer_id of this ImpersonationConfig.


        :return: The impersonation_buyer_id of this ImpersonationConfig.
        :rtype: str
        """
        return self._impersonation_buyer_id

    @impersonation_buyer_id.setter
    def impersonation_buyer_id(self, impersonation_buyer_id):
        """
        Sets the impersonation_buyer_id of this ImpersonationConfig.


        :param impersonation_buyer_id: The impersonation_buyer_id of this ImpersonationConfig.
        :type: str
        """

        self._impersonation_buyer_id = impersonation_buyer_id

    @property
    def impersonation_group_id(self):
        """
        Gets the impersonation_group_id of this ImpersonationConfig.


        :return: The impersonation_group_id of this ImpersonationConfig.
        :rtype: str
        """
        return self._impersonation_group_id

    @impersonation_group_id.setter
    def impersonation_group_id(self, impersonation_group_id):
        """
        Sets the impersonation_group_id of this ImpersonationConfig.


        :param impersonation_group_id: The impersonation_group_id of this ImpersonationConfig.
        :type: str
        """

        self._impersonation_group_id = impersonation_group_id

    @property
    def impersonation_user_id(self):
        """
        Gets the impersonation_user_id of this ImpersonationConfig.


        :return: The impersonation_user_id of this ImpersonationConfig.
        :rtype: str
        """
        return self._impersonation_user_id

    @impersonation_user_id.setter
    def impersonation_user_id(self, impersonation_user_id):
        """
        Sets the impersonation_user_id of this ImpersonationConfig.


        :param impersonation_user_id: The impersonation_user_id of this ImpersonationConfig.
        :type: str
        """

        self._impersonation_user_id = impersonation_user_id

    @property
    def buyer_id(self):
        """
        Gets the buyer_id of this ImpersonationConfig.


        :return: The buyer_id of this ImpersonationConfig.
        :rtype: str
        """
        return self._buyer_id

    @buyer_id.setter
    def buyer_id(self, buyer_id):
        """
        Sets the buyer_id of this ImpersonationConfig.


        :param buyer_id: The buyer_id of this ImpersonationConfig.
        :type: str
        """

        self._buyer_id = buyer_id

    @property
    def group_id(self):
        """
        Gets the group_id of this ImpersonationConfig.


        :return: The group_id of this ImpersonationConfig.
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """
        Sets the group_id of this ImpersonationConfig.


        :param group_id: The group_id of this ImpersonationConfig.
        :type: str
        """

        self._group_id = group_id

    @property
    def user_id(self):
        """
        Gets the user_id of this ImpersonationConfig.


        :return: The user_id of this ImpersonationConfig.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """
        Sets the user_id of this ImpersonationConfig.


        :param user_id: The user_id of this ImpersonationConfig.
        :type: str
        """

        self._user_id = user_id

    @property
    def security_profile_id(self):
        """
        Gets the security_profile_id of this ImpersonationConfig.


        :return: The security_profile_id of this ImpersonationConfig.
        :rtype: str
        """
        return self._security_profile_id

    @security_profile_id.setter
    def security_profile_id(self, security_profile_id):
        """
        Sets the security_profile_id of this ImpersonationConfig.


        :param security_profile_id: The security_profile_id of this ImpersonationConfig.
        :type: str
        """

        self._security_profile_id = security_profile_id

    @property
    def client_id(self):
        """
        Gets the client_id of this ImpersonationConfig.


        :return: The client_id of this ImpersonationConfig.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """
        Sets the client_id of this ImpersonationConfig.


        :param client_id: The client_id of this ImpersonationConfig.
        :type: str
        """

        self._client_id = client_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
