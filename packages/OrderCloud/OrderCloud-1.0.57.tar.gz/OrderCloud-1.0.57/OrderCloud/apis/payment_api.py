# coding: utf-8

"""
    OrderCloud

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0
    Contact: ordercloud@four51.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class PaymentApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def orders_direction_order_id_payments_get(self, direction, order_id, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.orders_direction_order_id_payments_get(direction, order_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str direction: Direction of the payment. Possible values: Incoming, Outgoing. (required)
        :param str order_id: ID of the order. (required)
        :param str search: Search of the payment.
        :param list[str] search_on: Search on of the payment.
        :param list[str] sort_by: Sort by of the payment.
        :param int page: Page of the payment.
        :param int page_size: Page size of the payment.
        :return: ListPayment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.orders_direction_order_id_payments_get_with_http_info(direction, order_id, **kwargs)
        else:
            (data) = self.orders_direction_order_id_payments_get_with_http_info(direction, order_id, **kwargs)
            return data

    def orders_direction_order_id_payments_get_with_http_info(self, direction, order_id, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.orders_direction_order_id_payments_get_with_http_info(direction, order_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str direction: Direction of the payment. Possible values: Incoming, Outgoing. (required)
        :param str order_id: ID of the order. (required)
        :param str search: Search of the payment.
        :param list[str] search_on: Search on of the payment.
        :param list[str] sort_by: Sort by of the payment.
        :param int page: Page of the payment.
        :param int page_size: Page size of the payment.
        :return: ListPayment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['direction', 'order_id', 'search', 'search_on', 'sort_by', 'page', 'page_size']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orders_direction_order_id_payments_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'direction' is set
        if ('direction' not in params) or (params['direction'] is None):
            raise ValueError("Missing the required parameter `direction` when calling `orders_direction_order_id_payments_get`")
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params) or (params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `orders_direction_order_id_payments_get`")

        resource_path = '/orders/{direction}/{orderID}/payments'.replace('{format}', 'json')
        path_params = {}
        if 'direction' in params:
            path_params['direction'] = params['direction']
        if 'order_id' in params:
            path_params['orderID'] = params['order_id']

        query_params = {}
        if 'search' in params:
            query_params['search'] = params['search']
        if 'search_on' in params:
            query_params['searchOn'] = params['search_on']
        if 'sort_by' in params:
            query_params['sortBy'] = params['sort_by']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'page_size' in params:
            query_params['pageSize'] = params['page_size']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ListPayment',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def orders_direction_order_id_payments_payment_id_delete(self, direction, order_id, payment_id, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.orders_direction_order_id_payments_payment_id_delete(direction, order_id, payment_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str direction: Direction of the payment. Possible values: Incoming, Outgoing. (required)
        :param str order_id: ID of the order. (required)
        :param str payment_id: ID of the payment. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.orders_direction_order_id_payments_payment_id_delete_with_http_info(direction, order_id, payment_id, **kwargs)
        else:
            (data) = self.orders_direction_order_id_payments_payment_id_delete_with_http_info(direction, order_id, payment_id, **kwargs)
            return data

    def orders_direction_order_id_payments_payment_id_delete_with_http_info(self, direction, order_id, payment_id, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.orders_direction_order_id_payments_payment_id_delete_with_http_info(direction, order_id, payment_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str direction: Direction of the payment. Possible values: Incoming, Outgoing. (required)
        :param str order_id: ID of the order. (required)
        :param str payment_id: ID of the payment. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['direction', 'order_id', 'payment_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orders_direction_order_id_payments_payment_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'direction' is set
        if ('direction' not in params) or (params['direction'] is None):
            raise ValueError("Missing the required parameter `direction` when calling `orders_direction_order_id_payments_payment_id_delete`")
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params) or (params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `orders_direction_order_id_payments_payment_id_delete`")
        # verify the required parameter 'payment_id' is set
        if ('payment_id' not in params) or (params['payment_id'] is None):
            raise ValueError("Missing the required parameter `payment_id` when calling `orders_direction_order_id_payments_payment_id_delete`")

        resource_path = '/orders/{direction}/{orderID}/payments/{paymentID}'.replace('{format}', 'json')
        path_params = {}
        if 'direction' in params:
            path_params['direction'] = params['direction']
        if 'order_id' in params:
            path_params['orderID'] = params['order_id']
        if 'payment_id' in params:
            path_params['paymentID'] = params['payment_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def orders_direction_order_id_payments_payment_id_get(self, direction, order_id, payment_id, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.orders_direction_order_id_payments_payment_id_get(direction, order_id, payment_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str direction: Direction of the payment. Possible values: Incoming, Outgoing. (required)
        :param str order_id: ID of the order. (required)
        :param str payment_id: ID of the payment. (required)
        :return: Payment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.orders_direction_order_id_payments_payment_id_get_with_http_info(direction, order_id, payment_id, **kwargs)
        else:
            (data) = self.orders_direction_order_id_payments_payment_id_get_with_http_info(direction, order_id, payment_id, **kwargs)
            return data

    def orders_direction_order_id_payments_payment_id_get_with_http_info(self, direction, order_id, payment_id, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.orders_direction_order_id_payments_payment_id_get_with_http_info(direction, order_id, payment_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str direction: Direction of the payment. Possible values: Incoming, Outgoing. (required)
        :param str order_id: ID of the order. (required)
        :param str payment_id: ID of the payment. (required)
        :return: Payment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['direction', 'order_id', 'payment_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orders_direction_order_id_payments_payment_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'direction' is set
        if ('direction' not in params) or (params['direction'] is None):
            raise ValueError("Missing the required parameter `direction` when calling `orders_direction_order_id_payments_payment_id_get`")
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params) or (params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `orders_direction_order_id_payments_payment_id_get`")
        # verify the required parameter 'payment_id' is set
        if ('payment_id' not in params) or (params['payment_id'] is None):
            raise ValueError("Missing the required parameter `payment_id` when calling `orders_direction_order_id_payments_payment_id_get`")

        resource_path = '/orders/{direction}/{orderID}/payments/{paymentID}'.replace('{format}', 'json')
        path_params = {}
        if 'direction' in params:
            path_params['direction'] = params['direction']
        if 'order_id' in params:
            path_params['orderID'] = params['order_id']
        if 'payment_id' in params:
            path_params['paymentID'] = params['payment_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Payment',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def orders_direction_order_id_payments_payment_id_patch(self, direction, order_id, payment_id, partial_payment, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.orders_direction_order_id_payments_payment_id_patch(direction, order_id, payment_id, partial_payment, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str direction: Direction of the payment. Possible values: Incoming, Outgoing. (required)
        :param str order_id: ID of the order. (required)
        :param str payment_id: ID of the payment. (required)
        :param Payment partial_payment:  (required)
        :return: Payment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.orders_direction_order_id_payments_payment_id_patch_with_http_info(direction, order_id, payment_id, partial_payment, **kwargs)
        else:
            (data) = self.orders_direction_order_id_payments_payment_id_patch_with_http_info(direction, order_id, payment_id, partial_payment, **kwargs)
            return data

    def orders_direction_order_id_payments_payment_id_patch_with_http_info(self, direction, order_id, payment_id, partial_payment, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.orders_direction_order_id_payments_payment_id_patch_with_http_info(direction, order_id, payment_id, partial_payment, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str direction: Direction of the payment. Possible values: Incoming, Outgoing. (required)
        :param str order_id: ID of the order. (required)
        :param str payment_id: ID of the payment. (required)
        :param Payment partial_payment:  (required)
        :return: Payment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['direction', 'order_id', 'payment_id', 'partial_payment']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orders_direction_order_id_payments_payment_id_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'direction' is set
        if ('direction' not in params) or (params['direction'] is None):
            raise ValueError("Missing the required parameter `direction` when calling `orders_direction_order_id_payments_payment_id_patch`")
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params) or (params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `orders_direction_order_id_payments_payment_id_patch`")
        # verify the required parameter 'payment_id' is set
        if ('payment_id' not in params) or (params['payment_id'] is None):
            raise ValueError("Missing the required parameter `payment_id` when calling `orders_direction_order_id_payments_payment_id_patch`")
        # verify the required parameter 'partial_payment' is set
        if ('partial_payment' not in params) or (params['partial_payment'] is None):
            raise ValueError("Missing the required parameter `partial_payment` when calling `orders_direction_order_id_payments_payment_id_patch`")

        resource_path = '/orders/{direction}/{orderID}/payments/{paymentID}'.replace('{format}', 'json')
        path_params = {}
        if 'direction' in params:
            path_params['direction'] = params['direction']
        if 'order_id' in params:
            path_params['orderID'] = params['order_id']
        if 'payment_id' in params:
            path_params['paymentID'] = params['payment_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'partial_payment' in params:
            body_params = params['partial_payment']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'PATCH',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Payment',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def orders_direction_order_id_payments_payment_id_transactions_post(self, direction, order_id, payment_id, transaction, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.orders_direction_order_id_payments_payment_id_transactions_post(direction, order_id, payment_id, transaction, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str direction: Direction of the payment. Possible values: Incoming, Outgoing. (required)
        :param str order_id: ID of the order. (required)
        :param str payment_id: ID of the payment. (required)
        :param PaymentTransaction transaction:  (required)
        :return: Payment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.orders_direction_order_id_payments_payment_id_transactions_post_with_http_info(direction, order_id, payment_id, transaction, **kwargs)
        else:
            (data) = self.orders_direction_order_id_payments_payment_id_transactions_post_with_http_info(direction, order_id, payment_id, transaction, **kwargs)
            return data

    def orders_direction_order_id_payments_payment_id_transactions_post_with_http_info(self, direction, order_id, payment_id, transaction, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.orders_direction_order_id_payments_payment_id_transactions_post_with_http_info(direction, order_id, payment_id, transaction, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str direction: Direction of the payment. Possible values: Incoming, Outgoing. (required)
        :param str order_id: ID of the order. (required)
        :param str payment_id: ID of the payment. (required)
        :param PaymentTransaction transaction:  (required)
        :return: Payment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['direction', 'order_id', 'payment_id', 'transaction']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orders_direction_order_id_payments_payment_id_transactions_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'direction' is set
        if ('direction' not in params) or (params['direction'] is None):
            raise ValueError("Missing the required parameter `direction` when calling `orders_direction_order_id_payments_payment_id_transactions_post`")
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params) or (params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `orders_direction_order_id_payments_payment_id_transactions_post`")
        # verify the required parameter 'payment_id' is set
        if ('payment_id' not in params) or (params['payment_id'] is None):
            raise ValueError("Missing the required parameter `payment_id` when calling `orders_direction_order_id_payments_payment_id_transactions_post`")
        # verify the required parameter 'transaction' is set
        if ('transaction' not in params) or (params['transaction'] is None):
            raise ValueError("Missing the required parameter `transaction` when calling `orders_direction_order_id_payments_payment_id_transactions_post`")

        resource_path = '/orders/{direction}/{orderID}/payments/{paymentID}/transactions'.replace('{format}', 'json')
        path_params = {}
        if 'direction' in params:
            path_params['direction'] = params['direction']
        if 'order_id' in params:
            path_params['orderID'] = params['order_id']
        if 'payment_id' in params:
            path_params['paymentID'] = params['payment_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'transaction' in params:
            body_params = params['transaction']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Payment',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def orders_direction_order_id_payments_payment_id_transactions_transaction_id_delete(self, direction, order_id, payment_id, transaction_id, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.orders_direction_order_id_payments_payment_id_transactions_transaction_id_delete(direction, order_id, payment_id, transaction_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str direction: Direction of the payment. Possible values: Incoming, Outgoing. (required)
        :param str order_id: ID of the order. (required)
        :param str payment_id: ID of the payment. (required)
        :param str transaction_id: ID of the transaction. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.orders_direction_order_id_payments_payment_id_transactions_transaction_id_delete_with_http_info(direction, order_id, payment_id, transaction_id, **kwargs)
        else:
            (data) = self.orders_direction_order_id_payments_payment_id_transactions_transaction_id_delete_with_http_info(direction, order_id, payment_id, transaction_id, **kwargs)
            return data

    def orders_direction_order_id_payments_payment_id_transactions_transaction_id_delete_with_http_info(self, direction, order_id, payment_id, transaction_id, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.orders_direction_order_id_payments_payment_id_transactions_transaction_id_delete_with_http_info(direction, order_id, payment_id, transaction_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str direction: Direction of the payment. Possible values: Incoming, Outgoing. (required)
        :param str order_id: ID of the order. (required)
        :param str payment_id: ID of the payment. (required)
        :param str transaction_id: ID of the transaction. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['direction', 'order_id', 'payment_id', 'transaction_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orders_direction_order_id_payments_payment_id_transactions_transaction_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'direction' is set
        if ('direction' not in params) or (params['direction'] is None):
            raise ValueError("Missing the required parameter `direction` when calling `orders_direction_order_id_payments_payment_id_transactions_transaction_id_delete`")
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params) or (params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `orders_direction_order_id_payments_payment_id_transactions_transaction_id_delete`")
        # verify the required parameter 'payment_id' is set
        if ('payment_id' not in params) or (params['payment_id'] is None):
            raise ValueError("Missing the required parameter `payment_id` when calling `orders_direction_order_id_payments_payment_id_transactions_transaction_id_delete`")
        # verify the required parameter 'transaction_id' is set
        if ('transaction_id' not in params) or (params['transaction_id'] is None):
            raise ValueError("Missing the required parameter `transaction_id` when calling `orders_direction_order_id_payments_payment_id_transactions_transaction_id_delete`")

        resource_path = '/orders/{direction}/{orderID}/payments/{paymentID}/transactions/{transactionID}'.replace('{format}', 'json')
        path_params = {}
        if 'direction' in params:
            path_params['direction'] = params['direction']
        if 'order_id' in params:
            path_params['orderID'] = params['order_id']
        if 'payment_id' in params:
            path_params['paymentID'] = params['payment_id']
        if 'transaction_id' in params:
            path_params['transactionID'] = params['transaction_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def orders_direction_order_id_payments_post(self, direction, order_id, payment, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.orders_direction_order_id_payments_post(direction, order_id, payment, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str direction: Direction of the payment. Possible values: Incoming, Outgoing. (required)
        :param str order_id: ID of the order. (required)
        :param Payment payment:  (required)
        :return: Payment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.orders_direction_order_id_payments_post_with_http_info(direction, order_id, payment, **kwargs)
        else:
            (data) = self.orders_direction_order_id_payments_post_with_http_info(direction, order_id, payment, **kwargs)
            return data

    def orders_direction_order_id_payments_post_with_http_info(self, direction, order_id, payment, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.orders_direction_order_id_payments_post_with_http_info(direction, order_id, payment, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str direction: Direction of the payment. Possible values: Incoming, Outgoing. (required)
        :param str order_id: ID of the order. (required)
        :param Payment payment:  (required)
        :return: Payment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['direction', 'order_id', 'payment']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orders_direction_order_id_payments_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'direction' is set
        if ('direction' not in params) or (params['direction'] is None):
            raise ValueError("Missing the required parameter `direction` when calling `orders_direction_order_id_payments_post`")
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params) or (params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `orders_direction_order_id_payments_post`")
        # verify the required parameter 'payment' is set
        if ('payment' not in params) or (params['payment'] is None):
            raise ValueError("Missing the required parameter `payment` when calling `orders_direction_order_id_payments_post`")

        resource_path = '/orders/{direction}/{orderID}/payments'.replace('{format}', 'json')
        path_params = {}
        if 'direction' in params:
            path_params['direction'] = params['direction']
        if 'order_id' in params:
            path_params['orderID'] = params['order_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'payment' in params:
            body_params = params['payment']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Payment',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
