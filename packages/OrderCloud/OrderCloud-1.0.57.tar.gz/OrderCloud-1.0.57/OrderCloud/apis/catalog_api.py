# coding: utf-8

"""
    OrderCloud

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0
    Contact: ordercloud@four51.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class CatalogApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def catalogs_assignments_get(self, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.catalogs_assignments_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str catalog_id: ID of the catalog.
        :param str buyer_id: ID of the buyer.
        :param int page: Page of the catalog.
        :param int page_size: Page size of the catalog.
        :return: ListCatalogAssignment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.catalogs_assignments_get_with_http_info(**kwargs)
        else:
            (data) = self.catalogs_assignments_get_with_http_info(**kwargs)
            return data

    def catalogs_assignments_get_with_http_info(self, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.catalogs_assignments_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str catalog_id: ID of the catalog.
        :param str buyer_id: ID of the buyer.
        :param int page: Page of the catalog.
        :param int page_size: Page size of the catalog.
        :return: ListCatalogAssignment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['catalog_id', 'buyer_id', 'page', 'page_size']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method catalogs_assignments_get" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/catalogs/assignments'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'catalog_id' in params:
            query_params['catalogID'] = params['catalog_id']
        if 'buyer_id' in params:
            query_params['buyerID'] = params['buyer_id']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'page_size' in params:
            query_params['pageSize'] = params['page_size']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ListCatalogAssignment',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def catalogs_assignments_post(self, assignment, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.catalogs_assignments_post(assignment, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CatalogAssignment assignment:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.catalogs_assignments_post_with_http_info(assignment, **kwargs)
        else:
            (data) = self.catalogs_assignments_post_with_http_info(assignment, **kwargs)
            return data

    def catalogs_assignments_post_with_http_info(self, assignment, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.catalogs_assignments_post_with_http_info(assignment, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CatalogAssignment assignment:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['assignment']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method catalogs_assignments_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'assignment' is set
        if ('assignment' not in params) or (params['assignment'] is None):
            raise ValueError("Missing the required parameter `assignment` when calling `catalogs_assignments_post`")

        resource_path = '/catalogs/assignments'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'assignment' in params:
            body_params = params['assignment']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def catalogs_catalog_id_assignments_delete(self, catalog_id, buyer_id, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.catalogs_catalog_id_assignments_delete(catalog_id, buyer_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str catalog_id: ID of the catalog. (required)
        :param str buyer_id: ID of the buyer. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.catalogs_catalog_id_assignments_delete_with_http_info(catalog_id, buyer_id, **kwargs)
        else:
            (data) = self.catalogs_catalog_id_assignments_delete_with_http_info(catalog_id, buyer_id, **kwargs)
            return data

    def catalogs_catalog_id_assignments_delete_with_http_info(self, catalog_id, buyer_id, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.catalogs_catalog_id_assignments_delete_with_http_info(catalog_id, buyer_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str catalog_id: ID of the catalog. (required)
        :param str buyer_id: ID of the buyer. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['catalog_id', 'buyer_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method catalogs_catalog_id_assignments_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'catalog_id' is set
        if ('catalog_id' not in params) or (params['catalog_id'] is None):
            raise ValueError("Missing the required parameter `catalog_id` when calling `catalogs_catalog_id_assignments_delete`")
        # verify the required parameter 'buyer_id' is set
        if ('buyer_id' not in params) or (params['buyer_id'] is None):
            raise ValueError("Missing the required parameter `buyer_id` when calling `catalogs_catalog_id_assignments_delete`")

        resource_path = '/catalogs/{catalogID}/assignments'.replace('{format}', 'json')
        path_params = {}
        if 'catalog_id' in params:
            path_params['catalogID'] = params['catalog_id']

        query_params = {}
        if 'buyer_id' in params:
            query_params['buyerID'] = params['buyer_id']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def catalogs_catalog_id_delete(self, catalog_id, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.catalogs_catalog_id_delete(catalog_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str catalog_id: ID of the catalog. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.catalogs_catalog_id_delete_with_http_info(catalog_id, **kwargs)
        else:
            (data) = self.catalogs_catalog_id_delete_with_http_info(catalog_id, **kwargs)
            return data

    def catalogs_catalog_id_delete_with_http_info(self, catalog_id, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.catalogs_catalog_id_delete_with_http_info(catalog_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str catalog_id: ID of the catalog. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['catalog_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method catalogs_catalog_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'catalog_id' is set
        if ('catalog_id' not in params) or (params['catalog_id'] is None):
            raise ValueError("Missing the required parameter `catalog_id` when calling `catalogs_catalog_id_delete`")

        resource_path = '/catalogs/{catalogID}'.replace('{format}', 'json')
        path_params = {}
        if 'catalog_id' in params:
            path_params['catalogID'] = params['catalog_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def catalogs_catalog_id_get(self, catalog_id, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.catalogs_catalog_id_get(catalog_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str catalog_id: ID of the catalog. (required)
        :return: Catalog
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.catalogs_catalog_id_get_with_http_info(catalog_id, **kwargs)
        else:
            (data) = self.catalogs_catalog_id_get_with_http_info(catalog_id, **kwargs)
            return data

    def catalogs_catalog_id_get_with_http_info(self, catalog_id, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.catalogs_catalog_id_get_with_http_info(catalog_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str catalog_id: ID of the catalog. (required)
        :return: Catalog
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['catalog_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method catalogs_catalog_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'catalog_id' is set
        if ('catalog_id' not in params) or (params['catalog_id'] is None):
            raise ValueError("Missing the required parameter `catalog_id` when calling `catalogs_catalog_id_get`")

        resource_path = '/catalogs/{catalogID}'.replace('{format}', 'json')
        path_params = {}
        if 'catalog_id' in params:
            path_params['catalogID'] = params['catalog_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Catalog',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def catalogs_catalog_id_patch(self, catalog_id, partial_catalog, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.catalogs_catalog_id_patch(catalog_id, partial_catalog, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str catalog_id: ID of the catalog. (required)
        :param Catalog partial_catalog:  (required)
        :return: Catalog
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.catalogs_catalog_id_patch_with_http_info(catalog_id, partial_catalog, **kwargs)
        else:
            (data) = self.catalogs_catalog_id_patch_with_http_info(catalog_id, partial_catalog, **kwargs)
            return data

    def catalogs_catalog_id_patch_with_http_info(self, catalog_id, partial_catalog, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.catalogs_catalog_id_patch_with_http_info(catalog_id, partial_catalog, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str catalog_id: ID of the catalog. (required)
        :param Catalog partial_catalog:  (required)
        :return: Catalog
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['catalog_id', 'partial_catalog']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method catalogs_catalog_id_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'catalog_id' is set
        if ('catalog_id' not in params) or (params['catalog_id'] is None):
            raise ValueError("Missing the required parameter `catalog_id` when calling `catalogs_catalog_id_patch`")
        # verify the required parameter 'partial_catalog' is set
        if ('partial_catalog' not in params) or (params['partial_catalog'] is None):
            raise ValueError("Missing the required parameter `partial_catalog` when calling `catalogs_catalog_id_patch`")

        resource_path = '/catalogs/{catalogID}'.replace('{format}', 'json')
        path_params = {}
        if 'catalog_id' in params:
            path_params['catalogID'] = params['catalog_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'partial_catalog' in params:
            body_params = params['partial_catalog']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'PATCH',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Catalog',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def catalogs_catalog_id_productassignments_product_id_delete(self, catalog_id, product_id, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.catalogs_catalog_id_productassignments_product_id_delete(catalog_id, product_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str catalog_id: ID of the catalog. (required)
        :param str product_id: ID of the product. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.catalogs_catalog_id_productassignments_product_id_delete_with_http_info(catalog_id, product_id, **kwargs)
        else:
            (data) = self.catalogs_catalog_id_productassignments_product_id_delete_with_http_info(catalog_id, product_id, **kwargs)
            return data

    def catalogs_catalog_id_productassignments_product_id_delete_with_http_info(self, catalog_id, product_id, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.catalogs_catalog_id_productassignments_product_id_delete_with_http_info(catalog_id, product_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str catalog_id: ID of the catalog. (required)
        :param str product_id: ID of the product. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['catalog_id', 'product_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method catalogs_catalog_id_productassignments_product_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'catalog_id' is set
        if ('catalog_id' not in params) or (params['catalog_id'] is None):
            raise ValueError("Missing the required parameter `catalog_id` when calling `catalogs_catalog_id_productassignments_product_id_delete`")
        # verify the required parameter 'product_id' is set
        if ('product_id' not in params) or (params['product_id'] is None):
            raise ValueError("Missing the required parameter `product_id` when calling `catalogs_catalog_id_productassignments_product_id_delete`")

        resource_path = '/catalogs/{catalogID}/productassignments/{productID}'.replace('{format}', 'json')
        path_params = {}
        if 'catalog_id' in params:
            path_params['catalogID'] = params['catalog_id']
        if 'product_id' in params:
            path_params['productID'] = params['product_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def catalogs_catalog_id_put(self, catalog_id, catalog, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.catalogs_catalog_id_put(catalog_id, catalog, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str catalog_id: ID of the catalog. (required)
        :param Catalog catalog:  (required)
        :return: Catalog
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.catalogs_catalog_id_put_with_http_info(catalog_id, catalog, **kwargs)
        else:
            (data) = self.catalogs_catalog_id_put_with_http_info(catalog_id, catalog, **kwargs)
            return data

    def catalogs_catalog_id_put_with_http_info(self, catalog_id, catalog, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.catalogs_catalog_id_put_with_http_info(catalog_id, catalog, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str catalog_id: ID of the catalog. (required)
        :param Catalog catalog:  (required)
        :return: Catalog
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['catalog_id', 'catalog']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method catalogs_catalog_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'catalog_id' is set
        if ('catalog_id' not in params) or (params['catalog_id'] is None):
            raise ValueError("Missing the required parameter `catalog_id` when calling `catalogs_catalog_id_put`")
        # verify the required parameter 'catalog' is set
        if ('catalog' not in params) or (params['catalog'] is None):
            raise ValueError("Missing the required parameter `catalog` when calling `catalogs_catalog_id_put`")

        resource_path = '/catalogs/{catalogID}'.replace('{format}', 'json')
        path_params = {}
        if 'catalog_id' in params:
            path_params['catalogID'] = params['catalog_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'catalog' in params:
            body_params = params['catalog']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Catalog',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def catalogs_get(self, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.catalogs_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str search: Search of the catalog.
        :param list[str] search_on: Search on of the catalog.
        :param list[str] sort_by: Sort by of the catalog.
        :param int page: Page of the catalog.
        :param int page_size: Page size of the catalog.
        :return: ListCatalog
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.catalogs_get_with_http_info(**kwargs)
        else:
            (data) = self.catalogs_get_with_http_info(**kwargs)
            return data

    def catalogs_get_with_http_info(self, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.catalogs_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str search: Search of the catalog.
        :param list[str] search_on: Search on of the catalog.
        :param list[str] sort_by: Sort by of the catalog.
        :param int page: Page of the catalog.
        :param int page_size: Page size of the catalog.
        :return: ListCatalog
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['search', 'search_on', 'sort_by', 'page', 'page_size']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method catalogs_get" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/catalogs'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'search' in params:
            query_params['search'] = params['search']
        if 'search_on' in params:
            query_params['searchOn'] = params['search_on']
        if 'sort_by' in params:
            query_params['sortBy'] = params['sort_by']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'page_size' in params:
            query_params['pageSize'] = params['page_size']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ListCatalog',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def catalogs_post(self, catalog, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.catalogs_post(catalog, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Catalog catalog:  (required)
        :return: Catalog
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.catalogs_post_with_http_info(catalog, **kwargs)
        else:
            (data) = self.catalogs_post_with_http_info(catalog, **kwargs)
            return data

    def catalogs_post_with_http_info(self, catalog, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.catalogs_post_with_http_info(catalog, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Catalog catalog:  (required)
        :return: Catalog
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['catalog']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method catalogs_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'catalog' is set
        if ('catalog' not in params) or (params['catalog'] is None):
            raise ValueError("Missing the required parameter `catalog` when calling `catalogs_post`")

        resource_path = '/catalogs'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'catalog' in params:
            body_params = params['catalog']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Catalog',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def catalogs_productassignments_get(self, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.catalogs_productassignments_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str catalog_id: ID of the catalog.
        :param str product_id: ID of the product.
        :param int page: Page of the catalog.
        :param int page_size: Page size of the catalog.
        :return: ListProductCatalogAssignment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.catalogs_productassignments_get_with_http_info(**kwargs)
        else:
            (data) = self.catalogs_productassignments_get_with_http_info(**kwargs)
            return data

    def catalogs_productassignments_get_with_http_info(self, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.catalogs_productassignments_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str catalog_id: ID of the catalog.
        :param str product_id: ID of the product.
        :param int page: Page of the catalog.
        :param int page_size: Page size of the catalog.
        :return: ListProductCatalogAssignment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['catalog_id', 'product_id', 'page', 'page_size']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method catalogs_productassignments_get" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/catalogs/productassignments'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'catalog_id' in params:
            query_params['catalogID'] = params['catalog_id']
        if 'product_id' in params:
            query_params['productID'] = params['product_id']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'page_size' in params:
            query_params['pageSize'] = params['page_size']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ListProductCatalogAssignment',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def catalogs_productassignments_post(self, product_assignment, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.catalogs_productassignments_post(product_assignment, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ProductCatalogAssignment product_assignment:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.catalogs_productassignments_post_with_http_info(product_assignment, **kwargs)
        else:
            (data) = self.catalogs_productassignments_post_with_http_info(product_assignment, **kwargs)
            return data

    def catalogs_productassignments_post_with_http_info(self, product_assignment, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.catalogs_productassignments_post_with_http_info(product_assignment, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ProductCatalogAssignment product_assignment:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_assignment']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method catalogs_productassignments_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_assignment' is set
        if ('product_assignment' not in params) or (params['product_assignment'] is None):
            raise ValueError("Missing the required parameter `product_assignment` when calling `catalogs_productassignments_post`")

        resource_path = '/catalogs/productassignments'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'product_assignment' in params:
            body_params = params['product_assignment']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
