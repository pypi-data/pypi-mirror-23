# coding: utf-8

"""
    OrderCloud

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0
    Contact: ordercloud@four51.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class MeApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def me_addresses_address_id_delete(self, address_id, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.me_addresses_address_id_delete(address_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str address_id: ID of the address. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.me_addresses_address_id_delete_with_http_info(address_id, **kwargs)
        else:
            (data) = self.me_addresses_address_id_delete_with_http_info(address_id, **kwargs)
            return data

    def me_addresses_address_id_delete_with_http_info(self, address_id, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.me_addresses_address_id_delete_with_http_info(address_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str address_id: ID of the address. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['address_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method me_addresses_address_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'address_id' is set
        if ('address_id' not in params) or (params['address_id'] is None):
            raise ValueError("Missing the required parameter `address_id` when calling `me_addresses_address_id_delete`")

        resource_path = '/me/addresses/{addressID}'.replace('{format}', 'json')
        path_params = {}
        if 'address_id' in params:
            path_params['addressID'] = params['address_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def me_addresses_address_id_get(self, address_id, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.me_addresses_address_id_get(address_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str address_id: ID of the address. (required)
        :return: BuyerAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.me_addresses_address_id_get_with_http_info(address_id, **kwargs)
        else:
            (data) = self.me_addresses_address_id_get_with_http_info(address_id, **kwargs)
            return data

    def me_addresses_address_id_get_with_http_info(self, address_id, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.me_addresses_address_id_get_with_http_info(address_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str address_id: ID of the address. (required)
        :return: BuyerAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['address_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method me_addresses_address_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'address_id' is set
        if ('address_id' not in params) or (params['address_id'] is None):
            raise ValueError("Missing the required parameter `address_id` when calling `me_addresses_address_id_get`")

        resource_path = '/me/addresses/{addressID}'.replace('{format}', 'json')
        path_params = {}
        if 'address_id' in params:
            path_params['addressID'] = params['address_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='BuyerAddress',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def me_addresses_address_id_patch(self, address_id, address, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.me_addresses_address_id_patch(address_id, address, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str address_id: ID of the address. (required)
        :param Address address:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.me_addresses_address_id_patch_with_http_info(address_id, address, **kwargs)
        else:
            (data) = self.me_addresses_address_id_patch_with_http_info(address_id, address, **kwargs)
            return data

    def me_addresses_address_id_patch_with_http_info(self, address_id, address, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.me_addresses_address_id_patch_with_http_info(address_id, address, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str address_id: ID of the address. (required)
        :param Address address:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['address_id', 'address']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method me_addresses_address_id_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'address_id' is set
        if ('address_id' not in params) or (params['address_id'] is None):
            raise ValueError("Missing the required parameter `address_id` when calling `me_addresses_address_id_patch`")
        # verify the required parameter 'address' is set
        if ('address' not in params) or (params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `me_addresses_address_id_patch`")

        resource_path = '/me/addresses/{addressID}'.replace('{format}', 'json')
        path_params = {}
        if 'address_id' in params:
            path_params['addressID'] = params['address_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'address' in params:
            body_params = params['address']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'PATCH',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def me_addresses_address_id_put(self, address_id, address, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.me_addresses_address_id_put(address_id, address, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str address_id: ID of the address. (required)
        :param BuyerAddress address:  (required)
        :return: BuyerAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.me_addresses_address_id_put_with_http_info(address_id, address, **kwargs)
        else:
            (data) = self.me_addresses_address_id_put_with_http_info(address_id, address, **kwargs)
            return data

    def me_addresses_address_id_put_with_http_info(self, address_id, address, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.me_addresses_address_id_put_with_http_info(address_id, address, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str address_id: ID of the address. (required)
        :param BuyerAddress address:  (required)
        :return: BuyerAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['address_id', 'address']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method me_addresses_address_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'address_id' is set
        if ('address_id' not in params) or (params['address_id'] is None):
            raise ValueError("Missing the required parameter `address_id` when calling `me_addresses_address_id_put`")
        # verify the required parameter 'address' is set
        if ('address' not in params) or (params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `me_addresses_address_id_put`")

        resource_path = '/me/addresses/{addressID}'.replace('{format}', 'json')
        path_params = {}
        if 'address_id' in params:
            path_params['addressID'] = params['address_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'address' in params:
            body_params = params['address']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='BuyerAddress',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def me_addresses_get(self, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.me_addresses_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str search: Search of the address.
        :param list[str] search_on: Search on of the address.
        :param list[str] sort_by: Sort by of the address.
        :param int page: Page of the address.
        :param int page_size: Page size of the address.
        :return: ListBuyerAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.me_addresses_get_with_http_info(**kwargs)
        else:
            (data) = self.me_addresses_get_with_http_info(**kwargs)
            return data

    def me_addresses_get_with_http_info(self, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.me_addresses_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str search: Search of the address.
        :param list[str] search_on: Search on of the address.
        :param list[str] sort_by: Sort by of the address.
        :param int page: Page of the address.
        :param int page_size: Page size of the address.
        :return: ListBuyerAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['search', 'search_on', 'sort_by', 'page', 'page_size']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method me_addresses_get" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/me/addresses'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'search' in params:
            query_params['search'] = params['search']
        if 'search_on' in params:
            query_params['searchOn'] = params['search_on']
        if 'sort_by' in params:
            query_params['sortBy'] = params['sort_by']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'page_size' in params:
            query_params['pageSize'] = params['page_size']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ListBuyerAddress',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def me_addresses_post(self, address, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.me_addresses_post(address, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param BuyerAddress address:  (required)
        :return: BuyerAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.me_addresses_post_with_http_info(address, **kwargs)
        else:
            (data) = self.me_addresses_post_with_http_info(address, **kwargs)
            return data

    def me_addresses_post_with_http_info(self, address, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.me_addresses_post_with_http_info(address, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param BuyerAddress address:  (required)
        :return: BuyerAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['address']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method me_addresses_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'address' is set
        if ('address' not in params) or (params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `me_addresses_post`")

        resource_path = '/me/addresses'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'address' in params:
            body_params = params['address']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='BuyerAddress',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def me_catalogs_catalog_id_get(self, catalog_id, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.me_catalogs_catalog_id_get(catalog_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str catalog_id: ID of the catalog. (required)
        :return: Catalog
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.me_catalogs_catalog_id_get_with_http_info(catalog_id, **kwargs)
        else:
            (data) = self.me_catalogs_catalog_id_get_with_http_info(catalog_id, **kwargs)
            return data

    def me_catalogs_catalog_id_get_with_http_info(self, catalog_id, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.me_catalogs_catalog_id_get_with_http_info(catalog_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str catalog_id: ID of the catalog. (required)
        :return: Catalog
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['catalog_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method me_catalogs_catalog_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'catalog_id' is set
        if ('catalog_id' not in params) or (params['catalog_id'] is None):
            raise ValueError("Missing the required parameter `catalog_id` when calling `me_catalogs_catalog_id_get`")

        resource_path = '/me/catalogs/{catalogID}'.replace('{format}', 'json')
        path_params = {}
        if 'catalog_id' in params:
            path_params['catalogID'] = params['catalog_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Catalog',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def me_catalogs_get(self, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.me_catalogs_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str search: Search of the catalog.
        :param list[str] search_on: Search on of the catalog.
        :param list[str] sort_by: Sort by of the catalog.
        :param int page: Page of the catalog.
        :param int page_size: Page size of the catalog.
        :return: ListCatalog
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.me_catalogs_get_with_http_info(**kwargs)
        else:
            (data) = self.me_catalogs_get_with_http_info(**kwargs)
            return data

    def me_catalogs_get_with_http_info(self, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.me_catalogs_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str search: Search of the catalog.
        :param list[str] search_on: Search on of the catalog.
        :param list[str] sort_by: Sort by of the catalog.
        :param int page: Page of the catalog.
        :param int page_size: Page size of the catalog.
        :return: ListCatalog
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['search', 'search_on', 'sort_by', 'page', 'page_size']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method me_catalogs_get" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/me/catalogs'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'search' in params:
            query_params['search'] = params['search']
        if 'search_on' in params:
            query_params['searchOn'] = params['search_on']
        if 'sort_by' in params:
            query_params['sortBy'] = params['sort_by']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'page_size' in params:
            query_params['pageSize'] = params['page_size']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ListCatalog',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def me_categories_get(self, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.me_categories_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str depth: Depth of the category.
        :param str catalog_id: ID of the catalog.
        :param str search: Search of the category.
        :param list[str] search_on: Search on of the category.
        :param list[str] sort_by: Sort by of the category.
        :param int page: Page of the category.
        :param int page_size: Page size of the category.
        :return: ListCategory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.me_categories_get_with_http_info(**kwargs)
        else:
            (data) = self.me_categories_get_with_http_info(**kwargs)
            return data

    def me_categories_get_with_http_info(self, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.me_categories_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str depth: Depth of the category.
        :param str catalog_id: ID of the catalog.
        :param str search: Search of the category.
        :param list[str] search_on: Search on of the category.
        :param list[str] sort_by: Sort by of the category.
        :param int page: Page of the category.
        :param int page_size: Page size of the category.
        :return: ListCategory
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['depth', 'catalog_id', 'search', 'search_on', 'sort_by', 'page', 'page_size']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method me_categories_get" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/me/categories'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'depth' in params:
            query_params['depth'] = params['depth']
        if 'catalog_id' in params:
            query_params['catalogID'] = params['catalog_id']
        if 'search' in params:
            query_params['search'] = params['search']
        if 'search_on' in params:
            query_params['searchOn'] = params['search_on']
        if 'sort_by' in params:
            query_params['sortBy'] = params['sort_by']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'page_size' in params:
            query_params['pageSize'] = params['page_size']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ListCategory',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def me_costcenters_get(self, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.me_costcenters_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str search: Search of the cost center.
        :param list[str] search_on: Search on of the cost center.
        :param list[str] sort_by: Sort by of the cost center.
        :param int page: Page of the cost center.
        :param int page_size: Page size of the cost center.
        :return: ListCostCenter
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.me_costcenters_get_with_http_info(**kwargs)
        else:
            (data) = self.me_costcenters_get_with_http_info(**kwargs)
            return data

    def me_costcenters_get_with_http_info(self, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.me_costcenters_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str search: Search of the cost center.
        :param list[str] search_on: Search on of the cost center.
        :param list[str] sort_by: Sort by of the cost center.
        :param int page: Page of the cost center.
        :param int page_size: Page size of the cost center.
        :return: ListCostCenter
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['search', 'search_on', 'sort_by', 'page', 'page_size']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method me_costcenters_get" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/me/costcenters'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'search' in params:
            query_params['search'] = params['search']
        if 'search_on' in params:
            query_params['searchOn'] = params['search_on']
        if 'sort_by' in params:
            query_params['sortBy'] = params['sort_by']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'page_size' in params:
            query_params['pageSize'] = params['page_size']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ListCostCenter',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def me_creditcards_creditcard_id_delete(self, creditcard_id, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.me_creditcards_creditcard_id_delete(creditcard_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str creditcard_id: ID of the creditcard. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.me_creditcards_creditcard_id_delete_with_http_info(creditcard_id, **kwargs)
        else:
            (data) = self.me_creditcards_creditcard_id_delete_with_http_info(creditcard_id, **kwargs)
            return data

    def me_creditcards_creditcard_id_delete_with_http_info(self, creditcard_id, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.me_creditcards_creditcard_id_delete_with_http_info(creditcard_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str creditcard_id: ID of the creditcard. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['creditcard_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method me_creditcards_creditcard_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'creditcard_id' is set
        if ('creditcard_id' not in params) or (params['creditcard_id'] is None):
            raise ValueError("Missing the required parameter `creditcard_id` when calling `me_creditcards_creditcard_id_delete`")

        resource_path = '/me/creditcards/{creditcardID}'.replace('{format}', 'json')
        path_params = {}
        if 'creditcard_id' in params:
            path_params['creditcardID'] = params['creditcard_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def me_creditcards_creditcard_id_get(self, creditcard_id, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.me_creditcards_creditcard_id_get(creditcard_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str creditcard_id: ID of the creditcard. (required)
        :return: BuyerCreditCard
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.me_creditcards_creditcard_id_get_with_http_info(creditcard_id, **kwargs)
        else:
            (data) = self.me_creditcards_creditcard_id_get_with_http_info(creditcard_id, **kwargs)
            return data

    def me_creditcards_creditcard_id_get_with_http_info(self, creditcard_id, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.me_creditcards_creditcard_id_get_with_http_info(creditcard_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str creditcard_id: ID of the creditcard. (required)
        :return: BuyerCreditCard
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['creditcard_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method me_creditcards_creditcard_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'creditcard_id' is set
        if ('creditcard_id' not in params) or (params['creditcard_id'] is None):
            raise ValueError("Missing the required parameter `creditcard_id` when calling `me_creditcards_creditcard_id_get`")

        resource_path = '/me/creditcards/{creditcardID}'.replace('{format}', 'json')
        path_params = {}
        if 'creditcard_id' in params:
            path_params['creditcardID'] = params['creditcard_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='BuyerCreditCard',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def me_creditcards_creditcard_id_patch(self, creditcard_id, credit_card, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.me_creditcards_creditcard_id_patch(creditcard_id, credit_card, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str creditcard_id: ID of the creditcard. (required)
        :param CreditCard credit_card:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.me_creditcards_creditcard_id_patch_with_http_info(creditcard_id, credit_card, **kwargs)
        else:
            (data) = self.me_creditcards_creditcard_id_patch_with_http_info(creditcard_id, credit_card, **kwargs)
            return data

    def me_creditcards_creditcard_id_patch_with_http_info(self, creditcard_id, credit_card, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.me_creditcards_creditcard_id_patch_with_http_info(creditcard_id, credit_card, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str creditcard_id: ID of the creditcard. (required)
        :param CreditCard credit_card:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['creditcard_id', 'credit_card']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method me_creditcards_creditcard_id_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'creditcard_id' is set
        if ('creditcard_id' not in params) or (params['creditcard_id'] is None):
            raise ValueError("Missing the required parameter `creditcard_id` when calling `me_creditcards_creditcard_id_patch`")
        # verify the required parameter 'credit_card' is set
        if ('credit_card' not in params) or (params['credit_card'] is None):
            raise ValueError("Missing the required parameter `credit_card` when calling `me_creditcards_creditcard_id_patch`")

        resource_path = '/me/creditcards/{creditcardID}'.replace('{format}', 'json')
        path_params = {}
        if 'creditcard_id' in params:
            path_params['creditcardID'] = params['creditcard_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'credit_card' in params:
            body_params = params['credit_card']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'PATCH',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def me_creditcards_creditcard_id_put(self, creditcard_id, credit_card, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.me_creditcards_creditcard_id_put(creditcard_id, credit_card, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str creditcard_id: ID of the creditcard. (required)
        :param BuyerCreditCard credit_card:  (required)
        :return: BuyerCreditCard
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.me_creditcards_creditcard_id_put_with_http_info(creditcard_id, credit_card, **kwargs)
        else:
            (data) = self.me_creditcards_creditcard_id_put_with_http_info(creditcard_id, credit_card, **kwargs)
            return data

    def me_creditcards_creditcard_id_put_with_http_info(self, creditcard_id, credit_card, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.me_creditcards_creditcard_id_put_with_http_info(creditcard_id, credit_card, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str creditcard_id: ID of the creditcard. (required)
        :param BuyerCreditCard credit_card:  (required)
        :return: BuyerCreditCard
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['creditcard_id', 'credit_card']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method me_creditcards_creditcard_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'creditcard_id' is set
        if ('creditcard_id' not in params) or (params['creditcard_id'] is None):
            raise ValueError("Missing the required parameter `creditcard_id` when calling `me_creditcards_creditcard_id_put`")
        # verify the required parameter 'credit_card' is set
        if ('credit_card' not in params) or (params['credit_card'] is None):
            raise ValueError("Missing the required parameter `credit_card` when calling `me_creditcards_creditcard_id_put`")

        resource_path = '/me/creditcards/{creditcardID}'.replace('{format}', 'json')
        path_params = {}
        if 'creditcard_id' in params:
            path_params['creditcardID'] = params['creditcard_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'credit_card' in params:
            body_params = params['credit_card']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='BuyerCreditCard',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def me_creditcards_get(self, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.me_creditcards_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str search: Search of the credit card.
        :param list[str] search_on: Search on of the credit card.
        :param list[str] sort_by: Sort by of the credit card.
        :param int page: Page of the credit card.
        :param int page_size: Page size of the credit card.
        :return: ListBuyerCreditCard
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.me_creditcards_get_with_http_info(**kwargs)
        else:
            (data) = self.me_creditcards_get_with_http_info(**kwargs)
            return data

    def me_creditcards_get_with_http_info(self, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.me_creditcards_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str search: Search of the credit card.
        :param list[str] search_on: Search on of the credit card.
        :param list[str] sort_by: Sort by of the credit card.
        :param int page: Page of the credit card.
        :param int page_size: Page size of the credit card.
        :return: ListBuyerCreditCard
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['search', 'search_on', 'sort_by', 'page', 'page_size']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method me_creditcards_get" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/me/creditcards'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'search' in params:
            query_params['search'] = params['search']
        if 'search_on' in params:
            query_params['searchOn'] = params['search_on']
        if 'sort_by' in params:
            query_params['sortBy'] = params['sort_by']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'page_size' in params:
            query_params['pageSize'] = params['page_size']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ListBuyerCreditCard',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def me_creditcards_post(self, credit_card, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.me_creditcards_post(credit_card, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param BuyerCreditCard credit_card:  (required)
        :return: BuyerCreditCard
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.me_creditcards_post_with_http_info(credit_card, **kwargs)
        else:
            (data) = self.me_creditcards_post_with_http_info(credit_card, **kwargs)
            return data

    def me_creditcards_post_with_http_info(self, credit_card, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.me_creditcards_post_with_http_info(credit_card, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param BuyerCreditCard credit_card:  (required)
        :return: BuyerCreditCard
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['credit_card']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method me_creditcards_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'credit_card' is set
        if ('credit_card' not in params) or (params['credit_card'] is None):
            raise ValueError("Missing the required parameter `credit_card` when calling `me_creditcards_post`")

        resource_path = '/me/creditcards'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'credit_card' in params:
            body_params = params['credit_card']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='BuyerCreditCard',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def me_get(self, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.me_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: MeUser
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.me_get_with_http_info(**kwargs)
        else:
            (data) = self.me_get_with_http_info(**kwargs)
            return data

    def me_get_with_http_info(self, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.me_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: MeUser
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method me_get" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/me'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='MeUser',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def me_orders_approvable_get(self, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.me_orders_approvable_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str _from: Lower bound of date range that the order was created (if outgoing) or submitted (if incoming).
        :param str to: Upper bound of date range that the order was created (if outgoing) or submitted (if incoming).
        :param str search: Search of the order.
        :param list[str] search_on: Search on of the order.
        :param list[str] sort_by: Sort by of the order.
        :param int page: Page of the order.
        :param int page_size: Page size of the order.
        :return: ListOrder
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.me_orders_approvable_get_with_http_info(**kwargs)
        else:
            (data) = self.me_orders_approvable_get_with_http_info(**kwargs)
            return data

    def me_orders_approvable_get_with_http_info(self, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.me_orders_approvable_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str _from: Lower bound of date range that the order was created (if outgoing) or submitted (if incoming).
        :param str to: Upper bound of date range that the order was created (if outgoing) or submitted (if incoming).
        :param str search: Search of the order.
        :param list[str] search_on: Search on of the order.
        :param list[str] sort_by: Sort by of the order.
        :param int page: Page of the order.
        :param int page_size: Page size of the order.
        :return: ListOrder
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_from', 'to', 'search', 'search_on', 'sort_by', 'page', 'page_size']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method me_orders_approvable_get" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/me/orders/approvable'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if '_from' in params:
            query_params['from'] = params['_from']
        if 'to' in params:
            query_params['to'] = params['to']
        if 'search' in params:
            query_params['search'] = params['search']
        if 'search_on' in params:
            query_params['searchOn'] = params['search_on']
        if 'sort_by' in params:
            query_params['sortBy'] = params['sort_by']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'page_size' in params:
            query_params['pageSize'] = params['page_size']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ListOrder',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def me_orders_get(self, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.me_orders_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str _from: Lower bound of date range that the order was created (if outgoing) or submitted (if incoming).
        :param str to: Upper bound of date range that the order was created (if outgoing) or submitted (if incoming).
        :param str search: Search of the order.
        :param list[str] search_on: Search on of the order.
        :param list[str] sort_by: Sort by of the order.
        :param int page: Page of the order.
        :param int page_size: Page size of the order.
        :return: ListOrder
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.me_orders_get_with_http_info(**kwargs)
        else:
            (data) = self.me_orders_get_with_http_info(**kwargs)
            return data

    def me_orders_get_with_http_info(self, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.me_orders_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str _from: Lower bound of date range that the order was created (if outgoing) or submitted (if incoming).
        :param str to: Upper bound of date range that the order was created (if outgoing) or submitted (if incoming).
        :param str search: Search of the order.
        :param list[str] search_on: Search on of the order.
        :param list[str] sort_by: Sort by of the order.
        :param int page: Page of the order.
        :param int page_size: Page size of the order.
        :return: ListOrder
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_from', 'to', 'search', 'search_on', 'sort_by', 'page', 'page_size']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method me_orders_get" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/me/orders'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if '_from' in params:
            query_params['from'] = params['_from']
        if 'to' in params:
            query_params['to'] = params['to']
        if 'search' in params:
            query_params['search'] = params['search']
        if 'search_on' in params:
            query_params['searchOn'] = params['search_on']
        if 'sort_by' in params:
            query_params['sortBy'] = params['sort_by']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'page_size' in params:
            query_params['pageSize'] = params['page_size']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ListOrder',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def me_orders_put(self, anon_user_token, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.me_orders_put(anon_user_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str anon_user_token: Anon user token of the me. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.me_orders_put_with_http_info(anon_user_token, **kwargs)
        else:
            (data) = self.me_orders_put_with_http_info(anon_user_token, **kwargs)
            return data

    def me_orders_put_with_http_info(self, anon_user_token, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.me_orders_put_with_http_info(anon_user_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str anon_user_token: Anon user token of the me. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['anon_user_token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method me_orders_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'anon_user_token' is set
        if ('anon_user_token' not in params) or (params['anon_user_token'] is None):
            raise ValueError("Missing the required parameter `anon_user_token` when calling `me_orders_put`")

        resource_path = '/me/orders'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'anon_user_token' in params:
            query_params['anonUserToken'] = params['anon_user_token']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def me_password_post(self, reset, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.me_password_post(reset, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param TokenPasswordReset reset:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.me_password_post_with_http_info(reset, **kwargs)
        else:
            (data) = self.me_password_post_with_http_info(reset, **kwargs)
            return data

    def me_password_post_with_http_info(self, reset, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.me_password_post_with_http_info(reset, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param TokenPasswordReset reset:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['reset']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method me_password_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'reset' is set
        if ('reset' not in params) or (params['reset'] is None):
            raise ValueError("Missing the required parameter `reset` when calling `me_password_post`")

        resource_path = '/me/password'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'reset' in params:
            body_params = params['reset']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def me_patch(self, user, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.me_patch(user, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param User user:  (required)
        :return: MeUser
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.me_patch_with_http_info(user, **kwargs)
        else:
            (data) = self.me_patch_with_http_info(user, **kwargs)
            return data

    def me_patch_with_http_info(self, user, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.me_patch_with_http_info(user, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param User user:  (required)
        :return: MeUser
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method me_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params) or (params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `me_patch`")

        resource_path = '/me'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'user' in params:
            body_params = params['user']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'PATCH',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='MeUser',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def me_products_get(self, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.me_products_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str catalog_id: ID of the catalog.
        :param str category_id: ID of the category.
        :param str depth: Depth of the product.
        :param str search: Search of the product.
        :param list[str] search_on: Search on of the product.
        :param list[str] sort_by: Sort by of the product.
        :param int page: Page of the product.
        :param int page_size: Page size of the product.
        :return: ListBuyerProduct
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.me_products_get_with_http_info(**kwargs)
        else:
            (data) = self.me_products_get_with_http_info(**kwargs)
            return data

    def me_products_get_with_http_info(self, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.me_products_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str catalog_id: ID of the catalog.
        :param str category_id: ID of the category.
        :param str depth: Depth of the product.
        :param str search: Search of the product.
        :param list[str] search_on: Search on of the product.
        :param list[str] sort_by: Sort by of the product.
        :param int page: Page of the product.
        :param int page_size: Page size of the product.
        :return: ListBuyerProduct
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['catalog_id', 'category_id', 'depth', 'search', 'search_on', 'sort_by', 'page', 'page_size']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method me_products_get" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/me/products'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'catalog_id' in params:
            query_params['catalogID'] = params['catalog_id']
        if 'category_id' in params:
            query_params['categoryID'] = params['category_id']
        if 'depth' in params:
            query_params['depth'] = params['depth']
        if 'search' in params:
            query_params['search'] = params['search']
        if 'search_on' in params:
            query_params['searchOn'] = params['search_on']
        if 'sort_by' in params:
            query_params['sortBy'] = params['sort_by']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'page_size' in params:
            query_params['pageSize'] = params['page_size']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ListBuyerProduct',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def me_products_product_id_get(self, product_id, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.me_products_product_id_get(product_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str product_id: ID of the product. (required)
        :return: BuyerProduct
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.me_products_product_id_get_with_http_info(product_id, **kwargs)
        else:
            (data) = self.me_products_product_id_get_with_http_info(product_id, **kwargs)
            return data

    def me_products_product_id_get_with_http_info(self, product_id, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.me_products_product_id_get_with_http_info(product_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str product_id: ID of the product. (required)
        :return: BuyerProduct
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method me_products_product_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_id' is set
        if ('product_id' not in params) or (params['product_id'] is None):
            raise ValueError("Missing the required parameter `product_id` when calling `me_products_product_id_get`")

        resource_path = '/me/products/{productID}'.replace('{format}', 'json')
        path_params = {}
        if 'product_id' in params:
            path_params['productID'] = params['product_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='BuyerProduct',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def me_products_product_id_specs_get(self, product_id, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.me_products_product_id_specs_get(product_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str product_id: ID of the product. (required)
        :param str catalog_id: ID of the catalog.
        :param str search: Search of the product.
        :param list[str] search_on: Search on of the product.
        :param list[str] sort_by: Sort by of the product.
        :param int page: Page of the product.
        :param int page_size: Page size of the product.
        :return: ListBuyerSpec
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.me_products_product_id_specs_get_with_http_info(product_id, **kwargs)
        else:
            (data) = self.me_products_product_id_specs_get_with_http_info(product_id, **kwargs)
            return data

    def me_products_product_id_specs_get_with_http_info(self, product_id, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.me_products_product_id_specs_get_with_http_info(product_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str product_id: ID of the product. (required)
        :param str catalog_id: ID of the catalog.
        :param str search: Search of the product.
        :param list[str] search_on: Search on of the product.
        :param list[str] sort_by: Sort by of the product.
        :param int page: Page of the product.
        :param int page_size: Page size of the product.
        :return: ListBuyerSpec
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_id', 'catalog_id', 'search', 'search_on', 'sort_by', 'page', 'page_size']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method me_products_product_id_specs_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_id' is set
        if ('product_id' not in params) or (params['product_id'] is None):
            raise ValueError("Missing the required parameter `product_id` when calling `me_products_product_id_specs_get`")

        resource_path = '/me/products/{productID}/specs'.replace('{format}', 'json')
        path_params = {}
        if 'product_id' in params:
            path_params['productID'] = params['product_id']

        query_params = {}
        if 'catalog_id' in params:
            query_params['catalogID'] = params['catalog_id']
        if 'search' in params:
            query_params['search'] = params['search']
        if 'search_on' in params:
            query_params['searchOn'] = params['search_on']
        if 'sort_by' in params:
            query_params['sortBy'] = params['sort_by']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'page_size' in params:
            query_params['pageSize'] = params['page_size']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ListBuyerSpec',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def me_products_product_id_specs_spec_id_get(self, product_id, spec_id, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.me_products_product_id_specs_spec_id_get(product_id, spec_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str product_id: ID of the product. (required)
        :param str spec_id: ID of the spec. (required)
        :param str catalog_id: ID of the catalog.
        :return: BuyerSpec
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.me_products_product_id_specs_spec_id_get_with_http_info(product_id, spec_id, **kwargs)
        else:
            (data) = self.me_products_product_id_specs_spec_id_get_with_http_info(product_id, spec_id, **kwargs)
            return data

    def me_products_product_id_specs_spec_id_get_with_http_info(self, product_id, spec_id, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.me_products_product_id_specs_spec_id_get_with_http_info(product_id, spec_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str product_id: ID of the product. (required)
        :param str spec_id: ID of the spec. (required)
        :param str catalog_id: ID of the catalog.
        :return: BuyerSpec
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_id', 'spec_id', 'catalog_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method me_products_product_id_specs_spec_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_id' is set
        if ('product_id' not in params) or (params['product_id'] is None):
            raise ValueError("Missing the required parameter `product_id` when calling `me_products_product_id_specs_spec_id_get`")
        # verify the required parameter 'spec_id' is set
        if ('spec_id' not in params) or (params['spec_id'] is None):
            raise ValueError("Missing the required parameter `spec_id` when calling `me_products_product_id_specs_spec_id_get`")

        resource_path = '/me/products/{productID}/specs/{specID}'.replace('{format}', 'json')
        path_params = {}
        if 'product_id' in params:
            path_params['productID'] = params['product_id']
        if 'spec_id' in params:
            path_params['specID'] = params['spec_id']

        query_params = {}
        if 'catalog_id' in params:
            query_params['catalogID'] = params['catalog_id']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='BuyerSpec',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def me_promotions_get(self, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.me_promotions_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str search: Search of the promotion.
        :param list[str] search_on: Search on of the promotion.
        :param list[str] sort_by: Sort by of the promotion.
        :param int page: Page of the promotion.
        :param int page_size: Page size of the promotion.
        :return: ListPromotion
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.me_promotions_get_with_http_info(**kwargs)
        else:
            (data) = self.me_promotions_get_with_http_info(**kwargs)
            return data

    def me_promotions_get_with_http_info(self, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.me_promotions_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str search: Search of the promotion.
        :param list[str] search_on: Search on of the promotion.
        :param list[str] sort_by: Sort by of the promotion.
        :param int page: Page of the promotion.
        :param int page_size: Page size of the promotion.
        :return: ListPromotion
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['search', 'search_on', 'sort_by', 'page', 'page_size']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method me_promotions_get" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/me/promotions'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'search' in params:
            query_params['search'] = params['search']
        if 'search_on' in params:
            query_params['searchOn'] = params['search_on']
        if 'sort_by' in params:
            query_params['sortBy'] = params['sort_by']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'page_size' in params:
            query_params['pageSize'] = params['page_size']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ListPromotion',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def me_promotions_promotion_id_get(self, promotion_id, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.me_promotions_promotion_id_get(promotion_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str promotion_id: ID of the promotion. (required)
        :return: Promotion
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.me_promotions_promotion_id_get_with_http_info(promotion_id, **kwargs)
        else:
            (data) = self.me_promotions_promotion_id_get_with_http_info(promotion_id, **kwargs)
            return data

    def me_promotions_promotion_id_get_with_http_info(self, promotion_id, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.me_promotions_promotion_id_get_with_http_info(promotion_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str promotion_id: ID of the promotion. (required)
        :return: Promotion
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['promotion_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method me_promotions_promotion_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'promotion_id' is set
        if ('promotion_id' not in params) or (params['promotion_id'] is None):
            raise ValueError("Missing the required parameter `promotion_id` when calling `me_promotions_promotion_id_get`")

        resource_path = '/me/promotions/{promotionID}'.replace('{format}', 'json')
        path_params = {}
        if 'promotion_id' in params:
            path_params['promotionID'] = params['promotion_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Promotion',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def me_put(self, user, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.me_put(user, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param User user:  (required)
        :return: MeUser
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.me_put_with_http_info(user, **kwargs)
        else:
            (data) = self.me_put_with_http_info(user, **kwargs)
            return data

    def me_put_with_http_info(self, user, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.me_put_with_http_info(user, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param User user:  (required)
        :return: MeUser
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method me_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params) or (params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `me_put`")

        resource_path = '/me'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'user' in params:
            body_params = params['user']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='MeUser',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def me_register_put(self, anon_user_token, user, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.me_register_put(anon_user_token, user, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str anon_user_token: Anon user token of the me. (required)
        :param User user:  (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.me_register_put_with_http_info(anon_user_token, user, **kwargs)
        else:
            (data) = self.me_register_put_with_http_info(anon_user_token, user, **kwargs)
            return data

    def me_register_put_with_http_info(self, anon_user_token, user, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.me_register_put_with_http_info(anon_user_token, user, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str anon_user_token: Anon user token of the me. (required)
        :param User user:  (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['anon_user_token', 'user']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method me_register_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'anon_user_token' is set
        if ('anon_user_token' not in params) or (params['anon_user_token'] is None):
            raise ValueError("Missing the required parameter `anon_user_token` when calling `me_register_put`")
        # verify the required parameter 'user' is set
        if ('user' not in params) or (params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `me_register_put`")

        resource_path = '/me/register'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'anon_user_token' in params:
            query_params['anonUserToken'] = params['anon_user_token']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'user' in params:
            body_params = params['user']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='object',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def me_shipments_get(self, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.me_shipments_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str order_id: ID of the order.
        :param str search: Search of the shipment.
        :param list[str] search_on: Search on of the shipment.
        :param list[str] sort_by: Sort by of the shipment.
        :param int page: Page of the shipment.
        :param int page_size: Page size of the shipment.
        :return: ListBuyerShipment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.me_shipments_get_with_http_info(**kwargs)
        else:
            (data) = self.me_shipments_get_with_http_info(**kwargs)
            return data

    def me_shipments_get_with_http_info(self, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.me_shipments_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str order_id: ID of the order.
        :param str search: Search of the shipment.
        :param list[str] search_on: Search on of the shipment.
        :param list[str] sort_by: Sort by of the shipment.
        :param int page: Page of the shipment.
        :param int page_size: Page size of the shipment.
        :return: ListBuyerShipment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['order_id', 'search', 'search_on', 'sort_by', 'page', 'page_size']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method me_shipments_get" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/me/shipments'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'order_id' in params:
            query_params['orderID'] = params['order_id']
        if 'search' in params:
            query_params['search'] = params['search']
        if 'search_on' in params:
            query_params['searchOn'] = params['search_on']
        if 'sort_by' in params:
            query_params['sortBy'] = params['sort_by']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'page_size' in params:
            query_params['pageSize'] = params['page_size']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ListBuyerShipment',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def me_shipments_shipment_id_get(self, shipment_id, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.me_shipments_shipment_id_get(shipment_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str shipment_id: ID of the shipment. (required)
        :return: BuyerShipment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.me_shipments_shipment_id_get_with_http_info(shipment_id, **kwargs)
        else:
            (data) = self.me_shipments_shipment_id_get_with_http_info(shipment_id, **kwargs)
            return data

    def me_shipments_shipment_id_get_with_http_info(self, shipment_id, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.me_shipments_shipment_id_get_with_http_info(shipment_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str shipment_id: ID of the shipment. (required)
        :return: BuyerShipment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['shipment_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method me_shipments_shipment_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'shipment_id' is set
        if ('shipment_id' not in params) or (params['shipment_id'] is None):
            raise ValueError("Missing the required parameter `shipment_id` when calling `me_shipments_shipment_id_get`")

        resource_path = '/me/shipments/{shipmentID}'.replace('{format}', 'json')
        path_params = {}
        if 'shipment_id' in params:
            path_params['shipmentID'] = params['shipment_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='BuyerShipment',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def me_shipments_shipment_id_items_get(self, shipment_id, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.me_shipments_shipment_id_items_get(shipment_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str shipment_id: ID of the shipment. (required)
        :param str order_id: ID of the order.
        :param str search: Search of the shipment.
        :param list[str] search_on: Search on of the shipment.
        :param list[str] sort_by: Sort by of the shipment.
        :param int page: Page of the shipment.
        :param int page_size: Page size of the shipment.
        :return: ListShipmentItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.me_shipments_shipment_id_items_get_with_http_info(shipment_id, **kwargs)
        else:
            (data) = self.me_shipments_shipment_id_items_get_with_http_info(shipment_id, **kwargs)
            return data

    def me_shipments_shipment_id_items_get_with_http_info(self, shipment_id, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.me_shipments_shipment_id_items_get_with_http_info(shipment_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str shipment_id: ID of the shipment. (required)
        :param str order_id: ID of the order.
        :param str search: Search of the shipment.
        :param list[str] search_on: Search on of the shipment.
        :param list[str] sort_by: Sort by of the shipment.
        :param int page: Page of the shipment.
        :param int page_size: Page size of the shipment.
        :return: ListShipmentItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['shipment_id', 'order_id', 'search', 'search_on', 'sort_by', 'page', 'page_size']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method me_shipments_shipment_id_items_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'shipment_id' is set
        if ('shipment_id' not in params) or (params['shipment_id'] is None):
            raise ValueError("Missing the required parameter `shipment_id` when calling `me_shipments_shipment_id_items_get`")

        resource_path = '/me/shipments/{shipmentID}/items'.replace('{format}', 'json')
        path_params = {}
        if 'shipment_id' in params:
            path_params['shipmentID'] = params['shipment_id']

        query_params = {}
        if 'order_id' in params:
            query_params['orderID'] = params['order_id']
        if 'search' in params:
            query_params['search'] = params['search']
        if 'search_on' in params:
            query_params['searchOn'] = params['search_on']
        if 'sort_by' in params:
            query_params['sortBy'] = params['sort_by']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'page_size' in params:
            query_params['pageSize'] = params['page_size']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ListShipmentItem',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def me_spending_accounts_get(self, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.me_spending_accounts_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str search: Search of the spending account.
        :param list[str] search_on: Search on of the spending account.
        :param list[str] sort_by: Sort by of the spending account.
        :param int page: Page of the spending account.
        :param int page_size: Page size of the spending account.
        :return: ListSpendingAccount
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.me_spending_accounts_get_with_http_info(**kwargs)
        else:
            (data) = self.me_spending_accounts_get_with_http_info(**kwargs)
            return data

    def me_spending_accounts_get_with_http_info(self, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.me_spending_accounts_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str search: Search of the spending account.
        :param list[str] search_on: Search on of the spending account.
        :param list[str] sort_by: Sort by of the spending account.
        :param int page: Page of the spending account.
        :param int page_size: Page size of the spending account.
        :return: ListSpendingAccount
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['search', 'search_on', 'sort_by', 'page', 'page_size']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method me_spending_accounts_get" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/me/spendingAccounts'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'search' in params:
            query_params['search'] = params['search']
        if 'search_on' in params:
            query_params['searchOn'] = params['search_on']
        if 'sort_by' in params:
            query_params['sortBy'] = params['sort_by']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'page_size' in params:
            query_params['pageSize'] = params['page_size']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ListSpendingAccount',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def me_spendingaccounts_spending_account_id_get(self, spending_account_id, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.me_spendingaccounts_spending_account_id_get(spending_account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str spending_account_id: ID of the spending account. (required)
        :return: SpendingAccount
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.me_spendingaccounts_spending_account_id_get_with_http_info(spending_account_id, **kwargs)
        else:
            (data) = self.me_spendingaccounts_spending_account_id_get_with_http_info(spending_account_id, **kwargs)
            return data

    def me_spendingaccounts_spending_account_id_get_with_http_info(self, spending_account_id, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.me_spendingaccounts_spending_account_id_get_with_http_info(spending_account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str spending_account_id: ID of the spending account. (required)
        :return: SpendingAccount
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['spending_account_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method me_spendingaccounts_spending_account_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'spending_account_id' is set
        if ('spending_account_id' not in params) or (params['spending_account_id'] is None):
            raise ValueError("Missing the required parameter `spending_account_id` when calling `me_spendingaccounts_spending_account_id_get`")

        resource_path = '/me/spendingaccounts/{spendingAccountID}'.replace('{format}', 'json')
        path_params = {}
        if 'spending_account_id' in params:
            path_params['spendingAccountID'] = params['spending_account_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SpendingAccount',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def me_usergroups_get(self, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.me_usergroups_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str search: Search of the user group.
        :param list[str] search_on: Search on of the user group.
        :param list[str] sort_by: Sort by of the user group.
        :param int page: Page of the user group.
        :param int page_size: Page size of the user group.
        :return: ListUserGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.me_usergroups_get_with_http_info(**kwargs)
        else:
            (data) = self.me_usergroups_get_with_http_info(**kwargs)
            return data

    def me_usergroups_get_with_http_info(self, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.me_usergroups_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str search: Search of the user group.
        :param list[str] search_on: Search on of the user group.
        :param list[str] sort_by: Sort by of the user group.
        :param int page: Page of the user group.
        :param int page_size: Page size of the user group.
        :return: ListUserGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['search', 'search_on', 'sort_by', 'page', 'page_size']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method me_usergroups_get" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/me/usergroups'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'search' in params:
            query_params['search'] = params['search']
        if 'search_on' in params:
            query_params['searchOn'] = params['search_on']
        if 'sort_by' in params:
            query_params['sortBy'] = params['sort_by']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'page_size' in params:
            query_params['pageSize'] = params['page_size']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ListUserGroup',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
