# coding: utf-8

"""
    OrderCloud

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0
    Contact: ordercloud@four51.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class CategoryApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def catalogs_catalog_id_categories_assignments_get(self, catalog_id, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.catalogs_catalog_id_categories_assignments_get(catalog_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str catalog_id: ID of the catalog. (required)
        :param str category_id: ID of the category.
        :param str buyer_id: ID of the buyer.
        :param str user_id: ID of the user.
        :param str user_group_id: ID of the user group.
        :param str level: Level of the category.
        :param int page: Page of the category.
        :param int page_size: Page size of the category.
        :return: ListCategoryAssignment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.catalogs_catalog_id_categories_assignments_get_with_http_info(catalog_id, **kwargs)
        else:
            (data) = self.catalogs_catalog_id_categories_assignments_get_with_http_info(catalog_id, **kwargs)
            return data

    def catalogs_catalog_id_categories_assignments_get_with_http_info(self, catalog_id, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.catalogs_catalog_id_categories_assignments_get_with_http_info(catalog_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str catalog_id: ID of the catalog. (required)
        :param str category_id: ID of the category.
        :param str buyer_id: ID of the buyer.
        :param str user_id: ID of the user.
        :param str user_group_id: ID of the user group.
        :param str level: Level of the category.
        :param int page: Page of the category.
        :param int page_size: Page size of the category.
        :return: ListCategoryAssignment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['catalog_id', 'category_id', 'buyer_id', 'user_id', 'user_group_id', 'level', 'page', 'page_size']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method catalogs_catalog_id_categories_assignments_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'catalog_id' is set
        if ('catalog_id' not in params) or (params['catalog_id'] is None):
            raise ValueError("Missing the required parameter `catalog_id` when calling `catalogs_catalog_id_categories_assignments_get`")

        resource_path = '/catalogs/{catalogID}/categories/assignments'.replace('{format}', 'json')
        path_params = {}
        if 'catalog_id' in params:
            path_params['catalogID'] = params['catalog_id']

        query_params = {}
        if 'category_id' in params:
            query_params['categoryID'] = params['category_id']
        if 'buyer_id' in params:
            query_params['buyerID'] = params['buyer_id']
        if 'user_id' in params:
            query_params['userID'] = params['user_id']
        if 'user_group_id' in params:
            query_params['userGroupID'] = params['user_group_id']
        if 'level' in params:
            query_params['level'] = params['level']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'page_size' in params:
            query_params['pageSize'] = params['page_size']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ListCategoryAssignment',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def catalogs_catalog_id_categories_assignments_post(self, catalog_id, category_assignment, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.catalogs_catalog_id_categories_assignments_post(catalog_id, category_assignment, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str catalog_id: ID of the catalog. (required)
        :param CategoryAssignment category_assignment:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.catalogs_catalog_id_categories_assignments_post_with_http_info(catalog_id, category_assignment, **kwargs)
        else:
            (data) = self.catalogs_catalog_id_categories_assignments_post_with_http_info(catalog_id, category_assignment, **kwargs)
            return data

    def catalogs_catalog_id_categories_assignments_post_with_http_info(self, catalog_id, category_assignment, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.catalogs_catalog_id_categories_assignments_post_with_http_info(catalog_id, category_assignment, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str catalog_id: ID of the catalog. (required)
        :param CategoryAssignment category_assignment:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['catalog_id', 'category_assignment']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method catalogs_catalog_id_categories_assignments_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'catalog_id' is set
        if ('catalog_id' not in params) or (params['catalog_id'] is None):
            raise ValueError("Missing the required parameter `catalog_id` when calling `catalogs_catalog_id_categories_assignments_post`")
        # verify the required parameter 'category_assignment' is set
        if ('category_assignment' not in params) or (params['category_assignment'] is None):
            raise ValueError("Missing the required parameter `category_assignment` when calling `catalogs_catalog_id_categories_assignments_post`")

        resource_path = '/catalogs/{catalogID}/categories/assignments'.replace('{format}', 'json')
        path_params = {}
        if 'catalog_id' in params:
            path_params['catalogID'] = params['catalog_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'category_assignment' in params:
            body_params = params['category_assignment']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def catalogs_catalog_id_categories_category_id_assignments_delete(self, catalog_id, category_id, buyer_id, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.catalogs_catalog_id_categories_category_id_assignments_delete(catalog_id, category_id, buyer_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str catalog_id: ID of the catalog. (required)
        :param str category_id: ID of the category. (required)
        :param str buyer_id: ID of the buyer. (required)
        :param str user_id: ID of the user.
        :param str user_group_id: ID of the user group.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.catalogs_catalog_id_categories_category_id_assignments_delete_with_http_info(catalog_id, category_id, buyer_id, **kwargs)
        else:
            (data) = self.catalogs_catalog_id_categories_category_id_assignments_delete_with_http_info(catalog_id, category_id, buyer_id, **kwargs)
            return data

    def catalogs_catalog_id_categories_category_id_assignments_delete_with_http_info(self, catalog_id, category_id, buyer_id, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.catalogs_catalog_id_categories_category_id_assignments_delete_with_http_info(catalog_id, category_id, buyer_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str catalog_id: ID of the catalog. (required)
        :param str category_id: ID of the category. (required)
        :param str buyer_id: ID of the buyer. (required)
        :param str user_id: ID of the user.
        :param str user_group_id: ID of the user group.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['catalog_id', 'category_id', 'buyer_id', 'user_id', 'user_group_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method catalogs_catalog_id_categories_category_id_assignments_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'catalog_id' is set
        if ('catalog_id' not in params) or (params['catalog_id'] is None):
            raise ValueError("Missing the required parameter `catalog_id` when calling `catalogs_catalog_id_categories_category_id_assignments_delete`")
        # verify the required parameter 'category_id' is set
        if ('category_id' not in params) or (params['category_id'] is None):
            raise ValueError("Missing the required parameter `category_id` when calling `catalogs_catalog_id_categories_category_id_assignments_delete`")
        # verify the required parameter 'buyer_id' is set
        if ('buyer_id' not in params) or (params['buyer_id'] is None):
            raise ValueError("Missing the required parameter `buyer_id` when calling `catalogs_catalog_id_categories_category_id_assignments_delete`")

        resource_path = '/catalogs/{catalogID}/categories/{categoryID}/assignments'.replace('{format}', 'json')
        path_params = {}
        if 'catalog_id' in params:
            path_params['catalogID'] = params['catalog_id']
        if 'category_id' in params:
            path_params['categoryID'] = params['category_id']

        query_params = {}
        if 'buyer_id' in params:
            query_params['buyerID'] = params['buyer_id']
        if 'user_id' in params:
            query_params['userID'] = params['user_id']
        if 'user_group_id' in params:
            query_params['userGroupID'] = params['user_group_id']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def catalogs_catalog_id_categories_category_id_delete(self, catalog_id, category_id, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.catalogs_catalog_id_categories_category_id_delete(catalog_id, category_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str catalog_id: ID of the catalog. (required)
        :param str category_id: ID of the category. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.catalogs_catalog_id_categories_category_id_delete_with_http_info(catalog_id, category_id, **kwargs)
        else:
            (data) = self.catalogs_catalog_id_categories_category_id_delete_with_http_info(catalog_id, category_id, **kwargs)
            return data

    def catalogs_catalog_id_categories_category_id_delete_with_http_info(self, catalog_id, category_id, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.catalogs_catalog_id_categories_category_id_delete_with_http_info(catalog_id, category_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str catalog_id: ID of the catalog. (required)
        :param str category_id: ID of the category. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['catalog_id', 'category_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method catalogs_catalog_id_categories_category_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'catalog_id' is set
        if ('catalog_id' not in params) or (params['catalog_id'] is None):
            raise ValueError("Missing the required parameter `catalog_id` when calling `catalogs_catalog_id_categories_category_id_delete`")
        # verify the required parameter 'category_id' is set
        if ('category_id' not in params) or (params['category_id'] is None):
            raise ValueError("Missing the required parameter `category_id` when calling `catalogs_catalog_id_categories_category_id_delete`")

        resource_path = '/catalogs/{catalogID}/categories/{categoryID}'.replace('{format}', 'json')
        path_params = {}
        if 'catalog_id' in params:
            path_params['catalogID'] = params['catalog_id']
        if 'category_id' in params:
            path_params['categoryID'] = params['category_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def catalogs_catalog_id_categories_category_id_get(self, catalog_id, category_id, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.catalogs_catalog_id_categories_category_id_get(catalog_id, category_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str catalog_id: ID of the catalog. (required)
        :param str category_id: ID of the category. (required)
        :return: Category
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.catalogs_catalog_id_categories_category_id_get_with_http_info(catalog_id, category_id, **kwargs)
        else:
            (data) = self.catalogs_catalog_id_categories_category_id_get_with_http_info(catalog_id, category_id, **kwargs)
            return data

    def catalogs_catalog_id_categories_category_id_get_with_http_info(self, catalog_id, category_id, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.catalogs_catalog_id_categories_category_id_get_with_http_info(catalog_id, category_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str catalog_id: ID of the catalog. (required)
        :param str category_id: ID of the category. (required)
        :return: Category
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['catalog_id', 'category_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method catalogs_catalog_id_categories_category_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'catalog_id' is set
        if ('catalog_id' not in params) or (params['catalog_id'] is None):
            raise ValueError("Missing the required parameter `catalog_id` when calling `catalogs_catalog_id_categories_category_id_get`")
        # verify the required parameter 'category_id' is set
        if ('category_id' not in params) or (params['category_id'] is None):
            raise ValueError("Missing the required parameter `category_id` when calling `catalogs_catalog_id_categories_category_id_get`")

        resource_path = '/catalogs/{catalogID}/categories/{categoryID}'.replace('{format}', 'json')
        path_params = {}
        if 'catalog_id' in params:
            path_params['catalogID'] = params['catalog_id']
        if 'category_id' in params:
            path_params['categoryID'] = params['category_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Category',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def catalogs_catalog_id_categories_category_id_patch(self, catalog_id, category_id, category, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.catalogs_catalog_id_categories_category_id_patch(catalog_id, category_id, category, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str catalog_id: ID of the catalog. (required)
        :param str category_id: ID of the category. (required)
        :param Category category:  (required)
        :return: Category
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.catalogs_catalog_id_categories_category_id_patch_with_http_info(catalog_id, category_id, category, **kwargs)
        else:
            (data) = self.catalogs_catalog_id_categories_category_id_patch_with_http_info(catalog_id, category_id, category, **kwargs)
            return data

    def catalogs_catalog_id_categories_category_id_patch_with_http_info(self, catalog_id, category_id, category, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.catalogs_catalog_id_categories_category_id_patch_with_http_info(catalog_id, category_id, category, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str catalog_id: ID of the catalog. (required)
        :param str category_id: ID of the category. (required)
        :param Category category:  (required)
        :return: Category
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['catalog_id', 'category_id', 'category']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method catalogs_catalog_id_categories_category_id_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'catalog_id' is set
        if ('catalog_id' not in params) or (params['catalog_id'] is None):
            raise ValueError("Missing the required parameter `catalog_id` when calling `catalogs_catalog_id_categories_category_id_patch`")
        # verify the required parameter 'category_id' is set
        if ('category_id' not in params) or (params['category_id'] is None):
            raise ValueError("Missing the required parameter `category_id` when calling `catalogs_catalog_id_categories_category_id_patch`")
        # verify the required parameter 'category' is set
        if ('category' not in params) or (params['category'] is None):
            raise ValueError("Missing the required parameter `category` when calling `catalogs_catalog_id_categories_category_id_patch`")

        resource_path = '/catalogs/{catalogID}/categories/{categoryID}'.replace('{format}', 'json')
        path_params = {}
        if 'catalog_id' in params:
            path_params['catalogID'] = params['catalog_id']
        if 'category_id' in params:
            path_params['categoryID'] = params['category_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'category' in params:
            body_params = params['category']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'PATCH',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Category',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def catalogs_catalog_id_categories_category_id_productassignments_product_id_delete(self, catalog_id, category_id, product_id, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.catalogs_catalog_id_categories_category_id_productassignments_product_id_delete(catalog_id, category_id, product_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str catalog_id: ID of the catalog. (required)
        :param str category_id: ID of the category. (required)
        :param str product_id: ID of the product. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.catalogs_catalog_id_categories_category_id_productassignments_product_id_delete_with_http_info(catalog_id, category_id, product_id, **kwargs)
        else:
            (data) = self.catalogs_catalog_id_categories_category_id_productassignments_product_id_delete_with_http_info(catalog_id, category_id, product_id, **kwargs)
            return data

    def catalogs_catalog_id_categories_category_id_productassignments_product_id_delete_with_http_info(self, catalog_id, category_id, product_id, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.catalogs_catalog_id_categories_category_id_productassignments_product_id_delete_with_http_info(catalog_id, category_id, product_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str catalog_id: ID of the catalog. (required)
        :param str category_id: ID of the category. (required)
        :param str product_id: ID of the product. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['catalog_id', 'category_id', 'product_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method catalogs_catalog_id_categories_category_id_productassignments_product_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'catalog_id' is set
        if ('catalog_id' not in params) or (params['catalog_id'] is None):
            raise ValueError("Missing the required parameter `catalog_id` when calling `catalogs_catalog_id_categories_category_id_productassignments_product_id_delete`")
        # verify the required parameter 'category_id' is set
        if ('category_id' not in params) or (params['category_id'] is None):
            raise ValueError("Missing the required parameter `category_id` when calling `catalogs_catalog_id_categories_category_id_productassignments_product_id_delete`")
        # verify the required parameter 'product_id' is set
        if ('product_id' not in params) or (params['product_id'] is None):
            raise ValueError("Missing the required parameter `product_id` when calling `catalogs_catalog_id_categories_category_id_productassignments_product_id_delete`")

        resource_path = '/catalogs/{catalogID}/categories/{categoryID}/productassignments/{productID}'.replace('{format}', 'json')
        path_params = {}
        if 'catalog_id' in params:
            path_params['catalogID'] = params['catalog_id']
        if 'category_id' in params:
            path_params['categoryID'] = params['category_id']
        if 'product_id' in params:
            path_params['productID'] = params['product_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def catalogs_catalog_id_categories_category_id_put(self, catalog_id, category_id, category, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.catalogs_catalog_id_categories_category_id_put(catalog_id, category_id, category, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str catalog_id: ID of the catalog. (required)
        :param str category_id: ID of the category. (required)
        :param Category category:  (required)
        :return: Category
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.catalogs_catalog_id_categories_category_id_put_with_http_info(catalog_id, category_id, category, **kwargs)
        else:
            (data) = self.catalogs_catalog_id_categories_category_id_put_with_http_info(catalog_id, category_id, category, **kwargs)
            return data

    def catalogs_catalog_id_categories_category_id_put_with_http_info(self, catalog_id, category_id, category, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.catalogs_catalog_id_categories_category_id_put_with_http_info(catalog_id, category_id, category, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str catalog_id: ID of the catalog. (required)
        :param str category_id: ID of the category. (required)
        :param Category category:  (required)
        :return: Category
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['catalog_id', 'category_id', 'category']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method catalogs_catalog_id_categories_category_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'catalog_id' is set
        if ('catalog_id' not in params) or (params['catalog_id'] is None):
            raise ValueError("Missing the required parameter `catalog_id` when calling `catalogs_catalog_id_categories_category_id_put`")
        # verify the required parameter 'category_id' is set
        if ('category_id' not in params) or (params['category_id'] is None):
            raise ValueError("Missing the required parameter `category_id` when calling `catalogs_catalog_id_categories_category_id_put`")
        # verify the required parameter 'category' is set
        if ('category' not in params) or (params['category'] is None):
            raise ValueError("Missing the required parameter `category` when calling `catalogs_catalog_id_categories_category_id_put`")

        resource_path = '/catalogs/{catalogID}/categories/{categoryID}'.replace('{format}', 'json')
        path_params = {}
        if 'catalog_id' in params:
            path_params['catalogID'] = params['catalog_id']
        if 'category_id' in params:
            path_params['categoryID'] = params['category_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'category' in params:
            body_params = params['category']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Category',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def catalogs_catalog_id_categories_get(self, catalog_id, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.catalogs_catalog_id_categories_get(catalog_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str catalog_id: ID of the catalog. (required)
        :param str depth: Depth of the category.
        :param str search: Search of the category.
        :param list[str] search_on: Search on of the category.
        :param list[str] sort_by: Sort by of the category.
        :param int page: Page of the category.
        :param int page_size: Page size of the category.
        :return: ListCategory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.catalogs_catalog_id_categories_get_with_http_info(catalog_id, **kwargs)
        else:
            (data) = self.catalogs_catalog_id_categories_get_with_http_info(catalog_id, **kwargs)
            return data

    def catalogs_catalog_id_categories_get_with_http_info(self, catalog_id, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.catalogs_catalog_id_categories_get_with_http_info(catalog_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str catalog_id: ID of the catalog. (required)
        :param str depth: Depth of the category.
        :param str search: Search of the category.
        :param list[str] search_on: Search on of the category.
        :param list[str] sort_by: Sort by of the category.
        :param int page: Page of the category.
        :param int page_size: Page size of the category.
        :return: ListCategory
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['catalog_id', 'depth', 'search', 'search_on', 'sort_by', 'page', 'page_size']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method catalogs_catalog_id_categories_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'catalog_id' is set
        if ('catalog_id' not in params) or (params['catalog_id'] is None):
            raise ValueError("Missing the required parameter `catalog_id` when calling `catalogs_catalog_id_categories_get`")

        resource_path = '/catalogs/{catalogID}/categories'.replace('{format}', 'json')
        path_params = {}
        if 'catalog_id' in params:
            path_params['catalogID'] = params['catalog_id']

        query_params = {}
        if 'depth' in params:
            query_params['depth'] = params['depth']
        if 'search' in params:
            query_params['search'] = params['search']
        if 'search_on' in params:
            query_params['searchOn'] = params['search_on']
        if 'sort_by' in params:
            query_params['sortBy'] = params['sort_by']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'page_size' in params:
            query_params['pageSize'] = params['page_size']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ListCategory',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def catalogs_catalog_id_categories_post(self, catalog_id, category, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.catalogs_catalog_id_categories_post(catalog_id, category, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str catalog_id: ID of the catalog. (required)
        :param Category category:  (required)
        :return: Category
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.catalogs_catalog_id_categories_post_with_http_info(catalog_id, category, **kwargs)
        else:
            (data) = self.catalogs_catalog_id_categories_post_with_http_info(catalog_id, category, **kwargs)
            return data

    def catalogs_catalog_id_categories_post_with_http_info(self, catalog_id, category, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.catalogs_catalog_id_categories_post_with_http_info(catalog_id, category, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str catalog_id: ID of the catalog. (required)
        :param Category category:  (required)
        :return: Category
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['catalog_id', 'category']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method catalogs_catalog_id_categories_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'catalog_id' is set
        if ('catalog_id' not in params) or (params['catalog_id'] is None):
            raise ValueError("Missing the required parameter `catalog_id` when calling `catalogs_catalog_id_categories_post`")
        # verify the required parameter 'category' is set
        if ('category' not in params) or (params['category'] is None):
            raise ValueError("Missing the required parameter `category` when calling `catalogs_catalog_id_categories_post`")

        resource_path = '/catalogs/{catalogID}/categories'.replace('{format}', 'json')
        path_params = {}
        if 'catalog_id' in params:
            path_params['catalogID'] = params['catalog_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'category' in params:
            body_params = params['category']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Category',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def catalogs_catalog_id_categories_productassignments_get(self, catalog_id, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.catalogs_catalog_id_categories_productassignments_get(catalog_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str catalog_id: ID of the catalog. (required)
        :param str category_id: ID of the category.
        :param str product_id: ID of the product.
        :param int page: Page of the category.
        :param int page_size: Page size of the category.
        :return: ListCategoryProductAssignment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.catalogs_catalog_id_categories_productassignments_get_with_http_info(catalog_id, **kwargs)
        else:
            (data) = self.catalogs_catalog_id_categories_productassignments_get_with_http_info(catalog_id, **kwargs)
            return data

    def catalogs_catalog_id_categories_productassignments_get_with_http_info(self, catalog_id, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.catalogs_catalog_id_categories_productassignments_get_with_http_info(catalog_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str catalog_id: ID of the catalog. (required)
        :param str category_id: ID of the category.
        :param str product_id: ID of the product.
        :param int page: Page of the category.
        :param int page_size: Page size of the category.
        :return: ListCategoryProductAssignment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['catalog_id', 'category_id', 'product_id', 'page', 'page_size']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method catalogs_catalog_id_categories_productassignments_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'catalog_id' is set
        if ('catalog_id' not in params) or (params['catalog_id'] is None):
            raise ValueError("Missing the required parameter `catalog_id` when calling `catalogs_catalog_id_categories_productassignments_get`")

        resource_path = '/catalogs/{catalogID}/categories/productassignments'.replace('{format}', 'json')
        path_params = {}
        if 'catalog_id' in params:
            path_params['catalogID'] = params['catalog_id']

        query_params = {}
        if 'category_id' in params:
            query_params['categoryID'] = params['category_id']
        if 'product_id' in params:
            query_params['productID'] = params['product_id']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'page_size' in params:
            query_params['pageSize'] = params['page_size']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ListCategoryProductAssignment',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def catalogs_catalog_id_categories_productassignments_post(self, catalog_id, product_assignment, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.catalogs_catalog_id_categories_productassignments_post(catalog_id, product_assignment, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str catalog_id: ID of the catalog. (required)
        :param CategoryProductAssignment product_assignment:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.catalogs_catalog_id_categories_productassignments_post_with_http_info(catalog_id, product_assignment, **kwargs)
        else:
            (data) = self.catalogs_catalog_id_categories_productassignments_post_with_http_info(catalog_id, product_assignment, **kwargs)
            return data

    def catalogs_catalog_id_categories_productassignments_post_with_http_info(self, catalog_id, product_assignment, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.catalogs_catalog_id_categories_productassignments_post_with_http_info(catalog_id, product_assignment, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str catalog_id: ID of the catalog. (required)
        :param CategoryProductAssignment product_assignment:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['catalog_id', 'product_assignment']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method catalogs_catalog_id_categories_productassignments_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'catalog_id' is set
        if ('catalog_id' not in params) or (params['catalog_id'] is None):
            raise ValueError("Missing the required parameter `catalog_id` when calling `catalogs_catalog_id_categories_productassignments_post`")
        # verify the required parameter 'product_assignment' is set
        if ('product_assignment' not in params) or (params['product_assignment'] is None):
            raise ValueError("Missing the required parameter `product_assignment` when calling `catalogs_catalog_id_categories_productassignments_post`")

        resource_path = '/catalogs/{catalogID}/categories/productassignments'.replace('{format}', 'json')
        path_params = {}
        if 'catalog_id' in params:
            path_params['catalogID'] = params['catalog_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'product_assignment' in params:
            body_params = params['product_assignment']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
