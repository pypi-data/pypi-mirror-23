# coding: utf-8

"""
    OrderCloud

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0
    Contact: ordercloud@four51.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class OrderApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def orders_direction_get(self, direction, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.orders_direction_get(direction, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str direction: Direction of the order. Possible values: Incoming, Outgoing. (required)
        :param str buyer_id: ID of the buyer.
        :param str supplier_id: ID of the supplier.
        :param str _from: Lower bound of date range that the order was created.
        :param str to: Upper bound of date range that the order was created.
        :param str search: Search of the order.
        :param list[str] search_on: Search on of the order.
        :param list[str] sort_by: Sort by of the order.
        :param int page: Page of the order.
        :param int page_size: Page size of the order.
        :return: ListOrder
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.orders_direction_get_with_http_info(direction, **kwargs)
        else:
            (data) = self.orders_direction_get_with_http_info(direction, **kwargs)
            return data

    def orders_direction_get_with_http_info(self, direction, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.orders_direction_get_with_http_info(direction, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str direction: Direction of the order. Possible values: Incoming, Outgoing. (required)
        :param str buyer_id: ID of the buyer.
        :param str supplier_id: ID of the supplier.
        :param str _from: Lower bound of date range that the order was created.
        :param str to: Upper bound of date range that the order was created.
        :param str search: Search of the order.
        :param list[str] search_on: Search on of the order.
        :param list[str] sort_by: Sort by of the order.
        :param int page: Page of the order.
        :param int page_size: Page size of the order.
        :return: ListOrder
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['direction', 'buyer_id', 'supplier_id', '_from', 'to', 'search', 'search_on', 'sort_by', 'page', 'page_size']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orders_direction_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'direction' is set
        if ('direction' not in params) or (params['direction'] is None):
            raise ValueError("Missing the required parameter `direction` when calling `orders_direction_get`")

        resource_path = '/orders/{direction}'.replace('{format}', 'json')
        path_params = {}
        if 'direction' in params:
            path_params['direction'] = params['direction']

        query_params = {}
        if 'buyer_id' in params:
            query_params['buyerID'] = params['buyer_id']
        if 'supplier_id' in params:
            query_params['supplierID'] = params['supplier_id']
        if '_from' in params:
            query_params['from'] = params['_from']
        if 'to' in params:
            query_params['to'] = params['to']
        if 'search' in params:
            query_params['search'] = params['search']
        if 'search_on' in params:
            query_params['searchOn'] = params['search_on']
        if 'sort_by' in params:
            query_params['sortBy'] = params['sort_by']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'page_size' in params:
            query_params['pageSize'] = params['page_size']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ListOrder',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def orders_direction_order_id_approvals_get(self, direction, order_id, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.orders_direction_order_id_approvals_get(direction, order_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str direction: Direction of the order. Possible values: Incoming, Outgoing. (required)
        :param str order_id: ID of the order. (required)
        :param str search: Search of the order.
        :param list[str] search_on: Search on of the order.
        :param list[str] sort_by: Sort by of the order.
        :param int page: Page of the order.
        :param int page_size: Page size of the order.
        :return: ListOrderApproval
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.orders_direction_order_id_approvals_get_with_http_info(direction, order_id, **kwargs)
        else:
            (data) = self.orders_direction_order_id_approvals_get_with_http_info(direction, order_id, **kwargs)
            return data

    def orders_direction_order_id_approvals_get_with_http_info(self, direction, order_id, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.orders_direction_order_id_approvals_get_with_http_info(direction, order_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str direction: Direction of the order. Possible values: Incoming, Outgoing. (required)
        :param str order_id: ID of the order. (required)
        :param str search: Search of the order.
        :param list[str] search_on: Search on of the order.
        :param list[str] sort_by: Sort by of the order.
        :param int page: Page of the order.
        :param int page_size: Page size of the order.
        :return: ListOrderApproval
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['direction', 'order_id', 'search', 'search_on', 'sort_by', 'page', 'page_size']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orders_direction_order_id_approvals_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'direction' is set
        if ('direction' not in params) or (params['direction'] is None):
            raise ValueError("Missing the required parameter `direction` when calling `orders_direction_order_id_approvals_get`")
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params) or (params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `orders_direction_order_id_approvals_get`")

        resource_path = '/orders/{direction}/{orderID}/approvals'.replace('{format}', 'json')
        path_params = {}
        if 'direction' in params:
            path_params['direction'] = params['direction']
        if 'order_id' in params:
            path_params['orderID'] = params['order_id']

        query_params = {}
        if 'search' in params:
            query_params['search'] = params['search']
        if 'search_on' in params:
            query_params['searchOn'] = params['search_on']
        if 'sort_by' in params:
            query_params['sortBy'] = params['sort_by']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'page_size' in params:
            query_params['pageSize'] = params['page_size']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ListOrderApproval',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def orders_direction_order_id_approve_post(self, direction, order_id, info, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.orders_direction_order_id_approve_post(direction, order_id, info, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str direction: Direction of the order. Possible values: Incoming, Outgoing. (required)
        :param str order_id: ID of the order. (required)
        :param OrderApprovalInfo info:  (required)
        :return: Order
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.orders_direction_order_id_approve_post_with_http_info(direction, order_id, info, **kwargs)
        else:
            (data) = self.orders_direction_order_id_approve_post_with_http_info(direction, order_id, info, **kwargs)
            return data

    def orders_direction_order_id_approve_post_with_http_info(self, direction, order_id, info, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.orders_direction_order_id_approve_post_with_http_info(direction, order_id, info, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str direction: Direction of the order. Possible values: Incoming, Outgoing. (required)
        :param str order_id: ID of the order. (required)
        :param OrderApprovalInfo info:  (required)
        :return: Order
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['direction', 'order_id', 'info']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orders_direction_order_id_approve_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'direction' is set
        if ('direction' not in params) or (params['direction'] is None):
            raise ValueError("Missing the required parameter `direction` when calling `orders_direction_order_id_approve_post`")
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params) or (params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `orders_direction_order_id_approve_post`")
        # verify the required parameter 'info' is set
        if ('info' not in params) or (params['info'] is None):
            raise ValueError("Missing the required parameter `info` when calling `orders_direction_order_id_approve_post`")

        resource_path = '/orders/{direction}/{orderID}/approve'.replace('{format}', 'json')
        path_params = {}
        if 'direction' in params:
            path_params['direction'] = params['direction']
        if 'order_id' in params:
            path_params['orderID'] = params['order_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'info' in params:
            body_params = params['info']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Order',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def orders_direction_order_id_billto_patch(self, direction, order_id, address, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.orders_direction_order_id_billto_patch(direction, order_id, address, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str direction: Direction of the order. Possible values: Incoming, Outgoing. (required)
        :param str order_id: ID of the order. (required)
        :param Address address:  (required)
        :return: Order
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.orders_direction_order_id_billto_patch_with_http_info(direction, order_id, address, **kwargs)
        else:
            (data) = self.orders_direction_order_id_billto_patch_with_http_info(direction, order_id, address, **kwargs)
            return data

    def orders_direction_order_id_billto_patch_with_http_info(self, direction, order_id, address, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.orders_direction_order_id_billto_patch_with_http_info(direction, order_id, address, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str direction: Direction of the order. Possible values: Incoming, Outgoing. (required)
        :param str order_id: ID of the order. (required)
        :param Address address:  (required)
        :return: Order
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['direction', 'order_id', 'address']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orders_direction_order_id_billto_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'direction' is set
        if ('direction' not in params) or (params['direction'] is None):
            raise ValueError("Missing the required parameter `direction` when calling `orders_direction_order_id_billto_patch`")
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params) or (params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `orders_direction_order_id_billto_patch`")
        # verify the required parameter 'address' is set
        if ('address' not in params) or (params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `orders_direction_order_id_billto_patch`")

        resource_path = '/orders/{direction}/{orderID}/billto'.replace('{format}', 'json')
        path_params = {}
        if 'direction' in params:
            path_params['direction'] = params['direction']
        if 'order_id' in params:
            path_params['orderID'] = params['order_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'address' in params:
            body_params = params['address']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'PATCH',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Order',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def orders_direction_order_id_billto_put(self, direction, order_id, address, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.orders_direction_order_id_billto_put(direction, order_id, address, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str direction: Direction of the order. Possible values: Incoming, Outgoing. (required)
        :param str order_id: ID of the order. (required)
        :param Address address:  (required)
        :return: Order
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.orders_direction_order_id_billto_put_with_http_info(direction, order_id, address, **kwargs)
        else:
            (data) = self.orders_direction_order_id_billto_put_with_http_info(direction, order_id, address, **kwargs)
            return data

    def orders_direction_order_id_billto_put_with_http_info(self, direction, order_id, address, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.orders_direction_order_id_billto_put_with_http_info(direction, order_id, address, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str direction: Direction of the order. Possible values: Incoming, Outgoing. (required)
        :param str order_id: ID of the order. (required)
        :param Address address:  (required)
        :return: Order
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['direction', 'order_id', 'address']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orders_direction_order_id_billto_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'direction' is set
        if ('direction' not in params) or (params['direction'] is None):
            raise ValueError("Missing the required parameter `direction` when calling `orders_direction_order_id_billto_put`")
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params) or (params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `orders_direction_order_id_billto_put`")
        # verify the required parameter 'address' is set
        if ('address' not in params) or (params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `orders_direction_order_id_billto_put`")

        resource_path = '/orders/{direction}/{orderID}/billto'.replace('{format}', 'json')
        path_params = {}
        if 'direction' in params:
            path_params['direction'] = params['direction']
        if 'order_id' in params:
            path_params['orderID'] = params['order_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'address' in params:
            body_params = params['address']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Order',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def orders_direction_order_id_cancel_post(self, direction, order_id, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.orders_direction_order_id_cancel_post(direction, order_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str direction: Direction of the order. Possible values: Incoming, Outgoing. (required)
        :param str order_id: ID of the order. (required)
        :return: Order
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.orders_direction_order_id_cancel_post_with_http_info(direction, order_id, **kwargs)
        else:
            (data) = self.orders_direction_order_id_cancel_post_with_http_info(direction, order_id, **kwargs)
            return data

    def orders_direction_order_id_cancel_post_with_http_info(self, direction, order_id, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.orders_direction_order_id_cancel_post_with_http_info(direction, order_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str direction: Direction of the order. Possible values: Incoming, Outgoing. (required)
        :param str order_id: ID of the order. (required)
        :return: Order
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['direction', 'order_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orders_direction_order_id_cancel_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'direction' is set
        if ('direction' not in params) or (params['direction'] is None):
            raise ValueError("Missing the required parameter `direction` when calling `orders_direction_order_id_cancel_post`")
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params) or (params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `orders_direction_order_id_cancel_post`")

        resource_path = '/orders/{direction}/{orderID}/cancel'.replace('{format}', 'json')
        path_params = {}
        if 'direction' in params:
            path_params['direction'] = params['direction']
        if 'order_id' in params:
            path_params['orderID'] = params['order_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Order',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def orders_direction_order_id_decline_post(self, direction, order_id, info, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.orders_direction_order_id_decline_post(direction, order_id, info, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str direction: Direction of the order. Possible values: Incoming, Outgoing. (required)
        :param str order_id: ID of the order. (required)
        :param OrderApprovalInfo info:  (required)
        :return: Order
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.orders_direction_order_id_decline_post_with_http_info(direction, order_id, info, **kwargs)
        else:
            (data) = self.orders_direction_order_id_decline_post_with_http_info(direction, order_id, info, **kwargs)
            return data

    def orders_direction_order_id_decline_post_with_http_info(self, direction, order_id, info, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.orders_direction_order_id_decline_post_with_http_info(direction, order_id, info, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str direction: Direction of the order. Possible values: Incoming, Outgoing. (required)
        :param str order_id: ID of the order. (required)
        :param OrderApprovalInfo info:  (required)
        :return: Order
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['direction', 'order_id', 'info']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orders_direction_order_id_decline_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'direction' is set
        if ('direction' not in params) or (params['direction'] is None):
            raise ValueError("Missing the required parameter `direction` when calling `orders_direction_order_id_decline_post`")
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params) or (params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `orders_direction_order_id_decline_post`")
        # verify the required parameter 'info' is set
        if ('info' not in params) or (params['info'] is None):
            raise ValueError("Missing the required parameter `info` when calling `orders_direction_order_id_decline_post`")

        resource_path = '/orders/{direction}/{orderID}/decline'.replace('{format}', 'json')
        path_params = {}
        if 'direction' in params:
            path_params['direction'] = params['direction']
        if 'order_id' in params:
            path_params['orderID'] = params['order_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'info' in params:
            body_params = params['info']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Order',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def orders_direction_order_id_delete(self, direction, order_id, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.orders_direction_order_id_delete(direction, order_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str direction: Direction of the order. Possible values: Incoming, Outgoing. (required)
        :param str order_id: ID of the order. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.orders_direction_order_id_delete_with_http_info(direction, order_id, **kwargs)
        else:
            (data) = self.orders_direction_order_id_delete_with_http_info(direction, order_id, **kwargs)
            return data

    def orders_direction_order_id_delete_with_http_info(self, direction, order_id, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.orders_direction_order_id_delete_with_http_info(direction, order_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str direction: Direction of the order. Possible values: Incoming, Outgoing. (required)
        :param str order_id: ID of the order. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['direction', 'order_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orders_direction_order_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'direction' is set
        if ('direction' not in params) or (params['direction'] is None):
            raise ValueError("Missing the required parameter `direction` when calling `orders_direction_order_id_delete`")
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params) or (params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `orders_direction_order_id_delete`")

        resource_path = '/orders/{direction}/{orderID}'.replace('{format}', 'json')
        path_params = {}
        if 'direction' in params:
            path_params['direction'] = params['direction']
        if 'order_id' in params:
            path_params['orderID'] = params['order_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def orders_direction_order_id_eligibleapprovers_get(self, direction, order_id, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.orders_direction_order_id_eligibleapprovers_get(direction, order_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str direction: Direction of the order. Possible values: Incoming, Outgoing. (required)
        :param str order_id: ID of the order. (required)
        :param str search: Search of the order.
        :param list[str] search_on: Search on of the order.
        :param list[str] sort_by: Sort by of the order.
        :param int page: Page of the order.
        :param int page_size: Page size of the order.
        :return: ListUser
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.orders_direction_order_id_eligibleapprovers_get_with_http_info(direction, order_id, **kwargs)
        else:
            (data) = self.orders_direction_order_id_eligibleapprovers_get_with_http_info(direction, order_id, **kwargs)
            return data

    def orders_direction_order_id_eligibleapprovers_get_with_http_info(self, direction, order_id, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.orders_direction_order_id_eligibleapprovers_get_with_http_info(direction, order_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str direction: Direction of the order. Possible values: Incoming, Outgoing. (required)
        :param str order_id: ID of the order. (required)
        :param str search: Search of the order.
        :param list[str] search_on: Search on of the order.
        :param list[str] sort_by: Sort by of the order.
        :param int page: Page of the order.
        :param int page_size: Page size of the order.
        :return: ListUser
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['direction', 'order_id', 'search', 'search_on', 'sort_by', 'page', 'page_size']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orders_direction_order_id_eligibleapprovers_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'direction' is set
        if ('direction' not in params) or (params['direction'] is None):
            raise ValueError("Missing the required parameter `direction` when calling `orders_direction_order_id_eligibleapprovers_get`")
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params) or (params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `orders_direction_order_id_eligibleapprovers_get`")

        resource_path = '/orders/{direction}/{orderID}/eligibleapprovers'.replace('{format}', 'json')
        path_params = {}
        if 'direction' in params:
            path_params['direction'] = params['direction']
        if 'order_id' in params:
            path_params['orderID'] = params['order_id']

        query_params = {}
        if 'search' in params:
            query_params['search'] = params['search']
        if 'search_on' in params:
            query_params['searchOn'] = params['search_on']
        if 'sort_by' in params:
            query_params['sortBy'] = params['sort_by']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'page_size' in params:
            query_params['pageSize'] = params['page_size']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ListUser',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def orders_direction_order_id_get(self, direction, order_id, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.orders_direction_order_id_get(direction, order_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str direction: Direction of the order. Possible values: Incoming, Outgoing. (required)
        :param str order_id: ID of the order. (required)
        :return: Order
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.orders_direction_order_id_get_with_http_info(direction, order_id, **kwargs)
        else:
            (data) = self.orders_direction_order_id_get_with_http_info(direction, order_id, **kwargs)
            return data

    def orders_direction_order_id_get_with_http_info(self, direction, order_id, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.orders_direction_order_id_get_with_http_info(direction, order_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str direction: Direction of the order. Possible values: Incoming, Outgoing. (required)
        :param str order_id: ID of the order. (required)
        :return: Order
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['direction', 'order_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orders_direction_order_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'direction' is set
        if ('direction' not in params) or (params['direction'] is None):
            raise ValueError("Missing the required parameter `direction` when calling `orders_direction_order_id_get`")
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params) or (params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `orders_direction_order_id_get`")

        resource_path = '/orders/{direction}/{orderID}'.replace('{format}', 'json')
        path_params = {}
        if 'direction' in params:
            path_params['direction'] = params['direction']
        if 'order_id' in params:
            path_params['orderID'] = params['order_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Order',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def orders_direction_order_id_patch(self, direction, order_id, partial_order, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.orders_direction_order_id_patch(direction, order_id, partial_order, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str direction: Direction of the order. Possible values: Incoming, Outgoing. (required)
        :param str order_id: ID of the order. (required)
        :param Order partial_order:  (required)
        :return: Order
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.orders_direction_order_id_patch_with_http_info(direction, order_id, partial_order, **kwargs)
        else:
            (data) = self.orders_direction_order_id_patch_with_http_info(direction, order_id, partial_order, **kwargs)
            return data

    def orders_direction_order_id_patch_with_http_info(self, direction, order_id, partial_order, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.orders_direction_order_id_patch_with_http_info(direction, order_id, partial_order, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str direction: Direction of the order. Possible values: Incoming, Outgoing. (required)
        :param str order_id: ID of the order. (required)
        :param Order partial_order:  (required)
        :return: Order
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['direction', 'order_id', 'partial_order']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orders_direction_order_id_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'direction' is set
        if ('direction' not in params) or (params['direction'] is None):
            raise ValueError("Missing the required parameter `direction` when calling `orders_direction_order_id_patch`")
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params) or (params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `orders_direction_order_id_patch`")
        # verify the required parameter 'partial_order' is set
        if ('partial_order' not in params) or (params['partial_order'] is None):
            raise ValueError("Missing the required parameter `partial_order` when calling `orders_direction_order_id_patch`")

        resource_path = '/orders/{direction}/{orderID}'.replace('{format}', 'json')
        path_params = {}
        if 'direction' in params:
            path_params['direction'] = params['direction']
        if 'order_id' in params:
            path_params['orderID'] = params['order_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'partial_order' in params:
            body_params = params['partial_order']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'PATCH',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Order',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def orders_direction_order_id_promotions_get(self, direction, order_id, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.orders_direction_order_id_promotions_get(direction, order_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str direction: Direction of the order. Possible values: Incoming, Outgoing. (required)
        :param str order_id: ID of the order. (required)
        :param str search: Search of the order.
        :param list[str] search_on: Search on of the order.
        :param list[str] sort_by: Sort by of the order.
        :param int page: Page of the order.
        :param int page_size: Page size of the order.
        :return: ListOrderPromotion
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.orders_direction_order_id_promotions_get_with_http_info(direction, order_id, **kwargs)
        else:
            (data) = self.orders_direction_order_id_promotions_get_with_http_info(direction, order_id, **kwargs)
            return data

    def orders_direction_order_id_promotions_get_with_http_info(self, direction, order_id, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.orders_direction_order_id_promotions_get_with_http_info(direction, order_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str direction: Direction of the order. Possible values: Incoming, Outgoing. (required)
        :param str order_id: ID of the order. (required)
        :param str search: Search of the order.
        :param list[str] search_on: Search on of the order.
        :param list[str] sort_by: Sort by of the order.
        :param int page: Page of the order.
        :param int page_size: Page size of the order.
        :return: ListOrderPromotion
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['direction', 'order_id', 'search', 'search_on', 'sort_by', 'page', 'page_size']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orders_direction_order_id_promotions_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'direction' is set
        if ('direction' not in params) or (params['direction'] is None):
            raise ValueError("Missing the required parameter `direction` when calling `orders_direction_order_id_promotions_get`")
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params) or (params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `orders_direction_order_id_promotions_get`")

        resource_path = '/orders/{direction}/{orderID}/promotions'.replace('{format}', 'json')
        path_params = {}
        if 'direction' in params:
            path_params['direction'] = params['direction']
        if 'order_id' in params:
            path_params['orderID'] = params['order_id']

        query_params = {}
        if 'search' in params:
            query_params['search'] = params['search']
        if 'search_on' in params:
            query_params['searchOn'] = params['search_on']
        if 'sort_by' in params:
            query_params['sortBy'] = params['sort_by']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'page_size' in params:
            query_params['pageSize'] = params['page_size']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ListOrderPromotion',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def orders_direction_order_id_promotions_promo_code_delete(self, direction, order_id, promo_code, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.orders_direction_order_id_promotions_promo_code_delete(direction, order_id, promo_code, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str direction: Direction of the order. Possible values: Incoming, Outgoing. (required)
        :param str order_id: ID of the order. (required)
        :param str promo_code: Promo code of the order. (required)
        :return: Order
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.orders_direction_order_id_promotions_promo_code_delete_with_http_info(direction, order_id, promo_code, **kwargs)
        else:
            (data) = self.orders_direction_order_id_promotions_promo_code_delete_with_http_info(direction, order_id, promo_code, **kwargs)
            return data

    def orders_direction_order_id_promotions_promo_code_delete_with_http_info(self, direction, order_id, promo_code, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.orders_direction_order_id_promotions_promo_code_delete_with_http_info(direction, order_id, promo_code, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str direction: Direction of the order. Possible values: Incoming, Outgoing. (required)
        :param str order_id: ID of the order. (required)
        :param str promo_code: Promo code of the order. (required)
        :return: Order
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['direction', 'order_id', 'promo_code']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orders_direction_order_id_promotions_promo_code_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'direction' is set
        if ('direction' not in params) or (params['direction'] is None):
            raise ValueError("Missing the required parameter `direction` when calling `orders_direction_order_id_promotions_promo_code_delete`")
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params) or (params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `orders_direction_order_id_promotions_promo_code_delete`")
        # verify the required parameter 'promo_code' is set
        if ('promo_code' not in params) or (params['promo_code'] is None):
            raise ValueError("Missing the required parameter `promo_code` when calling `orders_direction_order_id_promotions_promo_code_delete`")

        resource_path = '/orders/{direction}/{orderID}/promotions/{promoCode}'.replace('{format}', 'json')
        path_params = {}
        if 'direction' in params:
            path_params['direction'] = params['direction']
        if 'order_id' in params:
            path_params['orderID'] = params['order_id']
        if 'promo_code' in params:
            path_params['promoCode'] = params['promo_code']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Order',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def orders_direction_order_id_promotions_promo_code_post(self, direction, order_id, promo_code, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.orders_direction_order_id_promotions_promo_code_post(direction, order_id, promo_code, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str direction: Direction of the order. Possible values: Incoming, Outgoing. (required)
        :param str order_id: ID of the order. (required)
        :param str promo_code: Promo code of the order. (required)
        :return: Promotion
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.orders_direction_order_id_promotions_promo_code_post_with_http_info(direction, order_id, promo_code, **kwargs)
        else:
            (data) = self.orders_direction_order_id_promotions_promo_code_post_with_http_info(direction, order_id, promo_code, **kwargs)
            return data

    def orders_direction_order_id_promotions_promo_code_post_with_http_info(self, direction, order_id, promo_code, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.orders_direction_order_id_promotions_promo_code_post_with_http_info(direction, order_id, promo_code, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str direction: Direction of the order. Possible values: Incoming, Outgoing. (required)
        :param str order_id: ID of the order. (required)
        :param str promo_code: Promo code of the order. (required)
        :return: Promotion
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['direction', 'order_id', 'promo_code']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orders_direction_order_id_promotions_promo_code_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'direction' is set
        if ('direction' not in params) or (params['direction'] is None):
            raise ValueError("Missing the required parameter `direction` when calling `orders_direction_order_id_promotions_promo_code_post`")
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params) or (params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `orders_direction_order_id_promotions_promo_code_post`")
        # verify the required parameter 'promo_code' is set
        if ('promo_code' not in params) or (params['promo_code'] is None):
            raise ValueError("Missing the required parameter `promo_code` when calling `orders_direction_order_id_promotions_promo_code_post`")

        resource_path = '/orders/{direction}/{orderID}/promotions/{promoCode}'.replace('{format}', 'json')
        path_params = {}
        if 'direction' in params:
            path_params['direction'] = params['direction']
        if 'order_id' in params:
            path_params['orderID'] = params['order_id']
        if 'promo_code' in params:
            path_params['promoCode'] = params['promo_code']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Promotion',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def orders_direction_order_id_put(self, direction, order_id, order, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.orders_direction_order_id_put(direction, order_id, order, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str direction: Direction of the order. Possible values: Incoming, Outgoing. (required)
        :param str order_id: ID of the order. (required)
        :param Order order:  (required)
        :return: Order
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.orders_direction_order_id_put_with_http_info(direction, order_id, order, **kwargs)
        else:
            (data) = self.orders_direction_order_id_put_with_http_info(direction, order_id, order, **kwargs)
            return data

    def orders_direction_order_id_put_with_http_info(self, direction, order_id, order, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.orders_direction_order_id_put_with_http_info(direction, order_id, order, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str direction: Direction of the order. Possible values: Incoming, Outgoing. (required)
        :param str order_id: ID of the order. (required)
        :param Order order:  (required)
        :return: Order
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['direction', 'order_id', 'order']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orders_direction_order_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'direction' is set
        if ('direction' not in params) or (params['direction'] is None):
            raise ValueError("Missing the required parameter `direction` when calling `orders_direction_order_id_put`")
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params) or (params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `orders_direction_order_id_put`")
        # verify the required parameter 'order' is set
        if ('order' not in params) or (params['order'] is None):
            raise ValueError("Missing the required parameter `order` when calling `orders_direction_order_id_put`")

        resource_path = '/orders/{direction}/{orderID}'.replace('{format}', 'json')
        path_params = {}
        if 'direction' in params:
            path_params['direction'] = params['direction']
        if 'order_id' in params:
            path_params['orderID'] = params['order_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'order' in params:
            body_params = params['order']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Order',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def orders_direction_order_id_ship_post(self, direction, order_id, shipment, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.orders_direction_order_id_ship_post(direction, order_id, shipment, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str direction: Direction of the order. Possible values: Incoming, Outgoing. (required)
        :param str order_id: ID of the order. (required)
        :param BuyerShipment shipment:  (required)
        :return: Order
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.orders_direction_order_id_ship_post_with_http_info(direction, order_id, shipment, **kwargs)
        else:
            (data) = self.orders_direction_order_id_ship_post_with_http_info(direction, order_id, shipment, **kwargs)
            return data

    def orders_direction_order_id_ship_post_with_http_info(self, direction, order_id, shipment, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.orders_direction_order_id_ship_post_with_http_info(direction, order_id, shipment, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str direction: Direction of the order. Possible values: Incoming, Outgoing. (required)
        :param str order_id: ID of the order. (required)
        :param BuyerShipment shipment:  (required)
        :return: Order
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['direction', 'order_id', 'shipment']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orders_direction_order_id_ship_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'direction' is set
        if ('direction' not in params) or (params['direction'] is None):
            raise ValueError("Missing the required parameter `direction` when calling `orders_direction_order_id_ship_post`")
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params) or (params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `orders_direction_order_id_ship_post`")
        # verify the required parameter 'shipment' is set
        if ('shipment' not in params) or (params['shipment'] is None):
            raise ValueError("Missing the required parameter `shipment` when calling `orders_direction_order_id_ship_post`")

        resource_path = '/orders/{direction}/{orderID}/ship'.replace('{format}', 'json')
        path_params = {}
        if 'direction' in params:
            path_params['direction'] = params['direction']
        if 'order_id' in params:
            path_params['orderID'] = params['order_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'shipment' in params:
            body_params = params['shipment']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Order',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def orders_direction_order_id_shipto_patch(self, direction, order_id, address, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.orders_direction_order_id_shipto_patch(direction, order_id, address, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str direction: Direction of the order. Possible values: Incoming, Outgoing. (required)
        :param str order_id: ID of the order. (required)
        :param Address address:  (required)
        :return: Order
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.orders_direction_order_id_shipto_patch_with_http_info(direction, order_id, address, **kwargs)
        else:
            (data) = self.orders_direction_order_id_shipto_patch_with_http_info(direction, order_id, address, **kwargs)
            return data

    def orders_direction_order_id_shipto_patch_with_http_info(self, direction, order_id, address, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.orders_direction_order_id_shipto_patch_with_http_info(direction, order_id, address, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str direction: Direction of the order. Possible values: Incoming, Outgoing. (required)
        :param str order_id: ID of the order. (required)
        :param Address address:  (required)
        :return: Order
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['direction', 'order_id', 'address']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orders_direction_order_id_shipto_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'direction' is set
        if ('direction' not in params) or (params['direction'] is None):
            raise ValueError("Missing the required parameter `direction` when calling `orders_direction_order_id_shipto_patch`")
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params) or (params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `orders_direction_order_id_shipto_patch`")
        # verify the required parameter 'address' is set
        if ('address' not in params) or (params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `orders_direction_order_id_shipto_patch`")

        resource_path = '/orders/{direction}/{orderID}/shipto'.replace('{format}', 'json')
        path_params = {}
        if 'direction' in params:
            path_params['direction'] = params['direction']
        if 'order_id' in params:
            path_params['orderID'] = params['order_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'address' in params:
            body_params = params['address']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'PATCH',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Order',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def orders_direction_order_id_shipto_put(self, direction, order_id, address, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.orders_direction_order_id_shipto_put(direction, order_id, address, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str direction: Direction of the order. Possible values: Incoming, Outgoing. (required)
        :param str order_id: ID of the order. (required)
        :param Address address:  (required)
        :return: Order
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.orders_direction_order_id_shipto_put_with_http_info(direction, order_id, address, **kwargs)
        else:
            (data) = self.orders_direction_order_id_shipto_put_with_http_info(direction, order_id, address, **kwargs)
            return data

    def orders_direction_order_id_shipto_put_with_http_info(self, direction, order_id, address, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.orders_direction_order_id_shipto_put_with_http_info(direction, order_id, address, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str direction: Direction of the order. Possible values: Incoming, Outgoing. (required)
        :param str order_id: ID of the order. (required)
        :param Address address:  (required)
        :return: Order
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['direction', 'order_id', 'address']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orders_direction_order_id_shipto_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'direction' is set
        if ('direction' not in params) or (params['direction'] is None):
            raise ValueError("Missing the required parameter `direction` when calling `orders_direction_order_id_shipto_put`")
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params) or (params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `orders_direction_order_id_shipto_put`")
        # verify the required parameter 'address' is set
        if ('address' not in params) or (params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `orders_direction_order_id_shipto_put`")

        resource_path = '/orders/{direction}/{orderID}/shipto'.replace('{format}', 'json')
        path_params = {}
        if 'direction' in params:
            path_params['direction'] = params['direction']
        if 'order_id' in params:
            path_params['orderID'] = params['order_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'address' in params:
            body_params = params['address']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Order',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def orders_direction_order_id_submit_post(self, direction, order_id, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.orders_direction_order_id_submit_post(direction, order_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str direction: Direction of the order. Possible values: Incoming, Outgoing. (required)
        :param str order_id: ID of the order. (required)
        :return: Order
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.orders_direction_order_id_submit_post_with_http_info(direction, order_id, **kwargs)
        else:
            (data) = self.orders_direction_order_id_submit_post_with_http_info(direction, order_id, **kwargs)
            return data

    def orders_direction_order_id_submit_post_with_http_info(self, direction, order_id, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.orders_direction_order_id_submit_post_with_http_info(direction, order_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str direction: Direction of the order. Possible values: Incoming, Outgoing. (required)
        :param str order_id: ID of the order. (required)
        :return: Order
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['direction', 'order_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orders_direction_order_id_submit_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'direction' is set
        if ('direction' not in params) or (params['direction'] is None):
            raise ValueError("Missing the required parameter `direction` when calling `orders_direction_order_id_submit_post`")
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params) or (params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `orders_direction_order_id_submit_post`")

        resource_path = '/orders/{direction}/{orderID}/submit'.replace('{format}', 'json')
        path_params = {}
        if 'direction' in params:
            path_params['direction'] = params['direction']
        if 'order_id' in params:
            path_params['orderID'] = params['order_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Order',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def orders_direction_post(self, direction, order, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.orders_direction_post(direction, order, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str direction: Direction of the order. Possible values: Incoming, Outgoing. (required)
        :param Order order:  (required)
        :return: Order
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.orders_direction_post_with_http_info(direction, order, **kwargs)
        else:
            (data) = self.orders_direction_post_with_http_info(direction, order, **kwargs)
            return data

    def orders_direction_post_with_http_info(self, direction, order, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.orders_direction_post_with_http_info(direction, order, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str direction: Direction of the order. Possible values: Incoming, Outgoing. (required)
        :param Order order:  (required)
        :return: Order
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['direction', 'order']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orders_direction_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'direction' is set
        if ('direction' not in params) or (params['direction'] is None):
            raise ValueError("Missing the required parameter `direction` when calling `orders_direction_post`")
        # verify the required parameter 'order' is set
        if ('order' not in params) or (params['order'] is None):
            raise ValueError("Missing the required parameter `order` when calling `orders_direction_post`")

        resource_path = '/orders/{direction}'.replace('{format}', 'json')
        path_params = {}
        if 'direction' in params:
            path_params['direction'] = params['direction']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'order' in params:
            body_params = params['order']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Order',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
