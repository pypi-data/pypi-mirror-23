# coding: utf-8

"""
    OrderCloud

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0
    Contact: ordercloud@four51.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class LineItemApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def orders_direction_order_id_lineitems_get(self, direction, order_id, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.orders_direction_order_id_lineitems_get(direction, order_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str direction: Direction of the line item. Possible values: Incoming, Outgoing. (required)
        :param str order_id: ID of the order. (required)
        :param str search: Search of the line item.
        :param list[str] search_on: Search on of the line item.
        :param list[str] sort_by: Sort by of the line item.
        :param int page: Page of the line item.
        :param int page_size: Page size of the line item.
        :return: ListLineItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.orders_direction_order_id_lineitems_get_with_http_info(direction, order_id, **kwargs)
        else:
            (data) = self.orders_direction_order_id_lineitems_get_with_http_info(direction, order_id, **kwargs)
            return data

    def orders_direction_order_id_lineitems_get_with_http_info(self, direction, order_id, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.orders_direction_order_id_lineitems_get_with_http_info(direction, order_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str direction: Direction of the line item. Possible values: Incoming, Outgoing. (required)
        :param str order_id: ID of the order. (required)
        :param str search: Search of the line item.
        :param list[str] search_on: Search on of the line item.
        :param list[str] sort_by: Sort by of the line item.
        :param int page: Page of the line item.
        :param int page_size: Page size of the line item.
        :return: ListLineItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['direction', 'order_id', 'search', 'search_on', 'sort_by', 'page', 'page_size']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orders_direction_order_id_lineitems_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'direction' is set
        if ('direction' not in params) or (params['direction'] is None):
            raise ValueError("Missing the required parameter `direction` when calling `orders_direction_order_id_lineitems_get`")
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params) or (params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `orders_direction_order_id_lineitems_get`")

        resource_path = '/orders/{direction}/{orderID}/lineitems'.replace('{format}', 'json')
        path_params = {}
        if 'direction' in params:
            path_params['direction'] = params['direction']
        if 'order_id' in params:
            path_params['orderID'] = params['order_id']

        query_params = {}
        if 'search' in params:
            query_params['search'] = params['search']
        if 'search_on' in params:
            query_params['searchOn'] = params['search_on']
        if 'sort_by' in params:
            query_params['sortBy'] = params['sort_by']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'page_size' in params:
            query_params['pageSize'] = params['page_size']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ListLineItem',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def orders_direction_order_id_lineitems_line_item_id_delete(self, direction, order_id, line_item_id, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.orders_direction_order_id_lineitems_line_item_id_delete(direction, order_id, line_item_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str direction: Direction of the line item. Possible values: Incoming, Outgoing. (required)
        :param str order_id: ID of the order. (required)
        :param str line_item_id: ID of the line item. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.orders_direction_order_id_lineitems_line_item_id_delete_with_http_info(direction, order_id, line_item_id, **kwargs)
        else:
            (data) = self.orders_direction_order_id_lineitems_line_item_id_delete_with_http_info(direction, order_id, line_item_id, **kwargs)
            return data

    def orders_direction_order_id_lineitems_line_item_id_delete_with_http_info(self, direction, order_id, line_item_id, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.orders_direction_order_id_lineitems_line_item_id_delete_with_http_info(direction, order_id, line_item_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str direction: Direction of the line item. Possible values: Incoming, Outgoing. (required)
        :param str order_id: ID of the order. (required)
        :param str line_item_id: ID of the line item. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['direction', 'order_id', 'line_item_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orders_direction_order_id_lineitems_line_item_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'direction' is set
        if ('direction' not in params) or (params['direction'] is None):
            raise ValueError("Missing the required parameter `direction` when calling `orders_direction_order_id_lineitems_line_item_id_delete`")
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params) or (params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `orders_direction_order_id_lineitems_line_item_id_delete`")
        # verify the required parameter 'line_item_id' is set
        if ('line_item_id' not in params) or (params['line_item_id'] is None):
            raise ValueError("Missing the required parameter `line_item_id` when calling `orders_direction_order_id_lineitems_line_item_id_delete`")

        resource_path = '/orders/{direction}/{orderID}/lineitems/{lineItemID}'.replace('{format}', 'json')
        path_params = {}
        if 'direction' in params:
            path_params['direction'] = params['direction']
        if 'order_id' in params:
            path_params['orderID'] = params['order_id']
        if 'line_item_id' in params:
            path_params['lineItemID'] = params['line_item_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def orders_direction_order_id_lineitems_line_item_id_get(self, direction, order_id, line_item_id, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.orders_direction_order_id_lineitems_line_item_id_get(direction, order_id, line_item_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str direction: Direction of the line item. Possible values: Incoming, Outgoing. (required)
        :param str order_id: ID of the order. (required)
        :param str line_item_id: ID of the line item. (required)
        :return: LineItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.orders_direction_order_id_lineitems_line_item_id_get_with_http_info(direction, order_id, line_item_id, **kwargs)
        else:
            (data) = self.orders_direction_order_id_lineitems_line_item_id_get_with_http_info(direction, order_id, line_item_id, **kwargs)
            return data

    def orders_direction_order_id_lineitems_line_item_id_get_with_http_info(self, direction, order_id, line_item_id, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.orders_direction_order_id_lineitems_line_item_id_get_with_http_info(direction, order_id, line_item_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str direction: Direction of the line item. Possible values: Incoming, Outgoing. (required)
        :param str order_id: ID of the order. (required)
        :param str line_item_id: ID of the line item. (required)
        :return: LineItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['direction', 'order_id', 'line_item_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orders_direction_order_id_lineitems_line_item_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'direction' is set
        if ('direction' not in params) or (params['direction'] is None):
            raise ValueError("Missing the required parameter `direction` when calling `orders_direction_order_id_lineitems_line_item_id_get`")
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params) or (params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `orders_direction_order_id_lineitems_line_item_id_get`")
        # verify the required parameter 'line_item_id' is set
        if ('line_item_id' not in params) or (params['line_item_id'] is None):
            raise ValueError("Missing the required parameter `line_item_id` when calling `orders_direction_order_id_lineitems_line_item_id_get`")

        resource_path = '/orders/{direction}/{orderID}/lineitems/{lineItemID}'.replace('{format}', 'json')
        path_params = {}
        if 'direction' in params:
            path_params['direction'] = params['direction']
        if 'order_id' in params:
            path_params['orderID'] = params['order_id']
        if 'line_item_id' in params:
            path_params['lineItemID'] = params['line_item_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='LineItem',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def orders_direction_order_id_lineitems_line_item_id_patch(self, direction, order_id, line_item_id, partial_line_item, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.orders_direction_order_id_lineitems_line_item_id_patch(direction, order_id, line_item_id, partial_line_item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str direction: Direction of the line item. Possible values: Incoming, Outgoing. (required)
        :param str order_id: ID of the order. (required)
        :param str line_item_id: ID of the line item. (required)
        :param LineItem partial_line_item:  (required)
        :return: LineItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.orders_direction_order_id_lineitems_line_item_id_patch_with_http_info(direction, order_id, line_item_id, partial_line_item, **kwargs)
        else:
            (data) = self.orders_direction_order_id_lineitems_line_item_id_patch_with_http_info(direction, order_id, line_item_id, partial_line_item, **kwargs)
            return data

    def orders_direction_order_id_lineitems_line_item_id_patch_with_http_info(self, direction, order_id, line_item_id, partial_line_item, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.orders_direction_order_id_lineitems_line_item_id_patch_with_http_info(direction, order_id, line_item_id, partial_line_item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str direction: Direction of the line item. Possible values: Incoming, Outgoing. (required)
        :param str order_id: ID of the order. (required)
        :param str line_item_id: ID of the line item. (required)
        :param LineItem partial_line_item:  (required)
        :return: LineItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['direction', 'order_id', 'line_item_id', 'partial_line_item']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orders_direction_order_id_lineitems_line_item_id_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'direction' is set
        if ('direction' not in params) or (params['direction'] is None):
            raise ValueError("Missing the required parameter `direction` when calling `orders_direction_order_id_lineitems_line_item_id_patch`")
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params) or (params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `orders_direction_order_id_lineitems_line_item_id_patch`")
        # verify the required parameter 'line_item_id' is set
        if ('line_item_id' not in params) or (params['line_item_id'] is None):
            raise ValueError("Missing the required parameter `line_item_id` when calling `orders_direction_order_id_lineitems_line_item_id_patch`")
        # verify the required parameter 'partial_line_item' is set
        if ('partial_line_item' not in params) or (params['partial_line_item'] is None):
            raise ValueError("Missing the required parameter `partial_line_item` when calling `orders_direction_order_id_lineitems_line_item_id_patch`")

        resource_path = '/orders/{direction}/{orderID}/lineitems/{lineItemID}'.replace('{format}', 'json')
        path_params = {}
        if 'direction' in params:
            path_params['direction'] = params['direction']
        if 'order_id' in params:
            path_params['orderID'] = params['order_id']
        if 'line_item_id' in params:
            path_params['lineItemID'] = params['line_item_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'partial_line_item' in params:
            body_params = params['partial_line_item']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'PATCH',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='LineItem',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def orders_direction_order_id_lineitems_line_item_id_put(self, direction, order_id, line_item_id, line_item, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.orders_direction_order_id_lineitems_line_item_id_put(direction, order_id, line_item_id, line_item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str direction: Direction of the line item. Possible values: Incoming, Outgoing. (required)
        :param str order_id: ID of the order. (required)
        :param str line_item_id: ID of the line item. (required)
        :param LineItem line_item:  (required)
        :return: LineItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.orders_direction_order_id_lineitems_line_item_id_put_with_http_info(direction, order_id, line_item_id, line_item, **kwargs)
        else:
            (data) = self.orders_direction_order_id_lineitems_line_item_id_put_with_http_info(direction, order_id, line_item_id, line_item, **kwargs)
            return data

    def orders_direction_order_id_lineitems_line_item_id_put_with_http_info(self, direction, order_id, line_item_id, line_item, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.orders_direction_order_id_lineitems_line_item_id_put_with_http_info(direction, order_id, line_item_id, line_item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str direction: Direction of the line item. Possible values: Incoming, Outgoing. (required)
        :param str order_id: ID of the order. (required)
        :param str line_item_id: ID of the line item. (required)
        :param LineItem line_item:  (required)
        :return: LineItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['direction', 'order_id', 'line_item_id', 'line_item']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orders_direction_order_id_lineitems_line_item_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'direction' is set
        if ('direction' not in params) or (params['direction'] is None):
            raise ValueError("Missing the required parameter `direction` when calling `orders_direction_order_id_lineitems_line_item_id_put`")
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params) or (params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `orders_direction_order_id_lineitems_line_item_id_put`")
        # verify the required parameter 'line_item_id' is set
        if ('line_item_id' not in params) or (params['line_item_id'] is None):
            raise ValueError("Missing the required parameter `line_item_id` when calling `orders_direction_order_id_lineitems_line_item_id_put`")
        # verify the required parameter 'line_item' is set
        if ('line_item' not in params) or (params['line_item'] is None):
            raise ValueError("Missing the required parameter `line_item` when calling `orders_direction_order_id_lineitems_line_item_id_put`")

        resource_path = '/orders/{direction}/{orderID}/lineitems/{lineItemID}'.replace('{format}', 'json')
        path_params = {}
        if 'direction' in params:
            path_params['direction'] = params['direction']
        if 'order_id' in params:
            path_params['orderID'] = params['order_id']
        if 'line_item_id' in params:
            path_params['lineItemID'] = params['line_item_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'line_item' in params:
            body_params = params['line_item']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='LineItem',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def orders_direction_order_id_lineitems_line_item_id_shipto_patch(self, direction, order_id, line_item_id, partial_address, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.orders_direction_order_id_lineitems_line_item_id_shipto_patch(direction, order_id, line_item_id, partial_address, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str direction: Direction of the line item. Possible values: Incoming, Outgoing. (required)
        :param str order_id: ID of the order. (required)
        :param str line_item_id: ID of the line item. (required)
        :param Address partial_address:  (required)
        :return: LineItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.orders_direction_order_id_lineitems_line_item_id_shipto_patch_with_http_info(direction, order_id, line_item_id, partial_address, **kwargs)
        else:
            (data) = self.orders_direction_order_id_lineitems_line_item_id_shipto_patch_with_http_info(direction, order_id, line_item_id, partial_address, **kwargs)
            return data

    def orders_direction_order_id_lineitems_line_item_id_shipto_patch_with_http_info(self, direction, order_id, line_item_id, partial_address, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.orders_direction_order_id_lineitems_line_item_id_shipto_patch_with_http_info(direction, order_id, line_item_id, partial_address, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str direction: Direction of the line item. Possible values: Incoming, Outgoing. (required)
        :param str order_id: ID of the order. (required)
        :param str line_item_id: ID of the line item. (required)
        :param Address partial_address:  (required)
        :return: LineItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['direction', 'order_id', 'line_item_id', 'partial_address']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orders_direction_order_id_lineitems_line_item_id_shipto_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'direction' is set
        if ('direction' not in params) or (params['direction'] is None):
            raise ValueError("Missing the required parameter `direction` when calling `orders_direction_order_id_lineitems_line_item_id_shipto_patch`")
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params) or (params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `orders_direction_order_id_lineitems_line_item_id_shipto_patch`")
        # verify the required parameter 'line_item_id' is set
        if ('line_item_id' not in params) or (params['line_item_id'] is None):
            raise ValueError("Missing the required parameter `line_item_id` when calling `orders_direction_order_id_lineitems_line_item_id_shipto_patch`")
        # verify the required parameter 'partial_address' is set
        if ('partial_address' not in params) or (params['partial_address'] is None):
            raise ValueError("Missing the required parameter `partial_address` when calling `orders_direction_order_id_lineitems_line_item_id_shipto_patch`")

        resource_path = '/orders/{direction}/{orderID}/lineitems/{lineItemID}/shipto'.replace('{format}', 'json')
        path_params = {}
        if 'direction' in params:
            path_params['direction'] = params['direction']
        if 'order_id' in params:
            path_params['orderID'] = params['order_id']
        if 'line_item_id' in params:
            path_params['lineItemID'] = params['line_item_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'partial_address' in params:
            body_params = params['partial_address']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'PATCH',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='LineItem',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def orders_direction_order_id_lineitems_line_item_id_shipto_put(self, direction, order_id, line_item_id, address, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.orders_direction_order_id_lineitems_line_item_id_shipto_put(direction, order_id, line_item_id, address, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str direction: Direction of the line item. Possible values: Incoming, Outgoing. (required)
        :param str order_id: ID of the order. (required)
        :param str line_item_id: ID of the line item. (required)
        :param Address address:  (required)
        :return: LineItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.orders_direction_order_id_lineitems_line_item_id_shipto_put_with_http_info(direction, order_id, line_item_id, address, **kwargs)
        else:
            (data) = self.orders_direction_order_id_lineitems_line_item_id_shipto_put_with_http_info(direction, order_id, line_item_id, address, **kwargs)
            return data

    def orders_direction_order_id_lineitems_line_item_id_shipto_put_with_http_info(self, direction, order_id, line_item_id, address, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.orders_direction_order_id_lineitems_line_item_id_shipto_put_with_http_info(direction, order_id, line_item_id, address, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str direction: Direction of the line item. Possible values: Incoming, Outgoing. (required)
        :param str order_id: ID of the order. (required)
        :param str line_item_id: ID of the line item. (required)
        :param Address address:  (required)
        :return: LineItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['direction', 'order_id', 'line_item_id', 'address']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orders_direction_order_id_lineitems_line_item_id_shipto_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'direction' is set
        if ('direction' not in params) or (params['direction'] is None):
            raise ValueError("Missing the required parameter `direction` when calling `orders_direction_order_id_lineitems_line_item_id_shipto_put`")
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params) or (params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `orders_direction_order_id_lineitems_line_item_id_shipto_put`")
        # verify the required parameter 'line_item_id' is set
        if ('line_item_id' not in params) or (params['line_item_id'] is None):
            raise ValueError("Missing the required parameter `line_item_id` when calling `orders_direction_order_id_lineitems_line_item_id_shipto_put`")
        # verify the required parameter 'address' is set
        if ('address' not in params) or (params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `orders_direction_order_id_lineitems_line_item_id_shipto_put`")

        resource_path = '/orders/{direction}/{orderID}/lineitems/{lineItemID}/shipto'.replace('{format}', 'json')
        path_params = {}
        if 'direction' in params:
            path_params['direction'] = params['direction']
        if 'order_id' in params:
            path_params['orderID'] = params['order_id']
        if 'line_item_id' in params:
            path_params['lineItemID'] = params['line_item_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'address' in params:
            body_params = params['address']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='LineItem',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def orders_direction_order_id_lineitems_post(self, direction, order_id, line_item, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.orders_direction_order_id_lineitems_post(direction, order_id, line_item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str direction: Direction of the line item. Possible values: Incoming, Outgoing. (required)
        :param str order_id: ID of the order. (required)
        :param LineItem line_item:  (required)
        :return: LineItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.orders_direction_order_id_lineitems_post_with_http_info(direction, order_id, line_item, **kwargs)
        else:
            (data) = self.orders_direction_order_id_lineitems_post_with_http_info(direction, order_id, line_item, **kwargs)
            return data

    def orders_direction_order_id_lineitems_post_with_http_info(self, direction, order_id, line_item, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.orders_direction_order_id_lineitems_post_with_http_info(direction, order_id, line_item, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str direction: Direction of the line item. Possible values: Incoming, Outgoing. (required)
        :param str order_id: ID of the order. (required)
        :param LineItem line_item:  (required)
        :return: LineItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['direction', 'order_id', 'line_item']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orders_direction_order_id_lineitems_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'direction' is set
        if ('direction' not in params) or (params['direction'] is None):
            raise ValueError("Missing the required parameter `direction` when calling `orders_direction_order_id_lineitems_post`")
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params) or (params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `orders_direction_order_id_lineitems_post`")
        # verify the required parameter 'line_item' is set
        if ('line_item' not in params) or (params['line_item'] is None):
            raise ValueError("Missing the required parameter `line_item` when calling `orders_direction_order_id_lineitems_post`")

        resource_path = '/orders/{direction}/{orderID}/lineitems'.replace('{format}', 'json')
        path_params = {}
        if 'direction' in params:
            path_params['direction'] = params['direction']
        if 'order_id' in params:
            path_params['orderID'] = params['order_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'line_item' in params:
            body_params = params['line_item']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/plain; charset=utf-8'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='LineItem',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
