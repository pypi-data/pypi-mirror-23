# coding: utf-8

"""
    Nucleus REST API


    OpenAPI spec version: 0.4.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class ViewTypeUpdate(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name=None, update_task=None, triggers=None, settings_spec=None):
        """
        ViewTypeUpdate - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'update_task': 'ViewTypeUpdateTask',
            'triggers': 'list[ViewTypeTrigger]',
            'settings_spec': 'SettingsSpec'
        }

        self.attribute_map = {
            'name': 'name',
            'update_task': 'update_task',
            'triggers': 'triggers',
            'settings_spec': 'settings_spec'
        }

        self._name = name
        self._update_task = update_task
        self._triggers = triggers
        self._settings_spec = settings_spec

    @property
    def name(self):
        """
        Gets the name of this ViewTypeUpdate.


        :return: The name of this ViewTypeUpdate.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ViewTypeUpdate.


        :param name: The name of this ViewTypeUpdate.
        :type: str
        """

        self._name = name

    @property
    def update_task(self):
        """
        Gets the update_task of this ViewTypeUpdate.


        :return: The update_task of this ViewTypeUpdate.
        :rtype: ViewTypeUpdateTask
        """
        return self._update_task

    @update_task.setter
    def update_task(self, update_task):
        """
        Sets the update_task of this ViewTypeUpdate.


        :param update_task: The update_task of this ViewTypeUpdate.
        :type: ViewTypeUpdateTask
        """

        self._update_task = update_task

    @property
    def triggers(self):
        """
        Gets the triggers of this ViewTypeUpdate.


        :return: The triggers of this ViewTypeUpdate.
        :rtype: list[ViewTypeTrigger]
        """
        return self._triggers

    @triggers.setter
    def triggers(self, triggers):
        """
        Sets the triggers of this ViewTypeUpdate.


        :param triggers: The triggers of this ViewTypeUpdate.
        :type: list[ViewTypeTrigger]
        """

        self._triggers = triggers

    @property
    def settings_spec(self):
        """
        Gets the settings_spec of this ViewTypeUpdate.


        :return: The settings_spec of this ViewTypeUpdate.
        :rtype: SettingsSpec
        """
        return self._settings_spec

    @settings_spec.setter
    def settings_spec(self, settings_spec):
        """
        Sets the settings_spec of this ViewTypeUpdate.


        :param settings_spec: The settings_spec of this ViewTypeUpdate.
        :type: SettingsSpec
        """

        self._settings_spec = settings_spec

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
