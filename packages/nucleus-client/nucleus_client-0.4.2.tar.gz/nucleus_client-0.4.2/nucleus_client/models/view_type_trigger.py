# coding: utf-8

"""
    Nucleus REST API


    OpenAPI spec version: 0.4.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class ViewTypeTrigger(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name=None, transform_task=None, settings=None, related_trigger_name=None, dt_u=None):
        """
        ViewTypeTrigger - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'transform_task': 'str',
            'settings': 'Settings',
            'related_trigger_name': 'str',
            'dt_u': 'str'
        }

        self.attribute_map = {
            'name': 'name',
            'transform_task': 'transform_task',
            'settings': 'settings',
            'related_trigger_name': 'related_trigger_name',
            'dt_u': 'dt_u'
        }

        self._name = name
        self._transform_task = transform_task
        self._settings = settings
        self._related_trigger_name = related_trigger_name
        self._dt_u = dt_u

    @property
    def name(self):
        """
        Gets the name of this ViewTypeTrigger.


        :return: The name of this ViewTypeTrigger.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ViewTypeTrigger.


        :param name: The name of this ViewTypeTrigger.
        :type: str
        """

        self._name = name

    @property
    def transform_task(self):
        """
        Gets the transform_task of this ViewTypeTrigger.


        :return: The transform_task of this ViewTypeTrigger.
        :rtype: str
        """
        return self._transform_task

    @transform_task.setter
    def transform_task(self, transform_task):
        """
        Sets the transform_task of this ViewTypeTrigger.


        :param transform_task: The transform_task of this ViewTypeTrigger.
        :type: str
        """

        self._transform_task = transform_task

    @property
    def settings(self):
        """
        Gets the settings of this ViewTypeTrigger.


        :return: The settings of this ViewTypeTrigger.
        :rtype: Settings
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """
        Sets the settings of this ViewTypeTrigger.


        :param settings: The settings of this ViewTypeTrigger.
        :type: Settings
        """

        self._settings = settings

    @property
    def related_trigger_name(self):
        """
        Gets the related_trigger_name of this ViewTypeTrigger.


        :return: The related_trigger_name of this ViewTypeTrigger.
        :rtype: str
        """
        return self._related_trigger_name

    @related_trigger_name.setter
    def related_trigger_name(self, related_trigger_name):
        """
        Sets the related_trigger_name of this ViewTypeTrigger.


        :param related_trigger_name: The related_trigger_name of this ViewTypeTrigger.
        :type: str
        """

        self._related_trigger_name = related_trigger_name

    @property
    def dt_u(self):
        """
        Gets the dt_u of this ViewTypeTrigger.


        :return: The dt_u of this ViewTypeTrigger.
        :rtype: str
        """
        return self._dt_u

    @dt_u.setter
    def dt_u(self, dt_u):
        """
        Sets the dt_u of this ViewTypeTrigger.


        :param dt_u: The dt_u of this ViewTypeTrigger.
        :type: str
        """

        self._dt_u = dt_u

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
