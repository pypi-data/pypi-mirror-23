# coding: utf-8

"""
    Pluxbox Radiomanager Client

    Pluxbox RadioManager gives you the power, flexibility and speed you always wanted in a lightweight and easy-to-use web-based radio solution. With Pluxbox RadioManager you can organise your radio workflow and automate your omnichannel communication with your listeners. We offer wide range specialised services for the radio and connections like Hybrid Radio, Visual Radio, your website and social media without losing focus on your broadcast. For more information visit https://pluxbox.com

    OpenAPI spec version: 2.0
    Contact: support@pluxbox.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import os
import sys
import unittest

import radiomanager_sdk
from radiomanager_sdk.rest import ApiException
from radiomanager_sdk.apis.item_api import ItemApi


class TestItemApi(unittest.TestCase):
    """ ItemApi unit test stubs """

    def setUp(self):
        self.api = radiomanager_sdk.apis.item_api.ItemApi()

    def tearDown(self):
        pass

    def test_create_item(self):
        """
        Test case for create_item

        Create an new item.
        """
        pass

    def test_current_item_post_structure(self):
        """
        Test case for current_item_post_structure

        Post a current playing item, keep structure
        """
        pass

    def test_current_item_post_timing(self):
        """
        Test case for current_item_post_timing

        Post a current playing item
        """
        pass

    def test_delete_item_by_id(self):
        """
        Test case for delete_item_by_id

        Delete item by ID.
        """
        pass

    def test_get_item_by_id(self):
        """
        Test case for get_item_by_id

        Get extended item details by ID.
        """
        pass

    def test_list_items(self):
        """
        Test case for list_items

        Get a list of all the items currently in your station.
        """
        pass

    def test_playlist_post_structure(self):
        """
        Test case for playlist_post_structure

        Post a playlist, keep current structure
        """
        pass

    def test_playlist_post_timing(self):
        """
        Test case for playlist_post_timing

        Post a playlist
        """
        pass

    def test_update_item_by_id(self):
        """
        Test case for update_item_by_id

        Update extended item details by ID.
        """
        pass


if __name__ == '__main__':
    unittest.main()
