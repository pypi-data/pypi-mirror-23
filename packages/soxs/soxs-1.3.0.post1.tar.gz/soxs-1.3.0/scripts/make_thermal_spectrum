#!/usr/bin/env python

import argparse
from soxs import ApecGenerator

parser = argparse.ArgumentParser(description='Create a thermal spectrum and write it to a file. ' +
                                 'The abundances of individual elements can be set by supplying '
                                 'optional arguments in the form of --O=0.5, --Mg=0.6, etc.')
parser.add_argument("kT", help='The temperature in keV.')
parser.add_argument("abund", type=float, help="The metal abundance in solar units.")
parser.add_argument("redshift", type=float, help="The redshift of the source.")
parser.add_argument("norm", type=float, 
                    help='The normalization of the model, in the standard Xspec units of '+
                         '1.0e-14*EM/(4*pi*(1+z)**2*D_A**2).')
parser.add_argument("specfile", type=str, help="The filename to write the spectrum to.")
parser.add_argument("--velocity", default=0.0,
                    help='The velocity broadening parameter, in units of km/s. Default: 0.0')
parser.add_argument("--emin", default=0.01,
                    help='The minimum energy in keV. Default: 0.01')
parser.add_argument("--emax", default=50.0, 
                    help='The maximum energy in keV. Default: 50.0')
parser.add_argument("--nbins", type=int, default=10000, 
                    help='The number of bins in the spectrum. Default: 10000')
parser.add_argument("--apec_vers", type=str, default="3.0.8", 
                    help='The version of the AtomDB tables to use. Default: 3.0.8')
parser.add_argument("--absorb", type=str,
                    help='Apply foreground Galactic absorption. Default is "wabs".')
parser.add_argument("--nh", default=0.02, 
                    help='The hydrogen column in units of 10**22 atoms/cm**2. Default: 0.02')
parser.add_argument("--overwrite", action='store_true', 
                    help='Overwrite an existing file with the same name.')
parser.add_argument("--nolines", action='store_true',
                    help="Make a spectrum without lines.")
feature_parser = parser.add_mutually_exclusive_group(required=False)
feature_parser.add_argument("--broadening", dest='broadening', action='store_true',
                            help='Turn thermal and velocity broadening on. On by default.')
feature_parser.add_argument("--no_broadening", dest='broadening', action='store_false',
                            help='Turn thermal and velocity broadening off. On by default.')
parser.set_defaults(broadening=True)

args, unknown = parser.parse_known_args()

var_elem = None
elem_abund = None

if len(unknown) > 0:
    var_elem = []
    elem_abund = {}
    for uarg in unknown:
        key, value = uarg[2:].split("=")
        var_elem.append(key)
        elem_abund[key] = float(value)

agen = ApecGenerator(args.emin, args.emax, args.nbins, apec_vers=args.apec_vers, 
                     broadening=args.broadening, nolines=args.nolines, 
                     var_elem=var_elem)
spec = agen.get_spectrum(args.kT, args.abund, args.redshift, args.norm, 
                         velocity=args.velocity, elem_abund=elem_abund)

if args.absorb is not None:
    spec.apply_foreground_absorption(args.nh, model=args.absorb)

spec.write_file(args.specfile, overwrite=args.overwrite)