"""Collection of helper methods and functions."""
import re
import sys
import unicodedata

from functools import wraps


def check_len(fnc):
    """Validate generators requiring a `length` argument."""
    @wraps(fnc)
    def wrapped(*args, **kwargs):
        """"Make sure that we verify the `length` argument."""
        if args and len(args) == 1:
            is_positive_int(args[0])
        if 'length' in kwargs.keys():
            if kwargs.get('length') is not None:
                is_positive_int(kwargs.get('length'))

        result = fnc(*args, **kwargs)

        return result
    return wrapped


def check_validation(fcn):
    """Decorate functions requiring validation.

    Simple decorator to validate values generated by function `fnc`
    according to parameters `validator`, `default` and `tries`.

    :param fcn: function to be enhanced
    :return: decorated function
    """
    @wraps(fcn)
    def validate(*args, **kwargs):
        """Perform the validation on decorated function."""
        validator = kwargs.get('validator')
        default = kwargs.get('default')
        tries = kwargs.get('tries', 10)
        if validator and default is None:
            raise ValueError('If "validator" param is defined, "default" '
                             'parameter must not be None')
        if validator is None:
            def validator_fcn(_):
                """No validation passed."""
                return True
        else:
            validator_fcn = validator

        if not callable(validator_fcn):
            def regex_validator(value):
                """Perform RegEx validation."""
                return re.match(validator, value)

            validator_fcn = regex_validator

        # Removing params related to validation but not fcn
        for key in ('validator', 'default', 'tries'):
            if key in kwargs:
                kwargs.pop(key)

        for _ in range(tries):
            value = fcn(*args, **kwargs)
            if validator_fcn(value):
                return value

        return default

    return validate


def is_positive_int(length):
    """Check that `length` argument is an integer greater than zero.

    :param int length: The desired length of the string
    :raises: `ValueError` if `length` is not an `int` or is less than 1.

    """
    if not isinstance(length, int):
        raise ValueError('{0} is not numeric.'.format(length))
    if length <= 0:
        raise ValueError('{0} is an invalid \'length\'.'.format(length))


def unicode_letters_generator():
    """Generate unicode characters in the letters category.

    :return: a generator which will generates all unicode letters available

    """
    chr_function = chr
    range_function = range
    # Use sys.maxunicode instead of 0x10FFFF to avoid the exception below, in a
    # narrow Python build (before Python 3.3)
    # ValueError: unichr() arg not in range(0x10000) (narrow Python build)
    # For more information, read PEP 261.
    for i in range_function(sys.maxunicode):
        char = chr_function(i)
        if unicodedata.category(char).startswith('L'):
            yield char
